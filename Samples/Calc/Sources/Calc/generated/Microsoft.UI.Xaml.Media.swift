// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import C;

extension Microsoft.UI.Xaml.Media {
// type: Microsoft.UI.Xaml.Media.Brush
// runtime class
open class Brush
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IBrush;
    public init(plok: Microsoft.UI.Xaml.Media.IBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IBrush { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IBrushFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IBrushFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Brush");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IBrushStatics {
        static var x : IBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Brush")
    }
    public static var BrushStatics : IBrushStatics {
        _IBrushStatics.x
    }
    public static func get_OpacityProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.get_OpacityProperty());
    }
    public static func get_TransformProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.get_TransformProperty());
    }
    public static func get_RelativeTransformProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.get_RelativeTransformProperty());
    }
    public static var OpacityProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.OpacityProperty);
        }
    }
    public static var RelativeTransformProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.RelativeTransformProperty);
        }
    }
    public static var TransformProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.TransformProperty);
        }
    }
    public func get_Opacity() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Transform() throws -> Optional<Microsoft.UI.Xaml.Media.Transform> {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.get_Transform());
    }
    public func put_Transform(value : Optional<Microsoft.UI.Xaml.Media.Transform>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.put_Transform(value: value!.Interface());
    }
    public func get_RelativeTransform() throws -> Optional<Microsoft.UI.Xaml.Media.Transform> {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.get_RelativeTransform());
    }
    public func put_RelativeTransform(value : Optional<Microsoft.UI.Xaml.Media.Transform>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.put_RelativeTransform(value: value!.Interface());
    }
    public var Opacity : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var RelativeTransform : Optional<Microsoft.UI.Xaml.Media.Transform> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.RelativeTransform);
        }
    }
    public var Transform : Optional<Microsoft.UI.Xaml.Media.Transform> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.Transform);
        }
    }
    // overridable method skipped: PopulatePropertyInfoOverride
    public func PopulatePropertyInfo(propertyName : Swift.String, propertyInfo : Optional<Microsoft.UI.Composition.AnimationPropertyInfo>) throws -> Void {
        let _ifc : Microsoft.UI.Composition.IAnimationObject = try _self.QueryInterface();
        return try _ifc.PopulatePropertyInfo(propertyName: propertyName, propertyInfo: propertyInfo!.Interface());
    }
}

// type: Microsoft.UI.Xaml.Media.CacheMode
// runtime class
open class CacheMode
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.ICacheMode;
    public init(plok: Microsoft.UI.Xaml.Media.ICacheMode?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ICacheMode { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.ICacheModeFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ICacheModeFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.CacheMode");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.Media.ElementCompositeMode
// enum type
public typealias ElementCompositeMode = _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode;

// type: Microsoft.UI.Xaml.Media.FontFamily
// runtime class
open class FontFamily
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Media.IFontFamily;
    public init(plok: Microsoft.UI.Xaml.Media.IFontFamily?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IFontFamily { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IFontFamilyFactory
    public init(familyName : Swift.String) throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IFontFamilyFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.FontFamily");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstanceWithName(familyName: familyName, baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IFontFamilyStatics
    // method not needed: get_Source
}

// type: Microsoft.UI.Xaml.Media.GeneralTransform
// runtime class
open class GeneralTransform
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IGeneralTransform;
    public init(plok: Microsoft.UI.Xaml.Media.IGeneralTransform?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IGeneralTransform { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IGeneralTransformFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IGeneralTransformFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.GeneralTransform");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Inverse
    // method not needed: TransformPoint
    // method not needed: TryTransform
    // method not needed: TransformBounds
    // instance interface not needed: Microsoft.UI.Xaml.Media.IGeneralTransformOverrides
}

// type: Microsoft.UI.Xaml.Media.Geometry
// runtime class
open class Geometry
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IGeometry;
    public init(plok: Microsoft.UI.Xaml.Media.IGeometry?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IGeometry { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IGeometryFactory
// composable interface not needed: Microsoft.UI.Xaml.Media.IGeometryFactory
    // static interface not needed: Microsoft.UI.Xaml.Media.IGeometryStatics
    // method not needed: get_Transform
    // method not needed: put_Transform
    // method not needed: get_Bounds
}

// type: Microsoft.UI.Xaml.Media.IBrush
// interface type
open class IBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2de3cb83, Data2: 0x1329, Data3 : 0x5679, Data4 : (0x88, 0xf8, 0xc8, 0x22, 0xbc, 0x54, 0x42, 0xcb)) }
    // [IsSpecialName] System.Double get_Opacity()
    private func _n_get_Opacity(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, __presult))
        }
    }
    public func get_Opacity() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Opacity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Opacity(System.Double)
    private func _n_put_Opacity(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
        }
    }
    public func put_Opacity(value : Swift.Double) throws -> Void {
        try self._n_put_Opacity(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Transform get_Transform()
    private func _n_get_Transform(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, __presult))
        }
    }
    public func get_Transform() throws -> Optional<Microsoft.UI.Xaml.Media.ITransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>> = nil;
        try self._n_get_Transform(&__result);
        return Microsoft.UI.Xaml.Media.ITransform(consuming: __result);
    }
    // [IsSpecialName] void put_Transform(Microsoft.UI.Xaml.Media.Transform)
    private func _n_put_Transform(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform(pThis, value))
        }
    }
    public func put_Transform(value : Optional<Microsoft.UI.Xaml.Media.ITransform>) throws -> Void {
        try self._n_put_Transform(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Transform get_RelativeTransform()
    private func _n_get_RelativeTransform(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RelativeTransform(pThis, __presult))
        }
    }
    public func get_RelativeTransform() throws -> Optional<Microsoft.UI.Xaml.Media.ITransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>> = nil;
        try self._n_get_RelativeTransform(&__result);
        return Microsoft.UI.Xaml.Media.ITransform(consuming: __result);
    }
    // [IsSpecialName] void put_RelativeTransform(Microsoft.UI.Xaml.Media.Transform)
    private func _n_put_RelativeTransform(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RelativeTransform(pThis, value))
        }
    }
    public func put_RelativeTransform(value : Optional<Microsoft.UI.Xaml.Media.ITransform>) throws -> Void {
        try self._n_put_RelativeTransform(RawPointer(value));
    }
    public var Opacity : Swift.Double {
        get throws {
            return try get_Opacity();
        }
    }
    public var RelativeTransform : Optional<Microsoft.UI.Xaml.Media.ITransform> {
        get throws {
            return try get_RelativeTransform();
        }
    }
    public var Transform : Optional<Microsoft.UI.Xaml.Media.ITransform> {
        get throws {
            return try get_Transform();
        }
    }
} // IBrush


// type: Microsoft.UI.Xaml.Media.IBrushFactory
// interface type
// COMPOSITION INTERFACE
open class IBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb5258717, Data2: 0x6c49, Data3 : 0x5ba5, Data4 : (0x87, 0xfd, 0x35, 0xdf, 0x38, 0x26, 0x47, 0xa5)) }
    // Microsoft.UI.Xaml.Media.Brush CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
} // IBrushFactory


// type: Microsoft.UI.Xaml.Media.IBrushOverrides
// interface type
open class IBrushOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6b08394, Data2: 0xbacf, Data3 : 0x53db, Data4 : (0x9a, 0xc7, 0xbe, 0x1c, 0x69, 0x3e, 0x35, 0x13)) }
    // void PopulatePropertyInfoOverride(System.String, Microsoft.UI.Composition.AnimationPropertyInfo)
    private func _n_PopulatePropertyInfoOverride(_ propertyName : Optional<HSTRING>, _ animationPropertyInfo : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PopulatePropertyInfoOverride(pThis, propertyName, animationPropertyInfo))
        }
    }
    public func PopulatePropertyInfoOverride(propertyName : Optional<Swift.String>, animationPropertyInfo : Optional<Microsoft.UI.Composition.IAnimationPropertyInfo>) throws -> Void {
        let __hstr_propertyName = try HString(propertyName!);
        return try withExtendedLifetime(__hstr_propertyName) {
        try self._n_PopulatePropertyInfoOverride(__hstr_propertyName.Raw(), RawPointer(animationPropertyInfo));
        }
    }
} // IBrushOverrides


// type: Microsoft.UI.Xaml.Media.IBrushStatics
// interface type
open class IBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5b854f50, Data2: 0xf818, Data3 : 0x5f01, Data4 : (0x91, 0xb0, 0x28, 0x13, 0x2d, 0x3f, 0x59, 0x57)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OpacityProperty()
    private func _n_get_OpacityProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpacityProperty(pThis, __presult))
        }
    }
    public func get_OpacityProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OpacityProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TransformProperty()
    private func _n_get_TransformProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformProperty(pThis, __presult))
        }
    }
    public func get_TransformProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TransformProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RelativeTransformProperty()
    private func _n_get_RelativeTransformProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RelativeTransformProperty(pThis, __presult))
        }
    }
    public func get_RelativeTransformProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RelativeTransformProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var OpacityProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OpacityProperty();
        }
    }
    public var RelativeTransformProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RelativeTransformProperty();
        }
    }
    public var TransformProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TransformProperty();
        }
    }
} // IBrushStatics


// type: Microsoft.UI.Xaml.Media.ICacheMode
// interface type
open class ICacheMode
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2ff1a1cb, Data2: 0x0f48, Data3 : 0x53fd, Data4 : (0xb1, 0xde, 0xe2, 0x22, 0x3d, 0xfb, 0x2f, 0xf6)) }
} // ICacheMode


// type: Microsoft.UI.Xaml.Media.ICacheModeFactory
// interface type
// COMPOSITION INTERFACE
open class ICacheModeFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe257811e, Data2: 0xdcc5, Data3 : 0x51d8, Data4 : (0x82, 0x9a, 0x3e, 0x94, 0x00, 0x19, 0x8a, 0x41)) }
    // Microsoft.UI.Xaml.Media.CacheMode CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.ICacheMode> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.ICacheMode(consuming: __result);
    }
} // ICacheModeFactory


// type: Microsoft.UI.Xaml.Media.IFontFamily
// interface type
open class IFontFamily
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x18fa5bc1, Data2: 0x7294, Data3 : 0x527c, Data4 : (0xbb, 0x02, 0xb2, 0x13, 0xe0, 0xb3, 0xa2, 0xa3)) }
// method not needed: get_Source
} // IFontFamily


// type: Microsoft.UI.Xaml.Media.IFontFamilyFactory
// interface type
// COMPOSITION INTERFACE
open class IFontFamilyFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61b88a77, Data2: 0xd0f9, Data3 : 0x5e9e, Data4 : (0x8c, 0x28, 0xed, 0xa0, 0x1f, 0xed, 0xe2, 0x2e)) }
    // Microsoft.UI.Xaml.Media.FontFamily CreateInstanceWithName(System.String, System.Object, ref System.Object)
    private func _n_CreateInstanceWithName(_ familyName : Optional<HSTRING>, _ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithName(pThis, familyName, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstanceWithName(familyName : Optional<Swift.String>, baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        let __hstr_familyName = try HString(familyName!);
        return try withExtendedLifetime(__hstr_familyName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstanceWithName(__hstr_familyName.Raw(), RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IFontFamily(consuming: __result);
        }
    }
} // IFontFamilyFactory


// type: Microsoft.UI.Xaml.Media.IGeneralTransform
// interface type
open class IGeneralTransform
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x04eedeeb, Data2: 0x31e5, Data3 : 0x54c0, Data4 : (0xae, 0x3f, 0x8b, 0xd0, 0x66, 0x45, 0xd3, 0x39)) }
// method not needed: get_Inverse
// method not needed: TransformPoint
// method not needed: TryTransform
// method not needed: TransformBounds
} // IGeneralTransform


// type: Microsoft.UI.Xaml.Media.IGeneralTransformFactory
// interface type
// COMPOSITION INTERFACE
open class IGeneralTransformFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f1025a3, Data2: 0x5391, Data3 : 0x5d1b, Data4 : (0x83, 0x82, 0x3c, 0xaa, 0xa1, 0xd2, 0x6a, 0x96)) }
    // Microsoft.UI.Xaml.Media.GeneralTransform CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IGeneralTransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IGeneralTransform(consuming: __result);
    }
} // IGeneralTransformFactory


// type: Microsoft.UI.Xaml.Media.IGeometry
// interface type
open class IGeometry
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdc102dcc, Data2: 0x3be2, Data3 : 0x5414, Data4 : (0x85, 0x99, 0x94, 0xb6, 0xe7, 0x6e, 0xf3, 0x9b)) }
// method not needed: get_Transform
// method not needed: put_Transform
// method not needed: get_Bounds
} // IGeometry


// type: Microsoft.UI.Xaml.Media.IProjection
// interface type
open class IProjection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc95364b3, Data2: 0x6058, Data3 : 0x5ee5, Data4 : (0x9e, 0x28, 0xd3, 0x8b, 0x76, 0x79, 0xfc, 0xd4)) }
} // IProjection


// type: Microsoft.UI.Xaml.Media.IProjectionFactory
// interface type
// COMPOSITION INTERFACE
open class IProjectionFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x870ea34f, Data2: 0xdb61, Data3 : 0x5b75, Data4 : (0x89, 0xad, 0xe0, 0x48, 0x0c, 0x80, 0x29, 0x37)) }
    // Microsoft.UI.Xaml.Media.Projection CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IProjection> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IProjection(consuming: __result);
    }
} // IProjectionFactory


// type: Microsoft.UI.Xaml.Media.IRectangleGeometry
// interface type
open class IRectangleGeometry
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6143890, Data2: 0xa5f5, Data3 : 0x54e0, Data4 : (0xab, 0x42, 0xd8, 0x8b, 0xab, 0x45, 0x1f, 0x04)) }
// method not needed: get_Rect
// method not needed: put_Rect
} // IRectangleGeometry


// type: Microsoft.UI.Xaml.Media.IShadow
// interface type
open class IShadow
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcc12fd6a, Data2: 0x50aa, Data3 : 0x5eb3, Data4 : (0x9a, 0x0e, 0xb9, 0x38, 0xb4, 0x54, 0xc4, 0x39)) }
} // IShadow


// type: Microsoft.UI.Xaml.Media.ISolidColorBrush
// interface type
open class ISolidColorBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb3865c31, Data2: 0x37c8, Data3 : 0x55c1, Data4 : (0x8a, 0x72, 0xd4, 0x1c, 0x67, 0x64, 0x2e, 0x2a)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
} // ISolidColorBrush


// type: Microsoft.UI.Xaml.Media.ISolidColorBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ISolidColorBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7b559384, Data2: 0x4daa, Data3 : 0x54f4, Data4 : (0x91, 0xef, 0x33, 0xa2, 0x3f, 0xd8, 0x16, 0xca)) }
    // Microsoft.UI.Xaml.Media.SolidColorBrush CreateInstanceWithColor(Windows.UI.Color)
    private func _n_CreateInstanceWithColor(_ color : _q_CWindows_CUI_CColor, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithColor(pThis, color, __presult))
        }
    }
    public func CreateInstanceWithColor(color : Windows.UI.Color) throws -> Optional<Microsoft.UI.Xaml.Media.ISolidColorBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>> = nil;
        try self._n_CreateInstanceWithColor(color, &__result);
        return Microsoft.UI.Xaml.Media.ISolidColorBrush(consuming: __result);
    }
} // ISolidColorBrushFactory


// type: Microsoft.UI.Xaml.Media.ISolidColorBrushStatics
// interface type
open class ISolidColorBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6bc16da0, Data2: 0xc4e6, Data3 : 0x59b8, Data4 : (0x99, 0x5b, 0xb3, 0x1e, 0x48, 0x42, 0x4c, 0x07)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColorProperty()
    private func _n_get_ColorProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorProperty(pThis, __presult))
        }
    }
    public func get_ColorProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColorProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ColorProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColorProperty();
        }
    }
} // ISolidColorBrushStatics


// type: Microsoft.UI.Xaml.Media.ITransform
// interface type
open class ITransform
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x92a8dee5, Data2: 0x1413, Data3 : 0x56b9, Data4 : (0x8c, 0xca, 0x3c, 0x46, 0x91, 0x8f, 0xde, 0x1b)) }
} // ITransform


// type: Microsoft.UI.Xaml.Media.IXamlLight
// interface type
open class IXamlLight
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdcd20139, Data2: 0x8cd5, Data3 : 0x5da5, Data4 : (0xa2, 0x5c, 0x2b, 0x7b, 0x81, 0x3d, 0x8d, 0x58)) }
} // IXamlLight


// type: Microsoft.UI.Xaml.Media.IXamlLightFactory
// interface type
// COMPOSITION INTERFACE
open class IXamlLightFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x76da6306, Data2: 0x96fc, Data3 : 0x553e, Data4 : (0xbb, 0x39, 0x9a, 0x48, 0x01, 0xd0, 0x6f, 0x48)) }
    // Microsoft.UI.Xaml.Media.XamlLight CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IXamlLight> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IXamlLight(consuming: __result);
    }
} // IXamlLightFactory


// type: Microsoft.UI.Xaml.Media.Projection
// runtime class
open class Projection
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IProjection;
    public init(plok: Microsoft.UI.Xaml.Media.IProjection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IProjection { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IProjectionFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IProjectionFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Projection");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.Media.RectangleGeometry
// runtime class
public class RectangleGeometry
    :
    Microsoft.UI.Xaml.Media.Geometry
{
    private var _self : Microsoft.UI.Xaml.Media.IRectangleGeometry;
    public init(plok: Microsoft.UI.Xaml.Media.IRectangleGeometry?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IRectangleGeometry { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.RectangleGeometry")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IRectangleGeometryStatics
    // method not needed: get_Rect
    // method not needed: put_Rect
}

// type: Microsoft.UI.Xaml.Media.Shadow
// runtime class
open class Shadow
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IShadow;
    public init(plok: Microsoft.UI.Xaml.Media.IShadow?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IShadow { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IShadowFactory
// composable interface not needed: Microsoft.UI.Xaml.Media.IShadowFactory
}

// type: Microsoft.UI.Xaml.Media.SolidColorBrush
// runtime class
public class SolidColorBrush
    :
    Microsoft.UI.Xaml.Media.Brush
{
    private var _self : Microsoft.UI.Xaml.Media.ISolidColorBrush;
    public init(plok: Microsoft.UI.Xaml.Media.ISolidColorBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ISolidColorBrush { return _self; }
    public init(color : Windows.UI.Color) throws {
        let _af : ISolidColorBrushFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.SolidColorBrush");
        _self = try _af.CreateInstanceWithColor(color: color)!;
        try super.init(plok: _self.QueryInterface())
    }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.SolidColorBrush")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ISolidColorBrushStatics {
        static var x : ISolidColorBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.SolidColorBrush")
    }
    public static var SolidColorBrushStatics : ISolidColorBrushStatics {
        _ISolidColorBrushStatics.x
    }
    public static func get_ColorProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SolidColorBrushStatics.get_ColorProperty());
    }
    public static var ColorProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SolidColorBrushStatics.ColorProperty);
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.UI.Xaml.Media.ISolidColorBrush = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.ISolidColorBrush = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.ISolidColorBrush = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
}

// type: Microsoft.UI.Xaml.Media.Transform
// runtime class
open class Transform
    :
    Microsoft.UI.Xaml.Media.GeneralTransform
{
    private var _self : Microsoft.UI.Xaml.Media.ITransform;
    public init(plok: Microsoft.UI.Xaml.Media.ITransform?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ITransform { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.ITransformFactory
// composable interface not needed: Microsoft.UI.Xaml.Media.ITransformFactory
}

// type: Microsoft.UI.Xaml.Media.XamlLight
// runtime class
open class XamlLight
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IXamlLight;
    public init(plok: Microsoft.UI.Xaml.Media.IXamlLight?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IXamlLight { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IXamlLightFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IXamlLightFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.XamlLight");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IXamlLightStatics
    // instance interface not needed: Microsoft.UI.Xaml.Media.IXamlLightProtected
    // instance interface not needed: Microsoft.UI.Xaml.Media.IXamlLightOverrides
}

}
extension Microsoft.UI.Xaml.Media.ElementCompositeMode {
    public static var Inherit : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_Inherit;
        }
    }
    public static var SourceOver : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_SourceOver;
        }
    }
    public static var MinBlend : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_MinBlend;
        }
    }
}
