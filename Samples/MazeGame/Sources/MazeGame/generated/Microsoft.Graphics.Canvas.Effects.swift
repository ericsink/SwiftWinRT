// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import C;

extension Microsoft.Graphics.Canvas.Effects {
// type: Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect
// runtime class
public class AlphaMaskEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IAlphaMaskEffectStatics {
        static var x : IAlphaMaskEffectStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect")
    }
    public static var AlphaMaskEffectStatics : IAlphaMaskEffectStatics {
        _IAlphaMaskEffectStatics.x
    }
    public static func get_IsSupported() throws -> boolean {
        return try AlphaMaskEffectStatics.get_IsSupported();
    }
    public static var IsSupported : boolean {
        get throws {
        return try AlphaMaskEffectStatics.IsSupported;
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public func get_AlphaMask() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaMask();
    }
    public func put_AlphaMask(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaMask(source: source);
    }
    public var AlphaMask : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect = try _self.QueryInterface();
        return try _ifc.AlphaMask;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect
// runtime class
public class ArithmeticCompositeEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_MultiplyAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.get_MultiplyAmount();
    }
    public func put_MultiplyAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.put_MultiplyAmount(value: value);
    }
    public func get_Source1Amount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.get_Source1Amount();
    }
    public func put_Source1Amount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.put_Source1Amount(value: value);
    }
    public func get_Source2Amount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.get_Source2Amount();
    }
    public func put_Source2Amount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.put_Source2Amount(value: value);
    }
    public func get_Offset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.get_Offset();
    }
    public func put_Offset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.put_Offset(value: value);
    }
    public func get_Source1() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.get_Source1();
    }
    public func put_Source1(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.put_Source1(source: source);
    }
    public func get_Source2() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.get_Source2();
    }
    public func put_Source2(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.put_Source2(source: source);
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var MultiplyAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.MultiplyAmount;
        }
    }
    public var Offset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.Offset;
        }
    }
    public var Source1 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.Source1;
        }
    }
    public var Source1Amount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.Source1Amount;
        }
    }
    public var Source2 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.Source2;
        }
    }
    public var Source2Amount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect = try _self.QueryInterface();
        return try _ifc.Source2Amount;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.AtlasEffect
// runtime class
public class AtlasEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IAtlasEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IAtlasEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IAtlasEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.AtlasEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_SourceRectangle() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.get_SourceRectangle();
    }
    public func put_SourceRectangle(value : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.put_SourceRectangle(value: value);
    }
    public func get_PaddingRectangle() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.get_PaddingRectangle();
    }
    public func put_PaddingRectangle(value : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.put_PaddingRectangle(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var PaddingRectangle : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.PaddingRectangle;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SourceRectangle : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IAtlasEffect = try _self.QueryInterface();
        return try _ifc.SourceRectangle;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.BlendEffect
// runtime class
public class BlendEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IBlendEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IBlendEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IBlendEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.BlendEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.Effects.BlendEffectMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.get_Mode();
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.Effects.BlendEffectMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.put_Mode(value: value);
    }
    public func get_Background() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.get_Background();
    }
    public func put_Background(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.put_Background(source: source);
    }
    public func get_Foreground() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.get_Foreground();
    }
    public func put_Foreground(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.put_Foreground(source: source);
    }
    public var Background : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.Background;
        }
    }
    public var Foreground : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.Foreground;
        }
    }
    public var Mode : Microsoft.Graphics.Canvas.Effects.BlendEffectMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBlendEffect = try _self.QueryInterface();
        return try _ifc.Mode;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.BlendEffectMode
// enum type
public typealias BlendEffectMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode;

// type: Microsoft.Graphics.Canvas.Effects.BorderEffect
// runtime class
public class BorderEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IBorderEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IBorderEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IBorderEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.BorderEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ExtendX() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.get_ExtendX();
    }
    public func put_ExtendX(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.put_ExtendX(value: value);
    }
    public func get_ExtendY() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.get_ExtendY();
    }
    public func put_ExtendY(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.put_ExtendY(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var ExtendX : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.ExtendX;
        }
    }
    public var ExtendY : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.ExtendY;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBorderEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.BrightnessEffect
// runtime class
public class BrightnessEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IBrightnessEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IBrightnessEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.BrightnessEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_WhitePoint() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.get_WhitePoint();
    }
    public func put_WhitePoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.put_WhitePoint(value: value);
    }
    public func get_BlackPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.get_BlackPoint();
    }
    public func put_BlackPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.put_BlackPoint(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BlackPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.BlackPoint;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var WhitePoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IBrightnessEffect = try _self.QueryInterface();
        return try _ifc.WhitePoint;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect
// runtime class
public class ChromaKeyEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public func get_Tolerance() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.get_Tolerance();
    }
    public func put_Tolerance(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.put_Tolerance(value: value);
    }
    public func get_InvertAlpha() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.get_InvertAlpha();
    }
    public func put_InvertAlpha(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.put_InvertAlpha(value: value);
    }
    public func get_Feather() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.get_Feather();
    }
    public func put_Feather(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.put_Feather(value: value);
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.get_ColorHdr();
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.put_ColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.ColorHdr;
        }
    }
    public var Feather : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.Feather;
        }
    }
    public var InvertAlpha : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.InvertAlpha;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var Tolerance : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect = try _self.QueryInterface();
        return try _ifc.Tolerance;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ColorManagementEffect
// runtime class
public class ColorManagementEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IColorManagementEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IColorManagementEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ColorManagementEffect")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IColorManagementEffectStatics {
        static var x : IColorManagementEffectStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorManagementEffect")
    }
    public static var ColorManagementEffectStatics : IColorManagementEffectStatics {
        _IColorManagementEffectStatics.x
    }
    public static func IsBestQualitySupported(device : Optional<Microsoft.Graphics.Canvas.CanvasDevice>) throws -> boolean {
        return try ColorManagementEffectStatics.IsBestQualitySupported(device: device!.Interface());
    }
    public func get_SourceColorProfile() throws -> Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Effects.ColorManagementProfile(plok: _ifc.get_SourceColorProfile());
    }
    public func put_SourceColorProfile(value : Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.put_SourceColorProfile(value: value!.Interface());
    }
    public func get_SourceRenderingIntent() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.get_SourceRenderingIntent();
    }
    public func put_SourceRenderingIntent(value : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.put_SourceRenderingIntent(value: value);
    }
    public func get_OutputColorProfile() throws -> Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Effects.ColorManagementProfile(plok: _ifc.get_OutputColorProfile());
    }
    public func put_OutputColorProfile(value : Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.put_OutputColorProfile(value: value!.Interface());
    }
    public func get_OutputRenderingIntent() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.get_OutputRenderingIntent();
    }
    public func put_OutputRenderingIntent(value : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.put_OutputRenderingIntent(value: value);
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaMode(value: value);
    }
    public func get_Quality() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.get_Quality();
    }
    public func put_Quality(value : Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.put_Quality(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var OutputColorProfile : Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Effects.ColorManagementProfile(plok: _ifc.OutputColorProfile);
        }
    }
    public var OutputRenderingIntent : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.OutputRenderingIntent;
        }
    }
    public var Quality : Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.Quality;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SourceColorProfile : Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Effects.ColorManagementProfile(plok: _ifc.SourceColorProfile);
        }
    }
    public var SourceRenderingIntent : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementEffect = try _self.QueryInterface();
        return try _ifc.SourceRenderingIntent;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality
// enum type
public typealias ColorManagementEffectQuality = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality;

// type: Microsoft.Graphics.Canvas.Effects.ColorManagementGamma
// enum type
public typealias ColorManagementGamma = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma;

// type: Microsoft.Graphics.Canvas.Effects.ColorManagementProfile
// runtime class
public class ColorManagementProfile
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IColorManagementProfile?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IColorManagementProfile { return _self; }
    public init(colorSpace : Microsoft.Graphics.Canvas.CanvasColorSpace) throws {
        let _af : IColorManagementProfileFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorManagementProfile");
        _self = try _af.Create(colorSpace: colorSpace)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IColorManagementProfileStatics {
        static var x : IColorManagementProfileStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorManagementProfile")
    }
    public static var ColorManagementProfileStatics : IColorManagementProfileStatics {
        _IColorManagementProfileStatics.x
    }
    public static func CreateCustom(iccProfileLength : UINT32, iccProfile : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile> {
        return try Microsoft.Graphics.Canvas.Effects.ColorManagementProfile(plok: ColorManagementProfileStatics.CreateCustom(iccProfileLength: iccProfileLength, iccProfile: iccProfile));
    }
    public static func CreateSimple(simpleProfile : Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile) throws -> Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile> {
        return try Microsoft.Graphics.Canvas.Effects.ColorManagementProfile(plok: ColorManagementProfileStatics.CreateSimple(simpleProfile: simpleProfile));
    }
    public static func CreateExtended(colorSpace : Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace) throws -> Optional<Microsoft.Graphics.Canvas.Effects.ColorManagementProfile> {
        return try Microsoft.Graphics.Canvas.Effects.ColorManagementProfile(plok: ColorManagementProfileStatics.CreateExtended(colorSpace: colorSpace));
    }
    public static func IsSupported(type : Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType, device : Optional<Microsoft.Graphics.Canvas.CanvasDevice>) throws -> boolean {
        return try ColorManagementProfileStatics.IsSupported(type: type, device: device!.Interface());
    }
    public func get_ColorSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.get_ColorSpace();
    }
    public func get_IccProfile() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.get_IccProfile();
    }
    public func get_Type() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public func get_SimpleProfile() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.get_SimpleProfile();
    }
    public func get_ExtendedColorSpace() throws -> Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.get_ExtendedColorSpace();
    }
    public var ColorSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.ColorSpace;
        }
    }
    public var ExtendedColorSpace : Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.ExtendedColorSpace;
        }
    }
    public var IccProfile : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.IccProfile;
        }
    }
    public var SimpleProfile : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.SimpleProfile;
        }
    }
    public var Type_ : Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorManagementProfile = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType
// enum type
public typealias ColorManagementProfileType = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType;

// type: Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent
// enum type
public typealias ColorManagementRenderingIntent = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent;

// type: Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile
// struct type
public typealias ColorManagementSimpleProfile = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile;

// type: Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect
// runtime class
public class ColorMatrixEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ColorMatrix() throws -> Microsoft.Graphics.Canvas.Effects.Matrix5x4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_ColorMatrix();
    }
    public func put_ColorMatrix(value : Microsoft.Graphics.Canvas.Effects.Matrix5x4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_ColorMatrix(value: value);
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaMode(value: value);
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var ColorMatrix : Microsoft.Graphics.Canvas.Effects.Matrix5x4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.ColorMatrix;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ColorSourceEffect
// runtime class
public class ColorSourceEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IColorSourceEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IColorSourceEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IColorSourceEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ColorSourceEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorSourceEffect = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorSourceEffect = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorSourceEffect = try _self.QueryInterface();
        return try _ifc.get_ColorHdr();
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorSourceEffect = try _self.QueryInterface();
        return try _ifc.put_ColorHdr(value: value);
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorSourceEffect = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IColorSourceEffect = try _self.QueryInterface();
        return try _ifc.ColorHdr;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.CompositeEffect
// runtime class
public class CompositeEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ICompositeEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ICompositeEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ICompositeEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.CompositeEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.CanvasComposite {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICompositeEffect = try _self.QueryInterface();
        return try _ifc.get_Mode();
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICompositeEffect = try _self.QueryInterface();
        return try _ifc.put_Mode(value: value);
    }
    public func get_Sources() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICompositeEffect = try _self.QueryInterface();
        return try _ifc.get_Sources();
    }
    public var Mode : Microsoft.Graphics.Canvas.CanvasComposite {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICompositeEffect = try _self.QueryInterface();
        return try _ifc.Mode;
        }
    }
    public var Sources : Optional<ClosedGenerics.IVector_1__q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICompositeEffect = try _self.QueryInterface();
        return try _ifc.Sources;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ContrastEffect
// runtime class
public class ContrastEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IContrastEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IContrastEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IContrastEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ContrastEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Contrast() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.get_Contrast();
    }
    public func put_Contrast(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.put_Contrast(value: value);
    }
    public func get_ClampSource() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.get_ClampSource();
    }
    public func put_ClampSource(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.put_ClampSource(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var ClampSource : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.ClampSource;
        }
    }
    public var Contrast : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.Contrast;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IContrastEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect
// runtime class
public class ConvolveMatrixEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_KernelScale() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_KernelScale();
    }
    public func put_KernelScale(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_KernelScale(value: value);
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_InterpolationMode();
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_InterpolationMode(value: value);
    }
    public func get_KernelWidth() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_KernelWidth();
    }
    public func put_KernelWidth(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_KernelWidth(value: value);
    }
    public func get_KernelHeight() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_KernelHeight();
    }
    public func put_KernelHeight(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_KernelHeight(value: value);
    }
    public func get_KernelMatrix() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_KernelMatrix();
    }
    public func put_KernelMatrix(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_KernelMatrix(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_Divisor() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_Divisor();
    }
    public func put_Divisor(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_Divisor(value: value);
    }
    public func get_Offset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_Offset();
    }
    public func put_Offset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_Offset(value: value);
    }
    public func get_KernelOffset() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_KernelOffset();
    }
    public func put_KernelOffset(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_KernelOffset(value: value);
    }
    public func get_PreserveAlpha() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_PreserveAlpha();
    }
    public func put_PreserveAlpha(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_PreserveAlpha(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var Divisor : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.Divisor;
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.InterpolationMode;
        }
    }
    public var KernelHeight : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.KernelHeight;
        }
    }
    public var KernelMatrix : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.KernelMatrix;
        }
    }
    public var KernelOffset : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.KernelOffset;
        }
    }
    public var KernelScale : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.KernelScale;
        }
    }
    public var KernelWidth : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.KernelWidth;
        }
    }
    public var Offset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.Offset;
        }
    }
    public var PreserveAlpha : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.PreserveAlpha;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.CropEffect
// runtime class
public class CropEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ICropEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ICropEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ICropEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.CropEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_SourceRectangle() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.get_SourceRectangle();
    }
    public func put_SourceRectangle(value : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.put_SourceRectangle(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SourceRectangle : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICropEffect = try _self.QueryInterface();
        return try _ifc.SourceRectangle;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.CrossFadeEffect
// runtime class
public class CrossFadeEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.CrossFadeEffect")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICrossFadeEffectStatics {
        static var x : ICrossFadeEffectStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.CrossFadeEffect")
    }
    public static var CrossFadeEffectStatics : ICrossFadeEffectStatics {
        _ICrossFadeEffectStatics.x
    }
    public static func get_IsSupported() throws -> boolean {
        return try CrossFadeEffectStatics.get_IsSupported();
    }
    public static var IsSupported : boolean {
        get throws {
        return try CrossFadeEffectStatics.IsSupported;
        }
    }
    public func get_CrossFade() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.get_CrossFade();
    }
    public func put_CrossFade(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.put_CrossFade(value: value);
    }
    public func get_Source2() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.get_Source2();
    }
    public func put_Source2(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.put_Source2(source: source);
    }
    public func get_Source1() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.get_Source1();
    }
    public func put_Source1(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.put_Source1(source: source);
    }
    public var CrossFade : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.CrossFade;
        }
    }
    public var Source1 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.Source1;
        }
    }
    public var Source2 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect = try _self.QueryInterface();
        return try _ifc.Source2;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect
// runtime class
public class DirectionalBlurEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_BlurAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.get_BlurAmount();
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.put_BlurAmount(value: value);
    }
    public func get_Angle() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.get_Angle();
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.put_Angle(value: value);
    }
    public func get_Optimization() throws -> Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.get_Optimization();
    }
    public func put_Optimization(value : Microsoft.Graphics.Canvas.Effects.EffectOptimization) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.put_Optimization(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Angle : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.Angle;
        }
    }
    public var BlurAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.BlurAmount;
        }
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var Optimization : Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.Optimization;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect
// runtime class
public class DiscreteTransferEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_RedTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedTable();
    }
    public func put_RedTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_RedDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedDisable();
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedDisable(value: value);
    }
    public func get_GreenTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenTable();
    }
    public func put_GreenTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_GreenDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenDisable();
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenDisable(value: value);
    }
    public func get_BlueTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueTable();
    }
    public func put_BlueTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_BlueDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueDisable();
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueDisable(value: value);
    }
    public func get_AlphaTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaTable();
    }
    public func put_AlphaTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_AlphaDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaDisable();
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaDisable(value: value);
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaDisable;
        }
    }
    public var AlphaTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaTable;
        }
    }
    public var BlueDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueDisable;
        }
    }
    public var BlueTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueTable;
        }
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var GreenDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenDisable;
        }
    }
    public var GreenTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenTable;
        }
    }
    public var RedDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.RedDisable;
        }
    }
    public var RedTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.RedTable;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect
// runtime class
public class DisplacementMapEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Amount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.get_Amount();
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.put_Amount(value: value);
    }
    public func get_XChannelSelect() throws -> Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.get_XChannelSelect();
    }
    public func put_XChannelSelect(value : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.put_XChannelSelect(value: value);
    }
    public func get_YChannelSelect() throws -> Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.get_YChannelSelect();
    }
    public func put_YChannelSelect(value : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.put_YChannelSelect(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public func get_Displacement() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.get_Displacement();
    }
    public func put_Displacement(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.put_Displacement(source: source);
    }
    public var Amount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.Amount;
        }
    }
    public var Displacement : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.Displacement;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var XChannelSelect : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.XChannelSelect;
        }
    }
    public var YChannelSelect : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect = try _self.QueryInterface();
        return try _ifc.YChannelSelect;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect
// runtime class
public class DistantDiffuseEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Azimuth() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_Azimuth();
    }
    public func put_Azimuth(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_Azimuth(value: value);
    }
    public func get_Elevation() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_Elevation();
    }
    public func put_Elevation(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_Elevation(value: value);
    }
    public func get_DiffuseAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_DiffuseAmount();
    }
    public func put_DiffuseAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_DiffuseAmount(value: value);
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapScale();
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapScale(value: value);
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightColor();
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightColor(value: value);
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapKernelSize();
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapKernelSize(value: value);
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapInterpolationMode();
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapInterpolationMode(value: value);
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightColorHdr();
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Azimuth : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.Azimuth;
        }
    }
    public var DiffuseAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.DiffuseAmount;
        }
    }
    public var Elevation : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.Elevation;
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapInterpolationMode;
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapKernelSize;
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapScale;
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightColor;
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightColorHdr;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect
// runtime class
public class DistantSpecularEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Azimuth() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_Azimuth();
    }
    public func put_Azimuth(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_Azimuth(value: value);
    }
    public func get_Elevation() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_Elevation();
    }
    public func put_Elevation(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_Elevation(value: value);
    }
    public func get_SpecularExponent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_SpecularExponent();
    }
    public func put_SpecularExponent(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_SpecularExponent(value: value);
    }
    public func get_SpecularAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_SpecularAmount();
    }
    public func put_SpecularAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_SpecularAmount(value: value);
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapScale();
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapScale(value: value);
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightColor();
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightColor(value: value);
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapKernelSize();
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapKernelSize(value: value);
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapInterpolationMode();
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapInterpolationMode(value: value);
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightColorHdr();
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Azimuth : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.Azimuth;
        }
    }
    public var Elevation : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.Elevation;
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapInterpolationMode;
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapKernelSize;
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapScale;
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightColor;
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightColorHdr;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SpecularAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.SpecularAmount;
        }
    }
    public var SpecularExponent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect = try _self.QueryInterface();
        return try _ifc.SpecularExponent;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect
// runtime class
public class DpiCompensationEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.get_InterpolationMode();
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.put_InterpolationMode(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_SourceDpi() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.get_SourceDpi();
    }
    public func put_SourceDpi(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.put_SourceDpi(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.InterpolationMode;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SourceDpi : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect = try _self.QueryInterface();
        return try _ifc.SourceDpi;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect
// runtime class
public class EdgeDetectionEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Amount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.get_Amount();
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.put_Amount(value: value);
    }
    public func get_BlurAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.get_BlurAmount();
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.put_BlurAmount(value: value);
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.get_Mode();
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.put_Mode(value: value);
    }
    public func get_OverlayEdges() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.get_OverlayEdges();
    }
    public func put_OverlayEdges(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.put_OverlayEdges(value: value);
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaMode(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var Amount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.Amount;
        }
    }
    public var BlurAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.BlurAmount;
        }
    }
    public var Mode : Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.Mode;
        }
    }
    public var OverlayEdges : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.OverlayEdges;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode
// enum type
public typealias EdgeDetectionEffectMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode;

// type: Microsoft.Graphics.Canvas.Effects.EffectBorderMode
// enum type
public typealias EffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode;

// type: Microsoft.Graphics.Canvas.Effects.EffectChannelSelect
// enum type
public typealias EffectChannelSelect = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect;

// type: Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace
// enum type
public typealias EffectHueColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace;

// type: Microsoft.Graphics.Canvas.Effects.EffectOptimization
// enum type
public typealias EffectOptimization = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization;

// type: Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D
// runtime class
public class EffectTransferTable3D
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D { return _self; }
    private struct _IEffectTransferTable3DStatics {
        static var x : IEffectTransferTable3DStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D")
    }
    public static var EffectTransferTable3DStatics : IEffectTransferTable3DStatics {
        _IEffectTransferTable3DStatics.x
    }
    public static func CreateFromColors(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, colorsLength : UINT32, colors : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CColor>>, sizeB : Swift.Int32, sizeG : Swift.Int32, sizeR : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D> {
        return try Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D(plok: EffectTransferTable3DStatics.CreateFromColors(resourceCreator: resourceCreator, colorsLength: colorsLength, colors: colors, sizeB: sizeB, sizeG: sizeG, sizeR: sizeR));
    }
    public static func CreateFromBytes(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, bytesLength : UINT32, bytes : Optional<UnsafeMutablePointer<UINT8>>, sizeB : Swift.Int32, sizeG : Swift.Int32, sizeR : Swift.Int32, format : Windows.Graphics.DirectX.DirectXPixelFormat) throws -> Optional<Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D> {
        return try Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D(plok: EffectTransferTable3DStatics.CreateFromBytes(resourceCreator: resourceCreator, bytesLength: bytesLength, bytes: bytes, sizeB: sizeB, sizeG: sizeG, sizeR: sizeR, format: format));
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Effects.EmbossEffect
// runtime class
public class EmbossEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IEmbossEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IEmbossEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IEmbossEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.EmbossEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Amount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.get_Amount();
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.put_Amount(value: value);
    }
    public func get_Angle() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.get_Angle();
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.put_Angle(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Amount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.Amount;
        }
    }
    public var Angle : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.Angle;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IEmbossEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ExposureEffect
// runtime class
public class ExposureEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IExposureEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IExposureEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IExposureEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ExposureEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Exposure() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IExposureEffect = try _self.QueryInterface();
        return try _ifc.get_Exposure();
    }
    public func put_Exposure(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IExposureEffect = try _self.QueryInterface();
        return try _ifc.put_Exposure(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IExposureEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IExposureEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Exposure : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IExposureEffect = try _self.QueryInterface();
        return try _ifc.Exposure;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IExposureEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace
// enum type
public typealias ExtendedColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace;

// type: Microsoft.Graphics.Canvas.Effects.GammaTransferEffect
// runtime class
public class GammaTransferEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.GammaTransferEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_RedAmplitude() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedAmplitude();
    }
    public func put_RedAmplitude(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedAmplitude(value: value);
    }
    public func get_RedExponent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedExponent();
    }
    public func put_RedExponent(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedExponent(value: value);
    }
    public func get_RedOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedOffset();
    }
    public func put_RedOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedOffset(value: value);
    }
    public func get_RedDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedDisable();
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedDisable(value: value);
    }
    public func get_GreenAmplitude() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenAmplitude();
    }
    public func put_GreenAmplitude(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenAmplitude(value: value);
    }
    public func get_GreenExponent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenExponent();
    }
    public func put_GreenExponent(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenExponent(value: value);
    }
    public func get_GreenOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenOffset();
    }
    public func put_GreenOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenOffset(value: value);
    }
    public func get_GreenDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenDisable();
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenDisable(value: value);
    }
    public func get_BlueAmplitude() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueAmplitude();
    }
    public func put_BlueAmplitude(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueAmplitude(value: value);
    }
    public func get_BlueExponent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueExponent();
    }
    public func put_BlueExponent(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueExponent(value: value);
    }
    public func get_BlueOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueOffset();
    }
    public func put_BlueOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueOffset(value: value);
    }
    public func get_BlueDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueDisable();
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueDisable(value: value);
    }
    public func get_AlphaAmplitude() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaAmplitude();
    }
    public func put_AlphaAmplitude(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaAmplitude(value: value);
    }
    public func get_AlphaExponent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaExponent();
    }
    public func put_AlphaExponent(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaExponent(value: value);
    }
    public func get_AlphaOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaOffset();
    }
    public func put_AlphaOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaOffset(value: value);
    }
    public func get_AlphaDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaDisable();
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaDisable(value: value);
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaAmplitude : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaAmplitude;
        }
    }
    public var AlphaDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaDisable;
        }
    }
    public var AlphaExponent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaExponent;
        }
    }
    public var AlphaOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaOffset;
        }
    }
    public var BlueAmplitude : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueAmplitude;
        }
    }
    public var BlueDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueDisable;
        }
    }
    public var BlueExponent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueExponent;
        }
    }
    public var BlueOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueOffset;
        }
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var GreenAmplitude : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenAmplitude;
        }
    }
    public var GreenDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenDisable;
        }
    }
    public var GreenExponent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenExponent;
        }
    }
    public var GreenOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenOffset;
        }
    }
    public var RedAmplitude : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.RedAmplitude;
        }
    }
    public var RedDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.RedDisable;
        }
    }
    public var RedExponent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.RedExponent;
        }
    }
    public var RedOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.RedOffset;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect
// runtime class
public class GaussianBlurEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_BlurAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.get_BlurAmount();
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.put_BlurAmount(value: value);
    }
    public func get_Optimization() throws -> Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.get_Optimization();
    }
    public func put_Optimization(value : Microsoft.Graphics.Canvas.Effects.EffectOptimization) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.put_Optimization(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BlurAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.BlurAmount;
        }
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var Optimization : Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.Optimization;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.GrayscaleEffect
// runtime class
public class GrayscaleEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.GrayscaleEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect
// runtime class
public class HighlightsAndShadowsEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Highlights() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.get_Highlights();
    }
    public func put_Highlights(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.put_Highlights(value: value);
    }
    public func get_Shadows() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.get_Shadows();
    }
    public func put_Shadows(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.put_Shadows(value: value);
    }
    public func get_Clarity() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.get_Clarity();
    }
    public func put_Clarity(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.put_Clarity(value: value);
    }
    public func get_MaskBlurAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.get_MaskBlurAmount();
    }
    public func put_MaskBlurAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.put_MaskBlurAmount(value: value);
    }
    public func get_SourceIsLinearGamma() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.get_SourceIsLinearGamma();
    }
    public func put_SourceIsLinearGamma(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.put_SourceIsLinearGamma(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Clarity : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.Clarity;
        }
    }
    public var Highlights : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.Highlights;
        }
    }
    public var MaskBlurAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.MaskBlurAmount;
        }
    }
    public var Shadows : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.Shadows;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SourceIsLinearGamma : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect = try _self.QueryInterface();
        return try _ifc.SourceIsLinearGamma;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.HueRotationEffect
// runtime class
public class HueRotationEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IHueRotationEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IHueRotationEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IHueRotationEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.HueRotationEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Angle() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueRotationEffect = try _self.QueryInterface();
        return try _ifc.get_Angle();
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueRotationEffect = try _self.QueryInterface();
        return try _ifc.put_Angle(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueRotationEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueRotationEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Angle : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueRotationEffect = try _self.QueryInterface();
        return try _ifc.Angle;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueRotationEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.HueToRgbEffect
// runtime class
public class HueToRgbEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.HueToRgbEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_SourceColorSpace() throws -> Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect = try _self.QueryInterface();
        return try _ifc.get_SourceColorSpace();
    }
    public func put_SourceColorSpace(value : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect = try _self.QueryInterface();
        return try _ifc.put_SourceColorSpace(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SourceColorSpace : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect = try _self.QueryInterface();
        return try _ifc.SourceColorSpace;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffect
// interface type
open class IAlphaMaskEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9ba6607e, Data2: 0x75c9, Data3 : 0x5388, Data4 : (0x89, 0x2f, 0xdd, 0x34, 0x40, 0x56, 0x4d, 0x98)) }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_AlphaMask()
    private func _n_get_AlphaMask(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMask(pThis, __presult))
        }
    }
    public func get_AlphaMask() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_AlphaMask(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_AlphaMask(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_AlphaMask(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMask(pThis, source))
        }
    }
    public func put_AlphaMask(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_AlphaMask(RawPointer(source));
    }
    public var AlphaMask : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_AlphaMask();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IAlphaMaskEffect


// type: Microsoft.Graphics.Canvas.Effects.IAlphaMaskEffectStatics
// interface type
open class IAlphaMaskEffectStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcc31105c, Data2: 0x0377, Data3 : 0x5708, Data4 : (0x84, 0x84, 0x1a, 0xd8, 0xee, 0x3e, 0x55, 0x4b)) }
    // [IsSpecialName] bool get_IsSupported()
    private func _n_get_IsSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, __presult))
        }
    }
    public func get_IsSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSupported(&__result);
        return __result;
    }
    public var IsSupported : boolean {
        get throws {
            return try get_IsSupported();
        }
    }
} // IAlphaMaskEffectStatics


// type: Microsoft.Graphics.Canvas.Effects.IArithmeticCompositeEffect
// interface type
open class IArithmeticCompositeEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbeeb682b, Data2: 0xd64c, Data3 : 0x5c8b, Data4 : (0xa1, 0xfb, 0x33, 0x21, 0x62, 0xed, 0x09, 0x9c)) }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] System.Single get_MultiplyAmount()
    private func _n_get_MultiplyAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MultiplyAmount(pThis, __presult))
        }
    }
    public func get_MultiplyAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_MultiplyAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MultiplyAmount(System.Single)
    private func _n_put_MultiplyAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MultiplyAmount(pThis, value))
        }
    }
    public func put_MultiplyAmount(value : Swift.Float) throws -> Void {
        try self._n_put_MultiplyAmount(value);
    }
    // [IsSpecialName] System.Single get_Source1Amount()
    private func _n_get_Source1Amount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1Amount(pThis, __presult))
        }
    }
    public func get_Source1Amount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Source1Amount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Source1Amount(System.Single)
    private func _n_put_Source1Amount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1Amount(pThis, value))
        }
    }
    public func put_Source1Amount(value : Swift.Float) throws -> Void {
        try self._n_put_Source1Amount(value);
    }
    // [IsSpecialName] System.Single get_Source2Amount()
    private func _n_get_Source2Amount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2Amount(pThis, __presult))
        }
    }
    public func get_Source2Amount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Source2Amount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Source2Amount(System.Single)
    private func _n_put_Source2Amount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2Amount(pThis, value))
        }
    }
    public func put_Source2Amount(value : Swift.Float) throws -> Void {
        try self._n_put_Source2Amount(value);
    }
    // [IsSpecialName] System.Single get_Offset()
    private func _n_get_Offset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, __presult))
        }
    }
    public func get_Offset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Offset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Offset(System.Single)
    private func _n_put_Offset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Offset(pThis, value))
        }
    }
    public func put_Offset(value : Swift.Float) throws -> Void {
        try self._n_put_Offset(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source1()
    private func _n_get_Source1(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1(pThis, __presult))
        }
    }
    public func get_Source1() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source1(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source1(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source1(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1(pThis, source))
        }
    }
    public func put_Source1(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source1(RawPointer(source));
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source2()
    private func _n_get_Source2(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2(pThis, __presult))
        }
    }
    public func get_Source2() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source2(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source2(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source2(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2(pThis, source))
        }
    }
    public func put_Source2(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source2(RawPointer(source));
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var MultiplyAmount : Swift.Float {
        get throws {
            return try get_MultiplyAmount();
        }
    }
    public var Offset : Swift.Float {
        get throws {
            return try get_Offset();
        }
    }
    public var Source1 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source1();
        }
    }
    public var Source1Amount : Swift.Float {
        get throws {
            return try get_Source1Amount();
        }
    }
    public var Source2 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source2();
        }
    }
    public var Source2Amount : Swift.Float {
        get throws {
            return try get_Source2Amount();
        }
    }
} // IArithmeticCompositeEffect


// type: Microsoft.Graphics.Canvas.Effects.IAtlasEffect
// interface type
open class IAtlasEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf7f26eba, Data2: 0xf015, Data3 : 0x5eff, Data4 : (0x9a, 0xf3, 0x7b, 0xd2, 0xd4, 0x49, 0x04, 0xbd)) }
    // [IsSpecialName] Windows.Foundation.Rect get_SourceRectangle()
    private func _n_get_SourceRectangle(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, __presult))
        }
    }
    public func get_SourceRectangle() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_SourceRectangle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceRectangle(Windows.Foundation.Rect)
    private func _n_put_SourceRectangle(_ value : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, value))
        }
    }
    public func put_SourceRectangle(value : Windows.Foundation.Rect) throws -> Void {
        try self._n_put_SourceRectangle(value);
    }
    // [IsSpecialName] Windows.Foundation.Rect get_PaddingRectangle()
    private func _n_get_PaddingRectangle(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingRectangle(pThis, __presult))
        }
    }
    public func get_PaddingRectangle() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_PaddingRectangle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_PaddingRectangle(Windows.Foundation.Rect)
    private func _n_put_PaddingRectangle(_ value : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaddingRectangle(pThis, value))
        }
    }
    public func put_PaddingRectangle(value : Windows.Foundation.Rect) throws -> Void {
        try self._n_put_PaddingRectangle(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var PaddingRectangle : Windows.Foundation.Rect {
        get throws {
            return try get_PaddingRectangle();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SourceRectangle : Windows.Foundation.Rect {
        get throws {
            return try get_SourceRectangle();
        }
    }
} // IAtlasEffect


// type: Microsoft.Graphics.Canvas.Effects.IBlendEffect
// interface type
open class IBlendEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5673248e, Data2: 0x7266, Data3 : 0x5e49, Data4 : (0xb2, 0xab, 0x25, 0x89, 0xd5, 0xd8, 0x75, 0xc3)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.BlendEffectMode get_Mode()
    private func _n_get_Mode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, __presult))
        }
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.Effects.BlendEffectMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Multiply;
        try self._n_get_Mode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Mode(Microsoft.Graphics.Canvas.Effects.BlendEffectMode)
    private func _n_put_Mode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
        }
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.Effects.BlendEffectMode) throws -> Void {
        try self._n_put_Mode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Background()
    private func _n_get_Background(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, __presult))
        }
    }
    public func get_Background() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Background(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Background(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Background(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, source))
        }
    }
    public func put_Background(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Background(RawPointer(source));
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Foreground()
    private func _n_get_Foreground(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, __presult))
        }
    }
    public func get_Foreground() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Foreground(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Foreground(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Foreground(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, source))
        }
    }
    public func put_Foreground(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Foreground(RawPointer(source));
    }
    public var Background : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Background();
        }
    }
    public var Foreground : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Foreground();
        }
    }
    public var Mode : Microsoft.Graphics.Canvas.Effects.BlendEffectMode {
        get throws {
            return try get_Mode();
        }
    }
} // IBlendEffect


// type: Microsoft.Graphics.Canvas.Effects.IBorderEffect
// interface type
open class IBorderEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x31602441, Data2: 0x15db, Data3 : 0x5b4a, Data4 : (0x98, 0xdd, 0xba, 0x42, 0x47, 0x54, 0x8b, 0x41)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendX()
    private func _n_get_ExtendX(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendX(pThis, __presult))
        }
    }
    public func get_ExtendX() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp;
        try self._n_get_ExtendX(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExtendX(Microsoft.Graphics.Canvas.CanvasEdgeBehavior)
    private func _n_put_ExtendX(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendX(pThis, value))
        }
    }
    public func put_ExtendX(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        try self._n_put_ExtendX(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendY()
    private func _n_get_ExtendY(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendY(pThis, __presult))
        }
    }
    public func get_ExtendY() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp;
        try self._n_get_ExtendY(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExtendY(Microsoft.Graphics.Canvas.CanvasEdgeBehavior)
    private func _n_put_ExtendY(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendY(pThis, value))
        }
    }
    public func put_ExtendY(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        try self._n_put_ExtendY(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var ExtendX : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
            return try get_ExtendX();
        }
    }
    public var ExtendY : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
            return try get_ExtendY();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IBorderEffect


// type: Microsoft.Graphics.Canvas.Effects.IBrightnessEffect
// interface type
open class IBrightnessEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbeced347, Data2: 0x025f, Data3 : 0x5727, Data4 : (0x8f, 0x7d, 0x49, 0x8d, 0x67, 0xdf, 0x55, 0x7e)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_WhitePoint()
    private func _n_get_WhitePoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WhitePoint(pThis, __presult))
        }
    }
    public func get_WhitePoint() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_WhitePoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_WhitePoint(Windows.Foundation.Numerics.Vector2)
    private func _n_put_WhitePoint(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_WhitePoint(pThis, value))
        }
    }
    public func put_WhitePoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_WhitePoint(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_BlackPoint()
    private func _n_get_BlackPoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlackPoint(pThis, __presult))
        }
    }
    public func get_BlackPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_BlackPoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlackPoint(Windows.Foundation.Numerics.Vector2)
    private func _n_put_BlackPoint(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlackPoint(pThis, value))
        }
    }
    public func put_BlackPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_BlackPoint(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BlackPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_BlackPoint();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var WhitePoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_WhitePoint();
        }
    }
} // IBrightnessEffect


// type: Microsoft.Graphics.Canvas.Effects.ICanvasEffect
// interface type
open class ICanvasEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0ef96f8c, Data2: 0x9b5e, Data3 : 0x4bf0, Data4 : (0xa3, 0x99, 0xaa, 0xd8, 0xce, 0x53, 0xdb, 0x55)) }
    // [IsSpecialName] bool get_CacheOutput()
    private func _n_get_CacheOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheOutput(pThis, __presult))
        }
    }
    public func get_CacheOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_CacheOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CacheOutput(bool)
    private func _n_put_CacheOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CacheOutput(pThis, value))
        }
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        try self._n_put_CacheOutput(value);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Microsoft.Graphics.Canvas.CanvasBufferPrecision> get_BufferPrecision()
    private func _n_get_BufferPrecision(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferPrecision(pThis, __presult))
        }
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>> = nil;
        try self._n_get_BufferPrecision(&__result);
        return ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision(consuming: __result);
    }
    // [IsSpecialName] void put_BufferPrecision(Windows.Foundation.IReference<Microsoft.Graphics.Canvas.CanvasBufferPrecision>)
    private func _n_put_BufferPrecision(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BufferPrecision(pThis, value))
        }
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        try self._n_put_BufferPrecision(RawPointer(value));
    }
    // void InvalidateSourceRectangle(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, System.UInt32, Windows.Foundation.Rect)
    private func _n_InvalidateSourceRectangle(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ sourceIndex : UINT32, _ invalidRectangle : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateSourceRectangle(pThis, resourceCreator, sourceIndex, invalidRectangle))
        }
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        try self._n_InvalidateSourceRectangle(RawPointer(resourceCreator), sourceIndex, invalidRectangle);
    }
    // Windows.Foundation.Rect[] GetInvalidRectangles(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi)
    private func _n_GetInvalidRectangles(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetInvalidRectangles(pThis, resourceCreator, __presultLength, __presult))
        }
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>> = nil;
        try self._n_GetInvalidRectangles(RawPointer(resourceCreator), &__resultLength, &__result);
        return __resultLength;
    }
    // Windows.Foundation.Rect GetRequiredSourceRectangle(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Effects.ICanvasEffect, System.UInt32, Windows.Foundation.Rect)
    private func _n_GetRequiredSourceRectangle(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ outputRectangle : _q_CWindows_CFoundation_CRect, _ sourceEffect : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>, _ sourceIndex : UINT32, _ sourceBounds : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRequiredSourceRectangle(pThis, resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds, __presult))
        }
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_GetRequiredSourceRectangle(RawPointer(resourceCreator), outputRectangle, RawPointer(sourceEffect), sourceIndex, sourceBounds, &__result);
        return __result;
    }
    // Windows.Foundation.Rect[] GetRequiredSourceRectangles(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, Windows.Foundation.Rect, Microsoft.Graphics.Canvas.Effects.ICanvasEffect[], System.UInt32[], Windows.Foundation.Rect[])
    private func _n_GetRequiredSourceRectangles(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ outputRectangle : _q_CWindows_CFoundation_CRect, _ sourceEffectsLength : UINT32, _ sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, _ sourceIndicesLength : UINT32, _ sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, _ sourceBoundsLength : UINT32, _ sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRequiredSourceRectangles(pThis, resourceCreator, outputRectangle, sourceEffectsLength, sourceEffects, sourceIndicesLength, sourceIndices, sourceBoundsLength, sourceBounds, __presultLength, __presult))
        }
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>> = nil;
        try self._n_GetRequiredSourceRectangles(RawPointer(resourceCreator), outputRectangle, sourceEffectsLength, sourceEffects, sourceIndicesLength, sourceIndices, sourceBoundsLength, sourceBounds, &__resultLength, &__result);
        return __resultLength;
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
            return try get_BufferPrecision();
        }
    }
    public var CacheOutput : boolean {
        get throws {
            return try get_CacheOutput();
        }
    }
} // ICanvasEffect


// type: Microsoft.Graphics.Canvas.Effects.IChromaKeyEffect
// interface type
open class IChromaKeyEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf14b9464, Data2: 0x1871, Data3 : 0x5eaa, Data4 : (0x9d, 0xb6, 0xc0, 0x90, 0x11, 0x40, 0xe9, 0xd3)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    // [IsSpecialName] System.Single get_Tolerance()
    private func _n_get_Tolerance(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tolerance(pThis, __presult))
        }
    }
    public func get_Tolerance() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Tolerance(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Tolerance(System.Single)
    private func _n_put_Tolerance(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tolerance(pThis, value))
        }
    }
    public func put_Tolerance(value : Swift.Float) throws -> Void {
        try self._n_put_Tolerance(value);
    }
    // [IsSpecialName] bool get_InvertAlpha()
    private func _n_get_InvertAlpha(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvertAlpha(pThis, __presult))
        }
    }
    public func get_InvertAlpha() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_InvertAlpha(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InvertAlpha(bool)
    private func _n_put_InvertAlpha(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InvertAlpha(pThis, value))
        }
    }
    public func put_InvertAlpha(value : boolean) throws -> Void {
        try self._n_put_InvertAlpha(value);
    }
    // [IsSpecialName] bool get_Feather()
    private func _n_get_Feather(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Feather(pThis, __presult))
        }
    }
    public func get_Feather() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Feather(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Feather(bool)
    private func _n_put_Feather(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Feather(pThis, value))
        }
    }
    public func put_Feather(value : boolean) throws -> Void {
        try self._n_put_Feather(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_ColorHdr()
    private func _n_get_ColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, __presult))
        }
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_ColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_ColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, value))
        }
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_ColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_ColorHdr();
        }
    }
    public var Feather : boolean {
        get throws {
            return try get_Feather();
        }
    }
    public var InvertAlpha : boolean {
        get throws {
            return try get_InvertAlpha();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var Tolerance : Swift.Float {
        get throws {
            return try get_Tolerance();
        }
    }
} // IChromaKeyEffect


// type: Microsoft.Graphics.Canvas.Effects.IColorManagementEffect
// interface type
open class IColorManagementEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6e8bbe37, Data2: 0xe1e4, Data3 : 0x5ad0, Data4 : (0xb9, 0x8d, 0x94, 0x0e, 0x32, 0x13, 0xa5, 0x4e)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.ColorManagementProfile get_SourceColorProfile()
    private func _n_get_SourceColorProfile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceColorProfile(pThis, __presult))
        }
    }
    public func get_SourceColorProfile() throws -> Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>> = nil;
        try self._n_get_SourceColorProfile(&__result);
        return Microsoft.Graphics.Canvas.Effects.IColorManagementProfile(consuming: __result);
    }
    // [IsSpecialName] void put_SourceColorProfile(Microsoft.Graphics.Canvas.Effects.ColorManagementProfile)
    private func _n_put_SourceColorProfile(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceColorProfile(pThis, value))
        }
    }
    public func put_SourceColorProfile(value : Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile>) throws -> Void {
        try self._n_put_SourceColorProfile(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent get_SourceRenderingIntent()
    private func _n_get_SourceRenderingIntent(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRenderingIntent(pThis, __presult))
        }
    }
    public func get_SourceRenderingIntent() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_Perceptual;
        try self._n_get_SourceRenderingIntent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceRenderingIntent(Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent)
    private func _n_put_SourceRenderingIntent(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRenderingIntent(pThis, value))
        }
    }
    public func put_SourceRenderingIntent(value : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent) throws -> Void {
        try self._n_put_SourceRenderingIntent(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.ColorManagementProfile get_OutputColorProfile()
    private func _n_get_OutputColorProfile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputColorProfile(pThis, __presult))
        }
    }
    public func get_OutputColorProfile() throws -> Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>> = nil;
        try self._n_get_OutputColorProfile(&__result);
        return Microsoft.Graphics.Canvas.Effects.IColorManagementProfile(consuming: __result);
    }
    // [IsSpecialName] void put_OutputColorProfile(Microsoft.Graphics.Canvas.Effects.ColorManagementProfile)
    private func _n_put_OutputColorProfile(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutputColorProfile(pThis, value))
        }
    }
    public func put_OutputColorProfile(value : Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile>) throws -> Void {
        try self._n_put_OutputColorProfile(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent get_OutputRenderingIntent()
    private func _n_get_OutputRenderingIntent(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputRenderingIntent(pThis, __presult))
        }
    }
    public func get_OutputRenderingIntent() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_Perceptual;
        try self._n_get_OutputRenderingIntent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutputRenderingIntent(Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent)
    private func _n_put_OutputRenderingIntent(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutputRenderingIntent(pThis, value))
        }
    }
    public func put_OutputRenderingIntent(value : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent) throws -> Void {
        try self._n_put_OutputRenderingIntent(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaMode(Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_put_AlphaMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
        }
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        try self._n_put_AlphaMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality get_Quality()
    private func _n_get_Quality(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Quality(pThis, __presult))
        }
    }
    public func get_Quality() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality_Proof;
        try self._n_get_Quality(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Quality(Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality)
    private func _n_put_Quality(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Quality(pThis, value))
        }
    }
    public func put_Quality(value : Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality) throws -> Void {
        try self._n_put_Quality(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var OutputColorProfile : Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        get throws {
            return try get_OutputColorProfile();
        }
    }
    public var OutputRenderingIntent : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        get throws {
            return try get_OutputRenderingIntent();
        }
    }
    public var Quality : Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality {
        get throws {
            return try get_Quality();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SourceColorProfile : Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        get throws {
            return try get_SourceColorProfile();
        }
    }
    public var SourceRenderingIntent : Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
        get throws {
            return try get_SourceRenderingIntent();
        }
    }
} // IColorManagementEffect


// type: Microsoft.Graphics.Canvas.Effects.IColorManagementEffectStatics
// interface type
open class IColorManagementEffectStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x31c7af98, Data2: 0xf2d4, Data3 : 0x55fc, Data4 : (0xb1, 0x29, 0xa7, 0x07, 0x36, 0xe6, 0xda, 0x05)) }
    // bool IsBestQualitySupported(Microsoft.Graphics.Canvas.CanvasDevice)
    private func _n_IsBestQualitySupported(_ device : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsBestQualitySupported(pThis, device, __presult))
        }
    }
    public func IsBestQualitySupported(device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsBestQualitySupported(RawPointer(device), &__result);
        return __result;
    }
} // IColorManagementEffectStatics


// type: Microsoft.Graphics.Canvas.Effects.IColorManagementProfile
// interface type
open class IColorManagementProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5123a56b, Data2: 0xb199, Data3 : 0x47ab, Data4 : (0xae, 0xbe, 0xd3, 0x08, 0x04, 0x44, 0x23, 0xfe)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasColorSpace get_ColorSpace()
    private func _n_get_ColorSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorSpace(pThis, __presult))
        }
    }
    public func get_ColorSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Custom;
        try self._n_get_ColorSpace(&__result);
        return __result;
    }
    // [IsSpecialName] System.Byte[] get_IccProfile()
    private func _n_get_IccProfile(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<UINT8>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IccProfile(pThis, __presultLength, __presult))
        }
    }
    public func get_IccProfile() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<UINT8>> = nil;
        try self._n_get_IccProfile(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType_Icc;
        try self._n_get_Type(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.IReference<Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile> get_SimpleProfile()
    private func _n_get_SimpleProfile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SimpleProfile(pThis, __presult))
        }
    }
    public func get_SimpleProfile() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile>> = nil;
        try self._n_get_SimpleProfile(&__result);
        return ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile(consuming: __result);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace get_ExtendedColorSpace()
    private func _n_get_ExtendedColorSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedColorSpace(pThis, __presult))
        }
    }
    public func get_ExtendedColorSpace() throws -> Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG22P709;
        try self._n_get_ExtendedColorSpace(&__result);
        return __result;
    }
    public var ColorSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
            return try get_ColorSpace();
        }
    }
    public var ExtendedColorSpace : Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace {
        get throws {
            return try get_ExtendedColorSpace();
        }
    }
    public var IccProfile : UINT32 {
        get throws {
            return try get_IccProfile();
        }
    }
    public var SimpleProfile : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile> {
        get throws {
            return try get_SimpleProfile();
        }
    }
    public var Type_ : Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType {
        get throws {
            return try get_Type();
        }
    }
} // IColorManagementProfile


// type: Microsoft.Graphics.Canvas.Effects.IColorManagementProfileFactory
// interface type
// ACTIVATION INTERFACE
open class IColorManagementProfileFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7a0f1c98, Data2: 0x94c6, Data3 : 0x4621, Data4 : (0x98, 0x77, 0xc5, 0x1a, 0x17, 0x82, 0x3e, 0xdf)) }
    // Microsoft.Graphics.Canvas.Effects.ColorManagementProfile Create(Microsoft.Graphics.Canvas.CanvasColorSpace)
    private func _n_Create(_ colorSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, colorSpace, __presult))
        }
    }
    public func Create(colorSpace : Microsoft.Graphics.Canvas.CanvasColorSpace) throws -> Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>> = nil;
        try self._n_Create(colorSpace, &__result);
        return Microsoft.Graphics.Canvas.Effects.IColorManagementProfile(consuming: __result);
    }
} // IColorManagementProfileFactory


// type: Microsoft.Graphics.Canvas.Effects.IColorManagementProfileStatics
// interface type
open class IColorManagementProfileStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x94eef610, Data2: 0x03bd, Data3 : 0x4e82, Data4 : (0x94, 0x79, 0x62, 0xa6, 0x16, 0xbe, 0x75, 0xf1)) }
    // Microsoft.Graphics.Canvas.Effects.ColorManagementProfile CreateCustom(System.Byte[])
    private func _n_CreateCustom(_ iccProfileLength : UINT32, _ iccProfile : Optional<UnsafeMutablePointer<UINT8>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCustom(pThis, iccProfileLength, iccProfile, __presult))
        }
    }
    public func CreateCustom(iccProfileLength : UINT32, iccProfile : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>> = nil;
        try self._n_CreateCustom(iccProfileLength, iccProfile, &__result);
        return Microsoft.Graphics.Canvas.Effects.IColorManagementProfile(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Effects.ColorManagementProfile CreateSimple(Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile)
    private func _n_CreateSimple(_ simpleProfile : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSimple(pThis, simpleProfile, __presult))
        }
    }
    public func CreateSimple(simpleProfile : Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile) throws -> Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>> = nil;
        try self._n_CreateSimple(simpleProfile, &__result);
        return Microsoft.Graphics.Canvas.Effects.IColorManagementProfile(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Effects.ColorManagementProfile CreateExtended(Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace)
    private func _n_CreateExtended(_ colorSpace : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateExtended(pThis, colorSpace, __presult))
        }
    }
    public func CreateExtended(colorSpace : Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace) throws -> Optional<Microsoft.Graphics.Canvas.Effects.IColorManagementProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>> = nil;
        try self._n_CreateExtended(colorSpace, &__result);
        return Microsoft.Graphics.Canvas.Effects.IColorManagementProfile(consuming: __result);
    }
    // bool IsSupported(Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType, Microsoft.Graphics.Canvas.CanvasDevice)
    private func _n_IsSupported(_ type : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType, _ device : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, type, device, __presult))
        }
    }
    public func IsSupported(type : Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType, device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsSupported(type, RawPointer(device), &__result);
        return __result;
    }
} // IColorManagementProfileStatics


// type: Microsoft.Graphics.Canvas.Effects.IColorMatrixEffect
// interface type
open class IColorMatrixEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe6ae54c4, Data2: 0x883d, Data3 : 0x588e, Data4 : (0xb4, 0x51, 0xe9, 0xeb, 0xe3, 0x83, 0x04, 0x37)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.Matrix5x4 get_ColorMatrix()
    private func _n_get_ColorMatrix(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorMatrix(pThis, __presult))
        }
    }
    public func get_ColorMatrix() throws -> Microsoft.Graphics.Canvas.Effects.Matrix5x4 {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4(M11: 0, M12: 0, M13: 0, M14: 0, M21: 0, M22: 0, M23: 0, M24: 0, M31: 0, M32: 0, M33: 0, M34: 0, M41: 0, M42: 0, M43: 0, M44: 0, M51: 0, M52: 0, M53: 0, M54: 0);
        try self._n_get_ColorMatrix(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColorMatrix(Microsoft.Graphics.Canvas.Effects.Matrix5x4)
    private func _n_put_ColorMatrix(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorMatrix(pThis, value))
        }
    }
    public func put_ColorMatrix(value : Microsoft.Graphics.Canvas.Effects.Matrix5x4) throws -> Void {
        try self._n_put_ColorMatrix(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaMode(Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_put_AlphaMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
        }
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        try self._n_put_AlphaMode(value);
    }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var ColorMatrix : Microsoft.Graphics.Canvas.Effects.Matrix5x4 {
        get throws {
            return try get_ColorMatrix();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IColorMatrixEffect


// type: Microsoft.Graphics.Canvas.Effects.IColorSourceEffect
// interface type
open class IColorSourceEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x25f942c7, Data2: 0x7fee, Data3 : 0x518a, Data4 : (0xba, 0x7b, 0x22, 0xa0, 0x06, 0x0a, 0xf7, 0xf6)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_ColorHdr()
    private func _n_get_ColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, __presult))
        }
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_ColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_ColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, value))
        }
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_ColorHdr(value);
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_ColorHdr();
        }
    }
} // IColorSourceEffect


// type: Microsoft.Graphics.Canvas.Effects.ICompositeEffect
// interface type
open class ICompositeEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf8808c48, Data2: 0xcdc7, Data3 : 0x5db4, Data4 : (0x80, 0x7c, 0xb9, 0x34, 0x4f, 0xf7, 0x19, 0x84)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasComposite get_Mode()
    private func _n_get_Mode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, __presult))
        }
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.CanvasComposite {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite = _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOver;
        try self._n_get_Mode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Mode(Microsoft.Graphics.Canvas.CanvasComposite)
    private func _n_put_Mode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
        }
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.CanvasComposite) throws -> Void {
        try self._n_put_Mode(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Graphics.Effects.IGraphicsEffectSource> get_Sources()
    private func _n_get_Sources(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Sources(pThis, __presult))
        }
    }
    public func get_Sources() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Sources(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource(consuming: __result);
    }
    public var Mode : Microsoft.Graphics.Canvas.CanvasComposite {
        get throws {
            return try get_Mode();
        }
    }
    public var Sources : Optional<ClosedGenerics.IVector_1__q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource> {
        get throws {
            return try get_Sources();
        }
    }
} // ICompositeEffect


// type: Microsoft.Graphics.Canvas.Effects.IContrastEffect
// interface type
open class IContrastEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xda8a2b9f, Data2: 0x594e, Data3 : 0x560a, Data4 : (0x9e, 0xaa, 0x1f, 0x91, 0x24, 0x08, 0xfe, 0x79)) }
    // [IsSpecialName] System.Single get_Contrast()
    private func _n_get_Contrast(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Contrast(pThis, __presult))
        }
    }
    public func get_Contrast() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Contrast(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Contrast(System.Single)
    private func _n_put_Contrast(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Contrast(pThis, value))
        }
    }
    public func put_Contrast(value : Swift.Float) throws -> Void {
        try self._n_put_Contrast(value);
    }
    // [IsSpecialName] bool get_ClampSource()
    private func _n_get_ClampSource(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampSource(pThis, __presult))
        }
    }
    public func get_ClampSource() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampSource(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampSource(bool)
    private func _n_put_ClampSource(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampSource(pThis, value))
        }
    }
    public func put_ClampSource(value : boolean) throws -> Void {
        try self._n_put_ClampSource(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var ClampSource : boolean {
        get throws {
            return try get_ClampSource();
        }
    }
    public var Contrast : Swift.Float {
        get throws {
            return try get_Contrast();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IContrastEffect


// type: Microsoft.Graphics.Canvas.Effects.IConvolveMatrixEffect
// interface type
open class IConvolveMatrixEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x82961257, Data2: 0xa78d, Data3 : 0x5440, Data4 : (0x80, 0x26, 0xaf, 0x57, 0xd4, 0xa7, 0x6a, 0x9e)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_KernelScale()
    private func _n_get_KernelScale(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelScale(pThis, __presult))
        }
    }
    public func get_KernelScale() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_KernelScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KernelScale(Windows.Foundation.Numerics.Vector2)
    private func _n_put_KernelScale(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelScale(pThis, value))
        }
    }
    public func put_KernelScale(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_KernelScale(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
    private func _n_get_InterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, __presult))
        }
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_InterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_InterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
        }
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_InterpolationMode(value);
    }
    // [IsSpecialName] System.Int32 get_KernelWidth()
    private func _n_get_KernelWidth(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelWidth(pThis, __presult))
        }
    }
    public func get_KernelWidth() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_KernelWidth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KernelWidth(System.Int32)
    private func _n_put_KernelWidth(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelWidth(pThis, value))
        }
    }
    public func put_KernelWidth(value : Swift.Int32) throws -> Void {
        try self._n_put_KernelWidth(value);
    }
    // [IsSpecialName] System.Int32 get_KernelHeight()
    private func _n_get_KernelHeight(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelHeight(pThis, __presult))
        }
    }
    public func get_KernelHeight() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_KernelHeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KernelHeight(System.Int32)
    private func _n_put_KernelHeight(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelHeight(pThis, value))
        }
    }
    public func put_KernelHeight(value : Swift.Int32) throws -> Void {
        try self._n_put_KernelHeight(value);
    }
    // [IsSpecialName] System.Single[] get_KernelMatrix()
    private func _n_get_KernelMatrix(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelMatrix(pThis, __presultLength, __presult))
        }
    }
    public func get_KernelMatrix() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_KernelMatrix(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_KernelMatrix(System.Single[])
    private func _n_put_KernelMatrix(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelMatrix(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_KernelMatrix(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_KernelMatrix(valueElementsLength, valueElements);
    }
    // [IsSpecialName] System.Single get_Divisor()
    private func _n_get_Divisor(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Divisor(pThis, __presult))
        }
    }
    public func get_Divisor() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Divisor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Divisor(System.Single)
    private func _n_put_Divisor(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Divisor(pThis, value))
        }
    }
    public func put_Divisor(value : Swift.Float) throws -> Void {
        try self._n_put_Divisor(value);
    }
    // [IsSpecialName] System.Single get_Offset()
    private func _n_get_Offset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, __presult))
        }
    }
    public func get_Offset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Offset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Offset(System.Single)
    private func _n_put_Offset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Offset(pThis, value))
        }
    }
    public func put_Offset(value : Swift.Float) throws -> Void {
        try self._n_put_Offset(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_KernelOffset()
    private func _n_get_KernelOffset(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelOffset(pThis, __presult))
        }
    }
    public func get_KernelOffset() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_KernelOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KernelOffset(Windows.Foundation.Numerics.Vector2)
    private func _n_put_KernelOffset(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelOffset(pThis, value))
        }
    }
    public func put_KernelOffset(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_KernelOffset(value);
    }
    // [IsSpecialName] bool get_PreserveAlpha()
    private func _n_get_PreserveAlpha(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreserveAlpha(pThis, __presult))
        }
    }
    public func get_PreserveAlpha() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_PreserveAlpha(&__result);
        return __result;
    }
    // [IsSpecialName] void put_PreserveAlpha(bool)
    private func _n_put_PreserveAlpha(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreserveAlpha(pThis, value))
        }
    }
    public func put_PreserveAlpha(value : boolean) throws -> Void {
        try self._n_put_PreserveAlpha(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var Divisor : Swift.Float {
        get throws {
            return try get_Divisor();
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_InterpolationMode();
        }
    }
    public var KernelHeight : Swift.Int32 {
        get throws {
            return try get_KernelHeight();
        }
    }
    public var KernelMatrix : UINT32 {
        get throws {
            return try get_KernelMatrix();
        }
    }
    public var KernelOffset : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_KernelOffset();
        }
    }
    public var KernelScale : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_KernelScale();
        }
    }
    public var KernelWidth : Swift.Int32 {
        get throws {
            return try get_KernelWidth();
        }
    }
    public var Offset : Swift.Float {
        get throws {
            return try get_Offset();
        }
    }
    public var PreserveAlpha : boolean {
        get throws {
            return try get_PreserveAlpha();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IConvolveMatrixEffect


// type: Microsoft.Graphics.Canvas.Effects.ICropEffect
// interface type
open class ICropEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd8a1c2a5, Data2: 0xe031, Data3 : 0x566d, Data4 : (0x8f, 0x7c, 0xba, 0x07, 0xcf, 0xb5, 0x8a, 0xae)) }
    // [IsSpecialName] Windows.Foundation.Rect get_SourceRectangle()
    private func _n_get_SourceRectangle(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, __presult))
        }
    }
    public func get_SourceRectangle() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_SourceRectangle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceRectangle(Windows.Foundation.Rect)
    private func _n_put_SourceRectangle(_ value : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, value))
        }
    }
    public func put_SourceRectangle(value : Windows.Foundation.Rect) throws -> Void {
        try self._n_put_SourceRectangle(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SourceRectangle : Windows.Foundation.Rect {
        get throws {
            return try get_SourceRectangle();
        }
    }
} // ICropEffect


// type: Microsoft.Graphics.Canvas.Effects.ICrossFadeEffect
// interface type
open class ICrossFadeEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbe161a9f, Data2: 0x43d2, Data3 : 0x5613, Data4 : (0x86, 0x00, 0xd5, 0x1e, 0x3d, 0x7c, 0xe2, 0x88)) }
    // [IsSpecialName] System.Single get_CrossFade()
    private func _n_get_CrossFade(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CrossFade(pThis, __presult))
        }
    }
    public func get_CrossFade() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_CrossFade(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CrossFade(System.Single)
    private func _n_put_CrossFade(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CrossFade(pThis, value))
        }
    }
    public func put_CrossFade(value : Swift.Float) throws -> Void {
        try self._n_put_CrossFade(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source2()
    private func _n_get_Source2(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2(pThis, __presult))
        }
    }
    public func get_Source2() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source2(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source2(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source2(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2(pThis, source))
        }
    }
    public func put_Source2(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source2(RawPointer(source));
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source1()
    private func _n_get_Source1(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1(pThis, __presult))
        }
    }
    public func get_Source1() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source1(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source1(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source1(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1(pThis, source))
        }
    }
    public func put_Source1(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source1(RawPointer(source));
    }
    public var CrossFade : Swift.Float {
        get throws {
            return try get_CrossFade();
        }
    }
    public var Source1 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source1();
        }
    }
    public var Source2 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source2();
        }
    }
} // ICrossFadeEffect


// type: Microsoft.Graphics.Canvas.Effects.ICrossFadeEffectStatics
// interface type
open class ICrossFadeEffectStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa3b67330, Data2: 0x6284, Data3 : 0x5ef6, Data4 : (0x99, 0xe8, 0xb4, 0xb0, 0x5d, 0x2b, 0x8b, 0xfc)) }
    // [IsSpecialName] bool get_IsSupported()
    private func _n_get_IsSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, __presult))
        }
    }
    public func get_IsSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSupported(&__result);
        return __result;
    }
    public var IsSupported : boolean {
        get throws {
            return try get_IsSupported();
        }
    }
} // ICrossFadeEffectStatics


// type: Microsoft.Graphics.Canvas.Effects.IDirectionalBlurEffect
// interface type
open class IDirectionalBlurEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5d155c4b, Data2: 0x0882, Data3 : 0x506a, Data4 : (0xa8, 0xe1, 0x12, 0xe1, 0xea, 0xd1, 0x7f, 0x0a)) }
    // [IsSpecialName] System.Single get_BlurAmount()
    private func _n_get_BlurAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, __presult))
        }
    }
    public func get_BlurAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlurAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlurAmount(System.Single)
    private func _n_put_BlurAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
        }
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        try self._n_put_BlurAmount(value);
    }
    // [IsSpecialName] System.Single get_Angle()
    private func _n_get_Angle(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, __presult))
        }
    }
    public func get_Angle() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Angle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Angle(System.Single)
    private func _n_put_Angle(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
        }
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        try self._n_put_Angle(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization()
    private func _n_get_Optimization(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Optimization(pThis, __presult))
        }
    }
    public func get_Optimization() throws -> Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Speed;
        try self._n_get_Optimization(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Optimization(Microsoft.Graphics.Canvas.Effects.EffectOptimization)
    private func _n_put_Optimization(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Optimization(pThis, value))
        }
    }
    public func put_Optimization(value : Microsoft.Graphics.Canvas.Effects.EffectOptimization) throws -> Void {
        try self._n_put_Optimization(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Angle : Swift.Float {
        get throws {
            return try get_Angle();
        }
    }
    public var BlurAmount : Swift.Float {
        get throws {
            return try get_BlurAmount();
        }
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var Optimization : Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        get throws {
            return try get_Optimization();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IDirectionalBlurEffect


// type: Microsoft.Graphics.Canvas.Effects.IDiscreteTransferEffect
// interface type
open class IDiscreteTransferEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7f1f54f9, Data2: 0x21b5, Data3 : 0x5b91, Data4 : (0x95, 0x06, 0x83, 0x2c, 0x53, 0x6f, 0xdd, 0xfa)) }
    // [IsSpecialName] System.Single[] get_RedTable()
    private func _n_get_RedTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedTable(pThis, __presultLength, __presult))
        }
    }
    public func get_RedTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_RedTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_RedTable(System.Single[])
    private func _n_put_RedTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_RedTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_RedTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_RedDisable()
    private func _n_get_RedDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, __presult))
        }
    }
    public func get_RedDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_RedDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedDisable(bool)
    private func _n_put_RedDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, value))
        }
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        try self._n_put_RedDisable(value);
    }
    // [IsSpecialName] System.Single[] get_GreenTable()
    private func _n_get_GreenTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenTable(pThis, __presultLength, __presult))
        }
    }
    public func get_GreenTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_GreenTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_GreenTable(System.Single[])
    private func _n_put_GreenTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_GreenTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_GreenTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_GreenDisable()
    private func _n_get_GreenDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, __presult))
        }
    }
    public func get_GreenDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_GreenDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenDisable(bool)
    private func _n_put_GreenDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, value))
        }
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        try self._n_put_GreenDisable(value);
    }
    // [IsSpecialName] System.Single[] get_BlueTable()
    private func _n_get_BlueTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueTable(pThis, __presultLength, __presult))
        }
    }
    public func get_BlueTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_BlueTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_BlueTable(System.Single[])
    private func _n_put_BlueTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_BlueTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_BlueTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_BlueDisable()
    private func _n_get_BlueDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, __presult))
        }
    }
    public func get_BlueDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_BlueDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueDisable(bool)
    private func _n_put_BlueDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, value))
        }
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        try self._n_put_BlueDisable(value);
    }
    // [IsSpecialName] System.Single[] get_AlphaTable()
    private func _n_get_AlphaTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaTable(pThis, __presultLength, __presult))
        }
    }
    public func get_AlphaTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_AlphaTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_AlphaTable(System.Single[])
    private func _n_put_AlphaTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_AlphaTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_AlphaTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_AlphaDisable()
    private func _n_get_AlphaDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, __presult))
        }
    }
    public func get_AlphaDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AlphaDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaDisable(bool)
    private func _n_put_AlphaDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, value))
        }
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        try self._n_put_AlphaDisable(value);
    }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaDisable : boolean {
        get throws {
            return try get_AlphaDisable();
        }
    }
    public var AlphaTable : UINT32 {
        get throws {
            return try get_AlphaTable();
        }
    }
    public var BlueDisable : boolean {
        get throws {
            return try get_BlueDisable();
        }
    }
    public var BlueTable : UINT32 {
        get throws {
            return try get_BlueTable();
        }
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var GreenDisable : boolean {
        get throws {
            return try get_GreenDisable();
        }
    }
    public var GreenTable : UINT32 {
        get throws {
            return try get_GreenTable();
        }
    }
    public var RedDisable : boolean {
        get throws {
            return try get_RedDisable();
        }
    }
    public var RedTable : UINT32 {
        get throws {
            return try get_RedTable();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IDiscreteTransferEffect


// type: Microsoft.Graphics.Canvas.Effects.IDisplacementMapEffect
// interface type
open class IDisplacementMapEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x45f57c50, Data2: 0xd4d9, Data3 : 0x5af1, Data4 : (0x8a, 0x6b, 0x50, 0x37, 0x8f, 0x34, 0x98, 0xa2)) }
    // [IsSpecialName] System.Single get_Amount()
    private func _n_get_Amount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, __presult))
        }
    }
    public func get_Amount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Amount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Amount(System.Single)
    private func _n_put_Amount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
        }
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        try self._n_put_Amount(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectChannelSelect get_XChannelSelect()
    private func _n_get_XChannelSelect(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XChannelSelect(pThis, __presult))
        }
    }
    public func get_XChannelSelect() throws -> Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Red;
        try self._n_get_XChannelSelect(&__result);
        return __result;
    }
    // [IsSpecialName] void put_XChannelSelect(Microsoft.Graphics.Canvas.Effects.EffectChannelSelect)
    private func _n_put_XChannelSelect(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XChannelSelect(pThis, value))
        }
    }
    public func put_XChannelSelect(value : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect) throws -> Void {
        try self._n_put_XChannelSelect(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectChannelSelect get_YChannelSelect()
    private func _n_get_YChannelSelect(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_YChannelSelect(pThis, __presult))
        }
    }
    public func get_YChannelSelect() throws -> Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Red;
        try self._n_get_YChannelSelect(&__result);
        return __result;
    }
    // [IsSpecialName] void put_YChannelSelect(Microsoft.Graphics.Canvas.Effects.EffectChannelSelect)
    private func _n_put_YChannelSelect(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_YChannelSelect(pThis, value))
        }
    }
    public func put_YChannelSelect(value : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect) throws -> Void {
        try self._n_put_YChannelSelect(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Displacement()
    private func _n_get_Displacement(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Displacement(pThis, __presult))
        }
    }
    public func get_Displacement() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Displacement(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Displacement(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Displacement(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Displacement(pThis, source))
        }
    }
    public func put_Displacement(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Displacement(RawPointer(source));
    }
    public var Amount : Swift.Float {
        get throws {
            return try get_Amount();
        }
    }
    public var Displacement : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Displacement();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var XChannelSelect : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        get throws {
            return try get_XChannelSelect();
        }
    }
    public var YChannelSelect : Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
        get throws {
            return try get_YChannelSelect();
        }
    }
} // IDisplacementMapEffect


// type: Microsoft.Graphics.Canvas.Effects.IDistantDiffuseEffect
// interface type
open class IDistantDiffuseEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd501b10b, Data2: 0xb445, Data3 : 0x50f4, Data4 : (0x8b, 0x8f, 0xcd, 0xec, 0xfc, 0xdd, 0x13, 0x21)) }
    // [IsSpecialName] System.Single get_Azimuth()
    private func _n_get_Azimuth(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Azimuth(pThis, __presult))
        }
    }
    public func get_Azimuth() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Azimuth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Azimuth(System.Single)
    private func _n_put_Azimuth(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Azimuth(pThis, value))
        }
    }
    public func put_Azimuth(value : Swift.Float) throws -> Void {
        try self._n_put_Azimuth(value);
    }
    // [IsSpecialName] System.Single get_Elevation()
    private func _n_get_Elevation(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Elevation(pThis, __presult))
        }
    }
    public func get_Elevation() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Elevation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Elevation(System.Single)
    private func _n_put_Elevation(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Elevation(pThis, value))
        }
    }
    public func put_Elevation(value : Swift.Float) throws -> Void {
        try self._n_put_Elevation(value);
    }
    // [IsSpecialName] System.Single get_DiffuseAmount()
    private func _n_get_DiffuseAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DiffuseAmount(pThis, __presult))
        }
    }
    public func get_DiffuseAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_DiffuseAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DiffuseAmount(System.Single)
    private func _n_put_DiffuseAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DiffuseAmount(pThis, value))
        }
    }
    public func put_DiffuseAmount(value : Swift.Float) throws -> Void {
        try self._n_put_DiffuseAmount(value);
    }
    // [IsSpecialName] System.Single get_HeightMapScale()
    private func _n_get_HeightMapScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, __presult))
        }
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_HeightMapScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapScale(System.Single)
    private func _n_put_HeightMapScale(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
        }
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        try self._n_put_HeightMapScale(value);
    }
    // [IsSpecialName] Windows.UI.Color get_LightColor()
    private func _n_get_LightColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, __presult))
        }
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_LightColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColor(Windows.UI.Color)
    private func _n_put_LightColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, value))
        }
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_LightColor(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_HeightMapKernelSize()
    private func _n_get_HeightMapKernelSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, __presult))
        }
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_HeightMapKernelSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapKernelSize(Windows.Foundation.Numerics.Vector2)
    private func _n_put_HeightMapKernelSize(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, value))
        }
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_HeightMapKernelSize(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
    private func _n_get_HeightMapInterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, __presult))
        }
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_HeightMapInterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapInterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_HeightMapInterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
        }
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_HeightMapInterpolationMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_LightColorHdr()
    private func _n_get_LightColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, __presult))
        }
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_LightColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_LightColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, value))
        }
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_LightColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Azimuth : Swift.Float {
        get throws {
            return try get_Azimuth();
        }
    }
    public var DiffuseAmount : Swift.Float {
        get throws {
            return try get_DiffuseAmount();
        }
    }
    public var Elevation : Swift.Float {
        get throws {
            return try get_Elevation();
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_HeightMapInterpolationMode();
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_HeightMapKernelSize();
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
            return try get_HeightMapScale();
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
            return try get_LightColor();
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_LightColorHdr();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IDistantDiffuseEffect


// type: Microsoft.Graphics.Canvas.Effects.IDistantSpecularEffect
// interface type
open class IDistantSpecularEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa7a828df, Data2: 0x3072, Data3 : 0x545f, Data4 : (0x8d, 0x75, 0x86, 0xc1, 0x00, 0xf0, 0x32, 0x31)) }
    // [IsSpecialName] System.Single get_Azimuth()
    private func _n_get_Azimuth(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Azimuth(pThis, __presult))
        }
    }
    public func get_Azimuth() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Azimuth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Azimuth(System.Single)
    private func _n_put_Azimuth(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Azimuth(pThis, value))
        }
    }
    public func put_Azimuth(value : Swift.Float) throws -> Void {
        try self._n_put_Azimuth(value);
    }
    // [IsSpecialName] System.Single get_Elevation()
    private func _n_get_Elevation(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Elevation(pThis, __presult))
        }
    }
    public func get_Elevation() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Elevation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Elevation(System.Single)
    private func _n_put_Elevation(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Elevation(pThis, value))
        }
    }
    public func put_Elevation(value : Swift.Float) throws -> Void {
        try self._n_put_Elevation(value);
    }
    // [IsSpecialName] System.Single get_SpecularExponent()
    private func _n_get_SpecularExponent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularExponent(pThis, __presult))
        }
    }
    public func get_SpecularExponent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_SpecularExponent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SpecularExponent(System.Single)
    private func _n_put_SpecularExponent(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularExponent(pThis, value))
        }
    }
    public func put_SpecularExponent(value : Swift.Float) throws -> Void {
        try self._n_put_SpecularExponent(value);
    }
    // [IsSpecialName] System.Single get_SpecularAmount()
    private func _n_get_SpecularAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularAmount(pThis, __presult))
        }
    }
    public func get_SpecularAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_SpecularAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SpecularAmount(System.Single)
    private func _n_put_SpecularAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularAmount(pThis, value))
        }
    }
    public func put_SpecularAmount(value : Swift.Float) throws -> Void {
        try self._n_put_SpecularAmount(value);
    }
    // [IsSpecialName] System.Single get_HeightMapScale()
    private func _n_get_HeightMapScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, __presult))
        }
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_HeightMapScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapScale(System.Single)
    private func _n_put_HeightMapScale(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
        }
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        try self._n_put_HeightMapScale(value);
    }
    // [IsSpecialName] Windows.UI.Color get_LightColor()
    private func _n_get_LightColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, __presult))
        }
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_LightColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColor(Windows.UI.Color)
    private func _n_put_LightColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, value))
        }
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_LightColor(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_HeightMapKernelSize()
    private func _n_get_HeightMapKernelSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, __presult))
        }
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_HeightMapKernelSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapKernelSize(Windows.Foundation.Numerics.Vector2)
    private func _n_put_HeightMapKernelSize(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, value))
        }
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_HeightMapKernelSize(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
    private func _n_get_HeightMapInterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, __presult))
        }
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_HeightMapInterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapInterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_HeightMapInterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
        }
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_HeightMapInterpolationMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_LightColorHdr()
    private func _n_get_LightColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, __presult))
        }
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_LightColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_LightColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, value))
        }
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_LightColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Azimuth : Swift.Float {
        get throws {
            return try get_Azimuth();
        }
    }
    public var Elevation : Swift.Float {
        get throws {
            return try get_Elevation();
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_HeightMapInterpolationMode();
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_HeightMapKernelSize();
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
            return try get_HeightMapScale();
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
            return try get_LightColor();
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_LightColorHdr();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SpecularAmount : Swift.Float {
        get throws {
            return try get_SpecularAmount();
        }
    }
    public var SpecularExponent : Swift.Float {
        get throws {
            return try get_SpecularExponent();
        }
    }
} // IDistantSpecularEffect


// type: Microsoft.Graphics.Canvas.Effects.IDpiCompensationEffect
// interface type
open class IDpiCompensationEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x636597cd, Data2: 0xf94a, Data3 : 0x55b6, Data4 : (0x9c, 0xf0, 0x69, 0x4a, 0x53, 0xd6, 0x38, 0xea)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
    private func _n_get_InterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, __presult))
        }
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_InterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_InterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
        }
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_InterpolationMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_SourceDpi()
    private func _n_get_SourceDpi(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceDpi(pThis, __presult))
        }
    }
    public func get_SourceDpi() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_SourceDpi(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceDpi(Windows.Foundation.Numerics.Vector2)
    private func _n_put_SourceDpi(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceDpi(pThis, value))
        }
    }
    public func put_SourceDpi(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_SourceDpi(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_InterpolationMode();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SourceDpi : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_SourceDpi();
        }
    }
} // IDpiCompensationEffect


// type: Microsoft.Graphics.Canvas.Effects.IEdgeDetectionEffect
// interface type
open class IEdgeDetectionEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x69f6cf3a, Data2: 0xf38f, Data3 : 0x5a88, Data4 : (0x97, 0x4a, 0x29, 0x39, 0x0b, 0x95, 0x7e, 0x5c)) }
    // [IsSpecialName] System.Single get_Amount()
    private func _n_get_Amount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, __presult))
        }
    }
    public func get_Amount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Amount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Amount(System.Single)
    private func _n_put_Amount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
        }
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        try self._n_put_Amount(value);
    }
    // [IsSpecialName] System.Single get_BlurAmount()
    private func _n_get_BlurAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, __presult))
        }
    }
    public func get_BlurAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlurAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlurAmount(System.Single)
    private func _n_put_BlurAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
        }
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        try self._n_put_BlurAmount(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode get_Mode()
    private func _n_get_Mode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, __presult))
        }
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode_Sobel;
        try self._n_get_Mode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Mode(Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode)
    private func _n_put_Mode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
        }
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode) throws -> Void {
        try self._n_put_Mode(value);
    }
    // [IsSpecialName] bool get_OverlayEdges()
    private func _n_get_OverlayEdges(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverlayEdges(pThis, __presult))
        }
    }
    public func get_OverlayEdges() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_OverlayEdges(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OverlayEdges(bool)
    private func _n_put_OverlayEdges(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OverlayEdges(pThis, value))
        }
    }
    public func put_OverlayEdges(value : boolean) throws -> Void {
        try self._n_put_OverlayEdges(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaMode(Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_put_AlphaMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
        }
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        try self._n_put_AlphaMode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var Amount : Swift.Float {
        get throws {
            return try get_Amount();
        }
    }
    public var BlurAmount : Swift.Float {
        get throws {
            return try get_BlurAmount();
        }
    }
    public var Mode : Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode {
        get throws {
            return try get_Mode();
        }
    }
    public var OverlayEdges : boolean {
        get throws {
            return try get_OverlayEdges();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IEdgeDetectionEffect


// type: Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D
// interface type
open class IEffectTransferTable3D
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7af06b86, Data2: 0x2c45, Data3 : 0x49c8, Data4 : (0x8f, 0x44, 0xe1, 0x5a, 0x6d, 0x4f, 0xa4, 0x4e)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_Device()
    private func _n_get_Device(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, __presult))
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_Device(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_Device();
        }
    }
} // IEffectTransferTable3D


// type: Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3DStatics
// interface type
open class IEffectTransferTable3DStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3cb83559, Data2: 0x216a, Data3 : 0x4bca, Data4 : (0x9b, 0xb6, 0xe2, 0x33, 0xc5, 0xad, 0x2c, 0x48)) }
    // Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D CreateFromColors(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.UI.Color[], System.Int32, System.Int32, System.Int32)
    private func _n_CreateFromColors(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ colorsLength : UINT32, _ colors : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CColor>>, _ sizeB : INT32, _ sizeG : INT32, _ sizeR : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromColors(pThis, resourceCreator, colorsLength, colors, sizeB, sizeG, sizeR, __presult))
        }
    }
    public func CreateFromColors(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, colorsLength : UINT32, colors : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CColor>>, sizeB : Swift.Int32, sizeG : Swift.Int32, sizeR : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>> = nil;
        try self._n_CreateFromColors(RawPointer(resourceCreator), colorsLength, colors, sizeB, sizeG, sizeR, &__result);
        return Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D CreateFromBytes(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.Byte[], System.Int32, System.Int32, System.Int32, Windows.Graphics.DirectX.DirectXPixelFormat)
    private func _n_CreateFromBytes(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ bytesLength : UINT32, _ bytes : Optional<UnsafeMutablePointer<UINT8>>, _ sizeB : INT32, _ sizeG : INT32, _ sizeR : INT32, _ format : _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromBytes(pThis, resourceCreator, bytesLength, bytes, sizeB, sizeG, sizeR, format, __presult))
        }
    }
    public func CreateFromBytes(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, bytesLength : UINT32, bytes : Optional<UnsafeMutablePointer<UINT8>>, sizeB : Swift.Int32, sizeG : Swift.Int32, sizeR : Swift.Int32, format : Windows.Graphics.DirectX.DirectXPixelFormat) throws -> Optional<Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>> = nil;
        try self._n_CreateFromBytes(RawPointer(resourceCreator), bytesLength, bytes, sizeB, sizeG, sizeR, format, &__result);
        return Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D(consuming: __result);
    }
} // IEffectTransferTable3DStatics


// type: Microsoft.Graphics.Canvas.Effects.IEmbossEffect
// interface type
open class IEmbossEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x617bff35, Data2: 0x481c, Data3 : 0x5596, Data4 : (0xab, 0xa5, 0x00, 0xa1, 0x62, 0x34, 0x9d, 0x7b)) }
    // [IsSpecialName] System.Single get_Amount()
    private func _n_get_Amount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, __presult))
        }
    }
    public func get_Amount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Amount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Amount(System.Single)
    private func _n_put_Amount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
        }
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        try self._n_put_Amount(value);
    }
    // [IsSpecialName] System.Single get_Angle()
    private func _n_get_Angle(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, __presult))
        }
    }
    public func get_Angle() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Angle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Angle(System.Single)
    private func _n_put_Angle(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
        }
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        try self._n_put_Angle(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Amount : Swift.Float {
        get throws {
            return try get_Amount();
        }
    }
    public var Angle : Swift.Float {
        get throws {
            return try get_Angle();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IEmbossEffect


// type: Microsoft.Graphics.Canvas.Effects.IExposureEffect
// interface type
open class IExposureEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb9e20a03, Data2: 0x2232, Data3 : 0x5fd3, Data4 : (0xb4, 0x08, 0x15, 0x78, 0x4b, 0x79, 0xdb, 0xb0)) }
    // [IsSpecialName] System.Single get_Exposure()
    private func _n_get_Exposure(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Exposure(pThis, __presult))
        }
    }
    public func get_Exposure() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Exposure(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Exposure(System.Single)
    private func _n_put_Exposure(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Exposure(pThis, value))
        }
    }
    public func put_Exposure(value : Swift.Float) throws -> Void {
        try self._n_put_Exposure(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Exposure : Swift.Float {
        get throws {
            return try get_Exposure();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IExposureEffect


// type: Microsoft.Graphics.Canvas.Effects.IGammaTransferEffect
// interface type
open class IGammaTransferEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb4576b6b, Data2: 0x6c3e, Data3 : 0x534a, Data4 : (0x85, 0x76, 0xd4, 0x6d, 0xf4, 0xfc, 0xe9, 0x3d)) }
    // [IsSpecialName] System.Single get_RedAmplitude()
    private func _n_get_RedAmplitude(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedAmplitude(pThis, __presult))
        }
    }
    public func get_RedAmplitude() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_RedAmplitude(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedAmplitude(System.Single)
    private func _n_put_RedAmplitude(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedAmplitude(pThis, value))
        }
    }
    public func put_RedAmplitude(value : Swift.Float) throws -> Void {
        try self._n_put_RedAmplitude(value);
    }
    // [IsSpecialName] System.Single get_RedExponent()
    private func _n_get_RedExponent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedExponent(pThis, __presult))
        }
    }
    public func get_RedExponent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_RedExponent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedExponent(System.Single)
    private func _n_put_RedExponent(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedExponent(pThis, value))
        }
    }
    public func put_RedExponent(value : Swift.Float) throws -> Void {
        try self._n_put_RedExponent(value);
    }
    // [IsSpecialName] System.Single get_RedOffset()
    private func _n_get_RedOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedOffset(pThis, __presult))
        }
    }
    public func get_RedOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_RedOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedOffset(System.Single)
    private func _n_put_RedOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedOffset(pThis, value))
        }
    }
    public func put_RedOffset(value : Swift.Float) throws -> Void {
        try self._n_put_RedOffset(value);
    }
    // [IsSpecialName] bool get_RedDisable()
    private func _n_get_RedDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, __presult))
        }
    }
    public func get_RedDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_RedDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedDisable(bool)
    private func _n_put_RedDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, value))
        }
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        try self._n_put_RedDisable(value);
    }
    // [IsSpecialName] System.Single get_GreenAmplitude()
    private func _n_get_GreenAmplitude(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenAmplitude(pThis, __presult))
        }
    }
    public func get_GreenAmplitude() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_GreenAmplitude(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenAmplitude(System.Single)
    private func _n_put_GreenAmplitude(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenAmplitude(pThis, value))
        }
    }
    public func put_GreenAmplitude(value : Swift.Float) throws -> Void {
        try self._n_put_GreenAmplitude(value);
    }
    // [IsSpecialName] System.Single get_GreenExponent()
    private func _n_get_GreenExponent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenExponent(pThis, __presult))
        }
    }
    public func get_GreenExponent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_GreenExponent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenExponent(System.Single)
    private func _n_put_GreenExponent(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenExponent(pThis, value))
        }
    }
    public func put_GreenExponent(value : Swift.Float) throws -> Void {
        try self._n_put_GreenExponent(value);
    }
    // [IsSpecialName] System.Single get_GreenOffset()
    private func _n_get_GreenOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenOffset(pThis, __presult))
        }
    }
    public func get_GreenOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_GreenOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenOffset(System.Single)
    private func _n_put_GreenOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenOffset(pThis, value))
        }
    }
    public func put_GreenOffset(value : Swift.Float) throws -> Void {
        try self._n_put_GreenOffset(value);
    }
    // [IsSpecialName] bool get_GreenDisable()
    private func _n_get_GreenDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, __presult))
        }
    }
    public func get_GreenDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_GreenDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenDisable(bool)
    private func _n_put_GreenDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, value))
        }
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        try self._n_put_GreenDisable(value);
    }
    // [IsSpecialName] System.Single get_BlueAmplitude()
    private func _n_get_BlueAmplitude(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueAmplitude(pThis, __presult))
        }
    }
    public func get_BlueAmplitude() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlueAmplitude(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueAmplitude(System.Single)
    private func _n_put_BlueAmplitude(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueAmplitude(pThis, value))
        }
    }
    public func put_BlueAmplitude(value : Swift.Float) throws -> Void {
        try self._n_put_BlueAmplitude(value);
    }
    // [IsSpecialName] System.Single get_BlueExponent()
    private func _n_get_BlueExponent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueExponent(pThis, __presult))
        }
    }
    public func get_BlueExponent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlueExponent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueExponent(System.Single)
    private func _n_put_BlueExponent(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueExponent(pThis, value))
        }
    }
    public func put_BlueExponent(value : Swift.Float) throws -> Void {
        try self._n_put_BlueExponent(value);
    }
    // [IsSpecialName] System.Single get_BlueOffset()
    private func _n_get_BlueOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueOffset(pThis, __presult))
        }
    }
    public func get_BlueOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlueOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueOffset(System.Single)
    private func _n_put_BlueOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueOffset(pThis, value))
        }
    }
    public func put_BlueOffset(value : Swift.Float) throws -> Void {
        try self._n_put_BlueOffset(value);
    }
    // [IsSpecialName] bool get_BlueDisable()
    private func _n_get_BlueDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, __presult))
        }
    }
    public func get_BlueDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_BlueDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueDisable(bool)
    private func _n_put_BlueDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, value))
        }
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        try self._n_put_BlueDisable(value);
    }
    // [IsSpecialName] System.Single get_AlphaAmplitude()
    private func _n_get_AlphaAmplitude(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaAmplitude(pThis, __presult))
        }
    }
    public func get_AlphaAmplitude() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_AlphaAmplitude(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaAmplitude(System.Single)
    private func _n_put_AlphaAmplitude(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaAmplitude(pThis, value))
        }
    }
    public func put_AlphaAmplitude(value : Swift.Float) throws -> Void {
        try self._n_put_AlphaAmplitude(value);
    }
    // [IsSpecialName] System.Single get_AlphaExponent()
    private func _n_get_AlphaExponent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaExponent(pThis, __presult))
        }
    }
    public func get_AlphaExponent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_AlphaExponent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaExponent(System.Single)
    private func _n_put_AlphaExponent(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaExponent(pThis, value))
        }
    }
    public func put_AlphaExponent(value : Swift.Float) throws -> Void {
        try self._n_put_AlphaExponent(value);
    }
    // [IsSpecialName] System.Single get_AlphaOffset()
    private func _n_get_AlphaOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaOffset(pThis, __presult))
        }
    }
    public func get_AlphaOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_AlphaOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaOffset(System.Single)
    private func _n_put_AlphaOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaOffset(pThis, value))
        }
    }
    public func put_AlphaOffset(value : Swift.Float) throws -> Void {
        try self._n_put_AlphaOffset(value);
    }
    // [IsSpecialName] bool get_AlphaDisable()
    private func _n_get_AlphaDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, __presult))
        }
    }
    public func get_AlphaDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AlphaDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaDisable(bool)
    private func _n_put_AlphaDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, value))
        }
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        try self._n_put_AlphaDisable(value);
    }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaAmplitude : Swift.Float {
        get throws {
            return try get_AlphaAmplitude();
        }
    }
    public var AlphaDisable : boolean {
        get throws {
            return try get_AlphaDisable();
        }
    }
    public var AlphaExponent : Swift.Float {
        get throws {
            return try get_AlphaExponent();
        }
    }
    public var AlphaOffset : Swift.Float {
        get throws {
            return try get_AlphaOffset();
        }
    }
    public var BlueAmplitude : Swift.Float {
        get throws {
            return try get_BlueAmplitude();
        }
    }
    public var BlueDisable : boolean {
        get throws {
            return try get_BlueDisable();
        }
    }
    public var BlueExponent : Swift.Float {
        get throws {
            return try get_BlueExponent();
        }
    }
    public var BlueOffset : Swift.Float {
        get throws {
            return try get_BlueOffset();
        }
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var GreenAmplitude : Swift.Float {
        get throws {
            return try get_GreenAmplitude();
        }
    }
    public var GreenDisable : boolean {
        get throws {
            return try get_GreenDisable();
        }
    }
    public var GreenExponent : Swift.Float {
        get throws {
            return try get_GreenExponent();
        }
    }
    public var GreenOffset : Swift.Float {
        get throws {
            return try get_GreenOffset();
        }
    }
    public var RedAmplitude : Swift.Float {
        get throws {
            return try get_RedAmplitude();
        }
    }
    public var RedDisable : boolean {
        get throws {
            return try get_RedDisable();
        }
    }
    public var RedExponent : Swift.Float {
        get throws {
            return try get_RedExponent();
        }
    }
    public var RedOffset : Swift.Float {
        get throws {
            return try get_RedOffset();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IGammaTransferEffect


// type: Microsoft.Graphics.Canvas.Effects.IGaussianBlurEffect
// interface type
open class IGaussianBlurEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa82ec394, Data2: 0x6734, Data3 : 0x5830, Data4 : (0x91, 0x23, 0x2c, 0x82, 0xb2, 0x7d, 0xd3, 0xc0)) }
    // [IsSpecialName] System.Single get_BlurAmount()
    private func _n_get_BlurAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, __presult))
        }
    }
    public func get_BlurAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlurAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlurAmount(System.Single)
    private func _n_put_BlurAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
        }
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        try self._n_put_BlurAmount(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization()
    private func _n_get_Optimization(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Optimization(pThis, __presult))
        }
    }
    public func get_Optimization() throws -> Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Speed;
        try self._n_get_Optimization(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Optimization(Microsoft.Graphics.Canvas.Effects.EffectOptimization)
    private func _n_put_Optimization(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Optimization(pThis, value))
        }
    }
    public func put_Optimization(value : Microsoft.Graphics.Canvas.Effects.EffectOptimization) throws -> Void {
        try self._n_put_Optimization(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BlurAmount : Swift.Float {
        get throws {
            return try get_BlurAmount();
        }
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var Optimization : Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        get throws {
            return try get_Optimization();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IGaussianBlurEffect


// type: Microsoft.Graphics.Canvas.Effects.IGrayscaleEffect
// interface type
open class IGrayscaleEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x78e13b83, Data2: 0x0638, Data3 : 0x53f8, Data4 : (0xb0, 0xb3, 0x5b, 0x0b, 0x32, 0x0a, 0x9a, 0xd2)) }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IGrayscaleEffect


// type: Microsoft.Graphics.Canvas.Effects.IHighlightsAndShadowsEffect
// interface type
open class IHighlightsAndShadowsEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7f90be14, Data2: 0x267e, Data3 : 0x5088, Data4 : (0xbc, 0x36, 0x2e, 0x0a, 0xad, 0x86, 0x9b, 0x52)) }
    // [IsSpecialName] System.Single get_Highlights()
    private func _n_get_Highlights(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Highlights(pThis, __presult))
        }
    }
    public func get_Highlights() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Highlights(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Highlights(System.Single)
    private func _n_put_Highlights(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Highlights(pThis, value))
        }
    }
    public func put_Highlights(value : Swift.Float) throws -> Void {
        try self._n_put_Highlights(value);
    }
    // [IsSpecialName] System.Single get_Shadows()
    private func _n_get_Shadows(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Shadows(pThis, __presult))
        }
    }
    public func get_Shadows() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Shadows(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Shadows(System.Single)
    private func _n_put_Shadows(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Shadows(pThis, value))
        }
    }
    public func put_Shadows(value : Swift.Float) throws -> Void {
        try self._n_put_Shadows(value);
    }
    // [IsSpecialName] System.Single get_Clarity()
    private func _n_get_Clarity(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Clarity(pThis, __presult))
        }
    }
    public func get_Clarity() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Clarity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Clarity(System.Single)
    private func _n_put_Clarity(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Clarity(pThis, value))
        }
    }
    public func put_Clarity(value : Swift.Float) throws -> Void {
        try self._n_put_Clarity(value);
    }
    // [IsSpecialName] System.Single get_MaskBlurAmount()
    private func _n_get_MaskBlurAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaskBlurAmount(pThis, __presult))
        }
    }
    public func get_MaskBlurAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_MaskBlurAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaskBlurAmount(System.Single)
    private func _n_put_MaskBlurAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaskBlurAmount(pThis, value))
        }
    }
    public func put_MaskBlurAmount(value : Swift.Float) throws -> Void {
        try self._n_put_MaskBlurAmount(value);
    }
    // [IsSpecialName] bool get_SourceIsLinearGamma()
    private func _n_get_SourceIsLinearGamma(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceIsLinearGamma(pThis, __presult))
        }
    }
    public func get_SourceIsLinearGamma() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_SourceIsLinearGamma(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceIsLinearGamma(bool)
    private func _n_put_SourceIsLinearGamma(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceIsLinearGamma(pThis, value))
        }
    }
    public func put_SourceIsLinearGamma(value : boolean) throws -> Void {
        try self._n_put_SourceIsLinearGamma(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Clarity : Swift.Float {
        get throws {
            return try get_Clarity();
        }
    }
    public var Highlights : Swift.Float {
        get throws {
            return try get_Highlights();
        }
    }
    public var MaskBlurAmount : Swift.Float {
        get throws {
            return try get_MaskBlurAmount();
        }
    }
    public var Shadows : Swift.Float {
        get throws {
            return try get_Shadows();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SourceIsLinearGamma : boolean {
        get throws {
            return try get_SourceIsLinearGamma();
        }
    }
} // IHighlightsAndShadowsEffect


// type: Microsoft.Graphics.Canvas.Effects.IHueRotationEffect
// interface type
open class IHueRotationEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc172ebf2, Data2: 0xe35f, Data3 : 0x58ae, Data4 : (0xad, 0x2c, 0x56, 0x1e, 0xce, 0xaf, 0x26, 0x94)) }
    // [IsSpecialName] System.Single get_Angle()
    private func _n_get_Angle(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, __presult))
        }
    }
    public func get_Angle() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Angle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Angle(System.Single)
    private func _n_put_Angle(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
        }
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        try self._n_put_Angle(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Angle : Swift.Float {
        get throws {
            return try get_Angle();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IHueRotationEffect


// type: Microsoft.Graphics.Canvas.Effects.IHueToRgbEffect
// interface type
open class IHueToRgbEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1e97c12c, Data2: 0xb743, Data3 : 0x53d0, Data4 : (0x88, 0xc4, 0x84, 0x35, 0x27, 0x2b, 0x0a, 0x3d)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace get_SourceColorSpace()
    private func _n_get_SourceColorSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceColorSpace(pThis, __presult))
        }
    }
    public func get_SourceColorSpace() throws -> Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace_Hsv;
        try self._n_get_SourceColorSpace(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceColorSpace(Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace)
    private func _n_put_SourceColorSpace(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceColorSpace(pThis, value))
        }
    }
    public func put_SourceColorSpace(value : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace) throws -> Void {
        try self._n_put_SourceColorSpace(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SourceColorSpace : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        get throws {
            return try get_SourceColorSpace();
        }
    }
} // IHueToRgbEffect


// type: Microsoft.Graphics.Canvas.Effects.IInvertEffect
// interface type
open class IInvertEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd4adcdfc, Data2: 0x0f60, Data3 : 0x524d, Data4 : (0x93, 0x6a, 0x7f, 0x27, 0x36, 0xad, 0x33, 0xd8)) }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IInvertEffect


// type: Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect
// interface type
open class ILinearTransferEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43d27ad0, Data2: 0x8937, Data3 : 0x5fdb, Data4 : (0x87, 0x6a, 0x4e, 0x91, 0xcb, 0x47, 0x54, 0x0c)) }
    // [IsSpecialName] System.Single get_RedOffset()
    private func _n_get_RedOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedOffset(pThis, __presult))
        }
    }
    public func get_RedOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_RedOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedOffset(System.Single)
    private func _n_put_RedOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedOffset(pThis, value))
        }
    }
    public func put_RedOffset(value : Swift.Float) throws -> Void {
        try self._n_put_RedOffset(value);
    }
    // [IsSpecialName] System.Single get_RedSlope()
    private func _n_get_RedSlope(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedSlope(pThis, __presult))
        }
    }
    public func get_RedSlope() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_RedSlope(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedSlope(System.Single)
    private func _n_put_RedSlope(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedSlope(pThis, value))
        }
    }
    public func put_RedSlope(value : Swift.Float) throws -> Void {
        try self._n_put_RedSlope(value);
    }
    // [IsSpecialName] bool get_RedDisable()
    private func _n_get_RedDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, __presult))
        }
    }
    public func get_RedDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_RedDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedDisable(bool)
    private func _n_put_RedDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, value))
        }
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        try self._n_put_RedDisable(value);
    }
    // [IsSpecialName] System.Single get_GreenOffset()
    private func _n_get_GreenOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenOffset(pThis, __presult))
        }
    }
    public func get_GreenOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_GreenOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenOffset(System.Single)
    private func _n_put_GreenOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenOffset(pThis, value))
        }
    }
    public func put_GreenOffset(value : Swift.Float) throws -> Void {
        try self._n_put_GreenOffset(value);
    }
    // [IsSpecialName] System.Single get_GreenSlope()
    private func _n_get_GreenSlope(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenSlope(pThis, __presult))
        }
    }
    public func get_GreenSlope() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_GreenSlope(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenSlope(System.Single)
    private func _n_put_GreenSlope(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenSlope(pThis, value))
        }
    }
    public func put_GreenSlope(value : Swift.Float) throws -> Void {
        try self._n_put_GreenSlope(value);
    }
    // [IsSpecialName] bool get_GreenDisable()
    private func _n_get_GreenDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, __presult))
        }
    }
    public func get_GreenDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_GreenDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenDisable(bool)
    private func _n_put_GreenDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, value))
        }
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        try self._n_put_GreenDisable(value);
    }
    // [IsSpecialName] System.Single get_BlueOffset()
    private func _n_get_BlueOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueOffset(pThis, __presult))
        }
    }
    public func get_BlueOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlueOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueOffset(System.Single)
    private func _n_put_BlueOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueOffset(pThis, value))
        }
    }
    public func put_BlueOffset(value : Swift.Float) throws -> Void {
        try self._n_put_BlueOffset(value);
    }
    // [IsSpecialName] System.Single get_BlueSlope()
    private func _n_get_BlueSlope(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueSlope(pThis, __presult))
        }
    }
    public func get_BlueSlope() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlueSlope(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueSlope(System.Single)
    private func _n_put_BlueSlope(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueSlope(pThis, value))
        }
    }
    public func put_BlueSlope(value : Swift.Float) throws -> Void {
        try self._n_put_BlueSlope(value);
    }
    // [IsSpecialName] bool get_BlueDisable()
    private func _n_get_BlueDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, __presult))
        }
    }
    public func get_BlueDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_BlueDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueDisable(bool)
    private func _n_put_BlueDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, value))
        }
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        try self._n_put_BlueDisable(value);
    }
    // [IsSpecialName] System.Single get_AlphaOffset()
    private func _n_get_AlphaOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaOffset(pThis, __presult))
        }
    }
    public func get_AlphaOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_AlphaOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaOffset(System.Single)
    private func _n_put_AlphaOffset(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaOffset(pThis, value))
        }
    }
    public func put_AlphaOffset(value : Swift.Float) throws -> Void {
        try self._n_put_AlphaOffset(value);
    }
    // [IsSpecialName] System.Single get_AlphaSlope()
    private func _n_get_AlphaSlope(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaSlope(pThis, __presult))
        }
    }
    public func get_AlphaSlope() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_AlphaSlope(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaSlope(System.Single)
    private func _n_put_AlphaSlope(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaSlope(pThis, value))
        }
    }
    public func put_AlphaSlope(value : Swift.Float) throws -> Void {
        try self._n_put_AlphaSlope(value);
    }
    // [IsSpecialName] bool get_AlphaDisable()
    private func _n_get_AlphaDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, __presult))
        }
    }
    public func get_AlphaDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AlphaDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaDisable(bool)
    private func _n_put_AlphaDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, value))
        }
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        try self._n_put_AlphaDisable(value);
    }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaDisable : boolean {
        get throws {
            return try get_AlphaDisable();
        }
    }
    public var AlphaOffset : Swift.Float {
        get throws {
            return try get_AlphaOffset();
        }
    }
    public var AlphaSlope : Swift.Float {
        get throws {
            return try get_AlphaSlope();
        }
    }
    public var BlueDisable : boolean {
        get throws {
            return try get_BlueDisable();
        }
    }
    public var BlueOffset : Swift.Float {
        get throws {
            return try get_BlueOffset();
        }
    }
    public var BlueSlope : Swift.Float {
        get throws {
            return try get_BlueSlope();
        }
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var GreenDisable : boolean {
        get throws {
            return try get_GreenDisable();
        }
    }
    public var GreenOffset : Swift.Float {
        get throws {
            return try get_GreenOffset();
        }
    }
    public var GreenSlope : Swift.Float {
        get throws {
            return try get_GreenSlope();
        }
    }
    public var RedDisable : boolean {
        get throws {
            return try get_RedDisable();
        }
    }
    public var RedOffset : Swift.Float {
        get throws {
            return try get_RedOffset();
        }
    }
    public var RedSlope : Swift.Float {
        get throws {
            return try get_RedSlope();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // ILinearTransferEffect


// type: Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect
// interface type
open class ILuminanceToAlphaEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x22364900, Data2: 0xac51, Data3 : 0x5bd3, Data4 : (0x8b, 0xd2, 0xd6, 0x26, 0xfc, 0x9a, 0x65, 0xf9)) }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // ILuminanceToAlphaEffect


// type: Microsoft.Graphics.Canvas.Effects.IMorphologyEffect
// interface type
open class IMorphologyEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xff065fdb, Data2: 0x62c8, Data3 : 0x5808, Data4 : (0x92, 0x1e, 0x49, 0xef, 0xa4, 0x3a, 0x3d, 0x34)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode get_Mode()
    private func _n_get_Mode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, __presult))
        }
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode_Erode;
        try self._n_get_Mode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Mode(Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode)
    private func _n_put_Mode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
        }
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode) throws -> Void {
        try self._n_put_Mode(value);
    }
    // [IsSpecialName] System.Int32 get_Width()
    private func _n_get_Width(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, __presult))
        }
    }
    public func get_Width() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Width(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Width(System.Int32)
    private func _n_put_Width(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Width(pThis, value))
        }
    }
    public func put_Width(value : Swift.Int32) throws -> Void {
        try self._n_put_Width(value);
    }
    // [IsSpecialName] System.Int32 get_Height()
    private func _n_get_Height(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, __presult))
        }
    }
    public func get_Height() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Height(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Height(System.Int32)
    private func _n_put_Height(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Height(pThis, value))
        }
    }
    public func put_Height(value : Swift.Int32) throws -> Void {
        try self._n_put_Height(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Height : Swift.Int32 {
        get throws {
            return try get_Height();
        }
    }
    public var Mode : Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode {
        get throws {
            return try get_Mode();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var Width : Swift.Int32 {
        get throws {
            return try get_Width();
        }
    }
} // IMorphologyEffect


// type: Microsoft.Graphics.Canvas.Effects.IOpacityEffect
// interface type
open class IOpacityEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x94b6ad75, Data2: 0xc540, Data3 : 0x51b8, Data4 : (0xa9, 0xd1, 0x54, 0x41, 0x74, 0xad, 0xc6, 0x8d)) }
    // [IsSpecialName] System.Single get_Opacity()
    private func _n_get_Opacity(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, __presult))
        }
    }
    public func get_Opacity() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Opacity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Opacity(System.Single)
    private func _n_put_Opacity(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
        }
    }
    public func put_Opacity(value : Swift.Float) throws -> Void {
        try self._n_put_Opacity(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Opacity : Swift.Float {
        get throws {
            return try get_Opacity();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IOpacityEffect


// type: Microsoft.Graphics.Canvas.Effects.IOpacityEffectStatics
// interface type
open class IOpacityEffectStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x91a7cde3, Data2: 0xb9b7, Data3 : 0x5437, Data4 : (0x88, 0x78, 0xfb, 0x2e, 0x14, 0x10, 0x0e, 0x6d)) }
    // [IsSpecialName] bool get_IsSupported()
    private func _n_get_IsSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, __presult))
        }
    }
    public func get_IsSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSupported(&__result);
        return __result;
    }
    public var IsSupported : boolean {
        get throws {
            return try get_IsSupported();
        }
    }
} // IOpacityEffectStatics


// type: Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect
// interface type
open class IOpacityMetadataEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x099f3299, Data2: 0x9b0a, Data3 : 0x5ed3, Data4 : (0xb0, 0x44, 0x4a, 0x6f, 0xc9, 0x6f, 0x83, 0x62)) }
    // [IsSpecialName] Windows.Foundation.Rect get_OpaqueRectangle()
    private func _n_get_OpaqueRectangle(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpaqueRectangle(pThis, __presult))
        }
    }
    public func get_OpaqueRectangle() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_OpaqueRectangle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OpaqueRectangle(Windows.Foundation.Rect)
    private func _n_put_OpaqueRectangle(_ value : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpaqueRectangle(pThis, value))
        }
    }
    public func put_OpaqueRectangle(value : Windows.Foundation.Rect) throws -> Void {
        try self._n_put_OpaqueRectangle(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var OpaqueRectangle : Windows.Foundation.Rect {
        get throws {
            return try get_OpaqueRectangle();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IOpacityMetadataEffect


// type: Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect
// interface type
open class IPixelShaderEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfc8c3c31, Data2: 0xfa96, Data3 : 0x45e2, Data4 : (0x8b, 0x72, 0x17, 0x41, 0xc6, 0x5c, 0xee, 0x8e)) }
    // [IsSpecialName] Windows.Foundation.Collections.IMap<System.String,System.Object> get_Properties()
    private func _n_get_Properties(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING_IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, __presult))
        }
    }
    public func get_Properties() throws -> Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING_IInspectable>> = nil;
        try self._n_get_Properties(&__result);
        return ClosedGenerics.IMap_2_HSTRING_IInspectable(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source1()
    private func _n_get_Source1(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1(pThis, __presult))
        }
    }
    public func get_Source1() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source1(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source2()
    private func _n_get_Source2(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2(pThis, __presult))
        }
    }
    public func get_Source2() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source2(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source3()
    private func _n_get_Source3(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3(pThis, __presult))
        }
    }
    public func get_Source3() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source3(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source4()
    private func _n_get_Source4(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4(pThis, __presult))
        }
    }
    public func get_Source4() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source4(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source5()
    private func _n_get_Source5(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5(pThis, __presult))
        }
    }
    public func get_Source5() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source5(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source6()
    private func _n_get_Source6(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6(pThis, __presult))
        }
    }
    public func get_Source6() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source6(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source7()
    private func _n_get_Source7(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7(pThis, __presult))
        }
    }
    public func get_Source7() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source7(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source8()
    private func _n_get_Source8(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8(pThis, __presult))
        }
    }
    public func get_Source8() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source8(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source1(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source1(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1(pThis, source))
        }
    }
    public func put_Source1(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source1(RawPointer(source));
    }
    // [IsSpecialName] void put_Source2(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source2(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2(pThis, source))
        }
    }
    public func put_Source2(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source2(RawPointer(source));
    }
    // [IsSpecialName] void put_Source3(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source3(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3(pThis, source))
        }
    }
    public func put_Source3(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source3(RawPointer(source));
    }
    // [IsSpecialName] void put_Source4(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source4(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4(pThis, source))
        }
    }
    public func put_Source4(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source4(RawPointer(source));
    }
    // [IsSpecialName] void put_Source5(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source5(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5(pThis, source))
        }
    }
    public func put_Source5(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source5(RawPointer(source));
    }
    // [IsSpecialName] void put_Source6(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source6(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6(pThis, source))
        }
    }
    public func put_Source6(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source6(RawPointer(source));
    }
    // [IsSpecialName] void put_Source7(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source7(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7(pThis, source))
        }
    }
    public func put_Source7(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source7(RawPointer(source));
    }
    // [IsSpecialName] void put_Source8(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source8(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8(pThis, source))
        }
    }
    public func put_Source8(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source8(RawPointer(source));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source1Mapping()
    private func _n_get_Source1Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1Mapping(pThis, __presult))
        }
    }
    public func get_Source1Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source1Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source2Mapping()
    private func _n_get_Source2Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2Mapping(pThis, __presult))
        }
    }
    public func get_Source2Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source2Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source3Mapping()
    private func _n_get_Source3Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3Mapping(pThis, __presult))
        }
    }
    public func get_Source3Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source3Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source4Mapping()
    private func _n_get_Source4Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4Mapping(pThis, __presult))
        }
    }
    public func get_Source4Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source4Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source5Mapping()
    private func _n_get_Source5Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5Mapping(pThis, __presult))
        }
    }
    public func get_Source5Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source5Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source6Mapping()
    private func _n_get_Source6Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6Mapping(pThis, __presult))
        }
    }
    public func get_Source6Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source6Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source7Mapping()
    private func _n_get_Source7Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7Mapping(pThis, __presult))
        }
    }
    public func get_Source7Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source7Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping get_Source8Mapping()
    private func _n_get_Source8Mapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8Mapping(pThis, __presult))
        }
    }
    public func get_Source8Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        try self._n_get_Source8Mapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Source1Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source1Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1Mapping(pThis, value))
        }
    }
    public func put_Source1Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source1Mapping(value);
    }
    // [IsSpecialName] void put_Source2Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source2Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2Mapping(pThis, value))
        }
    }
    public func put_Source2Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source2Mapping(value);
    }
    // [IsSpecialName] void put_Source3Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source3Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3Mapping(pThis, value))
        }
    }
    public func put_Source3Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source3Mapping(value);
    }
    // [IsSpecialName] void put_Source4Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source4Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4Mapping(pThis, value))
        }
    }
    public func put_Source4Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source4Mapping(value);
    }
    // [IsSpecialName] void put_Source5Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source5Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5Mapping(pThis, value))
        }
    }
    public func put_Source5Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source5Mapping(value);
    }
    // [IsSpecialName] void put_Source6Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source6Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6Mapping(pThis, value))
        }
    }
    public func put_Source6Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source6Mapping(value);
    }
    // [IsSpecialName] void put_Source7Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source7Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7Mapping(pThis, value))
        }
    }
    public func put_Source7Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source7Mapping(value);
    }
    // [IsSpecialName] void put_Source8Mapping(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping)
    private func _n_put_Source8Mapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8Mapping(pThis, value))
        }
    }
    public func put_Source8Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        try self._n_put_Source8Mapping(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source1BorderMode()
    private func _n_get_Source1BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1BorderMode(pThis, __presult))
        }
    }
    public func get_Source1BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source1BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source2BorderMode()
    private func _n_get_Source2BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2BorderMode(pThis, __presult))
        }
    }
    public func get_Source2BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source2BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source3BorderMode()
    private func _n_get_Source3BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3BorderMode(pThis, __presult))
        }
    }
    public func get_Source3BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source3BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source4BorderMode()
    private func _n_get_Source4BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4BorderMode(pThis, __presult))
        }
    }
    public func get_Source4BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source4BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source5BorderMode()
    private func _n_get_Source5BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5BorderMode(pThis, __presult))
        }
    }
    public func get_Source5BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source5BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source6BorderMode()
    private func _n_get_Source6BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6BorderMode(pThis, __presult))
        }
    }
    public func get_Source6BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source6BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source7BorderMode()
    private func _n_get_Source7BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7BorderMode(pThis, __presult))
        }
    }
    public func get_Source7BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source7BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_Source8BorderMode()
    private func _n_get_Source8BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8BorderMode(pThis, __presult))
        }
    }
    public func get_Source8BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_Source8BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Source1BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source1BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1BorderMode(pThis, value))
        }
    }
    public func put_Source1BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source1BorderMode(value);
    }
    // [IsSpecialName] void put_Source2BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source2BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2BorderMode(pThis, value))
        }
    }
    public func put_Source2BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source2BorderMode(value);
    }
    // [IsSpecialName] void put_Source3BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source3BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3BorderMode(pThis, value))
        }
    }
    public func put_Source3BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source3BorderMode(value);
    }
    // [IsSpecialName] void put_Source4BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source4BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4BorderMode(pThis, value))
        }
    }
    public func put_Source4BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source4BorderMode(value);
    }
    // [IsSpecialName] void put_Source5BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source5BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5BorderMode(pThis, value))
        }
    }
    public func put_Source5BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source5BorderMode(value);
    }
    // [IsSpecialName] void put_Source6BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source6BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6BorderMode(pThis, value))
        }
    }
    public func put_Source6BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source6BorderMode(value);
    }
    // [IsSpecialName] void put_Source7BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source7BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7BorderMode(pThis, value))
        }
    }
    public func put_Source7BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source7BorderMode(value);
    }
    // [IsSpecialName] void put_Source8BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_Source8BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8BorderMode(pThis, value))
        }
    }
    public func put_Source8BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_Source8BorderMode(value);
    }
    // [IsSpecialName] System.Int32 get_MaxSamplerOffset()
    private func _n_get_MaxSamplerOffset(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSamplerOffset(pThis, __presult))
        }
    }
    public func get_MaxSamplerOffset() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_MaxSamplerOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxSamplerOffset(System.Int32)
    private func _n_put_MaxSamplerOffset(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxSamplerOffset(pThis, value))
        }
    }
    public func put_MaxSamplerOffset(value : Swift.Int32) throws -> Void {
        try self._n_put_MaxSamplerOffset(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source1Interpolation()
    private func _n_get_Source1Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1Interpolation(pThis, __presult))
        }
    }
    public func get_Source1Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source1Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source2Interpolation()
    private func _n_get_Source2Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2Interpolation(pThis, __presult))
        }
    }
    public func get_Source2Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source2Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source3Interpolation()
    private func _n_get_Source3Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3Interpolation(pThis, __presult))
        }
    }
    public func get_Source3Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source3Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source4Interpolation()
    private func _n_get_Source4Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4Interpolation(pThis, __presult))
        }
    }
    public func get_Source4Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source4Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source5Interpolation()
    private func _n_get_Source5Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5Interpolation(pThis, __presult))
        }
    }
    public func get_Source5Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source5Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source6Interpolation()
    private func _n_get_Source6Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6Interpolation(pThis, __presult))
        }
    }
    public func get_Source6Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source6Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source7Interpolation()
    private func _n_get_Source7Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7Interpolation(pThis, __presult))
        }
    }
    public func get_Source7Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source7Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Source8Interpolation()
    private func _n_get_Source8Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8Interpolation(pThis, __presult))
        }
    }
    public func get_Source8Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Source8Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Source1Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source1Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1Interpolation(pThis, value))
        }
    }
    public func put_Source1Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source1Interpolation(value);
    }
    // [IsSpecialName] void put_Source2Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source2Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2Interpolation(pThis, value))
        }
    }
    public func put_Source2Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source2Interpolation(value);
    }
    // [IsSpecialName] void put_Source3Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source3Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3Interpolation(pThis, value))
        }
    }
    public func put_Source3Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source3Interpolation(value);
    }
    // [IsSpecialName] void put_Source4Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source4Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4Interpolation(pThis, value))
        }
    }
    public func put_Source4Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source4Interpolation(value);
    }
    // [IsSpecialName] void put_Source5Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source5Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5Interpolation(pThis, value))
        }
    }
    public func put_Source5Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source5Interpolation(value);
    }
    // [IsSpecialName] void put_Source6Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source6Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6Interpolation(pThis, value))
        }
    }
    public func put_Source6Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source6Interpolation(value);
    }
    // [IsSpecialName] void put_Source7Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source7Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7Interpolation(pThis, value))
        }
    }
    public func put_Source7Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source7Interpolation(value);
    }
    // [IsSpecialName] void put_Source8Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Source8Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8Interpolation(pThis, value))
        }
    }
    public func put_Source8Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Source8Interpolation(value);
    }
    // bool IsSupported(Microsoft.Graphics.Canvas.CanvasDevice)
    private func _n_IsSupported(_ device : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, device, __presult))
        }
    }
    public func IsSupported(device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsSupported(RawPointer(device), &__result);
        return __result;
    }
    public var MaxSamplerOffset : Swift.Int32 {
        get throws {
            return try get_MaxSamplerOffset();
        }
    }
    public var Properties : Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        get throws {
            return try get_Properties();
        }
    }
    public var Source1 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source1();
        }
    }
    public var Source1BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source1BorderMode();
        }
    }
    public var Source1Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source1Interpolation();
        }
    }
    public var Source1Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source1Mapping();
        }
    }
    public var Source2 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source2();
        }
    }
    public var Source2BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source2BorderMode();
        }
    }
    public var Source2Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source2Interpolation();
        }
    }
    public var Source2Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source2Mapping();
        }
    }
    public var Source3 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source3();
        }
    }
    public var Source3BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source3BorderMode();
        }
    }
    public var Source3Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source3Interpolation();
        }
    }
    public var Source3Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source3Mapping();
        }
    }
    public var Source4 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source4();
        }
    }
    public var Source4BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source4BorderMode();
        }
    }
    public var Source4Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source4Interpolation();
        }
    }
    public var Source4Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source4Mapping();
        }
    }
    public var Source5 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source5();
        }
    }
    public var Source5BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source5BorderMode();
        }
    }
    public var Source5Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source5Interpolation();
        }
    }
    public var Source5Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source5Mapping();
        }
    }
    public var Source6 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source6();
        }
    }
    public var Source6BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source6BorderMode();
        }
    }
    public var Source6Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source6Interpolation();
        }
    }
    public var Source6Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source6Mapping();
        }
    }
    public var Source7 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source7();
        }
    }
    public var Source7BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source7BorderMode();
        }
    }
    public var Source7Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source7Interpolation();
        }
    }
    public var Source7Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source7Mapping();
        }
    }
    public var Source8 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source8();
        }
    }
    public var Source8BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_Source8BorderMode();
        }
    }
    public var Source8Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Source8Interpolation();
        }
    }
    public var Source8Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
            return try get_Source8Mapping();
        }
    }
} // IPixelShaderEffect


// type: Microsoft.Graphics.Canvas.Effects.IPixelShaderEffectFactory
// interface type
// ACTIVATION INTERFACE
open class IPixelShaderEffectFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9d1727e5, Data2: 0x489d, Data3 : 0x4abc, Data4 : (0xb1, 0x29, 0x53, 0x61, 0xe3, 0x53, 0x4a, 0xf4)) }
    // Microsoft.Graphics.Canvas.Effects.PixelShaderEffect Create(System.Byte[])
    private func _n_Create(_ shaderCodeLength : UINT32, _ shaderCode : Optional<UnsafeMutablePointer<UINT8>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, shaderCodeLength, shaderCode, __presult))
        }
    }
    public func Create(shaderCodeLength : UINT32, shaderCode : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect>> = nil;
        try self._n_Create(shaderCodeLength, shaderCode, &__result);
        return Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect(consuming: __result);
    }
} // IPixelShaderEffectFactory


// type: Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect
// interface type
open class IPointDiffuseEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6cce09ec, Data2: 0xf847, Data3 : 0x5661, Data4 : (0xaf, 0x4b, 0x53, 0x1d, 0xd3, 0xdd, 0x7d, 0x6e)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_LightPosition()
    private func _n_get_LightPosition(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, __presult))
        }
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_LightPosition(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightPosition(Windows.Foundation.Numerics.Vector3)
    private func _n_put_LightPosition(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, value))
        }
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_LightPosition(value);
    }
    // [IsSpecialName] System.Single get_DiffuseAmount()
    private func _n_get_DiffuseAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DiffuseAmount(pThis, __presult))
        }
    }
    public func get_DiffuseAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_DiffuseAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DiffuseAmount(System.Single)
    private func _n_put_DiffuseAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DiffuseAmount(pThis, value))
        }
    }
    public func put_DiffuseAmount(value : Swift.Float) throws -> Void {
        try self._n_put_DiffuseAmount(value);
    }
    // [IsSpecialName] System.Single get_HeightMapScale()
    private func _n_get_HeightMapScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, __presult))
        }
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_HeightMapScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapScale(System.Single)
    private func _n_put_HeightMapScale(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
        }
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        try self._n_put_HeightMapScale(value);
    }
    // [IsSpecialName] Windows.UI.Color get_LightColor()
    private func _n_get_LightColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, __presult))
        }
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_LightColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColor(Windows.UI.Color)
    private func _n_put_LightColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, value))
        }
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_LightColor(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_HeightMapKernelSize()
    private func _n_get_HeightMapKernelSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, __presult))
        }
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_HeightMapKernelSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapKernelSize(Windows.Foundation.Numerics.Vector2)
    private func _n_put_HeightMapKernelSize(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, value))
        }
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_HeightMapKernelSize(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
    private func _n_get_HeightMapInterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, __presult))
        }
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_HeightMapInterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapInterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_HeightMapInterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
        }
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_HeightMapInterpolationMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_LightColorHdr()
    private func _n_get_LightColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, __presult))
        }
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_LightColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_LightColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, value))
        }
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_LightColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var DiffuseAmount : Swift.Float {
        get throws {
            return try get_DiffuseAmount();
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_HeightMapInterpolationMode();
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_HeightMapKernelSize();
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
            return try get_HeightMapScale();
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
            return try get_LightColor();
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_LightColorHdr();
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_LightPosition();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IPointDiffuseEffect


// type: Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect
// interface type
open class IPointSpecularEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xec8afe9b, Data2: 0x8501, Data3 : 0x5286, Data4 : (0xa4, 0x3c, 0x1a, 0xff, 0xf7, 0x42, 0x0a, 0xd6)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_LightPosition()
    private func _n_get_LightPosition(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, __presult))
        }
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_LightPosition(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightPosition(Windows.Foundation.Numerics.Vector3)
    private func _n_put_LightPosition(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, value))
        }
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_LightPosition(value);
    }
    // [IsSpecialName] System.Single get_SpecularExponent()
    private func _n_get_SpecularExponent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularExponent(pThis, __presult))
        }
    }
    public func get_SpecularExponent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_SpecularExponent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SpecularExponent(System.Single)
    private func _n_put_SpecularExponent(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularExponent(pThis, value))
        }
    }
    public func put_SpecularExponent(value : Swift.Float) throws -> Void {
        try self._n_put_SpecularExponent(value);
    }
    // [IsSpecialName] System.Single get_SpecularAmount()
    private func _n_get_SpecularAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularAmount(pThis, __presult))
        }
    }
    public func get_SpecularAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_SpecularAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SpecularAmount(System.Single)
    private func _n_put_SpecularAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularAmount(pThis, value))
        }
    }
    public func put_SpecularAmount(value : Swift.Float) throws -> Void {
        try self._n_put_SpecularAmount(value);
    }
    // [IsSpecialName] System.Single get_HeightMapScale()
    private func _n_get_HeightMapScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, __presult))
        }
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_HeightMapScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapScale(System.Single)
    private func _n_put_HeightMapScale(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
        }
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        try self._n_put_HeightMapScale(value);
    }
    // [IsSpecialName] Windows.UI.Color get_LightColor()
    private func _n_get_LightColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, __presult))
        }
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_LightColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColor(Windows.UI.Color)
    private func _n_put_LightColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, value))
        }
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_LightColor(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_HeightMapKernelSize()
    private func _n_get_HeightMapKernelSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, __presult))
        }
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_HeightMapKernelSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapKernelSize(Windows.Foundation.Numerics.Vector2)
    private func _n_put_HeightMapKernelSize(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, value))
        }
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_HeightMapKernelSize(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
    private func _n_get_HeightMapInterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, __presult))
        }
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_HeightMapInterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapInterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_HeightMapInterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
        }
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_HeightMapInterpolationMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_LightColorHdr()
    private func _n_get_LightColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, __presult))
        }
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_LightColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_LightColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, value))
        }
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_LightColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_HeightMapInterpolationMode();
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_HeightMapKernelSize();
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
            return try get_HeightMapScale();
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
            return try get_LightColor();
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_LightColorHdr();
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_LightPosition();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SpecularAmount : Swift.Float {
        get throws {
            return try get_SpecularAmount();
        }
    }
    public var SpecularExponent : Swift.Float {
        get throws {
            return try get_SpecularExponent();
        }
    }
} // IPointSpecularEffect


// type: Microsoft.Graphics.Canvas.Effects.IPosterizeEffect
// interface type
open class IPosterizeEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f631a3b, Data2: 0xc89a, Data3 : 0x507c, Data4 : (0x97, 0x56, 0x29, 0x9b, 0x61, 0x43, 0x4f, 0xa4)) }
    // [IsSpecialName] System.Int32 get_RedValueCount()
    private func _n_get_RedValueCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedValueCount(pThis, __presult))
        }
    }
    public func get_RedValueCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_RedValueCount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedValueCount(System.Int32)
    private func _n_put_RedValueCount(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedValueCount(pThis, value))
        }
    }
    public func put_RedValueCount(value : Swift.Int32) throws -> Void {
        try self._n_put_RedValueCount(value);
    }
    // [IsSpecialName] System.Int32 get_GreenValueCount()
    private func _n_get_GreenValueCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenValueCount(pThis, __presult))
        }
    }
    public func get_GreenValueCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_GreenValueCount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenValueCount(System.Int32)
    private func _n_put_GreenValueCount(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenValueCount(pThis, value))
        }
    }
    public func put_GreenValueCount(value : Swift.Int32) throws -> Void {
        try self._n_put_GreenValueCount(value);
    }
    // [IsSpecialName] System.Int32 get_BlueValueCount()
    private func _n_get_BlueValueCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueValueCount(pThis, __presult))
        }
    }
    public func get_BlueValueCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_BlueValueCount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueValueCount(System.Int32)
    private func _n_put_BlueValueCount(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueValueCount(pThis, value))
        }
    }
    public func put_BlueValueCount(value : Swift.Int32) throws -> Void {
        try self._n_put_BlueValueCount(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BlueValueCount : Swift.Int32 {
        get throws {
            return try get_BlueValueCount();
        }
    }
    public var GreenValueCount : Swift.Int32 {
        get throws {
            return try get_GreenValueCount();
        }
    }
    public var RedValueCount : Swift.Int32 {
        get throws {
            return try get_RedValueCount();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IPosterizeEffect


// type: Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect
// interface type
open class IPremultiplyEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd29a9d1e, Data2: 0xbd57, Data3 : 0x5f3e, Data4 : (0x9a, 0xe0, 0x00, 0x9c, 0x6a, 0xc5, 0xb0, 0x6d)) }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IPremultiplyEffect


// type: Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect
// interface type
open class IRgbToHueEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7caeadc6, Data2: 0x9eb3, Data3 : 0x5895, Data4 : (0xb8, 0x76, 0xf4, 0x85, 0xc9, 0x57, 0x48, 0x47)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace get_OutputColorSpace()
    private func _n_get_OutputColorSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputColorSpace(pThis, __presult))
        }
    }
    public func get_OutputColorSpace() throws -> Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace_Hsv;
        try self._n_get_OutputColorSpace(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutputColorSpace(Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace)
    private func _n_put_OutputColorSpace(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutputColorSpace(pThis, value))
        }
    }
    public func put_OutputColorSpace(value : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace) throws -> Void {
        try self._n_put_OutputColorSpace(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var OutputColorSpace : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        get throws {
            return try get_OutputColorSpace();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IRgbToHueEffect


// type: Microsoft.Graphics.Canvas.Effects.ISaturationEffect
// interface type
open class ISaturationEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf85a5ed7, Data2: 0x7212, Data3 : 0x57a6, Data4 : (0xb3, 0x57, 0x61, 0x03, 0x89, 0x61, 0xc5, 0x8d)) }
    // [IsSpecialName] System.Single get_Saturation()
    private func _n_get_Saturation(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Saturation(pThis, __presult))
        }
    }
    public func get_Saturation() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Saturation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Saturation(System.Single)
    private func _n_put_Saturation(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Saturation(pThis, value))
        }
    }
    public func put_Saturation(value : Swift.Float) throws -> Void {
        try self._n_put_Saturation(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Saturation : Swift.Float {
        get throws {
            return try get_Saturation();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // ISaturationEffect


// type: Microsoft.Graphics.Canvas.Effects.IScaleEffect
// interface type
open class IScaleEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7522ae90, Data2: 0xbec2, Data3 : 0x512c, Data4 : (0xbc, 0xc0, 0x4d, 0x6a, 0x97, 0xe3, 0xed, 0x34)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_Scale()
    private func _n_get_Scale(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scale(pThis, __presult))
        }
    }
    public func get_Scale() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_Scale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Scale(Windows.Foundation.Numerics.Vector2)
    private func _n_put_Scale(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Scale(pThis, value))
        }
    }
    public func put_Scale(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_Scale(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_CenterPoint()
    private func _n_get_CenterPoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CenterPoint(pThis, __presult))
        }
    }
    public func get_CenterPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_CenterPoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CenterPoint(Windows.Foundation.Numerics.Vector2)
    private func _n_put_CenterPoint(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CenterPoint(pThis, value))
        }
    }
    public func put_CenterPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_CenterPoint(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
    private func _n_get_InterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, __presult))
        }
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_InterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_InterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
        }
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_InterpolationMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] System.Single get_Sharpness()
    private func _n_get_Sharpness(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Sharpness(pThis, __presult))
        }
    }
    public func get_Sharpness() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Sharpness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Sharpness(System.Single)
    private func _n_put_Sharpness(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Sharpness(pThis, value))
        }
    }
    public func put_Sharpness(value : Swift.Float) throws -> Void {
        try self._n_put_Sharpness(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var CenterPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_CenterPoint();
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_InterpolationMode();
        }
    }
    public var Scale : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_Scale();
        }
    }
    public var Sharpness : Swift.Float {
        get throws {
            return try get_Sharpness();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IScaleEffect


// type: Microsoft.Graphics.Canvas.Effects.ISepiaEffect
// interface type
open class ISepiaEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf933471f, Data2: 0xa7af, Data3 : 0x5521, Data4 : (0xbe, 0x79, 0xb0, 0xda, 0x22, 0x97, 0x6c, 0xff)) }
    // [IsSpecialName] System.Single get_Intensity()
    private func _n_get_Intensity(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Intensity(pThis, __presult))
        }
    }
    public func get_Intensity() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Intensity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Intensity(System.Single)
    private func _n_put_Intensity(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Intensity(pThis, value))
        }
    }
    public func put_Intensity(value : Swift.Float) throws -> Void {
        try self._n_put_Intensity(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaMode(Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_put_AlphaMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
        }
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        try self._n_put_AlphaMode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var Intensity : Swift.Float {
        get throws {
            return try get_Intensity();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // ISepiaEffect


// type: Microsoft.Graphics.Canvas.Effects.IShadowEffect
// interface type
open class IShadowEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3947c621, Data2: 0x78da, Data3 : 0x5489, Data4 : (0x99, 0x27, 0xbe, 0x65, 0x5f, 0x45, 0x76, 0xe2)) }
    // [IsSpecialName] System.Single get_BlurAmount()
    private func _n_get_BlurAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, __presult))
        }
    }
    public func get_BlurAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_BlurAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlurAmount(System.Single)
    private func _n_put_BlurAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
        }
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        try self._n_put_BlurAmount(value);
    }
    // [IsSpecialName] Windows.UI.Color get_ShadowColor()
    private func _n_get_ShadowColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShadowColor(pThis, __presult))
        }
    }
    public func get_ShadowColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_ShadowColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ShadowColor(Windows.UI.Color)
    private func _n_put_ShadowColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShadowColor(pThis, value))
        }
    }
    public func put_ShadowColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_ShadowColor(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectOptimization get_Optimization()
    private func _n_get_Optimization(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Optimization(pThis, __presult))
        }
    }
    public func get_Optimization() throws -> Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Speed;
        try self._n_get_Optimization(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Optimization(Microsoft.Graphics.Canvas.Effects.EffectOptimization)
    private func _n_put_Optimization(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Optimization(pThis, value))
        }
    }
    public func put_Optimization(value : Microsoft.Graphics.Canvas.Effects.EffectOptimization) throws -> Void {
        try self._n_put_Optimization(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_ShadowColorHdr()
    private func _n_get_ShadowColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShadowColorHdr(pThis, __presult))
        }
    }
    public func get_ShadowColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_ShadowColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ShadowColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_ShadowColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShadowColorHdr(pThis, value))
        }
    }
    public func put_ShadowColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_ShadowColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BlurAmount : Swift.Float {
        get throws {
            return try get_BlurAmount();
        }
    }
    public var Optimization : Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        get throws {
            return try get_Optimization();
        }
    }
    public var ShadowColor : Windows.UI.Color {
        get throws {
            return try get_ShadowColor();
        }
    }
    public var ShadowColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_ShadowColorHdr();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IShadowEffect


// type: Microsoft.Graphics.Canvas.Effects.ISharpenEffect
// interface type
open class ISharpenEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7efef0a1, Data2: 0x7578, Data3 : 0x5f62, Data4 : (0x83, 0x64, 0x46, 0x14, 0x56, 0x74, 0xef, 0x7e)) }
    // [IsSpecialName] System.Single get_Amount()
    private func _n_get_Amount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, __presult))
        }
    }
    public func get_Amount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Amount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Amount(System.Single)
    private func _n_put_Amount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
        }
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        try self._n_put_Amount(value);
    }
    // [IsSpecialName] System.Single get_Threshold()
    private func _n_get_Threshold(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Threshold(pThis, __presult))
        }
    }
    public func get_Threshold() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Threshold(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Threshold(System.Single)
    private func _n_put_Threshold(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Threshold(pThis, value))
        }
    }
    public func put_Threshold(value : Swift.Float) throws -> Void {
        try self._n_put_Threshold(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Amount : Swift.Float {
        get throws {
            return try get_Amount();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var Threshold : Swift.Float {
        get throws {
            return try get_Threshold();
        }
    }
} // ISharpenEffect


// type: Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect
// interface type
open class ISpotDiffuseEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb3dcbe44, Data2: 0x1dd7, Data3 : 0x5cb3, Data4 : (0x95, 0xe5, 0xa4, 0x89, 0x74, 0xcd, 0x12, 0xe8)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_LightPosition()
    private func _n_get_LightPosition(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, __presult))
        }
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_LightPosition(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightPosition(Windows.Foundation.Numerics.Vector3)
    private func _n_put_LightPosition(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, value))
        }
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_LightPosition(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_LightTarget()
    private func _n_get_LightTarget(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightTarget(pThis, __presult))
        }
    }
    public func get_LightTarget() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_LightTarget(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightTarget(Windows.Foundation.Numerics.Vector3)
    private func _n_put_LightTarget(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightTarget(pThis, value))
        }
    }
    public func put_LightTarget(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_LightTarget(value);
    }
    // [IsSpecialName] System.Single get_Focus()
    private func _n_get_Focus(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Focus(pThis, __presult))
        }
    }
    public func get_Focus() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Focus(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Focus(System.Single)
    private func _n_put_Focus(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Focus(pThis, value))
        }
    }
    public func put_Focus(value : Swift.Float) throws -> Void {
        try self._n_put_Focus(value);
    }
    // [IsSpecialName] System.Single get_LimitingConeAngle()
    private func _n_get_LimitingConeAngle(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LimitingConeAngle(pThis, __presult))
        }
    }
    public func get_LimitingConeAngle() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LimitingConeAngle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LimitingConeAngle(System.Single)
    private func _n_put_LimitingConeAngle(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LimitingConeAngle(pThis, value))
        }
    }
    public func put_LimitingConeAngle(value : Swift.Float) throws -> Void {
        try self._n_put_LimitingConeAngle(value);
    }
    // [IsSpecialName] System.Single get_DiffuseAmount()
    private func _n_get_DiffuseAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DiffuseAmount(pThis, __presult))
        }
    }
    public func get_DiffuseAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_DiffuseAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DiffuseAmount(System.Single)
    private func _n_put_DiffuseAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DiffuseAmount(pThis, value))
        }
    }
    public func put_DiffuseAmount(value : Swift.Float) throws -> Void {
        try self._n_put_DiffuseAmount(value);
    }
    // [IsSpecialName] System.Single get_HeightMapScale()
    private func _n_get_HeightMapScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, __presult))
        }
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_HeightMapScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapScale(System.Single)
    private func _n_put_HeightMapScale(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
        }
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        try self._n_put_HeightMapScale(value);
    }
    // [IsSpecialName] Windows.UI.Color get_LightColor()
    private func _n_get_LightColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, __presult))
        }
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_LightColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColor(Windows.UI.Color)
    private func _n_put_LightColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, value))
        }
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_LightColor(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_HeightMapKernelSize()
    private func _n_get_HeightMapKernelSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, __presult))
        }
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_HeightMapKernelSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapKernelSize(Windows.Foundation.Numerics.Vector2)
    private func _n_put_HeightMapKernelSize(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, value))
        }
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_HeightMapKernelSize(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
    private func _n_get_HeightMapInterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, __presult))
        }
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_HeightMapInterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapInterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_HeightMapInterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
        }
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_HeightMapInterpolationMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_LightColorHdr()
    private func _n_get_LightColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, __presult))
        }
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_LightColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_LightColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, value))
        }
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_LightColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var DiffuseAmount : Swift.Float {
        get throws {
            return try get_DiffuseAmount();
        }
    }
    public var Focus : Swift.Float {
        get throws {
            return try get_Focus();
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_HeightMapInterpolationMode();
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_HeightMapKernelSize();
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
            return try get_HeightMapScale();
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
            return try get_LightColor();
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_LightColorHdr();
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_LightPosition();
        }
    }
    public var LightTarget : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_LightTarget();
        }
    }
    public var LimitingConeAngle : Swift.Float {
        get throws {
            return try get_LimitingConeAngle();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // ISpotDiffuseEffect


// type: Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect
// interface type
open class ISpotSpecularEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x83ae4cd0, Data2: 0x80aa, Data3 : 0x5783, Data4 : (0x85, 0x72, 0xf1, 0x5e, 0x5f, 0x85, 0x32, 0x9e)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_LightPosition()
    private func _n_get_LightPosition(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, __presult))
        }
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_LightPosition(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightPosition(Windows.Foundation.Numerics.Vector3)
    private func _n_put_LightPosition(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, value))
        }
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_LightPosition(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_LightTarget()
    private func _n_get_LightTarget(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightTarget(pThis, __presult))
        }
    }
    public func get_LightTarget() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_LightTarget(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightTarget(Windows.Foundation.Numerics.Vector3)
    private func _n_put_LightTarget(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightTarget(pThis, value))
        }
    }
    public func put_LightTarget(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_LightTarget(value);
    }
    // [IsSpecialName] System.Single get_Focus()
    private func _n_get_Focus(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Focus(pThis, __presult))
        }
    }
    public func get_Focus() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Focus(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Focus(System.Single)
    private func _n_put_Focus(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Focus(pThis, value))
        }
    }
    public func put_Focus(value : Swift.Float) throws -> Void {
        try self._n_put_Focus(value);
    }
    // [IsSpecialName] System.Single get_LimitingConeAngle()
    private func _n_get_LimitingConeAngle(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LimitingConeAngle(pThis, __presult))
        }
    }
    public func get_LimitingConeAngle() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LimitingConeAngle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LimitingConeAngle(System.Single)
    private func _n_put_LimitingConeAngle(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LimitingConeAngle(pThis, value))
        }
    }
    public func put_LimitingConeAngle(value : Swift.Float) throws -> Void {
        try self._n_put_LimitingConeAngle(value);
    }
    // [IsSpecialName] System.Single get_SpecularExponent()
    private func _n_get_SpecularExponent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularExponent(pThis, __presult))
        }
    }
    public func get_SpecularExponent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_SpecularExponent(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SpecularExponent(System.Single)
    private func _n_put_SpecularExponent(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularExponent(pThis, value))
        }
    }
    public func put_SpecularExponent(value : Swift.Float) throws -> Void {
        try self._n_put_SpecularExponent(value);
    }
    // [IsSpecialName] System.Single get_SpecularAmount()
    private func _n_get_SpecularAmount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularAmount(pThis, __presult))
        }
    }
    public func get_SpecularAmount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_SpecularAmount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SpecularAmount(System.Single)
    private func _n_put_SpecularAmount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularAmount(pThis, value))
        }
    }
    public func put_SpecularAmount(value : Swift.Float) throws -> Void {
        try self._n_put_SpecularAmount(value);
    }
    // [IsSpecialName] System.Single get_HeightMapScale()
    private func _n_get_HeightMapScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, __presult))
        }
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_HeightMapScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapScale(System.Single)
    private func _n_put_HeightMapScale(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
        }
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        try self._n_put_HeightMapScale(value);
    }
    // [IsSpecialName] Windows.UI.Color get_LightColor()
    private func _n_get_LightColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, __presult))
        }
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_LightColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColor(Windows.UI.Color)
    private func _n_put_LightColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, value))
        }
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_LightColor(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_HeightMapKernelSize()
    private func _n_get_HeightMapKernelSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, __presult))
        }
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_HeightMapKernelSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapKernelSize(Windows.Foundation.Numerics.Vector2)
    private func _n_put_HeightMapKernelSize(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, value))
        }
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_HeightMapKernelSize(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_HeightMapInterpolationMode()
    private func _n_get_HeightMapInterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, __presult))
        }
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_HeightMapInterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HeightMapInterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_HeightMapInterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
        }
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_HeightMapInterpolationMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_LightColorHdr()
    private func _n_get_LightColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, __presult))
        }
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_LightColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LightColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_LightColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, value))
        }
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_LightColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Focus : Swift.Float {
        get throws {
            return try get_Focus();
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_HeightMapInterpolationMode();
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_HeightMapKernelSize();
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
            return try get_HeightMapScale();
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
            return try get_LightColor();
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_LightColorHdr();
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_LightPosition();
        }
    }
    public var LightTarget : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_LightTarget();
        }
    }
    public var LimitingConeAngle : Swift.Float {
        get throws {
            return try get_LimitingConeAngle();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SpecularAmount : Swift.Float {
        get throws {
            return try get_SpecularAmount();
        }
    }
    public var SpecularExponent : Swift.Float {
        get throws {
            return try get_SpecularExponent();
        }
    }
} // ISpotSpecularEffect


// type: Microsoft.Graphics.Canvas.Effects.IStraightenEffect
// interface type
open class IStraightenEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x965fc262, Data2: 0x2eba, Data3 : 0x59e6, Data4 : (0x93, 0x5f, 0x23, 0x89, 0xcb, 0x5a, 0x30, 0x5a)) }
    // [IsSpecialName] System.Single get_Angle()
    private func _n_get_Angle(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, __presult))
        }
    }
    public func get_Angle() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Angle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Angle(System.Single)
    private func _n_put_Angle(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
        }
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        try self._n_put_Angle(value);
    }
    // [IsSpecialName] bool get_MaintainSize()
    private func _n_get_MaintainSize(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaintainSize(pThis, __presult))
        }
    }
    public func get_MaintainSize() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_MaintainSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaintainSize(bool)
    private func _n_put_MaintainSize(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaintainSize(pThis, value))
        }
    }
    public func put_MaintainSize(value : boolean) throws -> Void {
        try self._n_put_MaintainSize(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
    private func _n_get_InterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, __presult))
        }
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_InterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_InterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
        }
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_InterpolationMode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Angle : Swift.Float {
        get throws {
            return try get_Angle();
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_InterpolationMode();
        }
    }
    public var MaintainSize : boolean {
        get throws {
            return try get_MaintainSize();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IStraightenEffect


// type: Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect
// interface type
open class ITableTransfer3DEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xef09c6e0, Data2: 0x9437, Data3 : 0x53f7, Data4 : (0xb7, 0xb4, 0xb5, 0x3c, 0x79, 0xa0, 0xbc, 0x37)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D get_Table()
    private func _n_get_Table(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Table(pThis, __presult))
        }
    }
    public func get_Table() throws -> Optional<Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>> = nil;
        try self._n_get_Table(&__result);
        return Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D(consuming: __result);
    }
    // [IsSpecialName] void put_Table(Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D)
    private func _n_put_Table(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Table(pThis, value))
        }
    }
    public func put_Table(value : Optional<Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D>) throws -> Void {
        try self._n_put_Table(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaMode(Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_put_AlphaMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
        }
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        try self._n_put_AlphaMode(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var Table : Optional<Microsoft.Graphics.Canvas.Effects.IEffectTransferTable3D> {
        get throws {
            return try get_Table();
        }
    }
} // ITableTransfer3DEffect


// type: Microsoft.Graphics.Canvas.Effects.ITableTransferEffect
// interface type
open class ITableTransferEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbf0b63b6, Data2: 0xfe77, Data3 : 0x5198, Data4 : (0xa2, 0xa1, 0x3f, 0xb8, 0x0c, 0x26, 0x8b, 0x8f)) }
    // [IsSpecialName] System.Single[] get_RedTable()
    private func _n_get_RedTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedTable(pThis, __presultLength, __presult))
        }
    }
    public func get_RedTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_RedTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_RedTable(System.Single[])
    private func _n_put_RedTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_RedTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_RedTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_RedDisable()
    private func _n_get_RedDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, __presult))
        }
    }
    public func get_RedDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_RedDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RedDisable(bool)
    private func _n_put_RedDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, value))
        }
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        try self._n_put_RedDisable(value);
    }
    // [IsSpecialName] System.Single[] get_GreenTable()
    private func _n_get_GreenTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenTable(pThis, __presultLength, __presult))
        }
    }
    public func get_GreenTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_GreenTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_GreenTable(System.Single[])
    private func _n_put_GreenTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_GreenTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_GreenTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_GreenDisable()
    private func _n_get_GreenDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, __presult))
        }
    }
    public func get_GreenDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_GreenDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_GreenDisable(bool)
    private func _n_put_GreenDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, value))
        }
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        try self._n_put_GreenDisable(value);
    }
    // [IsSpecialName] System.Single[] get_BlueTable()
    private func _n_get_BlueTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueTable(pThis, __presultLength, __presult))
        }
    }
    public func get_BlueTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_BlueTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_BlueTable(System.Single[])
    private func _n_put_BlueTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_BlueTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_BlueTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_BlueDisable()
    private func _n_get_BlueDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, __presult))
        }
    }
    public func get_BlueDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_BlueDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BlueDisable(bool)
    private func _n_put_BlueDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, value))
        }
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        try self._n_put_BlueDisable(value);
    }
    // [IsSpecialName] System.Single[] get_AlphaTable()
    private func _n_get_AlphaTable(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaTable(pThis, __presultLength, __presult))
        }
    }
    public func get_AlphaTable() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<FLOAT>> = nil;
        try self._n_get_AlphaTable(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] void put_AlphaTable(System.Single[])
    private func _n_put_AlphaTable(_ valueElementsLength : UINT32, _ valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaTable(pThis, valueElementsLength, valueElements))
        }
    }
    public func put_AlphaTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        try self._n_put_AlphaTable(valueElementsLength, valueElements);
    }
    // [IsSpecialName] bool get_AlphaDisable()
    private func _n_get_AlphaDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, __presult))
        }
    }
    public func get_AlphaDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AlphaDisable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlphaDisable(bool)
    private func _n_put_AlphaDisable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, value))
        }
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        try self._n_put_AlphaDisable(value);
    }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var AlphaDisable : boolean {
        get throws {
            return try get_AlphaDisable();
        }
    }
    public var AlphaTable : UINT32 {
        get throws {
            return try get_AlphaTable();
        }
    }
    public var BlueDisable : boolean {
        get throws {
            return try get_BlueDisable();
        }
    }
    public var BlueTable : UINT32 {
        get throws {
            return try get_BlueTable();
        }
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var GreenDisable : boolean {
        get throws {
            return try get_GreenDisable();
        }
    }
    public var GreenTable : UINT32 {
        get throws {
            return try get_GreenTable();
        }
    }
    public var RedDisable : boolean {
        get throws {
            return try get_RedDisable();
        }
    }
    public var RedTable : UINT32 {
        get throws {
            return try get_RedTable();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // ITableTransferEffect


// type: Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect
// interface type
open class ITemperatureAndTintEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8ae43e02, Data2: 0x2619, Data3 : 0x5d78, Data4 : (0x89, 0x80, 0x4e, 0xd5, 0x69, 0x54, 0x9b, 0xd8)) }
    // [IsSpecialName] System.Single get_Temperature()
    private func _n_get_Temperature(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Temperature(pThis, __presult))
        }
    }
    public func get_Temperature() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Temperature(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Temperature(System.Single)
    private func _n_put_Temperature(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Temperature(pThis, value))
        }
    }
    public func put_Temperature(value : Swift.Float) throws -> Void {
        try self._n_put_Temperature(value);
    }
    // [IsSpecialName] System.Single get_Tint()
    private func _n_get_Tint(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tint(pThis, __presult))
        }
    }
    public func get_Tint() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Tint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Tint(System.Single)
    private func _n_put_Tint(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tint(pThis, value))
        }
    }
    public func put_Tint(value : Swift.Float) throws -> Void {
        try self._n_put_Tint(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var Temperature : Swift.Float {
        get throws {
            return try get_Temperature();
        }
    }
    public var Tint : Swift.Float {
        get throws {
            return try get_Tint();
        }
    }
} // ITemperatureAndTintEffect


// type: Microsoft.Graphics.Canvas.Effects.ITileEffect
// interface type
open class ITileEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x78a809cb, Data2: 0x1154, Data3 : 0x5ad6, Data4 : (0xa8, 0x80, 0xe3, 0xa1, 0x75, 0x77, 0x28, 0x15)) }
    // [IsSpecialName] Windows.Foundation.Rect get_SourceRectangle()
    private func _n_get_SourceRectangle(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, __presult))
        }
    }
    public func get_SourceRectangle() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_SourceRectangle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceRectangle(Windows.Foundation.Rect)
    private func _n_put_SourceRectangle(_ value : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, value))
        }
    }
    public func put_SourceRectangle(value : Windows.Foundation.Rect) throws -> Void {
        try self._n_put_SourceRectangle(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var SourceRectangle : Windows.Foundation.Rect {
        get throws {
            return try get_SourceRectangle();
        }
    }
} // ITileEffect


// type: Microsoft.Graphics.Canvas.Effects.ITintEffect
// interface type
open class ITintEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x729a21ea, Data2: 0xc61e, Data3 : 0x5308, Data4 : (0x9e, 0xae, 0xd6, 0x38, 0xaa, 0x1f, 0x5b, 0x8c)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    // [IsSpecialName] bool get_ClampOutput()
    private func _n_get_ClampOutput(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, __presult))
        }
    }
    public func get_ClampOutput() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ClampOutput(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClampOutput(bool)
    private func _n_put_ClampOutput(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, value))
        }
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        try self._n_put_ClampOutput(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_ColorHdr()
    private func _n_get_ColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, __presult))
        }
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_ColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_ColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, value))
        }
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_ColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var ClampOutput : boolean {
        get throws {
            return try get_ClampOutput();
        }
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_ColorHdr();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // ITintEffect


// type: Microsoft.Graphics.Canvas.Effects.ITintEffectStatics
// interface type
open class ITintEffectStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x65e31771, Data2: 0x4baf, Data3 : 0x5c8c, Data4 : (0x93, 0xf4, 0x3b, 0x87, 0x4e, 0x29, 0xf6, 0x8d)) }
    // [IsSpecialName] bool get_IsSupported()
    private func _n_get_IsSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, __presult))
        }
    }
    public func get_IsSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSupported(&__result);
        return __result;
    }
    public var IsSupported : boolean {
        get throws {
            return try get_IsSupported();
        }
    }
} // ITintEffectStatics


// type: Microsoft.Graphics.Canvas.Effects.ITransform2DEffect
// interface type
open class ITransform2DEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4467d118, Data2: 0x33e7, Data3 : 0x5b1a, Data4 : (0x87, 0xc2, 0x0f, 0x1f, 0x04, 0x97, 0x35, 0x3d)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
    private func _n_get_InterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, __presult))
        }
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_InterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_InterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
        }
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_InterpolationMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Matrix3x2 get_TransformMatrix()
    private func _n_get_TransformMatrix(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CMatrix3x2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformMatrix(pThis, __presult))
        }
    }
    public func get_TransformMatrix() throws -> Windows.Foundation.Numerics.Matrix3x2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CMatrix3x2 = _q_CWindows_CFoundation_CNumerics_CMatrix3x2(M11: 0, M12: 0, M21: 0, M22: 0, M31: 0, M32: 0);
        try self._n_get_TransformMatrix(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TransformMatrix(Windows.Foundation.Numerics.Matrix3x2)
    private func _n_put_TransformMatrix(_ value : _q_CWindows_CFoundation_CNumerics_CMatrix3x2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransformMatrix(pThis, value))
        }
    }
    public func put_TransformMatrix(value : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        try self._n_put_TransformMatrix(value);
    }
    // [IsSpecialName] System.Single get_Sharpness()
    private func _n_get_Sharpness(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Sharpness(pThis, __presult))
        }
    }
    public func get_Sharpness() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Sharpness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Sharpness(System.Single)
    private func _n_put_Sharpness(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Sharpness(pThis, value))
        }
    }
    public func put_Sharpness(value : Swift.Float) throws -> Void {
        try self._n_put_Sharpness(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_InterpolationMode();
        }
    }
    public var Sharpness : Swift.Float {
        get throws {
            return try get_Sharpness();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var TransformMatrix : Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
            return try get_TransformMatrix();
        }
    }
} // ITransform2DEffect


// type: Microsoft.Graphics.Canvas.Effects.ITransform3DEffect
// interface type
open class ITransform3DEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3025ed7f, Data2: 0x8f25, Data3 : 0x5e0b, Data4 : (0x80, 0xc9, 0x56, 0xbb, 0xdd, 0x3e, 0x8a, 0x10)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_InterpolationMode()
    private func _n_get_InterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, __presult))
        }
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_InterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InterpolationMode(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_InterpolationMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
        }
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_InterpolationMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.EffectBorderMode get_BorderMode()
    private func _n_get_BorderMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, __presult))
        }
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        try self._n_get_BorderMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderMode(Microsoft.Graphics.Canvas.Effects.EffectBorderMode)
    private func _n_put_BorderMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
        }
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        try self._n_put_BorderMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Matrix4x4 get_TransformMatrix()
    private func _n_get_TransformMatrix(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CMatrix4x4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformMatrix(pThis, __presult))
        }
    }
    public func get_TransformMatrix() throws -> Windows.Foundation.Numerics.Matrix4x4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CMatrix4x4 = _q_CWindows_CFoundation_CNumerics_CMatrix4x4(M11: 0, M12: 0, M13: 0, M14: 0, M21: 0, M22: 0, M23: 0, M24: 0, M31: 0, M32: 0, M33: 0, M34: 0, M41: 0, M42: 0, M43: 0, M44: 0);
        try self._n_get_TransformMatrix(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TransformMatrix(Windows.Foundation.Numerics.Matrix4x4)
    private func _n_put_TransformMatrix(_ value : _q_CWindows_CFoundation_CNumerics_CMatrix4x4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransformMatrix(pThis, value))
        }
    }
    public func put_TransformMatrix(value : Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        try self._n_put_TransformMatrix(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
            return try get_BorderMode();
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_InterpolationMode();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
    public var TransformMatrix : Windows.Foundation.Numerics.Matrix4x4 {
        get throws {
            return try get_TransformMatrix();
        }
    }
} // ITransform3DEffect


// type: Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect
// interface type
open class ITurbulenceEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1cb1b33d, Data2: 0x20e9, Data3 : 0x564b, Data4 : (0x85, 0x6e, 0x37, 0xe9, 0xfa, 0x1d, 0x00, 0x16)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_Offset()
    private func _n_get_Offset(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, __presult))
        }
    }
    public func get_Offset() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_Offset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Offset(Windows.Foundation.Numerics.Vector2)
    private func _n_put_Offset(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Offset(pThis, value))
        }
    }
    public func put_Offset(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_Offset(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_Size(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Size(Windows.Foundation.Numerics.Vector2)
    private func _n_put_Size(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Size(pThis, value))
        }
    }
    public func put_Size(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_Size(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_Frequency()
    private func _n_get_Frequency(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Frequency(pThis, __presult))
        }
    }
    public func get_Frequency() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_Frequency(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Frequency(Windows.Foundation.Numerics.Vector2)
    private func _n_put_Frequency(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Frequency(pThis, value))
        }
    }
    public func put_Frequency(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_Frequency(value);
    }
    // [IsSpecialName] System.Int32 get_Octaves()
    private func _n_get_Octaves(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Octaves(pThis, __presult))
        }
    }
    public func get_Octaves() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Octaves(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Octaves(System.Int32)
    private func _n_put_Octaves(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Octaves(pThis, value))
        }
    }
    public func put_Octaves(value : Swift.Int32) throws -> Void {
        try self._n_put_Octaves(value);
    }
    // [IsSpecialName] System.Int32 get_Seed()
    private func _n_get_Seed(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Seed(pThis, __presult))
        }
    }
    public func get_Seed() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Seed(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Seed(System.Int32)
    private func _n_put_Seed(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Seed(pThis, value))
        }
    }
    public func put_Seed(value : Swift.Int32) throws -> Void {
        try self._n_put_Seed(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise get_Noise()
    private func _n_get_Noise(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Noise(pThis, __presult))
        }
    }
    public func get_Noise() throws -> Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise_FractalSum;
        try self._n_get_Noise(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Noise(Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise)
    private func _n_put_Noise(_ value : _q_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Noise(pThis, value))
        }
    }
    public func put_Noise(value : Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise) throws -> Void {
        try self._n_put_Noise(value);
    }
    // [IsSpecialName] bool get_Tileable()
    private func _n_get_Tileable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tileable(pThis, __presult))
        }
    }
    public func get_Tileable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Tileable(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Tileable(bool)
    private func _n_put_Tileable(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tileable(pThis, value))
        }
    }
    public func put_Tileable(value : boolean) throws -> Void {
        try self._n_put_Tileable(value);
    }
    public var Frequency : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_Frequency();
        }
    }
    public var Noise : Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise {
        get throws {
            return try get_Noise();
        }
    }
    public var Octaves : Swift.Int32 {
        get throws {
            return try get_Octaves();
        }
    }
    public var Offset : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_Offset();
        }
    }
    public var Seed : Swift.Int32 {
        get throws {
            return try get_Seed();
        }
    }
    public var Size : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_Size();
        }
    }
    public var Tileable : boolean {
        get throws {
            return try get_Tileable();
        }
    }
} // ITurbulenceEffect


// type: Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect
// interface type
open class IUnPremultiplyEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x73098bb4, Data2: 0xdcf1, Data3 : 0x5403, Data4 : (0xaf, 0x44, 0x33, 0x44, 0xd2, 0x98, 0x2d, 0x40)) }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IUnPremultiplyEffect


// type: Microsoft.Graphics.Canvas.Effects.IVignetteEffect
// interface type
open class IVignetteEffect
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x574d0f9f, Data2: 0xeec7, Data3 : 0x5989, Data4 : (0xac, 0x53, 0x13, 0x58, 0x68, 0xcf, 0x5e, 0x0c)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    // [IsSpecialName] System.Single get_Amount()
    private func _n_get_Amount(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, __presult))
        }
    }
    public func get_Amount() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Amount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Amount(System.Single)
    private func _n_put_Amount(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
        }
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        try self._n_put_Amount(value);
    }
    // [IsSpecialName] System.Single get_Curve()
    private func _n_get_Curve(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Curve(pThis, __presult))
        }
    }
    public func get_Curve() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Curve(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Curve(System.Single)
    private func _n_put_Curve(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Curve(pThis, value))
        }
    }
    public func put_Curve(value : Swift.Float) throws -> Void {
        try self._n_put_Curve(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_ColorHdr()
    private func _n_get_ColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, __presult))
        }
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_ColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_ColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, value))
        }
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_ColorHdr(value);
    }
    // [IsSpecialName] Windows.Graphics.Effects.IGraphicsEffectSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Graphics.Effects.IGraphicsEffectSource(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Graphics.Effects.IGraphicsEffectSource)
    private func _n_put_Source(_ source : Optional<UnsafeMutablePointer<_q_CWindows_CGraphics_CEffects_CIGraphicsEffectSource>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, source))
        }
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        try self._n_put_Source(RawPointer(source));
    }
    public var Amount : Swift.Float {
        get throws {
            return try get_Amount();
        }
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_ColorHdr();
        }
    }
    public var Curve : Swift.Float {
        get throws {
            return try get_Curve();
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
            return try get_Source();
        }
    }
} // IVignetteEffect


// type: Microsoft.Graphics.Canvas.Effects.InvertEffect
// runtime class
public class InvertEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IInvertEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IInvertEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IInvertEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.InvertEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IInvertEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IInvertEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IInvertEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.LinearTransferEffect
// runtime class
public class LinearTransferEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.LinearTransferEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_RedOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedOffset();
    }
    public func put_RedOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedOffset(value: value);
    }
    public func get_RedSlope() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedSlope();
    }
    public func put_RedSlope(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedSlope(value: value);
    }
    public func get_RedDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedDisable();
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedDisable(value: value);
    }
    public func get_GreenOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenOffset();
    }
    public func put_GreenOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenOffset(value: value);
    }
    public func get_GreenSlope() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenSlope();
    }
    public func put_GreenSlope(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenSlope(value: value);
    }
    public func get_GreenDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenDisable();
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenDisable(value: value);
    }
    public func get_BlueOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueOffset();
    }
    public func put_BlueOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueOffset(value: value);
    }
    public func get_BlueSlope() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueSlope();
    }
    public func put_BlueSlope(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueSlope(value: value);
    }
    public func get_BlueDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueDisable();
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueDisable(value: value);
    }
    public func get_AlphaOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaOffset();
    }
    public func put_AlphaOffset(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaOffset(value: value);
    }
    public func get_AlphaSlope() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaSlope();
    }
    public func put_AlphaSlope(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaSlope(value: value);
    }
    public func get_AlphaDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaDisable();
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaDisable(value: value);
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaDisable;
        }
    }
    public var AlphaOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaOffset;
        }
    }
    public var AlphaSlope : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaSlope;
        }
    }
    public var BlueDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueDisable;
        }
    }
    public var BlueOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueOffset;
        }
    }
    public var BlueSlope : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueSlope;
        }
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var GreenDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenDisable;
        }
    }
    public var GreenOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenOffset;
        }
    }
    public var GreenSlope : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenSlope;
        }
    }
    public var RedDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.RedDisable;
        }
    }
    public var RedOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.RedOffset;
        }
    }
    public var RedSlope : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.RedSlope;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILinearTransferEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect
// runtime class
public class LuminanceToAlphaEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ILuminanceToAlphaEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.Matrix5x4
// struct type
public typealias Matrix5x4 = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4;

// type: Microsoft.Graphics.Canvas.Effects.MorphologyEffect
// runtime class
public class MorphologyEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IMorphologyEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IMorphologyEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.MorphologyEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Mode() throws -> Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.get_Mode();
    }
    public func put_Mode(value : Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.put_Mode(value: value);
    }
    public func get_Width() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.get_Width();
    }
    public func put_Width(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.put_Width(value: value);
    }
    public func get_Height() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.get_Height();
    }
    public func put_Height(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.put_Height(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Height : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.Height;
        }
    }
    public var Mode : Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.Mode;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var Width : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IMorphologyEffect = try _self.QueryInterface();
        return try _ifc.Width;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode
// enum type
public typealias MorphologyEffectMode = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode;

// type: Microsoft.Graphics.Canvas.Effects.OpacityEffect
// runtime class
public class OpacityEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IOpacityEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IOpacityEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IOpacityEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.OpacityEffect")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IOpacityEffectStatics {
        static var x : IOpacityEffectStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.OpacityEffect")
    }
    public static var OpacityEffectStatics : IOpacityEffectStatics {
        _IOpacityEffectStatics.x
    }
    public static func get_IsSupported() throws -> boolean {
        return try OpacityEffectStatics.get_IsSupported();
    }
    public static var IsSupported : boolean {
        get throws {
        return try OpacityEffectStatics.IsSupported;
        }
    }
    public func get_Opacity() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityEffect = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityEffect = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Opacity : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityEffect = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect
// runtime class
public class OpacityMetadataEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_OpaqueRectangle() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect = try _self.QueryInterface();
        return try _ifc.get_OpaqueRectangle();
    }
    public func put_OpaqueRectangle(value : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect = try _self.QueryInterface();
        return try _ifc.put_OpaqueRectangle(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var OpaqueRectangle : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect = try _self.QueryInterface();
        return try _ifc.OpaqueRectangle;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IOpacityMetadataEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.PixelShaderEffect
// runtime class
public class PixelShaderEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect { return _self; }
    public init(shaderCodeLength : UINT32, shaderCode : Optional<UnsafeMutablePointer<UINT8>>) throws {
        let _af : IPixelShaderEffectFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.PixelShaderEffect");
        _self = try _af.Create(shaderCodeLength: shaderCodeLength, shaderCode: shaderCode)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Properties() throws -> Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Properties();
    }
    public func get_Source1() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source1();
    }
    public func get_Source2() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source2();
    }
    public func get_Source3() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source3();
    }
    public func get_Source4() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source4();
    }
    public func get_Source5() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source5();
    }
    public func get_Source6() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source6();
    }
    public func get_Source7() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source7();
    }
    public func get_Source8() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source8();
    }
    public func put_Source1(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source1(source: source);
    }
    public func put_Source2(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source2(source: source);
    }
    public func put_Source3(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source3(source: source);
    }
    public func put_Source4(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source4(source: source);
    }
    public func put_Source5(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source5(source: source);
    }
    public func put_Source6(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source6(source: source);
    }
    public func put_Source7(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source7(source: source);
    }
    public func put_Source8(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source8(source: source);
    }
    public func get_Source1Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source1Mapping();
    }
    public func get_Source2Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source2Mapping();
    }
    public func get_Source3Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source3Mapping();
    }
    public func get_Source4Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source4Mapping();
    }
    public func get_Source5Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source5Mapping();
    }
    public func get_Source6Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source6Mapping();
    }
    public func get_Source7Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source7Mapping();
    }
    public func get_Source8Mapping() throws -> Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source8Mapping();
    }
    public func put_Source1Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source1Mapping(value: value);
    }
    public func put_Source2Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source2Mapping(value: value);
    }
    public func put_Source3Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source3Mapping(value: value);
    }
    public func put_Source4Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source4Mapping(value: value);
    }
    public func put_Source5Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source5Mapping(value: value);
    }
    public func put_Source6Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source6Mapping(value: value);
    }
    public func put_Source7Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source7Mapping(value: value);
    }
    public func put_Source8Mapping(value : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source8Mapping(value: value);
    }
    public func get_Source1BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source1BorderMode();
    }
    public func get_Source2BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source2BorderMode();
    }
    public func get_Source3BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source3BorderMode();
    }
    public func get_Source4BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source4BorderMode();
    }
    public func get_Source5BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source5BorderMode();
    }
    public func get_Source6BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source6BorderMode();
    }
    public func get_Source7BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source7BorderMode();
    }
    public func get_Source8BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source8BorderMode();
    }
    public func put_Source1BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source1BorderMode(value: value);
    }
    public func put_Source2BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source2BorderMode(value: value);
    }
    public func put_Source3BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source3BorderMode(value: value);
    }
    public func put_Source4BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source4BorderMode(value: value);
    }
    public func put_Source5BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source5BorderMode(value: value);
    }
    public func put_Source6BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source6BorderMode(value: value);
    }
    public func put_Source7BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source7BorderMode(value: value);
    }
    public func put_Source8BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source8BorderMode(value: value);
    }
    public func get_MaxSamplerOffset() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_MaxSamplerOffset();
    }
    public func put_MaxSamplerOffset(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_MaxSamplerOffset(value: value);
    }
    public func get_Source1Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source1Interpolation();
    }
    public func get_Source2Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source2Interpolation();
    }
    public func get_Source3Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source3Interpolation();
    }
    public func get_Source4Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source4Interpolation();
    }
    public func get_Source5Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source5Interpolation();
    }
    public func get_Source6Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source6Interpolation();
    }
    public func get_Source7Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source7Interpolation();
    }
    public func get_Source8Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.get_Source8Interpolation();
    }
    public func put_Source1Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source1Interpolation(value: value);
    }
    public func put_Source2Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source2Interpolation(value: value);
    }
    public func put_Source3Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source3Interpolation(value: value);
    }
    public func put_Source4Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source4Interpolation(value: value);
    }
    public func put_Source5Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source5Interpolation(value: value);
    }
    public func put_Source6Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source6Interpolation(value: value);
    }
    public func put_Source7Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source7Interpolation(value: value);
    }
    public func put_Source8Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.put_Source8Interpolation(value: value);
    }
    public func IsSupported(device : Optional<Microsoft.Graphics.Canvas.CanvasDevice>) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.IsSupported(device: device!.Interface());
    }
    public var MaxSamplerOffset : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.MaxSamplerOffset;
        }
    }
    public var Properties : Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Properties;
        }
    }
    public var Source1 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source1;
        }
    }
    public var Source1BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source1BorderMode;
        }
    }
    public var Source1Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source1Interpolation;
        }
    }
    public var Source1Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source1Mapping;
        }
    }
    public var Source2 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source2;
        }
    }
    public var Source2BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source2BorderMode;
        }
    }
    public var Source2Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source2Interpolation;
        }
    }
    public var Source2Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source2Mapping;
        }
    }
    public var Source3 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source3;
        }
    }
    public var Source3BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source3BorderMode;
        }
    }
    public var Source3Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source3Interpolation;
        }
    }
    public var Source3Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source3Mapping;
        }
    }
    public var Source4 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source4;
        }
    }
    public var Source4BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source4BorderMode;
        }
    }
    public var Source4Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source4Interpolation;
        }
    }
    public var Source4Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source4Mapping;
        }
    }
    public var Source5 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source5;
        }
    }
    public var Source5BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source5BorderMode;
        }
    }
    public var Source5Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source5Interpolation;
        }
    }
    public var Source5Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source5Mapping;
        }
    }
    public var Source6 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source6;
        }
    }
    public var Source6BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source6BorderMode;
        }
    }
    public var Source6Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source6Interpolation;
        }
    }
    public var Source6Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source6Mapping;
        }
    }
    public var Source7 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source7;
        }
    }
    public var Source7BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source7BorderMode;
        }
    }
    public var Source7Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source7Interpolation;
        }
    }
    public var Source7Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source7Mapping;
        }
    }
    public var Source8 : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source8;
        }
    }
    public var Source8BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source8BorderMode;
        }
    }
    public var Source8Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source8Interpolation;
        }
    }
    public var Source8Mapping : Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPixelShaderEffect = try _self.QueryInterface();
        return try _ifc.Source8Mapping;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect
// runtime class
public class PointDiffuseEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightPosition();
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightPosition(value: value);
    }
    public func get_DiffuseAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_DiffuseAmount();
    }
    public func put_DiffuseAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_DiffuseAmount(value: value);
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapScale();
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapScale(value: value);
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightColor();
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightColor(value: value);
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapKernelSize();
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapKernelSize(value: value);
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapInterpolationMode();
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapInterpolationMode(value: value);
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightColorHdr();
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var DiffuseAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.DiffuseAmount;
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapInterpolationMode;
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapKernelSize;
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapScale;
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightColor;
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightColorHdr;
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightPosition;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointDiffuseEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.PointSpecularEffect
// runtime class
public class PointSpecularEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.PointSpecularEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightPosition();
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightPosition(value: value);
    }
    public func get_SpecularExponent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_SpecularExponent();
    }
    public func put_SpecularExponent(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_SpecularExponent(value: value);
    }
    public func get_SpecularAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_SpecularAmount();
    }
    public func put_SpecularAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_SpecularAmount(value: value);
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapScale();
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapScale(value: value);
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightColor();
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightColor(value: value);
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapKernelSize();
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapKernelSize(value: value);
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapInterpolationMode();
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapInterpolationMode(value: value);
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightColorHdr();
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapInterpolationMode;
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapKernelSize;
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapScale;
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightColor;
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightColorHdr;
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightPosition;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SpecularAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.SpecularAmount;
        }
    }
    public var SpecularExponent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPointSpecularEffect = try _self.QueryInterface();
        return try _ifc.SpecularExponent;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.PosterizeEffect
// runtime class
public class PosterizeEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IPosterizeEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IPosterizeEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.PosterizeEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_RedValueCount() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.get_RedValueCount();
    }
    public func put_RedValueCount(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.put_RedValueCount(value: value);
    }
    public func get_GreenValueCount() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.get_GreenValueCount();
    }
    public func put_GreenValueCount(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.put_GreenValueCount(value: value);
    }
    public func get_BlueValueCount() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.get_BlueValueCount();
    }
    public func put_BlueValueCount(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.put_BlueValueCount(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BlueValueCount : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.BlueValueCount;
        }
    }
    public var GreenValueCount : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.GreenValueCount;
        }
    }
    public var RedValueCount : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.RedValueCount;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPosterizeEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.PremultiplyEffect
// runtime class
public class PremultiplyEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.PremultiplyEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IPremultiplyEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.RgbToHueEffect
// runtime class
public class RgbToHueEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.RgbToHueEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_OutputColorSpace() throws -> Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect = try _self.QueryInterface();
        return try _ifc.get_OutputColorSpace();
    }
    public func put_OutputColorSpace(value : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect = try _self.QueryInterface();
        return try _ifc.put_OutputColorSpace(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var OutputColorSpace : Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect = try _self.QueryInterface();
        return try _ifc.OutputColorSpace;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IRgbToHueEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping
// enum type
public typealias SamplerCoordinateMapping = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping;

// type: Microsoft.Graphics.Canvas.Effects.SaturationEffect
// runtime class
public class SaturationEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ISaturationEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ISaturationEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ISaturationEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.SaturationEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Saturation() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISaturationEffect = try _self.QueryInterface();
        return try _ifc.get_Saturation();
    }
    public func put_Saturation(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISaturationEffect = try _self.QueryInterface();
        return try _ifc.put_Saturation(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISaturationEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISaturationEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Saturation : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISaturationEffect = try _self.QueryInterface();
        return try _ifc.Saturation;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISaturationEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ScaleEffect
// runtime class
public class ScaleEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IScaleEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IScaleEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IScaleEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ScaleEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Scale() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.get_Scale();
    }
    public func put_Scale(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.put_Scale(value: value);
    }
    public func get_CenterPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.get_CenterPoint();
    }
    public func put_CenterPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.put_CenterPoint(value: value);
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.get_InterpolationMode();
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.put_InterpolationMode(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_Sharpness() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.get_Sharpness();
    }
    public func put_Sharpness(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.put_Sharpness(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var CenterPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.CenterPoint;
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.InterpolationMode;
        }
    }
    public var Scale : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.Scale;
        }
    }
    public var Sharpness : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.Sharpness;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IScaleEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.SepiaEffect
// runtime class
public class SepiaEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ISepiaEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ISepiaEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ISepiaEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.SepiaEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Intensity() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.get_Intensity();
    }
    public func put_Intensity(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.put_Intensity(value: value);
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaMode(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var Intensity : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.Intensity;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISepiaEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.ShadowEffect
// runtime class
public class ShadowEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IShadowEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IShadowEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IShadowEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.ShadowEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_BlurAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.get_BlurAmount();
    }
    public func put_BlurAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.put_BlurAmount(value: value);
    }
    public func get_ShadowColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.get_ShadowColor();
    }
    public func put_ShadowColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.put_ShadowColor(value: value);
    }
    public func get_Optimization() throws -> Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.get_Optimization();
    }
    public func put_Optimization(value : Microsoft.Graphics.Canvas.Effects.EffectOptimization) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.put_Optimization(value: value);
    }
    public func get_ShadowColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.get_ShadowColorHdr();
    }
    public func put_ShadowColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.put_ShadowColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BlurAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.BlurAmount;
        }
    }
    public var Optimization : Microsoft.Graphics.Canvas.Effects.EffectOptimization {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.Optimization;
        }
    }
    public var ShadowColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.ShadowColor;
        }
    }
    public var ShadowColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.ShadowColorHdr;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IShadowEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.SharpenEffect
// runtime class
public class SharpenEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ISharpenEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ISharpenEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ISharpenEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.SharpenEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Amount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.get_Amount();
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.put_Amount(value: value);
    }
    public func get_Threshold() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.get_Threshold();
    }
    public func put_Threshold(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.put_Threshold(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Amount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.Amount;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var Threshold : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISharpenEffect = try _self.QueryInterface();
        return try _ifc.Threshold;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect
// runtime class
public class SpotDiffuseEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightPosition();
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightPosition(value: value);
    }
    public func get_LightTarget() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightTarget();
    }
    public func put_LightTarget(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightTarget(value: value);
    }
    public func get_Focus() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_Focus();
    }
    public func put_Focus(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_Focus(value: value);
    }
    public func get_LimitingConeAngle() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LimitingConeAngle();
    }
    public func put_LimitingConeAngle(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LimitingConeAngle(value: value);
    }
    public func get_DiffuseAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_DiffuseAmount();
    }
    public func put_DiffuseAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_DiffuseAmount(value: value);
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapScale();
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapScale(value: value);
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightColor();
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightColor(value: value);
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapKernelSize();
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapKernelSize(value: value);
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapInterpolationMode();
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapInterpolationMode(value: value);
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_LightColorHdr();
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_LightColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var DiffuseAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.DiffuseAmount;
        }
    }
    public var Focus : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.Focus;
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapInterpolationMode;
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapKernelSize;
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.HeightMapScale;
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightColor;
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightColorHdr;
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightPosition;
        }
    }
    public var LightTarget : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LightTarget;
        }
    }
    public var LimitingConeAngle : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.LimitingConeAngle;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotDiffuseEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect
// runtime class
public class SpotSpecularEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_LightPosition() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightPosition();
    }
    public func put_LightPosition(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightPosition(value: value);
    }
    public func get_LightTarget() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightTarget();
    }
    public func put_LightTarget(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightTarget(value: value);
    }
    public func get_Focus() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_Focus();
    }
    public func put_Focus(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_Focus(value: value);
    }
    public func get_LimitingConeAngle() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LimitingConeAngle();
    }
    public func put_LimitingConeAngle(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LimitingConeAngle(value: value);
    }
    public func get_SpecularExponent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_SpecularExponent();
    }
    public func put_SpecularExponent(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_SpecularExponent(value: value);
    }
    public func get_SpecularAmount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_SpecularAmount();
    }
    public func put_SpecularAmount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_SpecularAmount(value: value);
    }
    public func get_HeightMapScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapScale();
    }
    public func put_HeightMapScale(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapScale(value: value);
    }
    public func get_LightColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightColor();
    }
    public func put_LightColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightColor(value: value);
    }
    public func get_HeightMapKernelSize() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapKernelSize();
    }
    public func put_HeightMapKernelSize(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapKernelSize(value: value);
    }
    public func get_HeightMapInterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_HeightMapInterpolationMode();
    }
    public func put_HeightMapInterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_HeightMapInterpolationMode(value: value);
    }
    public func get_LightColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_LightColorHdr();
    }
    public func put_LightColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_LightColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Focus : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.Focus;
        }
    }
    public var HeightMapInterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapInterpolationMode;
        }
    }
    public var HeightMapKernelSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapKernelSize;
        }
    }
    public var HeightMapScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.HeightMapScale;
        }
    }
    public var LightColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightColor;
        }
    }
    public var LightColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightColorHdr;
        }
    }
    public var LightPosition : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightPosition;
        }
    }
    public var LightTarget : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.LightTarget;
        }
    }
    public var LimitingConeAngle : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.LimitingConeAngle;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SpecularAmount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.SpecularAmount;
        }
    }
    public var SpecularExponent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ISpotSpecularEffect = try _self.QueryInterface();
        return try _ifc.SpecularExponent;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.StraightenEffect
// runtime class
public class StraightenEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IStraightenEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IStraightenEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IStraightenEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.StraightenEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Angle() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.get_Angle();
    }
    public func put_Angle(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.put_Angle(value: value);
    }
    public func get_MaintainSize() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.get_MaintainSize();
    }
    public func put_MaintainSize(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.put_MaintainSize(value: value);
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.get_InterpolationMode();
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.put_InterpolationMode(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Angle : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.Angle;
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.InterpolationMode;
        }
    }
    public var MaintainSize : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.MaintainSize;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IStraightenEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect
// runtime class
public class TableTransfer3DEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Table() throws -> Optional<Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D(plok: _ifc.get_Table());
    }
    public func put_Table(value : Optional<Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try _ifc.put_Table(value: value!.Interface());
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public func put_AlphaMode(value : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaMode(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var Table : Optional<Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransfer3DEffect = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D(plok: _ifc.Table);
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.TableTransferEffect
// runtime class
public class TableTransferEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITableTransferEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITableTransferEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.TableTransferEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_RedTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedTable();
    }
    public func put_RedTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_RedDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_RedDisable();
    }
    public func put_RedDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_RedDisable(value: value);
    }
    public func get_GreenTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenTable();
    }
    public func put_GreenTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_GreenDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_GreenDisable();
    }
    public func put_GreenDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_GreenDisable(value: value);
    }
    public func get_BlueTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueTable();
    }
    public func put_BlueTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_BlueDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_BlueDisable();
    }
    public func put_BlueDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_BlueDisable(value: value);
    }
    public func get_AlphaTable() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaTable();
    }
    public func put_AlphaTable(valueElementsLength : UINT32, valueElements : Optional<UnsafeMutablePointer<FLOAT>>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaTable(valueElementsLength: valueElementsLength, valueElements: valueElements);
    }
    public func get_AlphaDisable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_AlphaDisable();
    }
    public func put_AlphaDisable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_AlphaDisable(value: value);
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var AlphaDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaDisable;
        }
    }
    public var AlphaTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.AlphaTable;
        }
    }
    public var BlueDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueDisable;
        }
    }
    public var BlueTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.BlueTable;
        }
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var GreenDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenDisable;
        }
    }
    public var GreenTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.GreenTable;
        }
    }
    public var RedDisable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.RedDisable;
        }
    }
    public var RedTable : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.RedTable;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITableTransferEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect
// runtime class
public class TemperatureAndTintEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Temperature() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.get_Temperature();
    }
    public func put_Temperature(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.put_Temperature(value: value);
    }
    public func get_Tint() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.get_Tint();
    }
    public func put_Tint(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.put_Tint(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var Temperature : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.Temperature;
        }
    }
    public var Tint : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITemperatureAndTintEffect = try _self.QueryInterface();
        return try _ifc.Tint;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.TileEffect
// runtime class
public class TileEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITileEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITileEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITileEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.TileEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_SourceRectangle() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITileEffect = try _self.QueryInterface();
        return try _ifc.get_SourceRectangle();
    }
    public func put_SourceRectangle(value : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITileEffect = try _self.QueryInterface();
        return try _ifc.put_SourceRectangle(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITileEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITileEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITileEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var SourceRectangle : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITileEffect = try _self.QueryInterface();
        return try _ifc.SourceRectangle;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.TintEffect
// runtime class
public class TintEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITintEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITintEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITintEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.TintEffect")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ITintEffectStatics {
        static var x : ITintEffectStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TintEffect")
    }
    public static var TintEffectStatics : ITintEffectStatics {
        _ITintEffectStatics.x
    }
    public static func get_IsSupported() throws -> boolean {
        return try TintEffectStatics.get_IsSupported();
    }
    public static var IsSupported : boolean {
        get throws {
        return try TintEffectStatics.IsSupported;
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public func get_ClampOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.get_ClampOutput();
    }
    public func put_ClampOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.put_ClampOutput(value: value);
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.get_ColorHdr();
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.put_ColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var ClampOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.ClampOutput;
        }
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.ColorHdr;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITintEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.Transform2DEffect
// runtime class
public class Transform2DEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITransform2DEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITransform2DEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.Transform2DEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.get_InterpolationMode();
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.put_InterpolationMode(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_TransformMatrix() throws -> Windows.Foundation.Numerics.Matrix3x2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.get_TransformMatrix();
    }
    public func put_TransformMatrix(value : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.put_TransformMatrix(value: value);
    }
    public func get_Sharpness() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.get_Sharpness();
    }
    public func put_Sharpness(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.put_Sharpness(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.InterpolationMode;
        }
    }
    public var Sharpness : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.Sharpness;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var TransformMatrix : Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform2DEffect = try _self.QueryInterface();
        return try _ifc.TransformMatrix;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.Transform3DEffect
// runtime class
public class Transform3DEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITransform3DEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITransform3DEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.Transform3DEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_InterpolationMode() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.get_InterpolationMode();
    }
    public func put_InterpolationMode(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.put_InterpolationMode(value: value);
    }
    public func get_BorderMode() throws -> Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.get_BorderMode();
    }
    public func put_BorderMode(value : Microsoft.Graphics.Canvas.Effects.EffectBorderMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.put_BorderMode(value: value);
    }
    public func get_TransformMatrix() throws -> Windows.Foundation.Numerics.Matrix4x4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.get_TransformMatrix();
    }
    public func put_TransformMatrix(value : Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.put_TransformMatrix(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var BorderMode : Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.BorderMode;
        }
    }
    public var InterpolationMode : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.InterpolationMode;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public var TransformMatrix : Windows.Foundation.Numerics.Matrix4x4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITransform3DEffect = try _self.QueryInterface();
        return try _ifc.TransformMatrix;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.TurbulenceEffect
// runtime class
public class TurbulenceEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.TurbulenceEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Offset() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.get_Offset();
    }
    public func put_Offset(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.put_Offset(value: value);
    }
    public func get_Size() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func put_Size(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.put_Size(value: value);
    }
    public func get_Frequency() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.get_Frequency();
    }
    public func put_Frequency(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.put_Frequency(value: value);
    }
    public func get_Octaves() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.get_Octaves();
    }
    public func put_Octaves(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.put_Octaves(value: value);
    }
    public func get_Seed() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.get_Seed();
    }
    public func put_Seed(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.put_Seed(value: value);
    }
    public func get_Noise() throws -> Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.get_Noise();
    }
    public func put_Noise(value : Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.put_Noise(value: value);
    }
    public func get_Tileable() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.get_Tileable();
    }
    public func put_Tileable(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.put_Tileable(value: value);
    }
    public var Frequency : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.Frequency;
        }
    }
    public var Noise : Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.Noise;
        }
    }
    public var Octaves : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.Octaves;
        }
    }
    public var Offset : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.Offset;
        }
    }
    public var Seed : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.Seed;
        }
    }
    public var Size : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public var Tileable : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ITurbulenceEffect = try _self.QueryInterface();
        return try _ifc.Tileable;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise
// enum type
public typealias TurbulenceEffectNoise = _q_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise;

// type: Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect
// runtime class
public class UnPremultiplyEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IUnPremultiplyEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Effects.VignetteEffect
// runtime class
public class VignetteEffect
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Effects.IVignetteEffect;
    public init(plok: Microsoft.Graphics.Canvas.Effects.IVignetteEffect?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Effects.IVignetteEffect { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Effects.VignetteEffect")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public func get_Amount() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.get_Amount();
    }
    public func put_Amount(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.put_Amount(value: value);
    }
    public func get_Curve() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.get_Curve();
    }
    public func put_Curve(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.put_Curve(value: value);
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.get_ColorHdr();
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.put_ColorHdr(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.get_Source();
    }
    public func put_Source(source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.put_Source(source: source);
    }
    public var Amount : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.Amount;
        }
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.ColorHdr;
        }
    }
    public var Curve : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.Curve;
        }
    }
    public var Source : Optional<Windows.Graphics.Effects.IGraphicsEffectSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.IVignetteEffect = try _self.QueryInterface();
        return try _ifc.Source;
        }
    }
    public func get_CacheOutput() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_CacheOutput();
    }
    public func put_CacheOutput(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_CacheOutput(value: value);
    }
    public func get_BufferPrecision() throws -> Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func put_BufferPrecision(value : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.put_BufferPrecision(value: value);
    }
    public func InvalidateSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, sourceIndex : Swift.UInt32, invalidRectangle : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.InvalidateSourceRectangle(resourceCreator: resourceCreator, sourceIndex: sourceIndex, invalidRectangle: invalidRectangle);
    }
    public func GetInvalidRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetInvalidRectangles(resourceCreator: resourceCreator);
    }
    public func GetRequiredSourceRectangle(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffect : Optional<Microsoft.Graphics.Canvas.Effects.ICanvasEffect>, sourceIndex : Swift.UInt32, sourceBounds : Windows.Foundation.Rect) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangle(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffect: sourceEffect, sourceIndex: sourceIndex, sourceBounds: sourceBounds);
    }
    public func GetRequiredSourceRectangles(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, outputRectangle : Windows.Foundation.Rect, sourceEffectsLength : UINT32, sourceEffects : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect>>>>, sourceIndicesLength : UINT32, sourceIndices : Optional<UnsafeMutablePointer<UINT32>>, sourceBoundsLength : UINT32, sourceBounds : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.GetRequiredSourceRectangles(resourceCreator: resourceCreator, outputRectangle: outputRectangle, sourceEffectsLength: sourceEffectsLength, sourceEffects: sourceEffects, sourceIndicesLength: sourceIndicesLength, sourceIndices: sourceIndices, sourceBoundsLength: sourceBoundsLength, sourceBounds: sourceBounds);
    }
    public var BufferPrecision : Optional<ClosedGenerics.IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var CacheOutput : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Effects.ICanvasEffect = try _self.QueryInterface();
        return try _ifc.CacheOutput;
        }
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBounds(resourceCreator: resourceCreator);
    }
    public func GetBounds(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, transform : Windows.Foundation.Numerics.Matrix3x2) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasImage = try _self.QueryInterface();
        return try _ifc.GetBoundsWithTransform(resourceCreator: resourceCreator, transform: transform);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(name : Swift.String) throws -> Void {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.put_Name(name: name);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Graphics.Effects.IGraphicsEffect = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
}

}
extension Microsoft.Graphics.Canvas.Effects.BlendEffectMode {
    public static var Multiply : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Multiply;
        }
    }
    public static var Screen : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Screen;
        }
    }
    public static var Darken : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Darken;
        }
    }
    public static var Lighten : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Lighten;
        }
    }
    public static var Dissolve : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Dissolve;
        }
    }
    public static var ColorBurn : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_ColorBurn;
        }
    }
    public static var LinearBurn : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LinearBurn;
        }
    }
    public static var DarkerColor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_DarkerColor;
        }
    }
    public static var LighterColor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LighterColor;
        }
    }
    public static var ColorDodge : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_ColorDodge;
        }
    }
    public static var LinearDodge : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LinearDodge;
        }
    }
    public static var Overlay : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Overlay;
        }
    }
    public static var SoftLight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_SoftLight;
        }
    }
    public static var HardLight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_HardLight;
        }
    }
    public static var VividLight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_VividLight;
        }
    }
    public static var LinearLight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LinearLight;
        }
    }
    public static var PinLight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_PinLight;
        }
    }
    public static var HardMix : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_HardMix;
        }
    }
    public static var Difference : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Difference;
        }
    }
    public static var Exclusion : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Exclusion;
        }
    }
    public static var Hue : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Hue;
        }
    }
    public static var Saturation : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Saturation;
        }
    }
    public static var Color : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Color;
        }
    }
    public static var Luminosity : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Luminosity;
        }
    }
    public static var Subtract : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Subtract;
        }
    }
    public static var Division : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Division;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality {
    public static var Proof : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality_Proof;
        }
    }
    public static var Normal : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality_Normal;
        }
    }
    public static var Best : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality_Best;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.ColorManagementGamma {
    public static var G22 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma_G22;
        }
    }
    public static var G10 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma_G10;
        }
    }
    public static var G2084 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma_G2084;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType {
    public static var Icc : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType_Icc;
        }
    }
    public static var Simple : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType_Simple;
        }
    }
    public static var Extended : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType_Extended;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent {
    public static var Perceptual : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_Perceptual;
        }
    }
    public static var RelativeColorimetric : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_RelativeColorimetric;
        }
    }
    public static var Saturation : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_Saturation;
        }
    }
    public static var AbsoluteColorimetric : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_AbsoluteColorimetric;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode {
    public static var Sobel : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode_Sobel;
        }
    }
    public static var Prewitt : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode_Prewitt;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.EffectBorderMode {
    public static var Soft : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft;
        }
    }
    public static var Hard : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Hard;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.EffectChannelSelect {
    public static var Red : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Red;
        }
    }
    public static var Green : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Green;
        }
    }
    public static var Blue : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Blue;
        }
    }
    public static var Alpha : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Alpha;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace {
    public static var Hsv : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace_Hsv;
        }
    }
    public static var Hsl : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace_Hsl;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.EffectOptimization {
    public static var Speed : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Speed;
        }
    }
    public static var Balanced : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Balanced;
        }
    }
    public static var Quality : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Quality;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace {
    public static var FullG22P709 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG22P709;
        }
    }
    public static var FullG10P709 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG10P709;
        }
    }
    public static var StudioG22P709 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_StudioG22P709;
        }
    }
    public static var StudioG22P2020 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_StudioG22P2020;
        }
    }
    public static var FullG2084P2020 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG2084P2020;
        }
    }
    public static var StudioG2084P2020 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_StudioG2084P2020;
        }
    }
    public static var FullG22P2020 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG22P2020;
        }
    }
    public static var Custom : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_Custom;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode {
    public static var Erode : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode_Erode;
        }
    }
    public static var Dilate : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode_Dilate;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping {
    public static var Unknown : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown;
        }
    }
    public static var OneToOne : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_OneToOne;
        }
    }
    public static var Offset : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Offset;
        }
    }
}
extension Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise {
    public static var FractalSum : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise_FractalSum;
        }
    }
    public static var Turbulence : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise_Turbulence;
        }
    }
}
