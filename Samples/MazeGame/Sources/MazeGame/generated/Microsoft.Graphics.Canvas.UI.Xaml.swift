// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import C;

extension Microsoft.Graphics.Canvas.UI.Xaml {
// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
// runtime class
public class CanvasControl
    :
    Microsoft.UI.Xaml.Controls.UserControl
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl")
        try super.init(plok: _self.QueryInterface())
    }
    public func add_CreateResources(value : @escaping (Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl>, Optional<Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.add_CreateResources(value: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs(cb: value).Interface());
    }
    public func remove_CreateResources(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.remove_CreateResources(token: token);
    }
    public func get_ReadyToDraw() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_ReadyToDraw();
    }
    public func add_Draw(value : @escaping (Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl>, Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.add_Draw(value: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs(cb: value).Interface());
    }
    public func remove_Draw(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.remove_Draw(token: token);
    }
    public func put_ClearColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_ClearColor(value: value);
    }
    public func get_ClearColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_ClearColor();
    }
    public func Invalidate() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.Invalidate();
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func RemoveFromVisualTree() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.RemoveFromVisualTree();
    }
    public func get_UseSharedDevice() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_UseSharedDevice();
    }
    public func put_UseSharedDevice(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_UseSharedDevice(value: value);
    }
    public func get_ForceSoftwareRenderer() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_ForceSoftwareRenderer();
    }
    public func put_ForceSoftwareRenderer(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_ForceSoftwareRenderer(value: value);
    }
    public func get_CustomDevice() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_CustomDevice());
    }
    public func put_CustomDevice(value : Optional<Microsoft.Graphics.Canvas.CanvasDevice>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_CustomDevice(value: value!.Interface());
    }
    public func get_DpiScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_DpiScale();
    }
    public func put_DpiScale(ratio : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_DpiScale(ratio: ratio);
    }
    public var ClearColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.ClearColor;
        }
    }
    public var CustomDevice : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.CustomDevice);
        }
    }
    public var DpiScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.DpiScale;
        }
    }
    public var ForceSoftwareRenderer : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.ForceSoftwareRenderer;
        }
    }
    public var ReadyToDraw : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.ReadyToDraw;
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public var UseSharedDevice : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.UseSharedDevice;
        }
    }
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
// runtime class
public class CanvasDrawEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs { return _self; }
    public init(canvasDrawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>) throws {
        let _af : ICanvasDrawEventArgsFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs");
        _self = try _af.Create(canvasDrawingSession: canvasDrawingSession!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_DrawingSession() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.get_DrawingSession());
    }
    public var DrawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.DrawingSession);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource
// runtime class
public class CanvasImageSource
    :
    Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, size : Windows.Foundation.Size) throws {
        let _af : ICanvasImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource");
        _self = try _af.CreateWithSize(resourceCreator: resourceCreator, size: size)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, width : Swift.Float, height : Swift.Float) throws {
        let _af : ICanvasImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource");
        _self = try _af.CreateWithWidthAndHeight(resourceCreator: resourceCreator, width: width, height: height)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float) throws {
        let _af : ICanvasImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource");
        _self = try _af.CreateWithWidthAndHeightAndDpi(resourceCreator: resourceCreator, width: width, height: height, dpi: dpi)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws {
        let _af : ICanvasImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource");
        _self = try _af.CreateWithWidthAndHeightAndDpiAndAlphaMode(resourceCreator: resourceCreator, width: width, height: height, dpi: dpi, alphaMode: alphaMode)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func CreateDrawingSession(clearColor : Windows.UI.Color) throws -> Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.CreateDrawingSession(clearColor: clearColor));
    }
    public func CreateDrawingSession(clearColor : Windows.UI.Color, updateRectangle : Windows.Foundation.Rect) throws -> Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.CreateDrawingSessionWithUpdateRectangle(clearColor: clearColor, updateRectangle: updateRectangle));
    }
    public func Recreate(value : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try _ifc.Recreate(value: value);
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func get_SizeInPixels() throws -> Windows.Graphics.Imaging.BitmapSize {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try _ifc.get_SizeInPixels();
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public var SizeInPixels : Windows.Graphics.Imaging.BitmapSize {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource = try _self.QueryInterface();
        return try _ifc.SizeInPixels;
        }
    }
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs
// runtime class
public class CanvasRegionsInvalidatedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs { return _self; }
    public func get_InvalidatedRegions() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_InvalidatedRegions();
    }
    public func get_VisibleRegion() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_VisibleRegion();
    }
    public var InvalidatedRegions : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs = try _self.QueryInterface();
        return try _ifc.InvalidatedRegions;
        }
    }
    public var VisibleRegion : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs = try _self.QueryInterface();
        return try _ifc.VisibleRegion;
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel
// runtime class
public class CanvasSwapChainPanel
    :
    Microsoft.UI.Xaml.Controls.SwapChainPanel
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasSwapChainPanel")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_SwapChain(value : Optional<Microsoft.Graphics.Canvas.CanvasSwapChain>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel = try _self.QueryInterface();
        return try _ifc.put_SwapChain(value: value!.Interface());
    }
    public func get_SwapChain() throws -> Optional<Microsoft.Graphics.Canvas.CanvasSwapChain> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasSwapChain(plok: _ifc.get_SwapChain());
    }
    public func RemoveFromVisualTree() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel = try _self.QueryInterface();
        return try _ifc.RemoveFromVisualTree();
    }
    public var SwapChain : Optional<Microsoft.Graphics.Canvas.CanvasSwapChain> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasSwapChain(plok: _ifc.SwapChain);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl
// runtime class
public class CanvasVirtualControl
    :
    Microsoft.UI.Xaml.Controls.UserControl
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl")
        try super.init(plok: _self.QueryInterface())
    }
    public func add_CreateResources(value : @escaping (Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl>, Optional<Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.add_CreateResources(value: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs(cb: value).Interface());
    }
    public func remove_CreateResources(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.remove_CreateResources(token: token);
    }
    public func get_ReadyToDraw() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.get_ReadyToDraw();
    }
    public func add_RegionsInvalidated(value : @escaping (Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl>, Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.add_RegionsInvalidated(value: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasRegionsInvalidatedEventArgs(cb: value).Interface());
    }
    public func remove_RegionsInvalidated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.remove_RegionsInvalidated(token: token);
    }
    public func put_ClearColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.put_ClearColor(value: value);
    }
    public func get_ClearColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.get_ClearColor();
    }
    public func CreateDrawingSession(updateRectangle : Windows.Foundation.Rect) throws -> Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.CreateDrawingSession(updateRectangle: updateRectangle));
    }
    public func SuspendDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.SuspendDrawingSession(drawingSession: drawingSession!.Interface());
    }
    public func ResumeDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.ResumeDrawingSession(drawingSession: drawingSession!.Interface());
    }
    public func Invalidate() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.Invalidate();
    }
    public func Invalidate(region : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.InvalidateRegion(region: region);
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func RemoveFromVisualTree() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.RemoveFromVisualTree();
    }
    public func get_UseSharedDevice() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.get_UseSharedDevice();
    }
    public func put_UseSharedDevice(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.put_UseSharedDevice(value: value);
    }
    public func get_ForceSoftwareRenderer() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.get_ForceSoftwareRenderer();
    }
    public func put_ForceSoftwareRenderer(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.put_ForceSoftwareRenderer(value: value);
    }
    public func get_CustomDevice() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_CustomDevice());
    }
    public func put_CustomDevice(value : Optional<Microsoft.Graphics.Canvas.CanvasDevice>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.put_CustomDevice(value: value!.Interface());
    }
    public func get_DpiScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.get_DpiScale();
    }
    public func put_DpiScale(ratio : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.put_DpiScale(ratio: ratio);
    }
    public var ClearColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.ClearColor;
        }
    }
    public var CustomDevice : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.CustomDevice);
        }
    }
    public var DpiScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.DpiScale;
        }
    }
    public var ForceSoftwareRenderer : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.ForceSoftwareRenderer;
        }
    }
    public var ReadyToDraw : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.ReadyToDraw;
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public var UseSharedDevice : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl = try _self.QueryInterface();
        return try _ifc.UseSharedDevice;
        }
    }
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource
// runtime class
public class CanvasVirtualImageSource
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, size : Windows.Foundation.Size) throws {
        let _af : ICanvasVirtualImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource");
        _self = try _af.CreateWithSize(resourceCreator: resourceCreator, size: size)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, width : Swift.Float, height : Swift.Float) throws {
        let _af : ICanvasVirtualImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource");
        _self = try _af.CreateWithWidthAndHeight(resourceCreator: resourceCreator, width: width, height: height)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float) throws {
        let _af : ICanvasVirtualImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource");
        _self = try _af.CreateWithWidthAndHeightAndDpi(resourceCreator: resourceCreator, width: width, height: height, dpi: dpi)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws {
        let _af : ICanvasVirtualImageSourceFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource");
        _self = try _af.CreateWithWidthAndHeightAndDpiAndAlphaMode(resourceCreator: resourceCreator, width: width, height: height, dpi: dpi, alphaMode: alphaMode)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Source() throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource(plok: _ifc.get_Source());
    }
    public func CreateDrawingSession(clearColor : Windows.UI.Color, updateRectangle : Windows.Foundation.Rect) throws -> Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.CreateDrawingSession(clearColor: clearColor, updateRectangle: updateRectangle));
    }
    public func SuspendDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.SuspendDrawingSession(drawingSession: drawingSession!.Interface());
    }
    public func ResumeDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.ResumeDrawingSession(drawingSession: drawingSession!.Interface());
    }
    public func Invalidate() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.Invalidate();
    }
    public func Invalidate(region : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.InvalidateRegion(region: region);
    }
    public func RaiseRegionsInvalidatedIfAny() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.RaiseRegionsInvalidatedIfAny();
    }
    public func add_RegionsInvalidated(value : @escaping (Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource>, Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.add_RegionsInvalidated(value: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualImageSource__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasRegionsInvalidatedEventArgs(cb: value).Interface());
    }
    public func remove_RegionsInvalidated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.remove_RegionsInvalidated(token: token);
    }
    public func Resize(size : Windows.Foundation.Size) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.ResizeWithSize(size: size);
    }
    public func Resize(width : Swift.Float, height : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.ResizeWithWidthAndHeight(width: width, height: height);
    }
    public func Resize(width : Swift.Float, height : Swift.Float, dpi : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.ResizeWithWidthAndHeightAndDpi(width: width, height: height, dpi: dpi);
    }
    public func Recreate(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.Recreate(resourceCreator: resourceCreator);
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func get_SizeInPixels() throws -> Windows.Graphics.Imaging.BitmapSize {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.get_SizeInPixels();
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public var SizeInPixels : Windows.Graphics.Imaging.BitmapSize {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try _ifc.SizeInPixels;
        }
    }
    public var Source : Optional<Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource(plok: _ifc.Source);
        }
    }
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl
// interface type
open class ICanvasControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf006e06d, Data2: 0x79db, Data3 : 0x484f, Data4 : (0xb8, 0x98, 0x47, 0x9c, 0xf0, 0x69, 0xc0, 0xf5)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_CreateResources(Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl,Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>)
    private func _n_add_CreateResources(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_CreateResources(pThis, value, __presult))
        }
    }
    public func add_CreateResources(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_CreateResources(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_CreateResources(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_CreateResources(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CreateResources(pThis, token))
        }
    }
    public func remove_CreateResources(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_CreateResources(token);
    }
    // [IsSpecialName] bool get_ReadyToDraw()
    private func _n_get_ReadyToDraw(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadyToDraw(pThis, __presult))
        }
    }
    public func get_ReadyToDraw() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ReadyToDraw(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Draw(Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl,Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs>)
    private func _n_add_Draw(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Draw(pThis, value, __presult))
        }
    }
    public func add_Draw(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Draw(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Draw(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Draw(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Draw(pThis, token))
        }
    }
    public func remove_Draw(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Draw(token);
    }
    // [IsSpecialName] void put_ClearColor(Windows.UI.Color)
    private func _n_put_ClearColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClearColor(pThis, value))
        }
    }
    public func put_ClearColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_ClearColor(value);
    }
    // [IsSpecialName] Windows.UI.Color get_ClearColor()
    private func _n_get_ClearColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClearColor(pThis, __presult))
        }
    }
    public func get_ClearColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_ClearColor(&__result);
        return __result;
    }
    // void Invalidate()
    private func _n_Invalidate() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
        }
    }
    public func Invalidate() throws -> Void {
        try self._n_Invalidate();
    }
    // [IsSpecialName] Windows.Foundation.Size get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_Size(&__result);
        return __result;
    }
    // void RemoveFromVisualTree()
    private func _n_RemoveFromVisualTree() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
        }
    }
    public func RemoveFromVisualTree() throws -> Void {
        try self._n_RemoveFromVisualTree();
    }
    // [IsSpecialName] bool get_UseSharedDevice()
    private func _n_get_UseSharedDevice(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSharedDevice(pThis, __presult))
        }
    }
    public func get_UseSharedDevice() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_UseSharedDevice(&__result);
        return __result;
    }
    // [IsSpecialName] void put_UseSharedDevice(bool)
    private func _n_put_UseSharedDevice(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseSharedDevice(pThis, value))
        }
    }
    public func put_UseSharedDevice(value : boolean) throws -> Void {
        try self._n_put_UseSharedDevice(value);
    }
    // [IsSpecialName] bool get_ForceSoftwareRenderer()
    private func _n_get_ForceSoftwareRenderer(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForceSoftwareRenderer(pThis, __presult))
        }
    }
    public func get_ForceSoftwareRenderer() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ForceSoftwareRenderer(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ForceSoftwareRenderer(bool)
    private func _n_put_ForceSoftwareRenderer(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForceSoftwareRenderer(pThis, value))
        }
    }
    public func put_ForceSoftwareRenderer(value : boolean) throws -> Void {
        try self._n_put_ForceSoftwareRenderer(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice()
    private func _n_get_CustomDevice(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomDevice(pThis, __presult))
        }
    }
    public func get_CustomDevice() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_CustomDevice(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    // [IsSpecialName] void put_CustomDevice(Microsoft.Graphics.Canvas.CanvasDevice)
    private func _n_put_CustomDevice(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomDevice(pThis, value))
        }
    }
    public func put_CustomDevice(value : Optional<Microsoft.Graphics.Canvas.ICanvasDevice>) throws -> Void {
        try self._n_put_CustomDevice(RawPointer(value));
    }
    // [IsSpecialName] System.Single get_DpiScale()
    private func _n_get_DpiScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiScale(pThis, __presult))
        }
    }
    public func get_DpiScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_DpiScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DpiScale(System.Single)
    private func _n_put_DpiScale(_ ratio : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiScale(pThis, ratio))
        }
    }
    public func put_DpiScale(ratio : Swift.Float) throws -> Void {
        try self._n_put_DpiScale(ratio);
    }
    public var ClearColor : Windows.UI.Color {
        get throws {
            return try get_ClearColor();
        }
    }
    public var CustomDevice : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_CustomDevice();
        }
    }
    public var DpiScale : Swift.Float {
        get throws {
            return try get_DpiScale();
        }
    }
    public var ForceSoftwareRenderer : boolean {
        get throws {
            return try get_ForceSoftwareRenderer();
        }
    }
    public var ReadyToDraw : boolean {
        get throws {
            return try get_ReadyToDraw();
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
            return try get_Size();
        }
    }
    public var UseSharedDevice : boolean {
        get throws {
            return try get_UseSharedDevice();
        }
    }
} // ICanvasControl


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs
// interface type
open class ICanvasDrawEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfb86169f, Data2: 0x25d4, Data3 : 0x4551, Data4 : (0xbd, 0x8f, 0x21, 0x4b, 0xea, 0xf0, 0xac, 0x24)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession()
    private func _n_get_DrawingSession(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawingSession(pThis, __presult))
        }
    }
    public func get_DrawingSession() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>> = nil;
        try self._n_get_DrawingSession(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDrawingSession(consuming: __result);
    }
    public var DrawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        get throws {
            return try get_DrawingSession();
        }
    }
} // ICanvasDrawEventArgs


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasDrawEventArgsFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7299d72c, Data2: 0xf8e4, Data3 : 0x4a2f, Data4 : (0x9e, 0x30, 0x7c, 0xdf, 0xcc, 0xf3, 0x1c, 0x44)) }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs Create(Microsoft.Graphics.Canvas.CanvasDrawingSession)
    private func _n_Create(_ canvasDrawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, canvasDrawingSession, __presult))
        }
    }
    public func Create(canvasDrawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs>> = nil;
        try self._n_Create(RawPointer(canvasDrawingSession), &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs(consuming: __result);
    }
} // ICanvasDrawEventArgsFactory


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource
// interface type
open class ICanvasImageSource
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3c35e87a, Data2: 0xe881, Data3 : 0x4f44, Data4 : (0xb0, 0xd1, 0x55, 0x14, 0x13, 0xae, 0xc6, 0x6d)) }
    // Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(Windows.UI.Color)
    private func _n_CreateDrawingSession(_ clearColor : _q_CWindows_CUI_CColor, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, clearColor, __presult))
        }
    }
    public func CreateDrawingSession(clearColor : Windows.UI.Color) throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>> = nil;
        try self._n_CreateDrawingSession(clearColor, &__result);
        return Microsoft.Graphics.Canvas.ICanvasDrawingSession(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(Windows.UI.Color, Windows.Foundation.Rect)
    private func _n_CreateDrawingSessionWithUpdateRectangle(_ clearColor : _q_CWindows_CUI_CColor, _ updateRectangle : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSessionWithUpdateRectangle(pThis, clearColor, updateRectangle, __presult))
        }
    }
    public func CreateDrawingSessionWithUpdateRectangle(clearColor : Windows.UI.Color, updateRectangle : Windows.Foundation.Rect) throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>> = nil;
        try self._n_CreateDrawingSessionWithUpdateRectangle(clearColor, updateRectangle, &__result);
        return Microsoft.Graphics.Canvas.ICanvasDrawingSession(consuming: __result);
    }
    // void Recreate(Microsoft.Graphics.Canvas.ICanvasResourceCreator)
    private func _n_Recreate(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Recreate(pThis, value))
        }
    }
    public func Recreate(value : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Void {
        try self._n_Recreate(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Size get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_Size(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Graphics.Imaging.BitmapSize get_SizeInPixels()
    private func _n_get_SizeInPixels(_ __presult: UnsafeMutablePointer<_q_CWindows_CGraphics_CImaging_CBitmapSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SizeInPixels(pThis, __presult))
        }
    }
    public func get_SizeInPixels() throws -> Windows.Graphics.Imaging.BitmapSize {
        var __result : _q_CWindows_CGraphics_CImaging_CBitmapSize = _q_CWindows_CGraphics_CImaging_CBitmapSize(Width: 0, Height: 0);
        try self._n_get_SizeInPixels(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
            return try get_Size();
        }
    }
    public var SizeInPixels : Windows.Graphics.Imaging.BitmapSize {
        get throws {
            return try get_SizeInPixels();
        }
    }
} // ICanvasImageSource


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSourceFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasImageSourceFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8596bedd, Data2: 0xd7f7, Data3 : 0x4c6b, Data4 : (0xb1, 0xad, 0x41, 0x94, 0x90, 0x35, 0xe0, 0x84)) }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource CreateWithSize(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, Windows.Foundation.Size)
    private func _n_CreateWithSize(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ size : _q_CWindows_CFoundation_CSize, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithSize(pThis, resourceCreator, size, __presult))
        }
    }
    public func CreateWithSize(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, size : Windows.Foundation.Size) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>> = nil;
        try self._n_CreateWithSize(RawPointer(resourceCreator), size, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource CreateWithWidthAndHeight(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, System.Single, System.Single)
    private func _n_CreateWithWidthAndHeight(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ width : FLOAT, _ height : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeight(pThis, resourceCreator, width, height, __presult))
        }
    }
    public func CreateWithWidthAndHeight(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, width : Swift.Float, height : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>> = nil;
        try self._n_CreateWithWidthAndHeight(RawPointer(resourceCreator), width, height, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource CreateWithWidthAndHeightAndDpi(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.Single, System.Single, System.Single)
    private func _n_CreateWithWidthAndHeightAndDpi(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ width : FLOAT, _ height : FLOAT, _ dpi : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpi(pThis, resourceCreator, width, height, dpi, __presult))
        }
    }
    public func CreateWithWidthAndHeightAndDpi(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>> = nil;
        try self._n_CreateWithWidthAndHeightAndDpi(RawPointer(resourceCreator), width, height, dpi, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource CreateWithWidthAndHeightAndDpiAndAlphaMode(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_CreateWithWidthAndHeightAndDpiAndAlphaMode(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ width : FLOAT, _ height : FLOAT, _ dpi : FLOAT, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpiAndAlphaMode(pThis, resourceCreator, width, height, dpi, alphaMode, __presult))
        }
    }
    public func CreateWithWidthAndHeightAndDpiAndAlphaMode(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource>> = nil;
        try self._n_CreateWithWidthAndHeightAndDpiAndAlphaMode(RawPointer(resourceCreator), width, height, dpi, alphaMode, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasImageSource(consuming: __result);
    }
} // ICanvasImageSourceFactory


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasRegionsInvalidatedEventArgs
// interface type
open class ICanvasRegionsInvalidatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3a21a204, Data2: 0xf52f, Data3 : 0x4e7a, Data4 : (0x9b, 0x3f, 0x94, 0x66, 0x98, 0x19, 0xd9, 0x81)) }
    // [IsSpecialName] Windows.Foundation.Rect[] get_InvalidatedRegions()
    private func _n_get_InvalidatedRegions(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvalidatedRegions(pThis, __presultLength, __presult))
        }
    }
    public func get_InvalidatedRegions() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>> = nil;
        try self._n_get_InvalidatedRegions(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_VisibleRegion()
    private func _n_get_VisibleRegion(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VisibleRegion(pThis, __presult))
        }
    }
    public func get_VisibleRegion() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_VisibleRegion(&__result);
        return __result;
    }
    public var InvalidatedRegions : UINT32 {
        get throws {
            return try get_InvalidatedRegions();
        }
    }
    public var VisibleRegion : Windows.Foundation.Rect {
        get throws {
            return try get_VisibleRegion();
        }
    }
} // ICanvasRegionsInvalidatedEventArgs


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasSwapChainPanel
// interface type
open class ICanvasSwapChainPanel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdbdccb96, Data2: 0x147e, Data3 : 0x4a82, Data4 : (0xaf, 0x3a, 0xc9, 0x1c, 0x78, 0x00, 0xda, 0xa7)) }
    // [IsSpecialName] void put_SwapChain(Microsoft.Graphics.Canvas.CanvasSwapChain)
    private func _n_put_SwapChain(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SwapChain(pThis, value))
        }
    }
    public func put_SwapChain(value : Optional<Microsoft.Graphics.Canvas.ICanvasSwapChain>) throws -> Void {
        try self._n_put_SwapChain(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasSwapChain get_SwapChain()
    private func _n_get_SwapChain(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SwapChain(pThis, __presult))
        }
    }
    public func get_SwapChain() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasSwapChain> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain>> = nil;
        try self._n_get_SwapChain(&__result);
        return Microsoft.Graphics.Canvas.ICanvasSwapChain(consuming: __result);
    }
    // void RemoveFromVisualTree()
    private func _n_RemoveFromVisualTree() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
        }
    }
    public func RemoveFromVisualTree() throws -> Void {
        try self._n_RemoveFromVisualTree();
    }
    public var SwapChain : Optional<Microsoft.Graphics.Canvas.ICanvasSwapChain> {
        get throws {
            return try get_SwapChain();
        }
    }
} // ICanvasSwapChainPanel


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualControl
// interface type
open class ICanvasVirtualControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3c2b5177, Data2: 0x7c61, Data3 : 0x41d2, Data4 : (0x95, 0xae, 0xfc, 0xfc, 0x92, 0xfd, 0x61, 0x7a)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_CreateResources(Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl,Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>)
    private func _n_add_CreateResources(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_CreateResources(pThis, value, __presult))
        }
    }
    public func add_CreateResources(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_CreateResources(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_CreateResources(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_CreateResources(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CreateResources(pThis, token))
        }
    }
    public func remove_CreateResources(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_CreateResources(token);
    }
    // [IsSpecialName] bool get_ReadyToDraw()
    private func _n_get_ReadyToDraw(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadyToDraw(pThis, __presult))
        }
    }
    public func get_ReadyToDraw() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ReadyToDraw(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RegionsInvalidated(Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualControl,Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>)
    private func _n_add_RegionsInvalidated(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasRegionsInvalidatedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RegionsInvalidated(pThis, value, __presult))
        }
    }
    public func add_RegionsInvalidated(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasRegionsInvalidatedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RegionsInvalidated(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RegionsInvalidated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_RegionsInvalidated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RegionsInvalidated(pThis, token))
        }
    }
    public func remove_RegionsInvalidated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RegionsInvalidated(token);
    }
    // [IsSpecialName] void put_ClearColor(Windows.UI.Color)
    private func _n_put_ClearColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClearColor(pThis, value))
        }
    }
    public func put_ClearColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_ClearColor(value);
    }
    // [IsSpecialName] Windows.UI.Color get_ClearColor()
    private func _n_get_ClearColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClearColor(pThis, __presult))
        }
    }
    public func get_ClearColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_ClearColor(&__result);
        return __result;
    }
    // Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(Windows.Foundation.Rect)
    private func _n_CreateDrawingSession(_ updateRectangle : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, updateRectangle, __presult))
        }
    }
    public func CreateDrawingSession(updateRectangle : Windows.Foundation.Rect) throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>> = nil;
        try self._n_CreateDrawingSession(updateRectangle, &__result);
        return Microsoft.Graphics.Canvas.ICanvasDrawingSession(consuming: __result);
    }
    // void SuspendDrawingSession(Microsoft.Graphics.Canvas.CanvasDrawingSession)
    private func _n_SuspendDrawingSession(_ drawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SuspendDrawingSession(pThis, drawingSession))
        }
    }
    public func SuspendDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>) throws -> Void {
        try self._n_SuspendDrawingSession(RawPointer(drawingSession));
    }
    // void ResumeDrawingSession(Microsoft.Graphics.Canvas.CanvasDrawingSession)
    private func _n_ResumeDrawingSession(_ drawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResumeDrawingSession(pThis, drawingSession))
        }
    }
    public func ResumeDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>) throws -> Void {
        try self._n_ResumeDrawingSession(RawPointer(drawingSession));
    }
    // void Invalidate()
    private func _n_Invalidate() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
        }
    }
    public func Invalidate() throws -> Void {
        try self._n_Invalidate();
    }
    // void Invalidate(Windows.Foundation.Rect)
    private func _n_InvalidateRegion(_ region : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateRegion(pThis, region))
        }
    }
    public func InvalidateRegion(region : Windows.Foundation.Rect) throws -> Void {
        try self._n_InvalidateRegion(region);
    }
    // [IsSpecialName] Windows.Foundation.Size get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_Size(&__result);
        return __result;
    }
    // void RemoveFromVisualTree()
    private func _n_RemoveFromVisualTree() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
        }
    }
    public func RemoveFromVisualTree() throws -> Void {
        try self._n_RemoveFromVisualTree();
    }
    // [IsSpecialName] bool get_UseSharedDevice()
    private func _n_get_UseSharedDevice(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSharedDevice(pThis, __presult))
        }
    }
    public func get_UseSharedDevice() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_UseSharedDevice(&__result);
        return __result;
    }
    // [IsSpecialName] void put_UseSharedDevice(bool)
    private func _n_put_UseSharedDevice(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseSharedDevice(pThis, value))
        }
    }
    public func put_UseSharedDevice(value : boolean) throws -> Void {
        try self._n_put_UseSharedDevice(value);
    }
    // [IsSpecialName] bool get_ForceSoftwareRenderer()
    private func _n_get_ForceSoftwareRenderer(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForceSoftwareRenderer(pThis, __presult))
        }
    }
    public func get_ForceSoftwareRenderer() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ForceSoftwareRenderer(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ForceSoftwareRenderer(bool)
    private func _n_put_ForceSoftwareRenderer(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForceSoftwareRenderer(pThis, value))
        }
    }
    public func put_ForceSoftwareRenderer(value : boolean) throws -> Void {
        try self._n_put_ForceSoftwareRenderer(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice()
    private func _n_get_CustomDevice(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomDevice(pThis, __presult))
        }
    }
    public func get_CustomDevice() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_CustomDevice(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    // [IsSpecialName] void put_CustomDevice(Microsoft.Graphics.Canvas.CanvasDevice)
    private func _n_put_CustomDevice(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomDevice(pThis, value))
        }
    }
    public func put_CustomDevice(value : Optional<Microsoft.Graphics.Canvas.ICanvasDevice>) throws -> Void {
        try self._n_put_CustomDevice(RawPointer(value));
    }
    // [IsSpecialName] System.Single get_DpiScale()
    private func _n_get_DpiScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiScale(pThis, __presult))
        }
    }
    public func get_DpiScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_DpiScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DpiScale(System.Single)
    private func _n_put_DpiScale(_ ratio : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiScale(pThis, ratio))
        }
    }
    public func put_DpiScale(ratio : Swift.Float) throws -> Void {
        try self._n_put_DpiScale(ratio);
    }
    public var ClearColor : Windows.UI.Color {
        get throws {
            return try get_ClearColor();
        }
    }
    public var CustomDevice : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_CustomDevice();
        }
    }
    public var DpiScale : Swift.Float {
        get throws {
            return try get_DpiScale();
        }
    }
    public var ForceSoftwareRenderer : boolean {
        get throws {
            return try get_ForceSoftwareRenderer();
        }
    }
    public var ReadyToDraw : boolean {
        get throws {
            return try get_ReadyToDraw();
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
            return try get_Size();
        }
    }
    public var UseSharedDevice : boolean {
        get throws {
            return try get_UseSharedDevice();
        }
    }
} // ICanvasVirtualControl


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource
// interface type
open class ICanvasVirtualImageSource
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdf342987, Data2: 0x4fe6, Data3 : 0x4bcd, Data4 : (0xb8, 0x85, 0x2a, 0xd3, 0xe6, 0xef, 0x9f, 0xce)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource>> = nil;
        try self._n_get_Source(&__result);
        return Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.CanvasDrawingSession CreateDrawingSession(Windows.UI.Color, Windows.Foundation.Rect)
    private func _n_CreateDrawingSession(_ clearColor : _q_CWindows_CUI_CColor, _ updateRectangle : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, clearColor, updateRectangle, __presult))
        }
    }
    public func CreateDrawingSession(clearColor : Windows.UI.Color, updateRectangle : Windows.Foundation.Rect) throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>> = nil;
        try self._n_CreateDrawingSession(clearColor, updateRectangle, &__result);
        return Microsoft.Graphics.Canvas.ICanvasDrawingSession(consuming: __result);
    }
    // void SuspendDrawingSession(Microsoft.Graphics.Canvas.CanvasDrawingSession)
    private func _n_SuspendDrawingSession(_ drawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SuspendDrawingSession(pThis, drawingSession))
        }
    }
    public func SuspendDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>) throws -> Void {
        try self._n_SuspendDrawingSession(RawPointer(drawingSession));
    }
    // void ResumeDrawingSession(Microsoft.Graphics.Canvas.CanvasDrawingSession)
    private func _n_ResumeDrawingSession(_ drawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResumeDrawingSession(pThis, drawingSession))
        }
    }
    public func ResumeDrawingSession(drawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>) throws -> Void {
        try self._n_ResumeDrawingSession(RawPointer(drawingSession));
    }
    // void Invalidate()
    private func _n_Invalidate() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
        }
    }
    public func Invalidate() throws -> Void {
        try self._n_Invalidate();
    }
    // void Invalidate(Windows.Foundation.Rect)
    private func _n_InvalidateRegion(_ region : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateRegion(pThis, region))
        }
    }
    public func InvalidateRegion(region : Windows.Foundation.Rect) throws -> Void {
        try self._n_InvalidateRegion(region);
    }
    // void RaiseRegionsInvalidatedIfAny()
    private func _n_RaiseRegionsInvalidatedIfAny() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseRegionsInvalidatedIfAny(pThis))
        }
    }
    public func RaiseRegionsInvalidatedIfAny() throws -> Void {
        try self._n_RaiseRegionsInvalidatedIfAny();
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RegionsInvalidated(Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource,Microsoft.Graphics.Canvas.UI.Xaml.CanvasRegionsInvalidatedEventArgs>)
    private func _n_add_RegionsInvalidated(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualImageSource__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasRegionsInvalidatedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RegionsInvalidated(pThis, value, __presult))
        }
    }
    public func add_RegionsInvalidated(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasVirtualImageSource__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasRegionsInvalidatedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RegionsInvalidated(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RegionsInvalidated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_RegionsInvalidated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RegionsInvalidated(pThis, token))
        }
    }
    public func remove_RegionsInvalidated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RegionsInvalidated(token);
    }
    // void Resize(Windows.Foundation.Size)
    private func _n_ResizeWithSize(_ size : _q_CWindows_CFoundation_CSize) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeWithSize(pThis, size))
        }
    }
    public func ResizeWithSize(size : Windows.Foundation.Size) throws -> Void {
        try self._n_ResizeWithSize(size);
    }
    // void Resize(System.Single, System.Single)
    private func _n_ResizeWithWidthAndHeight(_ width : FLOAT, _ height : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeWithWidthAndHeight(pThis, width, height))
        }
    }
    public func ResizeWithWidthAndHeight(width : Swift.Float, height : Swift.Float) throws -> Void {
        try self._n_ResizeWithWidthAndHeight(width, height);
    }
    // void Resize(System.Single, System.Single, System.Single)
    private func _n_ResizeWithWidthAndHeightAndDpi(_ width : FLOAT, _ height : FLOAT, _ dpi : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeWithWidthAndHeightAndDpi(pThis, width, height, dpi))
        }
    }
    public func ResizeWithWidthAndHeightAndDpi(width : Swift.Float, height : Swift.Float, dpi : Swift.Float) throws -> Void {
        try self._n_ResizeWithWidthAndHeightAndDpi(width, height, dpi);
    }
    // void Recreate(Microsoft.Graphics.Canvas.ICanvasResourceCreator)
    private func _n_Recreate(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Recreate(pThis, resourceCreator))
        }
    }
    public func Recreate(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Void {
        try self._n_Recreate(RawPointer(resourceCreator));
    }
    // [IsSpecialName] Windows.Foundation.Size get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_Size(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Graphics.Imaging.BitmapSize get_SizeInPixels()
    private func _n_get_SizeInPixels(_ __presult: UnsafeMutablePointer<_q_CWindows_CGraphics_CImaging_CBitmapSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SizeInPixels(pThis, __presult))
        }
    }
    public func get_SizeInPixels() throws -> Windows.Graphics.Imaging.BitmapSize {
        var __result : _q_CWindows_CGraphics_CImaging_CBitmapSize = _q_CWindows_CGraphics_CImaging_CBitmapSize(Width: 0, Height: 0);
        try self._n_get_SizeInPixels(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
            return try get_Size();
        }
    }
    public var SizeInPixels : Windows.Graphics.Imaging.BitmapSize {
        get throws {
            return try get_SizeInPixels();
        }
    }
    public var Source : Optional<Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource> {
        get throws {
            return try get_Source();
        }
    }
} // ICanvasVirtualImageSource


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSourceFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasVirtualImageSourceFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2fe755a1, Data2: 0x307a, Data3 : 0x4623, Data4 : (0x92, 0x50, 0x29, 0x59, 0x04, 0x85, 0xbd, 0xb6)) }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource CreateWithSize(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, Windows.Foundation.Size)
    private func _n_CreateWithSize(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ size : _q_CWindows_CFoundation_CSize, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithSize(pThis, resourceCreator, size, __presult))
        }
    }
    public func CreateWithSize(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, size : Windows.Foundation.Size) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>> = nil;
        try self._n_CreateWithSize(RawPointer(resourceCreator), size, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource CreateWithWidthAndHeight(Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi, System.Single, System.Single)
    private func _n_CreateWithWidthAndHeight(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi>>, _ width : FLOAT, _ height : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeight(pThis, resourceCreator, width, height, __presult))
        }
    }
    public func CreateWithWidthAndHeight(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi>, width : Swift.Float, height : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>> = nil;
        try self._n_CreateWithWidthAndHeight(RawPointer(resourceCreator), width, height, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource CreateWithWidthAndHeightAndDpi(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.Single, System.Single, System.Single)
    private func _n_CreateWithWidthAndHeightAndDpi(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ width : FLOAT, _ height : FLOAT, _ dpi : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpi(pThis, resourceCreator, width, height, dpi, __presult))
        }
    }
    public func CreateWithWidthAndHeightAndDpi(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>> = nil;
        try self._n_CreateWithWidthAndHeightAndDpi(RawPointer(resourceCreator), width, height, dpi, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasVirtualImageSource CreateWithWidthAndHeightAndDpiAndAlphaMode(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.Single, System.Single, System.Single, Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_CreateWithWidthAndHeightAndDpiAndAlphaMode(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ width : FLOAT, _ height : FLOAT, _ dpi : FLOAT, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpiAndAlphaMode(pThis, resourceCreator, width, height, dpi, alphaMode, __presult))
        }
    }
    public func CreateWithWidthAndHeightAndDpiAndAlphaMode(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, width : Swift.Float, height : Swift.Float, dpi : Swift.Float, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource>> = nil;
        try self._n_CreateWithWidthAndHeightAndDpiAndAlphaMode(RawPointer(resourceCreator), width, height, dpi, alphaMode, &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasVirtualImageSource(consuming: __result);
    }
} // ICanvasVirtualImageSourceFactory


}
