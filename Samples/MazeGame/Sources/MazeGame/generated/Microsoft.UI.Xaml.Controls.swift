// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import C;

extension Microsoft.UI.Xaml.Controls {
// type: Microsoft.UI.Xaml.Controls.BackgroundSizing
// enum type
public typealias BackgroundSizing = _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing;

// type: Microsoft.UI.Xaml.Controls.ColumnDefinition
// runtime class
public class ColumnDefinition
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Controls.IColumnDefinition;
    public init(plok: Microsoft.UI.Xaml.Controls.IColumnDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IColumnDefinition { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Controls.ColumnDefinition")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Controls.IColumnDefinitionStatics
    // method not needed: get_Width
    // method not needed: put_Width
    // method not needed: get_MaxWidth
    // method not needed: put_MaxWidth
    // method not needed: get_MinWidth
    // method not needed: put_MinWidth
    // method not needed: get_ActualWidth
}

// type: Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection
// runtime class
public class ColumnDefinitionCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition { return _self; }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ColumnDefinition(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Microsoft.UI.Xaml.Controls.ColumnDefinition, Microsoft, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.Controls.Control
// runtime class
open class Control
    :
    Microsoft.UI.Xaml.FrameworkElement
{
    private var _self : Microsoft.UI.Xaml.Controls.IControl;
    public init(plok: Microsoft.UI.Xaml.Controls.IControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IControl { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IControlFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IControlFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Control");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IControlStatics {
        static var x : IControlStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Control")
    }
    public static var ControlStatics : IControlStatics {
        _IControlStatics.x
    }
    public static func get_IsFocusEngagementEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsFocusEngagementEnabledProperty());
    }
    public static func get_IsFocusEngagedProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsFocusEngagedProperty());
    }
    public static func get_RequiresPointerProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_RequiresPointerProperty());
    }
    public static func get_FontSizeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontSizeProperty());
    }
    public static func get_FontFamilyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontFamilyProperty());
    }
    public static func get_FontWeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontWeightProperty());
    }
    public static func get_FontStyleProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontStyleProperty());
    }
    public static func get_FontStretchProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontStretchProperty());
    }
    public static func get_CharacterSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_CharacterSpacingProperty());
    }
    public static func get_ForegroundProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_ForegroundProperty());
    }
    public static func get_IsTextScaleFactorEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsTextScaleFactorEnabledProperty());
    }
    public static func get_IsEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsEnabledProperty());
    }
    public static func get_TabNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_TabNavigationProperty());
    }
    public static func get_TemplateProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_TemplateProperty());
    }
    public static func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_PaddingProperty());
    }
    public static func get_HorizontalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_HorizontalContentAlignmentProperty());
    }
    public static func get_VerticalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_VerticalContentAlignmentProperty());
    }
    public static func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BackgroundProperty());
    }
    public static func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BackgroundSizingProperty());
    }
    public static func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BorderThicknessProperty());
    }
    public static func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BorderBrushProperty());
    }
    public static func get_DefaultStyleKeyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_DefaultStyleKeyProperty());
    }
    public static func get_DefaultStyleResourceUriProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_DefaultStyleResourceUriProperty());
    }
    public static func get_ElementSoundModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_ElementSoundModeProperty());
    }
    public static func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_CornerRadiusProperty());
    }
    public static func get_IsTemplateFocusTargetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsTemplateFocusTargetProperty());
    }
    public static func GetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> boolean {
        return try ControlStatics.GetIsTemplateFocusTarget(element: element!.Interface());
    }
    public static func SetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : boolean) throws -> Void {
        return try ControlStatics.SetIsTemplateFocusTarget(element: element!.Interface(), value: value);
    }
    public static func get_IsTemplateKeyTipTargetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsTemplateKeyTipTargetProperty());
    }
    public static func GetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> boolean {
        return try ControlStatics.GetIsTemplateKeyTipTarget(element: element!.Interface());
    }
    public static func SetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.DependencyObject>, value : boolean) throws -> Void {
        return try ControlStatics.SetIsTemplateKeyTipTarget(element: element!.Interface(), value: value);
    }
    public static var BackgroundProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BackgroundProperty);
        }
    }
    public static var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BackgroundSizingProperty);
        }
    }
    public static var BorderBrushProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BorderBrushProperty);
        }
    }
    public static var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BorderThicknessProperty);
        }
    }
    public static var CharacterSpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.CharacterSpacingProperty);
        }
    }
    public static var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.CornerRadiusProperty);
        }
    }
    public static var DefaultStyleKeyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.DefaultStyleKeyProperty);
        }
    }
    public static var DefaultStyleResourceUriProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.DefaultStyleResourceUriProperty);
        }
    }
    public static var ElementSoundModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.ElementSoundModeProperty);
        }
    }
    public static var FontFamilyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontFamilyProperty);
        }
    }
    public static var FontSizeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontSizeProperty);
        }
    }
    public static var FontStretchProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontStretchProperty);
        }
    }
    public static var FontStyleProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontStyleProperty);
        }
    }
    public static var FontWeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontWeightProperty);
        }
    }
    public static var ForegroundProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.ForegroundProperty);
        }
    }
    public static var HorizontalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.HorizontalContentAlignmentProperty);
        }
    }
    public static var IsEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsEnabledProperty);
        }
    }
    public static var IsFocusEngagedProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsFocusEngagedProperty);
        }
    }
    public static var IsFocusEngagementEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsFocusEngagementEnabledProperty);
        }
    }
    public static var IsTemplateFocusTargetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsTemplateFocusTargetProperty);
        }
    }
    public static var IsTemplateKeyTipTargetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsTemplateKeyTipTargetProperty);
        }
    }
    public static var IsTextScaleFactorEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsTextScaleFactorEnabledProperty);
        }
    }
    public static var PaddingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.PaddingProperty);
        }
    }
    public static var RequiresPointerProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.RequiresPointerProperty);
        }
    }
    public static var TabNavigationProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.TabNavigationProperty);
        }
    }
    public static var TemplateProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.TemplateProperty);
        }
    }
    public static var VerticalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.VerticalContentAlignmentProperty);
        }
    }
    public func get_IsFocusEngagementEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsFocusEngagementEnabled();
    }
    public func put_IsFocusEngagementEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsFocusEngagementEnabled(value: value);
    }
    public func get_IsFocusEngaged() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsFocusEngaged();
    }
    public func put_IsFocusEngaged(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsFocusEngaged(value: value);
    }
    public func get_RequiresPointer() throws -> Microsoft.UI.Xaml.Controls.RequiresPointer {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_RequiresPointer();
    }
    public func put_RequiresPointer(value : Microsoft.UI.Xaml.Controls.RequiresPointer) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_RequiresPointer(value: value);
    }
    public func get_FontSize() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontSize();
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontSize(value: value);
    }
    public func get_FontFamily() throws -> Optional<Microsoft.UI.Xaml.Media.FontFamily> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.get_FontFamily());
    }
    public func put_FontFamily(value : Optional<Microsoft.UI.Xaml.Media.FontFamily>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontFamily(value: value!.Interface());
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontWeight();
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontWeight(value: value);
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontStyle();
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontStyle(value: value);
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontStretch();
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontStretch(value: value);
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_CharacterSpacing();
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_CharacterSpacing(value: value);
    }
    public func get_Foreground() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Foreground());
    }
    public func put_Foreground(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Foreground(value: value!.Interface());
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsTextScaleFactorEnabled();
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsTextScaleFactorEnabled(value: value);
    }
    public func get_IsEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsEnabled();
    }
    public func put_IsEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsEnabled(value: value);
    }
    public func get_TabNavigation() throws -> Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_TabNavigation();
    }
    public func put_TabNavigation(value : Microsoft.UI.Xaml.Input.KeyboardNavigationMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_TabNavigation(value: value);
    }
    public func get_Template() throws -> Optional<Microsoft.UI.Xaml.Controls.ControlTemplate> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ControlTemplate(plok: _ifc.get_Template());
    }
    public func put_Template(value : Optional<Microsoft.UI.Xaml.Controls.ControlTemplate>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Template(value: value!.Interface());
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_Padding();
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Padding(value: value);
    }
    public func get_HorizontalContentAlignment() throws -> Microsoft.UI.Xaml.HorizontalAlignment {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_HorizontalContentAlignment();
    }
    public func put_HorizontalContentAlignment(value : Microsoft.UI.Xaml.HorizontalAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_HorizontalContentAlignment(value: value);
    }
    public func get_VerticalContentAlignment() throws -> Microsoft.UI.Xaml.VerticalAlignment {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_VerticalContentAlignment();
    }
    public func put_VerticalContentAlignment(value : Microsoft.UI.Xaml.VerticalAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_VerticalContentAlignment(value: value);
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Background());
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Background(value: value!.Interface());
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_BackgroundSizing();
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_BackgroundSizing(value: value);
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_BorderThickness();
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_BorderThickness(value: value);
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_BorderBrush());
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_BorderBrush(value: value!.Interface());
    }
    public func get_DefaultStyleResourceUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_DefaultStyleResourceUri());
    }
    public func put_DefaultStyleResourceUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_DefaultStyleResourceUri(value: value!.Interface());
    }
    public func get_ElementSoundMode() throws -> Microsoft.UI.Xaml.ElementSoundMode {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_ElementSoundMode();
    }
    public func put_ElementSoundMode(value : Microsoft.UI.Xaml.ElementSoundMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_ElementSoundMode(value: value);
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_CornerRadius();
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_CornerRadius(value: value);
    }
    public func add_FocusEngaged(handler : @escaping (Optional<Microsoft.UI.Xaml.Controls.Control>, Optional<Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.add_FocusEngaged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs(cb: handler).Interface());
    }
    public func remove_FocusEngaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.remove_FocusEngaged(token: token);
    }
    public func add_FocusDisengaged(handler : @escaping (Optional<Microsoft.UI.Xaml.Controls.Control>, Optional<Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.add_FocusDisengaged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs(cb: handler).Interface());
    }
    public func remove_FocusDisengaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.remove_FocusDisengaged(token: token);
    }
    public func add_IsEnabledChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.add_IsEnabledChanged(handler: Microsoft.UI.Xaml.impl_DependencyPropertyChangedEventHandler(cb: handler).Interface());
    }
    public func remove_IsEnabledChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.remove_IsEnabledChanged(token: token);
    }
    public func RemoveFocusEngagement() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.RemoveFocusEngagement();
    }
    public func ApplyTemplate() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.ApplyTemplate();
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Background);
        }
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.BackgroundSizing;
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.BorderBrush);
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.BorderThickness;
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.CharacterSpacing;
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.CornerRadius;
        }
    }
    public var DefaultStyleResourceUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.DefaultStyleResourceUri);
        }
    }
    public var ElementSoundMode : Microsoft.UI.Xaml.ElementSoundMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.ElementSoundMode;
        }
    }
    public var FontFamily : Optional<Microsoft.UI.Xaml.Media.FontFamily> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.FontFamily);
        }
    }
    public var FontSize : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontSize;
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontStretch;
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontStyle;
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontWeight;
        }
    }
    public var Foreground : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Foreground);
        }
    }
    public var HorizontalContentAlignment : Microsoft.UI.Xaml.HorizontalAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.HorizontalContentAlignment;
        }
    }
    public var IsEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsEnabled;
        }
    }
    public var IsFocusEngaged : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsFocusEngaged;
        }
    }
    public var IsFocusEngagementEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsFocusEngagementEnabled;
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsTextScaleFactorEnabled;
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.Padding;
        }
    }
    public var RequiresPointer : Microsoft.UI.Xaml.Controls.RequiresPointer {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.RequiresPointer;
        }
    }
    public var TabNavigation : Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.TabNavigation;
        }
    }
    public var Template : Optional<Microsoft.UI.Xaml.Controls.ControlTemplate> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ControlTemplate(plok: _ifc.Template);
        }
    }
    public var VerticalContentAlignment : Microsoft.UI.Xaml.VerticalAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.VerticalContentAlignment;
        }
    }
    public func get_DefaultStyleKey() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try _ifc.get_DefaultStyleKey();
    }
    public func put_DefaultStyleKey(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try _ifc.put_DefaultStyleKey(value: value!.GetInterface());
    }
    public func GetTemplateChild(childName : Swift.String) throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.GetTemplateChild(childName: childName));
    }
    public var DefaultStyleKey : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try _ifc.DefaultStyleKey;
        }
    }
    // overridable method skipped: OnPointerEntered
    // overridable method skipped: OnPointerPressed
    // overridable method skipped: OnPointerMoved
    // overridable method skipped: OnPointerReleased
    // overridable method skipped: OnPointerExited
    // overridable method skipped: OnPointerCaptureLost
    // overridable method skipped: OnPointerCanceled
    // overridable method skipped: OnPointerWheelChanged
    // overridable method skipped: OnTapped
    // overridable method skipped: OnDoubleTapped
    // overridable method skipped: OnHolding
    // overridable method skipped: OnRightTapped
    // overridable method skipped: OnManipulationStarting
    // overridable method skipped: OnManipulationInertiaStarting
    // overridable method skipped: OnManipulationStarted
    // overridable method skipped: OnManipulationDelta
    // overridable method skipped: OnManipulationCompleted
    // overridable method skipped: OnKeyUp
    // overridable method skipped: OnKeyDown
    // overridable method skipped: OnPreviewKeyDown
    // overridable method skipped: OnPreviewKeyUp
    // overridable method skipped: OnGotFocus
    // overridable method skipped: OnLostFocus
    // overridable method skipped: OnCharacterReceived
    // overridable method skipped: OnDragEnter
    // overridable method skipped: OnDragLeave
    // overridable method skipped: OnDragOver
    // overridable method skipped: OnDrop
}

// type: Microsoft.UI.Xaml.Controls.ControlTemplate
// runtime class
public class ControlTemplate
    :
    Microsoft.UI.Xaml.FrameworkTemplate
{
    private var _self : Microsoft.UI.Xaml.Controls.IControlTemplate;
    public init(plok: Microsoft.UI.Xaml.Controls.IControlTemplate?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IControlTemplate { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Controls.ControlTemplate")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_TargetType
    // method not needed: put_TargetType
}

// type: Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs
// runtime class
public class FocusDisengagedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs { return _self; }
}

// type: Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs
// runtime class
public class FocusEngagedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.Controls.Grid
// runtime class
open class Grid
    :
    Microsoft.UI.Xaml.Controls.Panel
{
    private var _self : Microsoft.UI.Xaml.Controls.IGrid;
    public init(plok: Microsoft.UI.Xaml.Controls.IGrid?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IGrid { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IGridFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IGridFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Grid");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IGridStatics {
        static var x : IGridStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Grid")
    }
    public static var GridStatics : IGridStatics {
        _IGridStatics.x
    }
    public static func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_BackgroundSizingProperty());
    }
    public static func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_BorderBrushProperty());
    }
    public static func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_BorderThicknessProperty());
    }
    public static func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_CornerRadiusProperty());
    }
    public static func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_PaddingProperty());
    }
    public static func get_RowSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_RowSpacingProperty());
    }
    public static func get_ColumnSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_ColumnSpacingProperty());
    }
    public static func get_RowProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_RowProperty());
    }
    public static func GetRow(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetRow(element: element!.Interface());
    }
    public static func SetRow(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetRow(element: element!.Interface(), value: value);
    }
    public static func get_ColumnProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_ColumnProperty());
    }
    public static func GetColumn(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetColumn(element: element!.Interface());
    }
    public static func SetColumn(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetColumn(element: element!.Interface(), value: value);
    }
    public static func get_RowSpanProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_RowSpanProperty());
    }
    public static func GetRowSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetRowSpan(element: element!.Interface());
    }
    public static func SetRowSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetRowSpan(element: element!.Interface(), value: value);
    }
    public static func get_ColumnSpanProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_ColumnSpanProperty());
    }
    public static func GetColumnSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetColumnSpan(element: element!.Interface());
    }
    public static func SetColumnSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetColumnSpan(element: element!.Interface(), value: value);
    }
    public static var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.BackgroundSizingProperty);
        }
    }
    public static var BorderBrushProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.BorderBrushProperty);
        }
    }
    public static var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.BorderThicknessProperty);
        }
    }
    public static var ColumnProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.ColumnProperty);
        }
    }
    public static var ColumnSpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.ColumnSpacingProperty);
        }
    }
    public static var ColumnSpanProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.ColumnSpanProperty);
        }
    }
    public static var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.CornerRadiusProperty);
        }
    }
    public static var PaddingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.PaddingProperty);
        }
    }
    public static var RowProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.RowProperty);
        }
    }
    public static var RowSpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.RowSpacingProperty);
        }
    }
    public static var RowSpanProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.RowSpanProperty);
        }
    }
    public func get_RowDefinitions() throws -> Optional<Microsoft.UI.Xaml.Controls.RowDefinitionCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.RowDefinitionCollection(plok: _ifc.get_RowDefinitions());
    }
    public func get_ColumnDefinitions() throws -> Optional<Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection(plok: _ifc.get_ColumnDefinitions());
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_BackgroundSizing();
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_BackgroundSizing(value: value);
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_BorderBrush());
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_BorderBrush(value: value!.Interface());
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_BorderThickness();
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_BorderThickness(value: value);
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_CornerRadius();
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_CornerRadius(value: value);
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_Padding();
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_Padding(value: value);
    }
    public func get_RowSpacing() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_RowSpacing();
    }
    public func put_RowSpacing(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_RowSpacing(value: value);
    }
    public func get_ColumnSpacing() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_ColumnSpacing();
    }
    public func put_ColumnSpacing(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_ColumnSpacing(value: value);
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.BackgroundSizing;
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.BorderBrush);
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.BorderThickness;
        }
    }
    public var ColumnDefinitions : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection(plok: _ifc.ColumnDefinitions);
        }
    }
    public var ColumnSpacing : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.ColumnSpacing;
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.CornerRadius;
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.Padding;
        }
    }
    public var RowDefinitions : Optional<Microsoft.UI.Xaml.Controls.RowDefinitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.RowDefinitionCollection(plok: _ifc.RowDefinitions);
        }
    }
    public var RowSpacing : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.RowSpacing;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.IColumnDefinition
// interface type
open class IColumnDefinition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x454cea14, Data2: 0x87ec, Data3 : 0x5890, Data4 : (0xbb, 0x62, 0xf1, 0xd8, 0x2a, 0x94, 0x75, 0x8e)) }
// method not needed: get_Width
// method not needed: put_Width
// method not needed: get_MaxWidth
// method not needed: put_MaxWidth
// method not needed: get_MinWidth
// method not needed: put_MinWidth
// method not needed: get_ActualWidth
} // IColumnDefinition


// type: Microsoft.UI.Xaml.Controls.IControl
// interface type
open class IControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x857d6e8a, Data2: 0xd45a, Data3 : 0x5c69, Data4 : (0xa9, 0x9c, 0xbf, 0x6a, 0x5c, 0x54, 0xfb, 0x38)) }
    // [IsSpecialName] bool get_IsFocusEngagementEnabled()
    private func _n_get_IsFocusEngagementEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabled(pThis, __presult))
        }
    }
    public func get_IsFocusEngagementEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsFocusEngagementEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsFocusEngagementEnabled(bool)
    private func _n_put_IsFocusEngagementEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngagementEnabled(pThis, value))
        }
    }
    public func put_IsFocusEngagementEnabled(value : boolean) throws -> Void {
        try self._n_put_IsFocusEngagementEnabled(value);
    }
    // [IsSpecialName] bool get_IsFocusEngaged()
    private func _n_get_IsFocusEngaged(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngaged(pThis, __presult))
        }
    }
    public func get_IsFocusEngaged() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsFocusEngaged(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsFocusEngaged(bool)
    private func _n_put_IsFocusEngaged(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngaged(pThis, value))
        }
    }
    public func put_IsFocusEngaged(value : boolean) throws -> Void {
        try self._n_put_IsFocusEngaged(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.RequiresPointer get_RequiresPointer()
    private func _n_get_RequiresPointer(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointer(pThis, __presult))
        }
    }
    public func get_RequiresPointer() throws -> Microsoft.UI.Xaml.Controls.RequiresPointer {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer = _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never;
        try self._n_get_RequiresPointer(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequiresPointer(Microsoft.UI.Xaml.Controls.RequiresPointer)
    private func _n_put_RequiresPointer(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequiresPointer(pThis, value))
        }
    }
    public func put_RequiresPointer(value : Microsoft.UI.Xaml.Controls.RequiresPointer) throws -> Void {
        try self._n_put_RequiresPointer(value);
    }
    // [IsSpecialName] System.Double get_FontSize()
    private func _n_get_FontSize(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, __presult))
        }
    }
    public func get_FontSize() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_FontSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontSize(System.Double)
    private func _n_put_FontSize(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
        }
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        try self._n_put_FontSize(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.FontFamily get_FontFamily()
    private func _n_get_FontFamily(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, __presult))
        }
    }
    public func get_FontFamily() throws -> Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>> = nil;
        try self._n_get_FontFamily(&__result);
        return Microsoft.UI.Xaml.Media.IFontFamily(consuming: __result);
    }
    // [IsSpecialName] void put_FontFamily(Microsoft.UI.Xaml.Media.FontFamily)
    private func _n_put_FontFamily(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, value))
        }
    }
    public func put_FontFamily(value : Optional<Microsoft.UI.Xaml.Media.IFontFamily>) throws -> Void {
        try self._n_put_FontFamily(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_FontWeight()
    private func _n_get_FontWeight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, __presult))
        }
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_FontWeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontWeight(Windows.UI.Text.FontWeight)
    private func _n_put_FontWeight(_ value : _q_CWindows_CUI_CText_CFontWeight) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, value))
        }
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        try self._n_put_FontWeight(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_FontStyle()
    private func _n_get_FontStyle(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, __presult))
        }
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_FontStyle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStyle(Windows.UI.Text.FontStyle)
    private func _n_put_FontStyle(_ value : _q_CWindows_CUI_CText_CFontStyle) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
        }
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        try self._n_put_FontStyle(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_FontStretch()
    private func _n_get_FontStretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, __presult))
        }
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_FontStretch(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStretch(Windows.UI.Text.FontStretch)
    private func _n_put_FontStretch(_ value : _q_CWindows_CUI_CText_CFontStretch) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
        }
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        try self._n_put_FontStretch(value);
    }
    // [IsSpecialName] System.Int32 get_CharacterSpacing()
    private func _n_get_CharacterSpacing(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, __presult))
        }
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_CharacterSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CharacterSpacing(System.Int32)
    private func _n_put_CharacterSpacing(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
        }
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        try self._n_put_CharacterSpacing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Foreground()
    private func _n_get_Foreground(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, __presult))
        }
    }
    public func get_Foreground() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Foreground(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Foreground(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_Foreground(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, value))
        }
    }
    public func put_Foreground(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Foreground(RawPointer(value));
    }
    // [IsSpecialName] bool get_IsTextScaleFactorEnabled()
    private func _n_get_IsTextScaleFactorEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextScaleFactorEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTextScaleFactorEnabled(bool)
    private func _n_put_IsTextScaleFactorEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, value))
        }
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        try self._n_put_IsTextScaleFactorEnabled(value);
    }
    // [IsSpecialName] bool get_IsEnabled()
    private func _n_get_IsEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, __presult))
        }
    }
    public func get_IsEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsEnabled(bool)
    private func _n_put_IsEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, value))
        }
    }
    public func put_IsEnabled(value : boolean) throws -> Void {
        try self._n_put_IsEnabled(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.KeyboardNavigationMode get_TabNavigation()
    private func _n_get_TabNavigation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigation(pThis, __presult))
        }
    }
    public func get_TabNavigation() throws -> Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Local;
        try self._n_get_TabNavigation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TabNavigation(Microsoft.UI.Xaml.Input.KeyboardNavigationMode)
    private func _n_put_TabNavigation(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TabNavigation(pThis, value))
        }
    }
    public func put_TabNavigation(value : Microsoft.UI.Xaml.Input.KeyboardNavigationMode) throws -> Void {
        try self._n_put_TabNavigation(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.ControlTemplate get_Template()
    private func _n_get_Template(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Template(pThis, __presult))
        }
    }
    public func get_Template() throws -> Optional<Microsoft.UI.Xaml.Controls.IControlTemplate> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>> = nil;
        try self._n_get_Template(&__result);
        return Microsoft.UI.Xaml.Controls.IControlTemplate(consuming: __result);
    }
    // [IsSpecialName] void put_Template(Microsoft.UI.Xaml.Controls.ControlTemplate)
    private func _n_put_Template(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Template(pThis, value))
        }
    }
    public func put_Template(value : Optional<Microsoft.UI.Xaml.Controls.IControlTemplate>) throws -> Void {
        try self._n_put_Template(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Padding()
    private func _n_get_Padding(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, __presult))
        }
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Padding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Padding(Microsoft.UI.Xaml.Thickness)
    private func _n_put_Padding(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, value))
        }
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Padding(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.HorizontalAlignment get_HorizontalContentAlignment()
    private func _n_get_HorizontalContentAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CHorizontalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalContentAlignment() throws -> Microsoft.UI.Xaml.HorizontalAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment = _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Left;
        try self._n_get_HorizontalContentAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalContentAlignment(Microsoft.UI.Xaml.HorizontalAlignment)
    private func _n_put_HorizontalContentAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalContentAlignment(pThis, value))
        }
    }
    public func put_HorizontalContentAlignment(value : Microsoft.UI.Xaml.HorizontalAlignment) throws -> Void {
        try self._n_put_HorizontalContentAlignment(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.VerticalAlignment get_VerticalContentAlignment()
    private func _n_get_VerticalContentAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CVerticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignment(pThis, __presult))
        }
    }
    public func get_VerticalContentAlignment() throws -> Microsoft.UI.Xaml.VerticalAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CVerticalAlignment = _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Top;
        try self._n_get_VerticalContentAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalContentAlignment(Microsoft.UI.Xaml.VerticalAlignment)
    private func _n_put_VerticalContentAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CVerticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalContentAlignment(pThis, value))
        }
    }
    public func put_VerticalContentAlignment(value : Microsoft.UI.Xaml.VerticalAlignment) throws -> Void {
        try self._n_put_VerticalContentAlignment(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Background()
    private func _n_get_Background(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, __presult))
        }
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Background(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Background(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_Background(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, value))
        }
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Background(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.BackgroundSizing get_BackgroundSizing()
    private func _n_get_BackgroundSizing(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, __presult))
        }
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge;
        try self._n_get_BackgroundSizing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BackgroundSizing(Microsoft.UI.Xaml.Controls.BackgroundSizing)
    private func _n_put_BackgroundSizing(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
        }
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        try self._n_put_BackgroundSizing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_BorderThickness()
    private func _n_get_BorderThickness(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, __presult))
        }
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_BorderThickness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderThickness(Microsoft.UI.Xaml.Thickness)
    private func _n_put_BorderThickness(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, value))
        }
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_BorderThickness(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_BorderBrush()
    private func _n_get_BorderBrush(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, __presult))
        }
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_BorderBrush(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_BorderBrush(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_BorderBrush(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, value))
        }
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_BorderBrush(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_DefaultStyleResourceUri()
    private func _n_get_DefaultStyleResourceUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUri(pThis, __presult))
        }
    }
    public func get_DefaultStyleResourceUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_DefaultStyleResourceUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_DefaultStyleResourceUri(Windows.Foundation.Uri)
    private func _n_put_DefaultStyleResourceUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleResourceUri(pThis, value))
        }
    }
    public func put_DefaultStyleResourceUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_DefaultStyleResourceUri(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ElementSoundMode get_ElementSoundMode()
    private func _n_get_ElementSoundMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CElementSoundMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundMode(pThis, __presult))
        }
    }
    public func get_ElementSoundMode() throws -> Microsoft.UI.Xaml.ElementSoundMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CElementSoundMode = _q_CMicrosoft_CUI_CXaml_CElementSoundMode_Default;
        try self._n_get_ElementSoundMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ElementSoundMode(Microsoft.UI.Xaml.ElementSoundMode)
    private func _n_put_ElementSoundMode(_ value : _q_CMicrosoft_CUI_CXaml_CElementSoundMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ElementSoundMode(pThis, value))
        }
    }
    public func put_ElementSoundMode(value : Microsoft.UI.Xaml.ElementSoundMode) throws -> Void {
        try self._n_put_ElementSoundMode(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.CornerRadius get_CornerRadius()
    private func _n_get_CornerRadius(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CCornerRadius>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, __presult))
        }
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        var __result : _q_CMicrosoft_CUI_CXaml_CCornerRadius = _q_CMicrosoft_CUI_CXaml_CCornerRadius(TopLeft: 0, TopRight: 0, BottomRight: 0, BottomLeft: 0);
        try self._n_get_CornerRadius(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CornerRadius(Microsoft.UI.Xaml.CornerRadius)
    private func _n_put_CornerRadius(_ value : _q_CMicrosoft_CUI_CXaml_CCornerRadius) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, value))
        }
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        try self._n_put_CornerRadius(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_FocusEngaged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control,Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs>)
    private func _n_add_FocusEngaged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusEngaged(pThis, handler, __presult))
        }
    }
    public func add_FocusEngaged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_FocusEngaged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_FocusEngaged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_FocusEngaged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusEngaged(pThis, token))
        }
    }
    public func remove_FocusEngaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_FocusEngaged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_FocusDisengaged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control,Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs>)
    private func _n_add_FocusDisengaged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusDisengaged(pThis, handler, __presult))
        }
    }
    public func add_FocusDisengaged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_FocusDisengaged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_FocusDisengaged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_FocusDisengaged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusDisengaged(pThis, token))
        }
    }
    public func remove_FocusDisengaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_FocusDisengaged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_IsEnabledChanged(Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler)
    private func _n_add_IsEnabledChanged(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsEnabledChanged(pThis, handler, __presult))
        }
    }
    public func add_IsEnabledChanged(handler : Optional<Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_IsEnabledChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_IsEnabledChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_IsEnabledChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsEnabledChanged(pThis, token))
        }
    }
    public func remove_IsEnabledChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_IsEnabledChanged(token);
    }
    // void RemoveFocusEngagement()
    private func _n_RemoveFocusEngagement() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFocusEngagement(pThis))
        }
    }
    public func RemoveFocusEngagement() throws -> Void {
        try self._n_RemoveFocusEngagement();
    }
    // bool ApplyTemplate()
    private func _n_ApplyTemplate(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyTemplate(pThis, __presult))
        }
    }
    public func ApplyTemplate() throws -> boolean {
        var __result : boolean = 0;
        try self._n_ApplyTemplate(&__result);
        return __result;
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Background();
        }
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
            return try get_BackgroundSizing();
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_BorderBrush();
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_BorderThickness();
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
            return try get_CharacterSpacing();
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
            return try get_CornerRadius();
        }
    }
    public var DefaultStyleResourceUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_DefaultStyleResourceUri();
        }
    }
    public var ElementSoundMode : Microsoft.UI.Xaml.ElementSoundMode {
        get throws {
            return try get_ElementSoundMode();
        }
    }
    public var FontFamily : Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        get throws {
            return try get_FontFamily();
        }
    }
    public var FontSize : Swift.Double {
        get throws {
            return try get_FontSize();
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
            return try get_FontStretch();
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
            return try get_FontStyle();
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
            return try get_FontWeight();
        }
    }
    public var Foreground : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Foreground();
        }
    }
    public var HorizontalContentAlignment : Microsoft.UI.Xaml.HorizontalAlignment {
        get throws {
            return try get_HorizontalContentAlignment();
        }
    }
    public var IsEnabled : boolean {
        get throws {
            return try get_IsEnabled();
        }
    }
    public var IsFocusEngaged : boolean {
        get throws {
            return try get_IsFocusEngaged();
        }
    }
    public var IsFocusEngagementEnabled : boolean {
        get throws {
            return try get_IsFocusEngagementEnabled();
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
            return try get_IsTextScaleFactorEnabled();
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Padding();
        }
    }
    public var RequiresPointer : Microsoft.UI.Xaml.Controls.RequiresPointer {
        get throws {
            return try get_RequiresPointer();
        }
    }
    public var TabNavigation : Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        get throws {
            return try get_TabNavigation();
        }
    }
    public var Template : Optional<Microsoft.UI.Xaml.Controls.IControlTemplate> {
        get throws {
            return try get_Template();
        }
    }
    public var VerticalContentAlignment : Microsoft.UI.Xaml.VerticalAlignment {
        get throws {
            return try get_VerticalContentAlignment();
        }
    }
} // IControl


// type: Microsoft.UI.Xaml.Controls.IControlFactory
// interface type
// COMPOSITION INTERFACE
open class IControlFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x25159233, Data2: 0x9438, Data3 : 0x5534, Data4 : (0xae, 0xb9, 0x00, 0xeb, 0x05, 0x9c, 0xf7, 0x3f)) }
    // Microsoft.UI.Xaml.Controls.Control CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControl>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControl>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IControl(consuming: __result);
    }
} // IControlFactory


// type: Microsoft.UI.Xaml.Controls.IControlOverrides
// interface type
open class IControlOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5f644395, Data2: 0x2177, Data3 : 0x5161, Data4 : (0x9f, 0x87, 0xc6, 0xc7, 0x49, 0xc7, 0x3a, 0x03)) }
    // void OnPointerEntered(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerEntered(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerEntered(pThis, e))
        }
    }
    public func OnPointerEntered(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerEntered(RawPointer(e));
    }
    // void OnPointerPressed(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerPressed(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerPressed(pThis, e))
        }
    }
    public func OnPointerPressed(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerPressed(RawPointer(e));
    }
    // void OnPointerMoved(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerMoved(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerMoved(pThis, e))
        }
    }
    public func OnPointerMoved(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerMoved(RawPointer(e));
    }
    // void OnPointerReleased(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerReleased(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerReleased(pThis, e))
        }
    }
    public func OnPointerReleased(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerReleased(RawPointer(e));
    }
    // void OnPointerExited(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerExited(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerExited(pThis, e))
        }
    }
    public func OnPointerExited(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerExited(RawPointer(e));
    }
    // void OnPointerCaptureLost(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerCaptureLost(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCaptureLost(pThis, e))
        }
    }
    public func OnPointerCaptureLost(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerCaptureLost(RawPointer(e));
    }
    // void OnPointerCanceled(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerCanceled(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCanceled(pThis, e))
        }
    }
    public func OnPointerCanceled(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerCanceled(RawPointer(e));
    }
    // void OnPointerWheelChanged(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerWheelChanged(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerWheelChanged(pThis, e))
        }
    }
    public func OnPointerWheelChanged(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerWheelChanged(RawPointer(e));
    }
    // void OnTapped(Microsoft.UI.Xaml.Input.TappedRoutedEventArgs)
    private func _n_OnTapped(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnTapped(pThis, e))
        }
    }
    public func OnTapped(e : Optional<Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs>) throws -> Void {
        try self._n_OnTapped(RawPointer(e));
    }
    // void OnDoubleTapped(Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs)
    private func _n_OnDoubleTapped(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoubleTapped(pThis, e))
        }
    }
    public func OnDoubleTapped(e : Optional<Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs>) throws -> Void {
        try self._n_OnDoubleTapped(RawPointer(e));
    }
    // void OnHolding(Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs)
    private func _n_OnHolding(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnHolding(pThis, e))
        }
    }
    public func OnHolding(e : Optional<Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs>) throws -> Void {
        try self._n_OnHolding(RawPointer(e));
    }
    // void OnRightTapped(Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs)
    private func _n_OnRightTapped(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnRightTapped(pThis, e))
        }
    }
    public func OnRightTapped(e : Optional<Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs>) throws -> Void {
        try self._n_OnRightTapped(RawPointer(e));
    }
    // void OnManipulationStarting(Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs)
    private func _n_OnManipulationStarting(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarting(pThis, e))
        }
    }
    public func OnManipulationStarting(e : Optional<Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationStarting(RawPointer(e));
    }
    // void OnManipulationInertiaStarting(Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs)
    private func _n_OnManipulationInertiaStarting(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationInertiaStarting(pThis, e))
        }
    }
    public func OnManipulationInertiaStarting(e : Optional<Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationInertiaStarting(RawPointer(e));
    }
    // void OnManipulationStarted(Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)
    private func _n_OnManipulationStarted(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarted(pThis, e))
        }
    }
    public func OnManipulationStarted(e : Optional<Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationStarted(RawPointer(e));
    }
    // void OnManipulationDelta(Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs)
    private func _n_OnManipulationDelta(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationDelta(pThis, e))
        }
    }
    public func OnManipulationDelta(e : Optional<Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationDelta(RawPointer(e));
    }
    // void OnManipulationCompleted(Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs)
    private func _n_OnManipulationCompleted(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationCompleted(pThis, e))
        }
    }
    public func OnManipulationCompleted(e : Optional<Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationCompleted(RawPointer(e));
    }
    // void OnKeyUp(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnKeyUp(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyUp(pThis, e))
        }
    }
    public func OnKeyUp(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnKeyUp(RawPointer(e));
    }
    // void OnKeyDown(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnKeyDown(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyDown(pThis, e))
        }
    }
    public func OnKeyDown(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnKeyDown(RawPointer(e));
    }
    // void OnPreviewKeyDown(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnPreviewKeyDown(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyDown(pThis, e))
        }
    }
    public func OnPreviewKeyDown(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnPreviewKeyDown(RawPointer(e));
    }
    // void OnPreviewKeyUp(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnPreviewKeyUp(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyUp(pThis, e))
        }
    }
    public func OnPreviewKeyUp(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnPreviewKeyUp(RawPointer(e));
    }
    // void OnGotFocus(Microsoft.UI.Xaml.RoutedEventArgs)
    private func _n_OnGotFocus(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnGotFocus(pThis, e))
        }
    }
    public func OnGotFocus(e : Optional<Microsoft.UI.Xaml.IRoutedEventArgs>) throws -> Void {
        try self._n_OnGotFocus(RawPointer(e));
    }
    // void OnLostFocus(Microsoft.UI.Xaml.RoutedEventArgs)
    private func _n_OnLostFocus(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnLostFocus(pThis, e))
        }
    }
    public func OnLostFocus(e : Optional<Microsoft.UI.Xaml.IRoutedEventArgs>) throws -> Void {
        try self._n_OnLostFocus(RawPointer(e));
    }
    // void OnCharacterReceived(Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs)
    private func _n_OnCharacterReceived(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnCharacterReceived(pThis, e))
        }
    }
    public func OnCharacterReceived(e : Optional<Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs>) throws -> Void {
        try self._n_OnCharacterReceived(RawPointer(e));
    }
    // void OnDragEnter(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDragEnter(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragEnter(pThis, e))
        }
    }
    public func OnDragEnter(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDragEnter(RawPointer(e));
    }
    // void OnDragLeave(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDragLeave(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragLeave(pThis, e))
        }
    }
    public func OnDragLeave(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDragLeave(RawPointer(e));
    }
    // void OnDragOver(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDragOver(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragOver(pThis, e))
        }
    }
    public func OnDragOver(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDragOver(RawPointer(e));
    }
    // void OnDrop(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDrop(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDrop(pThis, e))
        }
    }
    public func OnDrop(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDrop(RawPointer(e));
    }
} // IControlOverrides


// type: Microsoft.UI.Xaml.Controls.IControlProtected
// interface type
open class IControlProtected
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5c750339, Data2: 0x1789, Data3 : 0x5095, Data4 : (0xa2, 0x14, 0xdd, 0x9d, 0x05, 0x64, 0xe5, 0x79)) }
    // [IsSpecialName] System.Object get_DefaultStyleKey()
    private func _n_get_DefaultStyleKey(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKey(pThis, __presult))
        }
    }
    public func get_DefaultStyleKey() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_DefaultStyleKey(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_DefaultStyleKey(System.Object)
    private func _n_put_DefaultStyleKey(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleKey(pThis, value))
        }
    }
    public func put_DefaultStyleKey(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_DefaultStyleKey(RawPointer(value));
    }
    // Microsoft.UI.Xaml.DependencyObject GetTemplateChild(System.String)
    private func _n_GetTemplateChild(_ childName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateChild(pThis, childName, __presult))
        }
    }
    public func GetTemplateChild(childName : Optional<Swift.String>) throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        let __hstr_childName = try HString(childName!);
        return try withExtendedLifetime(__hstr_childName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_GetTemplateChild(__hstr_childName.Raw(), &__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
        }
    }
    public var DefaultStyleKey : Optional<WinRT.IInspectable> {
        get throws {
            return try get_DefaultStyleKey();
        }
    }
} // IControlProtected


// type: Microsoft.UI.Xaml.Controls.IControlStatics
// interface type
open class IControlStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc3ae388d, Data2: 0xaa36, Data3 : 0x5e10, Data4 : (0xac, 0xac, 0x98, 0x41, 0x5f, 0x47, 0xbc, 0xc7)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsFocusEngagementEnabledProperty()
    private func _n_get_IsFocusEngagementEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsFocusEngagementEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsFocusEngagementEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsFocusEngagedProperty()
    private func _n_get_IsFocusEngagedProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagedProperty(pThis, __presult))
        }
    }
    public func get_IsFocusEngagedProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsFocusEngagedProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RequiresPointerProperty()
    private func _n_get_RequiresPointerProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointerProperty(pThis, __presult))
        }
    }
    public func get_RequiresPointerProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RequiresPointerProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontSizeProperty()
    private func _n_get_FontSizeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, __presult))
        }
    }
    public func get_FontSizeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontSizeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontFamilyProperty()
    private func _n_get_FontFamilyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, __presult))
        }
    }
    public func get_FontFamilyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontFamilyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontWeightProperty()
    private func _n_get_FontWeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, __presult))
        }
    }
    public func get_FontWeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontWeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStyleProperty()
    private func _n_get_FontStyleProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, __presult))
        }
    }
    public func get_FontStyleProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStyleProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStretchProperty()
    private func _n_get_FontStretchProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, __presult))
        }
    }
    public func get_FontStretchProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStretchProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CharacterSpacingProperty()
    private func _n_get_CharacterSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, __presult))
        }
    }
    public func get_CharacterSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CharacterSpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ForegroundProperty()
    private func _n_get_ForegroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, __presult))
        }
    }
    public func get_ForegroundProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ForegroundProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextScaleFactorEnabledProperty()
    private func _n_get_IsTextScaleFactorEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextScaleFactorEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsEnabledProperty()
    private func _n_get_IsEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TabNavigationProperty()
    private func _n_get_TabNavigationProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigationProperty(pThis, __presult))
        }
    }
    public func get_TabNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TabNavigationProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TemplateProperty()
    private func _n_get_TemplateProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateProperty(pThis, __presult))
        }
    }
    public func get_TemplateProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TemplateProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PaddingProperty()
    private func _n_get_PaddingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, __presult))
        }
    }
    public func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PaddingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HorizontalContentAlignmentProperty()
    private func _n_get_HorizontalContentAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignmentProperty(pThis, __presult))
        }
    }
    public func get_HorizontalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HorizontalContentAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_VerticalContentAlignmentProperty()
    private func _n_get_VerticalContentAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignmentProperty(pThis, __presult))
        }
    }
    public func get_VerticalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_VerticalContentAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundProperty()
    private func _n_get_BackgroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, __presult))
        }
    }
    public func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundSizingProperty()
    private func _n_get_BackgroundSizingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, __presult))
        }
    }
    public func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundSizingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderThicknessProperty()
    private func _n_get_BorderThicknessProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, __presult))
        }
    }
    public func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderThicknessProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderBrushProperty()
    private func _n_get_BorderBrushProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, __presult))
        }
    }
    public func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderBrushProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DefaultStyleKeyProperty()
    private func _n_get_DefaultStyleKeyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKeyProperty(pThis, __presult))
        }
    }
    public func get_DefaultStyleKeyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DefaultStyleKeyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DefaultStyleResourceUriProperty()
    private func _n_get_DefaultStyleResourceUriProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUriProperty(pThis, __presult))
        }
    }
    public func get_DefaultStyleResourceUriProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DefaultStyleResourceUriProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ElementSoundModeProperty()
    private func _n_get_ElementSoundModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundModeProperty(pThis, __presult))
        }
    }
    public func get_ElementSoundModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ElementSoundModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CornerRadiusProperty()
    private func _n_get_CornerRadiusProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, __presult))
        }
    }
    public func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CornerRadiusProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTemplateFocusTargetProperty()
    private func _n_get_IsTemplateFocusTargetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateFocusTargetProperty(pThis, __presult))
        }
    }
    public func get_IsTemplateFocusTargetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTemplateFocusTargetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // bool GetIsTemplateFocusTarget(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetIsTemplateFocusTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateFocusTarget(pThis, element, __presult))
        }
    }
    public func GetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_GetIsTemplateFocusTarget(RawPointer(element), &__result);
        return __result;
    }
    // void SetIsTemplateFocusTarget(Microsoft.UI.Xaml.FrameworkElement, bool)
    private func _n_SetIsTemplateFocusTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateFocusTarget(pThis, element, value))
        }
    }
    public func SetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : boolean) throws -> Void {
        try self._n_SetIsTemplateFocusTarget(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTemplateKeyTipTargetProperty()
    private func _n_get_IsTemplateKeyTipTargetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateKeyTipTargetProperty(pThis, __presult))
        }
    }
    public func get_IsTemplateKeyTipTargetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTemplateKeyTipTargetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // bool GetIsTemplateKeyTipTarget(Microsoft.UI.Xaml.DependencyObject)
    private func _n_GetIsTemplateKeyTipTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateKeyTipTarget(pThis, element, __presult))
        }
    }
    public func GetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_GetIsTemplateKeyTipTarget(RawPointer(element), &__result);
        return __result;
    }
    // void SetIsTemplateKeyTipTarget(Microsoft.UI.Xaml.DependencyObject, bool)
    private func _n_SetIsTemplateKeyTipTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>, _ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateKeyTipTarget(pThis, element, value))
        }
    }
    public func SetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.IDependencyObject>, value : boolean) throws -> Void {
        try self._n_SetIsTemplateKeyTipTarget(RawPointer(element), value);
    }
    public var BackgroundProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundProperty();
        }
    }
    public var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundSizingProperty();
        }
    }
    public var BorderBrushProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderBrushProperty();
        }
    }
    public var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderThicknessProperty();
        }
    }
    public var CharacterSpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CharacterSpacingProperty();
        }
    }
    public var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CornerRadiusProperty();
        }
    }
    public var DefaultStyleKeyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DefaultStyleKeyProperty();
        }
    }
    public var DefaultStyleResourceUriProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DefaultStyleResourceUriProperty();
        }
    }
    public var ElementSoundModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ElementSoundModeProperty();
        }
    }
    public var FontFamilyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontFamilyProperty();
        }
    }
    public var FontSizeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontSizeProperty();
        }
    }
    public var FontStretchProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStretchProperty();
        }
    }
    public var FontStyleProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStyleProperty();
        }
    }
    public var FontWeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontWeightProperty();
        }
    }
    public var ForegroundProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ForegroundProperty();
        }
    }
    public var HorizontalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HorizontalContentAlignmentProperty();
        }
    }
    public var IsEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsEnabledProperty();
        }
    }
    public var IsFocusEngagedProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsFocusEngagedProperty();
        }
    }
    public var IsFocusEngagementEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsFocusEngagementEnabledProperty();
        }
    }
    public var IsTemplateFocusTargetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTemplateFocusTargetProperty();
        }
    }
    public var IsTemplateKeyTipTargetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTemplateKeyTipTargetProperty();
        }
    }
    public var IsTextScaleFactorEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextScaleFactorEnabledProperty();
        }
    }
    public var PaddingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PaddingProperty();
        }
    }
    public var RequiresPointerProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RequiresPointerProperty();
        }
    }
    public var TabNavigationProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TabNavigationProperty();
        }
    }
    public var TemplateProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TemplateProperty();
        }
    }
    public var VerticalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_VerticalContentAlignmentProperty();
        }
    }
} // IControlStatics


// type: Microsoft.UI.Xaml.Controls.IControlTemplate
// interface type
open class IControlTemplate
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3a192751, Data2: 0x2106, Data3 : 0x547a, Data4 : (0xac, 0xa0, 0xf1, 0x5a, 0xe8, 0x92, 0x6e, 0xa0)) }
// method not needed: get_TargetType
// method not needed: put_TargetType
} // IControlTemplate


// type: Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs
// interface type
open class IFocusDisengagedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc0b4b88c, Data2: 0xc195, Data3 : 0x5064, Data4 : (0x84, 0xc7, 0x33, 0xcb, 0x26, 0x2c, 0xb2, 0x40)) }
} // IFocusDisengagedEventArgs


// type: Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs
// interface type
open class IFocusEngagedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1e71e8e4, Data2: 0x74b2, Data3 : 0x50a1, Data4 : (0x8f, 0x2b, 0x42, 0xc0, 0x11, 0x8a, 0xb0, 0xea)) }
// method not needed: get_Handled
// method not needed: put_Handled
} // IFocusEngagedEventArgs


// type: Microsoft.UI.Xaml.Controls.IGrid
// interface type
open class IGrid
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc4496219, Data2: 0x9014, Data3 : 0x58a1, Data4 : (0xb4, 0xad, 0xc5, 0x04, 0x49, 0x13, 0xa5, 0xbb)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.RowDefinitionCollection get_RowDefinitions()
    private func _n_get_RowDefinitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowDefinitions(pThis, __presult))
        }
    }
    public func get_RowDefinitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition>> = nil;
        try self._n_get_RowDefinitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection get_ColumnDefinitions()
    private func _n_get_ColumnDefinitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnDefinitions(pThis, __presult))
        }
    }
    public func get_ColumnDefinitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition>> = nil;
        try self._n_get_ColumnDefinitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.BackgroundSizing get_BackgroundSizing()
    private func _n_get_BackgroundSizing(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, __presult))
        }
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge;
        try self._n_get_BackgroundSizing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BackgroundSizing(Microsoft.UI.Xaml.Controls.BackgroundSizing)
    private func _n_put_BackgroundSizing(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
        }
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        try self._n_put_BackgroundSizing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_BorderBrush()
    private func _n_get_BorderBrush(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, __presult))
        }
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_BorderBrush(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_BorderBrush(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_BorderBrush(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, value))
        }
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_BorderBrush(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_BorderThickness()
    private func _n_get_BorderThickness(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, __presult))
        }
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_BorderThickness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderThickness(Microsoft.UI.Xaml.Thickness)
    private func _n_put_BorderThickness(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, value))
        }
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_BorderThickness(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.CornerRadius get_CornerRadius()
    private func _n_get_CornerRadius(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CCornerRadius>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, __presult))
        }
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        var __result : _q_CMicrosoft_CUI_CXaml_CCornerRadius = _q_CMicrosoft_CUI_CXaml_CCornerRadius(TopLeft: 0, TopRight: 0, BottomRight: 0, BottomLeft: 0);
        try self._n_get_CornerRadius(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CornerRadius(Microsoft.UI.Xaml.CornerRadius)
    private func _n_put_CornerRadius(_ value : _q_CMicrosoft_CUI_CXaml_CCornerRadius) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, value))
        }
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        try self._n_put_CornerRadius(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Padding()
    private func _n_get_Padding(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, __presult))
        }
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Padding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Padding(Microsoft.UI.Xaml.Thickness)
    private func _n_put_Padding(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, value))
        }
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Padding(value);
    }
    // [IsSpecialName] System.Double get_RowSpacing()
    private func _n_get_RowSpacing(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacing(pThis, __presult))
        }
    }
    public func get_RowSpacing() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_RowSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RowSpacing(System.Double)
    private func _n_put_RowSpacing(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RowSpacing(pThis, value))
        }
    }
    public func put_RowSpacing(value : Swift.Double) throws -> Void {
        try self._n_put_RowSpacing(value);
    }
    // [IsSpecialName] System.Double get_ColumnSpacing()
    private func _n_get_ColumnSpacing(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacing(pThis, __presult))
        }
    }
    public func get_ColumnSpacing() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_ColumnSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColumnSpacing(System.Double)
    private func _n_put_ColumnSpacing(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColumnSpacing(pThis, value))
        }
    }
    public func put_ColumnSpacing(value : Swift.Double) throws -> Void {
        try self._n_put_ColumnSpacing(value);
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
            return try get_BackgroundSizing();
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_BorderBrush();
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_BorderThickness();
        }
    }
    public var ColumnDefinitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition> {
        get throws {
            return try get_ColumnDefinitions();
        }
    }
    public var ColumnSpacing : Swift.Double {
        get throws {
            return try get_ColumnSpacing();
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
            return try get_CornerRadius();
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Padding();
        }
    }
    public var RowDefinitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition> {
        get throws {
            return try get_RowDefinitions();
        }
    }
    public var RowSpacing : Swift.Double {
        get throws {
            return try get_RowSpacing();
        }
    }
} // IGrid


// type: Microsoft.UI.Xaml.Controls.IGridFactory
// interface type
// COMPOSITION INTERFACE
open class IGridFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb16bf561, Data2: 0xfc6c, Data3 : 0x57c6, Data4 : (0x8e, 0xbc, 0x0b, 0x06, 0xce, 0x45, 0x13, 0xaa)) }
    // Microsoft.UI.Xaml.Controls.Grid CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIGrid>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IGrid> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIGrid>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IGrid(consuming: __result);
    }
} // IGridFactory


// type: Microsoft.UI.Xaml.Controls.IGridStatics
// interface type
open class IGridStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xef9cf81d, Data2: 0xa431, Data3 : 0x50f4, Data4 : (0xab, 0xf5, 0x30, 0x23, 0xfe, 0x44, 0x77, 0x04)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundSizingProperty()
    private func _n_get_BackgroundSizingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, __presult))
        }
    }
    public func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundSizingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderBrushProperty()
    private func _n_get_BorderBrushProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, __presult))
        }
    }
    public func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderBrushProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderThicknessProperty()
    private func _n_get_BorderThicknessProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, __presult))
        }
    }
    public func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderThicknessProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CornerRadiusProperty()
    private func _n_get_CornerRadiusProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, __presult))
        }
    }
    public func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CornerRadiusProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PaddingProperty()
    private func _n_get_PaddingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, __presult))
        }
    }
    public func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PaddingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RowSpacingProperty()
    private func _n_get_RowSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacingProperty(pThis, __presult))
        }
    }
    public func get_RowSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RowSpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColumnSpacingProperty()
    private func _n_get_ColumnSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacingProperty(pThis, __presult))
        }
    }
    public func get_ColumnSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColumnSpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RowProperty()
    private func _n_get_RowProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowProperty(pThis, __presult))
        }
    }
    public func get_RowProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RowProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetRow(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetRow(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRow(pThis, element, __presult))
        }
    }
    public func GetRow(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetRow(RawPointer(element), &__result);
        return __result;
    }
    // void SetRow(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetRow(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRow(pThis, element, value))
        }
    }
    public func SetRow(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetRow(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColumnProperty()
    private func _n_get_ColumnProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnProperty(pThis, __presult))
        }
    }
    public func get_ColumnProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColumnProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetColumn(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetColumn(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumn(pThis, element, __presult))
        }
    }
    public func GetColumn(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetColumn(RawPointer(element), &__result);
        return __result;
    }
    // void SetColumn(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetColumn(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumn(pThis, element, value))
        }
    }
    public func SetColumn(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetColumn(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RowSpanProperty()
    private func _n_get_RowSpanProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpanProperty(pThis, __presult))
        }
    }
    public func get_RowSpanProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RowSpanProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetRowSpan(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetRowSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRowSpan(pThis, element, __presult))
        }
    }
    public func GetRowSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetRowSpan(RawPointer(element), &__result);
        return __result;
    }
    // void SetRowSpan(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetRowSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRowSpan(pThis, element, value))
        }
    }
    public func SetRowSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetRowSpan(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColumnSpanProperty()
    private func _n_get_ColumnSpanProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpanProperty(pThis, __presult))
        }
    }
    public func get_ColumnSpanProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColumnSpanProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetColumnSpan(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetColumnSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumnSpan(pThis, element, __presult))
        }
    }
    public func GetColumnSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetColumnSpan(RawPointer(element), &__result);
        return __result;
    }
    // void SetColumnSpan(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetColumnSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumnSpan(pThis, element, value))
        }
    }
    public func SetColumnSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetColumnSpan(RawPointer(element), value);
    }
    public var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundSizingProperty();
        }
    }
    public var BorderBrushProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderBrushProperty();
        }
    }
    public var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderThicknessProperty();
        }
    }
    public var ColumnProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColumnProperty();
        }
    }
    public var ColumnSpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColumnSpacingProperty();
        }
    }
    public var ColumnSpanProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColumnSpanProperty();
        }
    }
    public var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CornerRadiusProperty();
        }
    }
    public var PaddingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PaddingProperty();
        }
    }
    public var RowProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RowProperty();
        }
    }
    public var RowSpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RowSpacingProperty();
        }
    }
    public var RowSpanProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RowSpanProperty();
        }
    }
} // IGridStatics


// type: Microsoft.UI.Xaml.Controls.IPanel
// interface type
open class IPanel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x27a1b418, Data2: 0x56f3, Data3 : 0x525e, Data4 : (0xb8, 0x83, 0xce, 0xfe, 0xd9, 0x05, 0xee, 0xd3)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.UIElementCollection get_Children()
    private func _n_get_Children(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Children(pThis, __presult))
        }
    }
    public func get_Children() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement>> = nil;
        try self._n_get_Children(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Background()
    private func _n_get_Background(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, __presult))
        }
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Background(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Background(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_Background(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, value))
        }
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Background(RawPointer(value));
    }
    // [IsSpecialName] bool get_IsItemsHost()
    private func _n_get_IsItemsHost(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHost(pThis, __presult))
        }
    }
    public func get_IsItemsHost() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsItemsHost(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Animation.TransitionCollection get_ChildrenTransitions()
    private func _n_get_ChildrenTransitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitions(pThis, __presult))
        }
    }
    public func get_ChildrenTransitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>> = nil;
        try self._n_get_ChildrenTransitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition(consuming: __result);
    }
    // [IsSpecialName] void put_ChildrenTransitions(Microsoft.UI.Xaml.Media.Animation.TransitionCollection)
    private func _n_put_ChildrenTransitions(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChildrenTransitions(pThis, value))
        }
    }
    public func put_ChildrenTransitions(value : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>) throws -> Void {
        try self._n_put_ChildrenTransitions(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.BrushTransition get_BackgroundTransition()
    private func _n_get_BackgroundTransition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, __presult))
        }
    }
    public func get_BackgroundTransition() throws -> Optional<Microsoft.UI.Xaml.IBrushTransition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>> = nil;
        try self._n_get_BackgroundTransition(&__result);
        return Microsoft.UI.Xaml.IBrushTransition(consuming: __result);
    }
    // [IsSpecialName] void put_BackgroundTransition(Microsoft.UI.Xaml.BrushTransition)
    private func _n_put_BackgroundTransition(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, value))
        }
    }
    public func put_BackgroundTransition(value : Optional<Microsoft.UI.Xaml.IBrushTransition>) throws -> Void {
        try self._n_put_BackgroundTransition(RawPointer(value));
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Background();
        }
    }
    public var BackgroundTransition : Optional<Microsoft.UI.Xaml.IBrushTransition> {
        get throws {
            return try get_BackgroundTransition();
        }
    }
    public var Children : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement> {
        get throws {
            return try get_Children();
        }
    }
    public var ChildrenTransitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        get throws {
            return try get_ChildrenTransitions();
        }
    }
    public var IsItemsHost : boolean {
        get throws {
            return try get_IsItemsHost();
        }
    }
} // IPanel


// type: Microsoft.UI.Xaml.Controls.IPanelFactory
// interface type
// COMPOSITION INTERFACE
open class IPanelFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf5e7e21c, Data2: 0x4c97, Data3 : 0x5d20, Data4 : (0xbe, 0xe6, 0x3e, 0x4f, 0xc6, 0xab, 0x14, 0xe9)) }
    // Microsoft.UI.Xaml.Controls.Panel CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIPanel>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IPanel> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIPanel>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IPanel(consuming: __result);
    }
} // IPanelFactory


// type: Microsoft.UI.Xaml.Controls.IPanelStatics
// interface type
open class IPanelStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x76a9caa7, Data2: 0xa5d4, Data3 : 0x5061, Data4 : (0xa3, 0x25, 0x17, 0xc7, 0x6f, 0x66, 0xde, 0x51)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundProperty()
    private func _n_get_BackgroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, __presult))
        }
    }
    public func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsItemsHostProperty()
    private func _n_get_IsItemsHostProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHostProperty(pThis, __presult))
        }
    }
    public func get_IsItemsHostProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsItemsHostProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ChildrenTransitionsProperty()
    private func _n_get_ChildrenTransitionsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitionsProperty(pThis, __presult))
        }
    }
    public func get_ChildrenTransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ChildrenTransitionsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var BackgroundProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundProperty();
        }
    }
    public var ChildrenTransitionsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ChildrenTransitionsProperty();
        }
    }
    public var IsItemsHostProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsItemsHostProperty();
        }
    }
} // IPanelStatics


// type: Microsoft.UI.Xaml.Controls.IRowDefinition
// interface type
open class IRowDefinition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe870f2f, Data2: 0x89ef, Data3 : 0x5dac, Data4 : (0x9f, 0x33, 0x96, 0x8d, 0x0d, 0xc5, 0x77, 0xc3)) }
// method not needed: get_Height
// method not needed: put_Height
// method not needed: get_MaxHeight
// method not needed: put_MaxHeight
// method not needed: get_MinHeight
// method not needed: put_MinHeight
// method not needed: get_ActualHeight
} // IRowDefinition


// type: Microsoft.UI.Xaml.Controls.ISwapChainPanel
// interface type
open class ISwapChainPanel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x08844f85, Data2: 0xaa1b, Data3 : 0x540d, Data4 : (0xbe, 0xf2, 0xb2, 0xbb, 0x7b, 0x25, 0x7f, 0x8c)) }
    // [IsSpecialName] System.Single get_CompositionScaleX()
    private func _n_get_CompositionScaleX(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompositionScaleX(pThis, __presult))
        }
    }
    public func get_CompositionScaleX() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_CompositionScaleX(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_CompositionScaleY()
    private func _n_get_CompositionScaleY(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompositionScaleY(pThis, __presult))
        }
    }
    public func get_CompositionScaleY() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_CompositionScaleY(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_CompositionScaleChanged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.SwapChainPanel,System.Object>)
    private func _n_add_CompositionScaleChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CSwapChainPanel_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_CompositionScaleChanged(pThis, handler, __presult))
        }
    }
    public func add_CompositionScaleChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CSwapChainPanel_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_CompositionScaleChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_CompositionScaleChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_CompositionScaleChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CompositionScaleChanged(pThis, token))
        }
    }
    public func remove_CompositionScaleChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_CompositionScaleChanged(token);
    }
    // Microsoft.UI.Input.InputPointerSource CreateCoreIndependentInputSource(Microsoft.UI.Input.InputPointerSourceDeviceKinds)
    private func _n_CreateCoreIndependentInputSource(_ deviceKinds : _q_CMicrosoft_CUI_CInput_CInputPointerSourceDeviceKinds, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CInput_CIInputPointerSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreIndependentInputSource(pThis, deviceKinds, __presult))
        }
    }
    public func CreateCoreIndependentInputSource(deviceKinds : Microsoft.UI.Input.InputPointerSourceDeviceKinds) throws -> Optional<Microsoft.UI.Input.IInputPointerSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CInput_CIInputPointerSource>> = nil;
        try self._n_CreateCoreIndependentInputSource(deviceKinds, &__result);
        return Microsoft.UI.Input.IInputPointerSource(consuming: __result);
    }
    public var CompositionScaleX : Swift.Float {
        get throws {
            return try get_CompositionScaleX();
        }
    }
    public var CompositionScaleY : Swift.Float {
        get throws {
            return try get_CompositionScaleY();
        }
    }
} // ISwapChainPanel


// type: Microsoft.UI.Xaml.Controls.ISwapChainPanelFactory
// interface type
// COMPOSITION INTERFACE
open class ISwapChainPanelFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x38d00b69, Data2: 0x5759, Data3 : 0x5f37, Data4 : (0x9e, 0x1c, 0x3a, 0xe0, 0xd4, 0x28, 0x8b, 0x26)) }
    // Microsoft.UI.Xaml.Controls.SwapChainPanel CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanelFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.ISwapChainPanel> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanel>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.ISwapChainPanel(consuming: __result);
    }
} // ISwapChainPanelFactory


// type: Microsoft.UI.Xaml.Controls.ISwapChainPanelStatics
// interface type
open class ISwapChainPanelStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd83b0621, Data2: 0xaaca, Data3 : 0x534b, Data4 : (0xaf, 0xde, 0x53, 0x70, 0x16, 0x71, 0x76, 0xb5)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CompositionScaleXProperty()
    private func _n_get_CompositionScaleXProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompositionScaleXProperty(pThis, __presult))
        }
    }
    public func get_CompositionScaleXProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CompositionScaleXProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CompositionScaleYProperty()
    private func _n_get_CompositionScaleYProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISwapChainPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompositionScaleYProperty(pThis, __presult))
        }
    }
    public func get_CompositionScaleYProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CompositionScaleYProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var CompositionScaleXProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CompositionScaleXProperty();
        }
    }
    public var CompositionScaleYProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CompositionScaleYProperty();
        }
    }
} // ISwapChainPanelStatics


// type: Microsoft.UI.Xaml.Controls.IUIElementCollection
// interface type
open class IUIElementCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x23050cb1, Data2: 0xdb88, Data3 : 0x54ed, Data4 : (0x90, 0x83, 0x5e, 0xcf, 0xb1, 0x25, 0x12, 0xfd)) }
    // void Move(System.UInt32, System.UInt32)
    private func _n_Move(_ oldIndex : UINT32, _ newIndex : UINT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Move(pThis, oldIndex, newIndex))
        }
    }
    public func Move(oldIndex : Swift.UInt32, newIndex : Swift.UInt32) throws -> Void {
        try self._n_Move(oldIndex, newIndex);
    }
} // IUIElementCollection


// type: Microsoft.UI.Xaml.Controls.IUserControl
// interface type
open class IUserControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xab8a0a51, Data2: 0x44cf, Data3 : 0x5337, Data4 : (0xad, 0x77, 0x8e, 0xda, 0x17, 0x95, 0xe9, 0xf6)) }
    // [IsSpecialName] Microsoft.UI.Xaml.UIElement get_Content()
    private func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Optional<Microsoft.UI.Xaml.IUIElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>> = nil;
        try self._n_get_Content(&__result);
        return Microsoft.UI.Xaml.IUIElement(consuming: __result);
    }
    // [IsSpecialName] void put_Content(Microsoft.UI.Xaml.UIElement)
    private func _n_put_Content(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, value))
        }
    }
    public func put_Content(value : Optional<Microsoft.UI.Xaml.IUIElement>) throws -> Void {
        try self._n_put_Content(RawPointer(value));
    }
    public var Content : Optional<Microsoft.UI.Xaml.IUIElement> {
        get throws {
            return try get_Content();
        }
    }
} // IUserControl


// type: Microsoft.UI.Xaml.Controls.IUserControlFactory
// interface type
// COMPOSITION INTERFACE
open class IUserControlFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61ac9074, Data2: 0xaab3, Data3 : 0x50b8, Data4 : (0x8b, 0x18, 0xd4, 0xd2, 0x57, 0x3a, 0x52, 0x35)) }
    // Microsoft.UI.Xaml.Controls.UserControl CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IUserControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IUserControl(consuming: __result);
    }
} // IUserControlFactory


// type: Microsoft.UI.Xaml.Controls.IUserControlStatics
// interface type
open class IUserControlStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x575e8fa1, Data2: 0x2e2d, Data3 : 0x5857, Data4 : (0x9a, 0x93, 0x6b, 0x11, 0xe5, 0x43, 0x16, 0xba)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ContentProperty()
    private func _n_get_ContentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, __presult))
        }
    }
    public func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ContentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ContentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ContentProperty();
        }
    }
} // IUserControlStatics


// type: Microsoft.UI.Xaml.Controls.Panel
// runtime class
open class Panel
    :
    Microsoft.UI.Xaml.FrameworkElement
{
    private var _self : Microsoft.UI.Xaml.Controls.IPanel;
    public init(plok: Microsoft.UI.Xaml.Controls.IPanel?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IPanel { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IPanelFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IPanelFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Panel");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IPanelStatics {
        static var x : IPanelStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Panel")
    }
    public static var PanelStatics : IPanelStatics {
        _IPanelStatics.x
    }
    public static func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.get_BackgroundProperty());
    }
    public static func get_IsItemsHostProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.get_IsItemsHostProperty());
    }
    public static func get_ChildrenTransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.get_ChildrenTransitionsProperty());
    }
    public static var BackgroundProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.BackgroundProperty);
        }
    }
    public static var ChildrenTransitionsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.ChildrenTransitionsProperty);
        }
    }
    public static var IsItemsHostProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.IsItemsHostProperty);
        }
    }
    public func get_Children() throws -> Optional<Microsoft.UI.Xaml.Controls.UIElementCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.UIElementCollection(plok: _ifc.get_Children());
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Background());
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.put_Background(value: value!.Interface());
    }
    public func get_IsItemsHost() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.get_IsItemsHost();
    }
    public func get_ChildrenTransitions() throws -> Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.get_ChildrenTransitions());
    }
    public func put_ChildrenTransitions(value : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.put_ChildrenTransitions(value: value!.Interface());
    }
    public func get_BackgroundTransition() throws -> Optional<Microsoft.UI.Xaml.BrushTransition> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.BrushTransition(plok: _ifc.get_BackgroundTransition());
    }
    public func put_BackgroundTransition(value : Optional<Microsoft.UI.Xaml.BrushTransition>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.put_BackgroundTransition(value: value!.Interface());
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Background);
        }
    }
    public var BackgroundTransition : Optional<Microsoft.UI.Xaml.BrushTransition> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.BrushTransition(plok: _ifc.BackgroundTransition);
        }
    }
    public var Children : Optional<Microsoft.UI.Xaml.Controls.UIElementCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.UIElementCollection(plok: _ifc.Children);
        }
    }
    public var ChildrenTransitions : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.ChildrenTransitions);
        }
    }
    public var IsItemsHost : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.IsItemsHost;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.RequiresPointer
// enum type
public typealias RequiresPointer = _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer;

// type: Microsoft.UI.Xaml.Controls.RowDefinition
// runtime class
public class RowDefinition
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Controls.IRowDefinition;
    public init(plok: Microsoft.UI.Xaml.Controls.IRowDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IRowDefinition { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Controls.RowDefinition")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Controls.IRowDefinitionStatics
    // method not needed: get_Height
    // method not needed: put_Height
    // method not needed: get_MaxHeight
    // method not needed: put_MaxHeight
    // method not needed: get_MinHeight
    // method not needed: put_MinHeight
    // method not needed: get_ActualHeight
}

// type: Microsoft.UI.Xaml.Controls.RowDefinitionCollection
// runtime class
public class RowDefinitionCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition { return _self; }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.Controls.RowDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.RowDefinition(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Microsoft.UI.Xaml.Controls.RowDefinition, Microsoft, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.Controls.SwapChainPanel
// runtime class
open class SwapChainPanel
    :
    Microsoft.UI.Xaml.Controls.Grid
{
    private var _self : Microsoft.UI.Xaml.Controls.ISwapChainPanel;
    public init(plok: Microsoft.UI.Xaml.Controls.ISwapChainPanel?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.ISwapChainPanel { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.ISwapChainPanelFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ISwapChainPanelFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SwapChainPanel");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ISwapChainPanelStatics {
        static var x : ISwapChainPanelStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.SwapChainPanel")
    }
    public static var SwapChainPanelStatics : ISwapChainPanelStatics {
        _ISwapChainPanelStatics.x
    }
    public static func get_CompositionScaleXProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SwapChainPanelStatics.get_CompositionScaleXProperty());
    }
    public static func get_CompositionScaleYProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SwapChainPanelStatics.get_CompositionScaleYProperty());
    }
    public static var CompositionScaleXProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SwapChainPanelStatics.CompositionScaleXProperty);
        }
    }
    public static var CompositionScaleYProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SwapChainPanelStatics.CompositionScaleYProperty);
        }
    }
    public func get_CompositionScaleX() throws -> Swift.Float {
        let _ifc : Microsoft.UI.Xaml.Controls.ISwapChainPanel = try _self.QueryInterface();
        return try _ifc.get_CompositionScaleX();
    }
    public func get_CompositionScaleY() throws -> Swift.Float {
        let _ifc : Microsoft.UI.Xaml.Controls.ISwapChainPanel = try _self.QueryInterface();
        return try _ifc.get_CompositionScaleY();
    }
    public func add_CompositionScaleChanged(handler : @escaping (Optional<Microsoft.UI.Xaml.Controls.SwapChainPanel>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.ISwapChainPanel = try _self.QueryInterface();
        return try _ifc.add_CompositionScaleChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CSwapChainPanel_IInspectable(cb: handler).Interface());
    }
    public func remove_CompositionScaleChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISwapChainPanel = try _self.QueryInterface();
        return try _ifc.remove_CompositionScaleChanged(token: token);
    }
    public func CreateCoreIndependentInputSource(deviceKinds : Microsoft.UI.Input.InputPointerSourceDeviceKinds) throws -> Optional<Microsoft.UI.Input.InputPointerSource> {
        let _ifc : Microsoft.UI.Xaml.Controls.ISwapChainPanel = try _self.QueryInterface();
        return try Microsoft.UI.Input.InputPointerSource(plok: _ifc.CreateCoreIndependentInputSource(deviceKinds: deviceKinds));
    }
    public var CompositionScaleX : Swift.Float {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISwapChainPanel = try _self.QueryInterface();
        return try _ifc.CompositionScaleX;
        }
    }
    public var CompositionScaleY : Swift.Float {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISwapChainPanel = try _self.QueryInterface();
        return try _ifc.CompositionScaleY;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.UIElementCollection
// runtime class
public class UIElementCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement { return _self; }
    public func Move(oldIndex : Swift.UInt32, newIndex : Swift.UInt32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IUIElementCollection = try _self.QueryInterface();
        return try _ifc.Move(oldIndex: oldIndex, newIndex: newIndex);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.UIElement> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.UIElement>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
}

// type: Microsoft.UI.Xaml.Controls.UserControl
// runtime class
open class UserControl
    :
    Microsoft.UI.Xaml.Controls.Control
{
    private var _self : Microsoft.UI.Xaml.Controls.IUserControl;
    public init(plok: Microsoft.UI.Xaml.Controls.IUserControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IUserControl { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IUserControlFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IUserControlFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UserControl");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IUserControlStatics {
        static var x : IUserControlStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UserControl")
    }
    public static var UserControlStatics : IUserControlStatics {
        _IUserControlStatics.x
    }
    public static func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UserControlStatics.get_ContentProperty());
    }
    public static var ContentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UserControlStatics.ContentProperty);
        }
    }
    public func get_Content() throws -> Optional<Microsoft.UI.Xaml.UIElement> {
        let _ifc : Microsoft.UI.Xaml.Controls.IUserControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.get_Content());
    }
    public func put_Content(value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IUserControl = try _self.QueryInterface();
        return try _ifc.put_Content(value: value!.Interface());
    }
    public var Content : Optional<Microsoft.UI.Xaml.UIElement> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IUserControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.Content);
        }
    }
}

}
extension Microsoft.UI.Xaml.Controls.BackgroundSizing {
    public static var InnerBorderEdge : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge;
        }
    }
    public static var OuterBorderEdge : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_OuterBorderEdge;
        }
    }
}
extension Microsoft.UI.Xaml.Controls.RequiresPointer {
    public static var Never : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never;
        }
    }
    public static var WhenEngaged : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenEngaged;
        }
    }
    public static var WhenFocused : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenFocused;
        }
    }
}
