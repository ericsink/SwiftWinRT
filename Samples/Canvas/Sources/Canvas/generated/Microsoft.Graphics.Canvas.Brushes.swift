// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import C;

extension Microsoft.Graphics.Canvas.Brushes {
// type: Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop
// struct type
public typealias CanvasGradientStop = _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop;

// type: Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr
// struct type
public typealias CanvasGradientStopHdr = _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr;

// type: Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush
// runtime class
public class CanvasImageBrush
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush;
    public init(plok: Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws {
        let _af : ICanvasImageBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush");
        _self = try _af.Create(resourceCreator: resourceCreator)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, image : Optional<Microsoft.Graphics.Canvas.ICanvasImage>) throws {
        let _af : ICanvasImageBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush");
        _self = try _af.CreateWithImage(resourceCreator: resourceCreator, image: image)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Image() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasImage> {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.get_Image();
    }
    public func put_Image(value : Optional<Microsoft.Graphics.Canvas.ICanvasImage>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.put_Image(value: value);
    }
    public func get_ExtendX() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.get_ExtendX();
    }
    public func put_ExtendX(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.put_ExtendX(value: value);
    }
    public func get_ExtendY() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.get_ExtendY();
    }
    public func put_ExtendY(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.put_ExtendY(value: value);
    }
    public func get_SourceRectangle() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CRect> {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.get_SourceRectangle();
    }
    public func put_SourceRectangle(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CRect>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.put_SourceRectangle(value: value);
    }
    public func get_Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.get_Interpolation();
    }
    public func put_Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.put_Interpolation(value: value);
    }
    public var ExtendX : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.ExtendX;
        }
    }
    public var ExtendY : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.ExtendY;
        }
    }
    public var Image : Optional<Microsoft.Graphics.Canvas.ICanvasImage> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.Image;
        }
    }
    public var Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.Interpolation;
        }
    }
    public var SourceRectangle : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CRect> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush = try _self.QueryInterface();
        return try _ifc.SourceRectangle;
        }
    }
    public func get_Opacity() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Transform() throws -> Windows.Foundation.Numerics.Matrix3x2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Transform();
    }
    public func put_Transform(value : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Transform(value: value);
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public var Opacity : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var Transform : Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Transform;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush
// runtime class
public class CanvasLinearGradientBrush
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush;
    public init(plok: Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColor : Windows.UI.Color, endColor : Windows.UI.Color) throws {
        let _af : ICanvasLinearGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush");
        _self = try _af.CreateSimple(resourceCreator: resourceCreator, startColor: startColor, endColor: endColor)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>) throws {
        let _af : ICanvasLinearGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush");
        _self = try _af.CreateWithStops(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws {
        let _af : ICanvasLinearGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush");
        _self = try _af.CreateWithEdgeBehaviorAndAlphaMode(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops, edgeBehavior: edgeBehavior, alphaMode: alphaMode)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws {
        let _af : ICanvasLinearGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush");
        _self = try _af.CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops, edgeBehavior: edgeBehavior, alphaMode: alphaMode, preInterpolationSpace: preInterpolationSpace, postInterpolationSpace: postInterpolationSpace, bufferPrecision: bufferPrecision)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasLinearGradientBrushStatics {
        static var x : ICanvasLinearGradientBrushStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush")
    }
    public static var CanvasLinearGradientBrushStatics : ICanvasLinearGradientBrushStatics {
        _ICanvasLinearGradientBrushStatics.x
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColorHdr : Windows.Foundation.Numerics.Vector4, endColorHdr : Windows.Foundation.Numerics.Vector4) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush(plok: CanvasLinearGradientBrushStatics.CreateHdrSimple(resourceCreator: resourceCreator, startColorHdr: startColorHdr, endColorHdr: endColorHdr));
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsHdrLength : UINT32, gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush(plok: CanvasLinearGradientBrushStatics.CreateHdrWithStops(resourceCreator: resourceCreator, gradientStopsHdrLength: gradientStopsHdrLength, gradientStopsHdr: gradientStopsHdr));
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsHdrLength : UINT32, gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush(plok: CanvasLinearGradientBrushStatics.CreateHdrWithEdgeBehaviorAndAlphaMode(resourceCreator: resourceCreator, gradientStopsHdrLength: gradientStopsHdrLength, gradientStopsHdr: gradientStopsHdr, edgeBehavior: edgeBehavior, alphaMode: alphaMode));
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsHdrLength : UINT32, gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush(plok: CanvasLinearGradientBrushStatics.CreateHdrWithEdgeBehaviorAndInterpolationOptions(resourceCreator: resourceCreator, gradientStopsHdrLength: gradientStopsHdrLength, gradientStopsHdr: gradientStopsHdr, edgeBehavior: edgeBehavior, alphaMode: alphaMode, preInterpolationSpace: preInterpolationSpace, postInterpolationSpace: postInterpolationSpace, bufferPrecision: bufferPrecision));
    }
    public static func CreateRainbow(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, eldritchness : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush(plok: CanvasLinearGradientBrushStatics.CreateRainbow(resourceCreator: resourceCreator, eldritchness: eldritchness));
    }
    public func get_StartPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_StartPoint();
    }
    public func put_StartPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.put_StartPoint(value: value);
    }
    public func get_EndPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_EndPoint();
    }
    public func put_EndPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.put_EndPoint(value: value);
    }
    public func get_Stops() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_Stops();
    }
    public func get_StopsHdr() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_StopsHdr();
    }
    public func get_EdgeBehavior() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_EdgeBehavior();
    }
    public func get_PreInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_PreInterpolationSpace();
    }
    public func get_PostInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_PostInterpolationSpace();
    }
    public func get_BufferPrecision() throws -> Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var BufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var EdgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.EdgeBehavior;
        }
    }
    public var EndPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.EndPoint;
        }
    }
    public var PostInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.PostInterpolationSpace;
        }
    }
    public var PreInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.PreInterpolationSpace;
        }
    }
    public var StartPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.StartPoint;
        }
    }
    public var Stops : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.Stops;
        }
    }
    public var StopsHdr : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush = try _self.QueryInterface();
        return try _ifc.StopsHdr;
        }
    }
    public func get_Opacity() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Transform() throws -> Windows.Foundation.Numerics.Matrix3x2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Transform();
    }
    public func put_Transform(value : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Transform(value: value);
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public var Opacity : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var Transform : Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Transform;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush
// runtime class
public class CanvasRadialGradientBrush
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush;
    public init(plok: Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColor : Windows.UI.Color, endColor : Windows.UI.Color) throws {
        let _af : ICanvasRadialGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush");
        _self = try _af.CreateSimple(resourceCreator: resourceCreator, startColor: startColor, endColor: endColor)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>) throws {
        let _af : ICanvasRadialGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush");
        _self = try _af.CreateWithStops(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws {
        let _af : ICanvasRadialGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush");
        _self = try _af.CreateWithEdgeBehaviorAndAlphaMode(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops, edgeBehavior: edgeBehavior, alphaMode: alphaMode)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws {
        let _af : ICanvasRadialGradientBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush");
        _self = try _af.CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops, edgeBehavior: edgeBehavior, alphaMode: alphaMode, preInterpolationSpace: preInterpolationSpace, postInterpolationSpace: postInterpolationSpace, bufferPrecision: bufferPrecision)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasRadialGradientBrushStatics {
        static var x : ICanvasRadialGradientBrushStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush")
    }
    public static var CanvasRadialGradientBrushStatics : ICanvasRadialGradientBrushStatics {
        _ICanvasRadialGradientBrushStatics.x
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColorHdr : Windows.Foundation.Numerics.Vector4, endColorHdr : Windows.Foundation.Numerics.Vector4) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush(plok: CanvasRadialGradientBrushStatics.CreateHdrSimple(resourceCreator: resourceCreator, startColorHdr: startColorHdr, endColorHdr: endColorHdr));
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush(plok: CanvasRadialGradientBrushStatics.CreateHdrWithStops(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops));
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush(plok: CanvasRadialGradientBrushStatics.CreateHdrWithEdgeBehaviorAndAlphaMode(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops, edgeBehavior: edgeBehavior, alphaMode: alphaMode));
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush(plok: CanvasRadialGradientBrushStatics.CreateHdrWithEdgeBehaviorAndInterpolationOptions(resourceCreator: resourceCreator, gradientStopsLength: gradientStopsLength, gradientStops: gradientStops, edgeBehavior: edgeBehavior, alphaMode: alphaMode, preInterpolationSpace: preInterpolationSpace, postInterpolationSpace: postInterpolationSpace, bufferPrecision: bufferPrecision));
    }
    public static func CreateRainbow(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, eldritchness : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush(plok: CanvasRadialGradientBrushStatics.CreateRainbow(resourceCreator: resourceCreator, eldritchness: eldritchness));
    }
    public func get_Center() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_Center();
    }
    public func put_Center(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.put_Center(value: value);
    }
    public func get_OriginOffset() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_OriginOffset();
    }
    public func put_OriginOffset(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.put_OriginOffset(value: value);
    }
    public func get_RadiusX() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_RadiusX();
    }
    public func put_RadiusX(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.put_RadiusX(value: value);
    }
    public func get_RadiusY() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_RadiusY();
    }
    public func put_RadiusY(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.put_RadiusY(value: value);
    }
    public func get_Stops() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_Stops();
    }
    public func get_StopsHdr() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_StopsHdr();
    }
    public func get_EdgeBehavior() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_EdgeBehavior();
    }
    public func get_PreInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_PreInterpolationSpace();
    }
    public func get_PostInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_PostInterpolationSpace();
    }
    public func get_BufferPrecision() throws -> Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_BufferPrecision();
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.get_AlphaMode();
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.AlphaMode;
        }
    }
    public var BufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.BufferPrecision;
        }
    }
    public var Center : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.Center;
        }
    }
    public var EdgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.EdgeBehavior;
        }
    }
    public var OriginOffset : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.OriginOffset;
        }
    }
    public var PostInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.PostInterpolationSpace;
        }
    }
    public var PreInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.PreInterpolationSpace;
        }
    }
    public var RadiusX : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.RadiusX;
        }
    }
    public var RadiusY : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.RadiusY;
        }
    }
    public var Stops : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.Stops;
        }
    }
    public var StopsHdr : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush = try _self.QueryInterface();
        return try _ifc.StopsHdr;
        }
    }
    public func get_Opacity() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Transform() throws -> Windows.Foundation.Numerics.Matrix3x2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Transform();
    }
    public func put_Transform(value : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Transform(value: value);
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public var Opacity : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var Transform : Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Transform;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush
// runtime class
public class CanvasSolidColorBrush
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush;
    public init(plok: Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, color : Windows.UI.Color) throws {
        let _af : ICanvasSolidColorBrushFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush");
        _self = try _af.Create(resourceCreator: resourceCreator, color: color)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasSolidColorBrushStatics {
        static var x : ICanvasSolidColorBrushStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush")
    }
    public static var CanvasSolidColorBrushStatics : ICanvasSolidColorBrushStatics {
        _ICanvasSolidColorBrushStatics.x
    }
    public static func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, colorHdr : Windows.Foundation.Numerics.Vector4) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush> {
        return try Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush(plok: CanvasSolidColorBrushStatics.CreateHdr(resourceCreator: resourceCreator, colorHdr: colorHdr));
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush = try _self.QueryInterface();
        return try _ifc.get_ColorHdr();
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush = try _self.QueryInterface();
        return try _ifc.put_ColorHdr(value: value);
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush = try _self.QueryInterface();
        return try _ifc.ColorHdr;
        }
    }
    public func get_Opacity() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Transform() throws -> Windows.Foundation.Numerics.Matrix3x2 {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.get_Transform();
    }
    public func put_Transform(value : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.put_Transform(value: value);
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public var Opacity : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var Transform : Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Brushes.ICanvasBrush = try _self.QueryInterface();
        return try _ifc.Transform;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Brushes.ICanvasBrush
// interface type
open class ICanvasBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf5d58591, Data2: 0xc803, Data3 : 0x41b4, Data4 : (0x87, 0x8e, 0x79, 0xd9, 0x2a, 0xb1, 0x32, 0x95)) }
    // [IsSpecialName] System.Single get_Opacity()
    private func _n_get_Opacity(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, __presult))
        }
    }
    public func get_Opacity() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Opacity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Opacity(System.Single)
    private func _n_put_Opacity(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
        }
    }
    public func put_Opacity(value : Swift.Float) throws -> Void {
        try self._n_put_Opacity(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Matrix3x2 get_Transform()
    private func _n_get_Transform(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CMatrix3x2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, __presult))
        }
    }
    public func get_Transform() throws -> Windows.Foundation.Numerics.Matrix3x2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CMatrix3x2 = _q_CWindows_CFoundation_CNumerics_CMatrix3x2(M11: 0, M12: 0, M21: 0, M22: 0, M31: 0, M32: 0);
        try self._n_get_Transform(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Transform(Windows.Foundation.Numerics.Matrix3x2)
    private func _n_put_Transform(_ value : _q_CWindows_CFoundation_CNumerics_CMatrix3x2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform(pThis, value))
        }
    }
    public func put_Transform(value : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        try self._n_put_Transform(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_Device()
    private func _n_get_Device(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, __presult))
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_Device(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_Device();
        }
    }
    public var Opacity : Swift.Float {
        get throws {
            return try get_Opacity();
        }
    }
    public var Transform : Windows.Foundation.Numerics.Matrix3x2 {
        get throws {
            return try get_Transform();
        }
    }
} // ICanvasBrush


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush
// interface type
open class ICanvasImageBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5a21c4e7, Data2: 0xd450, Data3 : 0x4942, Data4 : (0x8b, 0xbd, 0xf0, 0x17, 0x09, 0x7a, 0xb7, 0x63)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.ICanvasImage get_Image()
    private func _n_get_Image(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Image(pThis, __presult))
        }
    }
    public func get_Image() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasImage> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>> = nil;
        try self._n_get_Image(&__result);
        return Microsoft.Graphics.Canvas.ICanvasImage(consuming: __result);
    }
    // [IsSpecialName] void put_Image(Microsoft.Graphics.Canvas.ICanvasImage)
    private func _n_put_Image(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Image(pThis, value))
        }
    }
    public func put_Image(value : Optional<Microsoft.Graphics.Canvas.ICanvasImage>) throws -> Void {
        try self._n_put_Image(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendX()
    private func _n_get_ExtendX(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendX(pThis, __presult))
        }
    }
    public func get_ExtendX() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp;
        try self._n_get_ExtendX(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExtendX(Microsoft.Graphics.Canvas.CanvasEdgeBehavior)
    private func _n_put_ExtendX(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendX(pThis, value))
        }
    }
    public func put_ExtendX(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        try self._n_put_ExtendX(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_ExtendY()
    private func _n_get_ExtendY(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendY(pThis, __presult))
        }
    }
    public func get_ExtendY() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp;
        try self._n_get_ExtendY(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExtendY(Microsoft.Graphics.Canvas.CanvasEdgeBehavior)
    private func _n_put_ExtendY(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendY(pThis, value))
        }
    }
    public func put_ExtendY(value : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        try self._n_put_ExtendY(value);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.Rect> get_SourceRectangle()
    private func _n_get_SourceRectangle(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CRect>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, __presult))
        }
    }
    public func get_SourceRectangle() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CRect> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CRect>> = nil;
        try self._n_get_SourceRectangle(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CRect(consuming: __result);
    }
    // [IsSpecialName] void put_SourceRectangle(Windows.Foundation.IReference<Windows.Foundation.Rect>)
    private func _n_put_SourceRectangle(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CRect>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, value))
        }
    }
    public func put_SourceRectangle(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CRect>) throws -> Void {
        try self._n_put_SourceRectangle(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasImageInterpolation get_Interpolation()
    private func _n_get_Interpolation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Interpolation(pThis, __presult))
        }
    }
    public func get_Interpolation() throws -> Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor;
        try self._n_get_Interpolation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Interpolation(Microsoft.Graphics.Canvas.CanvasImageInterpolation)
    private func _n_put_Interpolation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Interpolation(pThis, value))
        }
    }
    public func put_Interpolation(value : Microsoft.Graphics.Canvas.CanvasImageInterpolation) throws -> Void {
        try self._n_put_Interpolation(value);
    }
    public var ExtendX : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
            return try get_ExtendX();
        }
    }
    public var ExtendY : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
            return try get_ExtendY();
        }
    }
    public var Image : Optional<Microsoft.Graphics.Canvas.ICanvasImage> {
        get throws {
            return try get_Image();
        }
    }
    public var Interpolation : Microsoft.Graphics.Canvas.CanvasImageInterpolation {
        get throws {
            return try get_Interpolation();
        }
    }
    public var SourceRectangle : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CRect> {
        get throws {
            return try get_SourceRectangle();
        }
    }
} // ICanvasImageBrush


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasImageBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc40ccb59, Data2: 0x1b87, Data3 : 0x4394, Data4 : (0xa6, 0xa6, 0xec, 0xd2, 0x78, 0xe8, 0x77, 0xd6)) }
    // Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush Create(Microsoft.Graphics.Canvas.ICanvasResourceCreator)
    private func _n_Create(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, resourceCreator, __presult))
        }
    }
    public func Create(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush>> = nil;
        try self._n_Create(RawPointer(resourceCreator), &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush CreateWithImage(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.ICanvasImage)
    private func _n_CreateWithImage(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ image : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithImage(pThis, resourceCreator, image, __presult))
        }
    }
    public func CreateWithImage(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, image : Optional<Microsoft.Graphics.Canvas.ICanvasImage>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush>> = nil;
        try self._n_CreateWithImage(RawPointer(resourceCreator), RawPointer(image), &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasImageBrush(consuming: __result);
    }
} // ICanvasImageBrushFactory


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush
// interface type
open class ICanvasLinearGradientBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa4ffbcb1, Data2: 0xec22, Data3 : 0x48c8, Data4 : (0xb1, 0xaf, 0x09, 0xbc, 0xfd, 0x34, 0xee, 0xbd)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_StartPoint()
    private func _n_get_StartPoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPoint(pThis, __presult))
        }
    }
    public func get_StartPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_StartPoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_StartPoint(Windows.Foundation.Numerics.Vector2)
    private func _n_put_StartPoint(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartPoint(pThis, value))
        }
    }
    public func put_StartPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_StartPoint(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_EndPoint()
    private func _n_get_EndPoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPoint(pThis, __presult))
        }
    }
    public func get_EndPoint() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_EndPoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_EndPoint(Windows.Foundation.Numerics.Vector2)
    private func _n_put_EndPoint(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndPoint(pThis, value))
        }
    }
    public func put_EndPoint(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_EndPoint(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] get_Stops()
    private func _n_get_Stops(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stops(pThis, __presultLength, __presult))
        }
    }
    public func get_Stops() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>> = nil;
        try self._n_get_Stops(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[] get_StopsHdr()
    private func _n_get_StopsHdr(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StopsHdr(pThis, __presultLength, __presult))
        }
    }
    public func get_StopsHdr() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>> = nil;
        try self._n_get_StopsHdr(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_EdgeBehavior()
    private func _n_get_EdgeBehavior(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EdgeBehavior(pThis, __presult))
        }
    }
    public func get_EdgeBehavior() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp;
        try self._n_get_EdgeBehavior(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasColorSpace get_PreInterpolationSpace()
    private func _n_get_PreInterpolationSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreInterpolationSpace(pThis, __presult))
        }
    }
    public func get_PreInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Custom;
        try self._n_get_PreInterpolationSpace(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasColorSpace get_PostInterpolationSpace()
    private func _n_get_PostInterpolationSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PostInterpolationSpace(pThis, __presult))
        }
    }
    public func get_PostInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Custom;
        try self._n_get_PostInterpolationSpace(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasBufferPrecision get_BufferPrecision()
    private func _n_get_BufferPrecision(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferPrecision(pThis, __presult))
        }
    }
    public func get_BufferPrecision() throws -> Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision = _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalized;
        try self._n_get_BufferPrecision(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var BufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        get throws {
            return try get_BufferPrecision();
        }
    }
    public var EdgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
            return try get_EdgeBehavior();
        }
    }
    public var EndPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_EndPoint();
        }
    }
    public var PostInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
            return try get_PostInterpolationSpace();
        }
    }
    public var PreInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
            return try get_PreInterpolationSpace();
        }
    }
    public var StartPoint : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_StartPoint();
        }
    }
    public var Stops : UINT32 {
        get throws {
            return try get_Stops();
        }
    }
    public var StopsHdr : UINT32 {
        get throws {
            return try get_StopsHdr();
        }
    }
} // ICanvasLinearGradientBrush


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasLinearGradientBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa2e8e34a, Data2: 0x8592, Data3 : 0x4b9d, Data4 : (0xba, 0x1c, 0x00, 0xd3, 0xf3, 0xc3, 0x4f, 0x54)) }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateSimple(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.UI.Color, Windows.UI.Color)
    private func _n_CreateSimple(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ startColor : _q_CWindows_CUI_CColor, _ endColor : _q_CWindows_CUI_CColor, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSimple(pThis, resourceCreator, startColor, endColor, __presult))
        }
    }
    public func CreateSimple(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColor : Windows.UI.Color, endColor : Windows.UI.Color) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateSimple(RawPointer(resourceCreator), startColor, endColor, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateWithStops(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[])
    private func _n_CreateWithStops(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithStops(pThis, resourceCreator, gradientStopsLength, gradientStops, __presult))
        }
    }
    public func CreateWithStops(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateWithStops(RawPointer(resourceCreator), gradientStopsLength, gradientStops, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateWithEdgeBehaviorAndAlphaMode(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_CreateWithEdgeBehaviorAndAlphaMode(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndAlphaMode(pThis, resourceCreator, gradientStopsLength, gradientStops, edgeBehavior, alphaMode, __presult))
        }
    }
    public func CreateWithEdgeBehaviorAndAlphaMode(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateWithEdgeBehaviorAndAlphaMode(RawPointer(resourceCreator), gradientStopsLength, gradientStops, edgeBehavior, alphaMode, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateWithEdgeBehaviorAndInterpolationOptions(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasBufferPrecision)
    private func _n_CreateWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ preInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ postInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ bufferPrecision : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndInterpolationOptions(pThis, resourceCreator, gradientStopsLength, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, __presult))
        }
    }
    public func CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateWithEdgeBehaviorAndInterpolationOptions(RawPointer(resourceCreator), gradientStopsLength, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
} // ICanvasLinearGradientBrushFactory


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrushStatics
// interface type
open class ICanvasLinearGradientBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe9de3392, Data2: 0x8fbf, Data3 : 0x478c, Data4 : (0x8e, 0x6a, 0xd0, 0xa0, 0xea, 0x75, 0x3b, 0x37)) }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.Foundation.Numerics.Vector4, Windows.Foundation.Numerics.Vector4)
    private func _n_CreateHdrSimple(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ startColorHdr : _q_CWindows_CFoundation_CNumerics_CVector4, _ endColorHdr : _q_CWindows_CFoundation_CNumerics_CVector4, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrSimple(pThis, resourceCreator, startColorHdr, endColorHdr, __presult))
        }
    }
    public func CreateHdrSimple(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColorHdr : Windows.Foundation.Numerics.Vector4, endColorHdr : Windows.Foundation.Numerics.Vector4) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateHdrSimple(RawPointer(resourceCreator), startColorHdr, endColorHdr, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[])
    private func _n_CreateHdrWithStops(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsHdrLength : UINT32, _ gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithStops(pThis, resourceCreator, gradientStopsHdrLength, gradientStopsHdr, __presult))
        }
    }
    public func CreateHdrWithStops(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsHdrLength : UINT32, gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateHdrWithStops(RawPointer(resourceCreator), gradientStopsHdrLength, gradientStopsHdr, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_CreateHdrWithEdgeBehaviorAndAlphaMode(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsHdrLength : UINT32, _ gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndAlphaMode(pThis, resourceCreator, gradientStopsHdrLength, gradientStopsHdr, edgeBehavior, alphaMode, __presult))
        }
    }
    public func CreateHdrWithEdgeBehaviorAndAlphaMode(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsHdrLength : UINT32, gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateHdrWithEdgeBehaviorAndAlphaMode(RawPointer(resourceCreator), gradientStopsHdrLength, gradientStopsHdr, edgeBehavior, alphaMode, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasBufferPrecision)
    private func _n_CreateHdrWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsHdrLength : UINT32, _ gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ preInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ postInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ bufferPrecision : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndInterpolationOptions(pThis, resourceCreator, gradientStopsHdrLength, gradientStopsHdr, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, __presult))
        }
    }
    public func CreateHdrWithEdgeBehaviorAndInterpolationOptions(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsHdrLength : UINT32, gradientStopsHdr : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateHdrWithEdgeBehaviorAndInterpolationOptions(RawPointer(resourceCreator), gradientStopsHdrLength, gradientStopsHdr, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush CreateRainbow(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.Single)
    private func _n_CreateRainbow(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ eldritchness : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRainbow(pThis, resourceCreator, eldritchness, __presult))
        }
    }
    public func CreateRainbow(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, eldritchness : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush>> = nil;
        try self._n_CreateRainbow(RawPointer(resourceCreator), eldritchness, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasLinearGradientBrush(consuming: __result);
    }
} // ICanvasLinearGradientBrushStatics


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush
// interface type
open class ICanvasRadialGradientBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4d27d756, Data2: 0x14a9, Data3 : 0x4eb7, Data4 : (0x97, 0x3f, 0xe6, 0x61, 0x4d, 0x4f, 0x89, 0xe7)) }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_Center()
    private func _n_get_Center(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Center(pThis, __presult))
        }
    }
    public func get_Center() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_Center(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Center(Windows.Foundation.Numerics.Vector2)
    private func _n_put_Center(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Center(pThis, value))
        }
    }
    public func put_Center(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_Center(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_OriginOffset()
    private func _n_get_OriginOffset(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OriginOffset(pThis, __presult))
        }
    }
    public func get_OriginOffset() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_OriginOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OriginOffset(Windows.Foundation.Numerics.Vector2)
    private func _n_put_OriginOffset(_ value : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OriginOffset(pThis, value))
        }
    }
    public func put_OriginOffset(value : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_put_OriginOffset(value);
    }
    // [IsSpecialName] System.Single get_RadiusX()
    private func _n_get_RadiusX(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RadiusX(pThis, __presult))
        }
    }
    public func get_RadiusX() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_RadiusX(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RadiusX(System.Single)
    private func _n_put_RadiusX(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RadiusX(pThis, value))
        }
    }
    public func put_RadiusX(value : Swift.Float) throws -> Void {
        try self._n_put_RadiusX(value);
    }
    // [IsSpecialName] System.Single get_RadiusY()
    private func _n_get_RadiusY(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RadiusY(pThis, __presult))
        }
    }
    public func get_RadiusY() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_RadiusY(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RadiusY(System.Single)
    private func _n_put_RadiusY(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RadiusY(pThis, value))
        }
    }
    public func put_RadiusY(value : Swift.Float) throws -> Void {
        try self._n_put_RadiusY(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[] get_Stops()
    private func _n_get_Stops(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stops(pThis, __presultLength, __presult))
        }
    }
    public func get_Stops() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>> = nil;
        try self._n_get_Stops(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[] get_StopsHdr()
    private func _n_get_StopsHdr(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StopsHdr(pThis, __presultLength, __presult))
        }
    }
    public func get_StopsHdr() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>> = nil;
        try self._n_get_StopsHdr(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasEdgeBehavior get_EdgeBehavior()
    private func _n_get_EdgeBehavior(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EdgeBehavior(pThis, __presult))
        }
    }
    public func get_EdgeBehavior() throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp;
        try self._n_get_EdgeBehavior(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasColorSpace get_PreInterpolationSpace()
    private func _n_get_PreInterpolationSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreInterpolationSpace(pThis, __presult))
        }
    }
    public func get_PreInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Custom;
        try self._n_get_PreInterpolationSpace(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasColorSpace get_PostInterpolationSpace()
    private func _n_get_PostInterpolationSpace(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PostInterpolationSpace(pThis, __presult))
        }
    }
    public func get_PostInterpolationSpace() throws -> Microsoft.Graphics.Canvas.CanvasColorSpace {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Custom;
        try self._n_get_PostInterpolationSpace(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasBufferPrecision get_BufferPrecision()
    private func _n_get_BufferPrecision(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferPrecision(pThis, __presult))
        }
    }
    public func get_BufferPrecision() throws -> Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision = _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalized;
        try self._n_get_BufferPrecision(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasAlphaMode get_AlphaMode()
    private func _n_get_AlphaMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, __presult))
        }
    }
    public func get_AlphaMode() throws -> Microsoft.Graphics.Canvas.CanvasAlphaMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied;
        try self._n_get_AlphaMode(&__result);
        return __result;
    }
    public var AlphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode {
        get throws {
            return try get_AlphaMode();
        }
    }
    public var BufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision {
        get throws {
            return try get_BufferPrecision();
        }
    }
    public var Center : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_Center();
        }
    }
    public var EdgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        get throws {
            return try get_EdgeBehavior();
        }
    }
    public var OriginOffset : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_OriginOffset();
        }
    }
    public var PostInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
            return try get_PostInterpolationSpace();
        }
    }
    public var PreInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace {
        get throws {
            return try get_PreInterpolationSpace();
        }
    }
    public var RadiusX : Swift.Float {
        get throws {
            return try get_RadiusX();
        }
    }
    public var RadiusY : Swift.Float {
        get throws {
            return try get_RadiusY();
        }
    }
    public var Stops : UINT32 {
        get throws {
            return try get_Stops();
        }
    }
    public var StopsHdr : UINT32 {
        get throws {
            return try get_StopsHdr();
        }
    }
} // ICanvasRadialGradientBrush


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasRadialGradientBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7933a51f, Data2: 0xa910, Data3 : 0x4548, Data4 : (0x84, 0x9f, 0x42, 0xdd, 0xec, 0x46, 0x6f, 0x41)) }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateSimple(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.UI.Color, Windows.UI.Color)
    private func _n_CreateSimple(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ startColor : _q_CWindows_CUI_CColor, _ endColor : _q_CWindows_CUI_CColor, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSimple(pThis, resourceCreator, startColor, endColor, __presult))
        }
    }
    public func CreateSimple(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColor : Windows.UI.Color, endColor : Windows.UI.Color) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateSimple(RawPointer(resourceCreator), startColor, endColor, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateWithStops(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[])
    private func _n_CreateWithStops(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithStops(pThis, resourceCreator, gradientStopsLength, gradientStops, __presult))
        }
    }
    public func CreateWithStops(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateWithStops(RawPointer(resourceCreator), gradientStopsLength, gradientStops, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateWithEdgeBehaviorAndAlphaMode(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_CreateWithEdgeBehaviorAndAlphaMode(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndAlphaMode(pThis, resourceCreator, gradientStopsLength, gradientStops, edgeBehavior, alphaMode, __presult))
        }
    }
    public func CreateWithEdgeBehaviorAndAlphaMode(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateWithEdgeBehaviorAndAlphaMode(RawPointer(resourceCreator), gradientStopsLength, gradientStops, edgeBehavior, alphaMode, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateWithEdgeBehaviorAndInterpolationOptions(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStop[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasBufferPrecision)
    private func _n_CreateWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ preInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ postInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ bufferPrecision : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndInterpolationOptions(pThis, resourceCreator, gradientStopsLength, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, __presult))
        }
    }
    public func CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateWithEdgeBehaviorAndInterpolationOptions(RawPointer(resourceCreator), gradientStopsLength, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
} // ICanvasRadialGradientBrushFactory


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrushStatics
// interface type
open class ICanvasRadialGradientBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3b0d4dae, Data2: 0x3e21, Data3 : 0x4818, Data4 : (0x99, 0xb4, 0x77, 0x9a, 0xca, 0xaf, 0x18, 0xbe)) }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.Foundation.Numerics.Vector4, Windows.Foundation.Numerics.Vector4)
    private func _n_CreateHdrSimple(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ startColorHdr : _q_CWindows_CFoundation_CNumerics_CVector4, _ endColorHdr : _q_CWindows_CFoundation_CNumerics_CVector4, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrSimple(pThis, resourceCreator, startColorHdr, endColorHdr, __presult))
        }
    }
    public func CreateHdrSimple(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, startColorHdr : Windows.Foundation.Numerics.Vector4, endColorHdr : Windows.Foundation.Numerics.Vector4) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateHdrSimple(RawPointer(resourceCreator), startColorHdr, endColorHdr, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[])
    private func _n_CreateHdrWithStops(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithStops(pThis, resourceCreator, gradientStopsLength, gradientStops, __presult))
        }
    }
    public func CreateHdrWithStops(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateHdrWithStops(RawPointer(resourceCreator), gradientStopsLength, gradientStops, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode)
    private func _n_CreateHdrWithEdgeBehaviorAndAlphaMode(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndAlphaMode(pThis, resourceCreator, gradientStopsLength, gradientStops, edgeBehavior, alphaMode, __presult))
        }
    }
    public func CreateHdrWithEdgeBehaviorAndAlphaMode(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateHdrWithEdgeBehaviorAndAlphaMode(RawPointer(resourceCreator), gradientStopsLength, gradientStops, edgeBehavior, alphaMode, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Microsoft.Graphics.Canvas.Brushes.CanvasGradientStopHdr[], Microsoft.Graphics.Canvas.CanvasEdgeBehavior, Microsoft.Graphics.Canvas.CanvasAlphaMode, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasColorSpace, Microsoft.Graphics.Canvas.CanvasBufferPrecision)
    private func _n_CreateHdrWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ gradientStopsLength : UINT32, _ gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, _ edgeBehavior : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior, _ alphaMode : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode, _ preInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ postInterpolationSpace : _q_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace, _ bufferPrecision : _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndInterpolationOptions(pThis, resourceCreator, gradientStopsLength, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, __presult))
        }
    }
    public func CreateHdrWithEdgeBehaviorAndInterpolationOptions(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, gradientStopsLength : UINT32, gradientStops : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr>>, edgeBehavior : Microsoft.Graphics.Canvas.CanvasEdgeBehavior, alphaMode : Microsoft.Graphics.Canvas.CanvasAlphaMode, preInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, postInterpolationSpace : Microsoft.Graphics.Canvas.CanvasColorSpace, bufferPrecision : Microsoft.Graphics.Canvas.CanvasBufferPrecision) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateHdrWithEdgeBehaviorAndInterpolationOptions(RawPointer(resourceCreator), gradientStopsLength, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush CreateRainbow(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.Single)
    private func _n_CreateRainbow(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ eldritchness : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRainbow(pThis, resourceCreator, eldritchness, __presult))
        }
    }
    public func CreateRainbow(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, eldritchness : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush>> = nil;
        try self._n_CreateRainbow(RawPointer(resourceCreator), eldritchness, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasRadialGradientBrush(consuming: __result);
    }
} // ICanvasRadialGradientBrushStatics


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush
// interface type
open class ICanvasSolidColorBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8bc30f87, Data2: 0xbad5, Data3 : 0x4871, Data4 : (0x88, 0xb8, 0x9f, 0xe3, 0xc6, 0x3d, 0x20, 0x4a)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector4 get_ColorHdr()
    private func _n_get_ColorHdr(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector4>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, __presult))
        }
    }
    public func get_ColorHdr() throws -> Windows.Foundation.Numerics.Vector4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector4 = _q_CWindows_CFoundation_CNumerics_CVector4(X: 0, Y: 0, Z: 0, W: 0);
        try self._n_get_ColorHdr(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColorHdr(Windows.Foundation.Numerics.Vector4)
    private func _n_put_ColorHdr(_ value : _q_CWindows_CFoundation_CNumerics_CVector4) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, value))
        }
    }
    public func put_ColorHdr(value : Windows.Foundation.Numerics.Vector4) throws -> Void {
        try self._n_put_ColorHdr(value);
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
    public var ColorHdr : Windows.Foundation.Numerics.Vector4 {
        get throws {
            return try get_ColorHdr();
        }
    }
} // ICanvasSolidColorBrush


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasSolidColorBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8abf4780, Data2: 0x4edd, Data3 : 0x4f2b, Data4 : (0xbf, 0x63, 0x2c, 0x38, 0x51, 0x15, 0xb2, 0x01)) }
    // Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush Create(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.UI.Color)
    private func _n_Create(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ color : _q_CWindows_CUI_CColor, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, resourceCreator, color, __presult))
        }
    }
    public func Create(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, color : Windows.UI.Color) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush>> = nil;
        try self._n_Create(RawPointer(resourceCreator), color, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush(consuming: __result);
    }
} // ICanvasSolidColorBrushFactory


// type: Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrushStatics
// interface type
open class ICanvasSolidColorBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x629b7244, Data2: 0x5b9e, Data3 : 0x4ef8, Data4 : (0x8e, 0x09, 0x26, 0x47, 0x14, 0x20, 0x1e, 0xe8)) }
    // Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush CreateHdr(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.Foundation.Numerics.Vector4)
    private func _n_CreateHdr(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ colorHdr : _q_CWindows_CFoundation_CNumerics_CVector4, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdr(pThis, resourceCreator, colorHdr, __presult))
        }
    }
    public func CreateHdr(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, colorHdr : Windows.Foundation.Numerics.Vector4) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush>> = nil;
        try self._n_CreateHdr(RawPointer(resourceCreator), colorHdr, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasSolidColorBrush(consuming: __result);
    }
} // ICanvasSolidColorBrushStatics


}
