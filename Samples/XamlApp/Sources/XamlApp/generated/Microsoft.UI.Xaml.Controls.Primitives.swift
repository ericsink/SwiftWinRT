// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import C;

extension Microsoft.UI.Xaml.Controls.Primitives {
// type: Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
// runtime class
open class ButtonBase
    :
    Microsoft.UI.Xaml.Controls.ContentControl
{
    private var _self : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase;
    public init(plok: Microsoft.UI.Xaml.Controls.Primitives.IButtonBase?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.Primitives.IButtonBase { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IButtonBaseFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IButtonBaseStatics {
        static var x : IButtonBaseStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase")
    }
    public static var ButtonBaseStatics : IButtonBaseStatics {
        _IButtonBaseStatics.x
    }
    public static func get_ClickModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.get_ClickModeProperty());
    }
    public static func get_IsPointerOverProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.get_IsPointerOverProperty());
    }
    public static func get_IsPressedProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.get_IsPressedProperty());
    }
    public static func get_CommandProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.get_CommandProperty());
    }
    public static func get_CommandParameterProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.get_CommandParameterProperty());
    }
    public static var ClickModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.ClickModeProperty);
        }
    }
    public static var CommandParameterProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.CommandParameterProperty);
        }
    }
    public static var CommandProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.CommandProperty);
        }
    }
    public static var IsPointerOverProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.IsPointerOverProperty);
        }
    }
    public static var IsPressedProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonBaseStatics.IsPressedProperty);
        }
    }
    public func get_ClickMode() throws -> Microsoft.UI.Xaml.Controls.ClickMode {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.get_ClickMode();
    }
    public func put_ClickMode(value : Microsoft.UI.Xaml.Controls.ClickMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.put_ClickMode(value: value);
    }
    public func get_IsPointerOver() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.get_IsPointerOver();
    }
    public func get_IsPressed() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.get_IsPressed();
    }
    public func get_Command() throws -> Optional<Microsoft.UI.Xaml.Input.ICommand> {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.get_Command();
    }
    public func put_Command(value : Optional<Microsoft.UI.Xaml.Input.ICommand>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.put_Command(value: value);
    }
    public func get_CommandParameter() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.get_CommandParameter();
    }
    public func put_CommandParameter(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.put_CommandParameter(value: value!.GetInterface());
    }
    public func add_Click(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.add_Click(handler: Microsoft.UI.Xaml.impl_RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_Click(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.remove_Click(token: token);
    }
    public var ClickMode : Microsoft.UI.Xaml.Controls.ClickMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.ClickMode;
        }
    }
    public var Command : Optional<Microsoft.UI.Xaml.Input.ICommand> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.Command;
        }
    }
    public var CommandParameter : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.CommandParameter;
        }
    }
    public var IsPointerOver : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.IsPointerOver;
        }
    }
    public var IsPressed : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IButtonBase = try _self.QueryInterface();
        return try _ifc.IsPressed;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
// runtime class
open class FlyoutBase
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase;
    public init(plok: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IFlyoutBaseFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics
    // method not needed: get_Placement
    // method not needed: put_Placement
    // method not needed: get_Target
    // method not needed: get_AllowFocusOnInteraction
    // method not needed: put_AllowFocusOnInteraction
    // method not needed: get_LightDismissOverlayMode
    // method not needed: put_LightDismissOverlayMode
    // method not needed: get_AllowFocusWhenDisabled
    // method not needed: put_AllowFocusWhenDisabled
    // method not needed: get_ShowMode
    // method not needed: put_ShowMode
    // method not needed: get_InputDevicePrefersPrimaryCommands
    // method not needed: get_AreOpenCloseAnimationsEnabled
    // method not needed: put_AreOpenCloseAnimationsEnabled
    // method not needed: get_ShouldConstrainToRootBounds
    // method not needed: put_ShouldConstrainToRootBounds
    // method not needed: get_IsConstrainedToRootBounds
    // method not needed: get_ElementSoundMode
    // method not needed: put_ElementSoundMode
    // method not needed: get_OverlayInputPassThroughElement
    // method not needed: put_OverlayInputPassThroughElement
    // method not needed: get_IsOpen
    // method not needed: get_XamlRoot
    // method not needed: put_XamlRoot
    // method not needed: add_Opened
    // method not needed: remove_Opened
    // method not needed: add_Closed
    // method not needed: remove_Closed
    // method not needed: add_Opening
    // method not needed: remove_Opening
    // method not needed: add_Closing
    // method not needed: remove_Closing
    // method not needed: ShowAt
    // method not needed: ShowAt
    // method not needed: Hide
    // method not needed: TryInvokeKeyboardAccelerator
    // instance interface not needed: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides
}

// type: Microsoft.UI.Xaml.Controls.Primitives.IButtonBase
// interface type
open class IButtonBase
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x65714269, Data2: 0x2473, Data3 : 0x5327, Data4 : (0xa6, 0x52, 0x0e, 0xa6, 0xbc, 0xe7, 0xf4, 0x03)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.ClickMode get_ClickMode()
    private func _n_get_ClickMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CClickMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClickMode(pThis, __presult))
        }
    }
    public func get_ClickMode() throws -> Microsoft.UI.Xaml.Controls.ClickMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CClickMode = _q_CMicrosoft_CUI_CXaml_CControls_CClickMode_Release;
        try self._n_get_ClickMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ClickMode(Microsoft.UI.Xaml.Controls.ClickMode)
    private func _n_put_ClickMode(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CClickMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClickMode(pThis, value))
        }
    }
    public func put_ClickMode(value : Microsoft.UI.Xaml.Controls.ClickMode) throws -> Void {
        try self._n_put_ClickMode(value);
    }
    // [IsSpecialName] bool get_IsPointerOver()
    private func _n_get_IsPointerOver(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPointerOver(pThis, __presult))
        }
    }
    public func get_IsPointerOver() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsPointerOver(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsPressed()
    private func _n_get_IsPressed(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPressed(pThis, __presult))
        }
    }
    public func get_IsPressed() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsPressed(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.ICommand get_Command()
    private func _n_get_Command(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CICommand>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Command(pThis, __presult))
        }
    }
    public func get_Command() throws -> Optional<Microsoft.UI.Xaml.Input.ICommand> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CICommand>> = nil;
        try self._n_get_Command(&__result);
        return Microsoft.UI.Xaml.Input.ICommand(consuming: __result);
    }
    // [IsSpecialName] void put_Command(Microsoft.UI.Xaml.Input.ICommand)
    private func _n_put_Command(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CICommand>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Command(pThis, value))
        }
    }
    public func put_Command(value : Optional<Microsoft.UI.Xaml.Input.ICommand>) throws -> Void {
        try self._n_put_Command(RawPointer(value));
    }
    // [IsSpecialName] System.Object get_CommandParameter()
    private func _n_get_CommandParameter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameter(pThis, __presult))
        }
    }
    public func get_CommandParameter() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_CommandParameter(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_CommandParameter(System.Object)
    private func _n_put_CommandParameter(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommandParameter(pThis, value))
        }
    }
    public func put_CommandParameter(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_CommandParameter(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Click(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_Click(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Click(pThis, handler, __presult))
        }
    }
    public func add_Click(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Click(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Click(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Click(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Click(pThis, token))
        }
    }
    public func remove_Click(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Click(token);
    }
    public var ClickMode : Microsoft.UI.Xaml.Controls.ClickMode {
        get throws {
            return try get_ClickMode();
        }
    }
    public var Command : Optional<Microsoft.UI.Xaml.Input.ICommand> {
        get throws {
            return try get_Command();
        }
    }
    public var CommandParameter : Optional<WinRT.IInspectable> {
        get throws {
            return try get_CommandParameter();
        }
    }
    public var IsPointerOver : boolean {
        get throws {
            return try get_IsPointerOver();
        }
    }
    public var IsPressed : boolean {
        get throws {
            return try get_IsPressed();
        }
    }
} // IButtonBase


// type: Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactory
// interface type
// COMPOSITION INTERFACE
open class IButtonBaseFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x21251aa9, Data2: 0x6fd1, Data3 : 0x5e51, Data4 : (0xab, 0x3b, 0xe6, 0xfc, 0xaf, 0x33, 0x95, 0xed)) }
    // Microsoft.UI.Xaml.Controls.Primitives.ButtonBase CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.IButtonBase> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.Primitives.IButtonBase(consuming: __result);
    }
} // IButtonBaseFactory


// type: Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStatics
// interface type
open class IButtonBaseStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdbe812f6, Data2: 0xadf8, Data3 : 0x51d3, Data4 : (0x81, 0x37, 0xa8, 0xfb, 0xf6, 0x44, 0x5b, 0x3c)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ClickModeProperty()
    private func _n_get_ClickModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClickModeProperty(pThis, __presult))
        }
    }
    public func get_ClickModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ClickModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsPointerOverProperty()
    private func _n_get_IsPointerOverProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPointerOverProperty(pThis, __presult))
        }
    }
    public func get_IsPointerOverProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsPointerOverProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsPressedProperty()
    private func _n_get_IsPressedProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPressedProperty(pThis, __presult))
        }
    }
    public func get_IsPressedProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsPressedProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CommandProperty()
    private func _n_get_CommandProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandProperty(pThis, __presult))
        }
    }
    public func get_CommandProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CommandProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CommandParameterProperty()
    private func _n_get_CommandParameterProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommandParameterProperty(pThis, __presult))
        }
    }
    public func get_CommandParameterProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CommandParameterProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ClickModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ClickModeProperty();
        }
    }
    public var CommandParameterProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CommandParameterProperty();
        }
    }
    public var CommandProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CommandProperty();
        }
    }
    public var IsPointerOverProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsPointerOverProperty();
        }
    }
    public var IsPressedProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsPressedProperty();
        }
    }
} // IButtonBaseStatics


// type: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase
// interface type
open class IFlyoutBase
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbb6603bf, Data2: 0x744d, Data3 : 0x5c31, Data4 : (0xa8, 0x7d, 0x74, 0x43, 0x94, 0x63, 0x4d, 0x77)) }
// method not needed: get_Placement
// method not needed: put_Placement
// method not needed: get_Target
// method not needed: get_AllowFocusOnInteraction
// method not needed: put_AllowFocusOnInteraction
// method not needed: get_LightDismissOverlayMode
// method not needed: put_LightDismissOverlayMode
// method not needed: get_AllowFocusWhenDisabled
// method not needed: put_AllowFocusWhenDisabled
// method not needed: get_ShowMode
// method not needed: put_ShowMode
// method not needed: get_InputDevicePrefersPrimaryCommands
// method not needed: get_AreOpenCloseAnimationsEnabled
// method not needed: put_AreOpenCloseAnimationsEnabled
// method not needed: get_ShouldConstrainToRootBounds
// method not needed: put_ShouldConstrainToRootBounds
// method not needed: get_IsConstrainedToRootBounds
// method not needed: get_ElementSoundMode
// method not needed: put_ElementSoundMode
// method not needed: get_OverlayInputPassThroughElement
// method not needed: put_OverlayInputPassThroughElement
// method not needed: get_IsOpen
// method not needed: get_XamlRoot
// method not needed: put_XamlRoot
// method not needed: add_Opened
// method not needed: remove_Opened
// method not needed: add_Closed
// method not needed: remove_Closed
// method not needed: add_Opening
// method not needed: remove_Opening
// method not needed: add_Closing
// method not needed: remove_Closing
// method not needed: ShowAt
// method not needed: ShowAtWithOptions
// method not needed: Hide
// method not needed: TryInvokeKeyboardAccelerator
} // IFlyoutBase


// type: Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory
// interface type
// COMPOSITION INTERFACE
open class IFlyoutBaseFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x006d738f, Data2: 0x7c91, Data3 : 0x5ef3, Data4 : (0x8a, 0x80, 0xa5, 0x48, 0x10, 0x8d, 0xab, 0x8b)) }
    // Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase(consuming: __result);
    }
} // IFlyoutBaseFactory


// type: Microsoft.UI.Xaml.Controls.Primitives.IRangeBase
// interface type
open class IRangeBase
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x540d6d61, Data2: 0x8fac, Data3 : 0x5d5c, Data4 : (0xb5, 0xb0, 0xe1, 0x72, 0xa7, 0xdd, 0xe1, 0x03)) }
    // [IsSpecialName] System.Double get_Minimum()
    private func _n_get_Minimum(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Minimum(pThis, __presult))
        }
    }
    public func get_Minimum() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Minimum(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Minimum(System.Double)
    private func _n_put_Minimum(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Minimum(pThis, value))
        }
    }
    public func put_Minimum(value : Swift.Double) throws -> Void {
        try self._n_put_Minimum(value);
    }
    // [IsSpecialName] System.Double get_Maximum()
    private func _n_get_Maximum(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Maximum(pThis, __presult))
        }
    }
    public func get_Maximum() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Maximum(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Maximum(System.Double)
    private func _n_put_Maximum(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Maximum(pThis, value))
        }
    }
    public func put_Maximum(value : Swift.Double) throws -> Void {
        try self._n_put_Maximum(value);
    }
    // [IsSpecialName] System.Double get_SmallChange()
    private func _n_get_SmallChange(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmallChange(pThis, __presult))
        }
    }
    public func get_SmallChange() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_SmallChange(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SmallChange(System.Double)
    private func _n_put_SmallChange(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SmallChange(pThis, value))
        }
    }
    public func put_SmallChange(value : Swift.Double) throws -> Void {
        try self._n_put_SmallChange(value);
    }
    // [IsSpecialName] System.Double get_LargeChange()
    private func _n_get_LargeChange(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LargeChange(pThis, __presult))
        }
    }
    public func get_LargeChange() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_LargeChange(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LargeChange(System.Double)
    private func _n_put_LargeChange(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LargeChange(pThis, value))
        }
    }
    public func put_LargeChange(value : Swift.Double) throws -> Void {
        try self._n_put_LargeChange(value);
    }
    // [IsSpecialName] System.Double get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Value(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Value(System.Double)
    private func _n_put_Value(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
        }
    }
    public func put_Value(value : Swift.Double) throws -> Void {
        try self._n_put_Value(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ValueChanged(Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler)
    private func _n_add_ValueChanged(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ValueChanged(pThis, handler, __presult))
        }
    }
    public func add_ValueChanged(handler : Optional<Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ValueChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ValueChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ValueChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ValueChanged(pThis, token))
        }
    }
    public func remove_ValueChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ValueChanged(token);
    }
    public var LargeChange : Swift.Double {
        get throws {
            return try get_LargeChange();
        }
    }
    public var Maximum : Swift.Double {
        get throws {
            return try get_Maximum();
        }
    }
    public var Minimum : Swift.Double {
        get throws {
            return try get_Minimum();
        }
    }
    public var SmallChange : Swift.Double {
        get throws {
            return try get_SmallChange();
        }
    }
    public var Value : Swift.Double {
        get throws {
            return try get_Value();
        }
    }
} // IRangeBase


// type: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseFactory
// interface type
// COMPOSITION INTERFACE
open class IRangeBaseFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x41c205e2, Data2: 0x4422, Data3 : 0x5dca, Data4 : (0x9b, 0x49, 0xe3, 0x12, 0x10, 0xea, 0x39, 0x6c)) }
    // Microsoft.UI.Xaml.Controls.Primitives.RangeBase CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.IRangeBase> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.Primitives.IRangeBase(consuming: __result);
    }
} // IRangeBaseFactory


// type: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides
// interface type
open class IRangeBaseOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb3deb76f, Data2: 0x68a6, Data3 : 0x5c14, Data4 : (0xa8, 0x24, 0xab, 0x58, 0xe8, 0x77, 0x47, 0x45)) }
    // void OnMinimumChanged(System.Double, System.Double)
    private func _n_OnMinimumChanged(_ oldMinimum : DOUBLE, _ newMinimum : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnMinimumChanged(pThis, oldMinimum, newMinimum))
        }
    }
    public func OnMinimumChanged(oldMinimum : Swift.Double, newMinimum : Swift.Double) throws -> Void {
        try self._n_OnMinimumChanged(oldMinimum, newMinimum);
    }
    // void OnMaximumChanged(System.Double, System.Double)
    private func _n_OnMaximumChanged(_ oldMaximum : DOUBLE, _ newMaximum : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnMaximumChanged(pThis, oldMaximum, newMaximum))
        }
    }
    public func OnMaximumChanged(oldMaximum : Swift.Double, newMaximum : Swift.Double) throws -> Void {
        try self._n_OnMaximumChanged(oldMaximum, newMaximum);
    }
    // void OnValueChanged(System.Double, System.Double)
    private func _n_OnValueChanged(_ oldValue : DOUBLE, _ newValue : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnValueChanged(pThis, oldValue, newValue))
        }
    }
    public func OnValueChanged(oldValue : Swift.Double, newValue : Swift.Double) throws -> Void {
        try self._n_OnValueChanged(oldValue, newValue);
    }
} // IRangeBaseOverrides


// type: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStatics
// interface type
open class IRangeBaseStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4aed5e49, Data2: 0x64ec, Data3 : 0x56f1, Data4 : (0x87, 0x4d, 0xb8, 0xc0, 0xf8, 0x3f, 0x9a, 0xc8)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MinimumProperty()
    private func _n_get_MinimumProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinimumProperty(pThis, __presult))
        }
    }
    public func get_MinimumProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MinimumProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MaximumProperty()
    private func _n_get_MaximumProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumProperty(pThis, __presult))
        }
    }
    public func get_MaximumProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MaximumProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SmallChangeProperty()
    private func _n_get_SmallChangeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmallChangeProperty(pThis, __presult))
        }
    }
    public func get_SmallChangeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SmallChangeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_LargeChangeProperty()
    private func _n_get_LargeChangeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LargeChangeProperty(pThis, __presult))
        }
    }
    public func get_LargeChangeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_LargeChangeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ValueProperty()
    private func _n_get_ValueProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ValueProperty(pThis, __presult))
        }
    }
    public func get_ValueProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ValueProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var LargeChangeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_LargeChangeProperty();
        }
    }
    public var MaximumProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MaximumProperty();
        }
    }
    public var MinimumProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MinimumProperty();
        }
    }
    public var SmallChangeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SmallChangeProperty();
        }
    }
    public var ValueProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ValueProperty();
        }
    }
} // IRangeBaseStatics


// type: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs
// interface type
open class IRangeBaseValueChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb0181692, Data2: 0x9578, Data3 : 0x51c7, Data4 : (0x9d, 0x1c, 0xad, 0xfc, 0xf8, 0x94, 0x5a, 0xa9)) }
// method not needed: get_OldValue
// method not needed: get_NewValue
} // IRangeBaseValueChangedEventArgs


// type: Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo
// interface type
open class IScrollSnapPointsInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd3ea6e09, Data2: 0xecf7, Data3 : 0x51a8, Data4 : (0xbd, 0x54, 0xfc, 0x84, 0xb9, 0x65, 0x37, 0x66)) }
    // [IsSpecialName] bool get_AreHorizontalSnapPointsRegular()
    private func _n_get_AreHorizontalSnapPointsRegular(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreHorizontalSnapPointsRegular(pThis, __presult))
        }
    }
    public func get_AreHorizontalSnapPointsRegular() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AreHorizontalSnapPointsRegular(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_AreVerticalSnapPointsRegular()
    private func _n_get_AreVerticalSnapPointsRegular(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreVerticalSnapPointsRegular(pThis, __presult))
        }
    }
    public func get_AreVerticalSnapPointsRegular() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AreVerticalSnapPointsRegular(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_HorizontalSnapPointsChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_HorizontalSnapPointsChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_HorizontalSnapPointsChanged(pThis, handler, __presult))
        }
    }
    public func add_HorizontalSnapPointsChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_HorizontalSnapPointsChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_HorizontalSnapPointsChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_HorizontalSnapPointsChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_HorizontalSnapPointsChanged(pThis, token))
        }
    }
    public func remove_HorizontalSnapPointsChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_HorizontalSnapPointsChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_VerticalSnapPointsChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_VerticalSnapPointsChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_VerticalSnapPointsChanged(pThis, handler, __presult))
        }
    }
    public func add_VerticalSnapPointsChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_VerticalSnapPointsChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_VerticalSnapPointsChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_VerticalSnapPointsChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VerticalSnapPointsChanged(pThis, token))
        }
    }
    public func remove_VerticalSnapPointsChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_VerticalSnapPointsChanged(token);
    }
    // Windows.Foundation.Collections.IVectorView<System.Single> GetIrregularSnapPoints(Microsoft.UI.Xaml.Controls.Orientation, Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment)
    private func _n_GetIrregularSnapPoints(_ orientation : _q_CMicrosoft_CUI_CXaml_CControls_COrientation, _ alignment : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIrregularSnapPoints(pThis, orientation, alignment, __presult))
        }
    }
    public func GetIrregularSnapPoints(orientation : Microsoft.UI.Xaml.Controls.Orientation, alignment : Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment) throws -> Optional<ClosedGenerics.IVectorView_1_FLOAT> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT>> = nil;
        try self._n_GetIrregularSnapPoints(orientation, alignment, &__result);
        return ClosedGenerics.IVectorView_1_FLOAT(consuming: __result);
    }
    // System.Single GetRegularSnapPoints(Microsoft.UI.Xaml.Controls.Orientation, Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment, ref System.Single)
    private func _n_GetRegularSnapPoints(_ orientation : _q_CMicrosoft_CUI_CXaml_CControls_COrientation, _ alignment : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment, _ offset : UnsafeMutablePointer<FLOAT>, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRegularSnapPoints(pThis, orientation, alignment, offset, __presult))
        }
    }
    public func GetRegularSnapPoints(orientation : Microsoft.UI.Xaml.Controls.Orientation, alignment : Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment, offset : inout Swift.Float) throws -> Swift.Float {
        var __result : FLOAT = 0;
            var _tmp_out_offset: FLOAT = 0;
        try self._n_GetRegularSnapPoints(orientation, alignment, &_tmp_out_offset, &__result);
            offset = _tmp_out_offset;
        return __result;
    }
    public var AreHorizontalSnapPointsRegular : boolean {
        get throws {
            return try get_AreHorizontalSnapPointsRegular();
        }
    }
    public var AreVerticalSnapPointsRegular : boolean {
        get throws {
            return try get_AreVerticalSnapPointsRegular();
        }
    }
} // IScrollSnapPointsInfo


// type: Microsoft.UI.Xaml.Controls.Primitives.RangeBase
// runtime class
open class RangeBase
    :
    Microsoft.UI.Xaml.Controls.Control
{
    private var _self : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase;
    public init(plok: Microsoft.UI.Xaml.Controls.Primitives.IRangeBase?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.Primitives.IRangeBase { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IRangeBaseFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.RangeBase");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IRangeBaseStatics {
        static var x : IRangeBaseStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Primitives.RangeBase")
    }
    public static var RangeBaseStatics : IRangeBaseStatics {
        _IRangeBaseStatics.x
    }
    public static func get_MinimumProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.get_MinimumProperty());
    }
    public static func get_MaximumProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.get_MaximumProperty());
    }
    public static func get_SmallChangeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.get_SmallChangeProperty());
    }
    public static func get_LargeChangeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.get_LargeChangeProperty());
    }
    public static func get_ValueProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.get_ValueProperty());
    }
    public static var LargeChangeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.LargeChangeProperty);
        }
    }
    public static var MaximumProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.MaximumProperty);
        }
    }
    public static var MinimumProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.MinimumProperty);
        }
    }
    public static var SmallChangeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.SmallChangeProperty);
        }
    }
    public static var ValueProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: RangeBaseStatics.ValueProperty);
        }
    }
    public func get_Minimum() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.get_Minimum();
    }
    public func put_Minimum(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.put_Minimum(value: value);
    }
    public func get_Maximum() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.get_Maximum();
    }
    public func put_Maximum(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.put_Maximum(value: value);
    }
    public func get_SmallChange() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.get_SmallChange();
    }
    public func put_SmallChange(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.put_SmallChange(value: value);
    }
    public func get_LargeChange() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.get_LargeChange();
    }
    public func put_LargeChange(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.put_LargeChange(value: value);
    }
    public func get_Value() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public func put_Value(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.put_Value(value: value);
    }
    public func add_ValueChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.add_ValueChanged(handler: Microsoft.UI.Xaml.Controls.Primitives.impl_RangeBaseValueChangedEventHandler(cb: handler).Interface());
    }
    public func remove_ValueChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.remove_ValueChanged(token: token);
    }
    public var LargeChange : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.LargeChange;
        }
    }
    public var Maximum : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.Maximum;
        }
    }
    public var Minimum : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.Minimum;
        }
    }
    public var SmallChange : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.SmallChange;
        }
    }
    public var Value : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IRangeBase = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
    // overridable method skipped: OnMinimumChanged
    // overridable method skipped: OnMaximumChanged
    // overridable method skipped: OnValueChanged
}

// type: Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs
// runtime class
public class RangeBaseValueChangedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs { return _self; }
    // method not needed: get_OldValue
    // method not needed: get_NewValue
}

// type: Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler
// delegate type
open class IRangeBaseValueChangedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x23f0e209, Data2: 0x9455, Data3 : 0x54cb, Data4 : (0xb8, 0xbc, 0x0b, 0x49, 0x55, 0x3c, 0x7d, 0xcc)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class impl_RangeBaseValueChangedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_RangeBaseValueChangedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_RangeBaseValueChangedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs>>) in
        guard let self = impl_RangeBaseValueChangedEventHandler.from_impl_RangeBaseValueChangedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs(plok: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_RangeBaseValueChangedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_RangeBaseValueChangedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> impl_RangeBaseValueChangedEventHandler? {
        return pUnk?.bindMemory(to: impl_RangeBaseValueChangedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_RangeBaseValueChangedEventHandler
{
    private var _self : Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventHandler;
    public init(plok: Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo
// enum type
public typealias SliderSnapsTo = _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo;

// type: Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment
// enum type
public typealias SnapPointsAlignment = _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment;

// type: Microsoft.UI.Xaml.Controls.Primitives.TickPlacement
// enum type
public typealias TickPlacement = _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement;

}
extension Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo {
    public static var StepValues : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo_StepValues;
        }
    }
    public static var Ticks : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo_Ticks;
        }
    }
}
extension Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment {
    public static var Near : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Near;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Center;
        }
    }
    public static var Far : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Far;
        }
    }
}
extension Microsoft.UI.Xaml.Controls.Primitives.TickPlacement {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_None;
        }
    }
    public static var TopLeft : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_TopLeft;
        }
    }
    public static var BottomRight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_BottomRight;
        }
    }
    public static var Outside : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_Outside;
        }
    }
    public static var Inline : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_Inline;
        }
    }
}
