// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.

// forward decls for delegates
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDragEventHandler _q_CMicrosoft_CUI_CXaml_CIDragEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler;
typedef struct _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler;
typedef struct _q_CWindows_CFoundation_CIAsyncActionCompletedHandler _q_CWindows_CFoundation_CIAsyncActionCompletedHandler;
// enums
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Straight = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Ignore = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Antialiased = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Aliased = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Auto = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Bmp = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Png = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Jpeg = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Tiff = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Gif = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_JpegXR = 6,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_SourceOver = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Copy = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Min = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Add = 3,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalized = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalizedSrgb = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16UIntNormalized = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16Float = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision32Float = 4,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOver = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOver = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceIn = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationIn = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOut = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOut = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceAtop = 6,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationAtop = 7,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Xor = 8,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Add = 9,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Copy = 10,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_BoundedCopy = 11,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_MaskInvert = 12,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Floor = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Round = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Ceiling = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Linear = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Cubic = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_MultiSampleLinear = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Anisotropic = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_HighQualityCubic = 5,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_InitializeFromBackground = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_IgnoreAlpha = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_ClampToSourceRect = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_Bitmap = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Dips = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Pixels = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_Aliased = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_Antialiased = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_AliasedAndInflated = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_NoPixelSnap = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Clip = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_EnableColorFont = 4,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Right = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Center = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Justified = 3,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Uniform = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Proportional = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_NoSideBearings = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Auto = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_ClearType = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Grayscale = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Aliased = 3,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenTopToBottom = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenBottomToTop = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenBottomToTop = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenLeftToRight = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenLeftToRight = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenRightToLeft = 6,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenRightToLeft = 7,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Disable = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Enable = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_Natural = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiClassic = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiNatural = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Aliased = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiClassic = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiNatural = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Natural = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetric = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Outline = 6,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetricDownsampled = 7,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Character = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Word = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_Ellipsis = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Bottom = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Center = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Stacked = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_NoWrap = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_EmergencyBreak = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_WholeWord = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Character = 4,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason_FirstTime = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason_NewDevice = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason_DpiChanged = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason;
typedef enum _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment
{
    _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_None = 0,
    _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_Auto = -1,
} _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment;
typedef enum _q_CMicrosoft_CUI_CXaml_CApplicationTheme
{
    _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Light = 0,
    _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Dark = 1,
} _q_CMicrosoft_CUI_CXaml_CApplicationTheme;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing
{
    _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_OuterBorderEdge = 1,
} _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_CClickMode
{
    _q_CMicrosoft_CUI_CXaml_CControls_CClickMode_Release = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_CClickMode_Press = 1,
    _q_CMicrosoft_CUI_CXaml_CControls_CClickMode_Hover = 2,
} _q_CMicrosoft_CUI_CXaml_CControls_CClickMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_COrientation
{
    _q_CMicrosoft_CUI_CXaml_CControls_COrientation_Vertical = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_COrientation_Horizontal = 1,
} _q_CMicrosoft_CUI_CXaml_CControls_COrientation;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation_Application = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation_Nested = 1,
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo_StepValues = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo_Ticks = 1,
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Near = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Center = 1,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment_Far = 2,
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_None = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_TopLeft = 1,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_BottomRight = 2,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_Outside = 3,
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_Inline = 4,
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement;
typedef enum _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer
{
    _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never = 0,
    _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenEngaged = 1,
    _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenFocused = 2,
} _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer;
typedef enum _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment
{
    _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_None = 0,
    _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Application = -2147483648,
    _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Auto = -1,
} _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment;
typedef enum _q_CMicrosoft_CUI_CXaml_CElementSoundMode
{
    _q_CMicrosoft_CUI_CXaml_CElementSoundMode_Default = 0,
    _q_CMicrosoft_CUI_CXaml_CElementSoundMode_FocusOnly = 1,
    _q_CMicrosoft_CUI_CXaml_CElementSoundMode_Off = 2,
} _q_CMicrosoft_CUI_CXaml_CElementSoundMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CElementTheme
{
    _q_CMicrosoft_CUI_CXaml_CElementTheme_Default = 0,
    _q_CMicrosoft_CUI_CXaml_CElementTheme_Light = 1,
    _q_CMicrosoft_CUI_CXaml_CElementTheme_Dark = 2,
} _q_CMicrosoft_CUI_CXaml_CElementTheme;
typedef enum _q_CMicrosoft_CUI_CXaml_CFlowDirection
{
    _q_CMicrosoft_CUI_CXaml_CFlowDirection_LeftToRight = 0,
    _q_CMicrosoft_CUI_CXaml_CFlowDirection_RightToLeft = 1,
} _q_CMicrosoft_CUI_CXaml_CFlowDirection;
typedef enum _q_CMicrosoft_CUI_CXaml_CFocusState
{
    _q_CMicrosoft_CUI_CXaml_CFocusState_Unfocused = 0,
    _q_CMicrosoft_CUI_CXaml_CFocusState_Pointer = 1,
    _q_CMicrosoft_CUI_CXaml_CFocusState_Keyboard = 2,
    _q_CMicrosoft_CUI_CXaml_CFocusState_Programmatic = 3,
} _q_CMicrosoft_CUI_CXaml_CFocusState;
typedef enum _q_CMicrosoft_CUI_CXaml_CFocusVisualKind
{
    _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_DottedLine = 0,
    _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_HighVisibility = 1,
    _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_Reveal = 2,
} _q_CMicrosoft_CUI_CXaml_CFocusVisualKind;
typedef enum _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment
{
    _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Left = 0,
    _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Center = 1,
    _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Right = 2,
    _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Stretch = 3,
} _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment;
typedef enum _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode
{
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Auto = 0,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Hidden = 1,
} _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode
{
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Local = 0,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Cycle = 1,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Once = 2,
} _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode
{
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Auto = 0,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Bottom = 1,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Top = 2,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Left = 3,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Right = 4,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Center = 5,
    _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Hidden = 6,
} _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes
{
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_None = 0,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateX = 1,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateY = 2,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateRailsX = 4,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateRailsY = 8,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_Rotate = 16,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_Scale = 32,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateInertia = 64,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_RotateInertia = 128,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_ScaleInertia = 256,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_All = 65535,
    _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_System = 65536,
} _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes;
typedef enum _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode
{
    _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Auto = 0,
    _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Enabled = 1,
    _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Disabled = 2,
} _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy
{
    _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto = 0,
    _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Projection = 1,
    _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_NavigationDirectionDistance = 2,
    _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_RectilinearDistance = 3,
} _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy;
typedef enum _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy
{
    _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_MaxHeight = 0,
    _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BlockLineHeight = 1,
    _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BaselineToBaseline = 2,
} _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX_Left = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX_Center = 1,
    _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX_Right = 2,
} _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY_Top = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY_Center = 1,
    _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY_Bottom = 2,
} _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_Absolute = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_RelativeToBoundingBox = 1,
} _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_ScRgbLinearInterpolation = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_SRgbLinearInterpolation = 1,
} _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_Inherit = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_SourceOver = 1,
    _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_MinBlend = 2,
} _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Pad = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Reflect = 1,
    _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Repeat = 2,
} _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions_None = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions_IgnoreImageCache = 8,
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType_Physical = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType_Logical = 1,
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType;
typedef enum _q_CMicrosoft_CUI_CXaml_CMedia_CStretch
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_None = 0,
    _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_Fill = 1,
    _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_Uniform = 2,
    _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_UniformToFill = 3,
} _q_CMicrosoft_CUI_CXaml_CMedia_CStretch;
typedef enum _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment
{
    _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_None = 0,
    _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_TrimSideBearings = 1,
} _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment;
typedef enum _q_CMicrosoft_CUI_CXaml_CTextAlignment
{
    _q_CMicrosoft_CUI_CXaml_CTextAlignment_Center = 0,
    _q_CMicrosoft_CUI_CXaml_CTextAlignment_Left = 1,
    _q_CMicrosoft_CUI_CXaml_CTextAlignment_Start = 1,
    _q_CMicrosoft_CUI_CXaml_CTextAlignment_Right = 2,
    _q_CMicrosoft_CUI_CXaml_CTextAlignment_End = 2,
    _q_CMicrosoft_CUI_CXaml_CTextAlignment_Justify = 3,
    _q_CMicrosoft_CUI_CXaml_CTextAlignment_DetectFromContent = 4,
} _q_CMicrosoft_CUI_CXaml_CTextAlignment;
typedef enum _q_CMicrosoft_CUI_CXaml_CTextLineBounds
{
    _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Full = 0,
    _q_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToCapHeight = 1,
    _q_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToBaseline = 2,
    _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Tight = 3,
} _q_CMicrosoft_CUI_CXaml_CTextLineBounds;
typedef enum _q_CMicrosoft_CUI_CXaml_CTextReadingOrder
{
    _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_Default = 0,
    _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_UseFlowDirection = 0,
    _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_DetectFromContent = 1,
} _q_CMicrosoft_CUI_CXaml_CTextReadingOrder;
typedef enum _q_CMicrosoft_CUI_CXaml_CTextTrimming
{
    _q_CMicrosoft_CUI_CXaml_CTextTrimming_None = 0,
    _q_CMicrosoft_CUI_CXaml_CTextTrimming_CharacterEllipsis = 1,
    _q_CMicrosoft_CUI_CXaml_CTextTrimming_WordEllipsis = 2,
    _q_CMicrosoft_CUI_CXaml_CTextTrimming_Clip = 3,
} _q_CMicrosoft_CUI_CXaml_CTextTrimming;
typedef enum _q_CMicrosoft_CUI_CXaml_CTextWrapping
{
    _q_CMicrosoft_CUI_CXaml_CTextWrapping_NoWrap = 1,
    _q_CMicrosoft_CUI_CXaml_CTextWrapping_Wrap = 2,
    _q_CMicrosoft_CUI_CXaml_CTextWrapping_WrapWholeWords = 3,
} _q_CMicrosoft_CUI_CXaml_CTextWrapping;
typedef enum _q_CMicrosoft_CUI_CXaml_CVerticalAlignment
{
    _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Top = 0,
    _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Center = 1,
    _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Bottom = 2,
    _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Stretch = 3,
} _q_CMicrosoft_CUI_CXaml_CVerticalAlignment;
typedef enum _q_CMicrosoft_CUI_CXaml_CVisibility
{
    _q_CMicrosoft_CUI_CXaml_CVisibility_Visible = 0,
    _q_CMicrosoft_CUI_CXaml_CVisibility_Collapsed = 1,
} _q_CMicrosoft_CUI_CXaml_CVisibility;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_NotPresent = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Discharging = 1,
    _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Idle = 2,
    _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Charging = 3,
} _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_Off = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_On = 1,
    _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_Dimmed = 2,
} _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_BatterySaver = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_BetterBattery = 1,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_Balanced = 2,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_HighPerformance = 3,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_MaxPerformance = 4,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_GameMode = 5,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_MixedReality = 6,
} _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Uninitialized = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Disabled = 1,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Off = 2,
    _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_On = 3,
} _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind_AC = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind_DC = 1,
} _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_NotPresent = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_Inadequate = 1,
    _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_Adequate = 2,
} _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_Uninitialized = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_Entering = 1,
    _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_AutoResume = 2,
    _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_ManualResume = 3,
} _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus;
typedef enum _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus_Present = 0,
    _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus_Absent = 1,
} _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus;
typedef enum _q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation
{
    _q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_None = 0,
    _q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_Copy = 1,
    _q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_Move = 2,
    _q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation_Link = 4,
} _q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation;
typedef enum _q_CWindows_CData_CXml_CDom_CNodeType
{
    _q_CWindows_CData_CXml_CDom_CNodeType_Invalid = 0,
    _q_CWindows_CData_CXml_CDom_CNodeType_ElementNode = 1,
    _q_CWindows_CData_CXml_CDom_CNodeType_AttributeNode = 2,
    _q_CWindows_CData_CXml_CDom_CNodeType_TextNode = 3,
    _q_CWindows_CData_CXml_CDom_CNodeType_DataSectionNode = 4,
    _q_CWindows_CData_CXml_CDom_CNodeType_EntityReferenceNode = 5,
    _q_CWindows_CData_CXml_CDom_CNodeType_EntityNode = 6,
    _q_CWindows_CData_CXml_CDom_CNodeType_ProcessingInstructionNode = 7,
    _q_CWindows_CData_CXml_CDom_CNodeType_CommentNode = 8,
    _q_CWindows_CData_CXml_CDom_CNodeType_DocumentNode = 9,
    _q_CWindows_CData_CXml_CDom_CNodeType_DocumentTypeNode = 10,
    _q_CWindows_CData_CXml_CDom_CNodeType_DocumentFragmentNode = 11,
    _q_CWindows_CData_CXml_CDom_CNodeType_NotationNode = 12,
} _q_CWindows_CData_CXml_CDom_CNodeType;
typedef enum _q_CWindows_CFoundation_CAsyncStatus
{
    _q_CWindows_CFoundation_CAsyncStatus_Canceled = 2,
    _q_CWindows_CFoundation_CAsyncStatus_Completed = 1,
    _q_CWindows_CFoundation_CAsyncStatus_Error = 3,
    _q_CWindows_CFoundation_CAsyncStatus_Started = 0,
} _q_CWindows_CFoundation_CAsyncStatus;
typedef enum _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat
{
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Unknown = 0,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32A32Typeless = 1,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32A32Float = 2,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32A32UInt = 3,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32A32Int = 4,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32Typeless = 5,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32Float = 6,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32UInt = 7,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32B32Int = 8,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16B16A16Typeless = 9,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16B16A16Float = 10,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16B16A16UIntNormalized = 11,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16B16A16UInt = 12,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16B16A16IntNormalized = 13,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16B16A16Int = 14,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32Typeless = 15,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32Float = 16,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32UInt = 17,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G32Int = 18,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32G8X24Typeless = 19,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_D32FloatS8X24UInt = 20,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32FloatX8X24Typeless = 21,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_X32TypelessG8X24UInt = 22,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R10G10B10A2Typeless = 23,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R10G10B10A2UIntNormalized = 24,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R10G10B10A2UInt = 25,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R11G11B10Float = 26,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8B8A8Typeless = 27,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8B8A8UIntNormalized = 28,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8B8A8UIntNormalizedSrgb = 29,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8B8A8UInt = 30,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8B8A8IntNormalized = 31,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8B8A8Int = 32,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16Typeless = 33,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16Float = 34,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16UIntNormalized = 35,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16UInt = 36,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16IntNormalized = 37,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16G16Int = 38,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32Typeless = 39,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_D32Float = 40,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32Float = 41,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32UInt = 42,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R32Int = 43,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R24G8Typeless = 44,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_D24UIntNormalizedS8UInt = 45,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R24UIntNormalizedX8Typeless = 46,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_X24TypelessG8UInt = 47,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8Typeless = 48,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8UIntNormalized = 49,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8UInt = 50,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8IntNormalized = 51,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8Int = 52,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16Typeless = 53,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16Float = 54,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_D16UIntNormalized = 55,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16UIntNormalized = 56,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16UInt = 57,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16IntNormalized = 58,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R16Int = 59,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8Typeless = 60,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8UIntNormalized = 61,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8UInt = 62,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8IntNormalized = 63,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8Int = 64,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_A8UIntNormalized = 65,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R1UIntNormalized = 66,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R9G9B9E5SharedExponent = 67,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R8G8B8G8UIntNormalized = 68,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_G8R8G8B8UIntNormalized = 69,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC1Typeless = 70,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC1UIntNormalized = 71,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC1UIntNormalizedSrgb = 72,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC2Typeless = 73,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC2UIntNormalized = 74,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC2UIntNormalizedSrgb = 75,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC3Typeless = 76,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC3UIntNormalized = 77,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC3UIntNormalizedSrgb = 78,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC4Typeless = 79,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC4UIntNormalized = 80,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC4IntNormalized = 81,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC5Typeless = 82,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC5UIntNormalized = 83,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC5IntNormalized = 84,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B5G6R5UIntNormalized = 85,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B5G5R5A1UIntNormalized = 86,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B8G8R8A8UIntNormalized = 87,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B8G8R8X8UIntNormalized = 88,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_R10G10B10XRBiasA2UIntNormalized = 89,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B8G8R8A8Typeless = 90,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B8G8R8A8UIntNormalizedSrgb = 91,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B8G8R8X8Typeless = 92,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B8G8R8X8UIntNormalizedSrgb = 93,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC6HTypeless = 94,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC6H16UnsignedFloat = 95,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC6H16Float = 96,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC7Typeless = 97,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC7UIntNormalized = 98,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_BC7UIntNormalizedSrgb = 99,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Ayuv = 100,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Y410 = 101,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Y416 = 102,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_NV12 = 103,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_P010 = 104,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_P016 = 105,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Opaque420 = 106,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Yuy2 = 107,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Y210 = 108,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_Y216 = 109,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_NV11 = 110,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_AI44 = 111,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_IA44 = 112,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_P8 = 113,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_A8P8 = 114,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_B4G4R4A4UIntNormalized = 115,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_P208 = 130,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_V208 = 131,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_V408 = 132,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_SamplerFeedbackMinMipOpaque = 189,
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat_SamplerFeedbackMipRegionUsedOpaque = 190,
} _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat;
typedef enum _q_CWindows_CGraphics_CImaging_CBitmapAlphaMode
{
    _q_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Premultiplied = 0,
    _q_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Straight = 1,
    _q_CWindows_CGraphics_CImaging_CBitmapAlphaMode_Ignore = 2,
} _q_CWindows_CGraphics_CImaging_CBitmapAlphaMode;
typedef enum _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat
{
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Unknown = 0,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Rgba16 = 12,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Rgba8 = 30,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Gray16 = 57,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Gray8 = 62,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Bgra8 = 87,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Nv12 = 103,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_P010 = 104,
    _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat_Yuy2 = 107,
} _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat;
typedef enum _q_CWindows_CSecurity_CCryptography_CBinaryStringEncoding
{
    _q_CWindows_CSecurity_CCryptography_CBinaryStringEncoding_Utf8 = 0,
    _q_CWindows_CSecurity_CCryptography_CBinaryStringEncoding_Utf16LE = 1,
    _q_CWindows_CSecurity_CCryptography_CBinaryStringEncoding_Utf16BE = 2,
} _q_CWindows_CSecurity_CCryptography_CBinaryStringEncoding;
typedef enum _q_CWindows_CSystem_CProfile_CSystemIdentificationSource
{
    _q_CWindows_CSystem_CProfile_CSystemIdentificationSource_None = 0,
    _q_CWindows_CSystem_CProfile_CSystemIdentificationSource_Tpm = 1,
    _q_CWindows_CSystem_CProfile_CSystemIdentificationSource_Uefi = 2,
    _q_CWindows_CSystem_CProfile_CSystemIdentificationSource_Registry = 3,
} _q_CWindows_CSystem_CProfile_CSystemIdentificationSource;
typedef enum _q_CWindows_CSystem_CVirtualKey
{
    _q_CWindows_CSystem_CVirtualKey_None = 0,
    _q_CWindows_CSystem_CVirtualKey_LeftButton = 1,
    _q_CWindows_CSystem_CVirtualKey_RightButton = 2,
    _q_CWindows_CSystem_CVirtualKey_Cancel = 3,
    _q_CWindows_CSystem_CVirtualKey_MiddleButton = 4,
    _q_CWindows_CSystem_CVirtualKey_XButton1 = 5,
    _q_CWindows_CSystem_CVirtualKey_XButton2 = 6,
    _q_CWindows_CSystem_CVirtualKey_Back = 8,
    _q_CWindows_CSystem_CVirtualKey_Tab = 9,
    _q_CWindows_CSystem_CVirtualKey_Clear = 12,
    _q_CWindows_CSystem_CVirtualKey_Enter = 13,
    _q_CWindows_CSystem_CVirtualKey_Shift = 16,
    _q_CWindows_CSystem_CVirtualKey_Control = 17,
    _q_CWindows_CSystem_CVirtualKey_Menu = 18,
    _q_CWindows_CSystem_CVirtualKey_Pause = 19,
    _q_CWindows_CSystem_CVirtualKey_CapitalLock = 20,
    _q_CWindows_CSystem_CVirtualKey_Kana = 21,
    _q_CWindows_CSystem_CVirtualKey_Hangul = 21,
    _q_CWindows_CSystem_CVirtualKey_ImeOn = 22,
    _q_CWindows_CSystem_CVirtualKey_Junja = 23,
    _q_CWindows_CSystem_CVirtualKey_Final = 24,
    _q_CWindows_CSystem_CVirtualKey_Hanja = 25,
    _q_CWindows_CSystem_CVirtualKey_Kanji = 25,
    _q_CWindows_CSystem_CVirtualKey_ImeOff = 26,
    _q_CWindows_CSystem_CVirtualKey_Escape = 27,
    _q_CWindows_CSystem_CVirtualKey_Convert = 28,
    _q_CWindows_CSystem_CVirtualKey_NonConvert = 29,
    _q_CWindows_CSystem_CVirtualKey_Accept = 30,
    _q_CWindows_CSystem_CVirtualKey_ModeChange = 31,
    _q_CWindows_CSystem_CVirtualKey_Space = 32,
    _q_CWindows_CSystem_CVirtualKey_PageUp = 33,
    _q_CWindows_CSystem_CVirtualKey_PageDown = 34,
    _q_CWindows_CSystem_CVirtualKey_End = 35,
    _q_CWindows_CSystem_CVirtualKey_Home = 36,
    _q_CWindows_CSystem_CVirtualKey_Left = 37,
    _q_CWindows_CSystem_CVirtualKey_Up = 38,
    _q_CWindows_CSystem_CVirtualKey_Right = 39,
    _q_CWindows_CSystem_CVirtualKey_Down = 40,
    _q_CWindows_CSystem_CVirtualKey_Select = 41,
    _q_CWindows_CSystem_CVirtualKey_Print = 42,
    _q_CWindows_CSystem_CVirtualKey_Execute = 43,
    _q_CWindows_CSystem_CVirtualKey_Snapshot = 44,
    _q_CWindows_CSystem_CVirtualKey_Insert = 45,
    _q_CWindows_CSystem_CVirtualKey_Delete = 46,
    _q_CWindows_CSystem_CVirtualKey_Help = 47,
    _q_CWindows_CSystem_CVirtualKey_Number0 = 48,
    _q_CWindows_CSystem_CVirtualKey_Number1 = 49,
    _q_CWindows_CSystem_CVirtualKey_Number2 = 50,
    _q_CWindows_CSystem_CVirtualKey_Number3 = 51,
    _q_CWindows_CSystem_CVirtualKey_Number4 = 52,
    _q_CWindows_CSystem_CVirtualKey_Number5 = 53,
    _q_CWindows_CSystem_CVirtualKey_Number6 = 54,
    _q_CWindows_CSystem_CVirtualKey_Number7 = 55,
    _q_CWindows_CSystem_CVirtualKey_Number8 = 56,
    _q_CWindows_CSystem_CVirtualKey_Number9 = 57,
    _q_CWindows_CSystem_CVirtualKey_A = 65,
    _q_CWindows_CSystem_CVirtualKey_B = 66,
    _q_CWindows_CSystem_CVirtualKey_C = 67,
    _q_CWindows_CSystem_CVirtualKey_D = 68,
    _q_CWindows_CSystem_CVirtualKey_E = 69,
    _q_CWindows_CSystem_CVirtualKey_F = 70,
    _q_CWindows_CSystem_CVirtualKey_G = 71,
    _q_CWindows_CSystem_CVirtualKey_H = 72,
    _q_CWindows_CSystem_CVirtualKey_I = 73,
    _q_CWindows_CSystem_CVirtualKey_J = 74,
    _q_CWindows_CSystem_CVirtualKey_K = 75,
    _q_CWindows_CSystem_CVirtualKey_L = 76,
    _q_CWindows_CSystem_CVirtualKey_M = 77,
    _q_CWindows_CSystem_CVirtualKey_N = 78,
    _q_CWindows_CSystem_CVirtualKey_O = 79,
    _q_CWindows_CSystem_CVirtualKey_P = 80,
    _q_CWindows_CSystem_CVirtualKey_Q = 81,
    _q_CWindows_CSystem_CVirtualKey_R = 82,
    _q_CWindows_CSystem_CVirtualKey_S = 83,
    _q_CWindows_CSystem_CVirtualKey_T = 84,
    _q_CWindows_CSystem_CVirtualKey_U = 85,
    _q_CWindows_CSystem_CVirtualKey_V = 86,
    _q_CWindows_CSystem_CVirtualKey_W = 87,
    _q_CWindows_CSystem_CVirtualKey_X = 88,
    _q_CWindows_CSystem_CVirtualKey_Y = 89,
    _q_CWindows_CSystem_CVirtualKey_Z = 90,
    _q_CWindows_CSystem_CVirtualKey_LeftWindows = 91,
    _q_CWindows_CSystem_CVirtualKey_RightWindows = 92,
    _q_CWindows_CSystem_CVirtualKey_Application = 93,
    _q_CWindows_CSystem_CVirtualKey_Sleep = 95,
    _q_CWindows_CSystem_CVirtualKey_NumberPad0 = 96,
    _q_CWindows_CSystem_CVirtualKey_NumberPad1 = 97,
    _q_CWindows_CSystem_CVirtualKey_NumberPad2 = 98,
    _q_CWindows_CSystem_CVirtualKey_NumberPad3 = 99,
    _q_CWindows_CSystem_CVirtualKey_NumberPad4 = 100,
    _q_CWindows_CSystem_CVirtualKey_NumberPad5 = 101,
    _q_CWindows_CSystem_CVirtualKey_NumberPad6 = 102,
    _q_CWindows_CSystem_CVirtualKey_NumberPad7 = 103,
    _q_CWindows_CSystem_CVirtualKey_NumberPad8 = 104,
    _q_CWindows_CSystem_CVirtualKey_NumberPad9 = 105,
    _q_CWindows_CSystem_CVirtualKey_Multiply = 106,
    _q_CWindows_CSystem_CVirtualKey_Add = 107,
    _q_CWindows_CSystem_CVirtualKey_Separator = 108,
    _q_CWindows_CSystem_CVirtualKey_Subtract = 109,
    _q_CWindows_CSystem_CVirtualKey_Decimal = 110,
    _q_CWindows_CSystem_CVirtualKey_Divide = 111,
    _q_CWindows_CSystem_CVirtualKey_F1 = 112,
    _q_CWindows_CSystem_CVirtualKey_F2 = 113,
    _q_CWindows_CSystem_CVirtualKey_F3 = 114,
    _q_CWindows_CSystem_CVirtualKey_F4 = 115,
    _q_CWindows_CSystem_CVirtualKey_F5 = 116,
    _q_CWindows_CSystem_CVirtualKey_F6 = 117,
    _q_CWindows_CSystem_CVirtualKey_F7 = 118,
    _q_CWindows_CSystem_CVirtualKey_F8 = 119,
    _q_CWindows_CSystem_CVirtualKey_F9 = 120,
    _q_CWindows_CSystem_CVirtualKey_F10 = 121,
    _q_CWindows_CSystem_CVirtualKey_F11 = 122,
    _q_CWindows_CSystem_CVirtualKey_F12 = 123,
    _q_CWindows_CSystem_CVirtualKey_F13 = 124,
    _q_CWindows_CSystem_CVirtualKey_F14 = 125,
    _q_CWindows_CSystem_CVirtualKey_F15 = 126,
    _q_CWindows_CSystem_CVirtualKey_F16 = 127,
    _q_CWindows_CSystem_CVirtualKey_F17 = 128,
    _q_CWindows_CSystem_CVirtualKey_F18 = 129,
    _q_CWindows_CSystem_CVirtualKey_F19 = 130,
    _q_CWindows_CSystem_CVirtualKey_F20 = 131,
    _q_CWindows_CSystem_CVirtualKey_F21 = 132,
    _q_CWindows_CSystem_CVirtualKey_F22 = 133,
    _q_CWindows_CSystem_CVirtualKey_F23 = 134,
    _q_CWindows_CSystem_CVirtualKey_F24 = 135,
    _q_CWindows_CSystem_CVirtualKey_NavigationView = 136,
    _q_CWindows_CSystem_CVirtualKey_NavigationMenu = 137,
    _q_CWindows_CSystem_CVirtualKey_NavigationUp = 138,
    _q_CWindows_CSystem_CVirtualKey_NavigationDown = 139,
    _q_CWindows_CSystem_CVirtualKey_NavigationLeft = 140,
    _q_CWindows_CSystem_CVirtualKey_NavigationRight = 141,
    _q_CWindows_CSystem_CVirtualKey_NavigationAccept = 142,
    _q_CWindows_CSystem_CVirtualKey_NavigationCancel = 143,
    _q_CWindows_CSystem_CVirtualKey_NumberKeyLock = 144,
    _q_CWindows_CSystem_CVirtualKey_Scroll = 145,
    _q_CWindows_CSystem_CVirtualKey_LeftShift = 160,
    _q_CWindows_CSystem_CVirtualKey_RightShift = 161,
    _q_CWindows_CSystem_CVirtualKey_LeftControl = 162,
    _q_CWindows_CSystem_CVirtualKey_RightControl = 163,
    _q_CWindows_CSystem_CVirtualKey_LeftMenu = 164,
    _q_CWindows_CSystem_CVirtualKey_RightMenu = 165,
    _q_CWindows_CSystem_CVirtualKey_GoBack = 166,
    _q_CWindows_CSystem_CVirtualKey_GoForward = 167,
    _q_CWindows_CSystem_CVirtualKey_Refresh = 168,
    _q_CWindows_CSystem_CVirtualKey_Stop = 169,
    _q_CWindows_CSystem_CVirtualKey_Search = 170,
    _q_CWindows_CSystem_CVirtualKey_Favorites = 171,
    _q_CWindows_CSystem_CVirtualKey_GoHome = 172,
    _q_CWindows_CSystem_CVirtualKey_GamepadA = 195,
    _q_CWindows_CSystem_CVirtualKey_GamepadB = 196,
    _q_CWindows_CSystem_CVirtualKey_GamepadX = 197,
    _q_CWindows_CSystem_CVirtualKey_GamepadY = 198,
    _q_CWindows_CSystem_CVirtualKey_GamepadRightShoulder = 199,
    _q_CWindows_CSystem_CVirtualKey_GamepadLeftShoulder = 200,
    _q_CWindows_CSystem_CVirtualKey_GamepadLeftTrigger = 201,
    _q_CWindows_CSystem_CVirtualKey_GamepadRightTrigger = 202,
    _q_CWindows_CSystem_CVirtualKey_GamepadDPadUp = 203,
    _q_CWindows_CSystem_CVirtualKey_GamepadDPadDown = 204,
    _q_CWindows_CSystem_CVirtualKey_GamepadDPadLeft = 205,
    _q_CWindows_CSystem_CVirtualKey_GamepadDPadRight = 206,
    _q_CWindows_CSystem_CVirtualKey_GamepadMenu = 207,
    _q_CWindows_CSystem_CVirtualKey_GamepadView = 208,
    _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickButton = 209,
    _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickButton = 210,
    _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickUp = 211,
    _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickDown = 212,
    _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickRight = 213,
    _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickLeft = 214,
    _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickUp = 215,
    _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickDown = 216,
    _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickRight = 217,
    _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickLeft = 218,
} _q_CWindows_CSystem_CVirtualKey;
typedef enum _q_CWindows_CUI_CNotifications_CNotificationMirroring
{
    _q_CWindows_CUI_CNotifications_CNotificationMirroring_Allowed = 0,
    _q_CWindows_CUI_CNotifications_CNotificationMirroring_Disabled = 1,
} _q_CWindows_CUI_CNotifications_CNotificationMirroring;
typedef enum _q_CWindows_CUI_CNotifications_CNotificationSetting
{
    _q_CWindows_CUI_CNotifications_CNotificationSetting_Enabled = 0,
    _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledForApplication = 1,
    _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledForUser = 2,
    _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledByGroupPolicy = 3,
    _q_CWindows_CUI_CNotifications_CNotificationSetting_DisabledByManifest = 4,
} _q_CWindows_CUI_CNotifications_CNotificationSetting;
typedef enum _q_CWindows_CUI_CNotifications_CNotificationUpdateResult
{
    _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_Succeeded = 0,
    _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_Failed = 1,
    _q_CWindows_CUI_CNotifications_CNotificationUpdateResult_NotificationNotFound = 2,
} _q_CWindows_CUI_CNotifications_CNotificationUpdateResult;
typedef enum _q_CWindows_CUI_CNotifications_CToastNotificationPriority
{
    _q_CWindows_CUI_CNotifications_CToastNotificationPriority_Default = 0,
    _q_CWindows_CUI_CNotifications_CToastNotificationPriority_High = 1,
} _q_CWindows_CUI_CNotifications_CToastNotificationPriority;
typedef enum _q_CWindows_CUI_CNotifications_CToastTemplateType
{
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText01 = 0,
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText02 = 1,
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText03 = 2,
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastImageAndText04 = 3,
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText01 = 4,
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText02 = 5,
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText03 = 6,
    _q_CWindows_CUI_CNotifications_CToastTemplateType_ToastText04 = 7,
} _q_CWindows_CUI_CNotifications_CToastTemplateType;
typedef enum _q_CWindows_CUI_CText_CFontStretch
{
    _q_CWindows_CUI_CText_CFontStretch_Undefined = 0,
    _q_CWindows_CUI_CText_CFontStretch_UltraCondensed = 1,
    _q_CWindows_CUI_CText_CFontStretch_ExtraCondensed = 2,
    _q_CWindows_CUI_CText_CFontStretch_Condensed = 3,
    _q_CWindows_CUI_CText_CFontStretch_SemiCondensed = 4,
    _q_CWindows_CUI_CText_CFontStretch_Normal = 5,
    _q_CWindows_CUI_CText_CFontStretch_SemiExpanded = 6,
    _q_CWindows_CUI_CText_CFontStretch_Expanded = 7,
    _q_CWindows_CUI_CText_CFontStretch_ExtraExpanded = 8,
    _q_CWindows_CUI_CText_CFontStretch_UltraExpanded = 9,
} _q_CWindows_CUI_CText_CFontStretch;
typedef enum _q_CWindows_CUI_CText_CFontStyle
{
    _q_CWindows_CUI_CText_CFontStyle_Normal = 0,
    _q_CWindows_CUI_CText_CFontStyle_Oblique = 1,
    _q_CWindows_CUI_CText_CFontStyle_Italic = 2,
} _q_CWindows_CUI_CText_CFontStyle;
typedef enum _q_CWindows_CUI_CText_CTextDecorations
{
    _q_CWindows_CUI_CText_CTextDecorations_None = 0,
    _q_CWindows_CUI_CText_CTextDecorations_Underline = 1,
    _q_CWindows_CUI_CText_CTextDecorations_Strikethrough = 2,
} _q_CWindows_CUI_CText_CTextDecorations;
typedef enum _q_CWindows_CUI_CXaml_CInterop_CTypeKind
{
    _q_CWindows_CUI_CXaml_CInterop_CTypeKind_Primitive = 0,
    _q_CWindows_CUI_CXaml_CInterop_CTypeKind_Metadata = 1,
    _q_CWindows_CUI_CXaml_CInterop_CTypeKind_Custom = 2,
} _q_CWindows_CUI_CXaml_CInterop_CTypeKind;
typedef enum _q_CWindows_CWeb_CHttp_CHttpProgressStage
{
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_None = 0,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_DetectingProxy = 10,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_ResolvingName = 20,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_ConnectingToServer = 30,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_NegotiatingSsl = 40,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_SendingHeaders = 50,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_SendingContent = 60,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_WaitingForResponse = 70,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_ReceivingHeaders = 80,
    _q_CWindows_CWeb_CHttp_CHttpProgressStage_ReceivingContent = 90,
} _q_CWindows_CWeb_CHttp_CHttpProgressStage;
typedef enum _q_CWindows_CWeb_CHttp_CHttpStatusCode
{
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_None = 0,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Continue = 100,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_SwitchingProtocols = 101,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Processing = 102,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Ok = 200,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Created = 201,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Accepted = 202,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NonAuthoritativeInformation = 203,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NoContent = 204,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_ResetContent = 205,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_PartialContent = 206,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_MultiStatus = 207,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_AlreadyReported = 208,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_IMUsed = 226,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_MultipleChoices = 300,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_MovedPermanently = 301,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Found = 302,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_SeeOther = 303,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NotModified = 304,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_UseProxy = 305,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_TemporaryRedirect = 307,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_PermanentRedirect = 308,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_BadRequest = 400,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Unauthorized = 401,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_PaymentRequired = 402,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Forbidden = 403,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NotFound = 404,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_MethodNotAllowed = 405,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NotAcceptable = 406,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_ProxyAuthenticationRequired = 407,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_RequestTimeout = 408,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Conflict = 409,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Gone = 410,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_LengthRequired = 411,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_PreconditionFailed = 412,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_RequestEntityTooLarge = 413,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_RequestUriTooLong = 414,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_UnsupportedMediaType = 415,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_RequestedRangeNotSatisfiable = 416,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_ExpectationFailed = 417,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_UnprocessableEntity = 422,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_Locked = 423,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_FailedDependency = 424,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_UpgradeRequired = 426,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_PreconditionRequired = 428,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_TooManyRequests = 429,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_RequestHeaderFieldsTooLarge = 431,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_InternalServerError = 500,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NotImplemented = 501,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_BadGateway = 502,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_ServiceUnavailable = 503,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_GatewayTimeout = 504,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_HttpVersionNotSupported = 505,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_VariantAlsoNegotiates = 506,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_InsufficientStorage = 507,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_LoopDetected = 508,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NotExtended = 510,
    _q_CWindows_CWeb_CHttp_CHttpStatusCode_NetworkAuthenticationRequired = 511,
} _q_CWindows_CWeb_CHttp_CHttpStatusCode;
// forward decls for value types
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;
typedef struct _q_CMicrosoft_CUI_CXaml_CCornerRadius _q_CMicrosoft_CUI_CXaml_CCornerRadius;
typedef struct _q_CMicrosoft_CUI_CXaml_CThickness _q_CMicrosoft_CUI_CXaml_CThickness;
typedef struct _q_CWindows_CFoundation_CDateTime _q_CWindows_CFoundation_CDateTime;
typedef struct _q_CWindows_CFoundation_CEventRegistrationToken _q_CWindows_CFoundation_CEventRegistrationToken;
typedef struct _q_CWindows_CFoundation_CHResult _q_CWindows_CFoundation_CHResult;
typedef struct _q_CWindows_CFoundation_CNumerics_CMatrix3x2 _q_CWindows_CFoundation_CNumerics_CMatrix3x2;
typedef struct _q_CWindows_CFoundation_CNumerics_CMatrix4x4 _q_CWindows_CFoundation_CNumerics_CMatrix4x4;
typedef struct _q_CWindows_CFoundation_CNumerics_CVector2 _q_CWindows_CFoundation_CNumerics_CVector2;
typedef struct _q_CWindows_CFoundation_CNumerics_CVector3 _q_CWindows_CFoundation_CNumerics_CVector3;
typedef struct _q_CWindows_CFoundation_CNumerics_CVector4 _q_CWindows_CFoundation_CNumerics_CVector4;
typedef struct _q_CWindows_CFoundation_CPoint _q_CWindows_CFoundation_CPoint;
typedef struct _q_CWindows_CFoundation_CRect _q_CWindows_CFoundation_CRect;
typedef struct _q_CWindows_CFoundation_CSize _q_CWindows_CFoundation_CSize;
typedef struct _q_CWindows_CFoundation_CTimeSpan _q_CWindows_CFoundation_CTimeSpan;
typedef struct _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DMultisampleDescription _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DMultisampleDescription;
typedef struct _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DSurfaceDescription _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DSurfaceDescription;
typedef struct _q_CWindows_CGraphics_CImaging_CBitmapSize _q_CWindows_CGraphics_CImaging_CBitmapSize;
typedef struct _q_CWindows_CUI_CColor _q_CWindows_CUI_CColor;
typedef struct _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus;
typedef struct _q_CWindows_CUI_CText_CFontWeight _q_CWindows_CUI_CText_CFontWeight;
typedef struct _q_CWindows_CUI_CXaml_CInterop_CTypeName _q_CWindows_CUI_CXaml_CInterop_CTypeName;
typedef struct _q_CWindows_CWeb_CHttp_CHttpProgress _q_CWindows_CWeb_CHttp_CHttpProgress;
// forward decls for interfaces
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;
typedef struct _q_CMicrosoft_CUI_CComposition_CIAnimationObject _q_CMicrosoft_CUI_CComposition_CIAnimationObject;
typedef struct _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo;
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase;
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositionBrush _q_CMicrosoft_CUI_CComposition_CICompositionBrush;
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositionObject _q_CMicrosoft_CUI_CComposition_CICompositionObject;
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositor _q_CMicrosoft_CUI_CComposition_CICompositor;
typedef struct _q_CMicrosoft_CUI_CComposition_CIVisual _q_CMicrosoft_CUI_CComposition_CIVisual;
typedef struct _q_CMicrosoft_CUI_CComposition_CIVisualElement2 _q_CMicrosoft_CUI_CComposition_CIVisualElement2;
typedef struct _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue;
typedef struct _q_CMicrosoft_CUI_CIColors _q_CMicrosoft_CUI_CIColors;
typedef struct _q_CMicrosoft_CUI_CIColorsStatics _q_CMicrosoft_CUI_CIColorsStatics;
typedef struct _q_CMicrosoft_CUI_CInput_CIInputCursor _q_CMicrosoft_CUI_CInput_CIInputCursor;
typedef struct _q_CMicrosoft_CUI_CInput_CIPointerPoint _q_CMicrosoft_CUI_CInput_CIPointerPoint;
typedef struct _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer;
typedef struct _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIButton _q_CMicrosoft_CUI_CXaml_CControls_CIButton;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory _q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics _q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControl _q_CMicrosoft_CUI_CXaml_CControls_CIControl;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs _q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs _q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIGrid _q_CMicrosoft_CUI_CXaml_CControls_CIGrid;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel _q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs _q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanel _q_CMicrosoft_CUI_CXaml_CControls_CIPanel;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CISlider _q_CMicrosoft_CUI_CXaml_CControls_CISlider;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory _q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo;
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingBase _q_CMicrosoft_CUI_CXaml_CData_CIBindingBase;
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression;
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase;
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIValueConverter _q_CMicrosoft_CUI_CXaml_CData_CIValueConverter;
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline;
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement _q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement;
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter;
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer;
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplication _q_CMicrosoft_CUI_CXaml_CIApplication;
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationFactory _q_CMicrosoft_CUI_CXaml_CIApplicationFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams;
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides;
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationStatics _q_CMicrosoft_CUI_CXaml_CIApplicationStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions _q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions;
typedef struct _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIBrushTransition _q_CMicrosoft_CUI_CXaml_CIBrushTransition;
typedef struct _q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory _q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs _q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDataTemplate _q_CMicrosoft_CUI_CXaml_CIDataTemplate;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory _q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDebugSettings _q_CMicrosoft_CUI_CXaml_CIDebugSettings;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyObject _q_CMicrosoft_CUI_CXaml_CIDependencyObject;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyProperty _q_CMicrosoft_CUI_CXaml_CIDependencyProperty;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDragEventArgs _q_CMicrosoft_CUI_CXaml_CIDragEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs _q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs _q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs _q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElement _q_CMicrosoft_CUI_CXaml_CIFrameworkElement;
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides;
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected _q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected;
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate;
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs _q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CICommand _q_CMicrosoft_CUI_CXaml_CInput_CICommand;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointer _q_CMicrosoft_CUI_CXaml_CInput_CIPointer;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIResourceDictionary _q_CMicrosoft_CUI_CXaml_CIResourceDictionary;
typedef struct _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEvent _q_CMicrosoft_CUI_CXaml_CIRoutedEvent;
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIScalarTransition _q_CMicrosoft_CUI_CXaml_CIScalarTransition;
typedef struct _q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory _q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs _q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIStyle _q_CMicrosoft_CUI_CXaml_CIStyle;
typedef struct _q_CMicrosoft_CUI_CXaml_CIStyleFactory _q_CMicrosoft_CUI_CXaml_CIStyleFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CITriggerBase _q_CMicrosoft_CUI_CXaml_CITriggerBase;
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElement _q_CMicrosoft_CUI_CXaml_CIUIElement;
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides;
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElementProtected _q_CMicrosoft_CUI_CXaml_CIUIElementProtected;
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElementStatics _q_CMicrosoft_CUI_CXaml_CIUIElementStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIVector3Transition _q_CMicrosoft_CUI_CXaml_CIVector3Transition;
typedef struct _q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory _q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindow _q_CMicrosoft_CUI_CXaml_CIWindow;
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs _q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowEventArgs _q_CMicrosoft_CUI_CXaml_CIWindowEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowFactory _q_CMicrosoft_CUI_CXaml_CIWindowFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs _q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowStatics _q_CMicrosoft_CUI_CXaml_CIWindowStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs _q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CIXamlRoot _q_CMicrosoft_CUI_CXaml_CIXamlRoot;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode _q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry _q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIProjection _q_CMicrosoft_CUI_CXaml_CMedia_CIProjection;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIShadow _q_CMicrosoft_CUI_CXaml_CMedia_CIShadow;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITransform _q_CMicrosoft_CUI_CXaml_CMedia_CITransform;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D;
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory;
typedef struct _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics;
typedef struct _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2 _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlAttribute _q_CWindows_CData_CXml_CDom_CIXmlAttribute;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlCDataSection _q_CWindows_CData_CXml_CDom_CIXmlCDataSection;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlComment _q_CWindows_CData_CXml_CDom_CIXmlComment;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocument _q_CWindows_CData_CXml_CDom_CIXmlDocument;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment _q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2 _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics _q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentType _q_CWindows_CData_CXml_CDom_CIXmlDocumentType;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDomImplementation _q_CWindows_CData_CXml_CDom_CIXmlDomImplementation;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlElement _q_CWindows_CData_CXml_CDom_CIXmlElement;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlEntityReference _q_CWindows_CData_CXml_CDom_CIXmlEntityReference;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlLoadSettings _q_CWindows_CData_CXml_CDom_CIXmlLoadSettings;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap _q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNode _q_CWindows_CData_CXml_CDom_CIXmlNode;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNodeList _q_CWindows_CData_CXml_CDom_CIXmlNodeList;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNodeSelector _q_CWindows_CData_CXml_CDom_CIXmlNodeSelector;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction _q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction;
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlText _q_CWindows_CData_CXml_CDom_CIXmlText;
typedef struct _q_CWindows_CFoundation_CIAsyncAction _q_CWindows_CFoundation_CIAsyncAction;
typedef struct _q_CWindows_CFoundation_CIAsyncInfo _q_CWindows_CFoundation_CIAsyncInfo;
typedef struct _q_CWindows_CFoundation_CIClosable _q_CWindows_CFoundation_CIClosable;
typedef struct _q_CWindows_CFoundation_CIStringable _q_CWindows_CFoundation_CIStringable;
typedef struct _q_CWindows_CFoundation_CIUriEscapeStatics _q_CWindows_CFoundation_CIUriEscapeStatics;
typedef struct _q_CWindows_CFoundation_CIUriRuntimeClass _q_CWindows_CFoundation_CIUriRuntimeClass;
typedef struct _q_CWindows_CFoundation_CIUriRuntimeClassFactory _q_CWindows_CFoundation_CIUriRuntimeClassFactory;
typedef struct _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri;
typedef struct _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass;
typedef struct _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory;
typedef struct _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface;
typedef struct _q_CWindows_CGraphics_CImaging_CISoftwareBitmap _q_CWindows_CGraphics_CImaging_CISoftwareBitmap;
typedef struct _q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory _q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory;
typedef struct _q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics _q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics;
typedef struct _q_CWindows_CStorage_CIStorageFile _q_CWindows_CStorage_CIStorageFile;
typedef struct _q_CWindows_CStorage_CStreams_CIBuffer _q_CWindows_CStorage_CStreams_CIBuffer;
typedef struct _q_CWindows_CStorage_CStreams_CIOutputStream _q_CWindows_CStorage_CStreams_CIOutputStream;
typedef struct _q_CWindows_CStorage_CStreams_CIRandomAccessStream _q_CWindows_CStorage_CStreams_CIRandomAccessStream;
typedef struct _q_CWindows_CSystem_CIDispatcherQueue _q_CWindows_CSystem_CIDispatcherQueue;
typedef struct _q_CWindows_CSystem_CIDispatcherQueueController _q_CWindows_CSystem_CIDispatcherQueueController;
typedef struct _q_CWindows_CSystem_CIDispatcherQueueControllerStatics _q_CWindows_CSystem_CIDispatcherQueueControllerStatics;
typedef struct _q_CWindows_CSystem_CIUser _q_CWindows_CSystem_CIUser;
typedef struct _q_CWindows_CSystem_CProfile_CISystemIdentificationInfo _q_CWindows_CSystem_CProfile_CISystemIdentificationInfo;
typedef struct _q_CWindows_CSystem_CProfile_CISystemIdentificationStatics _q_CWindows_CSystem_CProfile_CISystemIdentificationStatics;
typedef struct _q_CWindows_CUI_CCore_CICoreDispatcher _q_CWindows_CUI_CCore_CICoreDispatcher;
typedef struct _q_CWindows_CUI_CCore_CICoreWindow _q_CWindows_CUI_CCore_CICoreWindow;
typedef struct _q_CWindows_CUI_CNotifications_CINotificationData _q_CWindows_CUI_CNotifications_CINotificationData;
typedef struct _q_CWindows_CUI_CNotifications_CINotificationDataFactory _q_CWindows_CUI_CNotifications_CINotificationDataFactory;
typedef struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotification _q_CWindows_CUI_CNotifications_CIScheduledToastNotification;
typedef struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory;
typedef struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs;
typedef struct _q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs _q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs;
typedef struct _q_CWindows_CUI_CNotifications_CIToastFailedEventArgs _q_CWindows_CUI_CNotifications_CIToastFailedEventArgs;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification _q_CWindows_CUI_CNotifications_CIToastNotification;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification2 _q_CWindows_CUI_CNotifications_CIToastNotification2;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification3 _q_CWindows_CUI_CNotifications_CIToastNotification3;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification4 _q_CWindows_CUI_CNotifications_CIToastNotification4;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification6 _q_CWindows_CUI_CNotifications_CIToastNotification6;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationFactory _q_CWindows_CUI_CNotifications_CIToastNotificationFactory;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationHistory _q_CWindows_CUI_CNotifications_CIToastNotificationHistory;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2 _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4 _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5 _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotifier _q_CWindows_CUI_CNotifications_CIToastNotifier;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotifier2 _q_CWindows_CUI_CNotifications_CIToastNotifier2;
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotifier3 _q_CWindows_CUI_CNotifications_CIToastNotifier3;
typedef struct _q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter _q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter;
typedef struct _q_CWindows_CWeb_CHttp_CIHttpClient _q_CWindows_CWeb_CHttp_CIHttpClient;
typedef struct _q_CWindows_CWeb_CHttp_CIHttpClientFactory _q_CWindows_CWeb_CHttp_CIHttpClientFactory;
typedef struct _q_CWindows_CWeb_CHttp_CIHttpContent _q_CWindows_CWeb_CHttp_CIHttpContent;
typedef struct _q_CWindows_CWeb_CHttp_CIHttpResponseMessage _q_CWindows_CWeb_CHttp_CIHttpResponseMessage;
typedef struct _q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory _q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory;
// forward decls for parameterized interfaces
typedef struct _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING;
typedef struct _cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING _cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs;
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument;
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1_boolean _cg_CWindows_CFoundation_IAsyncOperation_1_boolean;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress;
typedef struct _cg_CWindows_CFoundation_IReference_1_UINT64 _cg_CWindows_CFoundation_IReference_1_UINT64;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64 _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64 _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64 _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64;
typedef struct _cg_CWindows_CFoundation_IEventHandler_1_IInspectable _cg_CWindows_CFoundation_IEventHandler_1_IInspectable;
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs;
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT _cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT;
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement;
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs;
typedef struct _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap;
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs;
// definition of structs for value types
struct _q_CWindows_CFoundation_CNumerics_CVector2
{
    FLOAT X;
    FLOAT Y;
};
struct _q_CWindows_CFoundation_CNumerics_CVector4
{
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
    FLOAT W;
};
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch
{
    _q_CWindows_CFoundation_CNumerics_CVector2 Point00;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point01;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point02;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point03;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point10;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point11;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point12;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point13;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point20;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point21;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point22;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point23;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point30;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point31;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point32;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point33;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color00;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color03;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color30;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color33;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge00To03;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge03To33;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge33To30;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge30To00;
};
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph
{
    INT32 Index;
    FLOAT Advance;
    FLOAT AdvanceOffset;
    FLOAT AscenderOffset;
};
struct _q_CMicrosoft_CUI_CXaml_CCornerRadius
{
    DOUBLE TopLeft;
    DOUBLE TopRight;
    DOUBLE BottomRight;
    DOUBLE BottomLeft;
};
struct _q_CMicrosoft_CUI_CXaml_CThickness
{
    DOUBLE Left;
    DOUBLE Top;
    DOUBLE Right;
    DOUBLE Bottom;
};
struct _q_CWindows_CFoundation_CDateTime
{
    INT64 UniversalTime;
};
struct _q_CWindows_CFoundation_CEventRegistrationToken
{
    INT64 Value;
};
struct _q_CWindows_CFoundation_CHResult
{
    INT32 Value;
};
struct _q_CWindows_CFoundation_CNumerics_CMatrix3x2
{
    FLOAT M11;
    FLOAT M12;
    FLOAT M21;
    FLOAT M22;
    FLOAT M31;
    FLOAT M32;
};
struct _q_CWindows_CFoundation_CNumerics_CMatrix4x4
{
    FLOAT M11;
    FLOAT M12;
    FLOAT M13;
    FLOAT M14;
    FLOAT M21;
    FLOAT M22;
    FLOAT M23;
    FLOAT M24;
    FLOAT M31;
    FLOAT M32;
    FLOAT M33;
    FLOAT M34;
    FLOAT M41;
    FLOAT M42;
    FLOAT M43;
    FLOAT M44;
};
struct _q_CWindows_CFoundation_CNumerics_CVector3
{
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
};
struct _q_CWindows_CFoundation_CPoint
{
    FLOAT X;
    FLOAT Y;
};
struct _q_CWindows_CFoundation_CRect
{
    FLOAT X;
    FLOAT Y;
    FLOAT Width;
    FLOAT Height;
};
struct _q_CWindows_CFoundation_CSize
{
    FLOAT Width;
    FLOAT Height;
};
struct _q_CWindows_CFoundation_CTimeSpan
{
    INT64 Duration;
};
struct _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DMultisampleDescription
{
    INT32 Count;
    INT32 Quality;
};
struct _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DSurfaceDescription
{
    INT32 Width;
    INT32 Height;
    _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat Format;
    _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DMultisampleDescription MultisampleDescription;
};
struct _q_CWindows_CGraphics_CImaging_CBitmapSize
{
    UINT32 Width;
    UINT32 Height;
};
struct _q_CWindows_CUI_CColor
{
    UINT8 A;
    UINT8 R;
    UINT8 G;
    UINT8 B;
};
struct _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus
{
    UINT32 RepeatCount;
    UINT32 ScanCode;
    boolean IsExtendedKey;
    boolean IsMenuKeyDown;
    boolean WasKeyDown;
    boolean IsKeyReleased;
};
struct _q_CWindows_CUI_CText_CFontWeight
{
    UINT16 Weight;
};
struct _q_CWindows_CUI_CXaml_CInterop_CTypeName
{
    HSTRING Name;
    _q_CWindows_CUI_CXaml_CInterop_CTypeKind Kind;
};
struct _q_CWindows_CWeb_CHttp_CHttpProgress
{
    _q_CWindows_CWeb_CHttp_CHttpProgressStage Stage;
    UINT64 BytesSent;
    _cg_CWindows_CFoundation_IReference_1_UINT64* TotalBytesToSend;
    UINT64 BytesReceived;
    _cg_CWindows_CFoundation_IReference_1_UINT64* TotalBytesToReceive;
    UINT32 Retries;
};
// definitions for delegates
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback* pThis, _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams* p);
} _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback
{
    _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallbackVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* sender, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp);
} _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallbackVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback
{
    _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallbackVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDragEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDragEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDragEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDragEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CIDragEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIDragEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CIDragEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDragEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CIDragEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler
{
    _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIAsyncActionCompletedHandlerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIAsyncActionCompletedHandler* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIAsyncActionCompletedHandler* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIAsyncActionCompletedHandler* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_q_CWindows_CFoundation_CIAsyncActionCompletedHandler* pThis, _q_CWindows_CFoundation_CIAsyncAction* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _q_CWindows_CFoundation_CIAsyncActionCompletedHandlerVtbl;
struct _q_CWindows_CFoundation_CIAsyncActionCompletedHandler
{
    _q_CWindows_CFoundation_CIAsyncActionCompletedHandlerVtbl* lpVtbl;
};
// definitions for interface types
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, TrustLevel* trustLevel);
    void* unneeded_get_Opacity;
    void* unneeded_put_Opacity;
    void* unneeded_get_Transform;
    void* unneeded_put_Transform;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush
{
    _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, TrustLevel* trustLevel);
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, TrustLevel* trustLevel);
    void* unneeded_CombineWith;
    void* unneeded_CombineWithUsingFlatteningTolerance;
    void* unneeded_Stroke;
    void* unneeded_StrokeWithStrokeStyle;
    void* unneeded_StrokeWithAllOptions;
    void* unneeded_Outline;
    void* unneeded_OutlineWithTransformAndFlatteningTolerance;
    void* unneeded_Simplify;
    void* unneeded_SimplifyWithTransformAndFlatteningTolerance;
    void* unneeded_Transform;
    void* unneeded_CompareWith;
    void* unneeded_CompareWithUsingTransformAndFlatteningTolerance;
    void* unneeded_ComputeArea;
    void* unneeded_ComputeAreaWithTransformAndFlatteningTolerance;
    void* unneeded_ComputePathLength;
    void* unneeded_ComputePathLengthWithTransformAndFlatteningTolerance;
    void* unneeded_ComputePointOnPath;
    void* unneeded_ComputePointOnPathWithTangent;
    void* unneeded_ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent;
    void* unneeded_FillContainsPoint;
    void* unneeded_FillContainsPointWithTransformAndFlatteningTolerance;
    void* unneeded_ComputeBounds;
    void* unneeded_ComputeBoundsWithTransform;
    void* unneeded_ComputeStrokeBounds;
    void* unneeded_ComputeStrokeBoundsWithStrokeStyle;
    void* unneeded_ComputeStrokeBoundsWithAllOptions;
    void* unneeded_StrokeContainsPoint;
    void* unneeded_StrokeContainsPointWithStrokeStyle;
    void* unneeded_StrokeContainsPointWithAllOptions;
    void* unneeded_Tessellate;
    void* unneeded_TessellateWithTransformAndFlatteningTolerance;
    void* unneeded_SendPathTo;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, TrustLevel* trustLevel);
    void* unneeded_get_Patches;
    void* unneeded_GetBounds;
    void* unneeded_GetBoundsWithTransform;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 patchElementsLength, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch* patchElements, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, TrustLevel* trustLevel);
    void* unneeded_get_StartCap;
    void* unneeded_put_StartCap;
    void* unneeded_get_EndCap;
    void* unneeded_put_EndCap;
    void* unneeded_get_DashCap;
    void* unneeded_put_DashCap;
    void* unneeded_get_LineJoin;
    void* unneeded_put_LineJoin;
    void* unneeded_get_MiterLimit;
    void* unneeded_put_MiterLimit;
    void* unneeded_get_DashStyle;
    void* unneeded_put_DashStyle;
    void* unneeded_get_DashOffset;
    void* unneeded_put_DashOffset;
    void* unneeded_get_CustomDashStyle;
    void* unneeded_put_CustomDashStyle;
    void* unneeded_get_TransformBehavior;
    void* unneeded_put_TransformBehavior;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_SizeInPixels)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CGraphics_CImaging_CBitmapSize* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CFoundation_CRect* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Format)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat* __pret);
    HRESULT (STDMETHODCALLTYPE* get_AlphaMode)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode* __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToFileAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, HSTRING fileName, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToFileWithBitmapFileFormatAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, HSTRING fileName, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToFileWithBitmapFileFormatAndQualityAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, HSTRING fileName, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, FLOAT quality, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToStreamAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToStreamWithQualityAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, FLOAT quality, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytes)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32* __pretLength, UINT8** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, INT32 left, INT32 top, INT32 width, INT32 height, UINT32* __pretLength, UINT8** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithBuffer)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithBufferAndSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* GetPixelColors)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32* __pretLength, _q_CWindows_CUI_CColor** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelColorsWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, INT32 left, INT32 top, INT32 width, INT32 height, UINT32* __pretLength, _q_CWindows_CUI_CColor** __pret);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytes)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, UINT8* valueElements);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, UINT8* valueElements, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithBuffer)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithBufferAndSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* SetPixelColors)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, _q_CWindows_CUI_CColor* valueElements);
    HRESULT (STDMETHODCALLTYPE* SetPixelColorsWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, _q_CWindows_CUI_CColor* valueElements, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmap)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmapWithDestPoint)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap, INT32 destX, INT32 destY);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmapWithDestPointAndSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap, INT32 destX, INT32 destY, INT32 sourceRectLeft, INT32 sourceRectTop, INT32 sourceRectWidth, INT32 sourceRectHeight);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Surface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytes)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 bytesLength, UINT8* bytes, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 bytesLength, UINT8* bytes, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 bytesLength, UINT8* bytes, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBuffer)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBufferAndDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBufferAndDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromColors)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 colorsLength, _q_CWindows_CUI_CColor* colors, INT32 widthInPixels, INT32 heightInPixels, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromColorsWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 colorsLength, _q_CWindows_CUI_CColor* colors, INT32 widthInPixels, INT32 heightInPixels, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromColorsWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 colorsLength, _q_CWindows_CUI_CColor* colors, INT32 widthInPixels, INT32 heightInPixels, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromSoftwareBitmap)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CImaging_CISoftwareBitmap* sourceBitmap, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstring)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING fileName, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstringWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING fileName, FLOAT dpi, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstringWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING fileName, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUri)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, FLOAT dpi, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStream)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, FLOAT dpi, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, TrustLevel* trustLevel);
    void* unneeded_get_ForceSoftwareRenderer;
    void* unneeded_get_MaximumBitmapSizeInPixels;
    void* unneeded_IsPixelFormatSupported;
    void* unneeded_IsBufferPrecisionSupported;
    void* unneeded_get_MaximumCacheSize;
    void* unneeded_put_MaximumCacheSize;
    void* unneeded_get_LowPriority;
    void* unneeded_put_LowPriority;
    void* unneeded_add_DeviceLost;
    void* unneeded_remove_DeviceLost;
    void* unneeded_IsDeviceLost;
    void* unneeded_RaiseDeviceLost;
    void* unneeded_Lock;
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateWithForceSoftwareRendererOption)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* pThis, boolean forceSoftwareRenderer, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Clear)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* ClearHdr)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector4 color);
    HRESULT (STDMETHODCALLTYPE* Flush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOrigin)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffset)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoords)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, _q_CWindows_CFoundation_CRect destinationRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillEllipseWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillEllipseAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillEllipseWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillEllipseAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillCircleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillCircleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillCircleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillCircleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CRect rectangle, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectCoordsWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CRect rectangle, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectCoordsWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtOriginWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtOriginWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMeshAtOrigin)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMesh)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh, _q_CWindows_CFoundation_CNumerics_CVector2 point);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMeshAtCoords)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh, FLOAT x, FLOAT y);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtOrigin)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument, _q_CWindows_CFoundation_CSize viewportSize);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtPoint)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument, _q_CWindows_CFoundation_CSize viewportSize, _q_CWindows_CFoundation_CNumerics_CVector2 point);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtCoords)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument, _q_CWindows_CFoundation_CSize viewportSize, FLOAT x, FLOAT y);
    HRESULT (STDMETHODCALLTYPE* get_Antialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Antialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing value);
    HRESULT (STDMETHODCALLTYPE* get_Blend)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Blend)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend value);
    HRESULT (STDMETHODCALLTYPE* get_TextAntialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextAntialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing value);
    HRESULT (STDMETHODCALLTYPE* get_TextRenderingParameters)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters** __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextRenderingParameters)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* value);
    HRESULT (STDMETHODCALLTYPE* get_Transform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CMatrix3x2* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Transform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
    HRESULT (STDMETHODCALLTYPE* get_Units)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Units)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits value);
    HRESULT (STDMETHODCALLTYPE* get_EffectBufferPrecision)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision** __pret);
    HRESULT (STDMETHODCALLTYPE* put_EffectBufferPrecision)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* value);
    HRESULT (STDMETHODCALLTYPE* get_EffectTileSize)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CGraphics_CImaging_CBitmapSize* __pret);
    HRESULT (STDMETHODCALLTYPE* put_EffectTileSize)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CGraphics_CImaging_CBitmapSize value);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipRectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CWindows_CFoundation_CRect clipRectangle, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipRectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CWindows_CFoundation_CRect clipRectangle, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipGeometry)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipGeometry)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipGeometryAndTransform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipGeometryAndTransform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithAllOptions)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CWindows_CFoundation_CRect clipRectangle, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform, _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions options, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRun)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace, FLOAT fontSize, UINT32 glyphsLength, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs, boolean isSideways, UINT32 bidiLevel, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRunWithMeasuringMode)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace, FLOAT fontSize, UINT32 glyphsLength, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs, boolean isSideways, UINT32 bidiLevel, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRunWithMeasuringModeAndDescription)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace, FLOAT fontSize, UINT32 glyphsLength, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs, boolean isSideways, UINT32 bidiLevel, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode, HSTRING localeName, HSTRING textString, UINT32 clusterMapIndicesLength, INT32* clusterMapIndices, UINT32 textPosition);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatch)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortMode)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortModeAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortModeAndInterpolationAndOptions)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions options, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetBounds)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CRect* __pret);
    HRESULT (STDMETHODCALLTYPE* GetBoundsWithTransform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 transform, _q_CWindows_CFoundation_CRect* __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Device)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Dpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* ConvertPixelsToDips)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* pThis, INT32 pixels, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* ConvertDipsToPixels)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* pThis, FLOAT dips, _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding, INT32* __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, TrustLevel* trustLevel);
    void* unneeded_DrawToRect;
    void* unneeded_DrawAtOffset;
    void* unneeded_DrawWithTransform;
    void* unneeded_DrawToRectWithTint;
    void* unneeded_DrawAtOffsetWithTint;
    void* unneeded_DrawWithTransformAndTint;
    void* unneeded_DrawToRectWithTintAndFlip;
    void* unneeded_DrawWithTransformAndTintAndFlip;
    void* unneeded_DrawAtOffsetWithTintAndTransform;
    void* unneeded_DrawFromSpriteSheetToRect;
    void* unneeded_DrawFromSpriteSheetAtOffset;
    void* unneeded_DrawFromSpriteSheetWithTransform;
    void* unneeded_DrawFromSpriteSheetToRectWithTint;
    void* unneeded_DrawFromSpriteSheetAtOffsetWithTint;
    void* unneeded_DrawFromSpriteSheetWithTransformAndTint;
    void* unneeded_DrawFromSpriteSheetToRectWithTintAndFlip;
    void* unneeded_DrawFromSpriteSheetWithTransformAndTintAndFlip;
    void* unneeded_DrawFromSpriteSheetAtOffsetWithTintAndTransform;
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, TrustLevel* trustLevel);
    void* unneeded_get_Device;
    void* unneeded_GetXml;
    void* unneeded_SaveAsync;
    void* unneeded_put_Root;
    void* unneeded_get_Root;
    void* unneeded_FindElementById;
    void* unneeded_CreatePaintAttributeWithDefaults;
    void* unneeded_CreatePaintAttribute;
    void* unneeded_CreatePathAttributeWithDefaults;
    void* unneeded_CreatePathAttribute;
    void* unneeded_CreatePointsAttributeWithDefaults;
    void* unneeded_CreatePointsAttribute;
    void* unneeded_CreateStrokeDashArrayAttributeWithDefaults;
    void* unneeded_CreateStrokeDashArrayAttribute;
    void* unneeded_LoadElementFromXml;
    void* unneeded_LoadElementAsync;
} _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument
{
    _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateEmpty)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, TrustLevel* trustLevel);
    void* unneeded_GetRecommendedRenderingMode;
    void* unneeded_GetRecommendedRenderingModeWithAllOptions;
    void* unneeded_GetRecommendedGridFit;
    void* unneeded_get_GlyphBox;
    void* unneeded_get_SubscriptPosition;
    void* unneeded_get_SubscriptSize;
    void* unneeded_get_SuperscriptPosition;
    void* unneeded_get_SuperscriptSize;
    void* unneeded_get_HasTypographicMetrics;
    void* unneeded_get_Ascent;
    void* unneeded_get_Descent;
    void* unneeded_get_LineGap;
    void* unneeded_get_CapHeight;
    void* unneeded_get_LowercaseLetterHeight;
    void* unneeded_get_UnderlinePosition;
    void* unneeded_get_UnderlineThickness;
    void* unneeded_get_StrikethroughPosition;
    void* unneeded_get_StrikethroughThickness;
    void* unneeded_get_CaretSlopeRise;
    void* unneeded_get_CaretSlopeRun;
    void* unneeded_get_CaretOffset;
    void* unneeded_get_UnicodeRanges;
    void* unneeded_get_IsMonospaced;
    void* unneeded_GetVerticalGlyphVariants;
    void* unneeded_get_HasVerticalGlyphVariants;
    void* unneeded_get_FileFormatType;
    void* unneeded_get_Simulations;
    void* unneeded_get_IsSymbolFont;
    void* unneeded_get_GlyphCount;
    void* unneeded_GetGlyphIndices;
    void* unneeded_GetGlyphMetrics;
    void* unneeded_GetGdiCompatibleGlyphMetrics;
    void* unneeded_get_Weight;
    void* unneeded_get_Stretch;
    void* unneeded_get_Style;
    void* unneeded_get_FamilyNames;
    void* unneeded_get_FaceNames;
    void* unneeded_GetInformationalStrings;
    void* unneeded_HasCharacter;
    void* unneeded_GetGlyphRunBounds;
    void* unneeded_GetGlyphRunBoundsWithMeasuringMode;
    void* unneeded_get_Panose;
    void* unneeded_GetSupportedTypographicFeatureNames;
    void* unneeded_GetSupportedTypographicFeatureNamesWithLocale;
    void* unneeded_GetTypographicFeatureGlyphSupport;
    void* unneeded_GetTypographicFeatureGlyphSupportWithLocale;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Direction)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Direction)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value);
    HRESULT (STDMETHODCALLTYPE* get_FontFamily)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontFamily)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FontSize)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontSize)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_FontStretch)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStretch* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStretch)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStretch value);
    HRESULT (STDMETHODCALLTYPE* get_FontStyle)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStyle* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStyle)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStyle value);
    HRESULT (STDMETHODCALLTYPE* get_FontWeight)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontWeight* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontWeight)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontWeight value);
    HRESULT (STDMETHODCALLTYPE* get_IncrementalTabStop)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IncrementalTabStop)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacing)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineSpacing)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacingBaseline)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineSpacingBaseline)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_LocaleName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LocaleName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_VerticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingGranularity)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingGranularity)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingDelimiter)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingDelimiter)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingDelimiterCount)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingDelimiterCount)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_WordWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping* __pret);
    HRESULT (STDMETHODCALLTYPE* put_WordWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value);
    HRESULT (STDMETHODCALLTYPE* get_Options)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Options)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalGlyphOrientation)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation* __pret);
    HRESULT (STDMETHODCALLTYPE* put_VerticalGlyphOrientation)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation value);
    HRESULT (STDMETHODCALLTYPE* get_OpticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_OpticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_LastLineWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LastLineWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacingMode)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineSpacingMode)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign value);
    HRESULT (STDMETHODCALLTYPE* get_CustomTrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_CustomTrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* value);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetSystemFontFamilies)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* pThis, UINT32* __pretLength, HSTRING** __pret);
    HRESULT (STDMETHODCALLTYPE* GetSystemFontFamiliesFromLocaleList)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* localeList, UINT32* __pretLength, HSTRING** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, TrustLevel* trustLevel);
    void* unneeded_Draw;
    void* unneeded_get_Size;
    void* unneeded_get_Baseline;
    void* unneeded_get_SupportsSideways;
    void* unneeded_get_DrawBounds;
    void* unneeded_get_BreakBefore;
    void* unneeded_get_BreakAfter;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, TrustLevel* trustLevel);
    void* unneeded_GetFormatChangeIndices;
    void* unneeded_get_Direction;
    void* unneeded_put_Direction;
    void* unneeded_get_DefaultFontFamily;
    void* unneeded_get_DefaultFontSize;
    void* unneeded_get_DefaultFontStretch;
    void* unneeded_get_DefaultFontStyle;
    void* unneeded_get_DefaultFontWeight;
    void* unneeded_get_IncrementalTabStop;
    void* unneeded_put_IncrementalTabStop;
    void* unneeded_get_LineSpacing;
    void* unneeded_put_LineSpacing;
    void* unneeded_get_LineSpacingBaseline;
    void* unneeded_put_LineSpacingBaseline;
    void* unneeded_get_DefaultLocaleName;
    void* unneeded_get_VerticalAlignment;
    void* unneeded_put_VerticalAlignment;
    void* unneeded_get_HorizontalAlignment;
    void* unneeded_put_HorizontalAlignment;
    void* unneeded_get_TrimmingGranularity;
    void* unneeded_put_TrimmingGranularity;
    void* unneeded_get_TrimmingDelimiter;
    void* unneeded_put_TrimmingDelimiter;
    void* unneeded_get_TrimmingDelimiterCount;
    void* unneeded_put_TrimmingDelimiterCount;
    void* unneeded_get_WordWrapping;
    void* unneeded_put_WordWrapping;
    void* unneeded_get_Options;
    void* unneeded_put_Options;
    void* unneeded_get_LineSpacingMode;
    void* unneeded_put_LineSpacingMode;
    void* unneeded_get_TrimmingSign;
    void* unneeded_put_TrimmingSign;
    void* unneeded_get_CustomTrimmingSign;
    void* unneeded_put_CustomTrimmingSign;
    void* unneeded_get_RequestedSize;
    void* unneeded_put_RequestedSize;
    void* unneeded_GetMinimumLineLength;
    void* unneeded_GetBrush;
    void* unneeded_GetCustomBrush;
    void* unneeded_GetFontFamily;
    void* unneeded_GetFontSize;
    void* unneeded_GetFontStretch;
    void* unneeded_GetFontStyle;
    void* unneeded_GetFontWeight;
    void* unneeded_GetLocaleName;
    void* unneeded_GetStrikethrough;
    void* unneeded_GetUnderline;
    void* unneeded_GetInlineObject;
    void* unneeded_SetColor;
    void* unneeded_SetBrush;
    void* unneeded_SetCustomBrush;
    void* unneeded_SetFontFamily;
    void* unneeded_SetFontSize;
    void* unneeded_SetFontStretch;
    void* unneeded_SetFontStyle;
    void* unneeded_SetFontWeight;
    void* unneeded_SetLocaleName;
    void* unneeded_SetStrikethrough;
    void* unneeded_SetUnderline;
    void* unneeded_SetInlineObject;
    void* unneeded_DrawToTextRenderer;
    void* unneeded_DrawToTextRendererWithCoords;
    void* unneeded_get_LineMetrics;
    void* unneeded_get_ClusterMetrics;
    void* unneeded_SetTypography;
    void* unneeded_GetTypography;
    void* unneeded_get_LayoutBounds;
    void* unneeded_get_LayoutBoundsIncludingTrailingWhitespace;
    void* unneeded_get_LineCount;
    void* unneeded_get_MaximumBidiReorderingDepth;
    void* unneeded_get_DrawBounds;
    void* unneeded_HitTest;
    void* unneeded_HitTestWithCoords;
    void* unneeded_HitTestWithDescription;
    void* unneeded_HitTestWithDescriptionAndCoords;
    void* unneeded_HitTestWithDescriptionAndTrailingSide;
    void* unneeded_HitTestWithDescriptionAndCoordsAndTrailingSide;
    void* unneeded_GetCaretPosition;
    void* unneeded_GetCaretPositionWithDescription;
    void* unneeded_GetCharacterRegions;
    void* unneeded_GetPairKerning;
    void* unneeded_SetPairKerning;
    void* unneeded_GetLeadingCharacterSpacing;
    void* unneeded_GetTrailingCharacterSpacing;
    void* unneeded_GetMinimumCharacterAdvance;
    void* unneeded_SetCharacterSpacing;
    void* unneeded_get_VerticalGlyphOrientation;
    void* unneeded_put_VerticalGlyphOrientation;
    void* unneeded_get_OpticalAlignment;
    void* unneeded_put_OpticalAlignment;
    void* unneeded_get_LastLineWrapping;
    void* unneeded_put_LastLineWrapping;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING textString, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* textFormat, FLOAT requestedWidth, FLOAT requestedHeight, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, TrustLevel* trustLevel);
    void* unneeded_get_RenderingMode;
    void* unneeded_get_GridFit;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode textRenderingMode, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit gridFit, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reason)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason* __pret);
    HRESULT (STDMETHODCALLTYPE* TrackAsyncAction)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* pThis, _q_CWindows_CFoundation_CIAsyncAction* action);
    HRESULT (STDMETHODCALLTYPE* GetTrackedAction)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* pThis, _q_CWindows_CFoundation_CIAsyncAction** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason createResourcesReason, _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_CreateResources)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* value, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_CreateResources)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_ReadyToDraw)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* add_Draw)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* value, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Draw)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* put_ClearColor)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_ClearColor)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* Invalidate)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* RemoveFromVisualTree)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis);
    HRESULT (STDMETHODCALLTYPE* get_UseSharedDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_UseSharedDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ForceSoftwareRenderer)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ForceSoftwareRenderer)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CustomDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** __pret);
    HRESULT (STDMETHODCALLTYPE* put_CustomDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* value);
    HRESULT (STDMETHODCALLTYPE* get_DpiScale)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_DpiScale)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, FLOAT ratio);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DrawingSession)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* canvasDrawingSession, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CIAnimationObjectVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CIAnimationObject* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CIAnimationObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CIAnimationObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CIAnimationObject* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CIAnimationObject* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CIAnimationObject* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* PopulatePropertyInfo)(_q_CMicrosoft_CUI_CComposition_CIAnimationObject* pThis, HSTRING propertyName, _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* propertyInfo);
} _q_CMicrosoft_CUI_CComposition_CIAnimationObjectVtbl;
struct _q_CMicrosoft_CUI_CComposition_CIAnimationObject
{
    _q_CMicrosoft_CUI_CComposition_CIAnimationObjectVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfoVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* This, TrustLevel* trustLevel);
    void* unneeded_get_AccessMode;
    void* unneeded_put_AccessMode;
} _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfoVtbl;
struct _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo
{
    _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfoVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBaseVtbl;
struct _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase
{
    _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBaseVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositionBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CICompositionBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CICompositionBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CICompositionBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CICompositionBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CICompositionBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CICompositionBrush* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CComposition_CICompositionBrushVtbl;
struct _q_CMicrosoft_CUI_CComposition_CICompositionBrush
{
    _q_CMicrosoft_CUI_CComposition_CICompositionBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositionObjectVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CICompositionObject* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CICompositionObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CICompositionObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CICompositionObject* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CICompositionObject* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CICompositionObject* This, TrustLevel* trustLevel);
    void* unneeded_get_Compositor;
    void* unneeded_get_Properties;
    void* unneeded_StartAnimation;
    void* unneeded_StopAnimation;
} _q_CMicrosoft_CUI_CComposition_CICompositionObjectVtbl;
struct _q_CMicrosoft_CUI_CComposition_CICompositionObject
{
    _q_CMicrosoft_CUI_CComposition_CICompositionObjectVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CICompositorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CICompositor* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CICompositor* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CICompositor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CICompositor* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CICompositor* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CICompositor* This, TrustLevel* trustLevel);
    void* unneeded_CreateColorKeyFrameAnimation;
    void* unneeded_CreateColorBrush;
    void* unneeded_CreateColorBrushWithColor;
    void* unneeded_CreateContainerVisual;
    void* unneeded_CreateCubicBezierEasingFunction;
    void* unneeded_CreateEffectFactory;
    void* unneeded_CreateEffectFactoryWithProperties;
    void* unneeded_CreateExpressionAnimation;
    void* unneeded_CreateExpressionAnimationWithExpression;
    void* unneeded_CreateInsetClip;
    void* unneeded_CreateInsetClipWithInsets;
    void* unneeded_CreateLinearEasingFunction;
    void* unneeded_CreatePropertySet;
    void* unneeded_CreateQuaternionKeyFrameAnimation;
    void* unneeded_CreateScalarKeyFrameAnimation;
    void* unneeded_CreateScopedBatch;
    void* unneeded_CreateSpriteVisual;
    void* unneeded_CreateSurfaceBrush;
    void* unneeded_CreateSurfaceBrushWithSurface;
    void* unneeded_CreateVector2KeyFrameAnimation;
    void* unneeded_CreateVector3KeyFrameAnimation;
    void* unneeded_CreateVector4KeyFrameAnimation;
    void* unneeded_GetCommitBatch;
} _q_CMicrosoft_CUI_CComposition_CICompositorVtbl;
struct _q_CMicrosoft_CUI_CComposition_CICompositor
{
    _q_CMicrosoft_CUI_CComposition_CICompositorVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CIVisualVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CIVisual* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CIVisual* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CIVisual* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CIVisual* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CIVisual* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CIVisual* This, TrustLevel* trustLevel);
    void* unneeded_get_AnchorPoint;
    void* unneeded_put_AnchorPoint;
    void* unneeded_get_BackfaceVisibility;
    void* unneeded_put_BackfaceVisibility;
    void* unneeded_get_BorderMode;
    void* unneeded_put_BorderMode;
    void* unneeded_get_CenterPoint;
    void* unneeded_put_CenterPoint;
    void* unneeded_get_Clip;
    void* unneeded_put_Clip;
    void* unneeded_get_CompositeMode;
    void* unneeded_put_CompositeMode;
    void* unneeded_get_IsVisible;
    void* unneeded_put_IsVisible;
    void* unneeded_get_Offset;
    void* unneeded_put_Offset;
    void* unneeded_get_Opacity;
    void* unneeded_put_Opacity;
    void* unneeded_get_Orientation;
    void* unneeded_put_Orientation;
    void* unneeded_get_Parent;
    void* unneeded_get_RotationAngle;
    void* unneeded_put_RotationAngle;
    void* unneeded_get_RotationAngleInDegrees;
    void* unneeded_put_RotationAngleInDegrees;
    void* unneeded_get_RotationAxis;
    void* unneeded_put_RotationAxis;
    void* unneeded_get_Scale;
    void* unneeded_put_Scale;
    void* unneeded_get_Size;
    void* unneeded_put_Size;
    void* unneeded_get_TransformMatrix;
    void* unneeded_put_TransformMatrix;
} _q_CMicrosoft_CUI_CComposition_CIVisualVtbl;
struct _q_CMicrosoft_CUI_CComposition_CIVisual
{
    _q_CMicrosoft_CUI_CComposition_CIVisualVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CComposition_CIVisualElement2Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CComposition_CIVisualElement2* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CComposition_CIVisualElement2* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CComposition_CIVisualElement2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CComposition_CIVisualElement2* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CComposition_CIVisualElement2* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CComposition_CIVisualElement2* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetVisualInternal)(_q_CMicrosoft_CUI_CComposition_CIVisualElement2* pThis, _q_CMicrosoft_CUI_CComposition_CIVisual** __pret);
} _q_CMicrosoft_CUI_CComposition_CIVisualElement2Vtbl;
struct _q_CMicrosoft_CUI_CComposition_CIVisualElement2
{
    _q_CMicrosoft_CUI_CComposition_CIVisualElement2Vtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueueVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue* This, TrustLevel* trustLevel);
    void* unneeded_CreateTimer;
    void* unneeded_TryEnqueue;
    void* unneeded_TryEnqueueWithPriority;
    void* unneeded_add_ShutdownStarting;
    void* unneeded_remove_ShutdownStarting;
    void* unneeded_add_ShutdownCompleted;
    void* unneeded_remove_ShutdownCompleted;
} _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueueVtbl;
struct _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue
{
    _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueueVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CIColorsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CIColors* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CIColors* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CIColors* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CIColors* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CIColors* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CIColors* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CIColorsVtbl;
struct _q_CMicrosoft_CUI_CIColors
{
    _q_CMicrosoft_CUI_CIColorsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CIColorsStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CIColorsStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CIColorsStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CIColorsStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CIColorsStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CIColorsStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CIColorsStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AliceBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_AntiqueWhite)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Aqua)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Aquamarine)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Azure)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Beige)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Bisque)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Black)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_BlanchedAlmond)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Blue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_BlueViolet)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Brown)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_BurlyWood)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_CadetBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Chartreuse)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Chocolate)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Coral)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_CornflowerBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Cornsilk)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Crimson)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Cyan)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkCyan)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkGoldenrod)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkGray)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkKhaki)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkMagenta)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkOliveGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkOrange)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkOrchid)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkRed)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkSalmon)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkSeaGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkSlateBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkSlateGray)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkTurquoise)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DarkViolet)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DeepPink)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DeepSkyBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DimGray)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DodgerBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Firebrick)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_FloralWhite)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ForestGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Fuchsia)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Gainsboro)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_GhostWhite)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Gold)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Goldenrod)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Gray)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Green)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_GreenYellow)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Honeydew)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_HotPink)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_IndianRed)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Indigo)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Ivory)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Khaki)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Lavender)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LavenderBlush)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LawnGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LemonChiffon)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightCoral)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightCyan)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightGoldenrodYellow)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightGray)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightPink)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightSalmon)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightSeaGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightSkyBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightSlateGray)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightSteelBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightYellow)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Lime)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_LimeGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Linen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Magenta)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Maroon)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumAquamarine)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumOrchid)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumPurple)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumSeaGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumSlateBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumSpringGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumTurquoise)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MediumVioletRed)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MidnightBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MintCream)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_MistyRose)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Moccasin)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_NavajoWhite)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Navy)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_OldLace)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Olive)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_OliveDrab)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Orange)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_OrangeRed)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Orchid)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaleGoldenrod)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaleGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaleTurquoise)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaleVioletRed)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PapayaWhip)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PeachPuff)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Peru)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Pink)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Plum)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PowderBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Purple)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Red)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_RosyBrown)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_RoyalBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SaddleBrown)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Salmon)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SandyBrown)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SeaGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SeaShell)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Sienna)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Silver)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SkyBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SlateBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SlateGray)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Snow)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SpringGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SteelBlue)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Tan)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Teal)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Thistle)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Tomato)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Transparent)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Turquoise)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Violet)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Wheat)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_White)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_WhiteSmoke)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Yellow)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* get_YellowGreen)(_q_CMicrosoft_CUI_CIColorsStatics* pThis, _q_CWindows_CUI_CColor* __pret);
} _q_CMicrosoft_CUI_CIColorsStaticsVtbl;
struct _q_CMicrosoft_CUI_CIColorsStatics
{
    _q_CMicrosoft_CUI_CIColorsStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CInput_CIInputCursorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CInput_CIInputCursor* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CInput_CIInputCursor* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CInput_CIInputCursor* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CInput_CIInputCursor* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CInput_CIInputCursor* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CInput_CIInputCursor* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CInput_CIInputCursorVtbl;
struct _q_CMicrosoft_CUI_CInput_CIInputCursor
{
    _q_CMicrosoft_CUI_CInput_CIInputCursorVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CInput_CIPointerPointVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CInput_CIPointerPoint* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CInput_CIPointerPoint* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CInput_CIPointerPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CInput_CIPointerPoint* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CInput_CIPointerPoint* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CInput_CIPointerPoint* This, TrustLevel* trustLevel);
    void* unneeded_get_FrameId;
    void* unneeded_get_IsInContact;
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_PointerId;
    void* unneeded_get_Position;
    void* unneeded_get_Properties;
    void* unneeded_get_Timestamp;
    void* unneeded_GetTransformedPoint;
} _q_CMicrosoft_CUI_CInput_CIPointerPointVtbl;
struct _q_CMicrosoft_CUI_CInput_CIPointerPoint
{
    _q_CMicrosoft_CUI_CInput_CIPointerPointVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer* This, TrustLevel* trustLevel);
    void* unneeded_get_EventsSource;
    void* unneeded_put_EventsSource;
    void* unneeded_GetPattern;
    void* unneeded_RaiseAutomationEvent;
    void* unneeded_RaisePropertyChangedEvent;
    void* unneeded_GetAcceleratorKey;
    void* unneeded_GetAccessKey;
    void* unneeded_GetAutomationControlType;
    void* unneeded_GetAutomationId;
    void* unneeded_GetBoundingRectangle;
    void* unneeded_GetChildren;
    void* unneeded_Navigate;
    void* unneeded_GetClassName_;
    void* unneeded_GetClickablePoint;
    void* unneeded_GetHelpText;
    void* unneeded_GetItemStatus;
    void* unneeded_GetItemType;
    void* unneeded_GetLabeledBy;
    void* unneeded_GetLocalizedControlType;
    void* unneeded_GetName;
    void* unneeded_GetOrientation;
    void* unneeded_HasKeyboardFocus;
    void* unneeded_IsContentElement;
    void* unneeded_IsControlElement;
    void* unneeded_IsEnabled;
    void* unneeded_IsKeyboardFocusable;
    void* unneeded_IsOffscreen;
    void* unneeded_IsPassword;
    void* unneeded_IsRequiredForForm;
    void* unneeded_SetFocus;
    void* unneeded_GetParent;
    void* unneeded_InvalidatePeer;
    void* unneeded_GetPeerFromPoint;
    void* unneeded_GetElementFromPoint;
    void* unneeded_GetFocusedElement;
    void* unneeded_GetLiveSetting;
    void* unneeded_ShowContextMenu;
    void* unneeded_GetControlledPeers;
    void* unneeded_GetAnnotations;
    void* unneeded_SetParent;
    void* unneeded_RaiseTextEditTextChangedEvent;
    void* unneeded_GetPositionInSet;
    void* unneeded_GetSizeOfSet;
    void* unneeded_GetLevel;
    void* unneeded_RaiseStructureChangedEvent;
    void* unneeded_GetLandmarkType;
    void* unneeded_GetLocalizedLandmarkType;
    void* unneeded_IsPeripheral;
    void* unneeded_IsDataValidForForm;
    void* unneeded_GetFullDescription;
    void* unneeded_GetCulture;
    void* unneeded_RaiseNotificationEvent;
    void* unneeded_GetHeadingLevel;
    void* unneeded_IsDialog;
} _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer
{
    _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer** __pret);
} _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactory
{
    _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeerFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIButtonVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Flyout)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Flyout)(_q_CMicrosoft_CUI_CXaml_CControls_CIButton* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* value);
} _q_CMicrosoft_CUI_CXaml_CControls_CIButtonVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIButton
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIButtonVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIButton** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIButtonStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_FlyoutProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIButtonStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIButtonStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* This, TrustLevel* trustLevel);
    void* unneeded_get_Width;
    void* unneeded_put_Width;
    void* unneeded_get_MaxWidth;
    void* unneeded_put_MaxWidth;
    void* unneeded_get_MinWidth;
    void* unneeded_put_MinWidth;
    void* unneeded_get_ActualWidth;
} _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinitionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Content)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Content)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentTemplate)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, _q_CMicrosoft_CUI_CXaml_CIDataTemplate** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ContentTemplate)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, _q_CMicrosoft_CUI_CXaml_CIDataTemplate* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentTemplateSelector)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ContentTemplateSelector)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentTransitions)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ContentTransitions)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_ContentTemplateRoot)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverridesVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* OnContentChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* pThis, IInspectable* oldContent, IInspectable* newContent);
    HRESULT (STDMETHODCALLTYPE* OnContentTemplateChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIDataTemplate* oldContentTemplate, _q_CMicrosoft_CUI_CXaml_CIDataTemplate* newContentTemplate);
    HRESULT (STDMETHODCALLTYPE* OnContentTemplateSelectorChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* oldContentTemplateSelector, _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* newContentTemplateSelector);
} _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverridesVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverridesVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ContentProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContentTemplateProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContentTemplateSelectorProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContentTransitionsProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_CursorLeft;
    void* unneeded_get_CursorTop;
} _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_IsFocusEngagementEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsFocusEngagementEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsFocusEngaged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsFocusEngaged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_RequiresPointer)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RequiresPointer)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer value);
    HRESULT (STDMETHODCALLTYPE* get_FontSize)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontSize)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_FontFamily)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily** __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontFamily)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* value);
    HRESULT (STDMETHODCALLTYPE* get_FontWeight)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CUI_CText_CFontWeight* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontWeight)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CUI_CText_CFontWeight value);
    HRESULT (STDMETHODCALLTYPE* get_FontStyle)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CUI_CText_CFontStyle* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStyle)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CUI_CText_CFontStyle value);
    HRESULT (STDMETHODCALLTYPE* get_FontStretch)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CUI_CText_CFontStretch* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStretch)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CUI_CText_CFontStretch value);
    HRESULT (STDMETHODCALLTYPE* get_CharacterSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CharacterSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Foreground)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Foreground)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTextScaleFactorEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsTextScaleFactorEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TabNavigation)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TabNavigation)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode value);
    HRESULT (STDMETHODCALLTYPE* get_Template)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Template)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate* value);
    HRESULT (STDMETHODCALLTYPE* get_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalContentAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalContentAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalContentAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CVerticalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_VerticalContentAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CVerticalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_Background)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Background)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundSizing)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing* __pret);
    HRESULT (STDMETHODCALLTYPE* put_BackgroundSizing)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing value);
    HRESULT (STDMETHODCALLTYPE* get_BorderThickness)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_BorderThickness)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_BorderBrush)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_BorderBrush)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_DefaultStyleResourceUri)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass** __pret);
    HRESULT (STDMETHODCALLTYPE* put_DefaultStyleResourceUri)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_ElementSoundMode)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CElementSoundMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ElementSoundMode)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CElementSoundMode value);
    HRESULT (STDMETHODCALLTYPE* get_CornerRadius)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CCornerRadius* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CornerRadius)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CCornerRadius value);
    HRESULT (STDMETHODCALLTYPE* add_FocusEngaged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_FocusEngaged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_FocusDisengaged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_FocusDisengaged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_IsEnabledChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_IsEnabledChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* RemoveFocusEngagement)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis);
    HRESULT (STDMETHODCALLTYPE* ApplyTemplate)(_q_CMicrosoft_CUI_CXaml_CControls_CIControl* pThis, boolean* __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIControlVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIControl
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIControlVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIControl** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverridesVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* OnPointerEntered)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPointerPressed)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPointerMoved)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPointerReleased)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPointerExited)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPointerCaptureLost)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPointerCanceled)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPointerWheelChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnTapped)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnDoubleTapped)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnHolding)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnRightTapped)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnManipulationStarting)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnManipulationInertiaStarting)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnManipulationStarted)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnManipulationDelta)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnManipulationCompleted)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnKeyUp)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnKeyDown)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPreviewKeyDown)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnPreviewKeyUp)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnGotFocus)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnLostFocus)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnCharacterReceived)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnDragEnter)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnDragLeave)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnDragOver)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* OnDrop)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventArgs* e);
} _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverridesVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverridesVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtectedVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DefaultStyleKey)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* put_DefaultStyleKey)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* pThis, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* GetTemplateChild)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected* pThis, HSTRING childName, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtectedVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtectedVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_IsFocusEngagementEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsFocusEngagedProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RequiresPointerProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontSizeProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontFamilyProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontWeightProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontStyleProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontStretchProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CharacterSpacingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ForegroundProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsTextScaleFactorEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TabNavigationProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TemplateProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaddingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalContentAlignmentProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_VerticalContentAlignmentProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundSizingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BorderThicknessProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BorderBrushProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DefaultStyleKeyProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DefaultStyleResourceUriProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ElementSoundModeProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CornerRadiusProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsTemplateFocusTargetProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* GetIsTemplateFocusTarget)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetIsTemplateFocusTarget)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsTemplateKeyTipTargetProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* GetIsTemplateKeyTipTarget)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* element, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetIsTemplateKeyTipTarget)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* element, boolean value);
} _q_CMicrosoft_CUI_CXaml_CControls_CIControlStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIControlStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplateVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate* This, TrustLevel* trustLevel);
    void* unneeded_get_TargetType;
    void* unneeded_put_TargetType;
} _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplateVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplateVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector* This, TrustLevel* trustLevel);
    void* unneeded_SelectTemplate;
    void* unneeded_SelectTemplateForItem;
} _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIGridVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_RowDefinitions)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ColumnDefinitions)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundSizing)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing* __pret);
    HRESULT (STDMETHODCALLTYPE* put_BackgroundSizing)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing value);
    HRESULT (STDMETHODCALLTYPE* get_BorderBrush)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_BorderBrush)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_BorderThickness)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_BorderThickness)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_CornerRadius)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CCornerRadius* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CornerRadius)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CCornerRadius value);
    HRESULT (STDMETHODCALLTYPE* get_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_RowSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RowSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_ColumnSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ColumnSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIGrid* pThis, DOUBLE value);
} _q_CMicrosoft_CUI_CXaml_CControls_CIGridVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIGrid
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIGridVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIGrid** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIGridStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundSizingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BorderBrushProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BorderThicknessProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CornerRadiusProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaddingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RowSpacingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ColumnSpacingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RowProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* GetRow)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* SetRow)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ColumnProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* GetColumn)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* SetColumn)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_RowSpanProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* GetRowSpan)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* SetRowSpan)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_ColumnSpanProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* GetColumnSpan)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* SetColumnSpan)(_q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* element, INT32 value);
} _q_CMicrosoft_CUI_CXaml_CControls_CIGridStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIGridStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanelVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetInsertionIndexes)(_q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel* pThis, _q_CWindows_CFoundation_CPoint position, INT32* first, INT32* second);
} _q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanelVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanelVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanelVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Children)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Background)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Background)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_IsItemsHost)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ChildrenTransitions)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ChildrenTransitions)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundTransition)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, _q_CMicrosoft_CUI_CXaml_CIBrushTransition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_BackgroundTransition)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanel* pThis, _q_CMicrosoft_CUI_CXaml_CIBrushTransition* value);
} _q_CMicrosoft_CUI_CXaml_CControls_CIPanelVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanel
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIPanelVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIPanel** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsItemsHostProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ChildrenTransitionsProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* This, TrustLevel* trustLevel);
    void* unneeded_get_Height;
    void* unneeded_put_Height;
    void* unneeded_get_MaxHeight;
    void* unneeded_put_MaxHeight;
    void* unneeded_get_MinHeight;
    void* unneeded_put_MinHeight;
    void* unneeded_get_ActualHeight;
} _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinitionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CISliderVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_IntermediateValue)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IntermediateValue)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_StepFrequency)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_StepFrequency)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_SnapsTo)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo* __pret);
    HRESULT (STDMETHODCALLTYPE* put_SnapsTo)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo value);
    HRESULT (STDMETHODCALLTYPE* get_TickFrequency)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TickFrequency)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_TickPlacement)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TickPlacement)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement value);
    HRESULT (STDMETHODCALLTYPE* get_Orientation)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CControls_COrientation* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Orientation)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CControls_COrientation value);
    HRESULT (STDMETHODCALLTYPE* get_IsDirectionReversed)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsDirectionReversed)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsThumbToolTipEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsThumbToolTipEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ThumbToolTipValueConverter)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CData_CIValueConverter** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ThumbToolTipValueConverter)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CData_CIValueConverter* value);
    HRESULT (STDMETHODCALLTYPE* get_Header)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Header)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_HeaderTemplate)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CIDataTemplate** __pret);
    HRESULT (STDMETHODCALLTYPE* put_HeaderTemplate)(_q_CMicrosoft_CUI_CXaml_CControls_CISlider* pThis, _q_CMicrosoft_CUI_CXaml_CIDataTemplate* value);
} _q_CMicrosoft_CUI_CXaml_CControls_CISliderVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CISlider
{
    _q_CMicrosoft_CUI_CXaml_CControls_CISliderVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CISliderFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CISlider** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CISliderFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CISliderFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CISliderStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_IntermediateValueProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_StepFrequencyProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SnapsToProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TickFrequencyProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TickPlacementProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_OrientationProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsDirectionReversedProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsThumbToolTipEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ThumbToolTipValueConverterProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HeaderProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HeaderTemplateProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CISliderStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CISliderStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AreScrollSnapPointsRegular)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AreScrollSnapPointsRegular)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Orientation)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CControls_COrientation* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Orientation)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CControls_COrientation value);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundSizing)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing* __pret);
    HRESULT (STDMETHODCALLTYPE* put_BackgroundSizing)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing value);
    HRESULT (STDMETHODCALLTYPE* get_BorderBrush)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_BorderBrush)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_BorderThickness)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_BorderThickness)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_CornerRadius)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CCornerRadius* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CornerRadius)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CCornerRadius value);
    HRESULT (STDMETHODCALLTYPE* get_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_Spacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Spacing)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel* pThis, DOUBLE value);
} _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AreScrollSnapPointsRegularProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_OrientationProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BackgroundSizingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BorderBrushProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BorderThicknessProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CornerRadiusProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaddingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SpacingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_FontSize)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontSize)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_FontFamily)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily** __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontFamily)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* value);
    HRESULT (STDMETHODCALLTYPE* get_FontWeight)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CFontWeight* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontWeight)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CFontWeight value);
    HRESULT (STDMETHODCALLTYPE* get_FontStyle)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CFontStyle* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStyle)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CFontStyle value);
    HRESULT (STDMETHODCALLTYPE* get_FontStretch)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CFontStretch* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStretch)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CFontStretch value);
    HRESULT (STDMETHODCALLTYPE* get_CharacterSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CharacterSpacing)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_Foreground)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Foreground)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_TextWrapping)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextWrapping* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextWrapping)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextWrapping value);
    HRESULT (STDMETHODCALLTYPE* get_TextTrimming)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextTrimming* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextTrimming)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextTrimming value);
    HRESULT (STDMETHODCALLTYPE* get_TextAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_Text)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Text)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Inlines)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Padding)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_LineHeight)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineHeight)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_LineStackingStrategy)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineStackingStrategy)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_IsTextSelectionEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsTextSelectionEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_SelectedText)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContentStart)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContentEnd)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SelectionStart)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SelectionEnd)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BaselineOffset)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SelectionHighlightColor)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_SelectionHighlightColor)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_MaxLines)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_MaxLines)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_TextLineBounds)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextLineBounds* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextLineBounds)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextLineBounds value);
    HRESULT (STDMETHODCALLTYPE* get_OpticalMarginAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_OpticalMarginAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_IsColorFontEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsColorFontEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TextReadingOrder)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextReadingOrder* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextReadingOrder)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextReadingOrder value);
    HRESULT (STDMETHODCALLTYPE* get_IsTextScaleFactorEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsTextScaleFactorEnabled)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TextDecorations)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CTextDecorations* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextDecorations)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CUI_CText_CTextDecorations value);
    HRESULT (STDMETHODCALLTYPE* get_IsTextTrimmed)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalTextAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalTextAlignment)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CTextAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_TextHighlighters)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SelectionFlyout)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase** __pret);
    HRESULT (STDMETHODCALLTYPE* put_SelectionFlyout)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* value);
    HRESULT (STDMETHODCALLTYPE* add_SelectionChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_SelectionChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ContextMenuOpening)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ContextMenuOpening)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_IsTextTrimmedChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_IsTextTrimmedChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* SelectAll)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis);
    HRESULT (STDMETHODCALLTYPE* Select)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* start, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* end);
    HRESULT (STDMETHODCALLTYPE* GetAlphaMask)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis, _q_CMicrosoft_CUI_CComposition_CICompositionBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* CopySelectionToClipboard)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* pThis);
} _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock
{
    _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_FontSizeProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontFamilyProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontWeightProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontStyleProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FontStretchProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CharacterSpacingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ForegroundProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TextWrappingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TextTrimmingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TextAlignmentProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TextProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PaddingProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LineHeightProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LineStackingStrategyProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsTextSelectionEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SelectedTextProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SelectionHighlightColorProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MaxLinesProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TextLineBoundsProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_OpticalMarginAlignmentProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsColorFontEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TextReadingOrderProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsTextScaleFactorEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TextDecorationsProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsTextTrimmedProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalTextAlignmentProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SelectionFlyoutProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollectionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Move)(_q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection* pThis, UINT32 oldIndex, UINT32 newIndex);
} _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollectionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollectionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Content)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Content)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* value);
} _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ContentProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ClickMode)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CClickMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ClickMode)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CClickMode value);
    HRESULT (STDMETHODCALLTYPE* get_IsPointerOver)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsPressed)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Command)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CICommand** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Command)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CICommand* value);
    HRESULT (STDMETHODCALLTYPE* get_CommandParameter)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* put_CommandParameter)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* add_Click)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Click)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBase** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ClickModeProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsPointerOverProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsPressedProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CommandProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CommandParameterProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIButtonBaseStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* This, TrustLevel* trustLevel);
    void* unneeded_get_Placement;
    void* unneeded_put_Placement;
    void* unneeded_get_Target;
    void* unneeded_get_AllowFocusOnInteraction;
    void* unneeded_put_AllowFocusOnInteraction;
    void* unneeded_get_LightDismissOverlayMode;
    void* unneeded_put_LightDismissOverlayMode;
    void* unneeded_get_AllowFocusWhenDisabled;
    void* unneeded_put_AllowFocusWhenDisabled;
    void* unneeded_get_ShowMode;
    void* unneeded_put_ShowMode;
    void* unneeded_get_InputDevicePrefersPrimaryCommands;
    void* unneeded_get_AreOpenCloseAnimationsEnabled;
    void* unneeded_put_AreOpenCloseAnimationsEnabled;
    void* unneeded_get_ShouldConstrainToRootBounds;
    void* unneeded_put_ShouldConstrainToRootBounds;
    void* unneeded_get_IsConstrainedToRootBounds;
    void* unneeded_get_ElementSoundMode;
    void* unneeded_put_ElementSoundMode;
    void* unneeded_get_OverlayInputPassThroughElement;
    void* unneeded_put_OverlayInputPassThroughElement;
    void* unneeded_get_IsOpen;
    void* unneeded_get_XamlRoot;
    void* unneeded_put_XamlRoot;
    void* unneeded_add_Opened;
    void* unneeded_remove_Opened;
    void* unneeded_add_Closed;
    void* unneeded_remove_Closed;
    void* unneeded_add_Opening;
    void* unneeded_remove_Opening;
    void* unneeded_add_Closing;
    void* unneeded_remove_Closing;
    void* unneeded_ShowAt;
    void* unneeded_ShowAtWithOptions;
    void* unneeded_Hide;
    void* unneeded_TryInvokeKeyboardAccelerator;
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBaseFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Minimum)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Minimum)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Maximum)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Maximum)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_SmallChange)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_SmallChange)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_LargeChange)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LargeChange)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Value)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* add_ValueChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ValueChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBase** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactory
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverridesVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* OnMinimumChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* pThis, DOUBLE oldMinimum, DOUBLE newMinimum);
    HRESULT (STDMETHODCALLTYPE* OnMaximumChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* pThis, DOUBLE oldMaximum, DOUBLE newMaximum);
    HRESULT (STDMETHODCALLTYPE* OnValueChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides* pThis, DOUBLE oldValue, DOUBLE newValue);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverridesVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverrides
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseOverridesVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_MinimumProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MaximumProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_SmallChangeProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LargeChangeProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ValueProperty)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStatics
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_OldValue;
    void* unneeded_get_NewValue;
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIRangeBaseValueChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfoVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AreHorizontalSnapPointsRegular)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_AreVerticalSnapPointsRegular)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* add_HorizontalSnapPointsChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_HorizontalSnapPointsChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_VerticalSnapPointsChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_VerticalSnapPointsChanged)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* GetIrregularSnapPoints)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, _q_CMicrosoft_CUI_CXaml_CControls_COrientation orientation, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment alignment, _cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT** __pret);
    HRESULT (STDMETHODCALLTYPE* GetRegularSnapPoints)(_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo* pThis, _q_CMicrosoft_CUI_CXaml_CControls_COrientation orientation, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSnapPointsAlignment alignment, FLOAT* offset, FLOAT* __pret);
} _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfoVtbl;
struct _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfo
{
    _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIScrollSnapPointsInfoVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBase* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseVtbl;
struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingBase
{
    _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CData_CIBindingBase** __pret);
} _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactory
{
    _q_CMicrosoft_CUI_CXaml_CData_CIBindingBaseFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression* This, TrustLevel* trustLevel);
    void* unneeded_get_DataItem;
    void* unneeded_get_ParentBinding;
    void* unneeded_UpdateSource;
} _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression
{
    _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBaseVtbl;
struct _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBase
{
    _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpressionBaseVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CData_CIValueConverterVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter* This, TrustLevel* trustLevel);
    void* unneeded_Convert;
    void* unneeded_ConvertBack;
} _q_CMicrosoft_CUI_CXaml_CData_CIValueConverterVtbl;
struct _q_CMicrosoft_CUI_CXaml_CData_CIValueConverter
{
    _q_CMicrosoft_CUI_CXaml_CData_CIValueConverterVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineVtbl;
struct _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline
{
    _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline** __pret);
} _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactory
{
    _q_CMicrosoft_CUI_CXaml_CDocuments_CIInlineFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement* This, TrustLevel* trustLevel);
    void* unneeded_get_Name;
    void* unneeded_get_FontSize;
    void* unneeded_put_FontSize;
    void* unneeded_get_FontFamily;
    void* unneeded_put_FontFamily;
    void* unneeded_get_FontWeight;
    void* unneeded_put_FontWeight;
    void* unneeded_get_FontStyle;
    void* unneeded_put_FontStyle;
    void* unneeded_get_FontStretch;
    void* unneeded_put_FontStretch;
    void* unneeded_get_CharacterSpacing;
    void* unneeded_put_CharacterSpacing;
    void* unneeded_get_Foreground;
    void* unneeded_put_Foreground;
    void* unneeded_get_Language;
    void* unneeded_put_Language;
    void* unneeded_get_IsTextScaleFactorEnabled;
    void* unneeded_put_IsTextScaleFactorEnabled;
    void* unneeded_get_TextDecorations;
    void* unneeded_put_TextDecorations;
    void* unneeded_get_ContentStart;
    void* unneeded_get_ContentEnd;
    void* unneeded_get_ElementStart;
    void* unneeded_get_ElementEnd;
    void* unneeded_get_AllowFocusOnInteraction;
    void* unneeded_put_AllowFocusOnInteraction;
    void* unneeded_get_AccessKey;
    void* unneeded_put_AccessKey;
    void* unneeded_get_ExitDisplayModeOnAccessKeyInvoked;
    void* unneeded_put_ExitDisplayModeOnAccessKeyInvoked;
    void* unneeded_get_IsAccessKeyScope;
    void* unneeded_put_IsAccessKeyScope;
    void* unneeded_get_AccessKeyScopeOwner;
    void* unneeded_put_AccessKeyScopeOwner;
    void* unneeded_get_KeyTipPlacementMode;
    void* unneeded_put_KeyTipPlacementMode;
    void* unneeded_get_KeyTipHorizontalOffset;
    void* unneeded_put_KeyTipHorizontalOffset;
    void* unneeded_get_KeyTipVerticalOffset;
    void* unneeded_put_KeyTipVerticalOffset;
    void* unneeded_get_XamlRoot;
    void* unneeded_put_XamlRoot;
    void* unneeded_add_AccessKeyDisplayRequested;
    void* unneeded_remove_AccessKeyDisplayRequested;
    void* unneeded_add_AccessKeyDisplayDismissed;
    void* unneeded_remove_AccessKeyDisplayDismissed;
    void* unneeded_add_AccessKeyInvoked;
    void* unneeded_remove_AccessKeyInvoked;
    void* unneeded_FindName;
} _q_CMicrosoft_CUI_CXaml_CDocuments_CITextElementVtbl;
struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextElement
{
    _q_CMicrosoft_CUI_CXaml_CDocuments_CITextElementVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* This, TrustLevel* trustLevel);
    void* unneeded_get_Ranges;
    void* unneeded_get_Foreground;
    void* unneeded_put_Foreground;
    void* unneeded_get_Background;
    void* unneeded_put_Background;
} _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterVtbl;
struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter
{
    _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter** __pret);
} _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactory
{
    _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighterFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer* This, TrustLevel* trustLevel);
    void* unneeded_get_Parent;
    void* unneeded_get_VisualParent;
    void* unneeded_get_LogicalDirection;
    void* unneeded_get_Offset;
    void* unneeded_GetCharacterRect;
    void* unneeded_GetPositionAtOffset;
} _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer
{
    _q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIApplication* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIApplication* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIApplication* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIApplication* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIApplication* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIApplication* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Resources)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CIResourceDictionary** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Resources)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CIResourceDictionary* value);
    HRESULT (STDMETHODCALLTYPE* get_DebugSettings)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CIDebugSettings** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RequestedTheme)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CApplicationTheme* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RequestedTheme)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CApplicationTheme value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualKind)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CFocusVisualKind* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualKind)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CFocusVisualKind value);
    HRESULT (STDMETHODCALLTYPE* get_HighContrastAdjustment)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_HighContrastAdjustment)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment value);
    HRESULT (STDMETHODCALLTYPE* add_UnhandledException)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_UnhandledException)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Exit)(_q_CMicrosoft_CUI_CXaml_CIApplication* pThis);
} _q_CMicrosoft_CUI_CXaml_CIApplicationVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIApplication
{
    _q_CMicrosoft_CUI_CXaml_CIApplicationVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIApplicationFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIApplicationFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIApplicationFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIApplicationFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIApplicationFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIApplicationFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIApplicationFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIApplication** __pret);
} _q_CMicrosoft_CUI_CXaml_CIApplicationFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIApplicationFactory
{
    _q_CMicrosoft_CUI_CXaml_CIApplicationFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParamsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParamsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams
{
    _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParamsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationOverridesVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIApplicationOverrides* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIApplicationOverrides* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIApplicationOverrides* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIApplicationOverrides* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIApplicationOverrides* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIApplicationOverrides* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* OnLaunched)(_q_CMicrosoft_CUI_CXaml_CIApplicationOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs* args);
} _q_CMicrosoft_CUI_CXaml_CIApplicationOverridesVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides
{
    _q_CMicrosoft_CUI_CXaml_CIApplicationOverridesVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIApplicationStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIApplication** __pret);
    HRESULT (STDMETHODCALLTYPE* Start)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback* callback);
    HRESULT (STDMETHODCALLTYPE* LoadComponent)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* pThis, IInspectable* component, _q_CWindows_CFoundation_CIUriRuntimeClass* resourceLocator);
    HRESULT (STDMETHODCALLTYPE* LoadComponentWithResourceLocation)(_q_CMicrosoft_CUI_CXaml_CIApplicationStatics* pThis, IInspectable* component, _q_CWindows_CFoundation_CIUriRuntimeClass* resourceLocator, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation componentResourceLocation);
} _q_CMicrosoft_CUI_CXaml_CIApplicationStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIApplicationStatics
{
    _q_CMicrosoft_CUI_CXaml_CIApplicationStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptionsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions* This, TrustLevel* trustLevel);
    void* unneeded_get_AnimationDesired;
    void* unneeded_put_AnimationDesired;
    void* unneeded_get_TargetRect;
    void* unneeded_put_TargetRect;
    void* unneeded_get_HorizontalAlignmentRatio;
    void* unneeded_put_HorizontalAlignmentRatio;
    void* unneeded_get_VerticalAlignmentRatio;
    void* unneeded_put_VerticalAlignmentRatio;
    void* unneeded_get_HorizontalOffset;
    void* unneeded_put_HorizontalOffset;
    void* unneeded_get_VerticalOffset;
    void* unneeded_put_VerticalOffset;
} _q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptionsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions
{
    _q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptionsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_TargetElement;
    void* unneeded_put_TargetElement;
    void* unneeded_get_AnimationDesired;
    void* unneeded_put_AnimationDesired;
    void* unneeded_get_TargetRect;
    void* unneeded_put_TargetRect;
    void* unneeded_get_HorizontalAlignmentRatio;
    void* unneeded_get_VerticalAlignmentRatio;
    void* unneeded_get_HorizontalOffset;
    void* unneeded_put_HorizontalOffset;
    void* unneeded_get_VerticalOffset;
    void* unneeded_put_VerticalOffset;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIBrushTransitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIBrushTransition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIBrushTransition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIBrushTransition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIBrushTransition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIBrushTransition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIBrushTransition* This, TrustLevel* trustLevel);
    void* unneeded_get_Duration;
    void* unneeded_put_Duration;
} _q_CMicrosoft_CUI_CXaml_CIBrushTransitionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIBrushTransition
{
    _q_CMicrosoft_CUI_CXaml_CIBrushTransitionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIBrushTransition** __pret);
} _q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory
{
    _q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_NewValue;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDataTemplateVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDataTemplate* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDataTemplate* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDataTemplate* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDataTemplate* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDataTemplate* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDataTemplate* This, TrustLevel* trustLevel);
    void* unneeded_LoadContent;
} _q_CMicrosoft_CUI_CXaml_CIDataTemplateVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDataTemplate
{
    _q_CMicrosoft_CUI_CXaml_CIDataTemplateVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDataTemplateFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIDataTemplate** __pret);
} _q_CMicrosoft_CUI_CXaml_CIDataTemplateFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory
{
    _q_CMicrosoft_CUI_CXaml_CIDataTemplateFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDebugSettingsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDebugSettings* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDebugSettings* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDebugSettings* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDebugSettings* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDebugSettings* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDebugSettings* This, TrustLevel* trustLevel);
    void* unneeded_get_EnableFrameRateCounter;
    void* unneeded_put_EnableFrameRateCounter;
    void* unneeded_get_IsBindingTracingEnabled;
    void* unneeded_put_IsBindingTracingEnabled;
    void* unneeded_get_IsTextPerformanceVisualizationEnabled;
    void* unneeded_put_IsTextPerformanceVisualizationEnabled;
    void* unneeded_get_FailFastOnErrors;
    void* unneeded_put_FailFastOnErrors;
    void* unneeded_add_BindingFailed;
    void* unneeded_remove_BindingFailed;
} _q_CMicrosoft_CUI_CXaml_CIDebugSettingsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDebugSettings
{
    _q_CMicrosoft_CUI_CXaml_CIDebugSettingsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyObjectVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetValue)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* SetValue)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* ClearValue)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp);
    HRESULT (STDMETHODCALLTYPE* ReadLocalValue)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* GetAnimationBaseValue)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* RegisterPropertyChangedCallback)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback* callback, INT64* __pret);
    HRESULT (STDMETHODCALLTYPE* UnregisterPropertyChangedCallback)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, INT64 token);
    HRESULT (STDMETHODCALLTYPE* get_Dispatcher)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CWindows_CUI_CCore_CICoreDispatcher** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DispatcherQueue)(_q_CMicrosoft_CUI_CXaml_CIDependencyObject* pThis, _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue** __pret);
} _q_CMicrosoft_CUI_CXaml_CIDependencyObjectVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDependencyObject
{
    _q_CMicrosoft_CUI_CXaml_CIDependencyObjectVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
} _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory
{
    _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDependencyProperty* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDependencyProperty* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDependencyProperty* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDependencyProperty* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDependencyProperty* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDependencyProperty* This, TrustLevel* trustLevel);
    void* unneeded_GetMetadata;
} _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDependencyProperty
{
    _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Property;
    void* unneeded_get_OldValue;
    void* unneeded_get_NewValue;
} _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Interval)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* pThis, _q_CWindows_CFoundation_CTimeSpan* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Interval)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* pThis, _q_CWindows_CFoundation_CTimeSpan value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnabled)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* add_Tick)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Tick)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Start)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* pThis);
    HRESULT (STDMETHODCALLTYPE* Stop)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer* pThis);
} _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer
{
    _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer** __pret);
} _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory
{
    _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDragEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDragEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDragEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDragEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDragEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDragEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDragEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_Data;
    void* unneeded_put_Data;
    void* unneeded_get_DataView;
    void* unneeded_get_DragUIOverride;
    void* unneeded_get_Modifiers;
    void* unneeded_get_AcceptedOperation;
    void* unneeded_put_AcceptedOperation;
    void* unneeded_get_AllowedOperations;
    void* unneeded_GetDeferral;
    void* unneeded_GetPosition;
} _q_CMicrosoft_CUI_CXaml_CIDragEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDragEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIDragEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Cancel;
    void* unneeded_put_Cancel;
    void* unneeded_get_Data;
    void* unneeded_get_DragUI;
    void* unneeded_get_AllowedOperations;
    void* unneeded_put_AllowedOperations;
    void* unneeded_GetDeferral;
    void* unneeded_GetPosition;
} _q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_DropResult;
} _q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_EffectiveViewport;
    void* unneeded_get_MaxViewport;
    void* unneeded_get_BringIntoViewDistanceX;
    void* unneeded_get_BringIntoViewDistanceY;
} _q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_ErrorMessage;
} _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Triggers)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Resources)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIResourceDictionary** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Resources)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIResourceDictionary* value);
    HRESULT (STDMETHODCALLTYPE* get_Tag)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Tag)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_Language)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Language)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_ActualWidth)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ActualHeight)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Width)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Width)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Height)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Height)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MinWidth)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_MinWidth)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MaxWidth)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_MaxWidth)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MinHeight)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_MinHeight)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_MaxHeight)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_MaxHeight)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignment)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalAlignment)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignment)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CVerticalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_VerticalAlignment)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CVerticalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_Margin)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Margin)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Name)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_BaseUri)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DataContext)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* put_DataContext)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_AllowFocusOnInteraction)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AllowFocusOnInteraction)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualMargin)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualMargin)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryThickness)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualSecondaryThickness)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryThickness)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualPrimaryThickness)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CThickness value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryBrush)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualSecondaryBrush)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryBrush)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
    HRESULT (STDMETHODCALLTYPE* put_FocusVisualPrimaryBrush)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* value);
    HRESULT (STDMETHODCALLTYPE* get_AllowFocusWhenDisabled)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AllowFocusWhenDisabled)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Style)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIStyle** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Style)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIStyle* value);
    HRESULT (STDMETHODCALLTYPE* get_Parent)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FlowDirection)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CFlowDirection* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FlowDirection)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CFlowDirection value);
    HRESULT (STDMETHODCALLTYPE* get_RequestedTheme)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CElementTheme* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RequestedTheme)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CElementTheme value);
    HRESULT (STDMETHODCALLTYPE* get_IsLoaded)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ActualTheme)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CElementTheme* __pret);
    HRESULT (STDMETHODCALLTYPE* add_Loaded)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Loaded)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Unloaded)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Unloaded)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DataContextChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DataContextChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SizeChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_SizeChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LayoutUpdated)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_LayoutUpdated)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Loading)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Loading)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ActualThemeChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ActualThemeChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_EffectiveViewportChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_EffectiveViewportChanged)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* FindName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, HSTRING name, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* SetBinding)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, _q_CMicrosoft_CUI_CXaml_CData_CIBindingBase* binding);
    HRESULT (STDMETHODCALLTYPE* GetBindingExpression)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty* dp, _q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression** __pret);
} _q_CMicrosoft_CUI_CXaml_CIFrameworkElementVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElement
{
    _q_CMicrosoft_CUI_CXaml_CIFrameworkElementVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement** __pret);
} _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory
{
    _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverridesVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* MeasureOverride)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* pThis, _q_CWindows_CFoundation_CSize availableSize, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* ArrangeOverride)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* pThis, _q_CWindows_CFoundation_CSize finalSize, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* OnApplyTemplate)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* pThis);
    HRESULT (STDMETHODCALLTYPE* GoToElementStateCore)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides* pThis, HSTRING stateName, boolean useTransitions, boolean* __pret);
} _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverridesVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
{
    _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverridesVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtectedVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* InvalidateViewport)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected* pThis);
} _q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtectedVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected
{
    _q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtectedVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_TagProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LanguageProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ActualWidthProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ActualHeightProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_WidthProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HeightProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MinWidthProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MaxWidthProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MinHeightProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MaxHeightProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignmentProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignmentProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MarginProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_NameProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DataContextProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_AllowFocusOnInteractionProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualMarginProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryThicknessProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryThicknessProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualSecondaryBrushProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FocusVisualPrimaryBrushProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_AllowFocusWhenDisabledProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_StyleProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FlowDirectionProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RequestedThemeProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ActualThemeProperty)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* DeferTree)(_q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* element);
} _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics
{
    _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate
{
    _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate** __pret);
} _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory
{
    _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Arguments;
    void* unneeded_get_UWPLaunchActivatedEventArgs;
} _q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_PressedKeys;
} _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Character;
    void* unneeded_get_KeyStatus;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CICommandVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CICommand* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CICommand* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CICommand* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CICommand* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CICommand* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CICommand* This, TrustLevel* trustLevel);
    void* unneeded_add_CanExecuteChanged;
    void* unneeded_remove_CanExecuteChanged;
    void* unneeded_CanExecute;
    void* unneeded_Execute;
} _q_CMicrosoft_CUI_CXaml_CInput_CICommandVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CICommand
{
    _q_CMicrosoft_CUI_CXaml_CInput_CICommandVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_TryGetPosition;
} _q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_GetPosition;
} _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_OldFocusedElement;
    void* unneeded_get_NewFocusedElement;
    void* unneeded_put_NewFocusedElement;
    void* unneeded_get_FocusState;
    void* unneeded_get_Direction;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_InputDevice;
    void* unneeded_get_Cancel;
    void* unneeded_put_Cancel;
    void* unneeded_get_CorrelationId;
    void* unneeded_TryCancel;
    void* unneeded_TrySetNewFocusedElement;
} _q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_HoldingState;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_GetPosition;
} _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* This, TrustLevel* trustLevel);
    void* unneeded_get_Key;
    void* unneeded_put_Key;
    void* unneeded_get_Modifiers;
    void* unneeded_put_Modifiers;
    void* unneeded_get_IsEnabled;
    void* unneeded_put_IsEnabled;
    void* unneeded_get_ScopeOwner;
    void* unneeded_put_ScopeOwner;
    void* unneeded_add_Invoked;
    void* unneeded_remove_Invoked;
} _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator** __pret);
} _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_Element;
    void* unneeded_get_KeyboardAccelerator;
} _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Key)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* pThis, _q_CWindows_CSystem_CVirtualKey* __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyStatus)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* pThis, _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Handled)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Handled)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_OriginalKey)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* pThis, _q_CWindows_CSystem_CVirtualKey* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DeviceId)(_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs* pThis, HSTRING* __pret);
} _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_OldFocusedElement;
    void* unneeded_get_NewFocusedElement;
    void* unneeded_put_NewFocusedElement;
    void* unneeded_get_FocusState;
    void* unneeded_get_Direction;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_InputDevice;
    void* unneeded_get_Cancel;
    void* unneeded_put_Cancel;
    void* unneeded_get_CorrelationId;
    void* unneeded_TryCancel;
    void* unneeded_TrySetNewFocusedElement;
} _q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Container;
    void* unneeded_get_Position;
    void* unneeded_get_IsInertial;
    void* unneeded_get_Cumulative;
    void* unneeded_get_Velocities;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_PointerDeviceType;
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Container;
    void* unneeded_get_Position;
    void* unneeded_get_IsInertial;
    void* unneeded_get_Delta;
    void* unneeded_get_Cumulative;
    void* unneeded_get_Velocities;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_PointerDeviceType;
    void* unneeded_Complete;
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Container;
    void* unneeded_get_ExpansionBehavior;
    void* unneeded_put_ExpansionBehavior;
    void* unneeded_get_RotationBehavior;
    void* unneeded_put_RotationBehavior;
    void* unneeded_get_TranslationBehavior;
    void* unneeded_put_TranslationBehavior;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_Delta;
    void* unneeded_get_Cumulative;
    void* unneeded_get_Velocities;
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Container;
    void* unneeded_get_Position;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_Cumulative;
    void* unneeded_Complete;
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs** __pret);
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Mode;
    void* unneeded_put_Mode;
    void* unneeded_get_Container;
    void* unneeded_put_Container;
    void* unneeded_get_Pivot;
    void* unneeded_put_Pivot;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Direction;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_InputDevice;
} _q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointer* This, TrustLevel* trustLevel);
    void* unneeded_get_PointerId;
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_IsInContact;
    void* unneeded_get_IsInRange;
} _q_CMicrosoft_CUI_CXaml_CInput_CIPointerVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointer
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIPointerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Pointer;
    void* unneeded_get_KeyModifiers;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_IsGenerated;
    void* unneeded_GetCurrentPoint;
    void* unneeded_GetIntermediatePoints;
} _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Key;
    void* unneeded_get_Modifiers;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_GetPosition;
} _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_PointerDeviceType;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_GetPosition;
} _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionary* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionary* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionary* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionary* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionary* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionary* This, TrustLevel* trustLevel);
    void* unneeded_get_Source;
    void* unneeded_put_Source;
    void* unneeded_get_MergedDictionaries;
    void* unneeded_get_ThemeDictionaries;
} _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIResourceDictionary
{
    _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIResourceDictionary** __pret);
} _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory
{
    _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIRoutedEvent* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIRoutedEvent* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIRoutedEvent* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIRoutedEvent* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIRoutedEvent* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIRoutedEvent* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CIRoutedEventVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIRoutedEvent
{
    _q_CMicrosoft_CUI_CXaml_CIRoutedEventVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_OriginalSource)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* pThis, IInspectable** __pret);
} _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs** __pret);
} _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory
{
    _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIScalarTransitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIScalarTransition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIScalarTransition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIScalarTransition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIScalarTransition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIScalarTransition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIScalarTransition* This, TrustLevel* trustLevel);
    void* unneeded_get_Duration;
    void* unneeded_put_Duration;
} _q_CMicrosoft_CUI_CXaml_CIScalarTransitionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIScalarTransition
{
    _q_CMicrosoft_CUI_CXaml_CIScalarTransitionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIScalarTransition** __pret);
} _q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory
{
    _q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_PreviousSize;
    void* unneeded_get_NewSize;
} _q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIStyleVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIStyle* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIStyle* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIStyle* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIStyle* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIStyle* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIStyle* This, TrustLevel* trustLevel);
    void* unneeded_get_IsSealed;
    void* unneeded_get_Setters;
    void* unneeded_get_TargetType;
    void* unneeded_put_TargetType;
    void* unneeded_get_BasedOn;
    void* unneeded_put_BasedOn;
    void* unneeded_Seal;
} _q_CMicrosoft_CUI_CXaml_CIStyleVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIStyle
{
    _q_CMicrosoft_CUI_CXaml_CIStyleVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIStyleFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIStyleFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIStyleFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIStyleFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIStyleFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIStyleFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIStyleFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIStyleFactory* pThis, _q_CWindows_CUI_CXaml_CInterop_CTypeName targetType, _q_CMicrosoft_CUI_CXaml_CIStyle** __pret);
} _q_CMicrosoft_CUI_CXaml_CIStyleFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIStyleFactory
{
    _q_CMicrosoft_CUI_CXaml_CIStyleFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CITriggerBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CITriggerBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CITriggerBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CITriggerBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CITriggerBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CITriggerBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CITriggerBase* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CITriggerBaseVtbl;
struct _q_CMicrosoft_CUI_CXaml_CITriggerBase
{
    _q_CMicrosoft_CUI_CXaml_CITriggerBaseVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIUIElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIUIElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIUIElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIUIElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIUIElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIUIElement* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DesiredSize)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* get_AllowDrop)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AllowDrop)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Opacity)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Opacity)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Clip)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Clip)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry* value);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransform)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CITransform** __pret);
    HRESULT (STDMETHODCALLTYPE* put_RenderTransform)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CITransform* value);
    HRESULT (STDMETHODCALLTYPE* get_Projection)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIProjection** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Projection)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIProjection* value);
    HRESULT (STDMETHODCALLTYPE* get_Transform3D)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Transform3D)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D* value);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransformOrigin)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CPoint* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RenderTransformOrigin)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_IsHitTestVisible)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsHitTestVisible)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Visibility)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CVisibility* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Visibility)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CVisibility value);
    HRESULT (STDMETHODCALLTYPE* get_RenderSize)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* get_UseLayoutRounding)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_UseLayoutRounding)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_Transitions)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Transitions)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_CacheMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode** __pret);
    HRESULT (STDMETHODCALLTYPE* put_CacheMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTapEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsTapEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsDoubleTapEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsDoubleTapEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CanDrag)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CanDrag)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsRightTapEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsRightTapEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsHoldingEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsHoldingEnabled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ManipulationMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes value);
    HRESULT (STDMETHODCALLTYPE* get_PointerCaptures)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContextFlyout)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ContextFlyout)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase* value);
    HRESULT (STDMETHODCALLTYPE* get_CompositeMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CompositeMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode value);
    HRESULT (STDMETHODCALLTYPE* get_Lights)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CanBeScrollAnchor)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CanBeScrollAnchor)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ExitDisplayModeOnAccessKeyInvoked)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ExitDisplayModeOnAccessKeyInvoked)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_IsAccessKeyScope)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsAccessKeyScope)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKeyScopeOwner)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_AccessKeyScopeOwner)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_AccessKey)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AccessKey)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipPlacementMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipPlacementMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipHorizontalOffset)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipHorizontalOffset)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipVerticalOffset)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipVerticalOffset)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipTarget)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_KeyTipTarget)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusKeyboardNavigation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusKeyboardNavigation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusUpNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy* __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusUpNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusDownNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy* __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusDownNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusLeftNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy* __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusLeftNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusRightNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy* __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusRightNavigationStrategy)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAccelerators)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementTarget)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_KeyboardAcceleratorPlacementTarget)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_KeyboardAcceleratorPlacementMode)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode value);
    HRESULT (STDMETHODCALLTYPE* get_HighContrastAdjustment)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_HighContrastAdjustment)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment value);
    HRESULT (STDMETHODCALLTYPE* get_TabFocusNavigation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TabFocusNavigation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode value);
    HRESULT (STDMETHODCALLTYPE* get_OpacityTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIScalarTransition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_OpacityTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIScalarTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_Translation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Translation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_TranslationTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIVector3Transition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_TranslationTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIVector3Transition* value);
    HRESULT (STDMETHODCALLTYPE* get_Rotation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Rotation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_RotationTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIScalarTransition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_RotationTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIScalarTransition* value);
    HRESULT (STDMETHODCALLTYPE* get_Scale)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Scale)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_ScaleTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIVector3Transition** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ScaleTransition)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIVector3Transition* value);
    HRESULT (STDMETHODCALLTYPE* get_TransformMatrix)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CMatrix4x4* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TransformMatrix)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CMatrix4x4 value);
    HRESULT (STDMETHODCALLTYPE* get_CenterPoint)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CenterPoint)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_RotationAxis)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RotationAxis)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3 value);
    HRESULT (STDMETHODCALLTYPE* get_ActualOffset)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector3* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ActualSize)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CNumerics_CVector2* __pret);
    HRESULT (STDMETHODCALLTYPE* get_XamlRoot)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIXamlRoot** __pret);
    HRESULT (STDMETHODCALLTYPE* put_XamlRoot)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIXamlRoot* value);
    HRESULT (STDMETHODCALLTYPE* get_Shadow)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIShadow** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Shadow)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIShadow* value);
    HRESULT (STDMETHODCALLTYPE* get_RasterizationScale)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RasterizationScale)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_FocusState)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CFocusState* __pret);
    HRESULT (STDMETHODCALLTYPE* get_UseSystemFocusVisuals)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_UseSystemFocusVisuals)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusLeft)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusLeft)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusRight)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusRight)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusUp)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusUp)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusDown)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_XYFocusDown)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyObject* value);
    HRESULT (STDMETHODCALLTYPE* get_IsTabStop)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IsTabStop)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_TabIndex)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TabIndex)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* add_KeyUp)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_KeyUp)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_KeyDown)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_KeyDown)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_GotFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_GotFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LostFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_LostFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DragStarting)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DragStarting)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DropCompleted)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DropCompleted)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_CharacterReceived)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_CharacterReceived)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DragEnter)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DragEnter)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DragLeave)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DragLeave)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DragOver)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DragOver)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Drop)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIDragEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Drop)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerPressed)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerPressed)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerMoved)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerMoved)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerReleased)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerReleased)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerEntered)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerEntered)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerExited)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerExited)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerCaptureLost)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerCaptureLost)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerCanceled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerCanceled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PointerWheelChanged)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PointerWheelChanged)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Tapped)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Tapped)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_DoubleTapped)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DoubleTapped)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Holding)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Holding)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ContextRequested)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ContextRequested)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ContextCanceled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ContextCanceled)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_RightTapped)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_RightTapped)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationStarting)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationStarting)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationInertiaStarting)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationInertiaStarting)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationStarted)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationStarted)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationDelta)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationDelta)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ManipulationCompleted)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ManipulationCompleted)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AccessKeyDisplayRequested)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_AccessKeyDisplayRequested)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AccessKeyDisplayDismissed)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_AccessKeyDisplayDismissed)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_AccessKeyInvoked)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_AccessKeyInvoked)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ProcessKeyboardAccelerators)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ProcessKeyboardAccelerators)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_GettingFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_GettingFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_LosingFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_LosingFocus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_NoFocusCandidateFound)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_NoFocusCandidateFound)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PreviewKeyDown)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PreviewKeyDown)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_PreviewKeyUp)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PreviewKeyUp)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_BringIntoViewRequested)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_BringIntoViewRequested)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Measure)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CSize availableSize);
    HRESULT (STDMETHODCALLTYPE* Arrange)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CWindows_CFoundation_CRect finalRect);
    HRESULT (STDMETHODCALLTYPE* CapturePointer)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointer* value, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* ReleasePointerCapture)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointer* value);
    HRESULT (STDMETHODCALLTYPE* ReleasePointerCaptures)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis);
    HRESULT (STDMETHODCALLTYPE* AddHandler)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent* routedEvent, IInspectable* handler, boolean handledEventsToo);
    HRESULT (STDMETHODCALLTYPE* RemoveHandler)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent* routedEvent, IInspectable* handler);
    HRESULT (STDMETHODCALLTYPE* TransformToVisual)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* visual, _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform** __pret);
    HRESULT (STDMETHODCALLTYPE* InvalidateMeasure)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis);
    HRESULT (STDMETHODCALLTYPE* InvalidateArrange)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis);
    HRESULT (STDMETHODCALLTYPE* UpdateLayout)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis);
    HRESULT (STDMETHODCALLTYPE* CancelDirectManipulations)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* StartDragAsync)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CInput_CIPointerPoint* pointerPoint, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation** __pret);
    HRESULT (STDMETHODCALLTYPE* StartBringIntoView)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis);
    HRESULT (STDMETHODCALLTYPE* StartBringIntoViewWithOptions)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions* options);
    HRESULT (STDMETHODCALLTYPE* TryInvokeKeyboardAccelerator)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* Focus)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CFocusState value, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* StartAnimation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* animation);
    HRESULT (STDMETHODCALLTYPE* StopAnimation)(_q_CMicrosoft_CUI_CXaml_CIUIElement* pThis, _q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase* animation);
} _q_CMicrosoft_CUI_CXaml_CIUIElementVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIUIElement
{
    _q_CMicrosoft_CUI_CXaml_CIUIElementVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElementOverridesVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* OnCreateAutomationPeer)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer** __pret);
    HRESULT (STDMETHODCALLTYPE* OnDisconnectVisualChildren)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis);
    HRESULT (STDMETHODCALLTYPE* FindSubElementsForTouchTargeting)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis, _q_CWindows_CFoundation_CPoint point, _q_CWindows_CFoundation_CRect boundingRect, _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint** __pret);
    HRESULT (STDMETHODCALLTYPE* GetChildrenInTabFocusOrder)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis, _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject** __pret);
    HRESULT (STDMETHODCALLTYPE* OnKeyboardAcceleratorInvoked)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnProcessKeyboardAccelerators)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* args);
    HRESULT (STDMETHODCALLTYPE* OnBringIntoViewRequested)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis, _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* e);
    HRESULT (STDMETHODCALLTYPE* PopulatePropertyInfoOverride)(_q_CMicrosoft_CUI_CXaml_CIUIElementOverrides* pThis, HSTRING propertyName, _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* animationPropertyInfo);
} _q_CMicrosoft_CUI_CXaml_CIUIElementOverridesVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides
{
    _q_CMicrosoft_CUI_CXaml_CIUIElementOverridesVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElementProtectedVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ProtectedCursor)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* pThis, _q_CMicrosoft_CUI_CInput_CIInputCursor** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ProtectedCursor)(_q_CMicrosoft_CUI_CXaml_CIUIElementProtected* pThis, _q_CMicrosoft_CUI_CInput_CIInputCursor* value);
} _q_CMicrosoft_CUI_CXaml_CIUIElementProtectedVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIUIElementProtected
{
    _q_CMicrosoft_CUI_CXaml_CIUIElementProtectedVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIUIElementStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_KeyDownEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyUpEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerEnteredEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerPressedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerMovedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerReleasedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerExitedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerCaptureLostEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerCanceledEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerWheelChangedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TappedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DoubleTappedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HoldingEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RightTappedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationStartingEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationInertiaStartingEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationStartedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationDeltaEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationCompletedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DragEnterEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DragLeaveEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DragOverEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DropEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_GettingFocusEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LosingFocusEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_NoFocusCandidateFoundEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PreviewKeyDownEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CharacterReceivedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PreviewKeyUpEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_BringIntoViewRequestedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContextRequestedEvent)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEvent** __pret);
    HRESULT (STDMETHODCALLTYPE* get_AllowDropProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_OpacityProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ClipProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransformProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ProjectionProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Transform3DProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RenderTransformOriginProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsHitTestVisibleProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_VisibilityProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_UseLayoutRoundingProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TransitionsProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CacheModeProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsTapEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsDoubleTapEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CanDragProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsRightTapEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsHoldingEnabledProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ManipulationModeProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PointerCapturesProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ContextFlyoutProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CompositeModeProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LightsProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_CanBeScrollAnchorProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ExitDisplayModeOnAccessKeyInvokedProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsAccessKeyScopeProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_AccessKeyScopeOwnerProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_AccessKeyProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipPlacementModeProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipHorizontalOffsetProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipVerticalOffsetProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyTipTargetProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusKeyboardNavigationProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusUpNavigationStrategyProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusDownNavigationStrategyProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusLeftNavigationStrategyProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusRightNavigationStrategyProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementTargetProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_KeyboardAcceleratorPlacementModeProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_HighContrastAdjustmentProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TabFocusNavigationProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ShadowProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FocusStateProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_UseSystemFocusVisualsProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusLeftProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusRightProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusUpProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_XYFocusDownProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsTabStopProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TabIndexProperty)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* TryStartDirectManipulation)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIPointer* value, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* RegisterAsScrollPort)(_q_CMicrosoft_CUI_CXaml_CIUIElementStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* element);
} _q_CMicrosoft_CUI_CXaml_CIUIElementStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIUIElementStatics
{
    _q_CMicrosoft_CUI_CXaml_CIUIElementStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Exception;
    void* unneeded_get_Message;
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIVector3TransitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIVector3Transition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIVector3Transition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIVector3Transition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIVector3Transition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIVector3Transition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIVector3Transition* This, TrustLevel* trustLevel);
    void* unneeded_get_Duration;
    void* unneeded_put_Duration;
    void* unneeded_get_Components;
    void* unneeded_put_Components;
} _q_CMicrosoft_CUI_CXaml_CIVector3TransitionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIVector3Transition
{
    _q_CMicrosoft_CUI_CXaml_CIVector3TransitionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIVector3Transition** __pret);
} _q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory
{
    _q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIWindow* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIWindow* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIWindow* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIWindow* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIWindow* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIWindow* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CWindows_CFoundation_CRect* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Visible)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Content)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Content)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* get_CoreWindow)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CWindows_CUI_CCore_CICoreWindow** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Compositor)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CMicrosoft_CUI_CComposition_CICompositor** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Dispatcher)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CWindows_CUI_CCore_CICoreDispatcher** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DispatcherQueue)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Title)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Title)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendsContentIntoTitleBar)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ExtendsContentIntoTitleBar)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* add_Activated)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Activated)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Closed)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Closed)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SizeChanged)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_SizeChanged)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_VisibilityChanged)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_VisibilityChanged)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Activate)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis);
    HRESULT (STDMETHODCALLTYPE* Close)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis);
    HRESULT (STDMETHODCALLTYPE* SetTitleBar)(_q_CMicrosoft_CUI_CXaml_CIWindow* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* titleBar);
} _q_CMicrosoft_CUI_CXaml_CIWindowVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIWindow
{
    _q_CMicrosoft_CUI_CXaml_CIWindowVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_WindowActivationState;
} _q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIWindowEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIWindowEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIWindowEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIWindowEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIWindowEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIWindowEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
} _q_CMicrosoft_CUI_CXaml_CIWindowEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIWindowEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIWindowEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIWindowFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIWindowFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIWindowFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIWindowFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIWindowFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIWindowFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CIWindowFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CIWindow** __pret);
} _q_CMicrosoft_CUI_CXaml_CIWindowFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIWindowFactory
{
    _q_CMicrosoft_CUI_CXaml_CIWindowFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_Size;
} _q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIWindowStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIWindowStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIWindowStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIWindowStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIWindowStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIWindowStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Current)(_q_CMicrosoft_CUI_CXaml_CIWindowStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIWindow** __pret);
} _q_CMicrosoft_CUI_CXaml_CIWindowStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIWindowStatics
{
    _q_CMicrosoft_CUI_CXaml_CIWindowStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Handled;
    void* unneeded_put_Handled;
    void* unneeded_get_Visible;
} _q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CIXamlRootVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CIXamlRoot* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CIXamlRoot* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CIXamlRoot* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CIXamlRoot* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CIXamlRoot* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CIXamlRoot* This, TrustLevel* trustLevel);
    void* unneeded_get_Content;
    void* unneeded_get_Size;
    void* unneeded_get_RasterizationScale;
    void* unneeded_get_IsHostVisible;
    void* unneeded_add_Changed;
    void* unneeded_remove_Changed;
} _q_CMicrosoft_CUI_CXaml_CIXamlRootVtbl;
struct _q_CMicrosoft_CUI_CXaml_CIXamlRoot
{
    _q_CMicrosoft_CUI_CXaml_CIXamlRootVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransitionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransitionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Opacity)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Opacity)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* pThis, DOUBLE value);
    HRESULT (STDMETHODCALLTYPE* get_Transform)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CITransform** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Transform)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CITransform* value);
    HRESULT (STDMETHODCALLTYPE* get_RelativeTransform)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CITransform** __pret);
    HRESULT (STDMETHODCALLTYPE* put_RelativeTransform)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CITransform* value);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverridesVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* PopulatePropertyInfoOverride)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides* pThis, HSTRING propertyName, _q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo* animationPropertyInfo);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverridesVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverridesVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_OpacityProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_TransformProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RelativeTransformProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily* This, TrustLevel* trustLevel);
    void* unneeded_get_Source;
} _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory* pThis, HSTRING familyName, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform* This, TrustLevel* trustLevel);
    void* unneeded_get_Inverse;
    void* unneeded_TransformPoint;
    void* unneeded_TryTransform;
    void* unneeded_TransformBounds;
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeometryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry* This, TrustLevel* trustLevel);
    void* unneeded_get_Transform;
    void* unneeded_put_Transform;
    void* unneeded_get_Bounds;
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGeometryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGeometry
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGeometryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_SpreadMethod)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod* __pret);
    HRESULT (STDMETHODCALLTYPE* put_SpreadMethod)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod value);
    HRESULT (STDMETHODCALLTYPE* get_MappingMode)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_MappingMode)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode value);
    HRESULT (STDMETHODCALLTYPE* get_ColorInterpolationMode)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ColorInterpolationMode)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode value);
    HRESULT (STDMETHODCALLTYPE* get_GradientStops)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop** __pret);
    HRESULT (STDMETHODCALLTYPE* put_GradientStops)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* value);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_SpreadMethodProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_MappingModeProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ColorInterpolationModeProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_GradientStopsProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Color)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Color)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* pThis, _q_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_Offset)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* pThis, DOUBLE* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Offset)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* pThis, DOUBLE value);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ColorProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_OffsetProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ImageSource)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ImageSource)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource* value);
    HRESULT (STDMETHODCALLTYPE* add_ImageFailed)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* pThis, _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ImageFailed)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ImageOpened)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ImageOpened)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ImageSourceProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSourceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSourceVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIImageSourceVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_StartPoint)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* pThis, _q_CWindows_CFoundation_CPoint* __pret);
    HRESULT (STDMETHODCALLTYPE* put_StartPoint)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* pThis, _q_CWindows_CFoundation_CPoint value);
    HRESULT (STDMETHODCALLTYPE* get_EndPoint)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* pThis, _q_CWindows_CFoundation_CPoint* __pret);
    HRESULT (STDMETHODCALLTYPE* put_EndPoint)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush* pThis, _q_CWindows_CFoundation_CPoint value);
} _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithGradientStopCollectionAndAngle)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory* pThis, _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* gradientStopCollection, DOUBLE angle, _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_StartPointProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_EndPointProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CreateOptions)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions* __pret);
    HRESULT (STDMETHODCALLTYPE* put_CreateOptions)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions value);
    HRESULT (STDMETHODCALLTYPE* get_UriSource)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass** __pret);
    HRESULT (STDMETHODCALLTYPE* put_UriSource)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_DecodePixelWidth)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_DecodePixelWidth)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_DecodePixelHeight)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_DecodePixelHeight)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_DecodePixelType)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType* __pret);
    HRESULT (STDMETHODCALLTYPE* put_DecodePixelType)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType value);
    HRESULT (STDMETHODCALLTYPE* get_IsAnimatedBitmap)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsPlaying)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_AutoPlay)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AutoPlay)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* add_DownloadProgress)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DownloadProgress)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ImageOpened)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ImageOpened)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_ImageFailed)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ImageFailed)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* Play)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis);
    HRESULT (STDMETHODCALLTYPE* Stop)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage* pThis);
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithUriSource)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass* uriSource, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_CreateOptionsProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_UriSourceProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DecodePixelWidthProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DecodePixelHeightProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DecodePixelTypeProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsAnimatedBitmapProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_IsPlayingProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_AutoPlayProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PixelWidth)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* get_PixelHeight)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* SetSource)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* pThis, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* streamSource);
    HRESULT (STDMETHODCALLTYPE* SetSourceAsync)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource* pThis, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* streamSource, _q_CWindows_CFoundation_CIAsyncAction** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_PixelWidthProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PixelHeightProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Progress;
    void* unneeded_put_Progress;
} _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIProjection
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CIProjection** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry* This, TrustLevel* trustLevel);
    void* unneeded_get_Rect;
    void* unneeded_put_Rect;
} _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIShadowVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIShadowVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIShadow
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIShadowVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Color)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Color)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush* pThis, _q_CWindows_CUI_CColor value);
} _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstanceWithColor)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory* pThis, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ColorProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AlignmentX)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AlignmentX)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX value);
    HRESULT (STDMETHODCALLTYPE* get_AlignmentY)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY* __pret);
    HRESULT (STDMETHODCALLTYPE* put_AlignmentY)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY value);
    HRESULT (STDMETHODCALLTYPE* get_Stretch)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CStretch* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Stretch)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CStretch value);
} _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AlignmentXProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_AlignmentYProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
    HRESULT (STDMETHODCALLTYPE* get_StretchProperty)(_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics* pThis, _q_CMicrosoft_CUI_CXaml_CIDependencyProperty** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStaticsVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CITransformVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CITransform* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CITransform* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CITransform* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CITransform* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CITransform* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CITransform* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CITransformVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CITransform
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CITransformVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateInstance)(_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory* pThis, IInspectable* baseInterface, IInspectable** innerInterface, _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D** __pret);
} _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactoryVtbl;
struct _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactory
{
    _q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3DFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_EnergySaverStatus)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* add_EnergySaverStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_EnergySaverStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_BatteryStatus)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* add_BatteryStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_BatteryStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_PowerSupplyStatus)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* add_PowerSupplyStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PowerSupplyStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_RemainingChargePercent)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* add_RemainingChargePercentChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_RemainingChargePercentChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_RemainingDischargeTime)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CTimeSpan* __pret);
    HRESULT (STDMETHODCALLTYPE* add_RemainingDischargeTimeChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_RemainingDischargeTimeChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_PowerSourceKind)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind* __pret);
    HRESULT (STDMETHODCALLTYPE* add_PowerSourceKindChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_PowerSourceKindChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_DisplayStatus)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* add_DisplayStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_DisplayStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_SystemIdleStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_SystemIdleStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_EffectivePowerMode)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode** __pret);
    HRESULT (STDMETHODCALLTYPE* add_EffectivePowerModeChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_EffectivePowerModeChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_UserPresenceStatus)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* add_UserPresenceStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_UserPresenceStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_SystemSuspendStatus)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* add_SystemSuspendStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _cg_CWindows_CFoundation_IEventHandler_1_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_SystemSuspendStatusChanged)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
} _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStaticsVtbl;
struct _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_EffectivePowerMode2)(_q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* __pret);
} _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2Vtbl;
struct _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2
{
    _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlAttributeVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlAttribute* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlAttribute* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlAttribute* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlAttribute* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlAttribute* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlAttribute* This, TrustLevel* trustLevel);
    void* unneeded_get_Name;
    void* unneeded_get_Specified;
    void* unneeded_get_Value;
    void* unneeded_put_Value;
} _q_CWindows_CData_CXml_CDom_CIXmlAttributeVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlAttribute
{
    _q_CWindows_CData_CXml_CDom_CIXmlAttributeVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlCDataSectionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlCDataSection* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlCDataSection* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlCDataSection* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlCDataSection* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlCDataSection* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlCDataSection* This, TrustLevel* trustLevel);
} _q_CWindows_CData_CXml_CDom_CIXmlCDataSectionVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlCDataSection
{
    _q_CWindows_CData_CXml_CDom_CIXmlCDataSectionVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlCommentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlComment* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlComment* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlComment* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlComment* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlComment* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlComment* This, TrustLevel* trustLevel);
} _q_CWindows_CData_CXml_CDom_CIXmlCommentVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlComment
{
    _q_CWindows_CData_CXml_CDom_CIXmlCommentVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Doctype)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocumentType** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Implementation)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDomImplementation** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DocumentElement)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, _q_CWindows_CData_CXml_CDom_CIXmlElement** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateElement)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING tagName, _q_CWindows_CData_CXml_CDom_CIXmlElement** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateDocumentFragment)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateTextNode)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING data, _q_CWindows_CData_CXml_CDom_CIXmlText** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateComment)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING data, _q_CWindows_CData_CXml_CDom_CIXmlComment** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateProcessingInstruction)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING target, HSTRING data, _q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateAttribute)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING name, _q_CWindows_CData_CXml_CDom_CIXmlAttribute** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateEntityReference)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING name, _q_CWindows_CData_CXml_CDom_CIXmlEntityReference** __pret);
    HRESULT (STDMETHODCALLTYPE* GetElementsByTagName)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING tagName, _q_CWindows_CData_CXml_CDom_CIXmlNodeList** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateCDataSection)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING data, _q_CWindows_CData_CXml_CDom_CIXmlCDataSection** __pret);
    HRESULT (STDMETHODCALLTYPE* get_DocumentUri)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* CreateAttributeNS)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, IInspectable* namespaceUri, HSTRING qualifiedName, _q_CWindows_CData_CXml_CDom_CIXmlAttribute** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateElementNS)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, IInspectable* namespaceUri, HSTRING qualifiedName, _q_CWindows_CData_CXml_CDom_CIXmlElement** __pret);
    HRESULT (STDMETHODCALLTYPE* GetElementById)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, HSTRING elementId, _q_CWindows_CData_CXml_CDom_CIXmlElement** __pret);
    HRESULT (STDMETHODCALLTYPE* ImportNode)(_q_CWindows_CData_CXml_CDom_CIXmlDocument* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode* node, boolean deep, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
} _q_CWindows_CData_CXml_CDom_CIXmlDocumentVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlDocument
{
    _q_CWindows_CData_CXml_CDom_CIXmlDocumentVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentFragmentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment* This, TrustLevel* trustLevel);
} _q_CWindows_CData_CXml_CDom_CIXmlDocumentFragmentVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment
{
    _q_CWindows_CData_CXml_CDom_CIXmlDocumentFragmentVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentIOVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* LoadXml)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* pThis, HSTRING xml);
    HRESULT (STDMETHODCALLTYPE* LoadXmlWithSettings)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* pThis, HSTRING xml, _q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* loadSettings);
    HRESULT (STDMETHODCALLTYPE* SaveToFileAsync)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO* pThis, _q_CWindows_CStorage_CIStorageFile* file, _q_CWindows_CFoundation_CIAsyncAction** __pret);
} _q_CWindows_CData_CXml_CDom_CIXmlDocumentIOVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO
{
    _q_CWindows_CData_CXml_CDom_CIXmlDocumentIOVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* LoadXmlFromBuffer)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* LoadXmlFromBufferWithSettings)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, _q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* loadSettings);
} _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2Vtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2
{
    _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* LoadFromUriAsync)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadFromUriWithSettingsAsync)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, _q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* loadSettings, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadFromFileAsync)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* pThis, _q_CWindows_CStorage_CIStorageFile* file, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadFromFileWithSettingsAsync)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics* pThis, _q_CWindows_CStorage_CIStorageFile* file, _q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* loadSettings, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument** __pret);
} _q_CWindows_CData_CXml_CDom_CIXmlDocumentStaticsVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics
{
    _q_CWindows_CData_CXml_CDom_CIXmlDocumentStaticsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentTypeVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentType* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentType* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentType* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentType* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentType* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlDocumentType* This, TrustLevel* trustLevel);
    void* unneeded_get_Name;
    void* unneeded_get_Entities;
    void* unneeded_get_Notations;
} _q_CWindows_CData_CXml_CDom_CIXmlDocumentTypeVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlDocumentType
{
    _q_CWindows_CData_CXml_CDom_CIXmlDocumentTypeVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlDomImplementationVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation* This, TrustLevel* trustLevel);
    void* unneeded_HasFeature;
} _q_CWindows_CData_CXml_CDom_CIXmlDomImplementationVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlDomImplementation
{
    _q_CWindows_CData_CXml_CDom_CIXmlDomImplementationVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlElement* This, TrustLevel* trustLevel);
    void* unneeded_get_TagName;
    void* unneeded_GetAttribute;
    void* unneeded_SetAttribute;
    void* unneeded_RemoveAttribute;
    void* unneeded_GetAttributeNode;
    void* unneeded_SetAttributeNode;
    void* unneeded_RemoveAttributeNode;
    void* unneeded_GetElementsByTagName;
    void* unneeded_SetAttributeNS;
    void* unneeded_GetAttributeNS;
    void* unneeded_RemoveAttributeNS;
    void* unneeded_SetAttributeNodeNS;
    void* unneeded_GetAttributeNodeNS;
} _q_CWindows_CData_CXml_CDom_CIXmlElementVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlElement
{
    _q_CWindows_CData_CXml_CDom_CIXmlElementVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlEntityReferenceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlEntityReference* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlEntityReference* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlEntityReference* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlEntityReference* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlEntityReference* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlEntityReference* This, TrustLevel* trustLevel);
} _q_CWindows_CData_CXml_CDom_CIXmlEntityReferenceVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlEntityReference
{
    _q_CWindows_CData_CXml_CDom_CIXmlEntityReferenceVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlLoadSettingsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings* This, TrustLevel* trustLevel);
    void* unneeded_get_MaxElementDepth;
    void* unneeded_put_MaxElementDepth;
    void* unneeded_get_ProhibitDtd;
    void* unneeded_put_ProhibitDtd;
    void* unneeded_get_ResolveExternals;
    void* unneeded_put_ResolveExternals;
    void* unneeded_get_ValidateOnParse;
    void* unneeded_put_ValidateOnParse;
    void* unneeded_get_ElementContentWhiteSpace;
    void* unneeded_put_ElementContentWhiteSpace;
} _q_CWindows_CData_CXml_CDom_CIXmlLoadSettingsVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlLoadSettings
{
    _q_CWindows_CData_CXml_CDom_CIXmlLoadSettingsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap* This, TrustLevel* trustLevel);
    void* unneeded_get_Length;
    void* unneeded_Item;
    void* unneeded_GetNamedItem;
    void* unneeded_SetNamedItem;
    void* unneeded_RemoveNamedItem;
    void* unneeded_GetNamedItemNS;
    void* unneeded_RemoveNamedItemNS;
    void* unneeded_SetNamedItemNS;
} _q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMapVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap
{
    _q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMapVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNodeVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlNode* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlNode* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlNode* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlNode* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlNode* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlNode* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_NodeValue)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* put_NodeValue)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, IInspectable* value);
    HRESULT (STDMETHODCALLTYPE* get_NodeType)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CNodeType* __pret);
    HRESULT (STDMETHODCALLTYPE* get_NodeName)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ParentNode)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* get_ChildNodes)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNodeList** __pret);
    HRESULT (STDMETHODCALLTYPE* get_FirstChild)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LastChild)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* get_PreviousSibling)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* get_NextSibling)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Attributes)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap** __pret);
    HRESULT (STDMETHODCALLTYPE* HasChildNodes)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* get_OwnerDocument)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocument** __pret);
    HRESULT (STDMETHODCALLTYPE* InsertBefore)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode* newChild, _q_CWindows_CData_CXml_CDom_CIXmlNode* referenceChild, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceChild)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode* newChild, _q_CWindows_CData_CXml_CDom_CIXmlNode* referenceChild, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* RemoveChild)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode* childNode, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* AppendChild)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, _q_CWindows_CData_CXml_CDom_CIXmlNode* newChild, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* CloneNode)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, boolean deep, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* get_NamespaceUri)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* get_LocalName)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Prefix)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, IInspectable** __pret);
    HRESULT (STDMETHODCALLTYPE* Normalize)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis);
    HRESULT (STDMETHODCALLTYPE* put_Prefix)(_q_CWindows_CData_CXml_CDom_CIXmlNode* pThis, IInspectable* value);
} _q_CWindows_CData_CXml_CDom_CIXmlNodeVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlNode
{
    _q_CWindows_CData_CXml_CDom_CIXmlNodeVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNodeListVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlNodeList* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlNodeList* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlNodeList* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlNodeList* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlNodeList* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlNodeList* This, TrustLevel* trustLevel);
    void* unneeded_get_Length;
    void* unneeded_Item;
} _q_CWindows_CData_CXml_CDom_CIXmlNodeListVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlNodeList
{
    _q_CWindows_CData_CXml_CDom_CIXmlNodeListVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNodeSelectorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* SelectSingleNode)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* pThis, HSTRING xpath, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* SelectNodes)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* pThis, HSTRING xpath, _q_CWindows_CData_CXml_CDom_CIXmlNodeList** __pret);
    HRESULT (STDMETHODCALLTYPE* SelectSingleNodeNS)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* pThis, HSTRING xpath, IInspectable* namespaces, _q_CWindows_CData_CXml_CDom_CIXmlNode** __pret);
    HRESULT (STDMETHODCALLTYPE* SelectNodesNS)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSelector* pThis, HSTRING xpath, IInspectable* namespaces, _q_CWindows_CData_CXml_CDom_CIXmlNodeList** __pret);
} _q_CWindows_CData_CXml_CDom_CIXmlNodeSelectorVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlNodeSelector
{
    _q_CWindows_CData_CXml_CDom_CIXmlNodeSelectorVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetXml)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_InnerText)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_InnerText)(_q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer* pThis, HSTRING value);
} _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializerVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer
{
    _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializerVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlProcessingInstructionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction* This, TrustLevel* trustLevel);
    void* unneeded_get_Target;
    void* unneeded_get_Data;
    void* unneeded_put_Data;
} _q_CWindows_CData_CXml_CDom_CIXmlProcessingInstructionVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction
{
    _q_CWindows_CData_CXml_CDom_CIXmlProcessingInstructionVtbl* lpVtbl;
};
typedef struct _q_CWindows_CData_CXml_CDom_CIXmlTextVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CData_CXml_CDom_CIXmlText* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CData_CXml_CDom_CIXmlText* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CData_CXml_CDom_CIXmlText* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CData_CXml_CDom_CIXmlText* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CData_CXml_CDom_CIXmlText* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CData_CXml_CDom_CIXmlText* This, TrustLevel* trustLevel);
    void* unneeded_SplitText;
} _q_CWindows_CData_CXml_CDom_CIXmlTextVtbl;
struct _q_CWindows_CData_CXml_CDom_CIXmlText
{
    _q_CWindows_CData_CXml_CDom_CIXmlTextVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIAsyncActionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIAsyncAction* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIAsyncAction* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIAsyncAction* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIAsyncAction* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIAsyncAction* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIAsyncAction* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_q_CWindows_CFoundation_CIAsyncAction* pThis, _q_CWindows_CFoundation_CIAsyncActionCompletedHandler* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_q_CWindows_CFoundation_CIAsyncAction* pThis, _q_CWindows_CFoundation_CIAsyncActionCompletedHandler** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_q_CWindows_CFoundation_CIAsyncAction* pThis);
} _q_CWindows_CFoundation_CIAsyncActionVtbl;
struct _q_CWindows_CFoundation_CIAsyncAction
{
    _q_CWindows_CFoundation_CIAsyncActionVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIAsyncInfoVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIAsyncInfo* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIAsyncInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIAsyncInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIAsyncInfo* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIAsyncInfo* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIAsyncInfo* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Id)(_q_CWindows_CFoundation_CIAsyncInfo* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Status)(_q_CWindows_CFoundation_CIAsyncInfo* pThis, _q_CWindows_CFoundation_CAsyncStatus* __pret);
    HRESULT (STDMETHODCALLTYPE* get_ErrorCode)(_q_CWindows_CFoundation_CIAsyncInfo* pThis, _q_CWindows_CFoundation_CHResult* __pret);
    HRESULT (STDMETHODCALLTYPE* Cancel)(_q_CWindows_CFoundation_CIAsyncInfo* pThis);
    HRESULT (STDMETHODCALLTYPE* Close)(_q_CWindows_CFoundation_CIAsyncInfo* pThis);
} _q_CWindows_CFoundation_CIAsyncInfoVtbl;
struct _q_CWindows_CFoundation_CIAsyncInfo
{
    _q_CWindows_CFoundation_CIAsyncInfoVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIClosableVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIClosable* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIClosable* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIClosable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIClosable* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIClosable* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIClosable* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Close)(_q_CWindows_CFoundation_CIClosable* pThis);
} _q_CWindows_CFoundation_CIClosableVtbl;
struct _q_CWindows_CFoundation_CIClosable
{
    _q_CWindows_CFoundation_CIClosableVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIStringableVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIStringable* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIStringable* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIStringable* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIStringable* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIStringable* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIStringable* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* ToString)(_q_CWindows_CFoundation_CIStringable* pThis, HSTRING* __pret);
} _q_CWindows_CFoundation_CIStringableVtbl;
struct _q_CWindows_CFoundation_CIStringable
{
    _q_CWindows_CFoundation_CIStringableVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIUriEscapeStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIUriEscapeStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIUriEscapeStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIUriEscapeStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIUriEscapeStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIUriEscapeStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIUriEscapeStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* UnescapeComponent)(_q_CWindows_CFoundation_CIUriEscapeStatics* pThis, HSTRING toUnescape, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* EscapeComponent)(_q_CWindows_CFoundation_CIUriEscapeStatics* pThis, HSTRING toEscape, HSTRING* __pret);
} _q_CWindows_CFoundation_CIUriEscapeStaticsVtbl;
struct _q_CWindows_CFoundation_CIUriEscapeStatics
{
    _q_CWindows_CFoundation_CIUriEscapeStaticsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIUriRuntimeClassVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIUriRuntimeClass* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIUriRuntimeClass* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIUriRuntimeClass* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIUriRuntimeClass* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIUriRuntimeClass* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIUriRuntimeClass* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AbsoluteUri)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DisplayUri)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Domain)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Extension)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Fragment)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Host)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Password)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Path)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Query)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_QueryParsed)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass** __pret);
    HRESULT (STDMETHODCALLTYPE* get_RawUri)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_SchemeName)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_UserName)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Port)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Suspicious)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* Equals)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass* pUri, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* CombineUri)(_q_CWindows_CFoundation_CIUriRuntimeClass* pThis, HSTRING relativeUri, _q_CWindows_CFoundation_CIUriRuntimeClass** __pret);
} _q_CWindows_CFoundation_CIUriRuntimeClassVtbl;
struct _q_CWindows_CFoundation_CIUriRuntimeClass
{
    _q_CWindows_CFoundation_CIUriRuntimeClassVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIUriRuntimeClassFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateUri)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* pThis, HSTRING uri, _q_CWindows_CFoundation_CIUriRuntimeClass** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateWithRelativeUri)(_q_CWindows_CFoundation_CIUriRuntimeClassFactory* pThis, HSTRING baseUri, HSTRING relativeUri, _q_CWindows_CFoundation_CIUriRuntimeClass** __pret);
} _q_CWindows_CFoundation_CIUriRuntimeClassFactoryVtbl;
struct _q_CWindows_CFoundation_CIUriRuntimeClassFactory
{
    _q_CWindows_CFoundation_CIUriRuntimeClassFactoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUriVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_AbsoluteCanonicalUri)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* get_DisplayIri)(_q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri* pThis, HSTRING* __pret);
} _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUriVtbl;
struct _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri
{
    _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUriVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass* This, TrustLevel* trustLevel);
    void* unneeded_GetFirstValueByName;
} _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassVtbl;
struct _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass
{
    _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassVtbl* lpVtbl;
};
typedef struct _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateWwwFormUrlDecoder)(_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory* pThis, HSTRING query, _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass** __pret);
} _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactoryVtbl;
struct _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory
{
    _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurfaceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Description)(_q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* pThis, _q_CWindows_CGraphics_CDirectX_CDirect3D11_CDirect3DSurfaceDescription* __pret);
} _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurfaceVtbl;
struct _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface
{
    _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurfaceVtbl* lpVtbl;
};
typedef struct _q_CWindows_CGraphics_CImaging_CISoftwareBitmapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmap* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmap* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmap* This, TrustLevel* trustLevel);
    void* unneeded_get_BitmapPixelFormat;
    void* unneeded_get_BitmapAlphaMode;
    void* unneeded_get_PixelWidth;
    void* unneeded_get_PixelHeight;
    void* unneeded_get_IsReadOnly;
    void* unneeded_put_DpiX;
    void* unneeded_get_DpiX;
    void* unneeded_put_DpiY;
    void* unneeded_get_DpiY;
    void* unneeded_LockBuffer;
    void* unneeded_CopyTo;
    void* unneeded_CopyFromBuffer;
    void* unneeded_CopyToBuffer;
    void* unneeded_GetReadOnlyView;
} _q_CWindows_CGraphics_CImaging_CISoftwareBitmapVtbl;
struct _q_CWindows_CGraphics_CImaging_CISoftwareBitmap
{
    _q_CWindows_CGraphics_CImaging_CISoftwareBitmapVtbl* lpVtbl;
};
typedef struct _q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* pThis, _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat format, INT32 width, INT32 height, _q_CWindows_CGraphics_CImaging_CISoftwareBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateWithAlpha)(_q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory* pThis, _q_CWindows_CGraphics_CImaging_CBitmapPixelFormat format, INT32 width, INT32 height, _q_CWindows_CGraphics_CImaging_CBitmapAlphaMode alpha, _q_CWindows_CGraphics_CImaging_CISoftwareBitmap** __pret);
} _q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactoryVtbl;
struct _q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory
{
    _q_CWindows_CGraphics_CImaging_CISoftwareBitmapFactoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CSecurity_CCryptography_CICryptographicBufferStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Compare)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* object1, _q_CWindows_CStorage_CStreams_CIBuffer* object2, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* GenerateRandom)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, UINT32 length, _q_CWindows_CStorage_CStreams_CIBuffer** __pret);
    HRESULT (STDMETHODCALLTYPE* GenerateRandomNumber)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromByteArray)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, UINT32 valueLength, UINT8* value, _q_CWindows_CStorage_CStreams_CIBuffer** __pret);
    HRESULT (STDMETHODCALLTYPE* CopyToByteArray)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, UINT32* valueLength, UINT8** value);
    HRESULT (STDMETHODCALLTYPE* DecodeFromHexString)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, HSTRING value, _q_CWindows_CStorage_CStreams_CIBuffer** __pret);
    HRESULT (STDMETHODCALLTYPE* EncodeToHexString)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* DecodeFromBase64String)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, HSTRING value, _q_CWindows_CStorage_CStreams_CIBuffer** __pret);
    HRESULT (STDMETHODCALLTYPE* EncodeToBase64String)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* ConvertStringToBinary)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, HSTRING value, _q_CWindows_CSecurity_CCryptography_CBinaryStringEncoding encoding, _q_CWindows_CStorage_CStreams_CIBuffer** __pret);
    HRESULT (STDMETHODCALLTYPE* ConvertBinaryToString)(_q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics* pThis, _q_CWindows_CSecurity_CCryptography_CBinaryStringEncoding encoding, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, HSTRING* __pret);
} _q_CWindows_CSecurity_CCryptography_CICryptographicBufferStaticsVtbl;
struct _q_CWindows_CSecurity_CCryptography_CICryptographicBufferStatics
{
    _q_CWindows_CSecurity_CCryptography_CICryptographicBufferStaticsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CStorage_CIStorageFileVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CStorage_CIStorageFile* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CStorage_CIStorageFile* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CStorage_CIStorageFile* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CStorage_CIStorageFile* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CStorage_CIStorageFile* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CStorage_CIStorageFile* This, TrustLevel* trustLevel);
    void* unneeded_get_FileType;
    void* unneeded_get_ContentType;
    void* unneeded_OpenAsync;
    void* unneeded_OpenTransactedWriteAsync;
    void* unneeded_CopyOverloadDefaultNameAndOptions;
    void* unneeded_CopyOverloadDefaultOptions;
    void* unneeded_CopyOverload;
    void* unneeded_CopyAndReplaceAsync;
    void* unneeded_MoveOverloadDefaultNameAndOptions;
    void* unneeded_MoveOverloadDefaultOptions;
    void* unneeded_MoveOverload;
    void* unneeded_MoveAndReplaceAsync;
} _q_CWindows_CStorage_CIStorageFileVtbl;
struct _q_CWindows_CStorage_CIStorageFile
{
    _q_CWindows_CStorage_CIStorageFileVtbl* lpVtbl;
};
typedef struct _q_CWindows_CStorage_CStreams_CIBufferVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CStorage_CStreams_CIBuffer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CStorage_CStreams_CIBuffer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CStorage_CStreams_CIBuffer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CStorage_CStreams_CIBuffer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CStorage_CStreams_CIBuffer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CStorage_CStreams_CIBuffer* This, TrustLevel* trustLevel);
    void* unneeded_get_Capacity;
    void* unneeded_get_Length;
    void* unneeded_put_Length;
} _q_CWindows_CStorage_CStreams_CIBufferVtbl;
struct _q_CWindows_CStorage_CStreams_CIBuffer
{
    _q_CWindows_CStorage_CStreams_CIBufferVtbl* lpVtbl;
};
typedef struct _q_CWindows_CStorage_CStreams_CIOutputStreamVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CStorage_CStreams_CIOutputStream* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CStorage_CStreams_CIOutputStream* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CStorage_CStreams_CIOutputStream* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CStorage_CStreams_CIOutputStream* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CStorage_CStreams_CIOutputStream* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CStorage_CStreams_CIOutputStream* This, TrustLevel* trustLevel);
    void* unneeded_WriteAsync;
    HRESULT (STDMETHODCALLTYPE* FlushAsync)(_q_CWindows_CStorage_CStreams_CIOutputStream* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1_boolean** __pret);
} _q_CWindows_CStorage_CStreams_CIOutputStreamVtbl;
struct _q_CWindows_CStorage_CStreams_CIOutputStream
{
    _q_CWindows_CStorage_CStreams_CIOutputStreamVtbl* lpVtbl;
};
typedef struct _q_CWindows_CStorage_CStreams_CIRandomAccessStreamVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CStorage_CStreams_CIRandomAccessStream* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CStorage_CStreams_CIRandomAccessStream* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CStorage_CStreams_CIRandomAccessStream* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CStorage_CStreams_CIRandomAccessStream* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CStorage_CStreams_CIRandomAccessStream* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CStorage_CStreams_CIRandomAccessStream* This, TrustLevel* trustLevel);
    void* unneeded_get_Size;
    void* unneeded_put_Size;
    void* unneeded_GetInputStreamAt;
    void* unneeded_GetOutputStreamAt;
    void* unneeded_get_Position;
    void* unneeded_Seek;
    void* unneeded_CloneStream;
    void* unneeded_get_CanRead;
    void* unneeded_get_CanWrite;
} _q_CWindows_CStorage_CStreams_CIRandomAccessStreamVtbl;
struct _q_CWindows_CStorage_CStreams_CIRandomAccessStream
{
    _q_CWindows_CStorage_CStreams_CIRandomAccessStreamVtbl* lpVtbl;
};
typedef struct _q_CWindows_CSystem_CIDispatcherQueueVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CSystem_CIDispatcherQueue* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CSystem_CIDispatcherQueue* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CSystem_CIDispatcherQueue* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CSystem_CIDispatcherQueue* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CSystem_CIDispatcherQueue* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CSystem_CIDispatcherQueue* This, TrustLevel* trustLevel);
    void* unneeded_CreateTimer;
    void* unneeded_TryEnqueue;
    void* unneeded_TryEnqueueWithPriority;
    void* unneeded_add_ShutdownStarting;
    void* unneeded_remove_ShutdownStarting;
    void* unneeded_add_ShutdownCompleted;
    void* unneeded_remove_ShutdownCompleted;
} _q_CWindows_CSystem_CIDispatcherQueueVtbl;
struct _q_CWindows_CSystem_CIDispatcherQueue
{
    _q_CWindows_CSystem_CIDispatcherQueueVtbl* lpVtbl;
};
typedef struct _q_CWindows_CSystem_CIDispatcherQueueControllerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CSystem_CIDispatcherQueueController* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CSystem_CIDispatcherQueueController* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CSystem_CIDispatcherQueueController* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CSystem_CIDispatcherQueueController* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CSystem_CIDispatcherQueueController* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CSystem_CIDispatcherQueueController* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DispatcherQueue)(_q_CWindows_CSystem_CIDispatcherQueueController* pThis, _q_CWindows_CSystem_CIDispatcherQueue** __pret);
    HRESULT (STDMETHODCALLTYPE* ShutdownQueueAsync)(_q_CWindows_CSystem_CIDispatcherQueueController* pThis, _q_CWindows_CFoundation_CIAsyncAction** __pret);
} _q_CWindows_CSystem_CIDispatcherQueueControllerVtbl;
struct _q_CWindows_CSystem_CIDispatcherQueueController
{
    _q_CWindows_CSystem_CIDispatcherQueueControllerVtbl* lpVtbl;
};
typedef struct _q_CWindows_CSystem_CIDispatcherQueueControllerStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CSystem_CIDispatcherQueueControllerStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CSystem_CIDispatcherQueueControllerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CSystem_CIDispatcherQueueControllerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CSystem_CIDispatcherQueueControllerStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CSystem_CIDispatcherQueueControllerStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CSystem_CIDispatcherQueueControllerStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateOnDedicatedThread)(_q_CWindows_CSystem_CIDispatcherQueueControllerStatics* pThis, _q_CWindows_CSystem_CIDispatcherQueueController** __pret);
} _q_CWindows_CSystem_CIDispatcherQueueControllerStaticsVtbl;
struct _q_CWindows_CSystem_CIDispatcherQueueControllerStatics
{
    _q_CWindows_CSystem_CIDispatcherQueueControllerStaticsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CSystem_CIUserVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CSystem_CIUser* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CSystem_CIUser* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CSystem_CIUser* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CSystem_CIUser* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CSystem_CIUser* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CSystem_CIUser* This, TrustLevel* trustLevel);
    void* unneeded_get_NonRoamableId;
    void* unneeded_get_AuthenticationStatus;
    void* unneeded_get_Type;
    void* unneeded_GetPropertyAsync;
    void* unneeded_GetPropertiesAsync;
    void* unneeded_GetPictureAsync;
} _q_CWindows_CSystem_CIUserVtbl;
struct _q_CWindows_CSystem_CIUser
{
    _q_CWindows_CSystem_CIUserVtbl* lpVtbl;
};
typedef struct _q_CWindows_CSystem_CProfile_CISystemIdentificationInfoVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Id)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* pThis, _q_CWindows_CStorage_CStreams_CIBuffer** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Source)(_q_CWindows_CSystem_CProfile_CISystemIdentificationInfo* pThis, _q_CWindows_CSystem_CProfile_CSystemIdentificationSource* __pret);
} _q_CWindows_CSystem_CProfile_CISystemIdentificationInfoVtbl;
struct _q_CWindows_CSystem_CProfile_CISystemIdentificationInfo
{
    _q_CWindows_CSystem_CProfile_CISystemIdentificationInfoVtbl* lpVtbl;
};
typedef struct _q_CWindows_CSystem_CProfile_CISystemIdentificationStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetSystemIdForPublisher)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* pThis, _q_CWindows_CSystem_CProfile_CISystemIdentificationInfo** __pret);
    HRESULT (STDMETHODCALLTYPE* GetSystemIdForUser)(_q_CWindows_CSystem_CProfile_CISystemIdentificationStatics* pThis, _q_CWindows_CSystem_CIUser* user, _q_CWindows_CSystem_CProfile_CISystemIdentificationInfo** __pret);
} _q_CWindows_CSystem_CProfile_CISystemIdentificationStaticsVtbl;
struct _q_CWindows_CSystem_CProfile_CISystemIdentificationStatics
{
    _q_CWindows_CSystem_CProfile_CISystemIdentificationStaticsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CCore_CICoreDispatcherVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CCore_CICoreDispatcher* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CCore_CICoreDispatcher* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CCore_CICoreDispatcher* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CCore_CICoreDispatcher* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CCore_CICoreDispatcher* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CCore_CICoreDispatcher* This, TrustLevel* trustLevel);
    void* unneeded_get_HasThreadAccess;
    void* unneeded_ProcessEvents;
    void* unneeded_RunAsync;
    void* unneeded_RunIdleAsync;
} _q_CWindows_CUI_CCore_CICoreDispatcherVtbl;
struct _q_CWindows_CUI_CCore_CICoreDispatcher
{
    _q_CWindows_CUI_CCore_CICoreDispatcherVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CCore_CICoreWindowVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CCore_CICoreWindow* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CCore_CICoreWindow* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CCore_CICoreWindow* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CCore_CICoreWindow* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CCore_CICoreWindow* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CCore_CICoreWindow* This, TrustLevel* trustLevel);
    void* unneeded_get_AutomationHostProvider;
    void* unneeded_get_Bounds;
    void* unneeded_get_CustomProperties;
    void* unneeded_get_Dispatcher;
    void* unneeded_get_FlowDirection;
    void* unneeded_put_FlowDirection;
    void* unneeded_get_IsInputEnabled;
    void* unneeded_put_IsInputEnabled;
    void* unneeded_get_PointerCursor;
    void* unneeded_put_PointerCursor;
    void* unneeded_get_PointerPosition;
    void* unneeded_get_Visible;
    void* unneeded_Activate;
    void* unneeded_Close;
    void* unneeded_GetAsyncKeyState;
    void* unneeded_GetKeyState;
    void* unneeded_ReleasePointerCapture;
    void* unneeded_SetPointerCapture;
    void* unneeded_add_Activated;
    void* unneeded_remove_Activated;
    void* unneeded_add_AutomationProviderRequested;
    void* unneeded_remove_AutomationProviderRequested;
    void* unneeded_add_CharacterReceived;
    void* unneeded_remove_CharacterReceived;
    void* unneeded_add_Closed;
    void* unneeded_remove_Closed;
    void* unneeded_add_InputEnabled;
    void* unneeded_remove_InputEnabled;
    void* unneeded_add_KeyDown;
    void* unneeded_remove_KeyDown;
    void* unneeded_add_KeyUp;
    void* unneeded_remove_KeyUp;
    void* unneeded_add_PointerCaptureLost;
    void* unneeded_remove_PointerCaptureLost;
    void* unneeded_add_PointerEntered;
    void* unneeded_remove_PointerEntered;
    void* unneeded_add_PointerExited;
    void* unneeded_remove_PointerExited;
    void* unneeded_add_PointerMoved;
    void* unneeded_remove_PointerMoved;
    void* unneeded_add_PointerPressed;
    void* unneeded_remove_PointerPressed;
    void* unneeded_add_PointerReleased;
    void* unneeded_remove_PointerReleased;
    void* unneeded_add_TouchHitTesting;
    void* unneeded_remove_TouchHitTesting;
    void* unneeded_add_PointerWheelChanged;
    void* unneeded_remove_PointerWheelChanged;
    void* unneeded_add_SizeChanged;
    void* unneeded_remove_SizeChanged;
    void* unneeded_add_VisibilityChanged;
    void* unneeded_remove_VisibilityChanged;
} _q_CWindows_CUI_CCore_CICoreWindowVtbl;
struct _q_CWindows_CUI_CCore_CICoreWindow
{
    _q_CWindows_CUI_CCore_CICoreWindowVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CINotificationDataVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CINotificationData* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CINotificationData* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CINotificationData* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CINotificationData* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CINotificationData* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CINotificationData* This, TrustLevel* trustLevel);
    void* unneeded_get_Values;
    void* unneeded_get_SequenceNumber;
    void* unneeded_put_SequenceNumber;
} _q_CWindows_CUI_CNotifications_CINotificationDataVtbl;
struct _q_CWindows_CUI_CNotifications_CINotificationData
{
    _q_CWindows_CUI_CNotifications_CINotificationDataVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CINotificationDataFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateNotificationDataWithValuesAndSequenceNumber)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* pThis, _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* initialValues, UINT32 sequenceNumber, _q_CWindows_CUI_CNotifications_CINotificationData** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateNotificationDataWithValues)(_q_CWindows_CUI_CNotifications_CINotificationDataFactory* pThis, _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* initialValues, _q_CWindows_CUI_CNotifications_CINotificationData** __pret);
} _q_CWindows_CUI_CNotifications_CINotificationDataFactoryVtbl;
struct _q_CWindows_CUI_CNotifications_CINotificationDataFactory
{
    _q_CWindows_CUI_CNotifications_CINotificationDataFactoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotification* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotification* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotification* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotification* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotification* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotification* This, TrustLevel* trustLevel);
    void* unneeded_get_Content;
    void* unneeded_get_DeliveryTime;
    void* unneeded_get_SnoozeInterval;
    void* unneeded_get_MaximumSnoozeCount;
    void* unneeded_put_Id;
    void* unneeded_get_Id;
} _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationVtbl;
struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotification
{
    _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateScheduledToastNotification)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocument* content, _q_CWindows_CFoundation_CDateTime deliveryTime, _q_CWindows_CUI_CNotifications_CIScheduledToastNotification** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateScheduledToastNotificationRecurring)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocument* content, _q_CWindows_CFoundation_CDateTime deliveryTime, _q_CWindows_CFoundation_CTimeSpan snoozeInterval, UINT32 maximumSnoozeCount, _q_CWindows_CUI_CNotifications_CIScheduledToastNotification** __pret);
} _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactoryVtbl;
struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactory
{
    _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationFactoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Cancel;
    void* unneeded_put_Cancel;
    void* unneeded_get_ScheduledToastNotification;
    void* unneeded_GetDeferral;
} _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgsVtbl;
struct _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs
{
    _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastDismissedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_Reason;
} _q_CWindows_CUI_CNotifications_CIToastDismissedEventArgsVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs
{
    _q_CWindows_CUI_CNotifications_CIToastDismissedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastFailedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastFailedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastFailedEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastFailedEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastFailedEventArgs* This, TrustLevel* trustLevel);
    void* unneeded_get_ErrorCode;
} _q_CWindows_CUI_CNotifications_CIToastFailedEventArgsVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastFailedEventArgs
{
    _q_CWindows_CUI_CNotifications_CIToastFailedEventArgsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotification* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotification* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotification* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotification* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotification* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotification* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Content)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocument** __pret);
    HRESULT (STDMETHODCALLTYPE* put_ExpirationTime)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime* value);
    HRESULT (STDMETHODCALLTYPE* get_ExpirationTime)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime** __pret);
    HRESULT (STDMETHODCALLTYPE* add_Dismissed)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Dismissed)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Activated)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Activated)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* add_Failed)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Failed)(_q_CWindows_CUI_CNotifications_CIToastNotification* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
} _q_CWindows_CUI_CNotifications_CIToastNotificationVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotification
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification2Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotification2* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotification2* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotification2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotification2* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotification2* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotification2* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Tag)(_q_CWindows_CUI_CNotifications_CIToastNotification2* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Tag)(_q_CWindows_CUI_CNotifications_CIToastNotification2* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Group)(_q_CWindows_CUI_CNotifications_CIToastNotification2* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_Group)(_q_CWindows_CUI_CNotifications_CIToastNotification2* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_SuppressPopup)(_q_CWindows_CUI_CNotifications_CIToastNotification2* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_SuppressPopup)(_q_CWindows_CUI_CNotifications_CIToastNotification2* pThis, boolean* __pret);
} _q_CWindows_CUI_CNotifications_CIToastNotification2Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotification2
{
    _q_CWindows_CUI_CNotifications_CIToastNotification2Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification3Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotification3* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotification3* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotification3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotification3* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotification3* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotification3* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_NotificationMirroring)(_q_CWindows_CUI_CNotifications_CIToastNotification3* pThis, _q_CWindows_CUI_CNotifications_CNotificationMirroring* __pret);
    HRESULT (STDMETHODCALLTYPE* put_NotificationMirroring)(_q_CWindows_CUI_CNotifications_CIToastNotification3* pThis, _q_CWindows_CUI_CNotifications_CNotificationMirroring value);
    HRESULT (STDMETHODCALLTYPE* get_RemoteId)(_q_CWindows_CUI_CNotifications_CIToastNotification3* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_RemoteId)(_q_CWindows_CUI_CNotifications_CIToastNotification3* pThis, HSTRING value);
} _q_CWindows_CUI_CNotifications_CIToastNotification3Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotification3
{
    _q_CWindows_CUI_CNotifications_CIToastNotification3Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification4Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotification4* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotification4* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotification4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotification4* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotification4* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotification4* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Data)(_q_CWindows_CUI_CNotifications_CIToastNotification4* pThis, _q_CWindows_CUI_CNotifications_CINotificationData** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Data)(_q_CWindows_CUI_CNotifications_CIToastNotification4* pThis, _q_CWindows_CUI_CNotifications_CINotificationData* value);
    HRESULT (STDMETHODCALLTYPE* get_Priority)(_q_CWindows_CUI_CNotifications_CIToastNotification4* pThis, _q_CWindows_CUI_CNotifications_CToastNotificationPriority* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Priority)(_q_CWindows_CUI_CNotifications_CIToastNotification4* pThis, _q_CWindows_CUI_CNotifications_CToastNotificationPriority value);
} _q_CWindows_CUI_CNotifications_CIToastNotification4Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotification4
{
    _q_CWindows_CUI_CNotifications_CIToastNotification4Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotification6Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotification6* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotification6* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotification6* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotification6* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotification6* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotification6* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_ExpiresOnReboot)(_q_CWindows_CUI_CNotifications_CIToastNotification6* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ExpiresOnReboot)(_q_CWindows_CUI_CNotifications_CIToastNotification6* pThis, boolean value);
} _q_CWindows_CUI_CNotifications_CIToastNotification6Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotification6
{
    _q_CWindows_CUI_CNotifications_CIToastNotification6Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotificationFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotificationFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotificationFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotificationFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotificationFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotificationFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateToastNotification)(_q_CWindows_CUI_CNotifications_CIToastNotificationFactory* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocument* content, _q_CWindows_CUI_CNotifications_CIToastNotification** __pret);
} _q_CWindows_CUI_CNotifications_CIToastNotificationFactoryVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotificationFactory
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationFactoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationHistoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotificationHistory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotificationHistory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotificationHistory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotificationHistory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotificationHistory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotificationHistory* This, TrustLevel* trustLevel);
    void* unneeded_RemoveGroup;
    void* unneeded_RemoveGroupWithId;
    void* unneeded_RemoveGroupedTagWithId;
    void* unneeded_RemoveGroupedTag;
    void* unneeded_Remove;
    void* unneeded_Clear;
    void* unneeded_ClearWithId;
} _q_CWindows_CUI_CNotifications_CIToastNotificationHistoryVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotificationHistory
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationHistoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUserVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser* This, TrustLevel* trustLevel);
    void* unneeded_CreateToastNotifier;
    void* unneeded_CreateToastNotifierWithId;
    void* unneeded_get_History;
    void* unneeded_get_User;
} _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUserVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUserVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateToastNotifier)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* pThis, _q_CWindows_CUI_CNotifications_CIToastNotifier** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateToastNotifierWithId)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* pThis, HSTRING applicationId, _q_CWindows_CUI_CNotifications_CIToastNotifier** __pret);
    HRESULT (STDMETHODCALLTYPE* GetTemplateContent)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics* pThis, _q_CWindows_CUI_CNotifications_CToastTemplateType type, _q_CWindows_CData_CXml_CDom_CIXmlDocument** __pret);
} _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStaticsVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStaticsVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_History)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2* pThis, _q_CWindows_CUI_CNotifications_CIToastNotificationHistory** __pret);
} _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics2Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetForUser)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* pThis, _q_CWindows_CSystem_CIUser* user, _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser** __pret);
    HRESULT (STDMETHODCALLTYPE* ConfigureNotificationMirroring)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4* pThis, _q_CWindows_CUI_CNotifications_CNotificationMirroring value);
} _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics4Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetDefault)(_q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5* pThis, _q_CWindows_CUI_CNotifications_CIToastNotificationManagerForUser** __pret);
} _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5
{
    _q_CWindows_CUI_CNotifications_CIToastNotificationManagerStatics5Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotifierVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotifier* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotifier* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotifier* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotifier* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotifier* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotifier* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Show)(_q_CWindows_CUI_CNotifications_CIToastNotifier* pThis, _q_CWindows_CUI_CNotifications_CIToastNotification* notification);
    HRESULT (STDMETHODCALLTYPE* Hide)(_q_CWindows_CUI_CNotifications_CIToastNotifier* pThis, _q_CWindows_CUI_CNotifications_CIToastNotification* notification);
    HRESULT (STDMETHODCALLTYPE* get_Setting)(_q_CWindows_CUI_CNotifications_CIToastNotifier* pThis, _q_CWindows_CUI_CNotifications_CNotificationSetting* __pret);
    HRESULT (STDMETHODCALLTYPE* AddToSchedule)(_q_CWindows_CUI_CNotifications_CIToastNotifier* pThis, _q_CWindows_CUI_CNotifications_CIScheduledToastNotification* scheduledToast);
    HRESULT (STDMETHODCALLTYPE* RemoveFromSchedule)(_q_CWindows_CUI_CNotifications_CIToastNotifier* pThis, _q_CWindows_CUI_CNotifications_CIScheduledToastNotification* scheduledToast);
    HRESULT (STDMETHODCALLTYPE* GetScheduledToastNotifications)(_q_CWindows_CUI_CNotifications_CIToastNotifier* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification** __pret);
} _q_CWindows_CUI_CNotifications_CIToastNotifierVtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotifier
{
    _q_CWindows_CUI_CNotifications_CIToastNotifierVtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotifier2Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* UpdateWithTagAndGroup)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* pThis, _q_CWindows_CUI_CNotifications_CINotificationData* data, HSTRING tag, HSTRING group, _q_CWindows_CUI_CNotifications_CNotificationUpdateResult* __pret);
    HRESULT (STDMETHODCALLTYPE* UpdateWithTag)(_q_CWindows_CUI_CNotifications_CIToastNotifier2* pThis, _q_CWindows_CUI_CNotifications_CINotificationData* data, HSTRING tag, _q_CWindows_CUI_CNotifications_CNotificationUpdateResult* __pret);
} _q_CWindows_CUI_CNotifications_CIToastNotifier2Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotifier2
{
    _q_CWindows_CUI_CNotifications_CIToastNotifier2Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CUI_CNotifications_CIToastNotifier3Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_ScheduledToastNotificationShowing)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs* handler, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_ScheduledToastNotificationShowing)(_q_CWindows_CUI_CNotifications_CIToastNotifier3* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
} _q_CWindows_CUI_CNotifications_CIToastNotifier3Vtbl;
struct _q_CWindows_CUI_CNotifications_CIToastNotifier3
{
    _q_CWindows_CUI_CNotifications_CIToastNotifier3Vtbl* lpVtbl;
};
typedef struct _q_CWindows_CWeb_CHttp_CFilters_CIHttpFilterVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* This, TrustLevel* trustLevel);
    void* unneeded_SendRequestAsync;
} _q_CWindows_CWeb_CHttp_CFilters_CIHttpFilterVtbl;
struct _q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter
{
    _q_CWindows_CWeb_CHttp_CFilters_CIHttpFilterVtbl* lpVtbl;
};
typedef struct _q_CWindows_CWeb_CHttp_CIHttpClientVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CWeb_CHttp_CIHttpClient* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CWeb_CHttp_CIHttpClient* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CWeb_CHttp_CIHttpClient* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CWeb_CHttp_CIHttpClient* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CWeb_CHttp_CIHttpClient* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CWeb_CHttp_CIHttpClient* This, TrustLevel* trustLevel);
    void* unneeded_DeleteAsync;
    HRESULT (STDMETHODCALLTYPE* GetAsync)(_q_CWindows_CWeb_CHttp_CIHttpClient* pThis, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress** __pret);
    void* unneeded_GetWithOptionAsync;
    void* unneeded_GetBufferAsync;
    void* unneeded_GetInputStreamAsync;
    void* unneeded_GetStringAsync;
    void* unneeded_PostAsync;
    void* unneeded_PutAsync;
    void* unneeded_SendRequestAsync;
    void* unneeded_SendRequestWithOptionAsync;
    void* unneeded_get_DefaultRequestHeaders;
} _q_CWindows_CWeb_CHttp_CIHttpClientVtbl;
struct _q_CWindows_CWeb_CHttp_CIHttpClient
{
    _q_CWindows_CWeb_CHttp_CIHttpClientVtbl* lpVtbl;
};
typedef struct _q_CWindows_CWeb_CHttp_CIHttpClientFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CWeb_CHttp_CIHttpClientFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CWeb_CHttp_CIHttpClientFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CWeb_CHttp_CIHttpClientFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CWeb_CHttp_CIHttpClientFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CWeb_CHttp_CIHttpClientFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CWeb_CHttp_CIHttpClientFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CWindows_CWeb_CHttp_CIHttpClientFactory* pThis, _q_CWindows_CWeb_CHttp_CFilters_CIHttpFilter* filter, _q_CWindows_CWeb_CHttp_CIHttpClient** __pret);
} _q_CWindows_CWeb_CHttp_CIHttpClientFactoryVtbl;
struct _q_CWindows_CWeb_CHttp_CIHttpClientFactory
{
    _q_CWindows_CWeb_CHttp_CIHttpClientFactoryVtbl* lpVtbl;
};
typedef struct _q_CWindows_CWeb_CHttp_CIHttpContentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CWeb_CHttp_CIHttpContent* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CWeb_CHttp_CIHttpContent* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CWeb_CHttp_CIHttpContent* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CWeb_CHttp_CIHttpContent* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CWeb_CHttp_CIHttpContent* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CWeb_CHttp_CIHttpContent* This, TrustLevel* trustLevel);
    void* unneeded_get_Headers;
    void* unneeded_BufferAllAsync;
    void* unneeded_ReadAsBufferAsync;
    void* unneeded_ReadAsInputStreamAsync;
    HRESULT (STDMETHODCALLTYPE* ReadAsStringAsync)(_q_CWindows_CWeb_CHttp_CIHttpContent* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64** __pret);
    void* unneeded_TryComputeLength;
    void* unneeded_WriteToStreamAsync;
} _q_CWindows_CWeb_CHttp_CIHttpContentVtbl;
struct _q_CWindows_CWeb_CHttp_CIHttpContent
{
    _q_CWindows_CWeb_CHttp_CIHttpContentVtbl* lpVtbl;
};
typedef struct _q_CWindows_CWeb_CHttp_CIHttpResponseMessageVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Content)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* pThis, _q_CWindows_CWeb_CHttp_CIHttpContent** __pret);
    void* unneeded_put_Content;
    void* unneeded_get_Headers;
    void* unneeded_get_IsSuccessStatusCode;
    void* unneeded_get_ReasonPhrase;
    void* unneeded_put_ReasonPhrase;
    void* unneeded_get_RequestMessage;
    void* unneeded_put_RequestMessage;
    void* unneeded_get_Source;
    void* unneeded_put_Source;
    void* unneeded_get_StatusCode;
    void* unneeded_put_StatusCode;
    void* unneeded_get_Version;
    void* unneeded_put_Version;
    HRESULT (STDMETHODCALLTYPE* EnsureSuccessStatusCode)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessage* pThis, _q_CWindows_CWeb_CHttp_CIHttpResponseMessage** __pret);
} _q_CWindows_CWeb_CHttp_CIHttpResponseMessageVtbl;
struct _q_CWindows_CWeb_CHttp_CIHttpResponseMessage
{
    _q_CWindows_CWeb_CHttp_CIHttpResponseMessageVtbl* lpVtbl;
};
typedef struct _q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory* pThis, _q_CWindows_CWeb_CHttp_CHttpStatusCode statusCode, _q_CWindows_CWeb_CHttp_CIHttpResponseMessage** __pret);
} _q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactoryVtbl;
struct _q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactory
{
    _q_CWindows_CWeb_CHttp_CIHttpResponseMessageFactoryVtbl* lpVtbl;
};
// definitions for parameterized interfaces
typedef struct _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTimeVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime* This, TrustLevel* trustLevel);
    void* unneeded_get_Value;
} _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTimeVtbl;
struct _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime
{
    _cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTimeVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs* pThis, _q_CWindows_CUI_CNotifications_CIToastNotification* sender, _q_CWindows_CUI_CNotifications_CIToastDismissedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastDismissedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectableVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable* pThis, _q_CWindows_CUI_CNotifications_CIToastNotification* sender, IInspectable* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectableVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectable
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification_IInspectableVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs* pThis, _q_CWindows_CUI_CNotifications_CIToastNotification* sender, _q_CWindows_CUI_CNotifications_CIToastFailedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotification__q_CWindows_CUI_CNotifications_CToastFailedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, TrustLevel* trustLevel);
    void* unneeded_First;
} _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING
{
    _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, TrustLevel* trustLevel);
    void* unneeded_get_Current;
    void* unneeded_get_HasCurrent;
    void* unneeded_MoveNext;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING
{
    _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING* This, TrustLevel* trustLevel);
    void* unneeded_get_Key;
    void* unneeded_get_Value;
} _cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl;
struct _cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRING
{
    _cg_CWindows_CFoundation_CCollections_IKeyValuePair_2_HSTRING_HSTRINGVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotificationVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotificationVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotification
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CUI_CNotifications_CScheduledToastNotificationVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs* pThis, _q_CWindows_CUI_CNotifications_CIToastNotifier* sender, _q_CWindows_CUI_CNotifications_CIScheduledToastNotificationShowingEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CUI_CNotifications_CToastNotifier__q_CWindows_CUI_CNotifications_CScheduledToastNotificationShowingEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocumentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* pThis, _q_CWindows_CData_CXml_CDom_CIXmlDocument** __pret);
} _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocumentVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument
{
    _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocumentVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocumentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocumentVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocument
{
    _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CData_CXml_CDom_CXmlDocumentVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1_booleanVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperation_1_boolean* pThis, boolean* __pret);
} _cg_CWindows_CFoundation_IAsyncOperation_1_booleanVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperation_1_boolean
{
    _cg_CWindows_CFoundation_IAsyncOperation_1_booleanVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_booleanVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1_boolean* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_booleanVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_boolean
{
    _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Progress)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* pThis, _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* pThis, _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* pThis, _q_CWindows_CWeb_CHttp_CIHttpResponseMessage** __pret);
} _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress
{
    _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* asyncInfo, _q_CWindows_CWeb_CHttp_CHttpProgress progressInfo);
} _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress
{
    _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IReference_1_UINT64Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IReference_1_UINT64* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IReference_1_UINT64* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IReference_1_UINT64* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IReference_1_UINT64* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IReference_1_UINT64* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IReference_1_UINT64* This, TrustLevel* trustLevel);
    void* unneeded_get_Value;
} _cg_CWindows_CFoundation_IReference_1_UINT64Vtbl;
struct _cg_CWindows_CFoundation_IReference_1_UINT64
{
    _cg_CWindows_CFoundation_IReference_1_UINT64Vtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgress
{
    _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CWeb_CHttp_CHttpResponseMessage__q_CWindows_CWeb_CHttp_CHttpProgressVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Progress)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* pThis, _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Progress)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* pThis, _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64** __pret);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* pThis, HSTRING* __pret);
} _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64Vtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64
{
    _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64Vtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* asyncInfo, UINT64 progressInfo);
} _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64Vtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64
{
    _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2_HSTRING_UINT64Vtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64Vtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64* pThis, _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_HSTRING_UINT64* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64Vtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64
{
    _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2_HSTRING_UINT64Vtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IEventHandler_1_IInspectableVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IEventHandler_1_IInspectable* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IEventHandler_1_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IEventHandler_1_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IEventHandler_1_IInspectable* pThis, IInspectable* sender, IInspectable* args);
} _cg_CWindows_CFoundation_IEventHandler_1_IInspectableVtbl;
struct _cg_CWindows_CFoundation_IEventHandler_1_IInspectable
{
    _cg_CWindows_CFoundation_IEventHandler_1_IInspectableVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerModeVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* pThis, _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* __pret);
} _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerModeVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode
{
    _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerModeVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerModeVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerModeVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode
{
    _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerModeVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIWindowActivatedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIWindowEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIWindowSizeChangedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs* pThis, IInspectable* sender, _q_CMicrosoft_CUI_CXaml_CIWindowVisibilityChangedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CITransition* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransitionVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransitionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransitionVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransitionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointerVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointerVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLightVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLightVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLightVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLightVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLightVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLightVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CIDragStartingEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CIDropCompletedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIContextRequestedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayRequestedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyDisplayDismissedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIAccessKeyInvokedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CIGettingFocusEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CILosingFocusEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CInput_CINoFocusCandidateFoundEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* sender, _q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperationVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* pThis, _q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* __pret);
} _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperationVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation
{
    _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperationVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperationVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperationVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation
{
    _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperationVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, TrustLevel* trustLevel);
    void* unneeded_First;
} _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint
{
    _cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, TrustLevel* trustLevel);
    void* unneeded_get_Current;
    void* unneeded_get_HasCurrent;
    void* unneeded_MoveNext;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint
{
    _cg_CWindows_CFoundation_CCollections_IIterator_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint* This, TrustLevel* trustLevel);
    void* unneeded_First;
} _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint
{
    _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPointVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPointVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint* This, TrustLevel* trustLevel);
    void* unneeded_get_Current;
    void* unneeded_get_HasCurrent;
    void* unneeded_MoveNext;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPointVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPoint
{
    _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CWindows_CFoundation_CPointVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObjectVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, TrustLevel* trustLevel);
    void* unneeded_First;
} _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObjectVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject
{
    _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObjectVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObjectVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject* This, TrustLevel* trustLevel);
    void* unneeded_get_Current;
    void* unneeded_get_HasCurrent;
    void* unneeded_MoveNext;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObjectVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObject
{
    _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CDependencyObjectVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CITriggerBase** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, _q_CMicrosoft_CUI_CXaml_CITriggerBase* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CITriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CITriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, _q_CMicrosoft_CUI_CXaml_CITriggerBase* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CITriggerBase* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CITriggerBase* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBaseVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBaseVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBaseVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBaseVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBaseVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* sender, _q_CMicrosoft_CUI_CXaml_CIDataContextChangedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectableVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* sender, IInspectable* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectableVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectableVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CIFrameworkElement* sender, _q_CMicrosoft_CUI_CXaml_CIEffectiveViewportChangedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CIUIElement** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, _q_CMicrosoft_CUI_CXaml_CIUIElement* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CIUIElement* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CIUIElement* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinitionVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinitionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinitionVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinitionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinitionVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinitionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinitionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinitionVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinitionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInlineVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CDocuments_CIInline* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInlineVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInlineVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInlineVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInlineVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInlineVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighterVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CDocuments_CITextHighlighter* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighterVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighterVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighterVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighterVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighterVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock* sender, _q_CMicrosoft_CUI_CXaml_CControls_CIIsTextTrimmedChangedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOATVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOATVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOAT
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1_FLOATVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop** __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* GetView)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop** __pret);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* value, UINT32* index, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* SetAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, UINT32 index, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis);
    HRESULT (STDMETHODCALLTYPE* Clear)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis);
    HRESULT (STDMETHODCALLTYPE* GetMany)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, UINT32 startIndex, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* items, UINT32* __pret);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* pThis, UINT32 itemsLength, _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop* items);
} _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop
{
    _cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, TrustLevel* trustLevel);
    void* unneeded_First;
} _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop
{
    _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop* This, TrustLevel* trustLevel);
    void* unneeded_get_Current;
    void* unneeded_get_HasCurrent;
    void* unneeded_MoveNext;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop
{
    _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStopVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, TrustLevel* trustLevel);
    void* unneeded_First;
} _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElement
{
    _cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement* This, TrustLevel* trustLevel);
    void* unneeded_get_Current;
    void* unneeded_get_HasCurrent;
    void* unneeded_MoveNext;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl;
struct _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElement
{
    _cg_CWindows_CFoundation_CCollections_IIterator_1__q_CMicrosoft_CUI_CXaml_CUIElementVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIControl* sender, _q_CMicrosoft_CUI_CXaml_CControls_CIFocusEngagedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs* pThis, _q_CMicrosoft_CUI_CXaml_CControls_CIControl* sender, _q_CMicrosoft_CUI_CXaml_CControls_CIFocusDisengagedEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecisionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, TrustLevel* trustLevel);
    void* unneeded_get_Value;
} _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecisionVtbl;
struct _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
{
    _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecisionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
} _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap
{
    _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap
{
    _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRINGVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* This, TrustLevel* trustLevel);
    void* unneeded_GetAt;
    void* unneeded_get_Size;
    void* unneeded_IndexOf;
    void* unneeded_GetMany;
} _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRINGVtbl;
struct _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING
{
    _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRINGVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* sender, _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* sender, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgsVtbl* lpVtbl;
};
