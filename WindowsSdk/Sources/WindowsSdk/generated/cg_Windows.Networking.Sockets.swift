// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4482e19b, Data2: 0x2389, Data3 : 0x5767, Data4 : (0x9b, 0x0b, 0x8d, 0x7a, 0x8e, 0xf5, 0x57, 0x43)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.DatagramSocket, Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocketMessageReceivedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IDatagramSocket>, args : Optional<Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocketMessageReceivedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.DatagramSocket(plok: Windows.Networking.Sockets.IDatagramSocket(sender)), args: Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs(plok: Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.DatagramSocket>, Optional<Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.DatagramSocket>, Optional<Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.DatagramSocket>, args : Optional<Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.DatagramSocket>, args : Optional<Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xde980538, Data2: 0x6dcd, Data3 : 0x52b0, Data4 : (0x80, 0x2f, 0x4b, 0x6c, 0xf5, 0x9a, 0x01, 0xab)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.MessageWebSocket, Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IMessageWebSocket>, args : Optional<Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.MessageWebSocket(plok: Windows.Networking.Sockets.IMessageWebSocket(sender)), args: Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs(plok: Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.MessageWebSocket>, Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.MessageWebSocket>, Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.MessageWebSocket>, args : Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.MessageWebSocket>, args : Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x03cf8f90, Data2: 0x1669, Data3 : 0x5f4d, Data4 : (0x94, 0x04, 0x2b, 0x78, 0x46, 0x78, 0xe6, 0xdd)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.IWebSocket, Windows.Networking.Sockets.WebSocketClosedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IWebSocket>, args : Optional<Windows.Networking.Sockets.IWebSocketClosedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.IWebSocket(sender), args: Windows.Networking.Sockets.WebSocketClosedEventArgs(plok: Windows.Networking.Sockets.IWebSocketClosedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.IWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.IWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.IWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender, args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2c34c585, Data2: 0x9cf6, Data3 : 0x56c7, Data4 : (0x8d, 0xd1, 0x5d, 0xa2, 0x6e, 0x32, 0x20, 0x78)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.MessageWebSocket, Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IMessageWebSocket>, args : Optional<Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.MessageWebSocket(plok: Windows.Networking.Sockets.IMessageWebSocket(sender)), args: Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs(plok: Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.MessageWebSocket>, Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.MessageWebSocket>, Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.MessageWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.MessageWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6e66714b, Data2: 0x94d1, Data3 : 0x5c08, Data4 : (0xb2, 0xb3, 0x10, 0xb8, 0x91, 0xd0, 0x87, 0x47)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.ServerMessageWebSocket, Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IServerMessageWebSocket>, args : Optional<Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.ServerMessageWebSocket(plok: Windows.Networking.Sockets.IServerMessageWebSocket(sender)), args: Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs(plok: Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, args : Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, args : Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcae65204, Data2: 0xb986, Data3 : 0x5cf3, Data4 : (0x87, 0xea, 0xb6, 0x7b, 0x00, 0xfb, 0xa7, 0x8d)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.ServerMessageWebSocket, Windows.Networking.Sockets.WebSocketClosedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IServerMessageWebSocket>, args : Optional<Windows.Networking.Sockets.IWebSocketClosedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.ServerMessageWebSocket(plok: Windows.Networking.Sockets.IServerMessageWebSocket(sender)), args: Windows.Networking.Sockets.WebSocketClosedEventArgs(plok: Windows.Networking.Sockets.IWebSocketClosedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb51c5b3b, Data2: 0x161b, Data3 : 0x559e, Data4 : (0xa5, 0x53, 0x00, 0x59, 0x33, 0x63, 0x29, 0xcc)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.ServerStreamWebSocket, Windows.Networking.Sockets.WebSocketClosedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IServerStreamWebSocket>, args : Optional<Windows.Networking.Sockets.IWebSocketClosedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.ServerStreamWebSocket(plok: Windows.Networking.Sockets.IServerStreamWebSocket(sender)), args: Windows.Networking.Sockets.WebSocketClosedEventArgs(plok: Windows.Networking.Sockets.IWebSocketClosedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.ServerStreamWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.ServerStreamWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.ServerStreamWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.ServerStreamWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs {
        return _self
    }
}
// closed interface type
public class IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe6ac8bee, Data2: 0xa31c, Data3 : 0x5af2, Data4 : (0x92, 0x27, 0x5b, 0xe2, 0xf9, 0xe8, 0x07, 0x63)) }
// method not needed: Lookup
// method not needed: get_Size
// method not needed: HasKey
// method not needed: Split
} // IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x33d00d41, Data2: 0xc94f, Data3 : 0x5a61, Data4 : (0x9a, 0xb7, 0x28, 0x0d, 0xce, 0xfa, 0x0b, 0x08)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.StreamSocketListener, Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListener>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListenerConnectionReceivedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IStreamSocketListener>, args : Optional<Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListener>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListenerConnectionReceivedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.StreamSocketListener(plok: Windows.Networking.Sockets.IStreamSocketListener(sender)), args: Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs(plok: Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.StreamSocketListener>, Optional<Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.StreamSocketListener>, Optional<Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.StreamSocketListener>, args : Optional<Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.StreamSocketListener>, args : Optional<Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x18b143d3, Data2: 0x897e, Data3 : 0x595e, Data4 : (0xac, 0xc1, 0xef, 0x35, 0x61, 0x4b, 0x4c, 0xec)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Sockets.StreamWebSocket, Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.IStreamWebSocket>, args : Optional<Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamWebSocket>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Sockets.StreamWebSocket(plok: Windows.Networking.Sockets.IStreamWebSocket(sender)), args: Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs(plok: Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Sockets.StreamWebSocket>, Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Sockets.StreamWebSocket>, Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Sockets.StreamWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Sockets.StreamWebSocket>, args : Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs {
        return _self
    }
}
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfb3e3d3c, Data2: 0x6fe5, Data3 : 0x5e27, Data4 : (0xa1, 0x32, 0x90, 0x22, 0x47, 0xe2, 0xa9, 0x3e)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.Sockets.StreamSocket>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.Sockets.StreamSocket> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket(consuming: __result);
    }
    // Windows.Networking.Sockets.StreamSocket GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.Sockets.IStreamSocket> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.Sockets.IStreamSocket(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x71b5d99e, Data2: 0x3854, Data3 : 0x5e9a, Data4 : (0xb4, 0xdc, 0xd1, 0xb5, 0x8b, 0xf1, 0x98, 0xfc)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.Sockets.StreamSocket>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket
// impl delegate type
open class AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocketVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket.from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket {
        return _self
    }
}
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CSockets_CStreamSocket?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.Sockets.IStreamSocket> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CSockets_CStreamSocket =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
