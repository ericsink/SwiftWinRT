// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Data.Pdf {
// type: Windows.Data.Pdf.IPdfDocument
// interface type
open class IPdfDocument
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xac7ebedd, Data2: 0x80fa, Data3 : 0x4089, Data4 : (0x84, 0x6e, 0x81, 0xb7, 0x7f, 0xf5, 0xa8, 0x6c)) }
    // Windows.Data.Pdf.PdfPage GetPage(System.UInt32)
    private func _n_GetPage(_ pageIndex : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CPdf_CIPdfPage>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPage(pThis, pageIndex, __presult))
        }
    }
    public func GetPage(pageIndex : Swift.UInt32) throws -> Optional<Windows.Data.Pdf.IPdfPage> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CPdf_CIPdfPage>> = nil;
        try self._n_GetPage(pageIndex, &__result);
        return Windows.Data.Pdf.IPdfPage(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_PageCount()
    private func _n_get_PageCount(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PageCount(pThis, __presult))
        }
    }
    public func get_PageCount() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_PageCount(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsPasswordProtected()
    private func _n_get_IsPasswordProtected(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPasswordProtected(pThis, __presult))
        }
    }
    public func get_IsPasswordProtected() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsPasswordProtected(&__result);
        return __result;
    }
    public var IsPasswordProtected : boolean {
        get throws {
            return try get_IsPasswordProtected();
        }
    }
    public var PageCount : Swift.UInt32 {
        get throws {
            return try get_PageCount();
        }
    }
} // IPdfDocument


// type: Windows.Data.Pdf.IPdfDocumentStatics
// interface type
open class IPdfDocumentStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x433a0b5f, Data2: 0xc007, Data3 : 0x4788, Data4 : (0x90, 0xf2, 0x08, 0x14, 0x3d, 0x92, 0x25, 0x99)) }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Pdf.PdfDocument> LoadFromFileAsync(Windows.Storage.IStorageFile)
    private func _n_LoadFromFileAsync(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromFileAsync(pThis, file, __presult))
        }
    }
    public func LoadFromFileAsync(file : Optional<Windows.Storage.IStorageFile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>> = nil;
        try self._n_LoadFromFileAsync(RawPointer(file), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument(consuming: __result);
    }
    public func LoadFromFile(file : Optional<Windows.Storage.IStorageFile>) async throws -> Optional<Windows.Data.Pdf.IPdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromFileAsync(file: file)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Pdf.PdfDocument> LoadFromFileAsync(Windows.Storage.IStorageFile, System.String)
    private func _n_LoadFromFileWithPasswordAsync(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ password : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromFileWithPasswordAsync(pThis, file, password, __presult))
        }
    }
    public func LoadFromFileWithPasswordAsync(file : Optional<Windows.Storage.IStorageFile>, password : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        let __hstr_password = try HString(password);
        return try withExtendedLifetime(__hstr_password) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>> = nil;
        try self._n_LoadFromFileWithPasswordAsync(RawPointer(file), __hstr_password.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument(consuming: __result);
        }
    }
    public func LoadFromFileWithPassword(file : Optional<Windows.Storage.IStorageFile>, password : Swift.String) async throws -> Optional<Windows.Data.Pdf.IPdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromFileWithPasswordAsync(file: file, password: password)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Pdf.PdfDocument> LoadFromStreamAsync(Windows.Storage.Streams.IRandomAccessStream)
    private func _n_LoadFromStreamAsync(_ inputStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromStreamAsync(pThis, inputStream, __presult))
        }
    }
    public func LoadFromStreamAsync(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>> = nil;
        try self._n_LoadFromStreamAsync(RawPointer(inputStream), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument(consuming: __result);
    }
    public func LoadFromStream(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Optional<Windows.Data.Pdf.IPdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromStreamAsync(inputStream: inputStream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Pdf.PdfDocument> LoadFromStreamAsync(Windows.Storage.Streams.IRandomAccessStream, System.String)
    private func _n_LoadFromStreamWithPasswordAsync(_ inputStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ password : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromStreamWithPasswordAsync(pThis, inputStream, password, __presult))
        }
    }
    public func LoadFromStreamWithPasswordAsync(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, password : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        let __hstr_password = try HString(password);
        return try withExtendedLifetime(__hstr_password) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument>> = nil;
        try self._n_LoadFromStreamWithPasswordAsync(RawPointer(inputStream), __hstr_password.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument(consuming: __result);
        }
    }
    public func LoadFromStreamWithPassword(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, password : Swift.String) async throws -> Optional<Windows.Data.Pdf.IPdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromStreamWithPasswordAsync(inputStream: inputStream, password: password)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IPdfDocumentStatics


// type: Windows.Data.Pdf.IPdfPage
// interface type
open class IPdfPage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9db4b0c8, Data2: 0x5320, Data3 : 0x4cfc, Data4 : (0xad, 0x76, 0x49, 0x3f, 0xda, 0xd0, 0xe5, 0x94)) }
    // Windows.Foundation.IAsyncAction RenderToStreamAsync(Windows.Storage.Streams.IRandomAccessStream)
    private func _n_RenderToStreamAsync(_ outputStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RenderToStreamAsync(pThis, outputStream, __presult))
        }
    }
    public func RenderToStreamAsync(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_RenderToStreamAsync(RawPointer(outputStream), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func RenderToStream(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenderToStreamAsync(outputStream: outputStream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction RenderToStreamAsync(Windows.Storage.Streams.IRandomAccessStream, Windows.Data.Pdf.PdfPageRenderOptions)
    private func _n_RenderWithOptionsToStreamAsync(_ outputStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ options : Optional<UnsafeMutablePointer<_q_CWindows_CData_CPdf_CIPdfPageRenderOptions>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RenderWithOptionsToStreamAsync(pThis, outputStream, options, __presult))
        }
    }
    public func RenderWithOptionsToStreamAsync(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, options : Optional<Windows.Data.Pdf.IPdfPageRenderOptions>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_RenderWithOptionsToStreamAsync(RawPointer(outputStream), RawPointer(options), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func RenderWithOptionsToStream(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, options : Optional<Windows.Data.Pdf.IPdfPageRenderOptions>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenderWithOptionsToStreamAsync(outputStream: outputStream, options: options)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction PreparePageAsync()
    private func _n_PreparePageAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PreparePageAsync(pThis, __presult))
        }
    }
    public func PreparePageAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_PreparePageAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func PreparePage() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PreparePageAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] System.UInt32 get_Index()
    private func _n_get_Index(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Index(pThis, __presult))
        }
    }
    public func get_Index() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Index(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Size get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_Size(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Data.Pdf.PdfPageDimensions get_Dimensions()
    private func _n_get_Dimensions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CPdf_CIPdfPageDimensions>>>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dimensions(pThis, __presult))
        }
    }
    public func get_Dimensions() throws -> Optional<Windows.Data.Pdf.IPdfPageDimensions> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CPdf_CIPdfPageDimensions>> = nil;
        try self._n_get_Dimensions(&__result);
        return Windows.Data.Pdf.IPdfPageDimensions(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Pdf.PdfPageRotation get_Rotation()
    private func _n_get_Rotation(_ __presult: UnsafeMutablePointer<_q_CWindows_CData_CPdf_CPdfPageRotation>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Rotation(pThis, __presult))
        }
    }
    public func get_Rotation() throws -> Windows.Data.Pdf.PdfPageRotation {
        var __result : _q_CWindows_CData_CPdf_CPdfPageRotation = _q_CWindows_CData_CPdf_CPdfPageRotation_Normal;
        try self._n_get_Rotation(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_PreferredZoom()
    private func _n_get_PreferredZoom(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreferredZoom(pThis, __presult))
        }
    }
    public func get_PreferredZoom() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_PreferredZoom(&__result);
        return __result;
    }
    public var Dimensions : Optional<Windows.Data.Pdf.IPdfPageDimensions> {
        get throws {
            return try get_Dimensions();
        }
    }
    public var Index : Swift.UInt32 {
        get throws {
            return try get_Index();
        }
    }
    public var PreferredZoom : Swift.Float {
        get throws {
            return try get_PreferredZoom();
        }
    }
    public var Rotation : Windows.Data.Pdf.PdfPageRotation {
        get throws {
            return try get_Rotation();
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
            return try get_Size();
        }
    }
} // IPdfPage


// type: Windows.Data.Pdf.IPdfPageDimensions
// interface type
open class IPdfPageDimensions
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x22170471, Data2: 0x313e, Data3 : 0x44e8, Data4 : (0x83, 0x5d, 0x63, 0xa3, 0xe7, 0x62, 0x4a, 0x10)) }
    // [IsSpecialName] Windows.Foundation.Rect get_MediaBox()
    private func _n_get_MediaBox(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageDimensions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaBox(pThis, __presult))
        }
    }
    public func get_MediaBox() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_MediaBox(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_CropBox()
    private func _n_get_CropBox(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageDimensions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CropBox(pThis, __presult))
        }
    }
    public func get_CropBox() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_CropBox(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_BleedBox()
    private func _n_get_BleedBox(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageDimensions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BleedBox(pThis, __presult))
        }
    }
    public func get_BleedBox() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_BleedBox(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_TrimBox()
    private func _n_get_TrimBox(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageDimensions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimBox(pThis, __presult))
        }
    }
    public func get_TrimBox() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_TrimBox(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_ArtBox()
    private func _n_get_ArtBox(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageDimensions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ArtBox(pThis, __presult))
        }
    }
    public func get_ArtBox() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_ArtBox(&__result);
        return __result;
    }
    public var ArtBox : Windows.Foundation.Rect {
        get throws {
            return try get_ArtBox();
        }
    }
    public var BleedBox : Windows.Foundation.Rect {
        get throws {
            return try get_BleedBox();
        }
    }
    public var CropBox : Windows.Foundation.Rect {
        get throws {
            return try get_CropBox();
        }
    }
    public var MediaBox : Windows.Foundation.Rect {
        get throws {
            return try get_MediaBox();
        }
    }
    public var TrimBox : Windows.Foundation.Rect {
        get throws {
            return try get_TrimBox();
        }
    }
} // IPdfPageDimensions


// type: Windows.Data.Pdf.IPdfPageRenderOptions
// interface type
open class IPdfPageRenderOptions
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3c98056f, Data2: 0xb7cf, Data3 : 0x4c29, Data4 : (0x9a, 0x04, 0x52, 0xd9, 0x02, 0x67, 0xf4, 0x25)) }
    // [IsSpecialName] Windows.Foundation.Rect get_SourceRect()
    private func _n_get_SourceRect(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRect(pThis, __presult))
        }
    }
    public func get_SourceRect() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_SourceRect(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SourceRect(Windows.Foundation.Rect)
    private func _n_put_SourceRect(_ value : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRect(pThis, value))
        }
    }
    public func put_SourceRect(value : Windows.Foundation.Rect) throws -> Void {
        try self._n_put_SourceRect(value);
    }
    // [IsSpecialName] System.UInt32 get_DestinationWidth()
    private func _n_get_DestinationWidth(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DestinationWidth(pThis, __presult))
        }
    }
    public func get_DestinationWidth() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_DestinationWidth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DestinationWidth(System.UInt32)
    private func _n_put_DestinationWidth(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DestinationWidth(pThis, value))
        }
    }
    public func put_DestinationWidth(value : Swift.UInt32) throws -> Void {
        try self._n_put_DestinationWidth(value);
    }
    // [IsSpecialName] System.UInt32 get_DestinationHeight()
    private func _n_get_DestinationHeight(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DestinationHeight(pThis, __presult))
        }
    }
    public func get_DestinationHeight() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_DestinationHeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DestinationHeight(System.UInt32)
    private func _n_put_DestinationHeight(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DestinationHeight(pThis, value))
        }
    }
    public func put_DestinationHeight(value : Swift.UInt32) throws -> Void {
        try self._n_put_DestinationHeight(value);
    }
    // [IsSpecialName] Windows.UI.Color get_BackgroundColor()
    private func _n_get_BackgroundColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundColor(pThis, __presult))
        }
    }
    public func get_BackgroundColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_BackgroundColor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BackgroundColor(Windows.UI.Color)
    private func _n_put_BackgroundColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundColor(pThis, value))
        }
    }
    public func put_BackgroundColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_BackgroundColor(value);
    }
    // [IsSpecialName] bool get_IsIgnoringHighContrast()
    private func _n_get_IsIgnoringHighContrast(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsIgnoringHighContrast(pThis, __presult))
        }
    }
    public func get_IsIgnoringHighContrast() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsIgnoringHighContrast(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsIgnoringHighContrast(bool)
    private func _n_put_IsIgnoringHighContrast(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsIgnoringHighContrast(pThis, value))
        }
    }
    public func put_IsIgnoringHighContrast(value : boolean) throws -> Void {
        try self._n_put_IsIgnoringHighContrast(value);
    }
    // [IsSpecialName] System.Guid get_BitmapEncoderId()
    private func _n_get_BitmapEncoderId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapEncoderId(pThis, __presult))
        }
    }
    public func get_BitmapEncoderId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_BitmapEncoderId(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BitmapEncoderId(System.Guid)
    private func _n_put_BitmapEncoderId(_ value : GUID) throws {
        return try perform(as: _q_CWindows_CData_CPdf_CIPdfPageRenderOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BitmapEncoderId(pThis, value))
        }
    }
    public func put_BitmapEncoderId(value : GUID) throws -> Void {
        try self._n_put_BitmapEncoderId(value);
    }
    public var BackgroundColor : Windows.UI.Color {
        get throws {
            return try get_BackgroundColor();
        }
    }
    public var BitmapEncoderId : GUID {
        get throws {
            return try get_BitmapEncoderId();
        }
    }
    public var DestinationHeight : Swift.UInt32 {
        get throws {
            return try get_DestinationHeight();
        }
    }
    public var DestinationWidth : Swift.UInt32 {
        get throws {
            return try get_DestinationWidth();
        }
    }
    public var IsIgnoringHighContrast : boolean {
        get throws {
            return try get_IsIgnoringHighContrast();
        }
    }
    public var SourceRect : Windows.Foundation.Rect {
        get throws {
            return try get_SourceRect();
        }
    }
} // IPdfPageRenderOptions


// type: Windows.Data.Pdf.PdfDocument
// runtime class
public class PdfDocument
    :
    WinRT.Object
{
    private var _self : Windows.Data.Pdf.IPdfDocument;
    public init(plok: Windows.Data.Pdf.IPdfDocument?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Pdf.IPdfDocument { return _self; }
    private struct _IPdfDocumentStatics {
        static var x : IPdfDocumentStatics =
            try! RoGetActivationFactory("Windows.Data.Pdf.PdfDocument")
    }
    public static var PdfDocumentStatics : IPdfDocumentStatics {
        _IPdfDocumentStatics.x
    }
    public static func LoadFromFileAsync(file : Optional<Windows.Storage.IStorageFile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        return try PdfDocumentStatics.LoadFromFileAsync(file: file);
    }
    public static func LoadFromFile(file : Optional<Windows.Storage.IStorageFile>) async throws -> Optional<Windows.Data.Pdf.PdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Pdf.PdfDocument(plok: Self.LoadFromFileAsync(file: file)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func LoadFromFileAsync(file : Optional<Windows.Storage.IStorageFile>, password : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        return try PdfDocumentStatics.LoadFromFileWithPasswordAsync(file: file, password: password);
    }
    public static func LoadFromFile(file : Optional<Windows.Storage.IStorageFile>, password : Swift.String) async throws -> Optional<Windows.Data.Pdf.PdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Pdf.PdfDocument(plok: Self.LoadFromFileAsync(file: file, password: password)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func LoadFromStreamAsync(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        return try PdfDocumentStatics.LoadFromStreamAsync(inputStream: inputStream);
    }
    public static func LoadFromStream(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Optional<Windows.Data.Pdf.PdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Pdf.PdfDocument(plok: Self.LoadFromStreamAsync(inputStream: inputStream)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func LoadFromStreamAsync(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, password : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CPdf_CPdfDocument> {
        return try PdfDocumentStatics.LoadFromStreamWithPasswordAsync(inputStream: inputStream, password: password);
    }
    public static func LoadFromStream(inputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, password : Swift.String) async throws -> Optional<Windows.Data.Pdf.PdfDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Pdf.PdfDocument(plok: Self.LoadFromStreamAsync(inputStream: inputStream, password: password)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetPage(pageIndex : Swift.UInt32) throws -> Optional<Windows.Data.Pdf.PdfPage> {
        let _ifc : Windows.Data.Pdf.IPdfDocument = try _self.QueryInterface();
        return try Windows.Data.Pdf.PdfPage(plok: _ifc.GetPage(pageIndex: pageIndex));
    }
    public func get_PageCount() throws -> Swift.UInt32 {
        let _ifc : Windows.Data.Pdf.IPdfDocument = try _self.QueryInterface();
        return try _ifc.get_PageCount();
    }
    public func get_IsPasswordProtected() throws -> boolean {
        let _ifc : Windows.Data.Pdf.IPdfDocument = try _self.QueryInterface();
        return try _ifc.get_IsPasswordProtected();
    }
    public var IsPasswordProtected : boolean {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfDocument = try _self.QueryInterface();
        return try _ifc.IsPasswordProtected;
        }
    }
    public var PageCount : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfDocument = try _self.QueryInterface();
        return try _ifc.PageCount;
        }
    }
}

// type: Windows.Data.Pdf.PdfPage
// runtime class
public class PdfPage
    :
    WinRT.Object
{
    private var _self : Windows.Data.Pdf.IPdfPage;
    public init(plok: Windows.Data.Pdf.IPdfPage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Pdf.IPdfPage { return _self; }
    public func RenderToStreamAsync(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.RenderToStreamAsync(outputStream: outputStream);
    }
    public func RenderToStream(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenderToStreamAsync(outputStream: outputStream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RenderToStreamAsync(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, options : Optional<Windows.Data.Pdf.PdfPageRenderOptions>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.RenderWithOptionsToStreamAsync(outputStream: outputStream, options: options!.Interface());
    }
    public func RenderToStream(outputStream : Optional<Windows.Storage.Streams.IRandomAccessStream>, options : Optional<Windows.Data.Pdf.PdfPageRenderOptions>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenderToStreamAsync(outputStream: outputStream, options: options)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func PreparePageAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.PreparePageAsync();
    }
    public func PreparePage() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PreparePageAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Index() throws -> Swift.UInt32 {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.get_Index();
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func get_Dimensions() throws -> Optional<Windows.Data.Pdf.PdfPageDimensions> {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try Windows.Data.Pdf.PdfPageDimensions(plok: _ifc.get_Dimensions());
    }
    public func get_Rotation() throws -> Windows.Data.Pdf.PdfPageRotation {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.get_Rotation();
    }
    public func get_PreferredZoom() throws -> Swift.Float {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.get_PreferredZoom();
    }
    public var Dimensions : Optional<Windows.Data.Pdf.PdfPageDimensions> {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try Windows.Data.Pdf.PdfPageDimensions(plok: _ifc.Dimensions);
        }
    }
    public var Index : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.Index;
        }
    }
    public var PreferredZoom : Swift.Float {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.PreferredZoom;
        }
    }
    public var Rotation : Windows.Data.Pdf.PdfPageRotation {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.Rotation;
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPage = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Windows.Data.Pdf.PdfPageDimensions
// runtime class
public class PdfPageDimensions
    :
    WinRT.Object
{
    private var _self : Windows.Data.Pdf.IPdfPageDimensions;
    public init(plok: Windows.Data.Pdf.IPdfPageDimensions?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Pdf.IPdfPageDimensions { return _self; }
    public func get_MediaBox() throws -> Windows.Foundation.Rect {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.get_MediaBox();
    }
    public func get_CropBox() throws -> Windows.Foundation.Rect {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.get_CropBox();
    }
    public func get_BleedBox() throws -> Windows.Foundation.Rect {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.get_BleedBox();
    }
    public func get_TrimBox() throws -> Windows.Foundation.Rect {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.get_TrimBox();
    }
    public func get_ArtBox() throws -> Windows.Foundation.Rect {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.get_ArtBox();
    }
    public var ArtBox : Windows.Foundation.Rect {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.ArtBox;
        }
    }
    public var BleedBox : Windows.Foundation.Rect {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.BleedBox;
        }
    }
    public var CropBox : Windows.Foundation.Rect {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.CropBox;
        }
    }
    public var MediaBox : Windows.Foundation.Rect {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.MediaBox;
        }
    }
    public var TrimBox : Windows.Foundation.Rect {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageDimensions = try _self.QueryInterface();
        return try _ifc.TrimBox;
        }
    }
}

// type: Windows.Data.Pdf.PdfPageRenderOptions
// runtime class
public class PdfPageRenderOptions
    :
    WinRT.Object
{
    private var _self : Windows.Data.Pdf.IPdfPageRenderOptions;
    public init(plok: Windows.Data.Pdf.IPdfPageRenderOptions?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Pdf.IPdfPageRenderOptions { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Data.Pdf.PdfPageRenderOptions")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_SourceRect() throws -> Windows.Foundation.Rect {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.get_SourceRect();
    }
    public func put_SourceRect(value : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.put_SourceRect(value: value);
    }
    public func get_DestinationWidth() throws -> Swift.UInt32 {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.get_DestinationWidth();
    }
    public func put_DestinationWidth(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.put_DestinationWidth(value: value);
    }
    public func get_DestinationHeight() throws -> Swift.UInt32 {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.get_DestinationHeight();
    }
    public func put_DestinationHeight(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.put_DestinationHeight(value: value);
    }
    public func get_BackgroundColor() throws -> Windows.UI.Color {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.get_BackgroundColor();
    }
    public func put_BackgroundColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.put_BackgroundColor(value: value);
    }
    public func get_IsIgnoringHighContrast() throws -> boolean {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.get_IsIgnoringHighContrast();
    }
    public func put_IsIgnoringHighContrast(value : boolean) throws -> Void {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.put_IsIgnoringHighContrast(value: value);
    }
    public func get_BitmapEncoderId() throws -> GUID {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.get_BitmapEncoderId();
    }
    public func put_BitmapEncoderId(value : GUID) throws -> Void {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.put_BitmapEncoderId(value: value);
    }
    public var BackgroundColor : Windows.UI.Color {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.BackgroundColor;
        }
    }
    public var BitmapEncoderId : GUID {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.BitmapEncoderId;
        }
    }
    public var DestinationHeight : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.DestinationHeight;
        }
    }
    public var DestinationWidth : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.DestinationWidth;
        }
    }
    public var IsIgnoringHighContrast : boolean {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.IsIgnoringHighContrast;
        }
    }
    public var SourceRect : Windows.Foundation.Rect {
        get throws {
        let _ifc : Windows.Data.Pdf.IPdfPageRenderOptions = try _self.QueryInterface();
        return try _ifc.SourceRect;
        }
    }
}

// type: Windows.Data.Pdf.PdfPageRotation
// enum type
public typealias PdfPageRotation = _q_CWindows_CData_CPdf_CPdfPageRotation;

}
extension Windows.Data.Pdf.PdfPageRotation {
    public static var Normal : Self {
        get {
            return _q_CWindows_CData_CPdf_CPdfPageRotation_Normal;
        }
    }
    public static var Rotate90 : Self {
        get {
            return _q_CWindows_CData_CPdf_CPdfPageRotation_Rotate90;
        }
    }
    public static var Rotate180 : Self {
        get {
            return _q_CWindows_CData_CPdf_CPdfPageRotation_Rotate180;
        }
    }
    public static var Rotate270 : Self {
        get {
            return _q_CWindows_CData_CPdf_CPdfPageRotation_Rotate270;
        }
    }
}
