// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.Proximity {
// type: Windows.Networking.Proximity.ConnectionRequestedEventArgs
// runtime class
public class ConnectionRequestedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Proximity.IConnectionRequestedEventArgs;
    public init(plok: Windows.Networking.Proximity.IConnectionRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Proximity.IConnectionRequestedEventArgs { return _self; }
    public func get_PeerInformation() throws -> Optional<Windows.Networking.Proximity.PeerInformation> {
        let _ifc : Windows.Networking.Proximity.IConnectionRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Proximity.PeerInformation(plok: _ifc.get_PeerInformation());
    }
    public var PeerInformation : Optional<Windows.Networking.Proximity.PeerInformation> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IConnectionRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Proximity.PeerInformation(plok: _ifc.PeerInformation);
        }
    }
}

// type: Windows.Networking.Proximity.DeviceArrivedEventHandler
// delegate type
open class IDeviceArrivedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefa9da69, Data2: 0xf6e1, Data3 : 0x49c9, Data4 : (0xa4, 0x9e, 0x8e, 0x0f, 0xc5, 0x8f, 0xb9, 0x11)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Proximity.ProximityDevice)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIDeviceArrivedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.IProximityDevice>) throws -> Void {
        try self._n_Invoke(RawPointer(sender));
    }
}
// impl delegate type
open class DeviceArrivedEventHandler
{
    private static var vtable: _q_CWindows_CNetworking_CProximity_CIDeviceArrivedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Windows.Networking.Proximity.IDeviceArrivedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DeviceArrivedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DeviceArrivedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>) in
        guard let self = DeviceArrivedEventHandler.from_DeviceArrivedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Proximity.ProximityDevice(plok: Windows.Networking.Proximity.IProximityDevice(sender)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: DeviceArrivedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CWindows_CNetworking_CProximity_CIDeviceArrivedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CWindows_CNetworking_CProximity_CIDeviceArrivedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_DeviceArrivedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> DeviceArrivedEventHandler? {
        return pUnk?.bindMemory(to: DeviceArrivedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void {
        if let cb = _cb {
            return try cb(sender)
        }
    }
    public func Interface() -> Windows.Networking.Proximity.IDeviceArrivedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Windows.Networking.Proximity.IDeviceArrivedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_DeviceArrivedEventHandler
{
    private var _self : Windows.Networking.Proximity.IDeviceArrivedEventHandler;
    public init(plok: Windows.Networking.Proximity.IDeviceArrivedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface());
    }
    public func Interface() -> Windows.Networking.Proximity.IDeviceArrivedEventHandler {
        return _self
    }
}

// type: Windows.Networking.Proximity.DeviceDepartedEventHandler
// delegate type
open class IDeviceDepartedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefa9da69, Data2: 0xf6e2, Data3 : 0x49c9, Data4 : (0xa4, 0x9e, 0x8e, 0x0f, 0xc5, 0x8f, 0xb9, 0x11)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Proximity.ProximityDevice)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIDeviceDepartedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.IProximityDevice>) throws -> Void {
        try self._n_Invoke(RawPointer(sender));
    }
}
// impl delegate type
open class DeviceDepartedEventHandler
{
    private static var vtable: _q_CWindows_CNetworking_CProximity_CIDeviceDepartedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Windows.Networking.Proximity.IDeviceDepartedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DeviceDepartedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DeviceDepartedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>) in
        guard let self = DeviceDepartedEventHandler.from_DeviceDepartedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Proximity.ProximityDevice(plok: Windows.Networking.Proximity.IProximityDevice(sender)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: DeviceDepartedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CWindows_CNetworking_CProximity_CIDeviceDepartedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CWindows_CNetworking_CProximity_CIDeviceDepartedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_DeviceDepartedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> DeviceDepartedEventHandler? {
        return pUnk?.bindMemory(to: DeviceDepartedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void {
        if let cb = _cb {
            return try cb(sender)
        }
    }
    public func Interface() -> Windows.Networking.Proximity.IDeviceDepartedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Windows.Networking.Proximity.IDeviceDepartedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_DeviceDepartedEventHandler
{
    private var _self : Windows.Networking.Proximity.IDeviceDepartedEventHandler;
    public init(plok: Windows.Networking.Proximity.IDeviceDepartedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface());
    }
    public func Interface() -> Windows.Networking.Proximity.IDeviceDepartedEventHandler {
        return _self
    }
}

// type: Windows.Networking.Proximity.IConnectionRequestedEventArgs
// interface type
open class IConnectionRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xeb6891ae, Data2: 0x4f1e, Data3 : 0x4c66, Data4 : (0xbd, 0x0d, 0x46, 0x92, 0x4a, 0x94, 0x2e, 0x08)) }
    // [IsSpecialName] Windows.Networking.Proximity.PeerInformation get_PeerInformation()
    private func _n_get_PeerInformation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIConnectionRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PeerInformation(pThis, __presult))
        }
    }
    public func get_PeerInformation() throws -> Optional<Windows.Networking.Proximity.IPeerInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerInformation>> = nil;
        try self._n_get_PeerInformation(&__result);
        return Windows.Networking.Proximity.IPeerInformation(consuming: __result);
    }
    public var PeerInformation : Optional<Windows.Networking.Proximity.IPeerInformation> {
        get throws {
            return try get_PeerInformation();
        }
    }
} // IConnectionRequestedEventArgs


// type: Windows.Networking.Proximity.IPeerInformation
// interface type
open class IPeerInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x20024f08, Data2: 0x9fff, Data3 : 0x45f4, Data4 : (0xb6, 0xe9, 0x40, 0x8b, 0x2e, 0xbe, 0xf3, 0x73)) }
    // [IsSpecialName] System.String get_DisplayName()
    private func _n_get_DisplayName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, __presult))
        }
    }
    public func get_DisplayName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayName(&__result);
        return Swift.String(from: __result);
    }
    public var DisplayName : Swift.String {
        get throws {
            return try get_DisplayName();
        }
    }
} // IPeerInformation


// type: Windows.Networking.Proximity.IPeerInformation3
// interface type
open class IPeerInformation3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb20f612a, Data2: 0xdbd0, Data3 : 0x40f8, Data4 : (0x95, 0xbd, 0x2d, 0x42, 0x09, 0xc7, 0x83, 0x6f)) }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerInformation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_DiscoveryData()
    private func _n_get_DiscoveryData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerInformation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DiscoveryData(pThis, __presult))
        }
    }
    public func get_DiscoveryData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_DiscoveryData(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var DiscoveryData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_DiscoveryData();
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
} // IPeerInformation3


// type: Windows.Networking.Proximity.IPeerInformationWithHostAndService
// interface type
open class IPeerInformationWithHostAndService
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xecc7ccad, Data2: 0x1b70, Data3 : 0x4e8b, Data4 : (0x92, 0xdb, 0xbb, 0xe7, 0x81, 0x41, 0x93, 0x08)) }
    // [IsSpecialName] Windows.Networking.HostName get_HostName()
    private func _n_get_HostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerInformationWithHostAndService.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HostName(pThis, __presult))
        }
    }
    public func get_HostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_HostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_ServiceName()
    private func _n_get_ServiceName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerInformationWithHostAndService.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServiceName(pThis, __presult))
        }
    }
    public func get_ServiceName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ServiceName(&__result);
        return Swift.String(from: __result);
    }
    public var HostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_HostName();
        }
    }
    public var ServiceName : Swift.String {
        get throws {
            return try get_ServiceName();
        }
    }
} // IPeerInformationWithHostAndService


// type: Windows.Networking.Proximity.IPeerWatcher
// interface type
open class IPeerWatcher
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3cee21f8, Data2: 0x2fa6, Data3 : 0x4679, Data4 : (0x96, 0x91, 0x03, 0xc9, 0x4a, 0x42, 0x0f, 0x34)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Added(Windows.Foundation.TypedEventHandler<Windows.Networking.Proximity.PeerWatcher,Windows.Networking.Proximity.PeerInformation>)
    private func _n_add_Added(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, handler, __presult))
        }
    }
    public func add_Added(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Added(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Added(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Added(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
        }
    }
    public func remove_Added(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Added(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Removed(Windows.Foundation.TypedEventHandler<Windows.Networking.Proximity.PeerWatcher,Windows.Networking.Proximity.PeerInformation>)
    private func _n_add_Removed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, handler, __presult))
        }
    }
    public func add_Removed(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Removed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Removed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Removed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
        }
    }
    public func remove_Removed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Removed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Updated(Windows.Foundation.TypedEventHandler<Windows.Networking.Proximity.PeerWatcher,Windows.Networking.Proximity.PeerInformation>)
    private func _n_add_Updated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, handler, __presult))
        }
    }
    public func add_Updated(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Updated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Updated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Updated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
        }
    }
    public func remove_Updated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Updated(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EnumerationCompleted(Windows.Foundation.TypedEventHandler<Windows.Networking.Proximity.PeerWatcher,System.Object>)
    private func _n_add_EnumerationCompleted(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, handler, __presult))
        }
    }
    public func add_EnumerationCompleted(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EnumerationCompleted(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_EnumerationCompleted(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
        }
    }
    public func remove_EnumerationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EnumerationCompleted(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Stopped(Windows.Foundation.TypedEventHandler<Windows.Networking.Proximity.PeerWatcher,System.Object>)
    private func _n_add_Stopped(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, handler, __presult))
        }
    }
    public func add_Stopped(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Stopped(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Stopped(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Stopped(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
        }
    }
    public func remove_Stopped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Stopped(token);
    }
    // [IsSpecialName] Windows.Networking.Proximity.PeerWatcherStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CPeerWatcherStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.Proximity.PeerWatcherStatus {
        var __result : _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus = _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus_Created;
        try self._n_get_Status(&__result);
        return __result;
    }
    // void Start()
    private func _n_Start() throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
        }
    }
    public func Start() throws -> Void {
        try self._n_Start();
    }
    // void Stop()
    private func _n_Stop() throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIPeerWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
        }
    }
    public func Stop() throws -> Void {
        try self._n_Stop();
    }
    public var Status : Windows.Networking.Proximity.PeerWatcherStatus {
        get throws {
            return try get_Status();
        }
    }
} // IPeerWatcher


// type: Windows.Networking.Proximity.IProximityDevice
// interface type
open class IProximityDevice
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefa8a552, Data2: 0xf6e1, Data3 : 0x4329, Data4 : (0xa0, 0xfc, 0xab, 0x6b, 0x0f, 0xd2, 0x82, 0x62)) }
    // System.Int64 SubscribeForMessage(System.String, Windows.Networking.Proximity.MessageReceivedHandler)
    private func _n_SubscribeForMessage(_ messageType : Optional<HSTRING>, _ messageReceivedHandler : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIMessageReceivedHandler>>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SubscribeForMessage(pThis, messageType, messageReceivedHandler, __presult))
        }
    }
    public func SubscribeForMessage(messageType : Swift.String, messageReceivedHandler : Optional<Windows.Networking.Proximity.IMessageReceivedHandler>) throws -> Swift.Int64 {
        let __hstr_messageType = try HString(messageType);
        return try withExtendedLifetime(__hstr_messageType) {
        var __result : INT64 = 0;
        try self._n_SubscribeForMessage(__hstr_messageType.Raw(), RawPointer(messageReceivedHandler), &__result);
        return __result;
        }
    }
    // System.Int64 PublishMessage(System.String, System.String)
    private func _n_PublishMessage(_ messageType : Optional<HSTRING>, _ message : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PublishMessage(pThis, messageType, message, __presult))
        }
    }
    public func PublishMessage(messageType : Swift.String, message : Swift.String) throws -> Swift.Int64 {
        let __hstr_messageType = try HString(messageType);
        return try withExtendedLifetime(__hstr_messageType) {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        var __result : INT64 = 0;
        try self._n_PublishMessage(__hstr_messageType.Raw(), __hstr_message.Raw(), &__result);
        return __result;
        }
        }
    }
    // System.Int64 PublishMessage(System.String, System.String, Windows.Networking.Proximity.MessageTransmittedHandler)
    private func _n_PublishMessageWithCallback(_ messageType : Optional<HSTRING>, _ message : Optional<HSTRING>, _ messageTransmittedHandler : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIMessageTransmittedHandler>>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PublishMessageWithCallback(pThis, messageType, message, messageTransmittedHandler, __presult))
        }
    }
    public func PublishMessageWithCallback(messageType : Swift.String, message : Swift.String, messageTransmittedHandler : Optional<Windows.Networking.Proximity.IMessageTransmittedHandler>) throws -> Swift.Int64 {
        let __hstr_messageType = try HString(messageType);
        return try withExtendedLifetime(__hstr_messageType) {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        var __result : INT64 = 0;
        try self._n_PublishMessageWithCallback(__hstr_messageType.Raw(), __hstr_message.Raw(), RawPointer(messageTransmittedHandler), &__result);
        return __result;
        }
        }
    }
    // System.Int64 PublishBinaryMessage(System.String, Windows.Storage.Streams.IBuffer)
    private func _n_PublishBinaryMessage(_ messageType : Optional<HSTRING>, _ message : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PublishBinaryMessage(pThis, messageType, message, __presult))
        }
    }
    public func PublishBinaryMessage(messageType : Swift.String, message : Optional<Windows.Storage.Streams.IBuffer>) throws -> Swift.Int64 {
        let __hstr_messageType = try HString(messageType);
        return try withExtendedLifetime(__hstr_messageType) {
        var __result : INT64 = 0;
        try self._n_PublishBinaryMessage(__hstr_messageType.Raw(), RawPointer(message), &__result);
        return __result;
        }
    }
    // System.Int64 PublishBinaryMessage(System.String, Windows.Storage.Streams.IBuffer, Windows.Networking.Proximity.MessageTransmittedHandler)
    private func _n_PublishBinaryMessageWithCallback(_ messageType : Optional<HSTRING>, _ message : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ messageTransmittedHandler : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIMessageTransmittedHandler>>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PublishBinaryMessageWithCallback(pThis, messageType, message, messageTransmittedHandler, __presult))
        }
    }
    public func PublishBinaryMessageWithCallback(messageType : Swift.String, message : Optional<Windows.Storage.Streams.IBuffer>, messageTransmittedHandler : Optional<Windows.Networking.Proximity.IMessageTransmittedHandler>) throws -> Swift.Int64 {
        let __hstr_messageType = try HString(messageType);
        return try withExtendedLifetime(__hstr_messageType) {
        var __result : INT64 = 0;
        try self._n_PublishBinaryMessageWithCallback(__hstr_messageType.Raw(), RawPointer(message), RawPointer(messageTransmittedHandler), &__result);
        return __result;
        }
    }
    // System.Int64 PublishUriMessage(Windows.Foundation.Uri)
    private func _n_PublishUriMessage(_ message : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PublishUriMessage(pThis, message, __presult))
        }
    }
    public func PublishUriMessage(message : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Swift.Int64 {
        var __result : INT64 = 0;
        try self._n_PublishUriMessage(RawPointer(message), &__result);
        return __result;
    }
    // System.Int64 PublishUriMessage(Windows.Foundation.Uri, Windows.Networking.Proximity.MessageTransmittedHandler)
    private func _n_PublishUriMessageWithCallback(_ message : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ messageTransmittedHandler : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIMessageTransmittedHandler>>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PublishUriMessageWithCallback(pThis, message, messageTransmittedHandler, __presult))
        }
    }
    public func PublishUriMessageWithCallback(message : Optional<Windows.Foundation.IUriRuntimeClass>, messageTransmittedHandler : Optional<Windows.Networking.Proximity.IMessageTransmittedHandler>) throws -> Swift.Int64 {
        var __result : INT64 = 0;
        try self._n_PublishUriMessageWithCallback(RawPointer(message), RawPointer(messageTransmittedHandler), &__result);
        return __result;
    }
    // void StopSubscribingForMessage(System.Int64)
    private func _n_StopSubscribingForMessage(_ subscriptionId : INT64) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StopSubscribingForMessage(pThis, subscriptionId))
        }
    }
    public func StopSubscribingForMessage(subscriptionId : Swift.Int64) throws -> Void {
        try self._n_StopSubscribingForMessage(subscriptionId);
    }
    // void StopPublishingMessage(System.Int64)
    private func _n_StopPublishingMessage(_ messageId : INT64) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StopPublishingMessage(pThis, messageId))
        }
    }
    public func StopPublishingMessage(messageId : Swift.Int64) throws -> Void {
        try self._n_StopPublishingMessage(messageId);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DeviceArrived(Windows.Networking.Proximity.DeviceArrivedEventHandler)
    private func _n_add_DeviceArrived(_ arrivedHandler : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIDeviceArrivedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DeviceArrived(pThis, arrivedHandler, __presult))
        }
    }
    public func add_DeviceArrived(arrivedHandler : Optional<Windows.Networking.Proximity.IDeviceArrivedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DeviceArrived(RawPointer(arrivedHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DeviceArrived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DeviceArrived(_ cookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DeviceArrived(pThis, cookie))
        }
    }
    public func remove_DeviceArrived(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DeviceArrived(cookie);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DeviceDeparted(Windows.Networking.Proximity.DeviceDepartedEventHandler)
    private func _n_add_DeviceDeparted(_ departedHandler : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIDeviceDepartedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DeviceDeparted(pThis, departedHandler, __presult))
        }
    }
    public func add_DeviceDeparted(departedHandler : Optional<Windows.Networking.Proximity.IDeviceDepartedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DeviceDeparted(RawPointer(departedHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DeviceDeparted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DeviceDeparted(_ cookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DeviceDeparted(pThis, cookie))
        }
    }
    public func remove_DeviceDeparted(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DeviceDeparted(cookie);
    }
    // [IsSpecialName] System.UInt32 get_MaxMessageBytes()
    private func _n_get_MaxMessageBytes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxMessageBytes(pThis, __presult))
        }
    }
    public func get_MaxMessageBytes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxMessageBytes(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt64 get_BitsPerSecond()
    private func _n_get_BitsPerSecond(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitsPerSecond(pThis, __presult))
        }
    }
    public func get_BitsPerSecond() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BitsPerSecond(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    public var BitsPerSecond : Swift.UInt64 {
        get throws {
            return try get_BitsPerSecond();
        }
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var MaxMessageBytes : Swift.UInt32 {
        get throws {
            return try get_MaxMessageBytes();
        }
    }
} // IProximityDevice


// type: Windows.Networking.Proximity.IProximityDeviceStatics
// interface type
open class IProximityDeviceStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x914ba01d, Data2: 0xf6e1, Data3 : 0x47c4, Data4 : (0xa1, 0x4c, 0x14, 0x8a, 0x19, 0x03, 0xd0, 0xc6)) }
    // System.String GetDeviceSelector()
    private func _n_GetDeviceSelector(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDeviceStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeviceSelector(pThis, __presult))
        }
    }
    public func GetDeviceSelector() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetDeviceSelector(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Networking.Proximity.ProximityDevice GetDefault()
    private func _n_GetDefault(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDeviceStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, __presult))
        }
    }
    public func GetDefault() throws -> Optional<Windows.Networking.Proximity.IProximityDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>> = nil;
        try self._n_GetDefault(&__result);
        return Windows.Networking.Proximity.IProximityDevice(consuming: __result);
    }
    // Windows.Networking.Proximity.ProximityDevice FromId(System.String)
    private func _n_FromId(_ deviceId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityDeviceStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FromId(pThis, deviceId, __presult))
        }
    }
    public func FromId(deviceId : Swift.String) throws -> Optional<Windows.Networking.Proximity.IProximityDevice> {
        let __hstr_deviceId = try HString(deviceId);
        return try withExtendedLifetime(__hstr_deviceId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>> = nil;
        try self._n_FromId(__hstr_deviceId.Raw(), &__result);
        return Windows.Networking.Proximity.IProximityDevice(consuming: __result);
        }
    }
} // IProximityDeviceStatics


// type: Windows.Networking.Proximity.IProximityMessage
// interface type
open class IProximityMessage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefab0782, Data2: 0xf6e1, Data3 : 0x4675, Data4 : (0xa0, 0x45, 0xd8, 0xe3, 0x20, 0xc2, 0x48, 0x08)) }
    // [IsSpecialName] System.String get_MessageType()
    private func _n_get_MessageType(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MessageType(pThis, __presult))
        }
    }
    public func get_MessageType() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MessageType(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.Int64 get_SubscriptionId()
    private func _n_get_SubscriptionId(_ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriptionId(pThis, __presult))
        }
    }
    public func get_SubscriptionId() throws -> Swift.Int64 {
        var __result : INT64 = 0;
        try self._n_get_SubscriptionId(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_Data()
    private func _n_get_Data(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, __presult))
        }
    }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Data(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // [IsSpecialName] System.String get_DataAsString()
    private func _n_get_DataAsString(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIProximityMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataAsString(pThis, __presult))
        }
    }
    public func get_DataAsString() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DataAsString(&__result);
        return Swift.String(from: __result);
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Data();
        }
    }
    public var DataAsString : Swift.String {
        get throws {
            return try get_DataAsString();
        }
    }
    public var MessageType : Swift.String {
        get throws {
            return try get_MessageType();
        }
    }
    public var SubscriptionId : Swift.Int64 {
        get throws {
            return try get_SubscriptionId();
        }
    }
} // IProximityMessage


// type: Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs
// interface type
open class ITriggeredConnectionStateChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc6a780ad, Data2: 0xf6e1, Data3 : 0x4d54, Data4 : (0x96, 0xe2, 0x33, 0xf6, 0x20, 0xbc, 0xa8, 0x8a)) }
    // [IsSpecialName] Windows.Networking.Proximity.TriggeredConnectState get_State()
    private func _n_get_State(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CTriggeredConnectState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CITriggeredConnectionStateChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, __presult))
        }
    }
    public func get_State() throws -> Windows.Networking.Proximity.TriggeredConnectState {
        var __result : _q_CWindows_CNetworking_CProximity_CTriggeredConnectState = _q_CWindows_CNetworking_CProximity_CTriggeredConnectState_PeerFound;
        try self._n_get_State(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CITriggeredConnectionStateChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Id(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocket get_Socket()
    private func _n_get_Socket(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CITriggeredConnectionStateChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Socket(pThis, __presult))
        }
    }
    public func get_Socket() throws -> Optional<Windows.Networking.Sockets.IStreamSocket> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>> = nil;
        try self._n_get_Socket(&__result);
        return Windows.Networking.Sockets.IStreamSocket(consuming: __result);
    }
    public var Id : Swift.UInt32 {
        get throws {
            return try get_Id();
        }
    }
    public var Socket : Optional<Windows.Networking.Sockets.IStreamSocket> {
        get throws {
            return try get_Socket();
        }
    }
    public var State : Windows.Networking.Proximity.TriggeredConnectState {
        get throws {
            return try get_State();
        }
    }
} // ITriggeredConnectionStateChangedEventArgs


// type: Windows.Networking.Proximity.MessageReceivedHandler
// delegate type
open class IMessageReceivedHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefab0782, Data2: 0xf6e2, Data3 : 0x4675, Data4 : (0xa0, 0x45, 0xd8, 0xe3, 0x20, 0xc2, 0x48, 0x08)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Proximity.ProximityDevice, Windows.Networking.Proximity.ProximityMessage)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>, _ message : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityMessage>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIMessageReceivedHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, message))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.IProximityDevice>, message : Optional<Windows.Networking.Proximity.IProximityMessage>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(message));
    }
}
// impl delegate type
open class MessageReceivedHandler
{
    private static var vtable: _q_CWindows_CNetworking_CProximity_CIMessageReceivedHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Windows.Networking.Proximity.IMessageReceivedHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: MessageReceivedHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: MessageReceivedHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>, _ message : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityMessage>>) in
        guard let self = MessageReceivedHandler.from_MessageReceivedHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Proximity.ProximityDevice(plok: Windows.Networking.Proximity.IProximityDevice(sender)), message: Windows.Networking.Proximity.ProximityMessage(plok: Windows.Networking.Proximity.IProximityMessage(message)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: MessageReceivedHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CWindows_CNetworking_CProximity_CIMessageReceivedHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>, Optional<Windows.Networking.Proximity.ProximityMessage>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>, Optional<Windows.Networking.Proximity.ProximityMessage>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CWindows_CNetworking_CProximity_CIMessageReceivedHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_MessageReceivedHandler(_ pUnk: UnsafeMutableRawPointer?) -> MessageReceivedHandler? {
        return pUnk?.bindMemory(to: MessageReceivedHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>, message : Optional<Windows.Networking.Proximity.ProximityMessage>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, message)
        }
    }
    public func Interface() -> Windows.Networking.Proximity.IMessageReceivedHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Windows.Networking.Proximity.IMessageReceivedHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_MessageReceivedHandler
{
    private var _self : Windows.Networking.Proximity.IMessageReceivedHandler;
    public init(plok: Windows.Networking.Proximity.IMessageReceivedHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>, message : Optional<Windows.Networking.Proximity.ProximityMessage>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), message: message!.Interface());
    }
    public func Interface() -> Windows.Networking.Proximity.IMessageReceivedHandler {
        return _self
    }
}

// type: Windows.Networking.Proximity.MessageTransmittedHandler
// delegate type
open class IMessageTransmittedHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefaa0b4a, Data2: 0xf6e2, Data3 : 0x4d7d, Data4 : (0x85, 0x6c, 0x78, 0xfc, 0x8e, 0xfc, 0x02, 0x1e)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Proximity.ProximityDevice, System.Int64)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>, _ messageId : INT64) throws {
        return try perform(as: _q_CWindows_CNetworking_CProximity_CIMessageTransmittedHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, messageId))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.IProximityDevice>, messageId : Swift.Int64) throws -> Void {
        try self._n_Invoke(RawPointer(sender), messageId);
    }
}
// impl delegate type
open class MessageTransmittedHandler
{
    private static var vtable: _q_CWindows_CNetworking_CProximity_CIMessageTransmittedHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Windows.Networking.Proximity.IMessageTransmittedHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: MessageTransmittedHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: MessageTransmittedHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIProximityDevice>>, _ messageId : INT64) in
        guard let self = MessageTransmittedHandler.from_MessageTransmittedHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Proximity.ProximityDevice(plok: Windows.Networking.Proximity.IProximityDevice(sender)), messageId: messageId)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: MessageTransmittedHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CWindows_CNetworking_CProximity_CIMessageTransmittedHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>, Swift.Int64) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Proximity.ProximityDevice>, Swift.Int64) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CWindows_CNetworking_CProximity_CIMessageTransmittedHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_MessageTransmittedHandler(_ pUnk: UnsafeMutableRawPointer?) -> MessageTransmittedHandler? {
        return pUnk?.bindMemory(to: MessageTransmittedHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>, messageId : Swift.Int64) throws -> Void {
        if let cb = _cb {
            return try cb(sender, messageId)
        }
    }
    public func Interface() -> Windows.Networking.Proximity.IMessageTransmittedHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Windows.Networking.Proximity.IMessageTransmittedHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_MessageTransmittedHandler
{
    private var _self : Windows.Networking.Proximity.IMessageTransmittedHandler;
    public init(plok: Windows.Networking.Proximity.IMessageTransmittedHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.ProximityDevice>, messageId : Swift.Int64) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), messageId: messageId);
    }
    public func Interface() -> Windows.Networking.Proximity.IMessageTransmittedHandler {
        return _self
    }
}

// type: Windows.Networking.Proximity.PeerInformation
// runtime class
public class PeerInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Proximity.IPeerInformation;
    public init(plok: Windows.Networking.Proximity.IPeerInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Proximity.IPeerInformation { return _self; }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Proximity.IPeerInformation = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IPeerInformation = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Proximity.IPeerInformation3 = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_DiscoveryData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.Proximity.IPeerInformation3 = try _self.QueryInterface();
        return try _ifc.get_DiscoveryData();
    }
    public var DiscoveryData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IPeerInformation3 = try _self.QueryInterface();
        return try _ifc.DiscoveryData;
        }
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IPeerInformation3 = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public func get_HostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Proximity.IPeerInformationWithHostAndService = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_HostName());
    }
    public func get_ServiceName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Proximity.IPeerInformationWithHostAndService = try _self.QueryInterface();
        return try _ifc.get_ServiceName();
    }
    public var HostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IPeerInformationWithHostAndService = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.HostName);
        }
    }
    public var ServiceName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IPeerInformationWithHostAndService = try _self.QueryInterface();
        return try _ifc.ServiceName;
        }
    }
}

// type: Windows.Networking.Proximity.PeerWatcher
// runtime class
public class PeerWatcher
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Proximity.IPeerWatcher;
    public init(plok: Windows.Networking.Proximity.IPeerWatcher?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Proximity.IPeerWatcher { return _self; }
    public func add_Added(handler : @escaping (Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<Windows.Networking.Proximity.PeerInformation>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.add_Added(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation(cb: handler).Interface());
    }
    public func remove_Added(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.remove_Added(token: token);
    }
    public func add_Removed(handler : @escaping (Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<Windows.Networking.Proximity.PeerInformation>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.add_Removed(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation(cb: handler).Interface());
    }
    public func remove_Removed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.remove_Removed(token: token);
    }
    public func add_Updated(handler : @escaping (Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<Windows.Networking.Proximity.PeerInformation>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.add_Updated(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation(cb: handler).Interface());
    }
    public func remove_Updated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.remove_Updated(token: token);
    }
    public func add_EnumerationCompleted(handler : @escaping (Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.add_EnumerationCompleted(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_EnumerationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.remove_EnumerationCompleted(token: token);
    }
    public func add_Stopped(handler : @escaping (Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.add_Stopped(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_Stopped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.remove_Stopped(token: token);
    }
    public func get_Status() throws -> Windows.Networking.Proximity.PeerWatcherStatus {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func Start() throws -> Void {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.Start();
    }
    public func Stop() throws -> Void {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public var Status : Windows.Networking.Proximity.PeerWatcherStatus {
        get throws {
        let _ifc : Windows.Networking.Proximity.IPeerWatcher = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.Proximity.PeerWatcherStatus
// enum type
public typealias PeerWatcherStatus = _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus;

// type: Windows.Networking.Proximity.ProximityDevice
// runtime class
public class ProximityDevice
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Proximity.IProximityDevice;
    public init(plok: Windows.Networking.Proximity.IProximityDevice?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Proximity.IProximityDevice { return _self; }
    private struct _IProximityDeviceStatics {
        static var x : IProximityDeviceStatics =
            try! RoGetActivationFactory("Windows.Networking.Proximity.ProximityDevice")
    }
    public static var ProximityDeviceStatics : IProximityDeviceStatics {
        _IProximityDeviceStatics.x
    }
    public static func GetDeviceSelector() throws -> Optional<Swift.String> {
        return try ProximityDeviceStatics.GetDeviceSelector();
    }
    public static func GetDefault() throws -> Optional<Windows.Networking.Proximity.ProximityDevice> {
        return try Windows.Networking.Proximity.ProximityDevice(plok: ProximityDeviceStatics.GetDefault());
    }
    public static func FromId(deviceId : Swift.String) throws -> Optional<Windows.Networking.Proximity.ProximityDevice> {
        return try Windows.Networking.Proximity.ProximityDevice(plok: ProximityDeviceStatics.FromId(deviceId: deviceId));
    }
    public func SubscribeForMessage(messageType : Swift.String, messageReceivedHandler : @escaping (Optional<Windows.Networking.Proximity.ProximityDevice>, Optional<Windows.Networking.Proximity.ProximityMessage>) throws -> Void) throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.SubscribeForMessage(messageType: messageType, messageReceivedHandler: Windows.Networking.Proximity.MessageReceivedHandler(cb: messageReceivedHandler).Interface());
    }
    public func PublishMessage(messageType : Swift.String, message : Swift.String) throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.PublishMessage(messageType: messageType, message: message);
    }
    public func PublishMessage(messageType : Swift.String, message : Swift.String, messageTransmittedHandler : @escaping (Optional<Windows.Networking.Proximity.ProximityDevice>, Swift.Int64) throws -> Void) throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.PublishMessageWithCallback(messageType: messageType, message: message, messageTransmittedHandler: Windows.Networking.Proximity.MessageTransmittedHandler(cb: messageTransmittedHandler).Interface());
    }
    public func PublishBinaryMessage(messageType : Swift.String, message : Optional<Windows.Storage.Streams.IBuffer>) throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.PublishBinaryMessage(messageType: messageType, message: message);
    }
    public func PublishBinaryMessage(messageType : Swift.String, message : Optional<Windows.Storage.Streams.IBuffer>, messageTransmittedHandler : @escaping (Optional<Windows.Networking.Proximity.ProximityDevice>, Swift.Int64) throws -> Void) throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.PublishBinaryMessageWithCallback(messageType: messageType, message: message, messageTransmittedHandler: Windows.Networking.Proximity.MessageTransmittedHandler(cb: messageTransmittedHandler).Interface());
    }
    public func PublishUriMessage(message : Optional<Windows.Foundation.Uri>) throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.PublishUriMessage(message: message!.Interface());
    }
    public func PublishUriMessage(message : Optional<Windows.Foundation.Uri>, messageTransmittedHandler : @escaping (Optional<Windows.Networking.Proximity.ProximityDevice>, Swift.Int64) throws -> Void) throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.PublishUriMessageWithCallback(message: message!.Interface(), messageTransmittedHandler: Windows.Networking.Proximity.MessageTransmittedHandler(cb: messageTransmittedHandler).Interface());
    }
    public func StopSubscribingForMessage(subscriptionId : Swift.Int64) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.StopSubscribingForMessage(subscriptionId: subscriptionId);
    }
    public func StopPublishingMessage(messageId : Swift.Int64) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.StopPublishingMessage(messageId: messageId);
    }
    public func add_DeviceArrived(arrivedHandler : @escaping (Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.add_DeviceArrived(arrivedHandler: Windows.Networking.Proximity.DeviceArrivedEventHandler(cb: arrivedHandler).Interface());
    }
    public func remove_DeviceArrived(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.remove_DeviceArrived(cookie: cookie);
    }
    public func add_DeviceDeparted(departedHandler : @escaping (Optional<Windows.Networking.Proximity.ProximityDevice>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.add_DeviceDeparted(departedHandler: Windows.Networking.Proximity.DeviceDepartedEventHandler(cb: departedHandler).Interface());
    }
    public func remove_DeviceDeparted(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.remove_DeviceDeparted(cookie: cookie);
    }
    public func get_MaxMessageBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.get_MaxMessageBytes();
    }
    public func get_BitsPerSecond() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.get_BitsPerSecond();
    }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public var BitsPerSecond : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.BitsPerSecond;
        }
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var MaxMessageBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Proximity.IProximityDevice = try _self.QueryInterface();
        return try _ifc.MaxMessageBytes;
        }
    }
}

// type: Windows.Networking.Proximity.ProximityMessage
// runtime class
public class ProximityMessage
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Proximity.IProximityMessage;
    public init(plok: Windows.Networking.Proximity.IProximityMessage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Proximity.IProximityMessage { return _self; }
    public func get_MessageType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.get_MessageType();
    }
    public func get_SubscriptionId() throws -> Swift.Int64 {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.get_SubscriptionId();
    }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.get_Data();
    }
    public func get_DataAsString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.get_DataAsString();
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.Data;
        }
    }
    public var DataAsString : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.DataAsString;
        }
    }
    public var MessageType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.MessageType;
        }
    }
    public var SubscriptionId : Swift.Int64 {
        get throws {
        let _ifc : Windows.Networking.Proximity.IProximityMessage = try _self.QueryInterface();
        return try _ifc.SubscriptionId;
        }
    }
}

// type: Windows.Networking.Proximity.TriggeredConnectState
// enum type
public typealias TriggeredConnectState = _q_CWindows_CNetworking_CProximity_CTriggeredConnectState;

// type: Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs
// runtime class
public class TriggeredConnectionStateChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs;
    public init(plok: Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs { return _self; }
    public func get_State() throws -> Windows.Networking.Proximity.TriggeredConnectState {
        let _ifc : Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.get_State();
    }
    public func get_Id() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_Socket() throws -> Optional<Windows.Networking.Sockets.StreamSocket> {
        let _ifc : Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocket(plok: _ifc.get_Socket());
    }
    public var Id : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var Socket : Optional<Windows.Networking.Sockets.StreamSocket> {
        get throws {
        let _ifc : Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocket(plok: _ifc.Socket);
        }
    }
    public var State : Windows.Networking.Proximity.TriggeredConnectState {
        get throws {
        let _ifc : Windows.Networking.Proximity.ITriggeredConnectionStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.State;
        }
    }
}

}
extension Windows.Networking.Proximity.PeerWatcherStatus {
    public static var Created : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus_Created;
        }
    }
    public static var Started : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus_Started;
        }
    }
    public static var EnumerationCompleted : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus_EnumerationCompleted;
        }
    }
    public static var Stopping : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus_Stopping;
        }
    }
    public static var Stopped : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus_Stopped;
        }
    }
    public static var Aborted : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CPeerWatcherStatus_Aborted;
        }
    }
}
extension Windows.Networking.Proximity.TriggeredConnectState {
    public static var PeerFound : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CTriggeredConnectState_PeerFound;
        }
    }
    public static var Listening : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CTriggeredConnectState_Listening;
        }
    }
    public static var Connecting : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CTriggeredConnectState_Connecting;
        }
    }
    public static var Completed : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CTriggeredConnectState_Completed;
        }
    }
    public static var Canceled : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CTriggeredConnectState_Canceled;
        }
    }
    public static var Failed : Self {
        get {
            return _q_CWindows_CNetworking_CProximity_CTriggeredConnectState_Failed;
        }
    }
}
