// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2cf800d4, Data2: 0x35d0, Data3 : 0x545c, Data4 : (0xab, 0x82, 0xf6, 0x79, 0x3b, 0xe7, 0x4c, 0xba)) }
    // Windows.Web.Http.Headers.HttpNameValueHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpNameValueHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpNameValueHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpNameValueHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpNameValueHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpNameValueHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpNameValueHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpNameValueHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpNameValueHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1ef903c8, Data2: 0x8eef, Data3 : 0x5e9e, Data4 : (0xb9, 0x38, 0xb9, 0xe4, 0x28, 0xa7, 0x76, 0x72)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5838a126, Data2: 0xb617, Data3 : 0x5417, Data4 : (0xb3, 0x2e, 0xde, 0xd2, 0xd2, 0x7d, 0x40, 0xa3)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3bb0c8fa, Data2: 0x5f1f, Data3 : 0x5c70, Data4 : (0x99, 0x50, 0x5d, 0x1d, 0x1a, 0x70, 0x3d, 0xd4)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3737fc5e, Data2: 0x0b27, Data3 : 0x52a3, Data4 : (0x9e, 0x40, 0xcb, 0xb9, 0x84, 0x4e, 0x6a, 0xb7)) }
    // Windows.Web.Http.Headers.HttpChallengeHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpChallengeHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpChallengeHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpChallengeHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpChallengeHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpChallengeHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpChallengeHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpChallengeHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpChallengeHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8b79423f, Data2: 0xb4a3, Data3 : 0x501d, Data4 : (0xba, 0xc2, 0xb8, 0x8e, 0x78, 0xe1, 0x3a, 0x21)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x17847e58, Data2: 0xf0cf, Data3 : 0x52e7, Data4 : (0x81, 0xc0, 0x9d, 0x06, 0xa0, 0x81, 0x56, 0x9f)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6bc05705, Data2: 0x2c6f, Data3 : 0x57e8, Data4 : (0xbf, 0x96, 0x56, 0xa7, 0x61, 0xe9, 0x0e, 0x8f)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc312da8d, Data2: 0xc82f, Data3 : 0x51c9, Data4 : (0xb7, 0x05, 0x5a, 0x26, 0xd5, 0x2f, 0xbe, 0xe6)) }
    // Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1beae481, Data2: 0x9d30, Data3 : 0x5ac8, Data4 : (0x94, 0x2c, 0x49, 0xa5, 0xf8, 0x73, 0x7a, 0xdf)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1afc512f, Data2: 0xdfa2, Data3 : 0x5528, Data4 : (0x8a, 0xef, 0x6e, 0x6a, 0x37, 0x78, 0x9b, 0x3c)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe95057be, Data2: 0xe8bd, Data3 : 0x53df, Data4 : (0xa2, 0xf6, 0x86, 0x5a, 0x66, 0xa0, 0x7c, 0x6b)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb94e539f, Data2: 0x44b6, Data3 : 0x54c6, Data4 : (0x9a, 0xd4, 0xe2, 0x84, 0x4b, 0x3e, 0x0b, 0xe1)) }
    // Windows.Web.Http.Headers.HttpContentCodingHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpContentCodingHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpContentCodingHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpContentCodingHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpContentCodingHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpContentCodingHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpContentCodingHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpContentCodingHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpContentCodingHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdcdf2620, Data2: 0xb6d0, Data3 : 0x5835, Data4 : (0x8b, 0xec, 0xd3, 0xb9, 0x46, 0xa5, 0x0f, 0x55)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0e8960c2, Data2: 0x76e5, Data3 : 0x56c1, Data4 : (0x9f, 0xe6, 0x8c, 0xd9, 0x01, 0x8a, 0x67, 0x86)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe21ad0b2, Data2: 0xc893, Data3 : 0x5360, Data4 : (0xa4, 0xfe, 0xf0, 0x83, 0xb3, 0x08, 0xa9, 0xcd)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x33f9653d, Data2: 0x0eed, Data3 : 0x5368, Data4 : (0xa5, 0x1e, 0x98, 0x38, 0x51, 0x91, 0xf8, 0x6f)) }
    // Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xeb18569b, Data2: 0xa7ab, Data3 : 0x58bb, Data4 : (0x88, 0x80, 0xdd, 0x02, 0x2f, 0x75, 0x5b, 0x51)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x916e6271, Data2: 0xcef6, Data3 : 0x53b8, Data4 : (0xb9, 0x3f, 0xdc, 0x8d, 0xca, 0x55, 0x9e, 0x50)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3780c808, Data2: 0x8b98, Data3 : 0x5327, Data4 : (0x84, 0xc7, 0x05, 0x53, 0x63, 0xfe, 0x32, 0xad)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbc196ace, Data2: 0x8a56, Data3 : 0x5fd0, Data4 : (0x98, 0x78, 0xc8, 0x07, 0xed, 0xd8, 0x64, 0x5a)) }
    // Windows.Web.Http.Headers.HttpCookiePairHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpCookiePairHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpCookiePairHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpCookiePairHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpCookiePairHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpCookiePairHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpCookiePairHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpCookiePairHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpCookiePairHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xad89192d, Data2: 0x6ef8, Data3 : 0x56b5, Data4 : (0xa4, 0xdc, 0xe4, 0x8d, 0x0e, 0x85, 0xd5, 0x69)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x16773244, Data2: 0x5011, Data3 : 0x5244, Data4 : (0xbb, 0x00, 0x14, 0xdb, 0x4c, 0xf7, 0x10, 0x05)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xed3b6323, Data2: 0xb1c3, Data3 : 0x558b, Data4 : (0x99, 0x17, 0x08, 0x26, 0xc4, 0xa9, 0xe8, 0xc0)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x18e138ee, Data2: 0xfec7, Data3 : 0x527d, Data4 : (0x86, 0x93, 0xde, 0xeb, 0xca, 0x4f, 0x3d, 0xcd)) }
    // Windows.Web.Http.Headers.HttpExpectationHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpExpectationHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpExpectationHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpExpectationHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpExpectationHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpExpectationHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpExpectationHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpExpectationHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpExpectationHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x71a22f32, Data2: 0xa3c0, Data3 : 0x574b, Data4 : (0x87, 0xb4, 0x12, 0x71, 0x99, 0xcc, 0x7d, 0x5e)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0a391c2b, Data2: 0x13c3, Data3 : 0x59b8, Data4 : (0x86, 0x62, 0x13, 0xaf, 0xfb, 0x9d, 0x17, 0x54)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6b72326a, Data2: 0x46b1, Data3 : 0x5d80, Data4 : (0xa1, 0x62, 0xc5, 0xf4, 0x5b, 0xe0, 0x2e, 0x2b)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6df6da2, Data2: 0x8d92, Data3 : 0x5270, Data4 : (0x95, 0x84, 0xd6, 0xa9, 0xa9, 0x31, 0x58, 0x6d)) }
    // Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x551fb7fb, Data2: 0xce42, Data3 : 0x5ffd, Data4 : (0xa2, 0xe0, 0x2a, 0x6c, 0xe1, 0x69, 0x80, 0x70)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0c5a4a0d, Data2: 0xdbb7, Data3 : 0x5abf, Data4 : (0xa5, 0xfd, 0xc3, 0xb9, 0x8d, 0x9c, 0x14, 0x87)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa25503de, Data2: 0x4aef, Data3 : 0x5ef4, Data4 : (0x9f, 0x06, 0x5d, 0xf4, 0x09, 0x40, 0x51, 0xbe)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc18538f7, Data2: 0xc256, Data3 : 0x5666, Data4 : (0x88, 0x68, 0x22, 0x25, 0xaf, 0x35, 0x74, 0xb6)) }
    // Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf1c1e9bd, Data2: 0x01a6, Data3 : 0x5bd3, Data4 : (0xaf, 0x7b, 0xc1, 0x42, 0x20, 0xa6, 0x45, 0xc0)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xffc7dfde, Data2: 0x58b8, Data3 : 0x51e9, Data4 : (0xb3, 0x3b, 0x65, 0xa5, 0xd6, 0xa4, 0xe2, 0x4c)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6a2084a3, Data2: 0x941a, Data3 : 0x5528, Data4 : (0xa2, 0xec, 0x28, 0xcf, 0x1f, 0xf9, 0xb1, 0xa9)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x69392060, Data2: 0x6c0f, Data3 : 0x5de6, Data4 : (0x8c, 0xed, 0xf1, 0x4f, 0xc1, 0xb8, 0x33, 0x76)) }
    // Windows.Web.Http.Headers.HttpProductInfoHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpProductInfoHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpProductInfoHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpProductInfoHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpProductInfoHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpProductInfoHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpProductInfoHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpProductInfoHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpProductInfoHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x82fef9f0, Data2: 0xe283, Data3 : 0x5279, Data4 : (0xaa, 0x50, 0xf0, 0xb3, 0xe5, 0x72, 0x6a, 0x86)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbf97cf99, Data2: 0xe614, Data3 : 0x5765, Data4 : (0xba, 0xd7, 0x16, 0x1a, 0xe3, 0xa9, 0x3a, 0xe9)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4f785951, Data2: 0xb59c, Data3 : 0x5108, Data4 : (0xb0, 0xcd, 0x14, 0x37, 0x57, 0x8a, 0xf4, 0x9c)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue
// closed interface type
public class IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x38e72562, Data2: 0xe17c, Data3 : 0x5d68, Data4 : (0xaa, 0xd1, 0x8e, 0x8a, 0x86, 0x0b, 0x89, 0x69)) }
    // Windows.Web.Http.Headers.HttpTransferCodingHeaderValue GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue(consuming: __result);
    }
    // bool IndexOf(Windows.Web.Http.Headers.HttpTransferCodingHeaderValue, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Web.Http.Headers.HttpTransferCodingHeaderValue)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Web.Http.Headers.HttpTransferCodingHeaderValue)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Web.Http.Headers.HttpTransferCodingHeaderValue)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Web.Http.Headers.HttpTransferCodingHeaderValue[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Web.Http.Headers.HttpTransferCodingHeaderValue[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x25c1a8d6, Data2: 0x229b, Data3 : 0x5421, Data4 : (0xb3, 0xb3, 0xb7, 0xef, 0x07, 0x8f, 0xad, 0x7f)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
// closed interface type
public class IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x57402048, Data2: 0x38bf, Data3 : 0x5055, Data4 : (0xac, 0xb6, 0x5c, 0x4d, 0xa7, 0x65, 0xe3, 0x88)) }
// method not needed: First
} // IIterable_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
// closed interface type
public class IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x49e58dec, Data2: 0xb5cd, Data3 : 0x5ba4, Data4 : (0xa6, 0x03, 0x36, 0x5d, 0x15, 0x88, 0xad, 0x4c)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue
}
