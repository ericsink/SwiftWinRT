// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.BackgroundTransfer {
// type: Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress
// struct type
public typealias BackgroundDownloadProgress = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundDownloadProgress;

// type: Windows.Networking.BackgroundTransfer.BackgroundDownloader
// runtime class
public class BackgroundDownloader
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IBackgroundDownloader;
    public init(plok: Windows.Networking.BackgroundTransfer.IBackgroundDownloader?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IBackgroundDownloader { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.BackgroundTransfer.BackgroundDownloader")
        try super.init(plok: _self.QueryInterface())
    }
    public init(completionGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup>) throws {
        let _af : IBackgroundDownloaderFactory = try RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundDownloader");
        _self = try _af.CreateWithCompletionGroup(completionGroup: completionGroup!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IBackgroundDownloaderStaticMethods2 {
        static var x : IBackgroundDownloaderStaticMethods2 =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundDownloader")
    }
    public static var BackgroundDownloaderStaticMethods2 : IBackgroundDownloaderStaticMethods2 {
        _IBackgroundDownloaderStaticMethods2.x
    }
    public static func GetCurrentDownloadsForTransferGroupAsync(group : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try BackgroundDownloaderStaticMethods2.GetCurrentDownloadsForTransferGroupAsync(group: group!.Interface());
    }
    public static func GetCurrentDownloadsForTransferGroup(group : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup>) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetCurrentDownloadsForTransferGroupAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    private struct _IBackgroundDownloaderStaticMethods {
        static var x : IBackgroundDownloaderStaticMethods =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundDownloader")
    }
    public static var BackgroundDownloaderStaticMethods : IBackgroundDownloaderStaticMethods {
        _IBackgroundDownloaderStaticMethods.x
    }
    public static func GetCurrentDownloadsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try BackgroundDownloaderStaticMethods.GetCurrentDownloadsAsync();
    }
    public static func GetCurrentDownloads() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetCurrentDownloadsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func GetCurrentDownloadsAsync(group : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try BackgroundDownloaderStaticMethods.GetCurrentDownloadsForGroupAsync(group: group);
    }
    public static func GetCurrentDownloads(group : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetCurrentDownloadsAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    private struct _IBackgroundDownloaderUserConsent {
        static var x : IBackgroundDownloaderUserConsent =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundDownloader")
    }
    public static var BackgroundDownloaderUserConsent : IBackgroundDownloaderUserConsent {
        _IBackgroundDownloaderUserConsent.x
    }
    public static func RequestUnconstrainedDownloadsAsync(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult> {
        return try BackgroundDownloaderUserConsent.RequestUnconstrainedDownloadsAsync(operations: operations);
    }
    public static func RequestUnconstrainedDownloads(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) async throws -> Optional<Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult(plok: Self.RequestUnconstrainedDownloadsAsync(operations: operations)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateDownload(uri : Optional<Windows.Foundation.Uri>, resultFile : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Networking.BackgroundTransfer.DownloadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.DownloadOperation(plok: _ifc.CreateDownload(uri: uri!.Interface(), resultFile: resultFile));
    }
    public func CreateDownload(uri : Optional<Windows.Foundation.Uri>, resultFile : Optional<Windows.Storage.IStorageFile>, requestBodyFile : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Networking.BackgroundTransfer.DownloadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.DownloadOperation(plok: _ifc.CreateDownloadFromFile(uri: uri!.Interface(), resultFile: resultFile, requestBodyFile: requestBodyFile));
    }
    public func CreateDownloadAsync(uri : Optional<Windows.Foundation.Uri>, resultFile : Optional<Windows.Storage.IStorageFile>, requestBodyStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader = try _self.QueryInterface();
        return try _ifc.CreateDownloadAsync(uri: uri!.Interface(), resultFile: resultFile, requestBodyStream: requestBodyStream);
    }
    public func CreateDownload(uri : Optional<Windows.Foundation.Uri>, resultFile : Optional<Windows.Storage.IStorageFile>, requestBodyStream : Optional<Windows.Storage.Streams.IInputStream>) async throws -> Optional<Windows.Networking.BackgroundTransfer.DownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.DownloadOperation(plok: self.CreateDownloadAsync(uri: uri, resultFile: resultFile, requestBodyStream: requestBodyStream)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetRequestHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(headerName: headerName, headerValue: headerValue);
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ServerCredential());
    }
    public func put_ServerCredential(credential : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_ServerCredential(credential: credential!.Interface());
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ProxyCredential());
    }
    public func put_ProxyCredential(credential : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_ProxyCredential(credential: credential!.Interface());
    }
    public func get_Method() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.get_Method();
    }
    public func put_Method(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_Method(value: value);
    }
    public func get_Group() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.get_Group();
    }
    public func put_Group(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_Group(value: value);
    }
    public func get_CostPolicy() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.get_CostPolicy();
    }
    public func put_CostPolicy(value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_CostPolicy(value: value);
    }
    public var CostPolicy : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.CostPolicy;
        }
    }
    public var Group : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.Group;
        }
    }
    public var Method : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.Method;
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ProxyCredential);
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ServerCredential);
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.get_TransferGroup());
    }
    public func put_TransferGroup(value : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try _ifc.put_TransferGroup(value: value!.Interface());
    }
    public func get_SuccessToastNotification() throws -> Optional<Windows.UI.Notifications.ToastNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.get_SuccessToastNotification());
    }
    public func put_SuccessToastNotification(value : Optional<Windows.UI.Notifications.ToastNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try _ifc.put_SuccessToastNotification(value: value!.Interface());
    }
    public func get_FailureToastNotification() throws -> Optional<Windows.UI.Notifications.ToastNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.get_FailureToastNotification());
    }
    public func put_FailureToastNotification(value : Optional<Windows.UI.Notifications.ToastNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try _ifc.put_FailureToastNotification(value: value!.Interface());
    }
    public func get_SuccessTileNotification() throws -> Optional<Windows.UI.Notifications.TileNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.get_SuccessTileNotification());
    }
    public func put_SuccessTileNotification(value : Optional<Windows.UI.Notifications.TileNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try _ifc.put_SuccessTileNotification(value: value!.Interface());
    }
    public func get_FailureTileNotification() throws -> Optional<Windows.UI.Notifications.TileNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.get_FailureTileNotification());
    }
    public func put_FailureTileNotification(value : Optional<Windows.UI.Notifications.TileNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try _ifc.put_FailureTileNotification(value: value!.Interface());
    }
    public var FailureTileNotification : Optional<Windows.UI.Notifications.TileNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.FailureTileNotification);
        }
    }
    public var FailureToastNotification : Optional<Windows.UI.Notifications.ToastNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.FailureToastNotification);
        }
    }
    public var SuccessTileNotification : Optional<Windows.UI.Notifications.TileNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.SuccessTileNotification);
        }
    }
    public var SuccessToastNotification : Optional<Windows.UI.Notifications.ToastNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.SuccessToastNotification);
        }
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.TransferGroup);
        }
    }
    public func get_CompletionGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader3 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup(plok: _ifc.get_CompletionGroup());
    }
    public var CompletionGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundDownloader3 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup(plok: _ifc.CompletionGroup);
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior
// enum type
public typealias BackgroundTransferBehavior = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferBehavior;

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup
// runtime class
public class BackgroundTransferCompletionGroup
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup;
    public init(plok: Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Trigger() throws -> Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup = try _self.QueryInterface();
        return try _ifc.get_Trigger();
    }
    public func get_IsEnabled() throws -> boolean {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup = try _self.QueryInterface();
        return try _ifc.get_IsEnabled();
    }
    public func Enable() throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup = try _self.QueryInterface();
        return try _ifc.Enable();
    }
    public var IsEnabled : boolean {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup = try _self.QueryInterface();
        return try _ifc.IsEnabled;
        }
    }
    public var Trigger : Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup = try _self.QueryInterface();
        return try _ifc.Trigger;
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroupTriggerDetails
// runtime class
public class BackgroundTransferCompletionGroupTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails;
    public init(plok: Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails { return _self; }
    public func get_Downloads() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_Downloads();
    }
    public func get_Uploads() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_Uploads();
    }
    public var Downloads : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails = try _self.QueryInterface();
        return try _ifc.Downloads;
        }
    }
    public var Uploads : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails = try _self.QueryInterface();
        return try _ifc.Uploads;
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart
// runtime class
public class BackgroundTransferContentPart
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart;
    public init(plok: Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart { return _self; }
    public init(name : Swift.String) throws {
        let _af : IBackgroundTransferContentPartFactory = try RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart");
        _self = try _af.CreateWithName(name: name)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(name : Swift.String, fileName : Swift.String) throws {
        let _af : IBackgroundTransferContentPartFactory = try RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart");
        _self = try _af.CreateWithNameAndFileName(name: name, fileName: fileName)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart")
        try super.init(plok: _self.QueryInterface())
    }
    public func SetHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart = try _self.QueryInterface();
        return try _ifc.SetHeader(headerName: headerName, headerValue: headerValue);
    }
    public func SetText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart = try _self.QueryInterface();
        return try _ifc.SetText(value: value);
    }
    public func SetFile(value : Optional<Windows.Storage.IStorageFile>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart = try _self.QueryInterface();
        return try _ifc.SetFile(value: value);
    }
}

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy
// enum type
public typealias BackgroundTransferCostPolicy = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy;

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferError
// static class
public class BackgroundTransferError
{
    private struct _IBackgroundTransferErrorStaticMethods {
        static var x : IBackgroundTransferErrorStaticMethods =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundTransferError")
    }
    public static var BackgroundTransferErrorStaticMethods : IBackgroundTransferErrorStaticMethods {
        _IBackgroundTransferErrorStaticMethods.x
    }
    public static func GetStatus(hresult : Swift.Int32) throws -> Windows.Web.WebErrorStatus {
        return try BackgroundTransferErrorStaticMethods.GetStatus(hresult: hresult);
    }
}

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange
// struct type
public typealias BackgroundTransferFileRange = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange;

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferGroup
// runtime class
public class BackgroundTransferGroup
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup;
    public init(plok: Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup { return _self; }
    private struct _IBackgroundTransferGroupStatics {
        static var x : IBackgroundTransferGroupStatics =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundTransferGroup")
    }
    public static var BackgroundTransferGroupStatics : IBackgroundTransferGroupStatics {
        _IBackgroundTransferGroupStatics.x
    }
    public static func CreateGroup(name : Swift.String) throws -> Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: BackgroundTransferGroupStatics.CreateGroup(name: name));
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_TransferBehavior() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup = try _self.QueryInterface();
        return try _ifc.get_TransferBehavior();
    }
    public func put_TransferBehavior(value : Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup = try _self.QueryInterface();
        return try _ifc.put_TransferBehavior(value: value);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var TransferBehavior : Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup = try _self.QueryInterface();
        return try _ifc.TransferBehavior;
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferPriority
// enum type
public typealias BackgroundTransferPriority = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority;

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs
// runtime class
public class BackgroundTransferRangesDownloadedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs;
    public init(plok: Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs { return _self; }
    public func get_WasDownloadRestarted() throws -> boolean {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs = try _self.QueryInterface();
        return try _ifc.get_WasDownloadRestarted();
    }
    public func get_AddedRanges() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs = try _self.QueryInterface();
        return try _ifc.get_AddedRanges();
    }
    public func GetDeferral() throws -> Optional<Windows.Foundation.Deferral> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs = try _self.QueryInterface();
        return try Windows.Foundation.Deferral(plok: _ifc.GetDeferral());
    }
    public var AddedRanges : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs = try _self.QueryInterface();
        return try _ifc.AddedRanges;
        }
    }
    public var WasDownloadRestarted : boolean {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs = try _self.QueryInterface();
        return try _ifc.WasDownloadRestarted;
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.BackgroundTransferStatus
// enum type
public typealias BackgroundTransferStatus = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus;

// type: Windows.Networking.BackgroundTransfer.BackgroundUploadProgress
// struct type
public typealias BackgroundUploadProgress = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundUploadProgress;

// type: Windows.Networking.BackgroundTransfer.BackgroundUploader
// runtime class
public class BackgroundUploader
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IBackgroundUploader;
    public init(plok: Windows.Networking.BackgroundTransfer.IBackgroundUploader?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IBackgroundUploader { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.BackgroundTransfer.BackgroundUploader")
        try super.init(plok: _self.QueryInterface())
    }
    public init(completionGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup>) throws {
        let _af : IBackgroundUploaderFactory = try RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundUploader");
        _self = try _af.CreateWithCompletionGroup(completionGroup: completionGroup!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IBackgroundUploaderStaticMethods {
        static var x : IBackgroundUploaderStaticMethods =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundUploader")
    }
    public static var BackgroundUploaderStaticMethods : IBackgroundUploaderStaticMethods {
        _IBackgroundUploaderStaticMethods.x
    }
    public static func GetCurrentUploadsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try BackgroundUploaderStaticMethods.GetCurrentUploadsAsync();
    }
    public static func GetCurrentUploads() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetCurrentUploadsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func GetCurrentUploadsAsync(group : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try BackgroundUploaderStaticMethods.GetCurrentUploadsForGroupAsync(group: group);
    }
    public static func GetCurrentUploads(group : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetCurrentUploadsAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    private struct _IBackgroundUploaderUserConsent {
        static var x : IBackgroundUploaderUserConsent =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundUploader")
    }
    public static var BackgroundUploaderUserConsent : IBackgroundUploaderUserConsent {
        _IBackgroundUploaderUserConsent.x
    }
    public static func RequestUnconstrainedUploadsAsync(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult> {
        return try BackgroundUploaderUserConsent.RequestUnconstrainedUploadsAsync(operations: operations);
    }
    public static func RequestUnconstrainedUploads(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) async throws -> Optional<Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult(plok: Self.RequestUnconstrainedUploadsAsync(operations: operations)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    private struct _IBackgroundUploaderStaticMethods2 {
        static var x : IBackgroundUploaderStaticMethods2 =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.BackgroundUploader")
    }
    public static var BackgroundUploaderStaticMethods2 : IBackgroundUploaderStaticMethods2 {
        _IBackgroundUploaderStaticMethods2.x
    }
    public static func GetCurrentUploadsForTransferGroupAsync(group : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try BackgroundUploaderStaticMethods2.GetCurrentUploadsForTransferGroupAsync(group: group!.Interface());
    }
    public static func GetCurrentUploadsForTransferGroup(group : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup>) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetCurrentUploadsForTransferGroupAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateUpload(uri : Optional<Windows.Foundation.Uri>, sourceFile : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Networking.BackgroundTransfer.UploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.UploadOperation(plok: _ifc.CreateUpload(uri: uri!.Interface(), sourceFile: sourceFile));
    }
    public func CreateUploadFromStreamAsync(uri : Optional<Windows.Foundation.Uri>, sourceStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader = try _self.QueryInterface();
        return try _ifc.CreateUploadFromStreamAsync(uri: uri!.Interface(), sourceStream: sourceStream);
    }
    public func CreateUploadFromStream(uri : Optional<Windows.Foundation.Uri>, sourceStream : Optional<Windows.Storage.Streams.IInputStream>) async throws -> Optional<Windows.Networking.BackgroundTransfer.UploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UploadOperation(plok: self.CreateUploadFromStreamAsync(uri: uri, sourceStream: sourceStream)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateUploadAsync(uri : Optional<Windows.Foundation.Uri>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader = try _self.QueryInterface();
        return try _ifc.CreateUploadWithFormDataAndAutoBoundaryAsync(uri: uri!.Interface(), parts: parts);
    }
    public func CreateUpload(uri : Optional<Windows.Foundation.Uri>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>) async throws -> Optional<Windows.Networking.BackgroundTransfer.UploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UploadOperation(plok: self.CreateUploadAsync(uri: uri, parts: parts)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateUploadAsync(uri : Optional<Windows.Foundation.Uri>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader = try _self.QueryInterface();
        return try _ifc.CreateUploadWithSubTypeAsync(uri: uri!.Interface(), parts: parts, subType: subType);
    }
    public func CreateUpload(uri : Optional<Windows.Foundation.Uri>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Swift.String) async throws -> Optional<Windows.Networking.BackgroundTransfer.UploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UploadOperation(plok: self.CreateUploadAsync(uri: uri, parts: parts, subType: subType)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateUploadAsync(uri : Optional<Windows.Foundation.Uri>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Swift.String, boundary : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader = try _self.QueryInterface();
        return try _ifc.CreateUploadWithSubTypeAndBoundaryAsync(uri: uri!.Interface(), parts: parts, subType: subType, boundary: boundary);
    }
    public func CreateUpload(uri : Optional<Windows.Foundation.Uri>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Swift.String, boundary : Swift.String) async throws -> Optional<Windows.Networking.BackgroundTransfer.UploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UploadOperation(plok: self.CreateUploadAsync(uri: uri, parts: parts, subType: subType, boundary: boundary)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetRequestHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(headerName: headerName, headerValue: headerValue);
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ServerCredential());
    }
    public func put_ServerCredential(credential : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_ServerCredential(credential: credential!.Interface());
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ProxyCredential());
    }
    public func put_ProxyCredential(credential : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_ProxyCredential(credential: credential!.Interface());
    }
    public func get_Method() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.get_Method();
    }
    public func put_Method(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_Method(value: value);
    }
    public func get_Group() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.get_Group();
    }
    public func put_Group(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_Group(value: value);
    }
    public func get_CostPolicy() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.get_CostPolicy();
    }
    public func put_CostPolicy(value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.put_CostPolicy(value: value);
    }
    public var CostPolicy : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.CostPolicy;
        }
    }
    public var Group : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.Group;
        }
    }
    public var Method : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try _ifc.Method;
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ProxyCredential);
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferBase = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ServerCredential);
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.get_TransferGroup());
    }
    public func put_TransferGroup(value : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try _ifc.put_TransferGroup(value: value!.Interface());
    }
    public func get_SuccessToastNotification() throws -> Optional<Windows.UI.Notifications.ToastNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.get_SuccessToastNotification());
    }
    public func put_SuccessToastNotification(value : Optional<Windows.UI.Notifications.ToastNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try _ifc.put_SuccessToastNotification(value: value!.Interface());
    }
    public func get_FailureToastNotification() throws -> Optional<Windows.UI.Notifications.ToastNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.get_FailureToastNotification());
    }
    public func put_FailureToastNotification(value : Optional<Windows.UI.Notifications.ToastNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try _ifc.put_FailureToastNotification(value: value!.Interface());
    }
    public func get_SuccessTileNotification() throws -> Optional<Windows.UI.Notifications.TileNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.get_SuccessTileNotification());
    }
    public func put_SuccessTileNotification(value : Optional<Windows.UI.Notifications.TileNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try _ifc.put_SuccessTileNotification(value: value!.Interface());
    }
    public func get_FailureTileNotification() throws -> Optional<Windows.UI.Notifications.TileNotification> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.get_FailureTileNotification());
    }
    public func put_FailureTileNotification(value : Optional<Windows.UI.Notifications.TileNotification>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try _ifc.put_FailureTileNotification(value: value!.Interface());
    }
    public var FailureTileNotification : Optional<Windows.UI.Notifications.TileNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.FailureTileNotification);
        }
    }
    public var FailureToastNotification : Optional<Windows.UI.Notifications.ToastNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.FailureToastNotification);
        }
    }
    public var SuccessTileNotification : Optional<Windows.UI.Notifications.TileNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.SuccessTileNotification);
        }
    }
    public var SuccessToastNotification : Optional<Windows.UI.Notifications.ToastNotification> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.SuccessToastNotification);
        }
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.TransferGroup);
        }
    }
    public func get_CompletionGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader3 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup(plok: _ifc.get_CompletionGroup());
    }
    public var CompletionGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundUploader3 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup(plok: _ifc.CompletionGroup);
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.ContentPrefetcher
// static class
public class ContentPrefetcher
{
    private struct _IContentPrefetcher {
        static var x : IContentPrefetcher =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.ContentPrefetcher")
    }
    public static var ContentPrefetcher : IContentPrefetcher {
        _IContentPrefetcher.x
    }
    public static func get_ContentUris() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        return try ContentPrefetcher.get_ContentUris();
    }
    public static func put_IndirectContentUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        return try ContentPrefetcher.put_IndirectContentUri(value: value!.Interface());
    }
    public static func get_IndirectContentUri() throws -> Optional<Windows.Foundation.Uri> {
        return try Windows.Foundation.Uri(plok: ContentPrefetcher.get_IndirectContentUri());
    }
    public static var ContentUris : Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        get throws {
        return try ContentPrefetcher.ContentUris;
        }
    }
    public static var IndirectContentUri : Optional<Windows.Foundation.Uri> {
        get throws {
        return try Windows.Foundation.Uri(plok: ContentPrefetcher.IndirectContentUri);
        }
    }
    private struct _IContentPrefetcherTime {
        static var x : IContentPrefetcherTime =
            try! RoGetActivationFactory("Windows.Networking.BackgroundTransfer.ContentPrefetcher")
    }
    public static var ContentPrefetcherTime : IContentPrefetcherTime {
        _IContentPrefetcherTime.x
    }
    public static func get_LastSuccessfulPrefetchTime() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        return try ContentPrefetcherTime.get_LastSuccessfulPrefetchTime();
    }
    public static var LastSuccessfulPrefetchTime : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        return try ContentPrefetcherTime.LastSuccessfulPrefetchTime;
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.DownloadOperation
// runtime class
public class DownloadOperation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IDownloadOperation;
    public init(plok: Windows.Networking.BackgroundTransfer.IDownloadOperation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IDownloadOperation { return _self; }
    public func get_ResultFile() throws -> Optional<Windows.Storage.IStorageFile> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.get_ResultFile();
    }
    public func get_Progress() throws -> Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.get_Progress();
    }
    public func StartAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.StartAsync();
    }
    public func Start() async throws -> Optional<Windows.Networking.BackgroundTransfer.DownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.DownloadOperation(plok: self.StartAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func AttachAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.AttachAsync();
    }
    public func Attach() async throws -> Optional<Windows.Networking.BackgroundTransfer.DownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.DownloadOperation(plok: self.AttachAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func Pause() throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.Pause();
    }
    public func Resume() throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.Resume();
    }
    public var Progress : Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.Progress;
        }
    }
    public var ResultFile : Optional<Windows.Storage.IStorageFile> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation = try _self.QueryInterface();
        return try _ifc.ResultFile;
        }
    }
    public func get_Guid() throws -> GUID {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_Guid();
    }
    public func get_RequestedUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_RequestedUri());
    }
    public func get_Method() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_Method();
    }
    public func get_Group() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_Group();
    }
    public func get_CostPolicy() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_CostPolicy();
    }
    public func put_CostPolicy(value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.put_CostPolicy(value: value);
    }
    public func GetResultStreamAt(position : Swift.UInt64) throws -> Optional<Windows.Storage.Streams.IInputStream> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.GetResultStreamAt(position: position);
    }
    public func GetResponseInformation() throws -> Optional<Windows.Networking.BackgroundTransfer.ResponseInformation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.ResponseInformation(plok: _ifc.GetResponseInformation());
    }
    public var CostPolicy : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.CostPolicy;
        }
    }
    public var Group : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.Group;
        }
    }
    public var Guid : GUID {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.Guid;
        }
    }
    public var Method : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.Method;
        }
    }
    public var RequestedUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.RequestedUri);
        }
    }
    public func get_Priority() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferPriority {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority = try _self.QueryInterface();
        return try _ifc.get_Priority();
    }
    public func put_Priority(value : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority = try _self.QueryInterface();
        return try _ifc.put_Priority(value: value);
    }
    public var Priority : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority = try _self.QueryInterface();
        return try _ifc.Priority;
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.get_TransferGroup());
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.TransferGroup);
        }
    }
    public func get_IsRandomAccessRequired() throws -> boolean {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.get_IsRandomAccessRequired();
    }
    public func put_IsRandomAccessRequired(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.put_IsRandomAccessRequired(value: value);
    }
    public func GetResultRandomAccessStreamReference() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.GetResultRandomAccessStreamReference();
    }
    public func GetDownloadedRanges() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.GetDownloadedRanges();
    }
    public func add_RangesDownloaded(eventHandler : @escaping (Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>, Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.add_RangesDownloaded(eventHandler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_RangesDownloaded(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.remove_RangesDownloaded(eventCookie: eventCookie);
    }
    public func put_RequestedUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.put_RequestedUri(value: value!.Interface());
    }
    public func get_RecoverableWebErrorStatuses() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CWebErrorStatus> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.get_RecoverableWebErrorStatuses();
    }
    public func get_CurrentWebErrorStatus() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CWeb_CWebErrorStatus> {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.get_CurrentWebErrorStatus();
    }
    public var CurrentWebErrorStatus : Optional<ClosedGenerics.IReference_1__q_CWindows_CWeb_CWebErrorStatus> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.CurrentWebErrorStatus;
        }
    }
    public var IsRandomAccessRequired : boolean {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.IsRandomAccessRequired;
        }
    }
    public var RecoverableWebErrorStatuses : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CWebErrorStatus> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation3 = try _self.QueryInterface();
        return try _ifc.RecoverableWebErrorStatuses;
        }
    }
    public func MakeCurrentInTransferGroup() throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation4 = try _self.QueryInterface();
        return try _ifc.MakeCurrentInTransferGroup();
    }
    public func SetRequestHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation5 = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(headerName: headerName, headerValue: headerValue);
    }
    public func RemoveRequestHeader(headerName : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IDownloadOperation5 = try _self.QueryInterface();
        return try _ifc.RemoveRequestHeader(headerName: headerName);
    }
}

// type: Windows.Networking.BackgroundTransfer.IBackgroundDownloader
// interface type
open class IBackgroundDownloader
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc1c79333, Data2: 0x6649, Data3 : 0x4b1d, Data4 : (0xa8, 0x26, 0xa4, 0xb3, 0xdd, 0x23, 0x4d, 0x0b)) }
    // Windows.Networking.BackgroundTransfer.DownloadOperation CreateDownload(Windows.Foundation.Uri, Windows.Storage.IStorageFile)
    private func _n_CreateDownload(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ resultFile : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDownload(pThis, uri, resultFile, __presult))
        }
    }
    public func CreateDownload(uri : Optional<Windows.Foundation.IUriRuntimeClass>, resultFile : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>> = nil;
        try self._n_CreateDownload(RawPointer(uri), RawPointer(resultFile), &__result);
        return Windows.Networking.BackgroundTransfer.IDownloadOperation(consuming: __result);
    }
    // Windows.Networking.BackgroundTransfer.DownloadOperation CreateDownload(Windows.Foundation.Uri, Windows.Storage.IStorageFile, Windows.Storage.IStorageFile)
    private func _n_CreateDownloadFromFile(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ resultFile : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ requestBodyFile : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDownloadFromFile(pThis, uri, resultFile, requestBodyFile, __presult))
        }
    }
    public func CreateDownloadFromFile(uri : Optional<Windows.Foundation.IUriRuntimeClass>, resultFile : Optional<Windows.Storage.IStorageFile>, requestBodyFile : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>> = nil;
        try self._n_CreateDownloadFromFile(RawPointer(uri), RawPointer(resultFile), RawPointer(requestBodyFile), &__result);
        return Windows.Networking.BackgroundTransfer.IDownloadOperation(consuming: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.DownloadOperation> CreateDownloadAsync(Windows.Foundation.Uri, Windows.Storage.IStorageFile, Windows.Storage.Streams.IInputStream)
    private func _n_CreateDownloadAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ resultFile : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ requestBodyStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDownloadAsync(pThis, uri, resultFile, requestBodyStream, __presult))
        }
    }
    public func CreateDownloadAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, resultFile : Optional<Windows.Storage.IStorageFile>, requestBodyStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_CreateDownloadAsync(RawPointer(uri), RawPointer(resultFile), RawPointer(requestBodyStream), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    public func CreateDownload(uri : Optional<Windows.Foundation.IUriRuntimeClass>, resultFile : Optional<Windows.Storage.IStorageFile>, requestBodyStream : Optional<Windows.Storage.Streams.IInputStream>) async throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateDownloadAsync(uri: uri, resultFile: resultFile, requestBodyStream: requestBodyStream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundDownloader


// type: Windows.Networking.BackgroundTransfer.IBackgroundDownloader2
// interface type
open class IBackgroundDownloader2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa94a5847, Data2: 0x348d, Data3 : 0x4a35, Data4 : (0x89, 0x0e, 0x8a, 0x1e, 0xf3, 0x79, 0x84, 0x79)) }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferGroup get_TransferGroup()
    private func _n_get_TransferGroup(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransferGroup(pThis, __presult))
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>> = nil;
        try self._n_get_TransferGroup(&__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup(consuming: __result);
    }
    // [IsSpecialName] void put_TransferGroup(Windows.Networking.BackgroundTransfer.BackgroundTransferGroup)
    private func _n_put_TransferGroup(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransferGroup(pThis, value))
        }
    }
    public func put_TransferGroup(value : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup>) throws -> Void {
        try self._n_put_TransferGroup(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.ToastNotification get_SuccessToastNotification()
    private func _n_get_SuccessToastNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuccessToastNotification(pThis, __presult))
        }
    }
    public func get_SuccessToastNotification() throws -> Optional<Windows.UI.Notifications.IToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>> = nil;
        try self._n_get_SuccessToastNotification(&__result);
        return Windows.UI.Notifications.IToastNotification(consuming: __result);
    }
    // [IsSpecialName] void put_SuccessToastNotification(Windows.UI.Notifications.ToastNotification)
    private func _n_put_SuccessToastNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuccessToastNotification(pThis, value))
        }
    }
    public func put_SuccessToastNotification(value : Optional<Windows.UI.Notifications.IToastNotification>) throws -> Void {
        try self._n_put_SuccessToastNotification(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.ToastNotification get_FailureToastNotification()
    private func _n_get_FailureToastNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FailureToastNotification(pThis, __presult))
        }
    }
    public func get_FailureToastNotification() throws -> Optional<Windows.UI.Notifications.IToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>> = nil;
        try self._n_get_FailureToastNotification(&__result);
        return Windows.UI.Notifications.IToastNotification(consuming: __result);
    }
    // [IsSpecialName] void put_FailureToastNotification(Windows.UI.Notifications.ToastNotification)
    private func _n_put_FailureToastNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FailureToastNotification(pThis, value))
        }
    }
    public func put_FailureToastNotification(value : Optional<Windows.UI.Notifications.IToastNotification>) throws -> Void {
        try self._n_put_FailureToastNotification(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.TileNotification get_SuccessTileNotification()
    private func _n_get_SuccessTileNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuccessTileNotification(pThis, __presult))
        }
    }
    public func get_SuccessTileNotification() throws -> Optional<Windows.UI.Notifications.ITileNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>> = nil;
        try self._n_get_SuccessTileNotification(&__result);
        return Windows.UI.Notifications.ITileNotification(consuming: __result);
    }
    // [IsSpecialName] void put_SuccessTileNotification(Windows.UI.Notifications.TileNotification)
    private func _n_put_SuccessTileNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuccessTileNotification(pThis, value))
        }
    }
    public func put_SuccessTileNotification(value : Optional<Windows.UI.Notifications.ITileNotification>) throws -> Void {
        try self._n_put_SuccessTileNotification(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.TileNotification get_FailureTileNotification()
    private func _n_get_FailureTileNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FailureTileNotification(pThis, __presult))
        }
    }
    public func get_FailureTileNotification() throws -> Optional<Windows.UI.Notifications.ITileNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>> = nil;
        try self._n_get_FailureTileNotification(&__result);
        return Windows.UI.Notifications.ITileNotification(consuming: __result);
    }
    // [IsSpecialName] void put_FailureTileNotification(Windows.UI.Notifications.TileNotification)
    private func _n_put_FailureTileNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FailureTileNotification(pThis, value))
        }
    }
    public func put_FailureTileNotification(value : Optional<Windows.UI.Notifications.ITileNotification>) throws -> Void {
        try self._n_put_FailureTileNotification(RawPointer(value));
    }
    public var FailureTileNotification : Optional<Windows.UI.Notifications.ITileNotification> {
        get throws {
            return try get_FailureTileNotification();
        }
    }
    public var FailureToastNotification : Optional<Windows.UI.Notifications.IToastNotification> {
        get throws {
            return try get_FailureToastNotification();
        }
    }
    public var SuccessTileNotification : Optional<Windows.UI.Notifications.ITileNotification> {
        get throws {
            return try get_SuccessTileNotification();
        }
    }
    public var SuccessToastNotification : Optional<Windows.UI.Notifications.IToastNotification> {
        get throws {
            return try get_SuccessToastNotification();
        }
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        get throws {
            return try get_TransferGroup();
        }
    }
} // IBackgroundDownloader2


// type: Windows.Networking.BackgroundTransfer.IBackgroundDownloader3
// interface type
open class IBackgroundDownloader3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd11a8c48, Data2: 0x86e8, Data3 : 0x48e2, Data4 : (0xb6, 0x15, 0x69, 0x76, 0xaa, 0xbf, 0x86, 0x1d)) }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup get_CompletionGroup()
    private func _n_get_CompletionGroup(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompletionGroup(pThis, __presult))
        }
    }
    public func get_CompletionGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup>> = nil;
        try self._n_get_CompletionGroup(&__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup(consuming: __result);
    }
    public var CompletionGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup> {
        get throws {
            return try get_CompletionGroup();
        }
    }
} // IBackgroundDownloader3


// type: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderFactory
// interface type
// ACTIVATION INTERFACE
open class IBackgroundDownloaderFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x26836c24, Data2: 0xd89e, Data3 : 0x46f4, Data4 : (0xa2, 0x9a, 0x4f, 0x4d, 0x4f, 0x14, 0x41, 0x55)) }
    // Windows.Networking.BackgroundTransfer.BackgroundDownloader CreateWithCompletionGroup(Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup)
    private func _n_CreateWithCompletionGroup(_ completionGroup : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloaderFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithCompletionGroup(pThis, completionGroup, __presult))
        }
    }
    public func CreateWithCompletionGroup(completionGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup>) throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundDownloader> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloader>> = nil;
        try self._n_CreateWithCompletionGroup(RawPointer(completionGroup), &__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundDownloader(consuming: __result);
    }
} // IBackgroundDownloaderFactory


// type: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderStaticMethods
// interface type
open class IBackgroundDownloaderStaticMethods
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x52a65a35, Data2: 0xc64e, Data3 : 0x426c, Data4 : (0x99, 0x19, 0x54, 0x0d, 0x0d, 0x21, 0xa6, 0x50)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation>> GetCurrentDownloadsAsync()
    private func _n_GetCurrentDownloadsAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloaderStaticMethods.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentDownloadsAsync(pThis, __presult))
        }
    }
    public func GetCurrentDownloadsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_GetCurrentDownloadsAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    public func GetCurrentDownloads() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCurrentDownloadsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation>> GetCurrentDownloadsAsync(System.String)
    private func _n_GetCurrentDownloadsForGroupAsync(_ group : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloaderStaticMethods.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentDownloadsForGroupAsync(pThis, group, __presult))
        }
    }
    public func GetCurrentDownloadsForGroupAsync(group : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        let __hstr_group = try HString(group!);
        return try withExtendedLifetime(__hstr_group) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_GetCurrentDownloadsForGroupAsync(__hstr_group.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
        }
    }
    public func GetCurrentDownloadsForGroup(group : Optional<Swift.String>) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCurrentDownloadsForGroupAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundDownloaderStaticMethods


// type: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderStaticMethods2
// interface type
open class IBackgroundDownloaderStaticMethods2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2faa1327, Data2: 0x1ad4, Data3 : 0x4ca5, Data4 : (0xb2, 0xcd, 0x08, 0xdb, 0xf0, 0x74, 0x6a, 0xfe)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation>> GetCurrentDownloadsForTransferGroupAsync(Windows.Networking.BackgroundTransfer.BackgroundTransferGroup)
    private func _n_GetCurrentDownloadsForTransferGroupAsync(_ group : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloaderStaticMethods2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentDownloadsForTransferGroupAsync(pThis, group, __presult))
        }
    }
    public func GetCurrentDownloadsForTransferGroupAsync(group : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_GetCurrentDownloadsForTransferGroupAsync(RawPointer(group), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    public func GetCurrentDownloadsForTransferGroup(group : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup>) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCurrentDownloadsForTransferGroupAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundDownloaderStaticMethods2


// type: Windows.Networking.BackgroundTransfer.IBackgroundDownloaderUserConsent
// interface type
open class IBackgroundDownloaderUserConsent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5d14e906, Data2: 0x9266, Data3 : 0x4808, Data4 : (0xbd, 0x71, 0x59, 0x25, 0xf2, 0xa3, 0x13, 0x0a)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult> RequestUnconstrainedDownloadsAsync(Windows.Foundation.Collections.IIterable<Windows.Networking.BackgroundTransfer.DownloadOperation>)
    private func _n_RequestUnconstrainedDownloadsAsync(_ operations : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundDownloaderUserConsent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestUnconstrainedDownloadsAsync(pThis, operations, __presult))
        }
    }
    public func RequestUnconstrainedDownloadsAsync(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>> = nil;
        try self._n_RequestUnconstrainedDownloadsAsync(RawPointer(operations), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(consuming: __result);
    }
    public func RequestUnconstrainedDownloads(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) async throws -> Optional<Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RequestUnconstrainedDownloadsAsync(operations: operations)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundDownloaderUserConsent


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferBase
// interface type
open class IBackgroundTransferBase
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2a9da250, Data2: 0xc769, Data3 : 0x458c, Data4 : (0xaf, 0xe8, 0xfe, 0xb8, 0xd4, 0xd3, 0xb2, 0xef)) }
    // void SetRequestHeader(System.String, System.String)
    private func _n_SetRequestHeader(_ headerName : Optional<HSTRING>, _ headerValue : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRequestHeader(pThis, headerName, headerValue))
        }
    }
    public func SetRequestHeader(headerName : Optional<Swift.String>, headerValue : Optional<Swift.String>) throws -> Void {
        let __hstr_headerName = try HString(headerName!);
        return try withExtendedLifetime(__hstr_headerName) {
        let __hstr_headerValue = try HString(headerValue!);
        return try withExtendedLifetime(__hstr_headerValue) {
        try self._n_SetRequestHeader(__hstr_headerName.Raw(), __hstr_headerValue.Raw());
        }
        }
    }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_ServerCredential()
    private func _n_get_ServerCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCredential(pThis, __presult))
        }
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_ServerCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] void put_ServerCredential(Windows.Security.Credentials.PasswordCredential)
    private func _n_put_ServerCredential(_ credential : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ServerCredential(pThis, credential))
        }
    }
    public func put_ServerCredential(credential : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Void {
        try self._n_put_ServerCredential(RawPointer(credential));
    }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_ProxyCredential()
    private func _n_get_ProxyCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyCredential(pThis, __presult))
        }
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_ProxyCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] void put_ProxyCredential(Windows.Security.Credentials.PasswordCredential)
    private func _n_put_ProxyCredential(_ credential : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProxyCredential(pThis, credential))
        }
    }
    public func put_ProxyCredential(credential : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Void {
        try self._n_put_ProxyCredential(RawPointer(credential));
    }
    // [IsSpecialName] System.String get_Method()
    private func _n_get_Method(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Method(pThis, __presult))
        }
    }
    public func get_Method() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Method(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Method(System.String)
    private func _n_put_Method(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Method(pThis, value))
        }
    }
    public func put_Method(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Method(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Group()
    private func _n_get_Group(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Group(pThis, __presult))
        }
    }
    public func get_Group() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Group(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Group(System.String)
    private func _n_put_Group(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Group(pThis, value))
        }
    }
    public func put_Group(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Group(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy get_CostPolicy()
    private func _n_get_CostPolicy(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CostPolicy(pThis, __presult))
        }
    }
    public func get_CostPolicy() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        var __result : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy_Default;
        try self._n_get_CostPolicy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CostPolicy(Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy)
    private func _n_put_CostPolicy(_ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CostPolicy(pThis, value))
        }
    }
    public func put_CostPolicy(value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy) throws -> Void {
        try self._n_put_CostPolicy(value);
    }
    public var CostPolicy : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        get throws {
            return try get_CostPolicy();
        }
    }
    public var Group : Swift.String {
        get throws {
            return try get_Group();
        }
    }
    public var Method : Swift.String {
        get throws {
            return try get_Method();
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_ProxyCredential();
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_ServerCredential();
        }
    }
} // IBackgroundTransferBase


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup
// interface type
open class IBackgroundTransferCompletionGroup
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2d930225, Data2: 0x986b, Data3 : 0x574d, Data4 : (0x79, 0x50, 0x0a, 0xdd, 0x47, 0xf5, 0xd7, 0x06)) }
    // [IsSpecialName] Windows.ApplicationModel.Background.IBackgroundTrigger get_Trigger()
    private func _n_get_Trigger(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CBackground_CIBackgroundTrigger>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Trigger(pThis, __presult))
        }
    }
    public func get_Trigger() throws -> Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CBackground_CIBackgroundTrigger>> = nil;
        try self._n_get_Trigger(&__result);
        return Windows.ApplicationModel.Background.IBackgroundTrigger(consuming: __result);
    }
    // [IsSpecialName] bool get_IsEnabled()
    private func _n_get_IsEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, __presult))
        }
    }
    public func get_IsEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsEnabled(&__result);
        return __result;
    }
    // void Enable()
    private func _n_Enable() throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Enable(pThis))
        }
    }
    public func Enable() throws -> Void {
        try self._n_Enable();
    }
    public var IsEnabled : boolean {
        get throws {
            return try get_IsEnabled();
        }
    }
    public var Trigger : Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        get throws {
            return try get_Trigger();
        }
    }
} // IBackgroundTransferCompletionGroup


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroupTriggerDetails
// interface type
open class IBackgroundTransferCompletionGroupTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7b6be286, Data2: 0x6e47, Data3 : 0x5136, Data4 : (0x7f, 0xcb, 0xfa, 0x43, 0x89, 0xf4, 0x6f, 0x5b)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation> get_Downloads()
    private func _n_get_Downloads(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroupTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Downloads(pThis, __presult))
        }
    }
    public func get_Downloads() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_get_Downloads(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation> get_Uploads()
    private func _n_get_Uploads(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroupTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uploads(pThis, __presult))
        }
    }
    public func get_Uploads() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_get_Uploads(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public var Downloads : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        get throws {
            return try get_Downloads();
        }
    }
    public var Uploads : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        get throws {
            return try get_Uploads();
        }
    }
} // IBackgroundTransferCompletionGroupTriggerDetails


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart
// interface type
open class IBackgroundTransferContentPart
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe8e15657, Data2: 0xd7d1, Data3 : 0x4ed8, Data4 : (0x83, 0x8e, 0x67, 0x4a, 0xc2, 0x17, 0xac, 0xe6)) }
    // void SetHeader(System.String, System.String)
    private func _n_SetHeader(_ headerName : Optional<HSTRING>, _ headerValue : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPart.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetHeader(pThis, headerName, headerValue))
        }
    }
    public func SetHeader(headerName : Optional<Swift.String>, headerValue : Optional<Swift.String>) throws -> Void {
        let __hstr_headerName = try HString(headerName!);
        return try withExtendedLifetime(__hstr_headerName) {
        let __hstr_headerValue = try HString(headerValue!);
        return try withExtendedLifetime(__hstr_headerValue) {
        try self._n_SetHeader(__hstr_headerName.Raw(), __hstr_headerValue.Raw());
        }
        }
    }
    // void SetText(System.String)
    private func _n_SetText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPart.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetText(pThis, value))
        }
    }
    public func SetText(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_SetText(__hstr_value.Raw());
        }
    }
    // void SetFile(Windows.Storage.IStorageFile)
    private func _n_SetFile(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPart.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFile(pThis, value))
        }
    }
    public func SetFile(value : Optional<Windows.Storage.IStorageFile>) throws -> Void {
        try self._n_SetFile(RawPointer(value));
    }
} // IBackgroundTransferContentPart


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPartFactory
// interface type
open class IBackgroundTransferContentPartFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x90ef98a9, Data2: 0x7a01, Data3 : 0x4a0b, Data4 : (0x9f, 0x80, 0xa0, 0xb0, 0xbb, 0x37, 0x0f, 0x8d)) }
    // Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart CreateWithName(System.String)
    private func _n_CreateWithName(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPart>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPartFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithName(pThis, name, __presult))
        }
    }
    public func CreateWithName(name : Optional<Swift.String>) throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPart>> = nil;
        try self._n_CreateWithName(__hstr_name.Raw(), &__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart(consuming: __result);
        }
    }
    // Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart CreateWithNameAndFileName(System.String, System.String)
    private func _n_CreateWithNameAndFileName(_ name : Optional<HSTRING>, _ fileName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPart>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPartFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithNameAndFileName(pThis, name, fileName, __presult))
        }
    }
    public func CreateWithNameAndFileName(name : Optional<Swift.String>, fileName : Optional<Swift.String>) throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_fileName = try HString(fileName!);
        return try withExtendedLifetime(__hstr_fileName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferContentPart>> = nil;
        try self._n_CreateWithNameAndFileName(__hstr_name.Raw(), __hstr_fileName.Raw(), &__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferContentPart(consuming: __result);
        }
        }
    }
} // IBackgroundTransferContentPartFactory


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferErrorStaticMethods
// interface type
open class IBackgroundTransferErrorStaticMethods
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaad33b04, Data2: 0x1192, Data3 : 0x4bf4, Data4 : (0x8b, 0x68, 0x39, 0xc5, 0xad, 0xd2, 0x44, 0xe2)) }
    // Windows.Web.WebErrorStatus GetStatus(System.Int32)
    private func _n_GetStatus(_ hresult : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CWeb_CWebErrorStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferErrorStaticMethods.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetStatus(pThis, hresult, __presult))
        }
    }
    public func GetStatus(hresult : Swift.Int32) throws -> Windows.Web.WebErrorStatus {
        var __result : _q_CWindows_CWeb_CWebErrorStatus = _q_CWindows_CWeb_CWebErrorStatus_Unknown;
        try self._n_GetStatus(hresult, &__result);
        return __result;
    }
} // IBackgroundTransferErrorStaticMethods


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup
// interface type
open class IBackgroundTransferGroup
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd8c3e3e4, Data2: 0x6459, Data3 : 0x4540, Data4 : (0x85, 0xeb, 0xaa, 0xa1, 0xc8, 0x90, 0x36, 0x77)) }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior get_TransferBehavior()
    private func _n_get_TransferBehavior(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferBehavior>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransferBehavior(pThis, __presult))
        }
    }
    public func get_TransferBehavior() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior {
        var __result : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferBehavior = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferBehavior_Parallel;
        try self._n_get_TransferBehavior(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TransferBehavior(Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior)
    private func _n_put_TransferBehavior(_ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferBehavior) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransferBehavior(pThis, value))
        }
    }
    public func put_TransferBehavior(value : Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior) throws -> Void {
        try self._n_put_TransferBehavior(value);
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var TransferBehavior : Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior {
        get throws {
            return try get_TransferBehavior();
        }
    }
} // IBackgroundTransferGroup


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferGroupStatics
// interface type
open class IBackgroundTransferGroupStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x02ec50b2, Data2: 0x7d18, Data3 : 0x495b, Data4 : (0xaa, 0x22, 0x32, 0xa9, 0x7d, 0x45, 0xd3, 0xe2)) }
    // Windows.Networking.BackgroundTransfer.BackgroundTransferGroup CreateGroup(System.String)
    private func _n_CreateGroup(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroupStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateGroup(pThis, name, __presult))
        }
    }
    public func CreateGroup(name : Optional<Swift.String>) throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>> = nil;
        try self._n_CreateGroup(__hstr_name.Raw(), &__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup(consuming: __result);
        }
    }
} // IBackgroundTransferGroupStatics


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation
// interface type
open class IBackgroundTransferOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xded06846, Data2: 0x90ca, Data3 : 0x44fb, Data4 : (0x8f, 0xb1, 0x12, 0x41, 0x54, 0xc0, 0xd5, 0x39)) }
    // [IsSpecialName] System.Guid get_Guid()
    private func _n_get_Guid(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Guid(pThis, __presult))
        }
    }
    public func get_Guid() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_Guid(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Uri get_RequestedUri()
    private func _n_get_RequestedUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedUri(pThis, __presult))
        }
    }
    public func get_RequestedUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_RequestedUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] System.String get_Method()
    private func _n_get_Method(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Method(pThis, __presult))
        }
    }
    public func get_Method() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Method(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Group()
    private func _n_get_Group(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Group(pThis, __presult))
        }
    }
    public func get_Group() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Group(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy get_CostPolicy()
    private func _n_get_CostPolicy(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CostPolicy(pThis, __presult))
        }
    }
    public func get_CostPolicy() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        var __result : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy_Default;
        try self._n_get_CostPolicy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CostPolicy(Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy)
    private func _n_put_CostPolicy(_ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CostPolicy(pThis, value))
        }
    }
    public func put_CostPolicy(value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy) throws -> Void {
        try self._n_put_CostPolicy(value);
    }
    // Windows.Storage.Streams.IInputStream GetResultStreamAt(System.UInt64)
    private func _n_GetResultStreamAt(_ position : UINT64, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResultStreamAt(pThis, position, __presult))
        }
    }
    public func GetResultStreamAt(position : Swift.UInt64) throws -> Optional<Windows.Storage.Streams.IInputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>> = nil;
        try self._n_GetResultStreamAt(position, &__result);
        return Windows.Storage.Streams.IInputStream(consuming: __result);
    }
    // Windows.Networking.BackgroundTransfer.ResponseInformation GetResponseInformation()
    private func _n_GetResponseInformation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIResponseInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResponseInformation(pThis, __presult))
        }
    }
    public func GetResponseInformation() throws -> Optional<Windows.Networking.BackgroundTransfer.IResponseInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIResponseInformation>> = nil;
        try self._n_GetResponseInformation(&__result);
        return Windows.Networking.BackgroundTransfer.IResponseInformation(consuming: __result);
    }
    public var CostPolicy : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        get throws {
            return try get_CostPolicy();
        }
    }
    public var Group : Swift.String {
        get throws {
            return try get_Group();
        }
    }
    public var Guid : GUID {
        get throws {
            return try get_Guid();
        }
    }
    public var Method : Swift.String {
        get throws {
            return try get_Method();
        }
    }
    public var RequestedUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_RequestedUri();
        }
    }
} // IBackgroundTransferOperation


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority
// interface type
open class IBackgroundTransferOperationPriority
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x04854327, Data2: 0x5254, Data3 : 0x4b3a, Data4 : (0x91, 0x5e, 0x0a, 0xa4, 0x92, 0x75, 0xc0, 0xf9)) }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferPriority get_Priority()
    private func _n_get_Priority(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperationPriority.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Priority(pThis, __presult))
        }
    }
    public func get_Priority() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferPriority {
        var __result : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority_Default;
        try self._n_get_Priority(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Priority(Windows.Networking.BackgroundTransfer.BackgroundTransferPriority)
    private func _n_put_Priority(_ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferOperationPriority.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Priority(pThis, value))
        }
    }
    public func put_Priority(value : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority) throws -> Void {
        try self._n_put_Priority(value);
    }
    public var Priority : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority {
        get throws {
            return try get_Priority();
        }
    }
} // IBackgroundTransferOperationPriority


// type: Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs
// interface type
open class IBackgroundTransferRangesDownloadedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3ebc7453, Data2: 0xbf48, Data3 : 0x4a88, Data4 : (0x92, 0x48, 0xb0, 0xc1, 0x65, 0x18, 0x4f, 0x5c)) }
    // [IsSpecialName] bool get_WasDownloadRestarted()
    private func _n_get_WasDownloadRestarted(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferRangesDownloadedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WasDownloadRestarted(pThis, __presult))
        }
    }
    public func get_WasDownloadRestarted() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_WasDownloadRestarted(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange> get_AddedRanges()
    private func _n_get_AddedRanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferRangesDownloadedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AddedRanges(pThis, __presult))
        }
    }
    public func get_AddedRanges() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>> = nil;
        try self._n_get_AddedRanges(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange(consuming: __result);
    }
    // Windows.Foundation.Deferral GetDeferral()
    private func _n_GetDeferral(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIDeferral>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferRangesDownloadedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, __presult))
        }
    }
    public func GetDeferral() throws -> Optional<Windows.Foundation.IDeferral> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIDeferral>> = nil;
        try self._n_GetDeferral(&__result);
        return Windows.Foundation.IDeferral(consuming: __result);
    }
    public var AddedRanges : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange> {
        get throws {
            return try get_AddedRanges();
        }
    }
    public var WasDownloadRestarted : boolean {
        get throws {
            return try get_WasDownloadRestarted();
        }
    }
} // IBackgroundTransferRangesDownloadedEventArgs


// type: Windows.Networking.BackgroundTransfer.IBackgroundUploader
// interface type
open class IBackgroundUploader
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc595c9ae, Data2: 0xcead, Data3 : 0x465b, Data4 : (0x88, 0x01, 0xc5, 0x5a, 0xc9, 0x0a, 0x01, 0xce)) }
    // Windows.Networking.BackgroundTransfer.UploadOperation CreateUpload(Windows.Foundation.Uri, Windows.Storage.IStorageFile)
    private func _n_CreateUpload(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ sourceFile : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUpload(pThis, uri, sourceFile, __presult))
        }
    }
    public func CreateUpload(uri : Optional<Windows.Foundation.IUriRuntimeClass>, sourceFile : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>> = nil;
        try self._n_CreateUpload(RawPointer(uri), RawPointer(sourceFile), &__result);
        return Windows.Networking.BackgroundTransfer.IUploadOperation(consuming: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UploadOperation> CreateUploadFromStreamAsync(Windows.Foundation.Uri, Windows.Storage.Streams.IInputStream)
    private func _n_CreateUploadFromStreamAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ sourceStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUploadFromStreamAsync(pThis, uri, sourceStream, __presult))
        }
    }
    public func CreateUploadFromStreamAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, sourceStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_CreateUploadFromStreamAsync(RawPointer(uri), RawPointer(sourceStream), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public func CreateUploadFromStream(uri : Optional<Windows.Foundation.IUriRuntimeClass>, sourceStream : Optional<Windows.Storage.Streams.IInputStream>) async throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateUploadFromStreamAsync(uri: uri, sourceStream: sourceStream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UploadOperation> CreateUploadAsync(Windows.Foundation.Uri, Windows.Foundation.Collections.IIterable<Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart>)
    private func _n_CreateUploadWithFormDataAndAutoBoundaryAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ parts : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUploadWithFormDataAndAutoBoundaryAsync(pThis, uri, parts, __presult))
        }
    }
    public func CreateUploadWithFormDataAndAutoBoundaryAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_CreateUploadWithFormDataAndAutoBoundaryAsync(RawPointer(uri), RawPointer(parts), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public func CreateUploadWithFormDataAndAutoBoundary(uri : Optional<Windows.Foundation.IUriRuntimeClass>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>) async throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateUploadWithFormDataAndAutoBoundaryAsync(uri: uri, parts: parts)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UploadOperation> CreateUploadAsync(Windows.Foundation.Uri, Windows.Foundation.Collections.IIterable<Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart>, System.String)
    private func _n_CreateUploadWithSubTypeAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ parts : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>>, _ subType : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUploadWithSubTypeAsync(pThis, uri, parts, subType, __presult))
        }
    }
    public func CreateUploadWithSubTypeAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let __hstr_subType = try HString(subType!);
        return try withExtendedLifetime(__hstr_subType) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_CreateUploadWithSubTypeAsync(RawPointer(uri), RawPointer(parts), __hstr_subType.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
        }
    }
    public func CreateUploadWithSubType(uri : Optional<Windows.Foundation.IUriRuntimeClass>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Optional<Swift.String>) async throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateUploadWithSubTypeAsync(uri: uri, parts: parts, subType: subType)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UploadOperation> CreateUploadAsync(Windows.Foundation.Uri, Windows.Foundation.Collections.IIterable<Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart>, System.String, System.String)
    private func _n_CreateUploadWithSubTypeAndBoundaryAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ parts : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>>, _ subType : Optional<HSTRING>, _ boundary : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUploadWithSubTypeAndBoundaryAsync(pThis, uri, parts, subType, boundary, __presult))
        }
    }
    public func CreateUploadWithSubTypeAndBoundaryAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Optional<Swift.String>, boundary : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let __hstr_subType = try HString(subType!);
        return try withExtendedLifetime(__hstr_subType) {
        let __hstr_boundary = try HString(boundary!);
        return try withExtendedLifetime(__hstr_boundary) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_CreateUploadWithSubTypeAndBoundaryAsync(RawPointer(uri), RawPointer(parts), __hstr_subType.Raw(), __hstr_boundary.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
        }
        }
    }
    public func CreateUploadWithSubTypeAndBoundary(uri : Optional<Windows.Foundation.IUriRuntimeClass>, parts : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart>, subType : Optional<Swift.String>, boundary : Optional<Swift.String>) async throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateUploadWithSubTypeAndBoundaryAsync(uri: uri, parts: parts, subType: subType, boundary: boundary)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundUploader


// type: Windows.Networking.BackgroundTransfer.IBackgroundUploader2
// interface type
open class IBackgroundUploader2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8e0612ce, Data2: 0x0c34, Data3 : 0x4463, Data4 : (0x80, 0x7f, 0x19, 0x8a, 0x1b, 0x8b, 0xd4, 0xad)) }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferGroup get_TransferGroup()
    private func _n_get_TransferGroup(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransferGroup(pThis, __presult))
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>> = nil;
        try self._n_get_TransferGroup(&__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup(consuming: __result);
    }
    // [IsSpecialName] void put_TransferGroup(Windows.Networking.BackgroundTransfer.BackgroundTransferGroup)
    private func _n_put_TransferGroup(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransferGroup(pThis, value))
        }
    }
    public func put_TransferGroup(value : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup>) throws -> Void {
        try self._n_put_TransferGroup(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.ToastNotification get_SuccessToastNotification()
    private func _n_get_SuccessToastNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuccessToastNotification(pThis, __presult))
        }
    }
    public func get_SuccessToastNotification() throws -> Optional<Windows.UI.Notifications.IToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>> = nil;
        try self._n_get_SuccessToastNotification(&__result);
        return Windows.UI.Notifications.IToastNotification(consuming: __result);
    }
    // [IsSpecialName] void put_SuccessToastNotification(Windows.UI.Notifications.ToastNotification)
    private func _n_put_SuccessToastNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuccessToastNotification(pThis, value))
        }
    }
    public func put_SuccessToastNotification(value : Optional<Windows.UI.Notifications.IToastNotification>) throws -> Void {
        try self._n_put_SuccessToastNotification(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.ToastNotification get_FailureToastNotification()
    private func _n_get_FailureToastNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FailureToastNotification(pThis, __presult))
        }
    }
    public func get_FailureToastNotification() throws -> Optional<Windows.UI.Notifications.IToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>> = nil;
        try self._n_get_FailureToastNotification(&__result);
        return Windows.UI.Notifications.IToastNotification(consuming: __result);
    }
    // [IsSpecialName] void put_FailureToastNotification(Windows.UI.Notifications.ToastNotification)
    private func _n_put_FailureToastNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FailureToastNotification(pThis, value))
        }
    }
    public func put_FailureToastNotification(value : Optional<Windows.UI.Notifications.IToastNotification>) throws -> Void {
        try self._n_put_FailureToastNotification(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.TileNotification get_SuccessTileNotification()
    private func _n_get_SuccessTileNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuccessTileNotification(pThis, __presult))
        }
    }
    public func get_SuccessTileNotification() throws -> Optional<Windows.UI.Notifications.ITileNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>> = nil;
        try self._n_get_SuccessTileNotification(&__result);
        return Windows.UI.Notifications.ITileNotification(consuming: __result);
    }
    // [IsSpecialName] void put_SuccessTileNotification(Windows.UI.Notifications.TileNotification)
    private func _n_put_SuccessTileNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuccessTileNotification(pThis, value))
        }
    }
    public func put_SuccessTileNotification(value : Optional<Windows.UI.Notifications.ITileNotification>) throws -> Void {
        try self._n_put_SuccessTileNotification(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Notifications.TileNotification get_FailureTileNotification()
    private func _n_get_FailureTileNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FailureTileNotification(pThis, __presult))
        }
    }
    public func get_FailureTileNotification() throws -> Optional<Windows.UI.Notifications.ITileNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>> = nil;
        try self._n_get_FailureTileNotification(&__result);
        return Windows.UI.Notifications.ITileNotification(consuming: __result);
    }
    // [IsSpecialName] void put_FailureTileNotification(Windows.UI.Notifications.TileNotification)
    private func _n_put_FailureTileNotification(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FailureTileNotification(pThis, value))
        }
    }
    public func put_FailureTileNotification(value : Optional<Windows.UI.Notifications.ITileNotification>) throws -> Void {
        try self._n_put_FailureTileNotification(RawPointer(value));
    }
    public var FailureTileNotification : Optional<Windows.UI.Notifications.ITileNotification> {
        get throws {
            return try get_FailureTileNotification();
        }
    }
    public var FailureToastNotification : Optional<Windows.UI.Notifications.IToastNotification> {
        get throws {
            return try get_FailureToastNotification();
        }
    }
    public var SuccessTileNotification : Optional<Windows.UI.Notifications.ITileNotification> {
        get throws {
            return try get_SuccessTileNotification();
        }
    }
    public var SuccessToastNotification : Optional<Windows.UI.Notifications.IToastNotification> {
        get throws {
            return try get_SuccessToastNotification();
        }
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        get throws {
            return try get_TransferGroup();
        }
    }
} // IBackgroundUploader2


// type: Windows.Networking.BackgroundTransfer.IBackgroundUploader3
// interface type
open class IBackgroundUploader3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb95e9439, Data2: 0x5bf0, Data3 : 0x4b3a, Data4 : (0x8c, 0x47, 0x2c, 0x61, 0x99, 0xa8, 0x54, 0xb9)) }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup get_CompletionGroup()
    private func _n_get_CompletionGroup(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompletionGroup(pThis, __presult))
        }
    }
    public func get_CompletionGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup>> = nil;
        try self._n_get_CompletionGroup(&__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup(consuming: __result);
    }
    public var CompletionGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup> {
        get throws {
            return try get_CompletionGroup();
        }
    }
} // IBackgroundUploader3


// type: Windows.Networking.BackgroundTransfer.IBackgroundUploaderFactory
// interface type
// ACTIVATION INTERFACE
open class IBackgroundUploaderFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x736203c7, Data2: 0x10e7, Data3 : 0x48a0, Data4 : (0xac, 0x3c, 0x1a, 0xc7, 0x10, 0x95, 0xec, 0x57)) }
    // Windows.Networking.BackgroundTransfer.BackgroundUploader CreateWithCompletionGroup(Windows.Networking.BackgroundTransfer.BackgroundTransferCompletionGroup)
    private func _n_CreateWithCompletionGroup(_ completionGroup : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferCompletionGroup>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploaderFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithCompletionGroup(pThis, completionGroup, __presult))
        }
    }
    public func CreateWithCompletionGroup(completionGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferCompletionGroup>) throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundUploader> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploader>> = nil;
        try self._n_CreateWithCompletionGroup(RawPointer(completionGroup), &__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundUploader(consuming: __result);
    }
} // IBackgroundUploaderFactory


// type: Windows.Networking.BackgroundTransfer.IBackgroundUploaderStaticMethods
// interface type
open class IBackgroundUploaderStaticMethods
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf2875cfb, Data2: 0x9b05, Data3 : 0x4741, Data4 : (0x91, 0x21, 0x74, 0x0a, 0x83, 0xe2, 0x47, 0xdf)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation>> GetCurrentUploadsAsync()
    private func _n_GetCurrentUploadsAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploaderStaticMethods.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentUploadsAsync(pThis, __presult))
        }
    }
    public func GetCurrentUploadsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_GetCurrentUploadsAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public func GetCurrentUploads() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCurrentUploadsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation>> GetCurrentUploadsAsync(System.String)
    private func _n_GetCurrentUploadsForGroupAsync(_ group : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploaderStaticMethods.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentUploadsForGroupAsync(pThis, group, __presult))
        }
    }
    public func GetCurrentUploadsForGroupAsync(group : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let __hstr_group = try HString(group!);
        return try withExtendedLifetime(__hstr_group) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_GetCurrentUploadsForGroupAsync(__hstr_group.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
        }
    }
    public func GetCurrentUploadsForGroup(group : Optional<Swift.String>) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCurrentUploadsForGroupAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundUploaderStaticMethods


// type: Windows.Networking.BackgroundTransfer.IBackgroundUploaderStaticMethods2
// interface type
open class IBackgroundUploaderStaticMethods2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe919ac62, Data2: 0xea08, Data3 : 0x42f0, Data4 : (0xa2, 0xac, 0x07, 0xe4, 0x67, 0x54, 0x90, 0x80)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation>> GetCurrentUploadsForTransferGroupAsync(Windows.Networking.BackgroundTransfer.BackgroundTransferGroup)
    private func _n_GetCurrentUploadsForTransferGroupAsync(_ group : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploaderStaticMethods2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentUploadsForTransferGroupAsync(pThis, group, __presult))
        }
    }
    public func GetCurrentUploadsForTransferGroupAsync(group : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_GetCurrentUploadsForTransferGroupAsync(RawPointer(group), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public func GetCurrentUploadsForTransferGroup(group : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup>) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCurrentUploadsForTransferGroupAsync(group: group)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundUploaderStaticMethods2


// type: Windows.Networking.BackgroundTransfer.IBackgroundUploaderUserConsent
// interface type
open class IBackgroundUploaderUserConsent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3bb384cb, Data2: 0x0760, Data3 : 0x461d, Data4 : (0x90, 0x7f, 0x51, 0x38, 0xf8, 0x4d, 0x44, 0xc1)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult> RequestUnconstrainedUploadsAsync(Windows.Foundation.Collections.IIterable<Windows.Networking.BackgroundTransfer.UploadOperation>)
    private func _n_RequestUnconstrainedUploadsAsync(_ operations : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundUploaderUserConsent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestUnconstrainedUploadsAsync(pThis, operations, __presult))
        }
    }
    public func RequestUnconstrainedUploadsAsync(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>> = nil;
        try self._n_RequestUnconstrainedUploadsAsync(RawPointer(operations), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(consuming: __result);
    }
    public func RequestUnconstrainedUploads(operations : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) async throws -> Optional<Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RequestUnconstrainedUploadsAsync(operations: operations)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IBackgroundUploaderUserConsent


// type: Windows.Networking.BackgroundTransfer.IContentPrefetcher
// interface type
open class IContentPrefetcher
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa8d6f754, Data2: 0x7dc1, Data3 : 0x4cd9, Data4 : (0x88, 0x10, 0x2a, 0x6a, 0xa9, 0x41, 0x7e, 0x11)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri> get_ContentUris()
    private func _n_get_ContentUris(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CFoundation_CUri>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIContentPrefetcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentUris(pThis, __presult))
        }
    }
    public func get_ContentUris() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CFoundation_CUri>> = nil;
        try self._n_get_ContentUris(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri(consuming: __result);
    }
    // [IsSpecialName] void put_IndirectContentUri(Windows.Foundation.Uri)
    private func _n_put_IndirectContentUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIContentPrefetcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IndirectContentUri(pThis, value))
        }
    }
    public func put_IndirectContentUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_IndirectContentUri(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_IndirectContentUri()
    private func _n_get_IndirectContentUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIContentPrefetcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndirectContentUri(pThis, __presult))
        }
    }
    public func get_IndirectContentUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_IndirectContentUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    public var ContentUris : Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        get throws {
            return try get_ContentUris();
        }
    }
    public var IndirectContentUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_IndirectContentUri();
        }
    }
} // IContentPrefetcher


// type: Windows.Networking.BackgroundTransfer.IContentPrefetcherTime
// interface type
open class IContentPrefetcherTime
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe361fd08, Data2: 0x132a, Data3 : 0x4fde, Data4 : (0xa7, 0xcc, 0xfc, 0xb0, 0xe6, 0x65, 0x23, 0xaf)) }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_LastSuccessfulPrefetchTime()
    private func _n_get_LastSuccessfulPrefetchTime(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIContentPrefetcherTime.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastSuccessfulPrefetchTime(pThis, __presult))
        }
    }
    public func get_LastSuccessfulPrefetchTime() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_LastSuccessfulPrefetchTime(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    public var LastSuccessfulPrefetchTime : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_LastSuccessfulPrefetchTime();
        }
    }
} // IContentPrefetcherTime


// type: Windows.Networking.BackgroundTransfer.IDownloadOperation
// interface type
open class IDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbd87ebb0, Data2: 0x5714, Data3 : 0x4e09, Data4 : (0xba, 0x68, 0xbe, 0xf7, 0x39, 0x03, 0xb0, 0xd7)) }
    // [IsSpecialName] Windows.Storage.IStorageFile get_ResultFile()
    private func _n_get_ResultFile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResultFile(pThis, __presult))
        }
    }
    public func get_ResultFile() throws -> Optional<Windows.Storage.IStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>> = nil;
        try self._n_get_ResultFile(&__result);
        return Windows.Storage.IStorageFile(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress get_Progress()
    private func _n_get_Progress(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundDownloadProgress>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, __presult))
        }
    }
    public func get_Progress() throws -> Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress {
        var __result : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundDownloadProgress = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundDownloadProgress(BytesReceived: 0, TotalBytesToReceive: 0, Status: _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_Idle, HasResponseChanged: 0, HasRestarted: 0);
        try self._n_get_Progress(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation> StartAsync()
    private func _n_StartAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartAsync(pThis, __presult))
        }
    }
    public func StartAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_StartAsync(&__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    public func Start() async throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.StartAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation> AttachAsync()
    private func _n_AttachAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AttachAsync(pThis, __presult))
        }
    }
    public func AttachAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_AttachAsync(&__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    public func Attach() async throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AttachAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void Pause()
    private func _n_Pause() throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Pause(pThis))
        }
    }
    public func Pause() throws -> Void {
        try self._n_Pause();
    }
    // void Resume()
    private func _n_Resume() throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Resume(pThis))
        }
    }
    public func Resume() throws -> Void {
        try self._n_Resume();
    }
    public var Progress : Windows.Networking.BackgroundTransfer.BackgroundDownloadProgress {
        get throws {
            return try get_Progress();
        }
    }
    public var ResultFile : Optional<Windows.Storage.IStorageFile> {
        get throws {
            return try get_ResultFile();
        }
    }
} // IDownloadOperation


// type: Windows.Networking.BackgroundTransfer.IDownloadOperation2
// interface type
open class IDownloadOperation2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa3cced40, Data2: 0x8f9c, Data3 : 0x4353, Data4 : (0x9c, 0xd4, 0x29, 0x0d, 0xee, 0x38, 0x7c, 0x38)) }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferGroup get_TransferGroup()
    private func _n_get_TransferGroup(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransferGroup(pThis, __presult))
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>> = nil;
        try self._n_get_TransferGroup(&__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup(consuming: __result);
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        get throws {
            return try get_TransferGroup();
        }
    }
} // IDownloadOperation2


// type: Windows.Networking.BackgroundTransfer.IDownloadOperation3
// interface type
open class IDownloadOperation3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5027351c, Data2: 0x7d5e, Data3 : 0x4adc, Data4 : (0xb8, 0xd3, 0xdf, 0x5c, 0x60, 0x31, 0xb9, 0xcc)) }
    // [IsSpecialName] bool get_IsRandomAccessRequired()
    private func _n_get_IsRandomAccessRequired(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRandomAccessRequired(pThis, __presult))
        }
    }
    public func get_IsRandomAccessRequired() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsRandomAccessRequired(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsRandomAccessRequired(bool)
    private func _n_put_IsRandomAccessRequired(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsRandomAccessRequired(pThis, value))
        }
    }
    public func put_IsRandomAccessRequired(value : boolean) throws -> Void {
        try self._n_put_IsRandomAccessRequired(value);
    }
    // Windows.Storage.Streams.IRandomAccessStreamReference GetResultRandomAccessStreamReference()
    private func _n_GetResultRandomAccessStreamReference(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResultRandomAccessStreamReference(pThis, __presult))
        }
    }
    public func GetResultRandomAccessStreamReference() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>> = nil;
        try self._n_GetResultRandomAccessStreamReference(&__result);
        return Windows.Storage.Streams.IRandomAccessStreamReference(consuming: __result);
    }
    // Windows.Foundation.Collections.IVector<Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange> GetDownloadedRanges()
    private func _n_GetDownloadedRanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDownloadedRanges(pThis, __presult))
        }
    }
    public func GetDownloadedRanges() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>> = nil;
        try self._n_GetDownloadedRanges(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RangesDownloaded(Windows.Foundation.TypedEventHandler<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs>)
    private func _n_add_RangesDownloaded(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RangesDownloaded(pThis, eventHandler, __presult))
        }
    }
    public func add_RangesDownloaded(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RangesDownloaded(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RangesDownloaded(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_RangesDownloaded(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RangesDownloaded(pThis, eventCookie))
        }
    }
    public func remove_RangesDownloaded(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RangesDownloaded(eventCookie);
    }
    // [IsSpecialName] void put_RequestedUri(Windows.Foundation.Uri)
    private func _n_put_RequestedUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedUri(pThis, value))
        }
    }
    public func put_RequestedUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_RequestedUri(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.WebErrorStatus> get_RecoverableWebErrorStatuses()
    private func _n_get_RecoverableWebErrorStatuses(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CWebErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecoverableWebErrorStatuses(pThis, __presult))
        }
    }
    public func get_RecoverableWebErrorStatuses() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CWebErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CWebErrorStatus>> = nil;
        try self._n_get_RecoverableWebErrorStatuses(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CWebErrorStatus(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Web.WebErrorStatus> get_CurrentWebErrorStatus()
    private func _n_get_CurrentWebErrorStatus(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CWeb_CWebErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentWebErrorStatus(pThis, __presult))
        }
    }
    public func get_CurrentWebErrorStatus() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CWeb_CWebErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CWeb_CWebErrorStatus>> = nil;
        try self._n_get_CurrentWebErrorStatus(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CWeb_CWebErrorStatus(consuming: __result);
    }
    public var CurrentWebErrorStatus : Optional<ClosedGenerics.IReference_1__q_CWindows_CWeb_CWebErrorStatus> {
        get throws {
            return try get_CurrentWebErrorStatus();
        }
    }
    public var IsRandomAccessRequired : boolean {
        get throws {
            return try get_IsRandomAccessRequired();
        }
    }
    public var RecoverableWebErrorStatuses : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CWebErrorStatus> {
        get throws {
            return try get_RecoverableWebErrorStatuses();
        }
    }
} // IDownloadOperation3


// type: Windows.Networking.BackgroundTransfer.IDownloadOperation4
// interface type
open class IDownloadOperation4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0cdaaef4, Data2: 0x8cef, Data3 : 0x404a, Data4 : (0x96, 0x6d, 0xf0, 0x58, 0x40, 0x0b, 0xed, 0x80)) }
    // void MakeCurrentInTransferGroup()
    private func _n_MakeCurrentInTransferGroup() throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MakeCurrentInTransferGroup(pThis))
        }
    }
    public func MakeCurrentInTransferGroup() throws -> Void {
        try self._n_MakeCurrentInTransferGroup();
    }
} // IDownloadOperation4


// type: Windows.Networking.BackgroundTransfer.IDownloadOperation5
// interface type
open class IDownloadOperation5
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa699a86f, Data2: 0x5590, Data3 : 0x463a, Data4 : (0xb8, 0xd6, 0x1e, 0x49, 0x1a, 0x27, 0x60, 0xa5)) }
    // void SetRequestHeader(System.String, System.String)
    private func _n_SetRequestHeader(_ headerName : Optional<HSTRING>, _ headerValue : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRequestHeader(pThis, headerName, headerValue))
        }
    }
    public func SetRequestHeader(headerName : Optional<Swift.String>, headerValue : Optional<Swift.String>) throws -> Void {
        let __hstr_headerName = try HString(headerName!);
        return try withExtendedLifetime(__hstr_headerName) {
        let __hstr_headerValue = try HString(headerValue!);
        return try withExtendedLifetime(__hstr_headerValue) {
        try self._n_SetRequestHeader(__hstr_headerName.Raw(), __hstr_headerValue.Raw());
        }
        }
    }
    // void RemoveRequestHeader(System.String)
    private func _n_RemoveRequestHeader(_ headerName : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveRequestHeader(pThis, headerName))
        }
    }
    public func RemoveRequestHeader(headerName : Optional<Swift.String>) throws -> Void {
        let __hstr_headerName = try HString(headerName!);
        return try withExtendedLifetime(__hstr_headerName) {
        try self._n_RemoveRequestHeader(__hstr_headerName.Raw());
        }
    }
} // IDownloadOperation5


// type: Windows.Networking.BackgroundTransfer.IResponseInformation
// interface type
open class IResponseInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf8bb9a12, Data2: 0xf713, Data3 : 0x4792, Data4 : (0x8b, 0x68, 0xd9, 0xd2, 0x97, 0xf9, 0x1d, 0x2e)) }
    // [IsSpecialName] bool get_IsResumable()
    private func _n_get_IsResumable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIResponseInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsResumable(pThis, __presult))
        }
    }
    public func get_IsResumable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsResumable(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Uri get_ActualUri()
    private func _n_get_ActualUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIResponseInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualUri(pThis, __presult))
        }
    }
    public func get_ActualUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_ActualUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_StatusCode()
    private func _n_get_StatusCode(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIResponseInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StatusCode(pThis, __presult))
        }
    }
    public func get_StatusCode() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_StatusCode(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IMapView<System.String,System.String> get_Headers()
    private func _n_get_Headers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIResponseInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Headers(pThis, __presult))
        }
    }
    public func get_Headers() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>> = nil;
        try self._n_get_Headers(&__result);
        return ClosedGenerics.IMapView_2_HSTRING_HSTRING(consuming: __result);
    }
    public var ActualUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_ActualUri();
        }
    }
    public var Headers : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
            return try get_Headers();
        }
    }
    public var IsResumable : boolean {
        get throws {
            return try get_IsResumable();
        }
    }
    public var StatusCode : Swift.UInt32 {
        get throws {
            return try get_StatusCode();
        }
    }
} // IResponseInformation


// type: Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult
// interface type
open class IUnconstrainedTransferRequestResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4c24b81f, Data2: 0xd944, Data3 : 0x4112, Data4 : (0xa9, 0x8e, 0x6a, 0x69, 0x52, 0x2b, 0x7e, 0xbb)) }
    // [IsSpecialName] bool get_IsUnconstrained()
    private func _n_get_IsUnconstrained(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUnconstrainedTransferRequestResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsUnconstrained(pThis, __presult))
        }
    }
    public func get_IsUnconstrained() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsUnconstrained(&__result);
        return __result;
    }
    public var IsUnconstrained : boolean {
        get throws {
            return try get_IsUnconstrained();
        }
    }
} // IUnconstrainedTransferRequestResult


// type: Windows.Networking.BackgroundTransfer.IUploadOperation
// interface type
open class IUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3e5624e0, Data2: 0x7389, Data3 : 0x434c, Data4 : (0x8b, 0x35, 0x42, 0x7f, 0xd3, 0x6b, 0xbd, 0xae)) }
    // [IsSpecialName] Windows.Storage.IStorageFile get_SourceFile()
    private func _n_get_SourceFile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceFile(pThis, __presult))
        }
    }
    public func get_SourceFile() throws -> Optional<Windows.Storage.IStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>> = nil;
        try self._n_get_SourceFile(&__result);
        return Windows.Storage.IStorageFile(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundUploadProgress get_Progress()
    private func _n_get_Progress(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundUploadProgress>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, __presult))
        }
    }
    public func get_Progress() throws -> Windows.Networking.BackgroundTransfer.BackgroundUploadProgress {
        var __result : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundUploadProgress = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundUploadProgress(BytesReceived: 0, BytesSent: 0, TotalBytesToReceive: 0, TotalBytesToSend: 0, Status: _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_Idle, HasResponseChanged: 0, HasRestarted: 0);
        try self._n_get_Progress(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation> StartAsync()
    private func _n_StartAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartAsync(pThis, __presult))
        }
    }
    public func StartAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_StartAsync(&__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public func Start() async throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.StartAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation> AttachAsync()
    private func _n_AttachAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AttachAsync(pThis, __presult))
        }
    }
    public func AttachAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_AttachAsync(&__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public func Attach() async throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AttachAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Progress : Windows.Networking.BackgroundTransfer.BackgroundUploadProgress {
        get throws {
            return try get_Progress();
        }
    }
    public var SourceFile : Optional<Windows.Storage.IStorageFile> {
        get throws {
            return try get_SourceFile();
        }
    }
} // IUploadOperation


// type: Windows.Networking.BackgroundTransfer.IUploadOperation2
// interface type
open class IUploadOperation2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x556189f2, Data2: 0x2774, Data3 : 0x4df6, Data4 : (0x9f, 0xa5, 0x20, 0x9f, 0x2b, 0xfb, 0x12, 0xf7)) }
    // [IsSpecialName] Windows.Networking.BackgroundTransfer.BackgroundTransferGroup get_TransferGroup()
    private func _n_get_TransferGroup(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransferGroup(pThis, __presult))
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferGroup>> = nil;
        try self._n_get_TransferGroup(&__result);
        return Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup(consuming: __result);
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferGroup> {
        get throws {
            return try get_TransferGroup();
        }
    }
} // IUploadOperation2


// type: Windows.Networking.BackgroundTransfer.IUploadOperation3
// interface type
open class IUploadOperation3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x42c92ca3, Data2: 0xde39, Data3 : 0x4546, Data4 : (0xbc, 0x62, 0x37, 0x74, 0xb4, 0x29, 0x4d, 0xe3)) }
    // void MakeCurrentInTransferGroup()
    private func _n_MakeCurrentInTransferGroup() throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MakeCurrentInTransferGroup(pThis))
        }
    }
    public func MakeCurrentInTransferGroup() throws -> Void {
        try self._n_MakeCurrentInTransferGroup();
    }
} // IUploadOperation3


// type: Windows.Networking.BackgroundTransfer.IUploadOperation4
// interface type
open class IUploadOperation4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x50edef31, Data2: 0xfac5, Data3 : 0x41ee, Data4 : (0xb0, 0x30, 0xdc, 0x77, 0xca, 0xee, 0x9f, 0xaa)) }
    // void SetRequestHeader(System.String, System.String)
    private func _n_SetRequestHeader(_ headerName : Optional<HSTRING>, _ headerValue : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRequestHeader(pThis, headerName, headerValue))
        }
    }
    public func SetRequestHeader(headerName : Optional<Swift.String>, headerValue : Optional<Swift.String>) throws -> Void {
        let __hstr_headerName = try HString(headerName!);
        return try withExtendedLifetime(__hstr_headerName) {
        let __hstr_headerValue = try HString(headerValue!);
        return try withExtendedLifetime(__hstr_headerValue) {
        try self._n_SetRequestHeader(__hstr_headerName.Raw(), __hstr_headerValue.Raw());
        }
        }
    }
    // void RemoveRequestHeader(System.String)
    private func _n_RemoveRequestHeader(_ headerName : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveRequestHeader(pThis, headerName))
        }
    }
    public func RemoveRequestHeader(headerName : Optional<Swift.String>) throws -> Void {
        let __hstr_headerName = try HString(headerName!);
        return try withExtendedLifetime(__hstr_headerName) {
        try self._n_RemoveRequestHeader(__hstr_headerName.Raw());
        }
    }
} // IUploadOperation4


// type: Windows.Networking.BackgroundTransfer.ResponseInformation
// runtime class
public class ResponseInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IResponseInformation;
    public init(plok: Windows.Networking.BackgroundTransfer.IResponseInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IResponseInformation { return _self; }
    public func get_IsResumable() throws -> boolean {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try _ifc.get_IsResumable();
    }
    public func get_ActualUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_ActualUri());
    }
    public func get_StatusCode() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try _ifc.get_StatusCode();
    }
    public func get_Headers() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try _ifc.get_Headers();
    }
    public var ActualUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.ActualUri);
        }
    }
    public var Headers : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try _ifc.Headers;
        }
    }
    public var IsResumable : boolean {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try _ifc.IsResumable;
        }
    }
    public var StatusCode : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IResponseInformation = try _self.QueryInterface();
        return try _ifc.StatusCode;
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult
// runtime class
public class UnconstrainedTransferRequestResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult;
    public init(plok: Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult { return _self; }
    public func get_IsUnconstrained() throws -> boolean {
        let _ifc : Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult = try _self.QueryInterface();
        return try _ifc.get_IsUnconstrained();
    }
    public var IsUnconstrained : boolean {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult = try _self.QueryInterface();
        return try _ifc.IsUnconstrained;
        }
    }
}

// type: Windows.Networking.BackgroundTransfer.UploadOperation
// runtime class
public class UploadOperation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.BackgroundTransfer.IUploadOperation;
    public init(plok: Windows.Networking.BackgroundTransfer.IUploadOperation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.BackgroundTransfer.IUploadOperation { return _self; }
    public func get_SourceFile() throws -> Optional<Windows.Storage.IStorageFile> {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation = try _self.QueryInterface();
        return try _ifc.get_SourceFile();
    }
    public func get_Progress() throws -> Windows.Networking.BackgroundTransfer.BackgroundUploadProgress {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation = try _self.QueryInterface();
        return try _ifc.get_Progress();
    }
    public func StartAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation = try _self.QueryInterface();
        return try _ifc.StartAsync();
    }
    public func Start() async throws -> Optional<Windows.Networking.BackgroundTransfer.UploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UploadOperation(plok: self.StartAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func AttachAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation = try _self.QueryInterface();
        return try _ifc.AttachAsync();
    }
    public func Attach() async throws -> Optional<Windows.Networking.BackgroundTransfer.UploadOperation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.BackgroundTransfer.UploadOperation(plok: self.AttachAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Progress : Windows.Networking.BackgroundTransfer.BackgroundUploadProgress {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation = try _self.QueryInterface();
        return try _ifc.Progress;
        }
    }
    public var SourceFile : Optional<Windows.Storage.IStorageFile> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation = try _self.QueryInterface();
        return try _ifc.SourceFile;
        }
    }
    public func get_Guid() throws -> GUID {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_Guid();
    }
    public func get_RequestedUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_RequestedUri());
    }
    public func get_Method() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_Method();
    }
    public func get_Group() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_Group();
    }
    public func get_CostPolicy() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.get_CostPolicy();
    }
    public func put_CostPolicy(value : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.put_CostPolicy(value: value);
    }
    public func GetResultStreamAt(position : Swift.UInt64) throws -> Optional<Windows.Storage.Streams.IInputStream> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.GetResultStreamAt(position: position);
    }
    public func GetResponseInformation() throws -> Optional<Windows.Networking.BackgroundTransfer.ResponseInformation> {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.ResponseInformation(plok: _ifc.GetResponseInformation());
    }
    public var CostPolicy : Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.CostPolicy;
        }
    }
    public var Group : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.Group;
        }
    }
    public var Guid : GUID {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.Guid;
        }
    }
    public var Method : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try _ifc.Method;
        }
    }
    public var RequestedUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperation = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.RequestedUri);
        }
    }
    public func get_Priority() throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferPriority {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority = try _self.QueryInterface();
        return try _ifc.get_Priority();
    }
    public func put_Priority(value : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority = try _self.QueryInterface();
        return try _ifc.put_Priority(value: value);
    }
    public var Priority : Windows.Networking.BackgroundTransfer.BackgroundTransferPriority {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IBackgroundTransferOperationPriority = try _self.QueryInterface();
        return try _ifc.Priority;
        }
    }
    public func get_TransferGroup() throws -> Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.get_TransferGroup());
    }
    public var TransferGroup : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferGroup> {
        get throws {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation2 = try _self.QueryInterface();
        return try Windows.Networking.BackgroundTransfer.BackgroundTransferGroup(plok: _ifc.TransferGroup);
        }
    }
    public func MakeCurrentInTransferGroup() throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation3 = try _self.QueryInterface();
        return try _ifc.MakeCurrentInTransferGroup();
    }
    public func SetRequestHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation4 = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(headerName: headerName, headerValue: headerValue);
    }
    public func RemoveRequestHeader(headerName : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.BackgroundTransfer.IUploadOperation4 = try _self.QueryInterface();
        return try _ifc.RemoveRequestHeader(headerName: headerName);
    }
}

}
extension Windows.Networking.BackgroundTransfer.BackgroundTransferBehavior {
    public static var Parallel : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferBehavior_Parallel;
        }
    }
    public static var Serialized : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferBehavior_Serialized;
        }
    }
}
extension Windows.Networking.BackgroundTransfer.BackgroundTransferCostPolicy {
    public static var Default : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy_Default;
        }
    }
    public static var UnrestrictedOnly : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy_UnrestrictedOnly;
        }
    }
    public static var Always : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferCostPolicy_Always;
        }
    }
}
extension Windows.Networking.BackgroundTransfer.BackgroundTransferPriority {
    public static var Default : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority_Default;
        }
    }
    public static var High : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority_High;
        }
    }
    public static var Low : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferPriority_Low;
        }
    }
}
extension Windows.Networking.BackgroundTransfer.BackgroundTransferStatus {
    public static var Idle : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_Idle;
        }
    }
    public static var Running : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_Running;
        }
    }
    public static var PausedByApplication : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_PausedByApplication;
        }
    }
    public static var PausedCostedNetwork : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_PausedCostedNetwork;
        }
    }
    public static var PausedNoNetwork : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_PausedNoNetwork;
        }
    }
    public static var Completed : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_Completed;
        }
    }
    public static var Canceled : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_Canceled;
        }
    }
    public static var Error : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_Error;
        }
    }
    public static var PausedRecoverableWebErrorStatus : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_PausedRecoverableWebErrorStatus;
        }
    }
    public static var PausedSystemPolicy : Self {
        get {
            return _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferStatus_PausedSystemPolicy;
        }
    }
}
