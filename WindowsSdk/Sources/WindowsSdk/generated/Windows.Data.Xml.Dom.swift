// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Data.Xml.Dom {
// type: Windows.Data.Xml.Dom.IXmlAttribute
// interface type
open class IXmlAttribute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xac144aa4, Data2: 0xb4f1, Data3 : 0x4db6, Data4 : (0xb2, 0x06, 0x8a, 0x22, 0xc3, 0x08, 0xdb, 0x0a)) }
// method not needed: get_Name
// method not needed: get_Specified
// method not needed: get_Value
// method not needed: put_Value
} // IXmlAttribute


// type: Windows.Data.Xml.Dom.IXmlCDataSection
// interface type
open class IXmlCDataSection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4d04b46f, Data2: 0xc8bd, Data3 : 0x45b4, Data4 : (0x88, 0x99, 0x04, 0x00, 0xd7, 0xc2, 0xc6, 0x0f)) }
} // IXmlCDataSection


// type: Windows.Data.Xml.Dom.IXmlComment
// interface type
open class IXmlComment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbca474d5, Data2: 0xb61f, Data3 : 0x4611, Data4 : (0x9c, 0xac, 0x2e, 0x92, 0xe3, 0x47, 0x6d, 0x47)) }
} // IXmlComment


// type: Windows.Data.Xml.Dom.IXmlDocument
// interface type
open class IXmlDocument
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf7f3a506, Data2: 0x1e87, Data3 : 0x42d6, Data4 : (0xbc, 0xfb, 0xb8, 0xc8, 0x09, 0xfa, 0x54, 0x94)) }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlDocumentType get_Doctype()
    private func _n_get_Doctype(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocumentType>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Doctype(pThis, __presult))
        }
    }
    public func get_Doctype() throws -> Optional<Windows.Data.Xml.Dom.IXmlDocumentType> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocumentType>> = nil;
        try self._n_get_Doctype(&__result);
        return Windows.Data.Xml.Dom.IXmlDocumentType(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlDomImplementation get_Implementation()
    private func _n_get_Implementation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Implementation(pThis, __presult))
        }
    }
    public func get_Implementation() throws -> Optional<Windows.Data.Xml.Dom.IXmlDomImplementation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDomImplementation>> = nil;
        try self._n_get_Implementation(&__result);
        return Windows.Data.Xml.Dom.IXmlDomImplementation(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlElement get_DocumentElement()
    private func _n_get_DocumentElement(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DocumentElement(pThis, __presult))
        }
    }
    public func get_DocumentElement() throws -> Optional<Windows.Data.Xml.Dom.IXmlElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>> = nil;
        try self._n_get_DocumentElement(&__result);
        return Windows.Data.Xml.Dom.IXmlElement(consuming: __result);
    }
    // Windows.Data.Xml.Dom.XmlElement CreateElement(System.String)
    private func _n_CreateElement(_ tagName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateElement(pThis, tagName, __presult))
        }
    }
    public func CreateElement(tagName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlElement> {
        let __hstr_tagName = try HString(tagName);
        return try withExtendedLifetime(__hstr_tagName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>> = nil;
        try self._n_CreateElement(__hstr_tagName.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlElement(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlDocumentFragment CreateDocumentFragment()
    private func _n_CreateDocumentFragment(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDocumentFragment(pThis, __presult))
        }
    }
    public func CreateDocumentFragment() throws -> Optional<Windows.Data.Xml.Dom.IXmlDocumentFragment> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocumentFragment>> = nil;
        try self._n_CreateDocumentFragment(&__result);
        return Windows.Data.Xml.Dom.IXmlDocumentFragment(consuming: __result);
    }
    // Windows.Data.Xml.Dom.XmlText CreateTextNode(System.String)
    private func _n_CreateTextNode(_ data : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlText>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateTextNode(pThis, data, __presult))
        }
    }
    public func CreateTextNode(data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlText> {
        let __hstr_data = try HString(data);
        return try withExtendedLifetime(__hstr_data) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlText>> = nil;
        try self._n_CreateTextNode(__hstr_data.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlText(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlComment CreateComment(System.String)
    private func _n_CreateComment(_ data : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlComment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateComment(pThis, data, __presult))
        }
    }
    public func CreateComment(data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlComment> {
        let __hstr_data = try HString(data);
        return try withExtendedLifetime(__hstr_data) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlComment>> = nil;
        try self._n_CreateComment(__hstr_data.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlComment(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlProcessingInstruction CreateProcessingInstruction(System.String, System.String)
    private func _n_CreateProcessingInstruction(_ target : Optional<HSTRING>, _ data : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateProcessingInstruction(pThis, target, data, __presult))
        }
    }
    public func CreateProcessingInstruction(target : Swift.String, data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlProcessingInstruction> {
        let __hstr_target = try HString(target);
        return try withExtendedLifetime(__hstr_target) {
        let __hstr_data = try HString(data);
        return try withExtendedLifetime(__hstr_data) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlProcessingInstruction>> = nil;
        try self._n_CreateProcessingInstruction(__hstr_target.Raw(), __hstr_data.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlProcessingInstruction(consuming: __result);
        }
        }
    }
    // Windows.Data.Xml.Dom.XmlAttribute CreateAttribute(System.String)
    private func _n_CreateAttribute(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlAttribute>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAttribute(pThis, name, __presult))
        }
    }
    public func CreateAttribute(name : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlAttribute> {
        let __hstr_name = try HString(name);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlAttribute>> = nil;
        try self._n_CreateAttribute(__hstr_name.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlAttribute(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlEntityReference CreateEntityReference(System.String)
    private func _n_CreateEntityReference(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlEntityReference>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEntityReference(pThis, name, __presult))
        }
    }
    public func CreateEntityReference(name : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlEntityReference> {
        let __hstr_name = try HString(name);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlEntityReference>> = nil;
        try self._n_CreateEntityReference(__hstr_name.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlEntityReference(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlNodeList GetElementsByTagName(System.String)
    private func _n_GetElementsByTagName(_ tagName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementsByTagName(pThis, tagName, __presult))
        }
    }
    public func GetElementsByTagName(tagName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNodeList> {
        let __hstr_tagName = try HString(tagName);
        return try withExtendedLifetime(__hstr_tagName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>> = nil;
        try self._n_GetElementsByTagName(__hstr_tagName.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlNodeList(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlCDataSection CreateCDataSection(System.String)
    private func _n_CreateCDataSection(_ data : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlCDataSection>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCDataSection(pThis, data, __presult))
        }
    }
    public func CreateCDataSection(data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlCDataSection> {
        let __hstr_data = try HString(data);
        return try withExtendedLifetime(__hstr_data) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlCDataSection>> = nil;
        try self._n_CreateCDataSection(__hstr_data.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlCDataSection(consuming: __result);
        }
    }
    // [IsSpecialName] System.String get_DocumentUri()
    private func _n_get_DocumentUri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DocumentUri(pThis, __presult))
        }
    }
    public func get_DocumentUri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DocumentUri(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Data.Xml.Dom.XmlAttribute CreateAttributeNS(System.Object, System.String)
    private func _n_CreateAttributeNS(_ namespaceUri : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ qualifiedName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlAttribute>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAttributeNS(pThis, namespaceUri, qualifiedName, __presult))
        }
    }
    public func CreateAttributeNS(namespaceUri : Optional<WinRT.IInspectable>, qualifiedName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlAttribute> {
        let __hstr_qualifiedName = try HString(qualifiedName);
        return try withExtendedLifetime(__hstr_qualifiedName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlAttribute>> = nil;
        try self._n_CreateAttributeNS(RawPointer(namespaceUri), __hstr_qualifiedName.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlAttribute(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlElement CreateElementNS(System.Object, System.String)
    private func _n_CreateElementNS(_ namespaceUri : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ qualifiedName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateElementNS(pThis, namespaceUri, qualifiedName, __presult))
        }
    }
    public func CreateElementNS(namespaceUri : Optional<WinRT.IInspectable>, qualifiedName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlElement> {
        let __hstr_qualifiedName = try HString(qualifiedName);
        return try withExtendedLifetime(__hstr_qualifiedName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>> = nil;
        try self._n_CreateElementNS(RawPointer(namespaceUri), __hstr_qualifiedName.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlElement(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlElement GetElementById(System.String)
    private func _n_GetElementById(_ elementId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetElementById(pThis, elementId, __presult))
        }
    }
    public func GetElementById(elementId : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlElement> {
        let __hstr_elementId = try HString(elementId);
        return try withExtendedLifetime(__hstr_elementId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlElement>> = nil;
        try self._n_GetElementById(__hstr_elementId.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlElement(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.IXmlNode ImportNode(Windows.Data.Xml.Dom.IXmlNode, bool)
    private func _n_ImportNode(_ node : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ deep : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ImportNode(pThis, node, deep, __presult))
        }
    }
    public func ImportNode(node : Optional<Windows.Data.Xml.Dom.IXmlNode>, deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_ImportNode(RawPointer(node), deep, &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    public var Doctype : Optional<Windows.Data.Xml.Dom.IXmlDocumentType> {
        get throws {
            return try get_Doctype();
        }
    }
    public var DocumentElement : Optional<Windows.Data.Xml.Dom.IXmlElement> {
        get throws {
            return try get_DocumentElement();
        }
    }
    public var DocumentUri : Swift.String {
        get throws {
            return try get_DocumentUri();
        }
    }
    public var Implementation : Optional<Windows.Data.Xml.Dom.IXmlDomImplementation> {
        get throws {
            return try get_Implementation();
        }
    }
} // IXmlDocument


// type: Windows.Data.Xml.Dom.IXmlDocumentFragment
// interface type
open class IXmlDocumentFragment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe2ea6a96, Data2: 0x0c21, Data3 : 0x44a5, Data4 : (0x8b, 0xc9, 0x9e, 0x4a, 0x26, 0x27, 0x08, 0xec)) }
} // IXmlDocumentFragment


// type: Windows.Data.Xml.Dom.IXmlDocumentIO
// interface type
open class IXmlDocumentIO
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6cd0e74e, Data2: 0xee65, Data3 : 0x4489, Data4 : (0x9e, 0xbf, 0xca, 0x43, 0xe8, 0x7b, 0xa6, 0x37)) }
    // void LoadXml(System.String)
    private func _n_LoadXml(_ xml : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXml(pThis, xml))
        }
    }
    public func LoadXml(xml : Swift.String) throws -> Void {
        let __hstr_xml = try HString(xml);
        return try withExtendedLifetime(__hstr_xml) {
        try self._n_LoadXml(__hstr_xml.Raw());
        }
    }
    // void LoadXml(System.String, Windows.Data.Xml.Dom.XmlLoadSettings)
    private func _n_LoadXmlWithSettings(_ xml : Optional<HSTRING>, _ loadSettings : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings>>) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXmlWithSettings(pThis, xml, loadSettings))
        }
    }
    public func LoadXmlWithSettings(xml : Swift.String, loadSettings : Optional<Windows.Data.Xml.Dom.IXmlLoadSettings>) throws -> Void {
        let __hstr_xml = try HString(xml);
        return try withExtendedLifetime(__hstr_xml) {
        try self._n_LoadXmlWithSettings(__hstr_xml.Raw(), RawPointer(loadSettings));
        }
    }
    // Windows.Foundation.IAsyncAction SaveToFileAsync(Windows.Storage.IStorageFile)
    private func _n_SaveToFileAsync(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToFileAsync(pThis, file, __presult))
        }
    }
    public func SaveToFileAsync(file : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_SaveToFileAsync(RawPointer(file), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func SaveToFile(file : Optional<Windows.Storage.IStorageFile>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SaveToFileAsync(file: file)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IXmlDocumentIO


// type: Windows.Data.Xml.Dom.IXmlDocumentIO2
// interface type
open class IXmlDocumentIO2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5d034661, Data2: 0x7bd8, Data3 : 0x4ad5, Data4 : (0x9e, 0xbf, 0x81, 0xe6, 0x34, 0x72, 0x63, 0xb1)) }
    // void LoadXmlFromBuffer(Windows.Storage.Streams.IBuffer)
    private func _n_LoadXmlFromBuffer(_ buffer : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXmlFromBuffer(pThis, buffer))
        }
    }
    public func LoadXmlFromBuffer(buffer : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        try self._n_LoadXmlFromBuffer(RawPointer(buffer));
    }
    // void LoadXmlFromBuffer(Windows.Storage.Streams.IBuffer, Windows.Data.Xml.Dom.XmlLoadSettings)
    private func _n_LoadXmlFromBufferWithSettings(_ buffer : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ loadSettings : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings>>) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentIO2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadXmlFromBufferWithSettings(pThis, buffer, loadSettings))
        }
    }
    public func LoadXmlFromBufferWithSettings(buffer : Optional<Windows.Storage.Streams.IBuffer>, loadSettings : Optional<Windows.Data.Xml.Dom.IXmlLoadSettings>) throws -> Void {
        try self._n_LoadXmlFromBufferWithSettings(RawPointer(buffer), RawPointer(loadSettings));
    }
} // IXmlDocumentIO2


// type: Windows.Data.Xml.Dom.IXmlDocumentStatics
// interface type
open class IXmlDocumentStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5543d254, Data2: 0xd757, Data3 : 0x4b79, Data4 : (0x95, 0x39, 0x23, 0x2b, 0x18, 0xf5, 0x0b, 0xf1)) }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Xml.Dom.XmlDocument> LoadFromUriAsync(Windows.Foundation.Uri)
    private func _n_LoadFromUriAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromUriAsync(pThis, uri, __presult))
        }
    }
    public func LoadFromUriAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>> = nil;
        try self._n_LoadFromUriAsync(RawPointer(uri), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument(consuming: __result);
    }
    public func LoadFromUri(uri : Optional<Windows.Foundation.IUriRuntimeClass>) async throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromUriAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Xml.Dom.XmlDocument> LoadFromUriAsync(Windows.Foundation.Uri, Windows.Data.Xml.Dom.XmlLoadSettings)
    private func _n_LoadFromUriWithSettingsAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ loadSettings : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromUriWithSettingsAsync(pThis, uri, loadSettings, __presult))
        }
    }
    public func LoadFromUriWithSettingsAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, loadSettings : Optional<Windows.Data.Xml.Dom.IXmlLoadSettings>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>> = nil;
        try self._n_LoadFromUriWithSettingsAsync(RawPointer(uri), RawPointer(loadSettings), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument(consuming: __result);
    }
    public func LoadFromUriWithSettings(uri : Optional<Windows.Foundation.IUriRuntimeClass>, loadSettings : Optional<Windows.Data.Xml.Dom.IXmlLoadSettings>) async throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromUriWithSettingsAsync(uri: uri, loadSettings: loadSettings)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Xml.Dom.XmlDocument> LoadFromFileAsync(Windows.Storage.IStorageFile)
    private func _n_LoadFromFileAsync(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromFileAsync(pThis, file, __presult))
        }
    }
    public func LoadFromFileAsync(file : Optional<Windows.Storage.IStorageFile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>> = nil;
        try self._n_LoadFromFileAsync(RawPointer(file), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument(consuming: __result);
    }
    public func LoadFromFile(file : Optional<Windows.Storage.IStorageFile>) async throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromFileAsync(file: file)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Data.Xml.Dom.XmlDocument> LoadFromFileAsync(Windows.Storage.IStorageFile, Windows.Data.Xml.Dom.XmlLoadSettings)
    private func _n_LoadFromFileWithSettingsAsync(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ loadSettings : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlLoadSettings>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromFileWithSettingsAsync(pThis, file, loadSettings, __presult))
        }
    }
    public func LoadFromFileWithSettingsAsync(file : Optional<Windows.Storage.IStorageFile>, loadSettings : Optional<Windows.Data.Xml.Dom.IXmlLoadSettings>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument>> = nil;
        try self._n_LoadFromFileWithSettingsAsync(RawPointer(file), RawPointer(loadSettings), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument(consuming: __result);
    }
    public func LoadFromFileWithSettings(file : Optional<Windows.Storage.IStorageFile>, loadSettings : Optional<Windows.Data.Xml.Dom.IXmlLoadSettings>) async throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadFromFileWithSettingsAsync(file: file, loadSettings: loadSettings)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IXmlDocumentStatics


// type: Windows.Data.Xml.Dom.IXmlDocumentType
// interface type
open class IXmlDocumentType
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf7342425, Data2: 0x9781, Data3 : 0x4964, Data4 : (0x8e, 0x94, 0x9b, 0x1c, 0x6d, 0xfc, 0x9b, 0xc7)) }
// method not needed: get_Name
// method not needed: get_Entities
// method not needed: get_Notations
} // IXmlDocumentType


// type: Windows.Data.Xml.Dom.IXmlDomImplementation
// interface type
open class IXmlDomImplementation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6de58132, Data2: 0xf11d, Data3 : 0x4fbb, Data4 : (0x8c, 0xc6, 0x58, 0x3c, 0xba, 0x93, 0x11, 0x2f)) }
// method not needed: HasFeature
} // IXmlDomImplementation


// type: Windows.Data.Xml.Dom.IXmlElement
// interface type
open class IXmlElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2dfb8a1f, Data2: 0x6b10, Data3 : 0x4ef8, Data4 : (0x9f, 0x83, 0xef, 0xcc, 0xe8, 0xfa, 0xec, 0x37)) }
// method not needed: get_TagName
// method not needed: GetAttribute
// method not needed: SetAttribute
// method not needed: RemoveAttribute
// method not needed: GetAttributeNode
// method not needed: SetAttributeNode
// method not needed: RemoveAttributeNode
// method not needed: GetElementsByTagName
// method not needed: SetAttributeNS
// method not needed: GetAttributeNS
// method not needed: RemoveAttributeNS
// method not needed: SetAttributeNodeNS
// method not needed: GetAttributeNodeNS
} // IXmlElement


// type: Windows.Data.Xml.Dom.IXmlEntityReference
// interface type
open class IXmlEntityReference
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2e2f47bc, Data2: 0xc3d0, Data3 : 0x4ccf, Data4 : (0xbb, 0x86, 0x0a, 0xb8, 0xc3, 0x6a, 0x61, 0xcf)) }
} // IXmlEntityReference


// type: Windows.Data.Xml.Dom.IXmlLoadSettings
// interface type
open class IXmlLoadSettings
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x58aa07a8, Data2: 0xfed6, Data3 : 0x46f7, Data4 : (0xb4, 0xc5, 0xfb, 0x1b, 0xa7, 0x21, 0x08, 0xd6)) }
// method not needed: get_MaxElementDepth
// method not needed: put_MaxElementDepth
// method not needed: get_ProhibitDtd
// method not needed: put_ProhibitDtd
// method not needed: get_ResolveExternals
// method not needed: put_ResolveExternals
// method not needed: get_ValidateOnParse
// method not needed: put_ValidateOnParse
// method not needed: get_ElementContentWhiteSpace
// method not needed: put_ElementContentWhiteSpace
} // IXmlLoadSettings


// type: Windows.Data.Xml.Dom.IXmlNamedNodeMap
// interface type
open class IXmlNamedNodeMap
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb3a69eb0, Data2: 0xaab0, Data3 : 0x4b82, Data4 : (0xa6, 0xfa, 0xb1, 0x45, 0x3f, 0x7c, 0x02, 0x1b)) }
// method not needed: get_Length
// method not needed: Item
// method not needed: GetNamedItem
// method not needed: SetNamedItem
// method not needed: RemoveNamedItem
// method not needed: GetNamedItemNS
// method not needed: RemoveNamedItemNS
// method not needed: SetNamedItemNS
} // IXmlNamedNodeMap


// type: Windows.Data.Xml.Dom.IXmlNode
// interface type
open class IXmlNode
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1c741d59, Data2: 0x2122, Data3 : 0x47d5, Data4 : (0xa8, 0x56, 0x83, 0xf3, 0xd4, 0x21, 0x48, 0x75)) }
    // [IsSpecialName] System.Object get_NodeValue()
    private func _n_get_NodeValue(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeValue(pThis, __presult))
        }
    }
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_NodeValue(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_NodeValue(System.Object)
    private func _n_put_NodeValue(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NodeValue(pThis, value))
        }
    }
    public func put_NodeValue(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_NodeValue(RawPointer(value));
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.NodeType get_NodeType()
    private func _n_get_NodeType(_ __presult: UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CNodeType>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeType(pThis, __presult))
        }
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        var __result : _q_CWindows_CData_CXml_CDom_CNodeType = _q_CWindows_CData_CXml_CDom_CNodeType_Invalid;
        try self._n_get_NodeType(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_NodeName()
    private func _n_get_NodeName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeName(pThis, __presult))
        }
    }
    public func get_NodeName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NodeName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.IXmlNode get_ParentNode()
    private func _n_get_ParentNode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ParentNode(pThis, __presult))
        }
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_get_ParentNode(&__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlNodeList get_ChildNodes()
    private func _n_get_ChildNodes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildNodes(pThis, __presult))
        }
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.IXmlNodeList> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>> = nil;
        try self._n_get_ChildNodes(&__result);
        return Windows.Data.Xml.Dom.IXmlNodeList(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.IXmlNode get_FirstChild()
    private func _n_get_FirstChild(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstChild(pThis, __presult))
        }
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_get_FirstChild(&__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.IXmlNode get_LastChild()
    private func _n_get_LastChild(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastChild(pThis, __presult))
        }
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_get_LastChild(&__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.IXmlNode get_PreviousSibling()
    private func _n_get_PreviousSibling(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousSibling(pThis, __presult))
        }
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_get_PreviousSibling(&__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.IXmlNode get_NextSibling()
    private func _n_get_NextSibling(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextSibling(pThis, __presult))
        }
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_get_NextSibling(&__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlNamedNodeMap get_Attributes()
    private func _n_get_Attributes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Attributes(pThis, __presult))
        }
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.IXmlNamedNodeMap> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNamedNodeMap>> = nil;
        try self._n_get_Attributes(&__result);
        return Windows.Data.Xml.Dom.IXmlNamedNodeMap(consuming: __result);
    }
    // bool HasChildNodes()
    private func _n_HasChildNodes(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasChildNodes(pThis, __presult))
        }
    }
    public func HasChildNodes() throws -> boolean {
        var __result : boolean = 0;
        try self._n_HasChildNodes(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlDocument get_OwnerDocument()
    private func _n_get_OwnerDocument(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OwnerDocument(pThis, __presult))
        }
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_get_OwnerDocument(&__result);
        return Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
    // Windows.Data.Xml.Dom.IXmlNode InsertBefore(Windows.Data.Xml.Dom.IXmlNode, Windows.Data.Xml.Dom.IXmlNode)
    private func _n_InsertBefore(_ newChild : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ referenceChild : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertBefore(pThis, newChild, referenceChild, __presult))
        }
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_InsertBefore(RawPointer(newChild), RawPointer(referenceChild), &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // Windows.Data.Xml.Dom.IXmlNode ReplaceChild(Windows.Data.Xml.Dom.IXmlNode, Windows.Data.Xml.Dom.IXmlNode)
    private func _n_ReplaceChild(_ newChild : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ referenceChild : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceChild(pThis, newChild, referenceChild, __presult))
        }
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_ReplaceChild(RawPointer(newChild), RawPointer(referenceChild), &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // Windows.Data.Xml.Dom.IXmlNode RemoveChild(Windows.Data.Xml.Dom.IXmlNode)
    private func _n_RemoveChild(_ childNode : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveChild(pThis, childNode, __presult))
        }
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_RemoveChild(RawPointer(childNode), &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // Windows.Data.Xml.Dom.IXmlNode AppendChild(Windows.Data.Xml.Dom.IXmlNode)
    private func _n_AppendChild(_ newChild : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AppendChild(pThis, newChild, __presult))
        }
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_AppendChild(RawPointer(newChild), &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // Windows.Data.Xml.Dom.IXmlNode CloneNode(bool)
    private func _n_CloneNode(_ deep : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CloneNode(pThis, deep, __presult))
        }
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_CloneNode(deep, &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
    }
    // [IsSpecialName] System.Object get_NamespaceUri()
    private func _n_get_NamespaceUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NamespaceUri(pThis, __presult))
        }
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_NamespaceUri(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] System.Object get_LocalName()
    private func _n_get_LocalName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalName(pThis, __presult))
        }
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_LocalName(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] System.Object get_Prefix()
    private func _n_get_Prefix(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Prefix(pThis, __presult))
        }
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_Prefix(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // void Normalize()
    private func _n_Normalize() throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Normalize(pThis))
        }
    }
    public func Normalize() throws -> Void {
        try self._n_Normalize();
    }
    // [IsSpecialName] void put_Prefix(System.Object)
    private func _n_put_Prefix(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Prefix(pThis, value))
        }
    }
    public func put_Prefix(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_Prefix(RawPointer(value));
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.IXmlNamedNodeMap> {
        get throws {
            return try get_Attributes();
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.IXmlNodeList> {
        get throws {
            return try get_ChildNodes();
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
            return try get_FirstChild();
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
            return try get_LastChild();
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
            return try get_LocalName();
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
            return try get_NamespaceUri();
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
            return try get_NextSibling();
        }
    }
    public var NodeName : Swift.String {
        get throws {
            return try get_NodeName();
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
            return try get_NodeType();
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
            return try get_NodeValue();
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        get throws {
            return try get_OwnerDocument();
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
            return try get_ParentNode();
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
            return try get_Prefix();
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
            return try get_PreviousSibling();
        }
    }
} // IXmlNode


// type: Windows.Data.Xml.Dom.IXmlNodeList
// interface type
open class IXmlNodeList
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8c60ad77, Data2: 0x83a4, Data3 : 0x4ec1, Data4 : (0x9c, 0x54, 0x7b, 0xa4, 0x29, 0xe1, 0x3d, 0xa6)) }
// method not needed: get_Length
// method not needed: Item
} // IXmlNodeList


// type: Windows.Data.Xml.Dom.IXmlNodeSelector
// interface type
open class IXmlNodeSelector
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x63dbba8b, Data2: 0xd0db, Data3 : 0x4fe1, Data4 : (0xb7, 0x45, 0xf9, 0x43, 0x3a, 0xfd, 0xc2, 0x5b)) }
    // Windows.Data.Xml.Dom.IXmlNode SelectSingleNode(System.String)
    private func _n_SelectSingleNode(_ xpath : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SelectSingleNode(pThis, xpath, __presult))
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let __hstr_xpath = try HString(xpath);
        return try withExtendedLifetime(__hstr_xpath) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_SelectSingleNode(__hstr_xpath.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlNodeList SelectNodes(System.String)
    private func _n_SelectNodes(_ xpath : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SelectNodes(pThis, xpath, __presult))
        }
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNodeList> {
        let __hstr_xpath = try HString(xpath);
        return try withExtendedLifetime(__hstr_xpath) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>> = nil;
        try self._n_SelectNodes(__hstr_xpath.Raw(), &__result);
        return Windows.Data.Xml.Dom.IXmlNodeList(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.IXmlNode SelectSingleNodeNS(System.String, System.Object)
    private func _n_SelectSingleNodeNS(_ xpath : Optional<HSTRING>, _ namespaces : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SelectSingleNodeNS(pThis, xpath, namespaces, __presult))
        }
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.IInspectable>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let __hstr_xpath = try HString(xpath);
        return try withExtendedLifetime(__hstr_xpath) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>> = nil;
        try self._n_SelectSingleNodeNS(__hstr_xpath.Raw(), RawPointer(namespaces), &__result);
        return Windows.Data.Xml.Dom.IXmlNode(consuming: __result);
        }
    }
    // Windows.Data.Xml.Dom.XmlNodeList SelectNodesNS(System.String, System.Object)
    private func _n_SelectNodesNS(_ xpath : Optional<HSTRING>, _ namespaces : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNodeSelector.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SelectNodesNS(pThis, xpath, namespaces, __presult))
        }
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.IInspectable>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNodeList> {
        let __hstr_xpath = try HString(xpath);
        return try withExtendedLifetime(__hstr_xpath) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNodeList>> = nil;
        try self._n_SelectNodesNS(__hstr_xpath.Raw(), RawPointer(namespaces), &__result);
        return Windows.Data.Xml.Dom.IXmlNodeList(consuming: __result);
        }
    }
} // IXmlNodeSelector


// type: Windows.Data.Xml.Dom.IXmlNodeSerializer
// interface type
open class IXmlNodeSerializer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5cc5b382, Data2: 0xe6dd, Data3 : 0x4991, Data4 : (0xab, 0xef, 0x06, 0xd8, 0xd2, 0xe7, 0xbd, 0x0c)) }
    // System.String GetXml()
    private func _n_GetXml(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetXml(pThis, __presult))
        }
    }
    public func GetXml() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetXml(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_InnerText()
    private func _n_get_InnerText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InnerText(pThis, __presult))
        }
    }
    public func get_InnerText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_InnerText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_InnerText(System.String)
    private func _n_put_InnerText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CData_CXml_CDom_CIXmlNodeSerializer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InnerText(pThis, value))
        }
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_InnerText(__hstr_value.Raw());
        }
    }
    public var InnerText : Swift.String {
        get throws {
            return try get_InnerText();
        }
    }
} // IXmlNodeSerializer


// type: Windows.Data.Xml.Dom.IXmlProcessingInstruction
// interface type
open class IXmlProcessingInstruction
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2707fd1e, Data2: 0x1e92, Data3 : 0x4ece, Data4 : (0xb6, 0xf4, 0x26, 0xf0, 0x69, 0x07, 0x8d, 0xdc)) }
// method not needed: get_Target
// method not needed: get_Data
// method not needed: put_Data
} // IXmlProcessingInstruction


// type: Windows.Data.Xml.Dom.IXmlText
// interface type
open class IXmlText
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf931a4cb, Data2: 0x308d, Data3 : 0x4760, Data4 : (0xa1, 0xd5, 0x43, 0xb6, 0x74, 0x50, 0xac, 0x7e)) }
// method not needed: SplitText
} // IXmlText


// type: Windows.Data.Xml.Dom.NodeType
// enum type
public typealias NodeType = _q_CWindows_CData_CXml_CDom_CNodeType;

// type: Windows.Data.Xml.Dom.XmlAttribute
// runtime class
public class XmlAttribute
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlAttribute;
    public init(plok: Windows.Data.Xml.Dom.IXmlAttribute?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlAttribute { return _self; }
    // method not needed: get_Name
    // method not needed: get_Specified
    // method not needed: get_Value
    // method not needed: put_Value
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlCDataSection
// runtime class
public class XmlCDataSection
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlCDataSection;
    public init(plok: Windows.Data.Xml.Dom.IXmlCDataSection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlCDataSection { return _self; }
    // method not needed: SplitText
    // instance interface not needed: Windows.Data.Xml.Dom.IXmlCharacterData
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlComment
// runtime class
public class XmlComment
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlComment;
    public init(plok: Windows.Data.Xml.Dom.IXmlComment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlComment { return _self; }
    // instance interface not needed: Windows.Data.Xml.Dom.IXmlCharacterData
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlDocument
// runtime class
public class XmlDocument
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlDocument;
    public init(plok: Windows.Data.Xml.Dom.IXmlDocument?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlDocument { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Data.Xml.Dom.XmlDocument")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IXmlDocumentStatics {
        static var x : IXmlDocumentStatics =
            try! RoGetActivationFactory("Windows.Data.Xml.Dom.XmlDocument")
    }
    public static var XmlDocumentStatics : IXmlDocumentStatics {
        _IXmlDocumentStatics.x
    }
    public static func LoadFromUriAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        return try XmlDocumentStatics.LoadFromUriAsync(uri: uri!.Interface());
    }
    public static func LoadFromUri(uri : Optional<Windows.Foundation.Uri>) async throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Xml.Dom.XmlDocument(plok: Self.LoadFromUriAsync(uri: uri)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func LoadFromUriAsync(uri : Optional<Windows.Foundation.Uri>, loadSettings : Optional<Windows.Data.Xml.Dom.XmlLoadSettings>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        return try XmlDocumentStatics.LoadFromUriWithSettingsAsync(uri: uri!.Interface(), loadSettings: loadSettings!.Interface());
    }
    public static func LoadFromUri(uri : Optional<Windows.Foundation.Uri>, loadSettings : Optional<Windows.Data.Xml.Dom.XmlLoadSettings>) async throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Xml.Dom.XmlDocument(plok: Self.LoadFromUriAsync(uri: uri, loadSettings: loadSettings)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func LoadFromFileAsync(file : Optional<Windows.Storage.IStorageFile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        return try XmlDocumentStatics.LoadFromFileAsync(file: file);
    }
    public static func LoadFromFile(file : Optional<Windows.Storage.IStorageFile>) async throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Xml.Dom.XmlDocument(plok: Self.LoadFromFileAsync(file: file)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func LoadFromFileAsync(file : Optional<Windows.Storage.IStorageFile>, loadSettings : Optional<Windows.Data.Xml.Dom.XmlLoadSettings>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CData_CXml_CDom_CXmlDocument> {
        return try XmlDocumentStatics.LoadFromFileWithSettingsAsync(file: file, loadSettings: loadSettings!.Interface());
    }
    public static func LoadFromFile(file : Optional<Windows.Storage.IStorageFile>, loadSettings : Optional<Windows.Data.Xml.Dom.XmlLoadSettings>) async throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Data.Xml.Dom.XmlDocument(plok: Self.LoadFromFileAsync(file: file, loadSettings: loadSettings)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Doctype() throws -> Optional<Windows.Data.Xml.Dom.XmlDocumentType> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocumentType(plok: _ifc.get_Doctype());
    }
    public func get_Implementation() throws -> Optional<Windows.Data.Xml.Dom.XmlDomImplementation> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDomImplementation(plok: _ifc.get_Implementation());
    }
    public func get_DocumentElement() throws -> Optional<Windows.Data.Xml.Dom.XmlElement> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlElement(plok: _ifc.get_DocumentElement());
    }
    public func CreateElement(tagName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlElement> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlElement(plok: _ifc.CreateElement(tagName: tagName));
    }
    public func CreateDocumentFragment() throws -> Optional<Windows.Data.Xml.Dom.XmlDocumentFragment> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocumentFragment(plok: _ifc.CreateDocumentFragment());
    }
    public func CreateTextNode(data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlText> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlText(plok: _ifc.CreateTextNode(data: data));
    }
    public func CreateComment(data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlComment> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlComment(plok: _ifc.CreateComment(data: data));
    }
    public func CreateProcessingInstruction(target : Swift.String, data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlProcessingInstruction> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlProcessingInstruction(plok: _ifc.CreateProcessingInstruction(target: target, data: data));
    }
    public func CreateAttribute(name : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlAttribute> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlAttribute(plok: _ifc.CreateAttribute(name: name));
    }
    public func CreateEntityReference(name : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlEntityReference> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlEntityReference(plok: _ifc.CreateEntityReference(name: name));
    }
    public func GetElementsByTagName(tagName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.GetElementsByTagName(tagName: tagName));
    }
    public func CreateCDataSection(data : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlCDataSection> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlCDataSection(plok: _ifc.CreateCDataSection(data: data));
    }
    public func get_DocumentUri() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try _ifc.get_DocumentUri();
    }
    public func CreateAttributeNS(namespaceUri : Optional<WinRT.Object>, qualifiedName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlAttribute> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlAttribute(plok: _ifc.CreateAttributeNS(namespaceUri: namespaceUri!.GetInterface(), qualifiedName: qualifiedName));
    }
    public func CreateElementNS(namespaceUri : Optional<WinRT.Object>, qualifiedName : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlElement> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlElement(plok: _ifc.CreateElementNS(namespaceUri: namespaceUri!.GetInterface(), qualifiedName: qualifiedName));
    }
    public func GetElementById(elementId : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlElement> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlElement(plok: _ifc.GetElementById(elementId: elementId));
    }
    public func ImportNode(node : Optional<Windows.Data.Xml.Dom.IXmlNode>, deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try _ifc.ImportNode(node: node, deep: deep);
    }
    public var Doctype : Optional<Windows.Data.Xml.Dom.XmlDocumentType> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocumentType(plok: _ifc.Doctype);
        }
    }
    public var DocumentElement : Optional<Windows.Data.Xml.Dom.XmlElement> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlElement(plok: _ifc.DocumentElement);
        }
    }
    public var DocumentUri : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try _ifc.DocumentUri;
        }
    }
    public var Implementation : Optional<Windows.Data.Xml.Dom.XmlDomImplementation> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocument = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDomImplementation(plok: _ifc.Implementation);
        }
    }
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
    public func LoadXml(xml : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocumentIO = try _self.QueryInterface();
        return try _ifc.LoadXml(xml: xml);
    }
    public func LoadXml(xml : Swift.String, loadSettings : Optional<Windows.Data.Xml.Dom.XmlLoadSettings>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocumentIO = try _self.QueryInterface();
        return try _ifc.LoadXmlWithSettings(xml: xml, loadSettings: loadSettings!.Interface());
    }
    public func SaveToFileAsync(file : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocumentIO = try _self.QueryInterface();
        return try _ifc.SaveToFileAsync(file: file);
    }
    public func SaveToFile(file : Optional<Windows.Storage.IStorageFile>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SaveToFileAsync(file: file)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func LoadXmlFromBuffer(buffer : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocumentIO2 = try _self.QueryInterface();
        return try _ifc.LoadXmlFromBuffer(buffer: buffer);
    }
    public func LoadXmlFromBuffer(buffer : Optional<Windows.Storage.Streams.IBuffer>, loadSettings : Optional<Windows.Data.Xml.Dom.XmlLoadSettings>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlDocumentIO2 = try _self.QueryInterface();
        return try _ifc.LoadXmlFromBufferWithSettings(buffer: buffer, loadSettings: loadSettings!.Interface());
    }
}

// type: Windows.Data.Xml.Dom.XmlDocumentFragment
// runtime class
public class XmlDocumentFragment
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlDocumentFragment;
    public init(plok: Windows.Data.Xml.Dom.IXmlDocumentFragment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlDocumentFragment { return _self; }
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlDocumentType
// runtime class
public class XmlDocumentType
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlDocumentType;
    public init(plok: Windows.Data.Xml.Dom.IXmlDocumentType?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlDocumentType { return _self; }
    // method not needed: get_Name
    // method not needed: get_Entities
    // method not needed: get_Notations
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlDomImplementation
// runtime class
public class XmlDomImplementation
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlDomImplementation;
    public init(plok: Windows.Data.Xml.Dom.IXmlDomImplementation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlDomImplementation { return _self; }
    // method not needed: HasFeature
}

// type: Windows.Data.Xml.Dom.XmlElement
// runtime class
public class XmlElement
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlElement;
    public init(plok: Windows.Data.Xml.Dom.IXmlElement?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlElement { return _self; }
    // method not needed: get_TagName
    // method not needed: GetAttribute
    // method not needed: SetAttribute
    // method not needed: RemoveAttribute
    // method not needed: GetAttributeNode
    // method not needed: SetAttributeNode
    // method not needed: RemoveAttributeNode
    // method not needed: GetElementsByTagName
    // method not needed: SetAttributeNS
    // method not needed: GetAttributeNS
    // method not needed: RemoveAttributeNS
    // method not needed: SetAttributeNodeNS
    // method not needed: GetAttributeNodeNS
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlEntityReference
// runtime class
public class XmlEntityReference
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlEntityReference;
    public init(plok: Windows.Data.Xml.Dom.IXmlEntityReference?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlEntityReference { return _self; }
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlLoadSettings
// runtime class
public class XmlLoadSettings
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlLoadSettings;
    public init(plok: Windows.Data.Xml.Dom.IXmlLoadSettings?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlLoadSettings { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Data.Xml.Dom.XmlLoadSettings")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_MaxElementDepth
    // method not needed: put_MaxElementDepth
    // method not needed: get_ProhibitDtd
    // method not needed: put_ProhibitDtd
    // method not needed: get_ResolveExternals
    // method not needed: put_ResolveExternals
    // method not needed: get_ValidateOnParse
    // method not needed: put_ValidateOnParse
    // method not needed: get_ElementContentWhiteSpace
    // method not needed: put_ElementContentWhiteSpace
}

// type: Windows.Data.Xml.Dom.XmlNamedNodeMap
// runtime class
public class XmlNamedNodeMap
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlNamedNodeMap;
    public init(plok: Windows.Data.Xml.Dom.IXmlNamedNodeMap?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlNamedNodeMap { return _self; }
    // method not needed: get_Length
    // method not needed: Item
    // method not needed: GetNamedItem
    // method not needed: SetNamedItem
    // method not needed: RemoveNamedItem
    // method not needed: GetNamedItemNS
    // method not needed: RemoveNamedItemNS
    // method not needed: SetNamedItemNS
    // instance interface not needed: Windows.Foundation.Collections.IVectorView`1[[Windows.Data.Xml.Dom.IXmlNode, Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Windows.Data.Xml.Dom.IXmlNode, Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Windows.Data.Xml.Dom.XmlNodeList
// runtime class
public class XmlNodeList
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlNodeList;
    public init(plok: Windows.Data.Xml.Dom.IXmlNodeList?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlNodeList { return _self; }
    // method not needed: get_Length
    // method not needed: Item
    // instance interface not needed: Windows.Foundation.Collections.IVectorView`1[[Windows.Data.Xml.Dom.IXmlNode, Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Windows.Data.Xml.Dom.IXmlNode, Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Windows.Data.Xml.Dom.XmlProcessingInstruction
// runtime class
public class XmlProcessingInstruction
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlProcessingInstruction;
    public init(plok: Windows.Data.Xml.Dom.IXmlProcessingInstruction?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlProcessingInstruction { return _self; }
    // method not needed: get_Target
    // method not needed: get_Data
    // method not needed: put_Data
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

// type: Windows.Data.Xml.Dom.XmlText
// runtime class
public class XmlText
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Dom.IXmlText;
    public init(plok: Windows.Data.Xml.Dom.IXmlText?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Dom.IXmlText { return _self; }
    // method not needed: SplitText
    // instance interface not needed: Windows.Data.Xml.Dom.IXmlCharacterData
    public func get_NodeValue() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value!.GetInterface());
    }
    public func get_NodeType() throws -> Windows.Data.Xml.Dom.NodeType {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeType();
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func get_ParentNode() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_ParentNode();
    }
    public func get_ChildNodes() throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.get_ChildNodes());
    }
    public func get_FirstChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func get_PreviousSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_PreviousSibling();
    }
    public func get_NextSibling() throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NextSibling();
    }
    public func get_Attributes() throws -> Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.get_Attributes());
    }
    public func HasChildNodes() throws -> boolean {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.HasChildNodes();
    }
    public func get_OwnerDocument() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_OwnerDocument());
    }
    public func InsertBefore(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.InsertBefore(newChild: newChild, referenceChild: referenceChild);
    }
    public func ReplaceChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>, referenceChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, referenceChild: referenceChild);
    }
    public func RemoveChild(childNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.RemoveChild(childNode: childNode);
    }
    public func AppendChild(newChild : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.AppendChild(newChild: newChild);
    }
    public func CloneNode(deep : boolean) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.CloneNode(deep: deep);
    }
    public func get_NamespaceUri() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_NamespaceUri();
    }
    public func get_LocalName() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_LocalName();
    }
    public func get_Prefix() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.get_Prefix();
    }
    public func Normalize() throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Normalize();
    }
    public func put_Prefix(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.put_Prefix(value: value!.GetInterface());
    }
    public var Attributes : Optional<Windows.Data.Xml.Dom.XmlNamedNodeMap> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNamedNodeMap(plok: _ifc.Attributes);
        }
    }
    public var ChildNodes : Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.ChildNodes);
        }
    }
    public var FirstChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var LastChild : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var LocalName : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.LocalName;
        }
    }
    public var NamespaceUri : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NamespaceUri;
        }
    }
    public var NextSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NextSibling;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeType : Windows.Data.Xml.Dom.NodeType {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeType;
        }
    }
    public var NodeValue : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public var OwnerDocument : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.OwnerDocument);
        }
    }
    public var ParentNode : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.ParentNode;
        }
    }
    public var Prefix : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.Prefix;
        }
    }
    public var PreviousSibling : Optional<Windows.Data.Xml.Dom.IXmlNode> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNode = try _self.QueryInterface();
        return try _ifc.PreviousSibling;
        }
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func get_InnerText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.get_InnerText();
    }
    public func put_InnerText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.put_InnerText(value: value);
    }
    public var InnerText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSerializer = try _self.QueryInterface();
        return try _ifc.InnerText;
        }
    }
    public func SelectSingleNode(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNode(xpath: xpath);
    }
    public func SelectNodes(xpath : Swift.String) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodes(xpath: xpath));
    }
    public func SelectSingleNodeNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.IXmlNode> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try _ifc.SelectSingleNodeNS(xpath: xpath, namespaces: namespaces!.GetInterface());
    }
    public func SelectNodesNS(xpath : Swift.String, namespaces : Optional<WinRT.Object>) throws -> Optional<Windows.Data.Xml.Dom.XmlNodeList> {
        let _ifc : Windows.Data.Xml.Dom.IXmlNodeSelector = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlNodeList(plok: _ifc.SelectNodesNS(xpath: xpath, namespaces: namespaces!.GetInterface()));
    }
}

}
extension Windows.Data.Xml.Dom.NodeType {
    public static var Invalid : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_Invalid;
        }
    }
    public static var ElementNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_ElementNode;
        }
    }
    public static var AttributeNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_AttributeNode;
        }
    }
    public static var TextNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_TextNode;
        }
    }
    public static var DataSectionNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_DataSectionNode;
        }
    }
    public static var EntityReferenceNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_EntityReferenceNode;
        }
    }
    public static var EntityNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_EntityNode;
        }
    }
    public static var ProcessingInstructionNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_ProcessingInstructionNode;
        }
    }
    public static var CommentNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_CommentNode;
        }
    }
    public static var DocumentNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_DocumentNode;
        }
    }
    public static var DocumentTypeNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_DocumentTypeNode;
        }
    }
    public static var DocumentFragmentNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_DocumentFragmentNode;
        }
    }
    public static var NotationNode : Self {
        get {
            return _q_CWindows_CData_CXml_CDom_CNodeType_NotationNode;
        }
    }
}
