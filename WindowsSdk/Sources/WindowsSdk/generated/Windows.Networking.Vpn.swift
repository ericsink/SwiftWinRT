// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.Vpn {
// type: Windows.Networking.Vpn.IVpnAppId
// interface type
open class IVpnAppId
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7b06a635, Data2: 0x5c58, Data3 : 0x41d9, Data4 : (0x94, 0xa7, 0xbf, 0xbc, 0xf1, 0xd8, 0xca, 0x54)) }
    // [IsSpecialName] Windows.Networking.Vpn.VpnAppIdType get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnAppIdType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Windows.Networking.Vpn.VpnAppIdType {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnAppIdType = _q_CWindows_CNetworking_CVpn_CVpnAppIdType_PackageFamilyName;
        try self._n_get_Type(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Type(Windows.Networking.Vpn.VpnAppIdType)
    private func _n_put_Type(_ value : _q_CWindows_CNetworking_CVpn_CVpnAppIdType) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Type(pThis, value))
        }
    }
    public func put_Type(value : Windows.Networking.Vpn.VpnAppIdType) throws -> Void {
        try self._n_put_Type(value);
    }
    // [IsSpecialName] System.String get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Value(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Value(System.String)
    private func _n_put_Value(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
        }
    }
    public func put_Value(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Value(__hstr_value.Raw());
        }
    }
    public var Type_ : Windows.Networking.Vpn.VpnAppIdType {
        get throws {
            return try get_Type();
        }
    }
    public var Value : Swift.String {
        get throws {
            return try get_Value();
        }
    }
} // IVpnAppId


// type: Windows.Networking.Vpn.IVpnAppIdFactory
// interface type
// ACTIVATION INTERFACE
open class IVpnAppIdFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x46adfd2a, Data2: 0x0aab, Data3 : 0x4fdb, Data4 : (0x82, 0x1d, 0xd3, 0xdd, 0xc9, 0x19, 0x78, 0x8b)) }
    // Windows.Networking.Vpn.VpnAppId Create(Windows.Networking.Vpn.VpnAppIdType, System.String)
    private func _n_Create(_ type : _q_CWindows_CNetworking_CVpn_CVpnAppIdType, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnAppIdFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, type, value, __presult))
        }
    }
    public func Create(type : Windows.Networking.Vpn.VpnAppIdType, value : Swift.String) throws -> Optional<Windows.Networking.Vpn.IVpnAppId> {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>> = nil;
        try self._n_Create(type, __hstr_value.Raw(), &__result);
        return Windows.Networking.Vpn.IVpnAppId(consuming: __result);
        }
    }
} // IVpnAppIdFactory


// type: Windows.Networking.Vpn.IVpnChannel
// interface type
open class IVpnChannel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4ac78d07, Data2: 0xd1a8, Data3 : 0x4303, Data4 : (0xa0, 0x91, 0xc8, 0xd2, 0xe0, 0x91, 0x5b, 0xc3)) }
    // void AssociateTransport(System.Object, System.Object)
    private func _n_AssociateTransport(_ mainOuterTunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ optionalOuterTunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AssociateTransport(pThis, mainOuterTunnelTransport, optionalOuterTunnelTransport))
        }
    }
    public func AssociateTransport(mainOuterTunnelTransport : Optional<WinRT.IInspectable>, optionalOuterTunnelTransport : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_AssociateTransport(RawPointer(mainOuterTunnelTransport), RawPointer(optionalOuterTunnelTransport));
    }
    // void Start(Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Networking.Vpn.VpnInterfaceId, Windows.Networking.Vpn.VpnRouteAssignment, Windows.Networking.Vpn.VpnNamespaceAssignment, System.UInt32, System.UInt32, bool, System.Object, System.Object)
    private func _n_Start(_ assignedClientIPv4list : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ assignedClientIPv6list : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ vpnInterfaceId : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnInterfaceId>>, _ routeScope : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment>>, _ namespaceScope : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment>>, _ mtuSize : UINT32, _ maxFrameSize : UINT32, _ optimizeForLowCostNetwork : boolean, _ mainOuterTunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ optionalOuterTunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis, assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId, routeScope, namespaceScope, mtuSize, maxFrameSize, optimizeForLowCostNetwork, mainOuterTunnelTransport, optionalOuterTunnelTransport))
        }
    }
    public func Start(assignedClientIPv4list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIPv6list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.IVpnInterfaceId>, routeScope : Optional<Windows.Networking.Vpn.IVpnRouteAssignment>, namespaceScope : Optional<Windows.Networking.Vpn.IVpnNamespaceAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, optimizeForLowCostNetwork : boolean, mainOuterTunnelTransport : Optional<WinRT.IInspectable>, optionalOuterTunnelTransport : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_Start(RawPointer(assignedClientIPv4list), RawPointer(assignedClientIPv6list), RawPointer(vpnInterfaceId), RawPointer(routeScope), RawPointer(namespaceScope), mtuSize, maxFrameSize, optimizeForLowCostNetwork, RawPointer(mainOuterTunnelTransport), RawPointer(optionalOuterTunnelTransport));
    }
    // void Stop()
    private func _n_Stop() throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
        }
    }
    public func Stop() throws -> Void {
        try self._n_Stop();
    }
    // Windows.Networking.Vpn.VpnPickedCredential RequestCredentials(Windows.Networking.Vpn.VpnCredentialType, bool, bool, Windows.Security.Cryptography.Certificates.Certificate)
    private func _n_RequestCredentials(_ credType : _q_CWindows_CNetworking_CVpn_CVpnCredentialType, _ isRetry : boolean, _ isSingleSignOnCredential : boolean, _ certificate : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPickedCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestCredentials(pThis, credType, isRetry, isSingleSignOnCredential, certificate, __presult))
        }
    }
    public func RequestCredentials(credType : Windows.Networking.Vpn.VpnCredentialType, isRetry : boolean, isSingleSignOnCredential : boolean, certificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate>) throws -> Optional<Windows.Networking.Vpn.IVpnPickedCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPickedCredential>> = nil;
        try self._n_RequestCredentials(credType, isRetry, isSingleSignOnCredential, RawPointer(certificate), &__result);
        return Windows.Networking.Vpn.IVpnPickedCredential(consuming: __result);
    }
    // void RequestVpnPacketBuffer(Windows.Networking.Vpn.VpnDataPathType, ref Windows.Networking.Vpn.VpnPacketBuffer)
    private func _n_RequestVpnPacketBuffer(_ type : _q_CWindows_CNetworking_CVpn_CVpnDataPathType, _ vpnPacketBuffer : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestVpnPacketBuffer(pThis, type, vpnPacketBuffer))
        }
    }
    public func RequestVpnPacketBuffer(type : Windows.Networking.Vpn.VpnDataPathType, vpnPacketBuffer : inout Optional<Windows.Networking.Vpn.IVpnPacketBuffer>) throws -> Void {
            var _tmp_out_vpnPacketBuffer: Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>> = nil;
        try self._n_RequestVpnPacketBuffer(type, &_tmp_out_vpnPacketBuffer);
            vpnPacketBuffer = Windows.Networking.Vpn.IVpnPacketBuffer(consuming: _tmp_out_vpnPacketBuffer);
    }
    // void LogDiagnosticMessage(System.String)
    private func _n_LogDiagnosticMessage(_ message : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LogDiagnosticMessage(pThis, message))
        }
    }
    public func LogDiagnosticMessage(message : Swift.String) throws -> Void {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        try self._n_LogDiagnosticMessage(__hstr_message.Raw());
        }
    }
    // [IsSpecialName] System.UInt32 get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Id(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnChannelConfiguration get_Configuration()
    private func _n_get_Configuration(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Configuration(pThis, __presult))
        }
    }
    public func get_Configuration() throws -> Optional<Windows.Networking.Vpn.IVpnChannelConfiguration> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration>> = nil;
        try self._n_get_Configuration(&__result);
        return Windows.Networking.Vpn.IVpnChannelConfiguration(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ActivityChange(Windows.Foundation.TypedEventHandler<Windows.Networking.Vpn.VpnChannel,Windows.Networking.Vpn.VpnChannelActivityEventArgs>)
    private func _n_add_ActivityChange(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ActivityChange(pThis, handler, __presult))
        }
    }
    public func add_ActivityChange(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ActivityChange(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ActivityChange(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ActivityChange(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ActivityChange(pThis, token))
        }
    }
    public func remove_ActivityChange(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ActivityChange(token);
    }
    // [IsSpecialName] void put_PlugInContext(System.Object)
    private func _n_put_PlugInContext(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlugInContext(pThis, value))
        }
    }
    public func put_PlugInContext(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_PlugInContext(RawPointer(value));
    }
    // [IsSpecialName] System.Object get_PlugInContext()
    private func _n_get_PlugInContext(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlugInContext(pThis, __presult))
        }
    }
    public func get_PlugInContext() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_PlugInContext(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnSystemHealth get_SystemHealth()
    private func _n_get_SystemHealth(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnSystemHealth>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemHealth(pThis, __presult))
        }
    }
    public func get_SystemHealth() throws -> Optional<Windows.Networking.Vpn.IVpnSystemHealth> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnSystemHealth>> = nil;
        try self._n_get_SystemHealth(&__result);
        return Windows.Networking.Vpn.IVpnSystemHealth(consuming: __result);
    }
    // void RequestCustomPrompt(Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.IVpnCustomPrompt>)
    private func _n_RequestCustomPrompt(_ customPrompt : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestCustomPrompt(pThis, customPrompt))
        }
    }
    public func RequestCustomPrompt(customPrompt : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt>) throws -> Void {
        try self._n_RequestCustomPrompt(RawPointer(customPrompt));
    }
    // void SetErrorMessage(System.String)
    private func _n_SetErrorMessage(_ message : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetErrorMessage(pThis, message))
        }
    }
    public func SetErrorMessage(message : Swift.String) throws -> Void {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        try self._n_SetErrorMessage(__hstr_message.Raw());
        }
    }
    // void SetAllowedSslTlsVersions(System.Object, bool)
    private func _n_SetAllowedSslTlsVersions(_ tunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ useTls12 : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAllowedSslTlsVersions(pThis, tunnelTransport, useTls12))
        }
    }
    public func SetAllowedSslTlsVersions(tunnelTransport : Optional<WinRT.IInspectable>, useTls12 : boolean) throws -> Void {
        try self._n_SetAllowedSslTlsVersions(RawPointer(tunnelTransport), useTls12);
    }
    public var Configuration : Optional<Windows.Networking.Vpn.IVpnChannelConfiguration> {
        get throws {
            return try get_Configuration();
        }
    }
    public var Id : Swift.UInt32 {
        get throws {
            return try get_Id();
        }
    }
    public var PlugInContext : Optional<WinRT.IInspectable> {
        get throws {
            return try get_PlugInContext();
        }
    }
    public var SystemHealth : Optional<Windows.Networking.Vpn.IVpnSystemHealth> {
        get throws {
            return try get_SystemHealth();
        }
    }
} // IVpnChannel


// type: Windows.Networking.Vpn.IVpnChannel2
// interface type
open class IVpnChannel2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2255d165, Data2: 0x993b, Data3 : 0x4629, Data4 : (0xad, 0x60, 0xf1, 0xc3, 0xf3, 0x53, 0x7f, 0x50)) }
    // void StartWithMainTransport(Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Networking.Vpn.VpnInterfaceId, Windows.Networking.Vpn.VpnRouteAssignment, Windows.Networking.Vpn.VpnDomainNameAssignment, System.UInt32, System.UInt32, bool, System.Object)
    private func _n_StartWithMainTransport(_ assignedClientIPv4list : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ assignedClientIPv6list : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ vpnInterfaceId : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnInterfaceId>>, _ assignedRoutes : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment>>, _ assignedDomainName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment>>, _ mtuSize : UINT32, _ maxFrameSize : UINT32, _ Reserved : boolean, _ mainOuterTunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartWithMainTransport(pThis, assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId, assignedRoutes, assignedDomainName, mtuSize, maxFrameSize, Reserved, mainOuterTunnelTransport))
        }
    }
    public func StartWithMainTransport(assignedClientIPv4list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIPv6list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.IVpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.IVpnRouteAssignment>, assignedDomainName : Optional<Windows.Networking.Vpn.IVpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, Reserved : boolean, mainOuterTunnelTransport : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_StartWithMainTransport(RawPointer(assignedClientIPv4list), RawPointer(assignedClientIPv6list), RawPointer(vpnInterfaceId), RawPointer(assignedRoutes), RawPointer(assignedDomainName), mtuSize, maxFrameSize, Reserved, RawPointer(mainOuterTunnelTransport));
    }
    // void StartExistingTransports(Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Networking.Vpn.VpnInterfaceId, Windows.Networking.Vpn.VpnRouteAssignment, Windows.Networking.Vpn.VpnDomainNameAssignment, System.UInt32, System.UInt32, bool)
    private func _n_StartExistingTransports(_ assignedClientIPv4list : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ assignedClientIPv6list : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ vpnInterfaceId : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnInterfaceId>>, _ assignedRoutes : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment>>, _ assignedDomainName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment>>, _ mtuSize : UINT32, _ maxFrameSize : UINT32, _ Reserved : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartExistingTransports(pThis, assignedClientIPv4list, assignedClientIPv6list, vpnInterfaceId, assignedRoutes, assignedDomainName, mtuSize, maxFrameSize, Reserved))
        }
    }
    public func StartExistingTransports(assignedClientIPv4list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIPv6list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.IVpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.IVpnRouteAssignment>, assignedDomainName : Optional<Windows.Networking.Vpn.IVpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, Reserved : boolean) throws -> Void {
        try self._n_StartExistingTransports(RawPointer(assignedClientIPv4list), RawPointer(assignedClientIPv6list), RawPointer(vpnInterfaceId), RawPointer(assignedRoutes), RawPointer(assignedDomainName), mtuSize, maxFrameSize, Reserved);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ActivityStateChange(Windows.Foundation.TypedEventHandler<Windows.Networking.Vpn.VpnChannel,Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs>)
    private func _n_add_ActivityStateChange(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ActivityStateChange(pThis, handler, __presult))
        }
    }
    public func add_ActivityStateChange(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ActivityStateChange(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ActivityStateChange(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ActivityStateChange(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ActivityStateChange(pThis, token))
        }
    }
    public func remove_ActivityStateChange(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ActivityStateChange(token);
    }
    // Windows.Networking.Vpn.VpnPacketBuffer GetVpnSendPacketBuffer()
    private func _n_GetVpnSendPacketBuffer(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVpnSendPacketBuffer(pThis, __presult))
        }
    }
    public func GetVpnSendPacketBuffer() throws -> Optional<Windows.Networking.Vpn.IVpnPacketBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>> = nil;
        try self._n_GetVpnSendPacketBuffer(&__result);
        return Windows.Networking.Vpn.IVpnPacketBuffer(consuming: __result);
    }
    // Windows.Networking.Vpn.VpnPacketBuffer GetVpnReceivePacketBuffer()
    private func _n_GetVpnReceivePacketBuffer(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVpnReceivePacketBuffer(pThis, __presult))
        }
    }
    public func GetVpnReceivePacketBuffer() throws -> Optional<Windows.Networking.Vpn.IVpnPacketBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>> = nil;
        try self._n_GetVpnReceivePacketBuffer(&__result);
        return Windows.Networking.Vpn.IVpnPacketBuffer(consuming: __result);
    }
    // Windows.Foundation.IAsyncAction RequestCustomPromptAsync(Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.IVpnCustomPromptElement>)
    private func _n_RequestCustomPromptAsync(_ customPromptElement : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestCustomPromptAsync(pThis, customPromptElement, __presult))
        }
    }
    public func RequestCustomPromptAsync(customPromptElement : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_RequestCustomPromptAsync(RawPointer(customPromptElement), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func RequestCustomPrompt(customPromptElement : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RequestCustomPromptAsync(customPromptElement: customPromptElement)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnCredential> RequestCredentialsAsync(Windows.Networking.Vpn.VpnCredentialType, System.UInt32, Windows.Security.Cryptography.Certificates.Certificate)
    private func _n_RequestCredentialsWithCertificateAsync(_ credType : _q_CWindows_CNetworking_CVpn_CVpnCredentialType, _ credOptions : UINT32, _ certificate : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestCredentialsWithCertificateAsync(pThis, credType, credOptions, certificate, __presult))
        }
    }
    public func RequestCredentialsWithCertificateAsync(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32, certificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>> = nil;
        try self._n_RequestCredentialsWithCertificateAsync(credType, credOptions, RawPointer(certificate), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential(consuming: __result);
    }
    public func RequestCredentialsWithCertificate(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32, certificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate>) async throws -> Optional<Windows.Networking.Vpn.IVpnCredential> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RequestCredentialsWithCertificateAsync(credType: credType, credOptions: credOptions, certificate: certificate)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnCredential> RequestCredentialsAsync(Windows.Networking.Vpn.VpnCredentialType, System.UInt32)
    private func _n_RequestCredentialsWithOptionsAsync(_ credType : _q_CWindows_CNetworking_CVpn_CVpnCredentialType, _ credOptions : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestCredentialsWithOptionsAsync(pThis, credType, credOptions, __presult))
        }
    }
    public func RequestCredentialsWithOptionsAsync(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>> = nil;
        try self._n_RequestCredentialsWithOptionsAsync(credType, credOptions, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential(consuming: __result);
    }
    public func RequestCredentialsWithOptions(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32) async throws -> Optional<Windows.Networking.Vpn.IVpnCredential> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RequestCredentialsWithOptionsAsync(credType: credType, credOptions: credOptions)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnCredential> RequestCredentialsAsync(Windows.Networking.Vpn.VpnCredentialType)
    private func _n_RequestCredentialsSimpleAsync(_ credType : _q_CWindows_CNetworking_CVpn_CVpnCredentialType, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RequestCredentialsSimpleAsync(pThis, credType, __presult))
        }
    }
    public func RequestCredentialsSimpleAsync(credType : Windows.Networking.Vpn.VpnCredentialType) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>> = nil;
        try self._n_RequestCredentialsSimpleAsync(credType, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential(consuming: __result);
    }
    public func RequestCredentialsSimple(credType : Windows.Networking.Vpn.VpnCredentialType) async throws -> Optional<Windows.Networking.Vpn.IVpnCredential> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RequestCredentialsSimpleAsync(credType: credType)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void TerminateConnection(System.String)
    private func _n_TerminateConnection(_ message : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TerminateConnection(pThis, message))
        }
    }
    public func TerminateConnection(message : Swift.String) throws -> Void {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        try self._n_TerminateConnection(__hstr_message.Raw());
        }
    }
    // void StartWithTrafficFilter(Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName>, Windows.Networking.Vpn.VpnInterfaceId, Windows.Networking.Vpn.VpnRouteAssignment, Windows.Networking.Vpn.VpnDomainNameAssignment, System.UInt32, System.UInt32, bool, System.Object, System.Object, Windows.Networking.Vpn.VpnTrafficFilterAssignment)
    private func _n_StartWithTrafficFilter(_ assignedClientIpv4List : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ assignedClientIpv6List : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>, _ vpnInterfaceId : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnInterfaceId>>, _ assignedRoutes : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment>>, _ assignedNamespace : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment>>, _ mtuSize : UINT32, _ maxFrameSize : UINT32, _ reserved : boolean, _ mainOuterTunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ optionalOuterTunnelTransport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ assignedTrafficFilters : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartWithTrafficFilter(pThis, assignedClientIpv4List, assignedClientIpv6List, vpnInterfaceId, assignedRoutes, assignedNamespace, mtuSize, maxFrameSize, reserved, mainOuterTunnelTransport, optionalOuterTunnelTransport, assignedTrafficFilters))
        }
    }
    public func StartWithTrafficFilter(assignedClientIpv4List : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIpv6List : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.IVpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.IVpnRouteAssignment>, assignedNamespace : Optional<Windows.Networking.Vpn.IVpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, reserved : boolean, mainOuterTunnelTransport : Optional<WinRT.IInspectable>, optionalOuterTunnelTransport : Optional<WinRT.IInspectable>, assignedTrafficFilters : Optional<Windows.Networking.Vpn.IVpnTrafficFilterAssignment>) throws -> Void {
        try self._n_StartWithTrafficFilter(RawPointer(assignedClientIpv4List), RawPointer(assignedClientIpv6List), RawPointer(vpnInterfaceId), RawPointer(assignedRoutes), RawPointer(assignedNamespace), mtuSize, maxFrameSize, reserved, RawPointer(mainOuterTunnelTransport), RawPointer(optionalOuterTunnelTransport), RawPointer(assignedTrafficFilters));
    }
} // IVpnChannel2


// type: Windows.Networking.Vpn.IVpnChannel4
// interface type
open class IVpnChannel4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd7266ede, Data2: 0x2937, Data3 : 0x419d, Data4 : (0x95, 0x70, 0x48, 0x6a, 0xeb, 0xb8, 0x18, 0x03)) }
    // void AddAndAssociateTransport(System.Object, System.Object)
    private func _n_AddAndAssociateTransport(_ transport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ context : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddAndAssociateTransport(pThis, transport, context))
        }
    }
    public func AddAndAssociateTransport(transport : Optional<WinRT.IInspectable>, context : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_AddAndAssociateTransport(RawPointer(transport), RawPointer(context));
    }
    // void StartWithTrafficFilter(Windows.Foundation.Collections.IIterable<Windows.Networking.HostName>, Windows.Foundation.Collections.IIterable<Windows.Networking.HostName>, Windows.Networking.Vpn.VpnInterfaceId, Windows.Networking.Vpn.VpnRouteAssignment, Windows.Networking.Vpn.VpnDomainNameAssignment, System.UInt32, System.UInt32, bool, Windows.Foundation.Collections.IIterable<System.Object>, Windows.Networking.Vpn.VpnTrafficFilterAssignment)
    private func _n_StartWithMultipleTransports(_ assignedClientIpv4Addresses : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CHostName>>, _ assignedClientIpv6Addresses : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CHostName>>, _ vpninterfaceId : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnInterfaceId>>, _ assignedRoutes : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment>>, _ assignedNamespace : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment>>, _ mtuSize : UINT32, _ maxFrameSize : UINT32, _ reserved : boolean, _ transports : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_IInspectable>>, _ assignedTrafficFilters : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartWithMultipleTransports(pThis, assignedClientIpv4Addresses, assignedClientIpv6Addresses, vpninterfaceId, assignedRoutes, assignedNamespace, mtuSize, maxFrameSize, reserved, transports, assignedTrafficFilters))
        }
    }
    public func StartWithMultipleTransports(assignedClientIpv4Addresses : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>, assignedClientIpv6Addresses : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>, vpninterfaceId : Optional<Windows.Networking.Vpn.IVpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.IVpnRouteAssignment>, assignedNamespace : Optional<Windows.Networking.Vpn.IVpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, reserved : boolean, transports : Optional<ClosedGenerics.IIterable_1_IInspectable>, assignedTrafficFilters : Optional<Windows.Networking.Vpn.IVpnTrafficFilterAssignment>) throws -> Void {
        try self._n_StartWithMultipleTransports(RawPointer(assignedClientIpv4Addresses), RawPointer(assignedClientIpv6Addresses), RawPointer(vpninterfaceId), RawPointer(assignedRoutes), RawPointer(assignedNamespace), mtuSize, maxFrameSize, reserved, RawPointer(transports), RawPointer(assignedTrafficFilters));
    }
    // void ReplaceAndAssociateTransport(System.Object, System.Object)
    private func _n_ReplaceAndAssociateTransport(_ transport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ context : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAndAssociateTransport(pThis, transport, context))
        }
    }
    public func ReplaceAndAssociateTransport(transport : Optional<WinRT.IInspectable>, context : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_ReplaceAndAssociateTransport(RawPointer(transport), RawPointer(context));
    }
    // void StartReconnectingTransport(System.Object, System.Object)
    private func _n_StartReconnectingTransport(_ transport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ context : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartReconnectingTransport(pThis, transport, context))
        }
    }
    public func StartReconnectingTransport(transport : Optional<WinRT.IInspectable>, context : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_StartReconnectingTransport(RawPointer(transport), RawPointer(context));
    }
    // Windows.Networking.Sockets.ControlChannelTriggerStatus GetSlotTypeForTransportContext(System.Object)
    private func _n_GetSlotTypeForTransportContext(_ context : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSlotTypeForTransportContext(pThis, context, __presult))
        }
    }
    public func GetSlotTypeForTransportContext(context : Optional<WinRT.IInspectable>) throws -> Windows.Networking.Sockets.ControlChannelTriggerStatus {
        var __result : _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus = _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_HardwareSlotRequested;
        try self._n_GetSlotTypeForTransportContext(RawPointer(context), &__result);
        return __result;
    }
    // [IsSpecialName] System.Object get_CurrentRequestTransportContext()
    private func _n_get_CurrentRequestTransportContext(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentRequestTransportContext(pThis, __presult))
        }
    }
    public func get_CurrentRequestTransportContext() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_CurrentRequestTransportContext(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    public var CurrentRequestTransportContext : Optional<WinRT.IInspectable> {
        get throws {
            return try get_CurrentRequestTransportContext();
        }
    }
} // IVpnChannel4


// type: Windows.Networking.Vpn.IVpnChannel5
// interface type
open class IVpnChannel5
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xde7a0992, Data2: 0x8384, Data3 : 0x4fbc, Data4 : (0x88, 0x2c, 0x1f, 0xd2, 0x31, 0x24, 0xcd, 0x3b)) }
    // void AppendVpnReceivePacketBuffer(Windows.Networking.Vpn.VpnPacketBuffer)
    private func _n_AppendVpnReceivePacketBuffer(_ decapsulatedPacketBuffer : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AppendVpnReceivePacketBuffer(pThis, decapsulatedPacketBuffer))
        }
    }
    public func AppendVpnReceivePacketBuffer(decapsulatedPacketBuffer : Optional<Windows.Networking.Vpn.IVpnPacketBuffer>) throws -> Void {
        try self._n_AppendVpnReceivePacketBuffer(RawPointer(decapsulatedPacketBuffer));
    }
    // void AppendVpnSendPacketBuffer(Windows.Networking.Vpn.VpnPacketBuffer)
    private func _n_AppendVpnSendPacketBuffer(_ encapsulatedPacketBuffer : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AppendVpnSendPacketBuffer(pThis, encapsulatedPacketBuffer))
        }
    }
    public func AppendVpnSendPacketBuffer(encapsulatedPacketBuffer : Optional<Windows.Networking.Vpn.IVpnPacketBuffer>) throws -> Void {
        try self._n_AppendVpnSendPacketBuffer(RawPointer(encapsulatedPacketBuffer));
    }
    // void FlushVpnReceivePacketBuffers()
    private func _n_FlushVpnReceivePacketBuffers() throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FlushVpnReceivePacketBuffers(pThis))
        }
    }
    public func FlushVpnReceivePacketBuffers() throws -> Void {
        try self._n_FlushVpnReceivePacketBuffers();
    }
    // void FlushVpnSendPacketBuffers()
    private func _n_FlushVpnSendPacketBuffers() throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FlushVpnSendPacketBuffers(pThis))
        }
    }
    public func FlushVpnSendPacketBuffers() throws -> Void {
        try self._n_FlushVpnSendPacketBuffers();
    }
} // IVpnChannel5


// type: Windows.Networking.Vpn.IVpnChannel6
// interface type
open class IVpnChannel6
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x55843696, Data2: 0xbd63, Data3 : 0x49c5, Data4 : (0xab, 0xca, 0x5d, 0xa7, 0x78, 0x85, 0x55, 0x1a)) }
    // Windows.Foundation.Collections.ValueSet ActivateForeground(System.String, Windows.Foundation.Collections.ValueSet)
    private func _n_ActivateForeground(_ packageRelativeAppId : Optional<HSTRING>, _ sharedContext : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannel6.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ActivateForeground(pThis, packageRelativeAppId, sharedContext, __presult))
        }
    }
    public func ActivateForeground(packageRelativeAppId : Swift.String, sharedContext : Optional<Windows.Foundation.Collections.IPropertySet>) throws -> Optional<Windows.Foundation.Collections.IPropertySet> {
        let __hstr_packageRelativeAppId = try HString(packageRelativeAppId);
        return try withExtendedLifetime(__hstr_packageRelativeAppId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>> = nil;
        try self._n_ActivateForeground(__hstr_packageRelativeAppId.Raw(), RawPointer(sharedContext), &__result);
        return Windows.Foundation.Collections.IPropertySet(consuming: __result);
        }
    }
} // IVpnChannel6


// type: Windows.Networking.Vpn.IVpnChannelActivityEventArgs
// interface type
open class IVpnChannelActivityEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa36c88f2, Data2: 0xafdc, Data3 : 0x4775, Data4 : (0x85, 0x5d, 0xd4, 0xac, 0x0a, 0x35, 0xfc, 0x55)) }
    // [IsSpecialName] Windows.Networking.Vpn.VpnChannelActivityEventType get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Windows.Networking.Vpn.VpnChannelActivityEventType {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType = _q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType_Idle;
        try self._n_get_Type(&__result);
        return __result;
    }
    public var Type_ : Windows.Networking.Vpn.VpnChannelActivityEventType {
        get throws {
            return try get_Type();
        }
    }
} // IVpnChannelActivityEventArgs


// type: Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs
// interface type
open class IVpnChannelActivityStateChangedArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3d750565, Data2: 0xfdc0, Data3 : 0x4bbe, Data4 : (0xa2, 0x3b, 0x45, 0xff, 0xfc, 0x6d, 0x97, 0xa1)) }
    // [IsSpecialName] Windows.Networking.Vpn.VpnChannelActivityEventType get_ActivityState()
    private func _n_get_ActivityState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActivityState(pThis, __presult))
        }
    }
    public func get_ActivityState() throws -> Windows.Networking.Vpn.VpnChannelActivityEventType {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType = _q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType_Idle;
        try self._n_get_ActivityState(&__result);
        return __result;
    }
    public var ActivityState : Windows.Networking.Vpn.VpnChannelActivityEventType {
        get throws {
            return try get_ActivityState();
        }
    }
} // IVpnChannelActivityStateChangedArgs


// type: Windows.Networking.Vpn.IVpnChannelConfiguration
// interface type
open class IVpnChannelConfiguration
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0e2ddca2, Data2: 0x2012, Data3 : 0x4fe4, Data4 : (0xb1, 0x79, 0x8c, 0x65, 0x2c, 0x6d, 0x10, 0x7e)) }
    // [IsSpecialName] System.String get_ServerServiceName()
    private func _n_get_ServerServiceName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerServiceName(pThis, __presult))
        }
    }
    public func get_ServerServiceName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ServerServiceName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName> get_ServerHostNameList()
    private func _n_get_ServerHostNameList(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerHostNameList(pThis, __presult))
        }
    }
    public func get_ServerHostNameList() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>> = nil;
        try self._n_get_ServerHostNameList(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_CustomField()
    private func _n_get_CustomField(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomField(pThis, __presult))
        }
    }
    public func get_CustomField() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CustomField(&__result);
        return Swift.String(from: __result);
    }
    public var CustomField : Swift.String {
        get throws {
            return try get_CustomField();
        }
    }
    public var ServerHostNameList : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        get throws {
            return try get_ServerHostNameList();
        }
    }
    public var ServerServiceName : Swift.String {
        get throws {
            return try get_ServerServiceName();
        }
    }
} // IVpnChannelConfiguration


// type: Windows.Networking.Vpn.IVpnChannelConfiguration2
// interface type
open class IVpnChannelConfiguration2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf30b574c, Data2: 0x7824, Data3 : 0x471c, Data4 : (0xa1, 0x18, 0x63, 0xdb, 0xc9, 0x3a, 0xe4, 0xc7)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Uri> get_ServerUris()
    private func _n_get_ServerUris(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CFoundation_CUri>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannelConfiguration2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerUris(pThis, __presult))
        }
    }
    public func get_ServerUris() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CFoundation_CUri>> = nil;
        try self._n_get_ServerUris(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri(consuming: __result);
    }
    public var ServerUris : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        get throws {
            return try get_ServerUris();
        }
    }
} // IVpnChannelConfiguration2


// type: Windows.Networking.Vpn.IVpnChannelStatics
// interface type
open class IVpnChannelStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x88eb062d, Data2: 0xe818, Data3 : 0x4ffd, Data4 : (0x98, 0xa6, 0x36, 0x3e, 0x37, 0x36, 0xc9, 0x5d)) }
    // void ProcessEventAsync(System.Object, System.Object)
    private func _n_ProcessEventAsync(_ thirdPartyPlugIn : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ event : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnChannelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessEventAsync(pThis, thirdPartyPlugIn, event))
        }
    }
    public func ProcessEventAsync(thirdPartyPlugIn : Optional<WinRT.IInspectable>, event : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_ProcessEventAsync(RawPointer(thirdPartyPlugIn), RawPointer(event));
    }
} // IVpnChannelStatics


// type: Windows.Networking.Vpn.IVpnCredential
// interface type
open class IVpnCredential
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb7e78af3, Data2: 0xa46d, Data3 : 0x404b, Data4 : (0x87, 0x29, 0x18, 0x32, 0x52, 0x28, 0x53, 0xac)) }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_PasskeyCredential()
    private func _n_get_PasskeyCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasskeyCredential(pThis, __presult))
        }
    }
    public func get_PasskeyCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_PasskeyCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] Windows.Security.Cryptography.Certificates.Certificate get_CertificateCredential()
    private func _n_get_CertificateCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CertificateCredential(pThis, __presult))
        }
    }
    public func get_CertificateCredential() throws -> Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>> = nil;
        try self._n_get_CertificateCredential(&__result);
        return Windows.Security.Cryptography.Certificates.ICertificate(consuming: __result);
    }
    // [IsSpecialName] System.String get_AdditionalPin()
    private func _n_get_AdditionalPin(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdditionalPin(pThis, __presult))
        }
    }
    public func get_AdditionalPin() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AdditionalPin(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_OldPasswordCredential()
    private func _n_get_OldPasswordCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldPasswordCredential(pThis, __presult))
        }
    }
    public func get_OldPasswordCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_OldPasswordCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    public var AdditionalPin : Swift.String {
        get throws {
            return try get_AdditionalPin();
        }
    }
    public var CertificateCredential : Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        get throws {
            return try get_CertificateCredential();
        }
    }
    public var OldPasswordCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_OldPasswordCredential();
        }
    }
    public var PasskeyCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_PasskeyCredential();
        }
    }
} // IVpnCredential


// type: Windows.Networking.Vpn.IVpnCustomCheckBox
// interface type
open class IVpnCustomCheckBox
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43878753, Data2: 0x03c5, Data3 : 0x4e61, Data4 : (0x93, 0xd7, 0xa9, 0x57, 0x71, 0x4c, 0x42, 0x82)) }
    // [IsSpecialName] void put_InitialCheckState(bool)
    private func _n_put_InitialCheckState(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InitialCheckState(pThis, value))
        }
    }
    public func put_InitialCheckState(value : boolean) throws -> Void {
        try self._n_put_InitialCheckState(value);
    }
    // [IsSpecialName] bool get_InitialCheckState()
    private func _n_get_InitialCheckState(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InitialCheckState(pThis, __presult))
        }
    }
    public func get_InitialCheckState() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_InitialCheckState(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Checked()
    private func _n_get_Checked(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomCheckBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Checked(pThis, __presult))
        }
    }
    public func get_Checked() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Checked(&__result);
        return __result;
    }
    public var Checked : boolean {
        get throws {
            return try get_Checked();
        }
    }
    public var InitialCheckState : boolean {
        get throws {
            return try get_InitialCheckState();
        }
    }
} // IVpnCustomCheckBox


// type: Windows.Networking.Vpn.IVpnCustomComboBox
// interface type
open class IVpnCustomComboBox
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9a24158e, Data2: 0xdba1, Data3 : 0x4c6f, Data4 : (0x82, 0x70, 0xdc, 0xf3, 0xc9, 0x76, 0x1c, 0x4c)) }
    // [IsSpecialName] void put_OptionsText(Windows.Foundation.Collections.IVectorView<System.String>)
    private func _n_put_OptionsText(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomComboBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OptionsText(pThis, value))
        }
    }
    public func put_OptionsText(value : Optional<ClosedGenerics.IVectorView_1_HSTRING>) throws -> Void {
        try self._n_put_OptionsText(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.String> get_OptionsText()
    private func _n_get_OptionsText(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomComboBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OptionsText(pThis, __presult))
        }
    }
    public func get_OptionsText() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_get_OptionsText(&__result);
        return ClosedGenerics.IVectorView_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Selected()
    private func _n_get_Selected(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomComboBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Selected(pThis, __presult))
        }
    }
    public func get_Selected() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Selected(&__result);
        return __result;
    }
    public var OptionsText : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
            return try get_OptionsText();
        }
    }
    public var Selected : Swift.UInt32 {
        get throws {
            return try get_Selected();
        }
    }
} // IVpnCustomComboBox


// type: Windows.Networking.Vpn.IVpnCustomEditBox
// interface type
open class IVpnCustomEditBox
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3002d9a0, Data2: 0xcfbf, Data3 : 0x4c0b, Data4 : (0x8f, 0x3c, 0x66, 0xf5, 0x03, 0xc2, 0x0b, 0x39)) }
    // [IsSpecialName] void put_DefaultText(System.String)
    private func _n_put_DefaultText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomEditBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultText(pThis, value))
        }
    }
    public func put_DefaultText(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DefaultText(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_DefaultText()
    private func _n_get_DefaultText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomEditBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultText(pThis, __presult))
        }
    }
    public func get_DefaultText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DefaultText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_NoEcho(bool)
    private func _n_put_NoEcho(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomEditBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NoEcho(pThis, value))
        }
    }
    public func put_NoEcho(value : boolean) throws -> Void {
        try self._n_put_NoEcho(value);
    }
    // [IsSpecialName] bool get_NoEcho()
    private func _n_get_NoEcho(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomEditBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NoEcho(pThis, __presult))
        }
    }
    public func get_NoEcho() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_NoEcho(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomEditBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    public var DefaultText : Swift.String {
        get throws {
            return try get_DefaultText();
        }
    }
    public var NoEcho : boolean {
        get throws {
            return try get_NoEcho();
        }
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
} // IVpnCustomEditBox


// type: Windows.Networking.Vpn.IVpnCustomErrorBox
// interface type
open class IVpnCustomErrorBox
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9ec4efb2, Data2: 0xc942, Data3 : 0x42af, Data4 : (0xb2, 0x23, 0x58, 0x8b, 0x48, 0x32, 0x87, 0x21)) }
} // IVpnCustomErrorBox


// type: Windows.Networking.Vpn.IVpnCustomPrompt
// interface type
open class IVpnCustomPrompt
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9b2ebe7b, Data2: 0x87d5, Data3 : 0x433c, Data4 : (0xb4, 0xf6, 0xee, 0xe6, 0xaa, 0x68, 0xa2, 0x44)) }
    // [IsSpecialName] void put_Label(System.String)
    private func _n_put_Label(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Label(pThis, value))
        }
    }
    public func put_Label(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Label(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Label()
    private func _n_get_Label(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Label(pThis, __presult))
        }
    }
    public func get_Label() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Label(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Compulsory(bool)
    private func _n_put_Compulsory(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Compulsory(pThis, value))
        }
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        try self._n_put_Compulsory(value);
    }
    // [IsSpecialName] bool get_Compulsory()
    private func _n_get_Compulsory(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Compulsory(pThis, __presult))
        }
    }
    public func get_Compulsory() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Compulsory(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Bordered(bool)
    private func _n_put_Bordered(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bordered(pThis, value))
        }
    }
    public func put_Bordered(value : boolean) throws -> Void {
        try self._n_put_Bordered(value);
    }
    // [IsSpecialName] bool get_Bordered()
    private func _n_get_Bordered(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bordered(pThis, __presult))
        }
    }
    public func get_Bordered() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Bordered(&__result);
        return __result;
    }
    public var Bordered : boolean {
        get throws {
            return try get_Bordered();
        }
    }
    public var Compulsory : boolean {
        get throws {
            return try get_Compulsory();
        }
    }
    public var Label : Swift.String {
        get throws {
            return try get_Label();
        }
    }
} // IVpnCustomPrompt


// type: Windows.Networking.Vpn.IVpnCustomPromptBooleanInput
// interface type
open class IVpnCustomPromptBooleanInput
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc4c9a69e, Data2: 0xff47, Data3 : 0x4527, Data4 : (0x9f, 0x27, 0xa4, 0x92, 0x92, 0x01, 0x99, 0x79)) }
    // [IsSpecialName] void put_InitialValue(bool)
    private func _n_put_InitialValue(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InitialValue(pThis, value))
        }
    }
    public func put_InitialValue(value : boolean) throws -> Void {
        try self._n_put_InitialValue(value);
    }
    // [IsSpecialName] bool get_InitialValue()
    private func _n_get_InitialValue(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InitialValue(pThis, __presult))
        }
    }
    public func get_InitialValue() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_InitialValue(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptBooleanInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Value(&__result);
        return __result;
    }
    public var InitialValue : boolean {
        get throws {
            return try get_InitialValue();
        }
    }
    public var Value : boolean {
        get throws {
            return try get_Value();
        }
    }
} // IVpnCustomPromptBooleanInput


// type: Windows.Networking.Vpn.IVpnCustomPromptElement
// interface type
open class IVpnCustomPromptElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x73bd5638, Data2: 0x6f04, Data3 : 0x404d, Data4 : (0x93, 0xdd, 0x50, 0xa4, 0x49, 0x24, 0xa3, 0x8b)) }
    // [IsSpecialName] void put_DisplayName(System.String)
    private func _n_put_DisplayName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayName(pThis, value))
        }
    }
    public func put_DisplayName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DisplayName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_DisplayName()
    private func _n_get_DisplayName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, __presult))
        }
    }
    public func get_DisplayName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Compulsory(bool)
    private func _n_put_Compulsory(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Compulsory(pThis, value))
        }
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        try self._n_put_Compulsory(value);
    }
    // [IsSpecialName] bool get_Compulsory()
    private func _n_get_Compulsory(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Compulsory(pThis, __presult))
        }
    }
    public func get_Compulsory() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Compulsory(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Emphasized(bool)
    private func _n_put_Emphasized(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Emphasized(pThis, value))
        }
    }
    public func put_Emphasized(value : boolean) throws -> Void {
        try self._n_put_Emphasized(value);
    }
    // [IsSpecialName] bool get_Emphasized()
    private func _n_get_Emphasized(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Emphasized(pThis, __presult))
        }
    }
    public func get_Emphasized() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Emphasized(&__result);
        return __result;
    }
    public var Compulsory : boolean {
        get throws {
            return try get_Compulsory();
        }
    }
    public var DisplayName : Swift.String {
        get throws {
            return try get_DisplayName();
        }
    }
    public var Emphasized : boolean {
        get throws {
            return try get_Emphasized();
        }
    }
} // IVpnCustomPromptElement


// type: Windows.Networking.Vpn.IVpnCustomPromptOptionSelector
// interface type
open class IVpnCustomPromptOptionSelector
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3b8f34d9, Data2: 0x8ec1, Data3 : 0x4e95, Data4 : (0x9a, 0x4e, 0x7b, 0xa6, 0x4d, 0x38, 0xf3, 0x30)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_Options()
    private func _n_get_Options(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, __presult))
        }
    }
    public func get_Options() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_Options(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_SelectedIndex()
    private func _n_get_SelectedIndex(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptOptionSelector.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedIndex(pThis, __presult))
        }
    }
    public func get_SelectedIndex() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_SelectedIndex(&__result);
        return __result;
    }
    public var Options : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_Options();
        }
    }
    public var SelectedIndex : Swift.UInt32 {
        get throws {
            return try get_SelectedIndex();
        }
    }
} // IVpnCustomPromptOptionSelector


// type: Windows.Networking.Vpn.IVpnCustomPromptText
// interface type
open class IVpnCustomPromptText
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3bc8bdee, Data2: 0x3a42, Data3 : 0x49a3, Data4 : (0xab, 0xdd, 0x07, 0xb2, 0xed, 0xea, 0x75, 0x2d)) }
    // [IsSpecialName] void put_Text(System.String)
    private func _n_put_Text(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, value))
        }
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Text(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
} // IVpnCustomPromptText


// type: Windows.Networking.Vpn.IVpnCustomPromptTextInput
// interface type
open class IVpnCustomPromptTextInput
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc9da9c75, Data2: 0x913c, Data3 : 0x47d5, Data4 : (0x88, 0xba, 0x48, 0xfc, 0x48, 0x93, 0x02, 0x35)) }
    // [IsSpecialName] void put_PlaceholderText(System.String)
    private func _n_put_PlaceholderText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PlaceholderText(pThis, value))
        }
    }
    public func put_PlaceholderText(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_PlaceholderText(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_PlaceholderText()
    private func _n_get_PlaceholderText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PlaceholderText(pThis, __presult))
        }
    }
    public func get_PlaceholderText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_PlaceholderText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_IsTextHidden(bool)
    private func _n_put_IsTextHidden(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextHidden(pThis, value))
        }
    }
    public func put_IsTextHidden(value : boolean) throws -> Void {
        try self._n_put_IsTextHidden(value);
    }
    // [IsSpecialName] bool get_IsTextHidden()
    private func _n_get_IsTextHidden(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextHidden(pThis, __presult))
        }
    }
    public func get_IsTextHidden() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextHidden(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomPromptTextInput.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    public var IsTextHidden : boolean {
        get throws {
            return try get_IsTextHidden();
        }
    }
    public var PlaceholderText : Swift.String {
        get throws {
            return try get_PlaceholderText();
        }
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
} // IVpnCustomPromptTextInput


// type: Windows.Networking.Vpn.IVpnCustomTextBox
// interface type
open class IVpnCustomTextBox
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdaa4c3ca, Data2: 0x8f23, Data3 : 0x4d36, Data4 : (0x91, 0xf1, 0x76, 0xd9, 0x37, 0x82, 0x79, 0x42)) }
    // [IsSpecialName] void put_DisplayText(System.String)
    private func _n_put_DisplayText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomTextBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayText(pThis, value))
        }
    }
    public func put_DisplayText(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DisplayText(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_DisplayText()
    private func _n_get_DisplayText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnCustomTextBox.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayText(pThis, __presult))
        }
    }
    public func get_DisplayText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayText(&__result);
        return Swift.String(from: __result);
    }
    public var DisplayText : Swift.String {
        get throws {
            return try get_DisplayText();
        }
    }
} // IVpnCustomTextBox


// type: Windows.Networking.Vpn.IVpnDomainNameAssignment
// interface type
open class IVpnDomainNameAssignment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4135b141, Data2: 0xccdb, Data3 : 0x49b5, Data4 : (0x94, 0x01, 0x03, 0x9a, 0x8a, 0xe7, 0x67, 0xe9)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnDomainNameInfo> get_DomainNameList()
    private func _n_get_DomainNameList(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DomainNameList(pThis, __presult))
        }
    }
    public func get_DomainNameList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo>> = nil;
        try self._n_get_DomainNameList(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo(consuming: __result);
    }
    // [IsSpecialName] void put_ProxyAutoConfigurationUri(Windows.Foundation.Uri)
    private func _n_put_ProxyAutoConfigurationUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProxyAutoConfigurationUri(pThis, value))
        }
    }
    public func put_ProxyAutoConfigurationUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_ProxyAutoConfigurationUri(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_ProxyAutoConfigurationUri()
    private func _n_get_ProxyAutoConfigurationUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyAutoConfigurationUri(pThis, __presult))
        }
    }
    public func get_ProxyAutoConfigurationUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_ProxyAutoConfigurationUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    public var DomainNameList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        get throws {
            return try get_DomainNameList();
        }
    }
    public var ProxyAutoConfigurationUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_ProxyAutoConfigurationUri();
        }
    }
} // IVpnDomainNameAssignment


// type: Windows.Networking.Vpn.IVpnDomainNameInfo
// interface type
open class IVpnDomainNameInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xad2eb82f, Data2: 0xea8e, Data3 : 0x4f7a, Data4 : (0x84, 0x3e, 0x1a, 0x87, 0xe3, 0x2e, 0x1b, 0x9a)) }
    // [IsSpecialName] void put_DomainName(Windows.Networking.HostName)
    private func _n_put_DomainName(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DomainName(pThis, value))
        }
    }
    public func put_DomainName(value : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_put_DomainName(RawPointer(value));
    }
    // [IsSpecialName] Windows.Networking.HostName get_DomainName()
    private func _n_get_DomainName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DomainName(pThis, __presult))
        }
    }
    public func get_DomainName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_DomainName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] void put_DomainNameType(Windows.Networking.Vpn.VpnDomainNameType)
    private func _n_put_DomainNameType(_ value : _q_CWindows_CNetworking_CVpn_CVpnDomainNameType) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DomainNameType(pThis, value))
        }
    }
    public func put_DomainNameType(value : Windows.Networking.Vpn.VpnDomainNameType) throws -> Void {
        try self._n_put_DomainNameType(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnDomainNameType get_DomainNameType()
    private func _n_get_DomainNameType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnDomainNameType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DomainNameType(pThis, __presult))
        }
    }
    public func get_DomainNameType() throws -> Windows.Networking.Vpn.VpnDomainNameType {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnDomainNameType = _q_CWindows_CNetworking_CVpn_CVpnDomainNameType_Suffix;
        try self._n_get_DomainNameType(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.HostName> get_DnsServers()
    private func _n_get_DnsServers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DnsServers(pThis, __presult))
        }
    }
    public func get_DnsServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>> = nil;
        try self._n_get_DnsServers(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.HostName> get_WebProxyServers()
    private func _n_get_WebProxyServers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WebProxyServers(pThis, __presult))
        }
    }
    public func get_WebProxyServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>> = nil;
        try self._n_get_WebProxyServers(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName(consuming: __result);
    }
    public var DnsServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
            return try get_DnsServers();
        }
    }
    public var DomainName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_DomainName();
        }
    }
    public var DomainNameType : Windows.Networking.Vpn.VpnDomainNameType {
        get throws {
            return try get_DomainNameType();
        }
    }
    public var WebProxyServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
            return try get_WebProxyServers();
        }
    }
} // IVpnDomainNameInfo


// type: Windows.Networking.Vpn.IVpnDomainNameInfo2
// interface type
open class IVpnDomainNameInfo2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xab871151, Data2: 0x6c53, Data3 : 0x4828, Data4 : (0x98, 0x83, 0xd8, 0x86, 0xde, 0x10, 0x44, 0x07)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri> get_WebProxyUris()
    private func _n_get_WebProxyUris(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CFoundation_CUri>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WebProxyUris(pThis, __presult))
        }
    }
    public func get_WebProxyUris() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CFoundation_CUri>> = nil;
        try self._n_get_WebProxyUris(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri(consuming: __result);
    }
    public var WebProxyUris : Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        get throws {
            return try get_WebProxyUris();
        }
    }
} // IVpnDomainNameInfo2


// type: Windows.Networking.Vpn.IVpnDomainNameInfoFactory
// interface type
open class IVpnDomainNameInfoFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2507bb75, Data2: 0x028f, Data3 : 0x4688, Data4 : (0x8d, 0x3a, 0xc4, 0x53, 0x1d, 0xf3, 0x7d, 0xa8)) }
    // Windows.Networking.Vpn.VpnDomainNameInfo CreateVpnDomainNameInfo(System.String, Windows.Networking.Vpn.VpnDomainNameType, Windows.Foundation.Collections.IIterable<Windows.Networking.HostName>, Windows.Foundation.Collections.IIterable<Windows.Networking.HostName>)
    private func _n_CreateVpnDomainNameInfo(_ name : Optional<HSTRING>, _ nameType : _q_CWindows_CNetworking_CVpn_CVpnDomainNameType, _ dnsServerList : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CHostName>>, _ proxyServerList : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CHostName>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfoFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateVpnDomainNameInfo(pThis, name, nameType, dnsServerList, proxyServerList, __presult))
        }
    }
    public func CreateVpnDomainNameInfo(name : Swift.String, nameType : Windows.Networking.Vpn.VpnDomainNameType, dnsServerList : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>, proxyServerList : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>) throws -> Optional<Windows.Networking.Vpn.IVpnDomainNameInfo> {
        let __hstr_name = try HString(name);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>> = nil;
        try self._n_CreateVpnDomainNameInfo(__hstr_name.Raw(), nameType, RawPointer(dnsServerList), RawPointer(proxyServerList), &__result);
        return Windows.Networking.Vpn.IVpnDomainNameInfo(consuming: __result);
        }
    }
} // IVpnDomainNameInfoFactory


// type: Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs
// interface type
open class IVpnForegroundActivatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x85b465b0, Data2: 0xcadb, Data3 : 0x4d70, Data4 : (0xac, 0x92, 0x54, 0x3a, 0x24, 0xdc, 0x9e, 0xbc)) }
    // [IsSpecialName] System.String get_ProfileName()
    private func _n_get_ProfileName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnForegroundActivatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileName(pThis, __presult))
        }
    }
    public func get_ProfileName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProfileName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.ValueSet get_SharedContext()
    private func _n_get_SharedContext(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnForegroundActivatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SharedContext(pThis, __presult))
        }
    }
    public func get_SharedContext() throws -> Optional<Windows.Foundation.Collections.IPropertySet> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>> = nil;
        try self._n_get_SharedContext(&__result);
        return Windows.Foundation.Collections.IPropertySet(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnForegroundActivationOperation get_ActivationOperation()
    private func _n_get_ActivationOperation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnForegroundActivationOperation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnForegroundActivatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActivationOperation(pThis, __presult))
        }
    }
    public func get_ActivationOperation() throws -> Optional<Windows.Networking.Vpn.IVpnForegroundActivationOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnForegroundActivationOperation>> = nil;
        try self._n_get_ActivationOperation(&__result);
        return Windows.Networking.Vpn.IVpnForegroundActivationOperation(consuming: __result);
    }
    public var ActivationOperation : Optional<Windows.Networking.Vpn.IVpnForegroundActivationOperation> {
        get throws {
            return try get_ActivationOperation();
        }
    }
    public var ProfileName : Swift.String {
        get throws {
            return try get_ProfileName();
        }
    }
    public var SharedContext : Optional<Windows.Foundation.Collections.IPropertySet> {
        get throws {
            return try get_SharedContext();
        }
    }
} // IVpnForegroundActivatedEventArgs


// type: Windows.Networking.Vpn.IVpnForegroundActivationOperation
// interface type
open class IVpnForegroundActivationOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e010d57, Data2: 0xf17a, Data3 : 0x4bd5, Data4 : (0x9b, 0x6d, 0xf9, 0x84, 0xf1, 0x29, 0x7d, 0x3c)) }
    // void Complete(Windows.Foundation.Collections.ValueSet)
    private func _n_Complete(_ result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnForegroundActivationOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis, result))
        }
    }
    public func Complete(result : Optional<Windows.Foundation.Collections.IPropertySet>) throws -> Void {
        try self._n_Complete(RawPointer(result));
    }
} // IVpnForegroundActivationOperation


// type: Windows.Networking.Vpn.IVpnInterfaceId
// interface type
open class IVpnInterfaceId
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e2ddca2, Data2: 0x1712, Data3 : 0x4ce4, Data4 : (0xb1, 0x79, 0x8c, 0x65, 0x2c, 0x6d, 0x10, 0x11)) }
    // void GetAddressInfo(ref System.Byte[])
    private func _n_GetAddressInfo(_ idLength : UnsafeMutablePointer<UINT32>, _ id : UnsafeMutablePointer<Optional<UnsafeMutablePointer<UINT8>>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnInterfaceId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAddressInfo(pThis, idLength, id))
        }
    }
    public func GetAddressInfo(idLength : inout UINT32, id : inout Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
            var _tmp_out_idLength: UINT32 = 0;
            var _tmp_out_id: Optional<UnsafeMutablePointer<UINT8>> = nil;
        try self._n_GetAddressInfo(&_tmp_out_idLength, &_tmp_out_id);
            id = _tmp_out_id;
    }
} // IVpnInterfaceId


// type: Windows.Networking.Vpn.IVpnInterfaceIdFactory
// interface type
open class IVpnInterfaceIdFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e2ddca2, Data2: 0x1712, Data3 : 0x4ce4, Data4 : (0xb1, 0x79, 0x8c, 0x65, 0x2c, 0x6d, 0x10, 0x00)) }
    // Windows.Networking.Vpn.VpnInterfaceId CreateVpnInterfaceId(System.Byte[])
    private func _n_CreateVpnInterfaceId(_ addressLength : UINT32, _ address : Optional<UnsafeMutablePointer<UINT8>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnInterfaceId>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnInterfaceIdFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateVpnInterfaceId(pThis, addressLength, address, __presult))
        }
    }
    public func CreateVpnInterfaceId(addressLength : UINT32, address : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Windows.Networking.Vpn.IVpnInterfaceId> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnInterfaceId>> = nil;
        try self._n_CreateVpnInterfaceId(addressLength, address, &__result);
        return Windows.Networking.Vpn.IVpnInterfaceId(consuming: __result);
    }
} // IVpnInterfaceIdFactory


// type: Windows.Networking.Vpn.IVpnManagementAgent
// interface type
open class IVpnManagementAgent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x193696cd, Data2: 0xa5c4, Data3 : 0x4abe, Data4 : (0x85, 0x2b, 0x78, 0x5b, 0xe4, 0xcb, 0x3e, 0x34)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> AddProfileFromXmlAsync(System.String)
    private func _n_AddProfileFromXmlAsync(_ xml : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddProfileFromXmlAsync(pThis, xml, __presult))
        }
    }
    public func AddProfileFromXmlAsync(xml : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let __hstr_xml = try HString(xml);
        return try withExtendedLifetime(__hstr_xml) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_AddProfileFromXmlAsync(__hstr_xml.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
        }
    }
    public func AddProfileFromXml(xml : Swift.String) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AddProfileFromXmlAsync(xml: xml)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> AddProfileFromObjectAsync(Windows.Networking.Vpn.IVpnProfile)
    private func _n_AddProfileFromObjectAsync(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddProfileFromObjectAsync(pThis, profile, __presult))
        }
    }
    public func AddProfileFromObjectAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_AddProfileFromObjectAsync(RawPointer(profile), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
    }
    public func AddProfileFromObject(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AddProfileFromObjectAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> UpdateProfileFromXmlAsync(System.String)
    private func _n_UpdateProfileFromXmlAsync(_ xml : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateProfileFromXmlAsync(pThis, xml, __presult))
        }
    }
    public func UpdateProfileFromXmlAsync(xml : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let __hstr_xml = try HString(xml);
        return try withExtendedLifetime(__hstr_xml) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_UpdateProfileFromXmlAsync(__hstr_xml.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
        }
    }
    public func UpdateProfileFromXml(xml : Swift.String) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpdateProfileFromXmlAsync(xml: xml)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> UpdateProfileFromObjectAsync(Windows.Networking.Vpn.IVpnProfile)
    private func _n_UpdateProfileFromObjectAsync(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateProfileFromObjectAsync(pThis, profile, __presult))
        }
    }
    public func UpdateProfileFromObjectAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_UpdateProfileFromObjectAsync(RawPointer(profile), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
    }
    public func UpdateProfileFromObject(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpdateProfileFromObjectAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.IVpnProfile>> GetProfilesAsync()
    private func _n_GetProfilesAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetProfilesAsync(pThis, __presult))
        }
    }
    public func GetProfilesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>> = nil;
        try self._n_GetProfilesAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(consuming: __result);
    }
    public func GetProfiles() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetProfilesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> DeleteProfileAsync(Windows.Networking.Vpn.IVpnProfile)
    private func _n_DeleteProfileAsync(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteProfileAsync(pThis, profile, __presult))
        }
    }
    public func DeleteProfileAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_DeleteProfileAsync(RawPointer(profile), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
    }
    public func DeleteProfile(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteProfileAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> ConnectProfileAsync(Windows.Networking.Vpn.IVpnProfile)
    private func _n_ConnectProfileAsync(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectProfileAsync(pThis, profile, __presult))
        }
    }
    public func ConnectProfileAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_ConnectProfileAsync(RawPointer(profile), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
    }
    public func ConnectProfile(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectProfileAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> ConnectProfileWithPasswordCredentialAsync(Windows.Networking.Vpn.IVpnProfile, Windows.Security.Credentials.PasswordCredential)
    private func _n_ConnectProfileWithPasswordCredentialAsync(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ passwordCredential : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectProfileWithPasswordCredentialAsync(pThis, profile, passwordCredential, __presult))
        }
    }
    public func ConnectProfileWithPasswordCredentialAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>, passwordCredential : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_ConnectProfileWithPasswordCredentialAsync(RawPointer(profile), RawPointer(passwordCredential), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
    }
    public func ConnectProfileWithPasswordCredential(profile : Optional<Windows.Networking.Vpn.IVpnProfile>, passwordCredential : Optional<Windows.Security.Credentials.IPasswordCredential>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectProfileWithPasswordCredentialAsync(profile: profile, passwordCredential: passwordCredential)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus> DisconnectProfileAsync(Windows.Networking.Vpn.IVpnProfile)
    private func _n_DisconnectProfileAsync(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnManagementAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DisconnectProfileAsync(pThis, profile, __presult))
        }
    }
    public func DisconnectProfileAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_DisconnectProfileAsync(RawPointer(profile), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
    }
    public func DisconnectProfile(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DisconnectProfileAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IVpnManagementAgent


// type: Windows.Networking.Vpn.IVpnNamespaceAssignment
// interface type
open class IVpnNamespaceAssignment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd7f7db18, Data2: 0x307d, Data3 : 0x4c0e, Data4 : (0xbd, 0x62, 0x8f, 0xa2, 0x70, 0xbb, 0xad, 0xd6)) }
    // [IsSpecialName] void put_NamespaceList(Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnNamespaceInfo>)
    private func _n_put_NamespaceList(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NamespaceList(pThis, value))
        }
    }
    public func put_NamespaceList(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo>) throws -> Void {
        try self._n_put_NamespaceList(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnNamespaceInfo> get_NamespaceList()
    private func _n_get_NamespaceList(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NamespaceList(pThis, __presult))
        }
    }
    public func get_NamespaceList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo>> = nil;
        try self._n_get_NamespaceList(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo(consuming: __result);
    }
    // [IsSpecialName] void put_ProxyAutoConfigUri(Windows.Foundation.Uri)
    private func _n_put_ProxyAutoConfigUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProxyAutoConfigUri(pThis, value))
        }
    }
    public func put_ProxyAutoConfigUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_ProxyAutoConfigUri(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_ProxyAutoConfigUri()
    private func _n_get_ProxyAutoConfigUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyAutoConfigUri(pThis, __presult))
        }
    }
    public func get_ProxyAutoConfigUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_ProxyAutoConfigUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    public var NamespaceList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo> {
        get throws {
            return try get_NamespaceList();
        }
    }
    public var ProxyAutoConfigUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_ProxyAutoConfigUri();
        }
    }
} // IVpnNamespaceAssignment


// type: Windows.Networking.Vpn.IVpnNamespaceInfo
// interface type
open class IVpnNamespaceInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x30edfb43, Data2: 0x444f, Data3 : 0x44c5, Data4 : (0x81, 0x67, 0xa3, 0x5a, 0x91, 0xf1, 0xaf, 0x94)) }
    // [IsSpecialName] void put_Namespace(System.String)
    private func _n_put_Namespace(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Namespace(pThis, value))
        }
    }
    public func put_Namespace(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Namespace(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Namespace()
    private func _n_get_Namespace(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Namespace(pThis, __presult))
        }
    }
    public func get_Namespace() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Namespace(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_DnsServers(Windows.Foundation.Collections.IVector<Windows.Networking.HostName>)
    private func _n_put_DnsServers(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DnsServers(pThis, value))
        }
    }
    public func put_DnsServers(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>) throws -> Void {
        try self._n_put_DnsServers(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.HostName> get_DnsServers()
    private func _n_get_DnsServers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DnsServers(pThis, __presult))
        }
    }
    public func get_DnsServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>> = nil;
        try self._n_get_DnsServers(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName(consuming: __result);
    }
    // [IsSpecialName] void put_WebProxyServers(Windows.Foundation.Collections.IVector<Windows.Networking.HostName>)
    private func _n_put_WebProxyServers(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_WebProxyServers(pThis, value))
        }
    }
    public func put_WebProxyServers(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>) throws -> Void {
        try self._n_put_WebProxyServers(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.HostName> get_WebProxyServers()
    private func _n_get_WebProxyServers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WebProxyServers(pThis, __presult))
        }
    }
    public func get_WebProxyServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>> = nil;
        try self._n_get_WebProxyServers(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName(consuming: __result);
    }
    public var DnsServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
            return try get_DnsServers();
        }
    }
    public var Namespace : Swift.String {
        get throws {
            return try get_Namespace();
        }
    }
    public var WebProxyServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
            return try get_WebProxyServers();
        }
    }
} // IVpnNamespaceInfo


// type: Windows.Networking.Vpn.IVpnNamespaceInfoFactory
// interface type
open class IVpnNamespaceInfoFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcb3e951a, Data2: 0xb0ce, Data3 : 0x442b, Data4 : (0xac, 0xbb, 0x5f, 0x99, 0xb2, 0x02, 0xc3, 0x1c)) }
    // Windows.Networking.Vpn.VpnNamespaceInfo CreateVpnNamespaceInfo(System.String, Windows.Foundation.Collections.IVector<Windows.Networking.HostName>, Windows.Foundation.Collections.IVector<Windows.Networking.HostName>)
    private func _n_CreateVpnNamespaceInfo(_ name : Optional<HSTRING>, _ dnsServerList : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>, _ proxyServerList : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CHostName>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfoFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateVpnNamespaceInfo(pThis, name, dnsServerList, proxyServerList, __presult))
        }
    }
    public func CreateVpnNamespaceInfo(name : Swift.String, dnsServerList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>, proxyServerList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>) throws -> Optional<Windows.Networking.Vpn.IVpnNamespaceInfo> {
        let __hstr_name = try HString(name);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>> = nil;
        try self._n_CreateVpnNamespaceInfo(__hstr_name.Raw(), RawPointer(dnsServerList), RawPointer(proxyServerList), &__result);
        return Windows.Networking.Vpn.IVpnNamespaceInfo(consuming: __result);
        }
    }
} // IVpnNamespaceInfoFactory


// type: Windows.Networking.Vpn.IVpnNativeProfile
// interface type
open class IVpnNativeProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa4aee29e, Data2: 0x6417, Data3 : 0x4333, Data4 : (0x98, 0x42, 0xf0, 0xa6, 0x6d, 0xb6, 0x98, 0x02)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_Servers()
    private func _n_get_Servers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Servers(pThis, __presult))
        }
    }
    public func get_Servers() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_Servers(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnRoutingPolicyType get_RoutingPolicyType()
    private func _n_get_RoutingPolicyType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoutingPolicyType(pThis, __presult))
        }
    }
    public func get_RoutingPolicyType() throws -> Windows.Networking.Vpn.VpnRoutingPolicyType {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType = _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType_SplitRouting;
        try self._n_get_RoutingPolicyType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RoutingPolicyType(Windows.Networking.Vpn.VpnRoutingPolicyType)
    private func _n_put_RoutingPolicyType(_ value : _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RoutingPolicyType(pThis, value))
        }
    }
    public func put_RoutingPolicyType(value : Windows.Networking.Vpn.VpnRoutingPolicyType) throws -> Void {
        try self._n_put_RoutingPolicyType(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnNativeProtocolType get_NativeProtocolType()
    private func _n_get_NativeProtocolType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NativeProtocolType(pThis, __presult))
        }
    }
    public func get_NativeProtocolType() throws -> Windows.Networking.Vpn.VpnNativeProtocolType {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType = _q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType_Pptp;
        try self._n_get_NativeProtocolType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_NativeProtocolType(Windows.Networking.Vpn.VpnNativeProtocolType)
    private func _n_put_NativeProtocolType(_ value : _q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NativeProtocolType(pThis, value))
        }
    }
    public func put_NativeProtocolType(value : Windows.Networking.Vpn.VpnNativeProtocolType) throws -> Void {
        try self._n_put_NativeProtocolType(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnAuthenticationMethod get_UserAuthenticationMethod()
    private func _n_get_UserAuthenticationMethod(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserAuthenticationMethod(pThis, __presult))
        }
    }
    public func get_UserAuthenticationMethod() throws -> Windows.Networking.Vpn.VpnAuthenticationMethod {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod = _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Mschapv2;
        try self._n_get_UserAuthenticationMethod(&__result);
        return __result;
    }
    // [IsSpecialName] void put_UserAuthenticationMethod(Windows.Networking.Vpn.VpnAuthenticationMethod)
    private func _n_put_UserAuthenticationMethod(_ value : _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserAuthenticationMethod(pThis, value))
        }
    }
    public func put_UserAuthenticationMethod(value : Windows.Networking.Vpn.VpnAuthenticationMethod) throws -> Void {
        try self._n_put_UserAuthenticationMethod(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnAuthenticationMethod get_TunnelAuthenticationMethod()
    private func _n_get_TunnelAuthenticationMethod(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TunnelAuthenticationMethod(pThis, __presult))
        }
    }
    public func get_TunnelAuthenticationMethod() throws -> Windows.Networking.Vpn.VpnAuthenticationMethod {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod = _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Mschapv2;
        try self._n_get_TunnelAuthenticationMethod(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TunnelAuthenticationMethod(Windows.Networking.Vpn.VpnAuthenticationMethod)
    private func _n_put_TunnelAuthenticationMethod(_ value : _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TunnelAuthenticationMethod(pThis, value))
        }
    }
    public func put_TunnelAuthenticationMethod(value : Windows.Networking.Vpn.VpnAuthenticationMethod) throws -> Void {
        try self._n_put_TunnelAuthenticationMethod(value);
    }
    // [IsSpecialName] System.String get_EapConfiguration()
    private func _n_get_EapConfiguration(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EapConfiguration(pThis, __presult))
        }
    }
    public func get_EapConfiguration() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_EapConfiguration(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_EapConfiguration(System.String)
    private func _n_put_EapConfiguration(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_EapConfiguration(pThis, value))
        }
    }
    public func put_EapConfiguration(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_EapConfiguration(__hstr_value.Raw());
        }
    }
    public var EapConfiguration : Swift.String {
        get throws {
            return try get_EapConfiguration();
        }
    }
    public var NativeProtocolType : Windows.Networking.Vpn.VpnNativeProtocolType {
        get throws {
            return try get_NativeProtocolType();
        }
    }
    public var RoutingPolicyType : Windows.Networking.Vpn.VpnRoutingPolicyType {
        get throws {
            return try get_RoutingPolicyType();
        }
    }
    public var Servers : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_Servers();
        }
    }
    public var TunnelAuthenticationMethod : Windows.Networking.Vpn.VpnAuthenticationMethod {
        get throws {
            return try get_TunnelAuthenticationMethod();
        }
    }
    public var UserAuthenticationMethod : Windows.Networking.Vpn.VpnAuthenticationMethod {
        get throws {
            return try get_UserAuthenticationMethod();
        }
    }
} // IVpnNativeProfile


// type: Windows.Networking.Vpn.IVpnNativeProfile2
// interface type
open class IVpnNativeProfile2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0fec2467, Data2: 0xcdb5, Data3 : 0x4ac7, Data4 : (0xb5, 0xa3, 0x0a, 0xfb, 0x5e, 0xc4, 0x76, 0x82)) }
    // [IsSpecialName] bool get_RequireVpnClientAppUI()
    private func _n_get_RequireVpnClientAppUI(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequireVpnClientAppUI(pThis, __presult))
        }
    }
    public func get_RequireVpnClientAppUI() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_RequireVpnClientAppUI(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequireVpnClientAppUI(bool)
    private func _n_put_RequireVpnClientAppUI(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequireVpnClientAppUI(pThis, value))
        }
    }
    public func put_RequireVpnClientAppUI(value : boolean) throws -> Void {
        try self._n_put_RequireVpnClientAppUI(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnManagementConnectionStatus get_ConnectionStatus()
    private func _n_get_ConnectionStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnNativeProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionStatus(pThis, __presult))
        }
    }
    public func get_ConnectionStatus() throws -> Windows.Networking.Vpn.VpnManagementConnectionStatus {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus = _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Disconnected;
        try self._n_get_ConnectionStatus(&__result);
        return __result;
    }
    public var ConnectionStatus : Windows.Networking.Vpn.VpnManagementConnectionStatus {
        get throws {
            return try get_ConnectionStatus();
        }
    }
    public var RequireVpnClientAppUI : boolean {
        get throws {
            return try get_RequireVpnClientAppUI();
        }
    }
} // IVpnNativeProfile2


// type: Windows.Networking.Vpn.IVpnPacketBuffer
// interface type
open class IVpnPacketBuffer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc2f891fc, Data2: 0x4d5c, Data3 : 0x4a63, Data4 : (0xb7, 0x0d, 0x4e, 0x30, 0x7e, 0xac, 0xce, 0x55)) }
    // [IsSpecialName] Windows.Storage.Streams.Buffer get_Buffer()
    private func _n_get_Buffer(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Buffer(pThis, __presult))
        }
    }
    public func get_Buffer() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Buffer(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // [IsSpecialName] void put_Status(Windows.Networking.Vpn.VpnPacketBufferStatus)
    private func _n_put_Status(_ value : _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Status(pThis, value))
        }
    }
    public func put_Status(value : Windows.Networking.Vpn.VpnPacketBufferStatus) throws -> Void {
        try self._n_put_Status(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnPacketBufferStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.Vpn.VpnPacketBufferStatus {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus = _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus_Ok;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TransportAffinity(System.UInt32)
    private func _n_put_TransportAffinity(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransportAffinity(pThis, value))
        }
    }
    public func put_TransportAffinity(value : Swift.UInt32) throws -> Void {
        try self._n_put_TransportAffinity(value);
    }
    // [IsSpecialName] System.UInt32 get_TransportAffinity()
    private func _n_get_TransportAffinity(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransportAffinity(pThis, __presult))
        }
    }
    public func get_TransportAffinity() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_TransportAffinity(&__result);
        return __result;
    }
    public var Buffer : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Buffer();
        }
    }
    public var Status : Windows.Networking.Vpn.VpnPacketBufferStatus {
        get throws {
            return try get_Status();
        }
    }
    public var TransportAffinity : Swift.UInt32 {
        get throws {
            return try get_TransportAffinity();
        }
    }
} // IVpnPacketBuffer


// type: Windows.Networking.Vpn.IVpnPacketBuffer2
// interface type
open class IVpnPacketBuffer2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x665e91f0, Data2: 0x8805, Data3 : 0x4bf5, Data4 : (0xa6, 0x19, 0x2e, 0x84, 0x88, 0x2e, 0x6b, 0x4f)) }
    // [IsSpecialName] Windows.Networking.Vpn.VpnAppId get_AppId()
    private func _n_get_AppId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppId(pThis, __presult))
        }
    }
    public func get_AppId() throws -> Optional<Windows.Networking.Vpn.IVpnAppId> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>> = nil;
        try self._n_get_AppId(&__result);
        return Windows.Networking.Vpn.IVpnAppId(consuming: __result);
    }
    public var AppId : Optional<Windows.Networking.Vpn.IVpnAppId> {
        get throws {
            return try get_AppId();
        }
    }
} // IVpnPacketBuffer2


// type: Windows.Networking.Vpn.IVpnPacketBuffer3
// interface type
open class IVpnPacketBuffer3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe256072f, Data2: 0x107b, Data3 : 0x4c40, Data4 : (0xb1, 0x27, 0x5b, 0xc5, 0x3e, 0x0a, 0xd9, 0x60)) }
    // [IsSpecialName] void put_TransportContext(System.Object)
    private func _n_put_TransportContext(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransportContext(pThis, value))
        }
    }
    public func put_TransportContext(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_TransportContext(RawPointer(value));
    }
    // [IsSpecialName] System.Object get_TransportContext()
    private func _n_get_TransportContext(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransportContext(pThis, __presult))
        }
    }
    public func get_TransportContext() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_TransportContext(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    public var TransportContext : Optional<WinRT.IInspectable> {
        get throws {
            return try get_TransportContext();
        }
    }
} // IVpnPacketBuffer3


// type: Windows.Networking.Vpn.IVpnPacketBufferFactory
// interface type
open class IVpnPacketBufferFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e2ddca2, Data2: 0x1712, Data3 : 0x4ce4, Data4 : (0xb1, 0x79, 0x8c, 0x65, 0x2c, 0x6d, 0x99, 0x99)) }
    // Windows.Networking.Vpn.VpnPacketBuffer CreateVpnPacketBuffer(Windows.Networking.Vpn.VpnPacketBuffer, System.UInt32, System.UInt32)
    private func _n_CreateVpnPacketBuffer(_ parentBuffer : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>, _ offset : UINT32, _ length : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateVpnPacketBuffer(pThis, parentBuffer, offset, length, __presult))
        }
    }
    public func CreateVpnPacketBuffer(parentBuffer : Optional<Windows.Networking.Vpn.IVpnPacketBuffer>, offset : Swift.UInt32, length : Swift.UInt32) throws -> Optional<Windows.Networking.Vpn.IVpnPacketBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>> = nil;
        try self._n_CreateVpnPacketBuffer(RawPointer(parentBuffer), offset, length, &__result);
        return Windows.Networking.Vpn.IVpnPacketBuffer(consuming: __result);
    }
} // IVpnPacketBufferFactory


// type: Windows.Networking.Vpn.IVpnPacketBufferList
// interface type
open class IVpnPacketBufferList
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc2f891fc, Data2: 0x4d5c, Data3 : 0x4a63, Data4 : (0xb7, 0x0d, 0x4e, 0x30, 0x7e, 0xac, 0xce, 0x77)) }
    // void Append(Windows.Networking.Vpn.VpnPacketBuffer)
    private func _n_Append(_ nextVpnPacketBuffer : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, nextVpnPacketBuffer))
        }
    }
    public func Append(nextVpnPacketBuffer : Optional<Windows.Networking.Vpn.IVpnPacketBuffer>) throws -> Void {
        try self._n_Append(RawPointer(nextVpnPacketBuffer));
    }
    // void AddAtBegin(Windows.Networking.Vpn.VpnPacketBuffer)
    private func _n_AddAtBegin(_ nextVpnPacketBuffer : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddAtBegin(pThis, nextVpnPacketBuffer))
        }
    }
    public func AddAtBegin(nextVpnPacketBuffer : Optional<Windows.Networking.Vpn.IVpnPacketBuffer>) throws -> Void {
        try self._n_AddAtBegin(RawPointer(nextVpnPacketBuffer));
    }
    // Windows.Networking.Vpn.VpnPacketBuffer RemoveAtEnd()
    private func _n_RemoveAtEnd(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis, __presult))
        }
    }
    public func RemoveAtEnd() throws -> Optional<Windows.Networking.Vpn.IVpnPacketBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>> = nil;
        try self._n_RemoveAtEnd(&__result);
        return Windows.Networking.Vpn.IVpnPacketBuffer(consuming: __result);
    }
    // Windows.Networking.Vpn.VpnPacketBuffer RemoveAtBegin()
    private func _n_RemoveAtBegin(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtBegin(pThis, __presult))
        }
    }
    public func RemoveAtBegin() throws -> Optional<Windows.Networking.Vpn.IVpnPacketBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnPacketBuffer>> = nil;
        try self._n_RemoveAtBegin(&__result);
        return Windows.Networking.Vpn.IVpnPacketBuffer(consuming: __result);
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // [IsSpecialName] void put_Status(Windows.Networking.Vpn.VpnPacketBufferStatus)
    private func _n_put_Status(_ value : _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Status(pThis, value))
        }
    }
    public func put_Status(value : Windows.Networking.Vpn.VpnPacketBufferStatus) throws -> Void {
        try self._n_put_Status(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnPacketBufferStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.Vpn.VpnPacketBufferStatus {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus = _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus_Ok;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPacketBufferList.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
    public var Status : Windows.Networking.Vpn.VpnPacketBufferStatus {
        get throws {
            return try get_Status();
        }
    }
} // IVpnPacketBufferList


// type: Windows.Networking.Vpn.IVpnPickedCredential
// interface type
open class IVpnPickedCredential
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9a793ac7, Data2: 0x8854, Data3 : 0x4e52, Data4 : (0xad, 0x97, 0x24, 0xdd, 0x9a, 0x84, 0x2b, 0xce)) }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_PasskeyCredential()
    private func _n_get_PasskeyCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPickedCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PasskeyCredential(pThis, __presult))
        }
    }
    public func get_PasskeyCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_PasskeyCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] System.String get_AdditionalPin()
    private func _n_get_AdditionalPin(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPickedCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdditionalPin(pThis, __presult))
        }
    }
    public func get_AdditionalPin() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AdditionalPin(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_OldPasswordCredential()
    private func _n_get_OldPasswordCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPickedCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldPasswordCredential(pThis, __presult))
        }
    }
    public func get_OldPasswordCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_OldPasswordCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    public var AdditionalPin : Swift.String {
        get throws {
            return try get_AdditionalPin();
        }
    }
    public var OldPasswordCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_OldPasswordCredential();
        }
    }
    public var PasskeyCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_PasskeyCredential();
        }
    }
} // IVpnPickedCredential


// type: Windows.Networking.Vpn.IVpnPlugInProfile
// interface type
open class IVpnPlugInProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0edf0da4, Data2: 0x4f00, Data3 : 0x4589, Data4 : (0x8d, 0x7b, 0x4b, 0xf9, 0x88, 0xf6, 0x54, 0x2c)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Foundation.Uri> get_ServerUris()
    private func _n_get_ServerUris(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CFoundation_CUri>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerUris(pThis, __presult))
        }
    }
    public func get_ServerUris() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CFoundation_CUri>> = nil;
        try self._n_get_ServerUris(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri(consuming: __result);
    }
    // [IsSpecialName] System.String get_CustomConfiguration()
    private func _n_get_CustomConfiguration(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomConfiguration(pThis, __presult))
        }
    }
    public func get_CustomConfiguration() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CustomConfiguration(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_CustomConfiguration(System.String)
    private func _n_put_CustomConfiguration(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomConfiguration(pThis, value))
        }
    }
    public func put_CustomConfiguration(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_CustomConfiguration(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_VpnPluginPackageFamilyName()
    private func _n_get_VpnPluginPackageFamilyName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VpnPluginPackageFamilyName(pThis, __presult))
        }
    }
    public func get_VpnPluginPackageFamilyName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_VpnPluginPackageFamilyName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_VpnPluginPackageFamilyName(System.String)
    private func _n_put_VpnPluginPackageFamilyName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VpnPluginPackageFamilyName(pThis, value))
        }
    }
    public func put_VpnPluginPackageFamilyName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_VpnPluginPackageFamilyName(__hstr_value.Raw());
        }
    }
    public var CustomConfiguration : Swift.String {
        get throws {
            return try get_CustomConfiguration();
        }
    }
    public var ServerUris : Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        get throws {
            return try get_ServerUris();
        }
    }
    public var VpnPluginPackageFamilyName : Swift.String {
        get throws {
            return try get_VpnPluginPackageFamilyName();
        }
    }
} // IVpnPlugInProfile


// type: Windows.Networking.Vpn.IVpnPlugInProfile2
// interface type
open class IVpnPlugInProfile2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x611c4892, Data2: 0xcf94, Data3 : 0x4ad6, Data4 : (0xba, 0x99, 0x00, 0xf4, 0xff, 0x34, 0x56, 0x5e)) }
    // [IsSpecialName] bool get_RequireVpnClientAppUI()
    private func _n_get_RequireVpnClientAppUI(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequireVpnClientAppUI(pThis, __presult))
        }
    }
    public func get_RequireVpnClientAppUI() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_RequireVpnClientAppUI(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequireVpnClientAppUI(bool)
    private func _n_put_RequireVpnClientAppUI(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequireVpnClientAppUI(pThis, value))
        }
    }
    public func put_RequireVpnClientAppUI(value : boolean) throws -> Void {
        try self._n_put_RequireVpnClientAppUI(value);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnManagementConnectionStatus get_ConnectionStatus()
    private func _n_get_ConnectionStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnPlugInProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionStatus(pThis, __presult))
        }
    }
    public func get_ConnectionStatus() throws -> Windows.Networking.Vpn.VpnManagementConnectionStatus {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus = _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Disconnected;
        try self._n_get_ConnectionStatus(&__result);
        return __result;
    }
    public var ConnectionStatus : Windows.Networking.Vpn.VpnManagementConnectionStatus {
        get throws {
            return try get_ConnectionStatus();
        }
    }
    public var RequireVpnClientAppUI : boolean {
        get throws {
            return try get_RequireVpnClientAppUI();
        }
    }
} // IVpnPlugInProfile2


// type: Windows.Networking.Vpn.IVpnProfile
// interface type
open class IVpnProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7875b751, Data2: 0xb0d7, Data3 : 0x43db, Data4 : (0x8a, 0x93, 0xd3, 0xfe, 0x24, 0x79, 0xe5, 0x6a)) }
    // [IsSpecialName] System.String get_ProfileName()
    private func _n_get_ProfileName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileName(pThis, __presult))
        }
    }
    public func get_ProfileName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProfileName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_ProfileName(System.String)
    private func _n_put_ProfileName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProfileName(pThis, value))
        }
    }
    public func put_ProfileName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_ProfileName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnAppId> get_AppTriggers()
    private func _n_get_AppTriggers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppTriggers(pThis, __presult))
        }
    }
    public func get_AppTriggers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId>> = nil;
        try self._n_get_AppTriggers(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute> get_Routes()
    private func _n_get_Routes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Routes(pThis, __presult))
        }
    }
    public func get_Routes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>> = nil;
        try self._n_get_Routes(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnDomainNameInfo> get_DomainNameInfoList()
    private func _n_get_DomainNameInfoList(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DomainNameInfoList(pThis, __presult))
        }
    }
    public func get_DomainNameInfoList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo>> = nil;
        try self._n_get_DomainNameInfoList(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnTrafficFilter> get_TrafficFilters()
    private func _n_get_TrafficFilters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrafficFilters(pThis, __presult))
        }
    }
    public func get_TrafficFilters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter>> = nil;
        try self._n_get_TrafficFilters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter(consuming: __result);
    }
    // [IsSpecialName] bool get_RememberCredentials()
    private func _n_get_RememberCredentials(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RememberCredentials(pThis, __presult))
        }
    }
    public func get_RememberCredentials() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_RememberCredentials(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RememberCredentials(bool)
    private func _n_put_RememberCredentials(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RememberCredentials(pThis, value))
        }
    }
    public func put_RememberCredentials(value : boolean) throws -> Void {
        try self._n_put_RememberCredentials(value);
    }
    // [IsSpecialName] bool get_AlwaysOn()
    private func _n_get_AlwaysOn(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlwaysOn(pThis, __presult))
        }
    }
    public func get_AlwaysOn() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AlwaysOn(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlwaysOn(bool)
    private func _n_put_AlwaysOn(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlwaysOn(pThis, value))
        }
    }
    public func put_AlwaysOn(value : boolean) throws -> Void {
        try self._n_put_AlwaysOn(value);
    }
    public var AlwaysOn : boolean {
        get throws {
            return try get_AlwaysOn();
        }
    }
    public var AppTriggers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId> {
        get throws {
            return try get_AppTriggers();
        }
    }
    public var DomainNameInfoList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        get throws {
            return try get_DomainNameInfoList();
        }
    }
    public var ProfileName : Swift.String {
        get throws {
            return try get_ProfileName();
        }
    }
    public var RememberCredentials : boolean {
        get throws {
            return try get_RememberCredentials();
        }
    }
    public var Routes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
            return try get_Routes();
        }
    }
    public var TrafficFilters : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        get throws {
            return try get_TrafficFilters();
        }
    }
} // IVpnProfile


// type: Windows.Networking.Vpn.IVpnRoute
// interface type
open class IVpnRoute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb5731b83, Data2: 0x0969, Data3 : 0x4699, Data4 : (0x93, 0x8e, 0x77, 0x76, 0xdb, 0x29, 0xcf, 0xb3)) }
    // [IsSpecialName] void put_Address(Windows.Networking.HostName)
    private func _n_put_Address(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Address(pThis, value))
        }
    }
    public func put_Address(value : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_put_Address(RawPointer(value));
    }
    // [IsSpecialName] Windows.Networking.HostName get_Address()
    private func _n_get_Address(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Address(pThis, __presult))
        }
    }
    public func get_Address() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_Address(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] void put_PrefixSize(System.Byte)
    private func _n_put_PrefixSize(_ value : UINT8) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrefixSize(pThis, value))
        }
    }
    public func put_PrefixSize(value : Swift.UInt8) throws -> Void {
        try self._n_put_PrefixSize(value);
    }
    // [IsSpecialName] System.Byte get_PrefixSize()
    private func _n_get_PrefixSize(_ __presult: UnsafeMutablePointer<UINT8>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrefixSize(pThis, __presult))
        }
    }
    public func get_PrefixSize() throws -> Swift.UInt8 {
        var __result : UINT8 = 0;
        try self._n_get_PrefixSize(&__result);
        return __result;
    }
    public var Address : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_Address();
        }
    }
    public var PrefixSize : Swift.UInt8 {
        get throws {
            return try get_PrefixSize();
        }
    }
} // IVpnRoute


// type: Windows.Networking.Vpn.IVpnRouteAssignment
// interface type
open class IVpnRouteAssignment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdb64de22, Data2: 0xce39, Data3 : 0x4a76, Data4 : (0x95, 0x50, 0xf6, 0x10, 0x39, 0xf8, 0x0e, 0x48)) }
    // [IsSpecialName] void put_Ipv4InclusionRoutes(Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute>)
    private func _n_put_Ipv4InclusionRoutes(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Ipv4InclusionRoutes(pThis, value))
        }
    }
    public func put_Ipv4InclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        try self._n_put_Ipv4InclusionRoutes(RawPointer(value));
    }
    // [IsSpecialName] void put_Ipv6InclusionRoutes(Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute>)
    private func _n_put_Ipv6InclusionRoutes(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Ipv6InclusionRoutes(pThis, value))
        }
    }
    public func put_Ipv6InclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        try self._n_put_Ipv6InclusionRoutes(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute> get_Ipv4InclusionRoutes()
    private func _n_get_Ipv4InclusionRoutes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ipv4InclusionRoutes(pThis, __presult))
        }
    }
    public func get_Ipv4InclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>> = nil;
        try self._n_get_Ipv4InclusionRoutes(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute> get_Ipv6InclusionRoutes()
    private func _n_get_Ipv6InclusionRoutes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ipv6InclusionRoutes(pThis, __presult))
        }
    }
    public func get_Ipv6InclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>> = nil;
        try self._n_get_Ipv6InclusionRoutes(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute(consuming: __result);
    }
    // [IsSpecialName] void put_Ipv4ExclusionRoutes(Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute>)
    private func _n_put_Ipv4ExclusionRoutes(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Ipv4ExclusionRoutes(pThis, value))
        }
    }
    public func put_Ipv4ExclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        try self._n_put_Ipv4ExclusionRoutes(RawPointer(value));
    }
    // [IsSpecialName] void put_Ipv6ExclusionRoutes(Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute>)
    private func _n_put_Ipv6ExclusionRoutes(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Ipv6ExclusionRoutes(pThis, value))
        }
    }
    public func put_Ipv6ExclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        try self._n_put_Ipv6ExclusionRoutes(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute> get_Ipv4ExclusionRoutes()
    private func _n_get_Ipv4ExclusionRoutes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ipv4ExclusionRoutes(pThis, __presult))
        }
    }
    public func get_Ipv4ExclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>> = nil;
        try self._n_get_Ipv4ExclusionRoutes(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnRoute> get_Ipv6ExclusionRoutes()
    private func _n_get_Ipv6ExclusionRoutes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ipv6ExclusionRoutes(pThis, __presult))
        }
    }
    public func get_Ipv6ExclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>> = nil;
        try self._n_get_Ipv6ExclusionRoutes(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute(consuming: __result);
    }
    // [IsSpecialName] void put_ExcludeLocalSubnets(bool)
    private func _n_put_ExcludeLocalSubnets(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExcludeLocalSubnets(pThis, value))
        }
    }
    public func put_ExcludeLocalSubnets(value : boolean) throws -> Void {
        try self._n_put_ExcludeLocalSubnets(value);
    }
    // [IsSpecialName] bool get_ExcludeLocalSubnets()
    private func _n_get_ExcludeLocalSubnets(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExcludeLocalSubnets(pThis, __presult))
        }
    }
    public func get_ExcludeLocalSubnets() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ExcludeLocalSubnets(&__result);
        return __result;
    }
    public var ExcludeLocalSubnets : boolean {
        get throws {
            return try get_ExcludeLocalSubnets();
        }
    }
    public var Ipv4ExclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
            return try get_Ipv4ExclusionRoutes();
        }
    }
    public var Ipv4InclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
            return try get_Ipv4InclusionRoutes();
        }
    }
    public var Ipv6ExclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
            return try get_Ipv6ExclusionRoutes();
        }
    }
    public var Ipv6InclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
            return try get_Ipv6InclusionRoutes();
        }
    }
} // IVpnRouteAssignment


// type: Windows.Networking.Vpn.IVpnRouteFactory
// interface type
open class IVpnRouteFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbdeab5ff, Data2: 0x45cf, Data3 : 0x4b99, Data4 : (0x83, 0xfb, 0xdb, 0x3b, 0xc2, 0x67, 0x2b, 0x02)) }
    // Windows.Networking.Vpn.VpnRoute CreateVpnRoute(Windows.Networking.HostName, System.Byte)
    private func _n_CreateVpnRoute(_ address : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ prefixSize : UINT8, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnRouteFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateVpnRoute(pThis, address, prefixSize, __presult))
        }
    }
    public func CreateVpnRoute(address : Optional<Windows.Networking.IHostName>, prefixSize : Swift.UInt8) throws -> Optional<Windows.Networking.Vpn.IVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>> = nil;
        try self._n_CreateVpnRoute(RawPointer(address), prefixSize, &__result);
        return Windows.Networking.Vpn.IVpnRoute(consuming: __result);
    }
} // IVpnRouteFactory


// type: Windows.Networking.Vpn.IVpnSystemHealth
// interface type
open class IVpnSystemHealth
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x99a8f8af, Data2: 0xc0ee, Data3 : 0x4e75, Data4 : (0x81, 0x7a, 0xf2, 0x31, 0xae, 0xe5, 0x12, 0x3d)) }
    // [IsSpecialName] Windows.Storage.Streams.Buffer get_StatementOfHealth()
    private func _n_get_StatementOfHealth(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnSystemHealth.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StatementOfHealth(pThis, __presult))
        }
    }
    public func get_StatementOfHealth() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_StatementOfHealth(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var StatementOfHealth : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_StatementOfHealth();
        }
    }
} // IVpnSystemHealth


// type: Windows.Networking.Vpn.IVpnTrafficFilter
// interface type
open class IVpnTrafficFilter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f691b60, Data2: 0x6c9f, Data3 : 0x47f5, Data4 : (0xac, 0x36, 0xbb, 0x1b, 0x04, 0x2e, 0x2c, 0x50)) }
    // [IsSpecialName] Windows.Networking.Vpn.VpnAppId get_AppId()
    private func _n_get_AppId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppId(pThis, __presult))
        }
    }
    public func get_AppId() throws -> Optional<Windows.Networking.Vpn.IVpnAppId> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>> = nil;
        try self._n_get_AppId(&__result);
        return Windows.Networking.Vpn.IVpnAppId(consuming: __result);
    }
    // [IsSpecialName] void put_AppId(Windows.Networking.Vpn.VpnAppId)
    private func _n_put_AppId(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AppId(pThis, value))
        }
    }
    public func put_AppId(value : Optional<Windows.Networking.Vpn.IVpnAppId>) throws -> Void {
        try self._n_put_AppId(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_AppClaims()
    private func _n_get_AppClaims(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppClaims(pThis, __presult))
        }
    }
    public func get_AppClaims() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_AppClaims(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnIPProtocol get_Protocol()
    private func _n_get_Protocol(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnIPProtocol>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Protocol(pThis, __presult))
        }
    }
    public func get_Protocol() throws -> Windows.Networking.Vpn.VpnIPProtocol {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnIPProtocol = _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_None;
        try self._n_get_Protocol(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Protocol(Windows.Networking.Vpn.VpnIPProtocol)
    private func _n_put_Protocol(_ value : _q_CWindows_CNetworking_CVpn_CVpnIPProtocol) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Protocol(pThis, value))
        }
    }
    public func put_Protocol(value : Windows.Networking.Vpn.VpnIPProtocol) throws -> Void {
        try self._n_put_Protocol(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_LocalPortRanges()
    private func _n_get_LocalPortRanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalPortRanges(pThis, __presult))
        }
    }
    public func get_LocalPortRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_LocalPortRanges(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_RemotePortRanges()
    private func _n_get_RemotePortRanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemotePortRanges(pThis, __presult))
        }
    }
    public func get_RemotePortRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_RemotePortRanges(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_LocalAddressRanges()
    private func _n_get_LocalAddressRanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalAddressRanges(pThis, __presult))
        }
    }
    public func get_LocalAddressRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_LocalAddressRanges(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_RemoteAddressRanges()
    private func _n_get_RemoteAddressRanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteAddressRanges(pThis, __presult))
        }
    }
    public func get_RemoteAddressRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_RemoteAddressRanges(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Vpn.VpnRoutingPolicyType get_RoutingPolicyType()
    private func _n_get_RoutingPolicyType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoutingPolicyType(pThis, __presult))
        }
    }
    public func get_RoutingPolicyType() throws -> Windows.Networking.Vpn.VpnRoutingPolicyType {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType = _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType_SplitRouting;
        try self._n_get_RoutingPolicyType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RoutingPolicyType(Windows.Networking.Vpn.VpnRoutingPolicyType)
    private func _n_put_RoutingPolicyType(_ value : _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RoutingPolicyType(pThis, value))
        }
    }
    public func put_RoutingPolicyType(value : Windows.Networking.Vpn.VpnRoutingPolicyType) throws -> Void {
        try self._n_put_RoutingPolicyType(value);
    }
    public var AppClaims : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_AppClaims();
        }
    }
    public var AppId : Optional<Windows.Networking.Vpn.IVpnAppId> {
        get throws {
            return try get_AppId();
        }
    }
    public var LocalAddressRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_LocalAddressRanges();
        }
    }
    public var LocalPortRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_LocalPortRanges();
        }
    }
    public var Protocol_ : Windows.Networking.Vpn.VpnIPProtocol {
        get throws {
            return try get_Protocol();
        }
    }
    public var RemoteAddressRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_RemoteAddressRanges();
        }
    }
    public var RemotePortRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_RemotePortRanges();
        }
    }
    public var RoutingPolicyType : Windows.Networking.Vpn.VpnRoutingPolicyType {
        get throws {
            return try get_RoutingPolicyType();
        }
    }
} // IVpnTrafficFilter


// type: Windows.Networking.Vpn.IVpnTrafficFilterAssignment
// interface type
open class IVpnTrafficFilterAssignment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x56ccd45c, Data2: 0xe664, Data3 : 0x471e, Data4 : (0x89, 0xcd, 0x60, 0x16, 0x03, 0xb9, 0xe0, 0xf3)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.Vpn.VpnTrafficFilter> get_TrafficFilterList()
    private func _n_get_TrafficFilterList(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrafficFilterList(pThis, __presult))
        }
    }
    public func get_TrafficFilterList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter>> = nil;
        try self._n_get_TrafficFilterList(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter(consuming: __result);
    }
    // [IsSpecialName] bool get_AllowOutbound()
    private func _n_get_AllowOutbound(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowOutbound(pThis, __presult))
        }
    }
    public func get_AllowOutbound() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AllowOutbound(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AllowOutbound(bool)
    private func _n_put_AllowOutbound(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowOutbound(pThis, value))
        }
    }
    public func put_AllowOutbound(value : boolean) throws -> Void {
        try self._n_put_AllowOutbound(value);
    }
    // [IsSpecialName] bool get_AllowInbound()
    private func _n_get_AllowInbound(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowInbound(pThis, __presult))
        }
    }
    public func get_AllowInbound() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AllowInbound(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AllowInbound(bool)
    private func _n_put_AllowInbound(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterAssignment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowInbound(pThis, value))
        }
    }
    public func put_AllowInbound(value : boolean) throws -> Void {
        try self._n_put_AllowInbound(value);
    }
    public var AllowInbound : boolean {
        get throws {
            return try get_AllowInbound();
        }
    }
    public var AllowOutbound : boolean {
        get throws {
            return try get_AllowOutbound();
        }
    }
    public var TrafficFilterList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        get throws {
            return try get_TrafficFilterList();
        }
    }
} // IVpnTrafficFilterAssignment


// type: Windows.Networking.Vpn.IVpnTrafficFilterFactory
// interface type
// ACTIVATION INTERFACE
open class IVpnTrafficFilterFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x480d41d5, Data2: 0x7f99, Data3 : 0x474c, Data4 : (0x86, 0xee, 0x96, 0xdf, 0x16, 0x83, 0x18, 0xf1)) }
    // Windows.Networking.Vpn.VpnTrafficFilter Create(Windows.Networking.Vpn.VpnAppId)
    private func _n_Create(_ appId : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CVpn_CIVpnTrafficFilterFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, appId, __presult))
        }
    }
    public func Create(appId : Optional<Windows.Networking.Vpn.IVpnAppId>) throws -> Optional<Windows.Networking.Vpn.IVpnTrafficFilter> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>> = nil;
        try self._n_Create(RawPointer(appId), &__result);
        return Windows.Networking.Vpn.IVpnTrafficFilter(consuming: __result);
    }
} // IVpnTrafficFilterFactory


// type: Windows.Networking.Vpn.VpnAppId
// runtime class
public class VpnAppId
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnAppId;
    public init(plok: Windows.Networking.Vpn.IVpnAppId?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnAppId { return _self; }
    public init(type : Windows.Networking.Vpn.VpnAppIdType, value : Swift.String) throws {
        let _af : IVpnAppIdFactory = try RoGetActivationFactory("Windows.Networking.Vpn.VpnAppId");
        _self = try _af.Create(type: type, value: value)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Type() throws -> Windows.Networking.Vpn.VpnAppIdType {
        let _ifc : Windows.Networking.Vpn.IVpnAppId = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public func put_Type(value : Windows.Networking.Vpn.VpnAppIdType) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnAppId = try _self.QueryInterface();
        return try _ifc.put_Type(value: value);
    }
    public func get_Value() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnAppId = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public func put_Value(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnAppId = try _self.QueryInterface();
        return try _ifc.put_Value(value: value);
    }
    public var Type_ : Windows.Networking.Vpn.VpnAppIdType {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnAppId = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
    public var Value : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnAppId = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
}

// type: Windows.Networking.Vpn.VpnAppIdType
// enum type
public typealias VpnAppIdType = _q_CWindows_CNetworking_CVpn_CVpnAppIdType;

// type: Windows.Networking.Vpn.VpnAuthenticationMethod
// enum type
public typealias VpnAuthenticationMethod = _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod;

// type: Windows.Networking.Vpn.VpnChannel
// runtime class
public class VpnChannel
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnChannel;
    public init(plok: Windows.Networking.Vpn.IVpnChannel?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnChannel { return _self; }
    private struct _IVpnChannelStatics {
        static var x : IVpnChannelStatics =
            try! RoGetActivationFactory("Windows.Networking.Vpn.VpnChannel")
    }
    public static var VpnChannelStatics : IVpnChannelStatics {
        _IVpnChannelStatics.x
    }
    public static func ProcessEventAsync(thirdPartyPlugIn : Optional<WinRT.Object>, event : Optional<WinRT.Object>) throws -> Void {
        return try VpnChannelStatics.ProcessEventAsync(thirdPartyPlugIn: thirdPartyPlugIn!.GetInterface(), event: event!.GetInterface());
    }
    public func AssociateTransport(mainOuterTunnelTransport : Optional<WinRT.Object>, optionalOuterTunnelTransport : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.AssociateTransport(mainOuterTunnelTransport: mainOuterTunnelTransport!.GetInterface(), optionalOuterTunnelTransport: optionalOuterTunnelTransport!.GetInterface());
    }
    public func Start(assignedClientIPv4list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIPv6list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.VpnInterfaceId>, routeScope : Optional<Windows.Networking.Vpn.VpnRouteAssignment>, namespaceScope : Optional<Windows.Networking.Vpn.VpnNamespaceAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, optimizeForLowCostNetwork : boolean, mainOuterTunnelTransport : Optional<WinRT.Object>, optionalOuterTunnelTransport : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.Start(assignedClientIPv4list: assignedClientIPv4list, assignedClientIPv6list: assignedClientIPv6list, vpnInterfaceId: vpnInterfaceId!.Interface(), routeScope: routeScope!.Interface(), namespaceScope: namespaceScope!.Interface(), mtuSize: mtuSize, maxFrameSize: maxFrameSize, optimizeForLowCostNetwork: optimizeForLowCostNetwork, mainOuterTunnelTransport: mainOuterTunnelTransport!.GetInterface(), optionalOuterTunnelTransport: optionalOuterTunnelTransport!.GetInterface());
    }
    public func Stop() throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public func RequestCredentials(credType : Windows.Networking.Vpn.VpnCredentialType, isRetry : boolean, isSingleSignOnCredential : boolean, certificate : Optional<Windows.Security.Cryptography.Certificates.Certificate>) throws -> Optional<Windows.Networking.Vpn.VpnPickedCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnPickedCredential(plok: _ifc.RequestCredentials(credType: credType, isRetry: isRetry, isSingleSignOnCredential: isSingleSignOnCredential, certificate: certificate!.Interface()));
    }
    public func RequestVpnPacketBuffer(type : Windows.Networking.Vpn.VpnDataPathType, vpnPacketBuffer : inout Optional<Windows.Networking.Vpn.VpnPacketBuffer>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
            var _tmp_out_vpnPacketBuffer: Optional<Windows.Networking.Vpn.IVpnPacketBuffer> = nil;
        return try _ifc.RequestVpnPacketBuffer(type: type, vpnPacketBuffer: &_tmp_out_vpnPacketBuffer);
    }
    public func LogDiagnosticMessage(message : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.LogDiagnosticMessage(message: message);
    }
    public func get_Id() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_Configuration() throws -> Optional<Windows.Networking.Vpn.VpnChannelConfiguration> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnChannelConfiguration(plok: _ifc.get_Configuration());
    }
    public func add_ActivityChange(handler : @escaping (Optional<Windows.Networking.Vpn.VpnChannel>, Optional<Windows.Networking.Vpn.VpnChannelActivityEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.add_ActivityChange(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs(cb: handler).Interface());
    }
    public func remove_ActivityChange(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.remove_ActivityChange(token: token);
    }
    public func put_PlugInContext(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.put_PlugInContext(value: value!.GetInterface());
    }
    public func get_PlugInContext() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.get_PlugInContext();
    }
    public func get_SystemHealth() throws -> Optional<Windows.Networking.Vpn.VpnSystemHealth> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnSystemHealth(plok: _ifc.get_SystemHealth());
    }
    public func RequestCustomPrompt(customPrompt : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.RequestCustomPrompt(customPrompt: customPrompt);
    }
    public func SetErrorMessage(message : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.SetErrorMessage(message: message);
    }
    public func SetAllowedSslTlsVersions(tunnelTransport : Optional<WinRT.Object>, useTls12 : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.SetAllowedSslTlsVersions(tunnelTransport: tunnelTransport!.GetInterface(), useTls12: useTls12);
    }
    public var Configuration : Optional<Windows.Networking.Vpn.VpnChannelConfiguration> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnChannelConfiguration(plok: _ifc.Configuration);
        }
    }
    public var Id : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var PlugInContext : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try _ifc.PlugInContext;
        }
    }
    public var SystemHealth : Optional<Windows.Networking.Vpn.VpnSystemHealth> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannel = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnSystemHealth(plok: _ifc.SystemHealth);
        }
    }
    public func StartWithMainTransport(assignedClientIPv4list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIPv6list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.VpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.VpnRouteAssignment>, assignedDomainName : Optional<Windows.Networking.Vpn.VpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, Reserved : boolean, mainOuterTunnelTransport : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.StartWithMainTransport(assignedClientIPv4list: assignedClientIPv4list, assignedClientIPv6list: assignedClientIPv6list, vpnInterfaceId: vpnInterfaceId!.Interface(), assignedRoutes: assignedRoutes!.Interface(), assignedDomainName: assignedDomainName!.Interface(), mtuSize: mtuSize, maxFrameSize: maxFrameSize, Reserved: Reserved, mainOuterTunnelTransport: mainOuterTunnelTransport!.GetInterface());
    }
    public func StartExistingTransports(assignedClientIPv4list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIPv6list : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.VpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.VpnRouteAssignment>, assignedDomainName : Optional<Windows.Networking.Vpn.VpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, Reserved : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.StartExistingTransports(assignedClientIPv4list: assignedClientIPv4list, assignedClientIPv6list: assignedClientIPv6list, vpnInterfaceId: vpnInterfaceId!.Interface(), assignedRoutes: assignedRoutes!.Interface(), assignedDomainName: assignedDomainName!.Interface(), mtuSize: mtuSize, maxFrameSize: maxFrameSize, Reserved: Reserved);
    }
    public func add_ActivityStateChange(handler : @escaping (Optional<Windows.Networking.Vpn.VpnChannel>, Optional<Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.add_ActivityStateChange(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs(cb: handler).Interface());
    }
    public func remove_ActivityStateChange(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.remove_ActivityStateChange(token: token);
    }
    public func GetVpnSendPacketBuffer() throws -> Optional<Windows.Networking.Vpn.VpnPacketBuffer> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnPacketBuffer(plok: _ifc.GetVpnSendPacketBuffer());
    }
    public func GetVpnReceivePacketBuffer() throws -> Optional<Windows.Networking.Vpn.VpnPacketBuffer> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnPacketBuffer(plok: _ifc.GetVpnReceivePacketBuffer());
    }
    public func RequestCustomPromptAsync(customPromptElement : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.RequestCustomPromptAsync(customPromptElement: customPromptElement);
    }
    public func RequestCustomPrompt(customPromptElement : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RequestCustomPromptAsync(customPromptElement: customPromptElement)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RequestCredentialsAsync(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32, certificate : Optional<Windows.Security.Cryptography.Certificates.Certificate>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.RequestCredentialsWithCertificateAsync(credType: credType, credOptions: credOptions, certificate: certificate!.Interface());
    }
    public func RequestCredentials(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32, certificate : Optional<Windows.Security.Cryptography.Certificates.Certificate>) async throws -> Optional<Windows.Networking.Vpn.VpnCredential> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.Vpn.VpnCredential(plok: self.RequestCredentialsAsync(credType: credType, credOptions: credOptions, certificate: certificate)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RequestCredentialsAsync(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.RequestCredentialsWithOptionsAsync(credType: credType, credOptions: credOptions);
    }
    public func RequestCredentials(credType : Windows.Networking.Vpn.VpnCredentialType, credOptions : Swift.UInt32) async throws -> Optional<Windows.Networking.Vpn.VpnCredential> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.Vpn.VpnCredential(plok: self.RequestCredentialsAsync(credType: credType, credOptions: credOptions)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RequestCredentialsAsync(credType : Windows.Networking.Vpn.VpnCredentialType) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.RequestCredentialsSimpleAsync(credType: credType);
    }
    public func RequestCredentials(credType : Windows.Networking.Vpn.VpnCredentialType) async throws -> Optional<Windows.Networking.Vpn.VpnCredential> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.Vpn.VpnCredential(plok: self.RequestCredentialsAsync(credType: credType)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func TerminateConnection(message : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.TerminateConnection(message: message);
    }
    public func StartWithTrafficFilter(assignedClientIpv4List : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, assignedClientIpv6List : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName>, vpnInterfaceId : Optional<Windows.Networking.Vpn.VpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.VpnRouteAssignment>, assignedNamespace : Optional<Windows.Networking.Vpn.VpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, reserved : boolean, mainOuterTunnelTransport : Optional<WinRT.Object>, optionalOuterTunnelTransport : Optional<WinRT.Object>, assignedTrafficFilters : Optional<Windows.Networking.Vpn.VpnTrafficFilterAssignment>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel2 = try _self.QueryInterface();
        return try _ifc.StartWithTrafficFilter(assignedClientIpv4List: assignedClientIpv4List, assignedClientIpv6List: assignedClientIpv6List, vpnInterfaceId: vpnInterfaceId!.Interface(), assignedRoutes: assignedRoutes!.Interface(), assignedNamespace: assignedNamespace!.Interface(), mtuSize: mtuSize, maxFrameSize: maxFrameSize, reserved: reserved, mainOuterTunnelTransport: mainOuterTunnelTransport!.GetInterface(), optionalOuterTunnelTransport: optionalOuterTunnelTransport!.GetInterface(), assignedTrafficFilters: assignedTrafficFilters!.Interface());
    }
    public func AddAndAssociateTransport(transport : Optional<WinRT.Object>, context : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel4 = try _self.QueryInterface();
        return try _ifc.AddAndAssociateTransport(transport: transport!.GetInterface(), context: context!.GetInterface());
    }
    public func StartWithTrafficFilter(assignedClientIpv4Addresses : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>, assignedClientIpv6Addresses : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>, vpninterfaceId : Optional<Windows.Networking.Vpn.VpnInterfaceId>, assignedRoutes : Optional<Windows.Networking.Vpn.VpnRouteAssignment>, assignedNamespace : Optional<Windows.Networking.Vpn.VpnDomainNameAssignment>, mtuSize : Swift.UInt32, maxFrameSize : Swift.UInt32, reserved : boolean, transports : Optional<ClosedGenerics.IIterable_1_IInspectable>, assignedTrafficFilters : Optional<Windows.Networking.Vpn.VpnTrafficFilterAssignment>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel4 = try _self.QueryInterface();
        return try _ifc.StartWithMultipleTransports(assignedClientIpv4Addresses: assignedClientIpv4Addresses, assignedClientIpv6Addresses: assignedClientIpv6Addresses, vpninterfaceId: vpninterfaceId!.Interface(), assignedRoutes: assignedRoutes!.Interface(), assignedNamespace: assignedNamespace!.Interface(), mtuSize: mtuSize, maxFrameSize: maxFrameSize, reserved: reserved, transports: transports, assignedTrafficFilters: assignedTrafficFilters!.Interface());
    }
    public func ReplaceAndAssociateTransport(transport : Optional<WinRT.Object>, context : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel4 = try _self.QueryInterface();
        return try _ifc.ReplaceAndAssociateTransport(transport: transport!.GetInterface(), context: context!.GetInterface());
    }
    public func StartReconnectingTransport(transport : Optional<WinRT.Object>, context : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel4 = try _self.QueryInterface();
        return try _ifc.StartReconnectingTransport(transport: transport!.GetInterface(), context: context!.GetInterface());
    }
    public func GetSlotTypeForTransportContext(context : Optional<WinRT.Object>) throws -> Windows.Networking.Sockets.ControlChannelTriggerStatus {
        let _ifc : Windows.Networking.Vpn.IVpnChannel4 = try _self.QueryInterface();
        return try _ifc.GetSlotTypeForTransportContext(context: context!.GetInterface());
    }
    public func get_CurrentRequestTransportContext() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel4 = try _self.QueryInterface();
        return try _ifc.get_CurrentRequestTransportContext();
    }
    public var CurrentRequestTransportContext : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannel4 = try _self.QueryInterface();
        return try _ifc.CurrentRequestTransportContext;
        }
    }
    public func AppendVpnReceivePacketBuffer(decapsulatedPacketBuffer : Optional<Windows.Networking.Vpn.VpnPacketBuffer>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel5 = try _self.QueryInterface();
        return try _ifc.AppendVpnReceivePacketBuffer(decapsulatedPacketBuffer: decapsulatedPacketBuffer!.Interface());
    }
    public func AppendVpnSendPacketBuffer(encapsulatedPacketBuffer : Optional<Windows.Networking.Vpn.VpnPacketBuffer>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel5 = try _self.QueryInterface();
        return try _ifc.AppendVpnSendPacketBuffer(encapsulatedPacketBuffer: encapsulatedPacketBuffer!.Interface());
    }
    public func FlushVpnReceivePacketBuffers() throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel5 = try _self.QueryInterface();
        return try _ifc.FlushVpnReceivePacketBuffers();
    }
    public func FlushVpnSendPacketBuffers() throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnChannel5 = try _self.QueryInterface();
        return try _ifc.FlushVpnSendPacketBuffers();
    }
    public func ActivateForeground(packageRelativeAppId : Swift.String, sharedContext : Optional<Windows.Foundation.Collections.ValueSet>) throws -> Optional<Windows.Foundation.Collections.ValueSet> {
        let _ifc : Windows.Networking.Vpn.IVpnChannel6 = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.ActivateForeground(packageRelativeAppId: packageRelativeAppId, sharedContext: sharedContext!.Interface()));
    }
}

// type: Windows.Networking.Vpn.VpnChannelActivityEventArgs
// runtime class
public class VpnChannelActivityEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnChannelActivityEventArgs;
    public init(plok: Windows.Networking.Vpn.IVpnChannelActivityEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnChannelActivityEventArgs { return _self; }
    public func get_Type() throws -> Windows.Networking.Vpn.VpnChannelActivityEventType {
        let _ifc : Windows.Networking.Vpn.IVpnChannelActivityEventArgs = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public var Type_ : Windows.Networking.Vpn.VpnChannelActivityEventType {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannelActivityEventArgs = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
}

// type: Windows.Networking.Vpn.VpnChannelActivityEventType
// enum type
public typealias VpnChannelActivityEventType = _q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType;

// type: Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs
// runtime class
public class VpnChannelActivityStateChangedArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs;
    public init(plok: Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs { return _self; }
    public func get_ActivityState() throws -> Windows.Networking.Vpn.VpnChannelActivityEventType {
        let _ifc : Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs = try _self.QueryInterface();
        return try _ifc.get_ActivityState();
    }
    public var ActivityState : Windows.Networking.Vpn.VpnChannelActivityEventType {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs = try _self.QueryInterface();
        return try _ifc.ActivityState;
        }
    }
}

// type: Windows.Networking.Vpn.VpnChannelConfiguration
// runtime class
public class VpnChannelConfiguration
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnChannelConfiguration;
    public init(plok: Windows.Networking.Vpn.IVpnChannelConfiguration?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnChannelConfiguration { return _self; }
    public func get_ServerServiceName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration = try _self.QueryInterface();
        return try _ifc.get_ServerServiceName();
    }
    public func get_ServerHostNameList() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration = try _self.QueryInterface();
        return try _ifc.get_ServerHostNameList();
    }
    public func get_CustomField() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration = try _self.QueryInterface();
        return try _ifc.get_CustomField();
    }
    public var CustomField : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration = try _self.QueryInterface();
        return try _ifc.CustomField;
        }
    }
    public var ServerHostNameList : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration = try _self.QueryInterface();
        return try _ifc.ServerHostNameList;
        }
    }
    public var ServerServiceName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration = try _self.QueryInterface();
        return try _ifc.ServerServiceName;
        }
    }
    public func get_ServerUris() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration2 = try _self.QueryInterface();
        return try _ifc.get_ServerUris();
    }
    public var ServerUris : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnChannelConfiguration2 = try _self.QueryInterface();
        return try _ifc.ServerUris;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCredential
// runtime class
public class VpnCredential
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCredential;
    public init(plok: Windows.Networking.Vpn.IVpnCredential?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCredential { return _self; }
    public func get_PasskeyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_PasskeyCredential());
    }
    public func get_CertificateCredential() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_CertificateCredential());
    }
    public func get_AdditionalPin() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try _ifc.get_AdditionalPin();
    }
    public func get_OldPasswordCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_OldPasswordCredential());
    }
    public var AdditionalPin : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try _ifc.AdditionalPin;
        }
    }
    public var CertificateCredential : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.CertificateCredential);
        }
    }
    public var OldPasswordCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.OldPasswordCredential);
        }
    }
    public var PasskeyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.PasskeyCredential);
        }
    }
}

// type: Windows.Networking.Vpn.VpnCredentialType
// enum type
public typealias VpnCredentialType = _q_CWindows_CNetworking_CVpn_CVpnCredentialType;

// type: Windows.Networking.Vpn.VpnCustomCheckBox
// runtime class
public class VpnCustomCheckBox
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomCheckBox;
    public init(plok: Windows.Networking.Vpn.IVpnCustomCheckBox?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomCheckBox { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomCheckBox")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_InitialCheckState(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomCheckBox = try _self.QueryInterface();
        return try _ifc.put_InitialCheckState(value: value);
    }
    public func get_InitialCheckState() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomCheckBox = try _self.QueryInterface();
        return try _ifc.get_InitialCheckState();
    }
    public func get_Checked() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomCheckBox = try _self.QueryInterface();
        return try _ifc.get_Checked();
    }
    public var Checked : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomCheckBox = try _self.QueryInterface();
        return try _ifc.Checked;
        }
    }
    public var InitialCheckState : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomCheckBox = try _self.QueryInterface();
        return try _ifc.InitialCheckState;
        }
    }
    public func put_Label(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Label(value: value);
    }
    public func get_Label() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Label();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Bordered(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Bordered(value: value);
    }
    public func get_Bordered() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Bordered();
    }
    public var Bordered : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Bordered;
        }
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var Label : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Label;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomComboBox
// runtime class
public class VpnCustomComboBox
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomComboBox;
    public init(plok: Windows.Networking.Vpn.IVpnCustomComboBox?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomComboBox { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomComboBox")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_OptionsText(value : Optional<ClosedGenerics.IVectorView_1_HSTRING>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomComboBox = try _self.QueryInterface();
        return try _ifc.put_OptionsText(value: value);
    }
    public func get_OptionsText() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomComboBox = try _self.QueryInterface();
        return try _ifc.get_OptionsText();
    }
    public func get_Selected() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Vpn.IVpnCustomComboBox = try _self.QueryInterface();
        return try _ifc.get_Selected();
    }
    public var OptionsText : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomComboBox = try _self.QueryInterface();
        return try _ifc.OptionsText;
        }
    }
    public var Selected : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomComboBox = try _self.QueryInterface();
        return try _ifc.Selected;
        }
    }
    public func put_Label(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Label(value: value);
    }
    public func get_Label() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Label();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Bordered(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Bordered(value: value);
    }
    public func get_Bordered() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Bordered();
    }
    public var Bordered : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Bordered;
        }
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var Label : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Label;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomEditBox
// runtime class
public class VpnCustomEditBox
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomEditBox;
    public init(plok: Windows.Networking.Vpn.IVpnCustomEditBox?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomEditBox { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomEditBox")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_DefaultText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.put_DefaultText(value: value);
    }
    public func get_DefaultText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.get_DefaultText();
    }
    public func put_NoEcho(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.put_NoEcho(value: value);
    }
    public func get_NoEcho() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.get_NoEcho();
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public var DefaultText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.DefaultText;
        }
    }
    public var NoEcho : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.NoEcho;
        }
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomEditBox = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public func put_Label(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Label(value: value);
    }
    public func get_Label() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Label();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Bordered(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Bordered(value: value);
    }
    public func get_Bordered() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Bordered();
    }
    public var Bordered : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Bordered;
        }
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var Label : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Label;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomErrorBox
// runtime class
public class VpnCustomErrorBox
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomErrorBox;
    public init(plok: Windows.Networking.Vpn.IVpnCustomErrorBox?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomErrorBox { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomErrorBox")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_Label(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Label(value: value);
    }
    public func get_Label() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Label();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Bordered(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Bordered(value: value);
    }
    public func get_Bordered() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Bordered();
    }
    public var Bordered : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Bordered;
        }
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var Label : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Label;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomPromptBooleanInput
// runtime class
public class VpnCustomPromptBooleanInput
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomPromptBooleanInput;
    public init(plok: Windows.Networking.Vpn.IVpnCustomPromptBooleanInput?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomPromptBooleanInput { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomPromptBooleanInput")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_InitialValue(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptBooleanInput = try _self.QueryInterface();
        return try _ifc.put_InitialValue(value: value);
    }
    public func get_InitialValue() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptBooleanInput = try _self.QueryInterface();
        return try _ifc.get_InitialValue();
    }
    public func get_Value() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptBooleanInput = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public var InitialValue : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptBooleanInput = try _self.QueryInterface();
        return try _ifc.InitialValue;
        }
    }
    public var Value : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptBooleanInput = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
    public func put_DisplayName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_DisplayName(value: value);
    }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Emphasized(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Emphasized(value: value);
    }
    public func get_Emphasized() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Emphasized();
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public var Emphasized : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Emphasized;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomPromptOptionSelector
// runtime class
public class VpnCustomPromptOptionSelector
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomPromptOptionSelector;
    public init(plok: Windows.Networking.Vpn.IVpnCustomPromptOptionSelector?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomPromptOptionSelector { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomPromptOptionSelector")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Options() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptOptionSelector = try _self.QueryInterface();
        return try _ifc.get_Options();
    }
    public func get_SelectedIndex() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptOptionSelector = try _self.QueryInterface();
        return try _ifc.get_SelectedIndex();
    }
    public var Options : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptOptionSelector = try _self.QueryInterface();
        return try _ifc.Options;
        }
    }
    public var SelectedIndex : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptOptionSelector = try _self.QueryInterface();
        return try _ifc.SelectedIndex;
        }
    }
    public func put_DisplayName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_DisplayName(value: value);
    }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Emphasized(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Emphasized(value: value);
    }
    public func get_Emphasized() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Emphasized();
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public var Emphasized : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Emphasized;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomPromptText
// runtime class
public class VpnCustomPromptText
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomPromptText;
    public init(plok: Windows.Networking.Vpn.IVpnCustomPromptText?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomPromptText { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomPromptText")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptText = try _self.QueryInterface();
        return try _ifc.put_Text(value: value);
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptText = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptText = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public func put_DisplayName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_DisplayName(value: value);
    }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Emphasized(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Emphasized(value: value);
    }
    public func get_Emphasized() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Emphasized();
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public var Emphasized : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Emphasized;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomPromptTextInput
// runtime class
public class VpnCustomPromptTextInput
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomPromptTextInput;
    public init(plok: Windows.Networking.Vpn.IVpnCustomPromptTextInput?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomPromptTextInput { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomPromptTextInput")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_PlaceholderText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.put_PlaceholderText(value: value);
    }
    public func get_PlaceholderText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.get_PlaceholderText();
    }
    public func put_IsTextHidden(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.put_IsTextHidden(value: value);
    }
    public func get_IsTextHidden() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.get_IsTextHidden();
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public var IsTextHidden : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.IsTextHidden;
        }
    }
    public var PlaceholderText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.PlaceholderText;
        }
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptTextInput = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public func put_DisplayName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_DisplayName(value: value);
    }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Emphasized(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.put_Emphasized(value: value);
    }
    public func get_Emphasized() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.get_Emphasized();
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public var Emphasized : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPromptElement = try _self.QueryInterface();
        return try _ifc.Emphasized;
        }
    }
}

// type: Windows.Networking.Vpn.VpnCustomTextBox
// runtime class
public class VpnCustomTextBox
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnCustomTextBox;
    public init(plok: Windows.Networking.Vpn.IVpnCustomTextBox?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnCustomTextBox { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnCustomTextBox")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_DisplayText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomTextBox = try _self.QueryInterface();
        return try _ifc.put_DisplayText(value: value);
    }
    public func get_DisplayText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomTextBox = try _self.QueryInterface();
        return try _ifc.get_DisplayText();
    }
    public var DisplayText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomTextBox = try _self.QueryInterface();
        return try _ifc.DisplayText;
        }
    }
    public func put_Label(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Label(value: value);
    }
    public func get_Label() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Label();
    }
    public func put_Compulsory(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Compulsory(value: value);
    }
    public func get_Compulsory() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Compulsory();
    }
    public func put_Bordered(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.put_Bordered(value: value);
    }
    public func get_Bordered() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.get_Bordered();
    }
    public var Bordered : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Bordered;
        }
    }
    public var Compulsory : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Compulsory;
        }
    }
    public var Label : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnCustomPrompt = try _self.QueryInterface();
        return try _ifc.Label;
        }
    }
}

// type: Windows.Networking.Vpn.VpnDataPathType
// enum type
public typealias VpnDataPathType = _q_CWindows_CNetworking_CVpn_CVpnDataPathType;

// type: Windows.Networking.Vpn.VpnDomainNameAssignment
// runtime class
public class VpnDomainNameAssignment
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnDomainNameAssignment;
    public init(plok: Windows.Networking.Vpn.IVpnDomainNameAssignment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnDomainNameAssignment { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnDomainNameAssignment")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_DomainNameList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameAssignment = try _self.QueryInterface();
        return try _ifc.get_DomainNameList();
    }
    public func put_ProxyAutoConfigurationUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameAssignment = try _self.QueryInterface();
        return try _ifc.put_ProxyAutoConfigurationUri(value: value!.Interface());
    }
    public func get_ProxyAutoConfigurationUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameAssignment = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_ProxyAutoConfigurationUri());
    }
    public var DomainNameList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameAssignment = try _self.QueryInterface();
        return try _ifc.DomainNameList;
        }
    }
    public var ProxyAutoConfigurationUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameAssignment = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.ProxyAutoConfigurationUri);
        }
    }
}

// type: Windows.Networking.Vpn.VpnDomainNameInfo
// runtime class
public class VpnDomainNameInfo
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnDomainNameInfo;
    public init(plok: Windows.Networking.Vpn.IVpnDomainNameInfo?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnDomainNameInfo { return _self; }
    public init(name : Swift.String, nameType : Windows.Networking.Vpn.VpnDomainNameType, dnsServerList : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>, proxyServerList : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CHostName>) throws {
        let _af : IVpnDomainNameInfoFactory = try RoGetActivationFactory("Windows.Networking.Vpn.VpnDomainNameInfo");
        _self = try _af.CreateVpnDomainNameInfo(name: name, nameType: nameType, dnsServerList: dnsServerList, proxyServerList: proxyServerList)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func put_DomainName(value : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.put_DomainName(value: value!.Interface());
    }
    public func get_DomainName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_DomainName());
    }
    public func put_DomainNameType(value : Windows.Networking.Vpn.VpnDomainNameType) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.put_DomainNameType(value: value);
    }
    public func get_DomainNameType() throws -> Windows.Networking.Vpn.VpnDomainNameType {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.get_DomainNameType();
    }
    public func get_DnsServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.get_DnsServers();
    }
    public func get_WebProxyServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.get_WebProxyServers();
    }
    public var DnsServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.DnsServers;
        }
    }
    public var DomainName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.DomainName);
        }
    }
    public var DomainNameType : Windows.Networking.Vpn.VpnDomainNameType {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.DomainNameType;
        }
    }
    public var WebProxyServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo = try _self.QueryInterface();
        return try _ifc.WebProxyServers;
        }
    }
    public func get_WebProxyUris() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo2 = try _self.QueryInterface();
        return try _ifc.get_WebProxyUris();
    }
    public var WebProxyUris : Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnDomainNameInfo2 = try _self.QueryInterface();
        return try _ifc.WebProxyUris;
        }
    }
}

// type: Windows.Networking.Vpn.VpnDomainNameType
// enum type
public typealias VpnDomainNameType = _q_CWindows_CNetworking_CVpn_CVpnDomainNameType;

// type: Windows.Networking.Vpn.VpnForegroundActivatedEventArgs
// runtime class
public class VpnForegroundActivatedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs;
    public init(plok: Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs { return _self; }
    public func get_ProfileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_ProfileName();
    }
    public func get_SharedContext() throws -> Optional<Windows.Foundation.Collections.ValueSet> {
        let _ifc : Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.get_SharedContext());
    }
    public func get_ActivationOperation() throws -> Optional<Windows.Networking.Vpn.VpnForegroundActivationOperation> {
        let _ifc : Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnForegroundActivationOperation(plok: _ifc.get_ActivationOperation());
    }
    public var ActivationOperation : Optional<Windows.Networking.Vpn.VpnForegroundActivationOperation> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnForegroundActivationOperation(plok: _ifc.ActivationOperation);
        }
    }
    public var ProfileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs = try _self.QueryInterface();
        return try _ifc.ProfileName;
        }
    }
    public var SharedContext : Optional<Windows.Foundation.Collections.ValueSet> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnForegroundActivatedEventArgs = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.SharedContext);
        }
    }
    public func get_Kind() throws -> Windows.ApplicationModel.Activation.ActivationKind {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Kind();
    }
    public func get_PreviousExecutionState() throws -> Windows.ApplicationModel.Activation.ApplicationExecutionState {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_PreviousExecutionState();
    }
    public func get_SplashScreen() throws -> Optional<Windows.ApplicationModel.Activation.SplashScreen> {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgs = try _self.QueryInterface();
        return try Windows.ApplicationModel.Activation.SplashScreen(plok: _ifc.get_SplashScreen());
    }
    public var Kind : Windows.ApplicationModel.Activation.ActivationKind {
        get throws {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgs = try _self.QueryInterface();
        return try _ifc.Kind;
        }
    }
    public var PreviousExecutionState : Windows.ApplicationModel.Activation.ApplicationExecutionState {
        get throws {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgs = try _self.QueryInterface();
        return try _ifc.PreviousExecutionState;
        }
    }
    public var SplashScreen : Optional<Windows.ApplicationModel.Activation.SplashScreen> {
        get throws {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgs = try _self.QueryInterface();
        return try Windows.ApplicationModel.Activation.SplashScreen(plok: _ifc.SplashScreen);
        }
    }
    public func get_User() throws -> Optional<Windows.System.User> {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.get_User());
    }
    public var User : Optional<Windows.System.User> {
        get throws {
        let _ifc : Windows.ApplicationModel.Activation.IActivatedEventArgsWithUser = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.User);
        }
    }
}

// type: Windows.Networking.Vpn.VpnForegroundActivationOperation
// runtime class
public class VpnForegroundActivationOperation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnForegroundActivationOperation;
    public init(plok: Windows.Networking.Vpn.IVpnForegroundActivationOperation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnForegroundActivationOperation { return _self; }
    public func Complete(result : Optional<Windows.Foundation.Collections.ValueSet>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnForegroundActivationOperation = try _self.QueryInterface();
        return try _ifc.Complete(result: result!.Interface());
    }
}

// type: Windows.Networking.Vpn.VpnIPProtocol
// enum type
public typealias VpnIPProtocol = _q_CWindows_CNetworking_CVpn_CVpnIPProtocol;

// type: Windows.Networking.Vpn.VpnInterfaceId
// runtime class
public class VpnInterfaceId
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnInterfaceId;
    public init(plok: Windows.Networking.Vpn.IVpnInterfaceId?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnInterfaceId { return _self; }
    public init(addressLength : UINT32, address : Optional<UnsafeMutablePointer<UINT8>>) throws {
        let _af : IVpnInterfaceIdFactory = try RoGetActivationFactory("Windows.Networking.Vpn.VpnInterfaceId");
        _self = try _af.CreateVpnInterfaceId(addressLength: addressLength, address: address)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func GetAddressInfo(idLength : inout UINT32, id : inout Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnInterfaceId = try _self.QueryInterface();
            var _tmp_out_idLength: UINT32 = 0;
            var _tmp_out_id: Optional<UnsafeMutablePointer<UINT8>> = nil;
        return try _ifc.GetAddressInfo(idLength: &_tmp_out_idLength, id: &_tmp_out_id);
    }
}

// type: Windows.Networking.Vpn.VpnManagementAgent
// runtime class
public class VpnManagementAgent
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnManagementAgent;
    public init(plok: Windows.Networking.Vpn.IVpnManagementAgent?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnManagementAgent { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnManagementAgent")
        try super.init(plok: _self.QueryInterface())
    }
    public func AddProfileFromXmlAsync(xml : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.AddProfileFromXmlAsync(xml: xml);
    }
    public func AddProfileFromXml(xml : Swift.String) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AddProfileFromXmlAsync(xml: xml)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func AddProfileFromObjectAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.AddProfileFromObjectAsync(profile: profile);
    }
    public func AddProfileFromObject(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AddProfileFromObjectAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func UpdateProfileFromXmlAsync(xml : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.UpdateProfileFromXmlAsync(xml: xml);
    }
    public func UpdateProfileFromXml(xml : Swift.String) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpdateProfileFromXmlAsync(xml: xml)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func UpdateProfileFromObjectAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.UpdateProfileFromObjectAsync(profile: profile);
    }
    public func UpdateProfileFromObject(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpdateProfileFromObjectAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetProfilesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.GetProfilesAsync();
    }
    public func GetProfiles() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetProfilesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteProfileAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.DeleteProfileAsync(profile: profile);
    }
    public func DeleteProfile(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteProfileAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConnectProfileAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.ConnectProfileAsync(profile: profile);
    }
    public func ConnectProfile(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectProfileAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConnectProfileWithPasswordCredentialAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>, passwordCredential : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.ConnectProfileWithPasswordCredentialAsync(profile: profile, passwordCredential: passwordCredential!.Interface());
    }
    public func ConnectProfileWithPasswordCredential(profile : Optional<Windows.Networking.Vpn.IVpnProfile>, passwordCredential : Optional<Windows.Security.Credentials.PasswordCredential>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectProfileWithPasswordCredentialAsync(profile: profile, passwordCredential: passwordCredential)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DisconnectProfileAsync(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        let _ifc : Windows.Networking.Vpn.IVpnManagementAgent = try _self.QueryInterface();
        return try _ifc.DisconnectProfileAsync(profile: profile);
    }
    public func DisconnectProfile(profile : Optional<Windows.Networking.Vpn.IVpnProfile>) async throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DisconnectProfileAsync(profile: profile)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Networking.Vpn.VpnManagementConnectionStatus
// enum type
public typealias VpnManagementConnectionStatus = _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus;

// type: Windows.Networking.Vpn.VpnManagementErrorStatus
// enum type
public typealias VpnManagementErrorStatus = _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus;

// type: Windows.Networking.Vpn.VpnNamespaceAssignment
// runtime class
public class VpnNamespaceAssignment
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnNamespaceAssignment;
    public init(plok: Windows.Networking.Vpn.IVpnNamespaceAssignment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnNamespaceAssignment { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnNamespaceAssignment")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_NamespaceList(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceAssignment = try _self.QueryInterface();
        return try _ifc.put_NamespaceList(value: value);
    }
    public func get_NamespaceList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo> {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceAssignment = try _self.QueryInterface();
        return try _ifc.get_NamespaceList();
    }
    public func put_ProxyAutoConfigUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceAssignment = try _self.QueryInterface();
        return try _ifc.put_ProxyAutoConfigUri(value: value!.Interface());
    }
    public func get_ProxyAutoConfigUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceAssignment = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_ProxyAutoConfigUri());
    }
    public var NamespaceList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceAssignment = try _self.QueryInterface();
        return try _ifc.NamespaceList;
        }
    }
    public var ProxyAutoConfigUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceAssignment = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.ProxyAutoConfigUri);
        }
    }
}

// type: Windows.Networking.Vpn.VpnNamespaceInfo
// runtime class
public class VpnNamespaceInfo
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnNamespaceInfo;
    public init(plok: Windows.Networking.Vpn.IVpnNamespaceInfo?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnNamespaceInfo { return _self; }
    public init(name : Swift.String, dnsServerList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>, proxyServerList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>) throws {
        let _af : IVpnNamespaceInfoFactory = try RoGetActivationFactory("Windows.Networking.Vpn.VpnNamespaceInfo");
        _self = try _af.CreateVpnNamespaceInfo(name: name, dnsServerList: dnsServerList, proxyServerList: proxyServerList)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func put_Namespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.put_Namespace(value: value);
    }
    public func get_Namespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.get_Namespace();
    }
    public func put_DnsServers(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.put_DnsServers(value: value);
    }
    public func get_DnsServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.get_DnsServers();
    }
    public func put_WebProxyServers(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.put_WebProxyServers(value: value);
    }
    public func get_WebProxyServers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.get_WebProxyServers();
    }
    public var DnsServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.DnsServers;
        }
    }
    public var Namespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.Namespace;
        }
    }
    public var WebProxyServers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CHostName> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNamespaceInfo = try _self.QueryInterface();
        return try _ifc.WebProxyServers;
        }
    }
}

// type: Windows.Networking.Vpn.VpnNativeProfile
// runtime class
public class VpnNativeProfile
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnNativeProfile;
    public init(plok: Windows.Networking.Vpn.IVpnNativeProfile?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnNativeProfile { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnNativeProfile")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Servers() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.get_Servers();
    }
    public func get_RoutingPolicyType() throws -> Windows.Networking.Vpn.VpnRoutingPolicyType {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.get_RoutingPolicyType();
    }
    public func put_RoutingPolicyType(value : Windows.Networking.Vpn.VpnRoutingPolicyType) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.put_RoutingPolicyType(value: value);
    }
    public func get_NativeProtocolType() throws -> Windows.Networking.Vpn.VpnNativeProtocolType {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.get_NativeProtocolType();
    }
    public func put_NativeProtocolType(value : Windows.Networking.Vpn.VpnNativeProtocolType) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.put_NativeProtocolType(value: value);
    }
    public func get_UserAuthenticationMethod() throws -> Windows.Networking.Vpn.VpnAuthenticationMethod {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.get_UserAuthenticationMethod();
    }
    public func put_UserAuthenticationMethod(value : Windows.Networking.Vpn.VpnAuthenticationMethod) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.put_UserAuthenticationMethod(value: value);
    }
    public func get_TunnelAuthenticationMethod() throws -> Windows.Networking.Vpn.VpnAuthenticationMethod {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.get_TunnelAuthenticationMethod();
    }
    public func put_TunnelAuthenticationMethod(value : Windows.Networking.Vpn.VpnAuthenticationMethod) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.put_TunnelAuthenticationMethod(value: value);
    }
    public func get_EapConfiguration() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.get_EapConfiguration();
    }
    public func put_EapConfiguration(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.put_EapConfiguration(value: value);
    }
    public var EapConfiguration : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.EapConfiguration;
        }
    }
    public var NativeProtocolType : Windows.Networking.Vpn.VpnNativeProtocolType {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.NativeProtocolType;
        }
    }
    public var RoutingPolicyType : Windows.Networking.Vpn.VpnRoutingPolicyType {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.RoutingPolicyType;
        }
    }
    public var Servers : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.Servers;
        }
    }
    public var TunnelAuthenticationMethod : Windows.Networking.Vpn.VpnAuthenticationMethod {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.TunnelAuthenticationMethod;
        }
    }
    public var UserAuthenticationMethod : Windows.Networking.Vpn.VpnAuthenticationMethod {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile = try _self.QueryInterface();
        return try _ifc.UserAuthenticationMethod;
        }
    }
    public func get_ProfileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_ProfileName();
    }
    public func put_ProfileName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.put_ProfileName(value: value);
    }
    public func get_AppTriggers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_AppTriggers();
    }
    public func get_Routes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_Routes();
    }
    public func get_DomainNameInfoList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_DomainNameInfoList();
    }
    public func get_TrafficFilters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_TrafficFilters();
    }
    public func get_RememberCredentials() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_RememberCredentials();
    }
    public func put_RememberCredentials(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.put_RememberCredentials(value: value);
    }
    public func get_AlwaysOn() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_AlwaysOn();
    }
    public func put_AlwaysOn(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.put_AlwaysOn(value: value);
    }
    public var AlwaysOn : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.AlwaysOn;
        }
    }
    public var AppTriggers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.AppTriggers;
        }
    }
    public var DomainNameInfoList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.DomainNameInfoList;
        }
    }
    public var ProfileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.ProfileName;
        }
    }
    public var RememberCredentials : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.RememberCredentials;
        }
    }
    public var Routes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.Routes;
        }
    }
    public var TrafficFilters : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.TrafficFilters;
        }
    }
    public func get_RequireVpnClientAppUI() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile2 = try _self.QueryInterface();
        return try _ifc.get_RequireVpnClientAppUI();
    }
    public func put_RequireVpnClientAppUI(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile2 = try _self.QueryInterface();
        return try _ifc.put_RequireVpnClientAppUI(value: value);
    }
    public func get_ConnectionStatus() throws -> Windows.Networking.Vpn.VpnManagementConnectionStatus {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile2 = try _self.QueryInterface();
        return try _ifc.get_ConnectionStatus();
    }
    public var ConnectionStatus : Windows.Networking.Vpn.VpnManagementConnectionStatus {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile2 = try _self.QueryInterface();
        return try _ifc.ConnectionStatus;
        }
    }
    public var RequireVpnClientAppUI : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnNativeProfile2 = try _self.QueryInterface();
        return try _ifc.RequireVpnClientAppUI;
        }
    }
}

// type: Windows.Networking.Vpn.VpnNativeProtocolType
// enum type
public typealias VpnNativeProtocolType = _q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType;

// type: Windows.Networking.Vpn.VpnPacketBuffer
// runtime class
public class VpnPacketBuffer
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnPacketBuffer;
    public init(plok: Windows.Networking.Vpn.IVpnPacketBuffer?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnPacketBuffer { return _self; }
    public init(parentBuffer : Optional<Windows.Networking.Vpn.VpnPacketBuffer>, offset : Swift.UInt32, length : Swift.UInt32) throws {
        let _af : IVpnPacketBufferFactory = try RoGetActivationFactory("Windows.Networking.Vpn.VpnPacketBuffer");
        _self = try _af.CreateVpnPacketBuffer(parentBuffer: parentBuffer!.Interface(), offset: offset, length: length)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Buffer() throws -> Optional<Windows.Storage.Streams.Buffer> {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try Windows.Storage.Streams.Buffer(plok: _ifc.get_Buffer());
    }
    public func put_Status(value : Windows.Networking.Vpn.VpnPacketBufferStatus) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try _ifc.put_Status(value: value);
    }
    public func get_Status() throws -> Windows.Networking.Vpn.VpnPacketBufferStatus {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func put_TransportAffinity(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try _ifc.put_TransportAffinity(value: value);
    }
    public func get_TransportAffinity() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try _ifc.get_TransportAffinity();
    }
    public var Buffer : Optional<Windows.Storage.Streams.Buffer> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try Windows.Storage.Streams.Buffer(plok: _ifc.Buffer);
        }
    }
    public var Status : Windows.Networking.Vpn.VpnPacketBufferStatus {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    public var TransportAffinity : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer = try _self.QueryInterface();
        return try _ifc.TransportAffinity;
        }
    }
    public func get_AppId() throws -> Optional<Windows.Networking.Vpn.VpnAppId> {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer2 = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnAppId(plok: _ifc.get_AppId());
    }
    public var AppId : Optional<Windows.Networking.Vpn.VpnAppId> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer2 = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnAppId(plok: _ifc.AppId);
        }
    }
    public func put_TransportContext(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer3 = try _self.QueryInterface();
        return try _ifc.put_TransportContext(value: value!.GetInterface());
    }
    public func get_TransportContext() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer3 = try _self.QueryInterface();
        return try _ifc.get_TransportContext();
    }
    public var TransportContext : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBuffer3 = try _self.QueryInterface();
        return try _ifc.TransportContext;
        }
    }
}

// type: Windows.Networking.Vpn.VpnPacketBufferList
// runtime class
public class VpnPacketBufferList
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnPacketBufferList;
    public init(plok: Windows.Networking.Vpn.IVpnPacketBufferList?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnPacketBufferList { return _self; }
    public func Append(nextVpnPacketBuffer : Optional<Windows.Networking.Vpn.VpnPacketBuffer>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.Append(nextVpnPacketBuffer: nextVpnPacketBuffer!.Interface());
    }
    public func AddAtBegin(nextVpnPacketBuffer : Optional<Windows.Networking.Vpn.VpnPacketBuffer>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.AddAtBegin(nextVpnPacketBuffer: nextVpnPacketBuffer!.Interface());
    }
    public func RemoveAtEnd() throws -> Optional<Windows.Networking.Vpn.VpnPacketBuffer> {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnPacketBuffer(plok: _ifc.RemoveAtEnd());
    }
    public func RemoveAtBegin() throws -> Optional<Windows.Networking.Vpn.VpnPacketBuffer> {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnPacketBuffer(plok: _ifc.RemoveAtBegin());
    }
    public func Clear() throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func put_Status(value : Windows.Networking.Vpn.VpnPacketBufferStatus) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.put_Status(value: value);
    }
    public func get_Status() throws -> Windows.Networking.Vpn.VpnPacketBufferStatus {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public var Status : Windows.Networking.Vpn.VpnPacketBufferStatus {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPacketBufferList = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    // method not needed: First
}

// type: Windows.Networking.Vpn.VpnPacketBufferStatus
// enum type
public typealias VpnPacketBufferStatus = _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus;

// type: Windows.Networking.Vpn.VpnPickedCredential
// runtime class
public class VpnPickedCredential
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnPickedCredential;
    public init(plok: Windows.Networking.Vpn.IVpnPickedCredential?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnPickedCredential { return _self; }
    public func get_PasskeyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnPickedCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_PasskeyCredential());
    }
    public func get_AdditionalPin() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnPickedCredential = try _self.QueryInterface();
        return try _ifc.get_AdditionalPin();
    }
    public func get_OldPasswordCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Vpn.IVpnPickedCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_OldPasswordCredential());
    }
    public var AdditionalPin : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPickedCredential = try _self.QueryInterface();
        return try _ifc.AdditionalPin;
        }
    }
    public var OldPasswordCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPickedCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.OldPasswordCredential);
        }
    }
    public var PasskeyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPickedCredential = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.PasskeyCredential);
        }
    }
}

// type: Windows.Networking.Vpn.VpnPlugInProfile
// runtime class
public class VpnPlugInProfile
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnPlugInProfile;
    public init(plok: Windows.Networking.Vpn.IVpnPlugInProfile?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnPlugInProfile { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnPlugInProfile")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ServerUris() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.get_ServerUris();
    }
    public func get_CustomConfiguration() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.get_CustomConfiguration();
    }
    public func put_CustomConfiguration(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.put_CustomConfiguration(value: value);
    }
    public func get_VpnPluginPackageFamilyName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.get_VpnPluginPackageFamilyName();
    }
    public func put_VpnPluginPackageFamilyName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.put_VpnPluginPackageFamilyName(value: value);
    }
    public var CustomConfiguration : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.CustomConfiguration;
        }
    }
    public var ServerUris : Optional<ClosedGenerics.IVector_1__q_CWindows_CFoundation_CUri> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.ServerUris;
        }
    }
    public var VpnPluginPackageFamilyName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile = try _self.QueryInterface();
        return try _ifc.VpnPluginPackageFamilyName;
        }
    }
    public func get_ProfileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_ProfileName();
    }
    public func put_ProfileName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.put_ProfileName(value: value);
    }
    public func get_AppTriggers() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_AppTriggers();
    }
    public func get_Routes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_Routes();
    }
    public func get_DomainNameInfoList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_DomainNameInfoList();
    }
    public func get_TrafficFilters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_TrafficFilters();
    }
    public func get_RememberCredentials() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_RememberCredentials();
    }
    public func put_RememberCredentials(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.put_RememberCredentials(value: value);
    }
    public func get_AlwaysOn() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.get_AlwaysOn();
    }
    public func put_AlwaysOn(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.put_AlwaysOn(value: value);
    }
    public var AlwaysOn : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.AlwaysOn;
        }
    }
    public var AppTriggers : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.AppTriggers;
        }
    }
    public var DomainNameInfoList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.DomainNameInfoList;
        }
    }
    public var ProfileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.ProfileName;
        }
    }
    public var RememberCredentials : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.RememberCredentials;
        }
    }
    public var Routes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.Routes;
        }
    }
    public var TrafficFilters : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnProfile = try _self.QueryInterface();
        return try _ifc.TrafficFilters;
        }
    }
    public func get_RequireVpnClientAppUI() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile2 = try _self.QueryInterface();
        return try _ifc.get_RequireVpnClientAppUI();
    }
    public func put_RequireVpnClientAppUI(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile2 = try _self.QueryInterface();
        return try _ifc.put_RequireVpnClientAppUI(value: value);
    }
    public func get_ConnectionStatus() throws -> Windows.Networking.Vpn.VpnManagementConnectionStatus {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile2 = try _self.QueryInterface();
        return try _ifc.get_ConnectionStatus();
    }
    public var ConnectionStatus : Windows.Networking.Vpn.VpnManagementConnectionStatus {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile2 = try _self.QueryInterface();
        return try _ifc.ConnectionStatus;
        }
    }
    public var RequireVpnClientAppUI : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnPlugInProfile2 = try _self.QueryInterface();
        return try _ifc.RequireVpnClientAppUI;
        }
    }
}

// type: Windows.Networking.Vpn.VpnRoute
// runtime class
public class VpnRoute
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnRoute;
    public init(plok: Windows.Networking.Vpn.IVpnRoute?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnRoute { return _self; }
    public init(address : Optional<Windows.Networking.HostName>, prefixSize : Swift.UInt8) throws {
        let _af : IVpnRouteFactory = try RoGetActivationFactory("Windows.Networking.Vpn.VpnRoute");
        _self = try _af.CreateVpnRoute(address: address!.Interface(), prefixSize: prefixSize)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func put_Address(value : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnRoute = try _self.QueryInterface();
        return try _ifc.put_Address(value: value!.Interface());
    }
    public func get_Address() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Vpn.IVpnRoute = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_Address());
    }
    public func put_PrefixSize(value : Swift.UInt8) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnRoute = try _self.QueryInterface();
        return try _ifc.put_PrefixSize(value: value);
    }
    public func get_PrefixSize() throws -> Swift.UInt8 {
        let _ifc : Windows.Networking.Vpn.IVpnRoute = try _self.QueryInterface();
        return try _ifc.get_PrefixSize();
    }
    public var Address : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnRoute = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.Address);
        }
    }
    public var PrefixSize : Swift.UInt8 {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnRoute = try _self.QueryInterface();
        return try _ifc.PrefixSize;
        }
    }
}

// type: Windows.Networking.Vpn.VpnRouteAssignment
// runtime class
public class VpnRouteAssignment
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnRouteAssignment;
    public init(plok: Windows.Networking.Vpn.IVpnRouteAssignment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnRouteAssignment { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnRouteAssignment")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_Ipv4InclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.put_Ipv4InclusionRoutes(value: value);
    }
    public func put_Ipv6InclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.put_Ipv6InclusionRoutes(value: value);
    }
    public func get_Ipv4InclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.get_Ipv4InclusionRoutes();
    }
    public func get_Ipv6InclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.get_Ipv6InclusionRoutes();
    }
    public func put_Ipv4ExclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.put_Ipv4ExclusionRoutes(value: value);
    }
    public func put_Ipv6ExclusionRoutes(value : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.put_Ipv6ExclusionRoutes(value: value);
    }
    public func get_Ipv4ExclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.get_Ipv4ExclusionRoutes();
    }
    public func get_Ipv6ExclusionRoutes() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.get_Ipv6ExclusionRoutes();
    }
    public func put_ExcludeLocalSubnets(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.put_ExcludeLocalSubnets(value: value);
    }
    public func get_ExcludeLocalSubnets() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.get_ExcludeLocalSubnets();
    }
    public var ExcludeLocalSubnets : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.ExcludeLocalSubnets;
        }
    }
    public var Ipv4ExclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.Ipv4ExclusionRoutes;
        }
    }
    public var Ipv4InclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.Ipv4InclusionRoutes;
        }
    }
    public var Ipv6ExclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.Ipv6ExclusionRoutes;
        }
    }
    public var Ipv6InclusionRoutes : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnRouteAssignment = try _self.QueryInterface();
        return try _ifc.Ipv6InclusionRoutes;
        }
    }
}

// type: Windows.Networking.Vpn.VpnRoutingPolicyType
// enum type
public typealias VpnRoutingPolicyType = _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType;

// type: Windows.Networking.Vpn.VpnSystemHealth
// runtime class
public class VpnSystemHealth
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnSystemHealth;
    public init(plok: Windows.Networking.Vpn.IVpnSystemHealth?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnSystemHealth { return _self; }
    public func get_StatementOfHealth() throws -> Optional<Windows.Storage.Streams.Buffer> {
        let _ifc : Windows.Networking.Vpn.IVpnSystemHealth = try _self.QueryInterface();
        return try Windows.Storage.Streams.Buffer(plok: _ifc.get_StatementOfHealth());
    }
    public var StatementOfHealth : Optional<Windows.Storage.Streams.Buffer> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnSystemHealth = try _self.QueryInterface();
        return try Windows.Storage.Streams.Buffer(plok: _ifc.StatementOfHealth);
        }
    }
}

// type: Windows.Networking.Vpn.VpnTrafficFilter
// runtime class
public class VpnTrafficFilter
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnTrafficFilter;
    public init(plok: Windows.Networking.Vpn.IVpnTrafficFilter?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnTrafficFilter { return _self; }
    public init(appId : Optional<Windows.Networking.Vpn.VpnAppId>) throws {
        let _af : IVpnTrafficFilterFactory = try RoGetActivationFactory("Windows.Networking.Vpn.VpnTrafficFilter");
        _self = try _af.Create(appId: appId!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_AppId() throws -> Optional<Windows.Networking.Vpn.VpnAppId> {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnAppId(plok: _ifc.get_AppId());
    }
    public func put_AppId(value : Optional<Windows.Networking.Vpn.VpnAppId>) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.put_AppId(value: value!.Interface());
    }
    public func get_AppClaims() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.get_AppClaims();
    }
    public func get_Protocol() throws -> Windows.Networking.Vpn.VpnIPProtocol {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.get_Protocol();
    }
    public func put_Protocol(value : Windows.Networking.Vpn.VpnIPProtocol) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.put_Protocol(value: value);
    }
    public func get_LocalPortRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.get_LocalPortRanges();
    }
    public func get_RemotePortRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.get_RemotePortRanges();
    }
    public func get_LocalAddressRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.get_LocalAddressRanges();
    }
    public func get_RemoteAddressRanges() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.get_RemoteAddressRanges();
    }
    public func get_RoutingPolicyType() throws -> Windows.Networking.Vpn.VpnRoutingPolicyType {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.get_RoutingPolicyType();
    }
    public func put_RoutingPolicyType(value : Windows.Networking.Vpn.VpnRoutingPolicyType) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.put_RoutingPolicyType(value: value);
    }
    public var AppClaims : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.AppClaims;
        }
    }
    public var AppId : Optional<Windows.Networking.Vpn.VpnAppId> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try Windows.Networking.Vpn.VpnAppId(plok: _ifc.AppId);
        }
    }
    public var LocalAddressRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.LocalAddressRanges;
        }
    }
    public var LocalPortRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.LocalPortRanges;
        }
    }
    public var Protocol_ : Windows.Networking.Vpn.VpnIPProtocol {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.Protocol_;
        }
    }
    public var RemoteAddressRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.RemoteAddressRanges;
        }
    }
    public var RemotePortRanges : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.RemotePortRanges;
        }
    }
    public var RoutingPolicyType : Windows.Networking.Vpn.VpnRoutingPolicyType {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilter = try _self.QueryInterface();
        return try _ifc.RoutingPolicyType;
        }
    }
}

// type: Windows.Networking.Vpn.VpnTrafficFilterAssignment
// runtime class
public class VpnTrafficFilterAssignment
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Vpn.IVpnTrafficFilterAssignment;
    public init(plok: Windows.Networking.Vpn.IVpnTrafficFilterAssignment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Vpn.IVpnTrafficFilterAssignment { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Vpn.VpnTrafficFilterAssignment")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_TrafficFilterList() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.get_TrafficFilterList();
    }
    public func get_AllowOutbound() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.get_AllowOutbound();
    }
    public func put_AllowOutbound(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.put_AllowOutbound(value: value);
    }
    public func get_AllowInbound() throws -> boolean {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.get_AllowInbound();
    }
    public func put_AllowInbound(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.put_AllowInbound(value: value);
    }
    public var AllowInbound : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.AllowInbound;
        }
    }
    public var AllowOutbound : boolean {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.AllowOutbound;
        }
    }
    public var TrafficFilterList : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        get throws {
        let _ifc : Windows.Networking.Vpn.IVpnTrafficFilterAssignment = try _self.QueryInterface();
        return try _ifc.TrafficFilterList;
        }
    }
}

}
extension Windows.Networking.Vpn.VpnAppIdType {
    public static var PackageFamilyName : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnAppIdType_PackageFamilyName;
        }
    }
    public static var FullyQualifiedBinaryName : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnAppIdType_FullyQualifiedBinaryName;
        }
    }
    public static var FilePath : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnAppIdType_FilePath;
        }
    }
}
extension Windows.Networking.Vpn.VpnAuthenticationMethod {
    public static var Mschapv2 : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Mschapv2;
        }
    }
    public static var Eap : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Eap;
        }
    }
    public static var Certificate : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_Certificate;
        }
    }
    public static var PresharedKey : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnAuthenticationMethod_PresharedKey;
        }
    }
}
extension Windows.Networking.Vpn.VpnChannelActivityEventType {
    public static var Idle : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType_Idle;
        }
    }
    public static var Active : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventType_Active;
        }
    }
}
extension Windows.Networking.Vpn.VpnCredentialType {
    public static var UsernamePassword : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernamePassword;
        }
    }
    public static var UsernameOtpPin : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernameOtpPin;
        }
    }
    public static var UsernamePasswordAndPin : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernamePasswordAndPin;
        }
    }
    public static var UsernamePasswordChange : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnCredentialType_UsernamePasswordChange;
        }
    }
    public static var SmartCard : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnCredentialType_SmartCard;
        }
    }
    public static var ProtectedCertificate : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnCredentialType_ProtectedCertificate;
        }
    }
    public static var UnProtectedCertificate : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnCredentialType_UnProtectedCertificate;
        }
    }
}
extension Windows.Networking.Vpn.VpnDataPathType {
    public static var Send : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnDataPathType_Send;
        }
    }
    public static var Receive : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnDataPathType_Receive;
        }
    }
}
extension Windows.Networking.Vpn.VpnDomainNameType {
    public static var Suffix : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnDomainNameType_Suffix;
        }
    }
    public static var FullyQualified : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnDomainNameType_FullyQualified;
        }
    }
    public static var Reserved : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnDomainNameType_Reserved;
        }
    }
}
extension Windows.Networking.Vpn.VpnIPProtocol {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_None;
        }
    }
    public static var Tcp : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_Tcp;
        }
    }
    public static var Udp : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_Udp;
        }
    }
    public static var Icmp : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_Icmp;
        }
    }
    public static var Ipv6Icmp : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_Ipv6Icmp;
        }
    }
    public static var Igmp : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_Igmp;
        }
    }
    public static var Pgm : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnIPProtocol_Pgm;
        }
    }
}
extension Windows.Networking.Vpn.VpnManagementConnectionStatus {
    public static var Disconnected : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Disconnected;
        }
    }
    public static var Disconnecting : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Disconnecting;
        }
    }
    public static var Connected : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Connected;
        }
    }
    public static var Connecting : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementConnectionStatus_Connecting;
        }
    }
}
extension Windows.Networking.Vpn.VpnManagementErrorStatus {
    public static var Ok : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_Ok;
        }
    }
    public static var Other : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_Other;
        }
    }
    public static var InvalidXmlSyntax : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_InvalidXmlSyntax;
        }
    }
    public static var ProfileNameTooLong : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ProfileNameTooLong;
        }
    }
    public static var ProfileInvalidAppId : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ProfileInvalidAppId;
        }
    }
    public static var AccessDenied : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_AccessDenied;
        }
    }
    public static var CannotFindProfile : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_CannotFindProfile;
        }
    }
    public static var AlreadyDisconnecting : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_AlreadyDisconnecting;
        }
    }
    public static var AlreadyConnected : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_AlreadyConnected;
        }
    }
    public static var GeneralAuthenticationFailure : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_GeneralAuthenticationFailure;
        }
    }
    public static var EapFailure : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_EapFailure;
        }
    }
    public static var SmartCardFailure : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_SmartCardFailure;
        }
    }
    public static var CertificateFailure : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_CertificateFailure;
        }
    }
    public static var ServerConfiguration : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ServerConfiguration;
        }
    }
    public static var NoConnection : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_NoConnection;
        }
    }
    public static var ServerConnection : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_ServerConnection;
        }
    }
    public static var UserNamePassword : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_UserNamePassword;
        }
    }
    public static var DnsNotResolvable : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_DnsNotResolvable;
        }
    }
    public static var InvalidIP : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_InvalidIP;
        }
    }
}
extension Windows.Networking.Vpn.VpnNativeProtocolType {
    public static var Pptp : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType_Pptp;
        }
    }
    public static var L2tp : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType_L2tp;
        }
    }
    public static var IpsecIkev2 : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnNativeProtocolType_IpsecIkev2;
        }
    }
}
extension Windows.Networking.Vpn.VpnPacketBufferStatus {
    public static var Ok : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus_Ok;
        }
    }
    public static var InvalidBufferSize : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnPacketBufferStatus_InvalidBufferSize;
        }
    }
}
extension Windows.Networking.Vpn.VpnRoutingPolicyType {
    public static var SplitRouting : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType_SplitRouting;
        }
    }
    public static var ForceAllTrafficOverVpn : Self {
        get {
            return _q_CWindows_CNetworking_CVpn_CVpnRoutingPolicyType_ForceAllTrafficOverVpn;
        }
    }
}
