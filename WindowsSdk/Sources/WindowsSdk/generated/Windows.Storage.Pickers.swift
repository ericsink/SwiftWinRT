// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Storage.Pickers {
// type: Windows.Storage.Pickers.FileExtensionVector
// runtime class
public class FileExtensionVector
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1_HSTRING;
    public init(plok: ClosedGenerics.IVector_1_HSTRING?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1_HSTRING { return _self; }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Swift.String> {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.GetAt(index: index);
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Swift.String, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value, index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Swift.String) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value);
    }
    public func InsertAt(index : Swift.UInt32, value : Swift.String) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value);
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Swift.String) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.Append(value: value);
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<HSTRING>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<HSTRING>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1_HSTRING = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
}

// type: Windows.Storage.Pickers.FileOpenPicker
// runtime class
public class FileOpenPicker
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.IFileOpenPicker;
    public init(plok: Windows.Storage.Pickers.IFileOpenPicker?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.IFileOpenPicker { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Pickers.FileOpenPicker")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IFileOpenPickerStatics2 {
        static var x : IFileOpenPickerStatics2 =
            try! RoGetActivationFactory("Windows.Storage.Pickers.FileOpenPicker")
    }
    public static var FileOpenPickerStatics2 : IFileOpenPickerStatics2 {
        _IFileOpenPickerStatics2.x
    }
    public static func CreateForUser(user : Optional<Windows.System.User>) throws -> Optional<Windows.Storage.Pickers.FileOpenPicker> {
        return try Windows.Storage.Pickers.FileOpenPicker(plok: FileOpenPickerStatics2.CreateForUser(user: user!.Interface()));
    }
    private struct _IFileOpenPickerStatics {
        static var x : IFileOpenPickerStatics =
            try! RoGetActivationFactory("Windows.Storage.Pickers.FileOpenPicker")
    }
    public static var FileOpenPickerStatics : IFileOpenPickerStatics {
        _IFileOpenPickerStatics.x
    }
    public static func ResumePickSingleFileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        return try FileOpenPickerStatics.ResumePickSingleFileAsync();
    }
    public static func ResumePickSingleFile() async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: Self.ResumePickSingleFileAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_ContinuationData() throws -> Optional<Windows.Foundation.Collections.ValueSet> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker2 = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.get_ContinuationData());
    }
    public func PickSingleFileAndContinue() throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker2 = try _self.QueryInterface();
        return try _ifc.PickSingleFileAndContinue();
    }
    public func PickMultipleFilesAndContinue() throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker2 = try _self.QueryInterface();
        return try _ifc.PickMultipleFilesAndContinue();
    }
    public var ContinuationData : Optional<Windows.Foundation.Collections.ValueSet> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker2 = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.ContinuationData);
        }
    }
    public func PickSingleFileAsync(pickerOperationId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPickerWithOperationId = try _self.QueryInterface();
        return try _ifc.PickSingleFileAsync(pickerOperationId: pickerOperationId);
    }
    public func PickSingleFile(pickerOperationId : Swift.String) async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.PickSingleFileAsync(pickerOperationId: pickerOperationId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_ViewMode() throws -> Windows.Storage.Pickers.PickerViewMode {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.get_ViewMode();
    }
    public func put_ViewMode(value : Windows.Storage.Pickers.PickerViewMode) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.put_ViewMode(value: value);
    }
    public func get_SettingsIdentifier() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.get_SettingsIdentifier();
    }
    public func put_SettingsIdentifier(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.put_SettingsIdentifier(value: value);
    }
    public func get_SuggestedStartLocation() throws -> Windows.Storage.Pickers.PickerLocationId {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.get_SuggestedStartLocation();
    }
    public func put_SuggestedStartLocation(value : Windows.Storage.Pickers.PickerLocationId) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.put_SuggestedStartLocation(value: value);
    }
    public func get_CommitButtonText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.get_CommitButtonText();
    }
    public func put_CommitButtonText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.put_CommitButtonText(value: value);
    }
    public func get_FileTypeFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.get_FileTypeFilter();
    }
    public func PickSingleFileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.PickSingleFileAsync();
    }
    public func PickSingleFile() async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.PickSingleFileAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func PickMultipleFilesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.PickMultipleFilesAsync();
    }
    public func PickMultipleFiles() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PickMultipleFilesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CommitButtonText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.CommitButtonText;
        }
    }
    public var FileTypeFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.FileTypeFilter;
        }
    }
    public var SettingsIdentifier : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.SettingsIdentifier;
        }
    }
    public var SuggestedStartLocation : Windows.Storage.Pickers.PickerLocationId {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.SuggestedStartLocation;
        }
    }
    public var ViewMode : Windows.Storage.Pickers.PickerViewMode {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker = try _self.QueryInterface();
        return try _ifc.ViewMode;
        }
    }
    public func get_User() throws -> Optional<Windows.System.User> {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker3 = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.get_User());
    }
    public var User : Optional<Windows.System.User> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileOpenPicker3 = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.User);
        }
    }
}

// type: Windows.Storage.Pickers.FilePickerFileTypesOrderedMap
// runtime class
public class FilePickerFileTypesOrderedMap
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING;
    public init(plok: ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING { return _self; }
    // method not needed: Lookup
    // method not needed: get_Size
    // method not needed: HasKey
    // method not needed: GetView
    // method not needed: Insert
    // method not needed: Remove
    // method not needed: Clear
    // method not needed: First
}

// type: Windows.Storage.Pickers.FilePickerSelectedFilesArray
// runtime class
public class FilePickerSelectedFilesArray
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile;
    public init(plok: ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile { return _self; }
    // method not needed: GetAt
    // method not needed: get_Size
    // method not needed: IndexOf
    // method not needed: GetMany
    // method not needed: First
}

// type: Windows.Storage.Pickers.FileSavePicker
// runtime class
public class FileSavePicker
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.IFileSavePicker;
    public init(plok: Windows.Storage.Pickers.IFileSavePicker?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.IFileSavePicker { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Pickers.FileSavePicker")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IFileSavePickerStatics {
        static var x : IFileSavePickerStatics =
            try! RoGetActivationFactory("Windows.Storage.Pickers.FileSavePicker")
    }
    public static var FileSavePickerStatics : IFileSavePickerStatics {
        _IFileSavePickerStatics.x
    }
    public static func CreateForUser(user : Optional<Windows.System.User>) throws -> Optional<Windows.Storage.Pickers.FileSavePicker> {
        return try Windows.Storage.Pickers.FileSavePicker(plok: FileSavePickerStatics.CreateForUser(user: user!.Interface()));
    }
    public func get_ContinuationData() throws -> Optional<Windows.Foundation.Collections.ValueSet> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker2 = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.get_ContinuationData());
    }
    public func PickSaveFileAndContinue() throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker2 = try _self.QueryInterface();
        return try _ifc.PickSaveFileAndContinue();
    }
    public var ContinuationData : Optional<Windows.Foundation.Collections.ValueSet> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker2 = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.ContinuationData);
        }
    }
    public func get_EnterpriseId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker3 = try _self.QueryInterface();
        return try _ifc.get_EnterpriseId();
    }
    public func put_EnterpriseId(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker3 = try _self.QueryInterface();
        return try _ifc.put_EnterpriseId(value: value);
    }
    public var EnterpriseId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker3 = try _self.QueryInterface();
        return try _ifc.EnterpriseId;
        }
    }
    public func get_SettingsIdentifier() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.get_SettingsIdentifier();
    }
    public func put_SettingsIdentifier(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.put_SettingsIdentifier(value: value);
    }
    public func get_SuggestedStartLocation() throws -> Windows.Storage.Pickers.PickerLocationId {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.get_SuggestedStartLocation();
    }
    public func put_SuggestedStartLocation(value : Windows.Storage.Pickers.PickerLocationId) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.put_SuggestedStartLocation(value: value);
    }
    public func get_CommitButtonText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.get_CommitButtonText();
    }
    public func put_CommitButtonText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.put_CommitButtonText(value: value);
    }
    public func get_FileTypeChoices() throws -> Optional<ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.get_FileTypeChoices();
    }
    public func get_DefaultFileExtension() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.get_DefaultFileExtension();
    }
    public func put_DefaultFileExtension(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.put_DefaultFileExtension(value: value);
    }
    public func get_SuggestedSaveFile() throws -> Optional<Windows.Storage.StorageFile> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try Windows.Storage.StorageFile(plok: _ifc.get_SuggestedSaveFile());
    }
    public func put_SuggestedSaveFile(value : Optional<Windows.Storage.StorageFile>) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.put_SuggestedSaveFile(value: value!.Interface());
    }
    public func get_SuggestedFileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.get_SuggestedFileName();
    }
    public func put_SuggestedFileName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.put_SuggestedFileName(value: value);
    }
    public func PickSaveFileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.PickSaveFileAsync();
    }
    public func PickSaveFile() async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.PickSaveFileAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CommitButtonText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.CommitButtonText;
        }
    }
    public var DefaultFileExtension : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.DefaultFileExtension;
        }
    }
    public var FileTypeChoices : Optional<ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.FileTypeChoices;
        }
    }
    public var SettingsIdentifier : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.SettingsIdentifier;
        }
    }
    public var SuggestedFileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.SuggestedFileName;
        }
    }
    public var SuggestedSaveFile : Optional<Windows.Storage.StorageFile> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try Windows.Storage.StorageFile(plok: _ifc.SuggestedSaveFile);
        }
    }
    public var SuggestedStartLocation : Windows.Storage.Pickers.PickerLocationId {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker = try _self.QueryInterface();
        return try _ifc.SuggestedStartLocation;
        }
    }
    public func get_User() throws -> Optional<Windows.System.User> {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker4 = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.get_User());
    }
    public var User : Optional<Windows.System.User> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFileSavePicker4 = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.User);
        }
    }
}

// type: Windows.Storage.Pickers.FolderPicker
// runtime class
public class FolderPicker
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.IFolderPicker;
    public init(plok: Windows.Storage.Pickers.IFolderPicker?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.IFolderPicker { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Pickers.FolderPicker")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IFolderPickerStatics {
        static var x : IFolderPickerStatics =
            try! RoGetActivationFactory("Windows.Storage.Pickers.FolderPicker")
    }
    public static var FolderPickerStatics : IFolderPickerStatics {
        _IFolderPickerStatics.x
    }
    public static func CreateForUser(user : Optional<Windows.System.User>) throws -> Optional<Windows.Storage.Pickers.FolderPicker> {
        return try Windows.Storage.Pickers.FolderPicker(plok: FolderPickerStatics.CreateForUser(user: user!.Interface()));
    }
    public func get_ContinuationData() throws -> Optional<Windows.Foundation.Collections.ValueSet> {
        let _ifc : Windows.Storage.Pickers.IFolderPicker2 = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.get_ContinuationData());
    }
    public func PickFolderAndContinue() throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFolderPicker2 = try _self.QueryInterface();
        return try _ifc.PickFolderAndContinue();
    }
    public var ContinuationData : Optional<Windows.Foundation.Collections.ValueSet> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFolderPicker2 = try _self.QueryInterface();
        return try Windows.Foundation.Collections.ValueSet(plok: _ifc.ContinuationData);
        }
    }
    public func get_ViewMode() throws -> Windows.Storage.Pickers.PickerViewMode {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.get_ViewMode();
    }
    public func put_ViewMode(value : Windows.Storage.Pickers.PickerViewMode) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.put_ViewMode(value: value);
    }
    public func get_SettingsIdentifier() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.get_SettingsIdentifier();
    }
    public func put_SettingsIdentifier(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.put_SettingsIdentifier(value: value);
    }
    public func get_SuggestedStartLocation() throws -> Windows.Storage.Pickers.PickerLocationId {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.get_SuggestedStartLocation();
    }
    public func put_SuggestedStartLocation(value : Windows.Storage.Pickers.PickerLocationId) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.put_SuggestedStartLocation(value: value);
    }
    public func get_CommitButtonText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.get_CommitButtonText();
    }
    public func put_CommitButtonText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.put_CommitButtonText(value: value);
    }
    public func get_FileTypeFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.get_FileTypeFilter();
    }
    public func PickSingleFolderAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.PickSingleFolderAsync();
    }
    public func PickSingleFolder() async throws -> Optional<Windows.Storage.StorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFolder(plok: self.PickSingleFolderAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CommitButtonText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.CommitButtonText;
        }
    }
    public var FileTypeFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.FileTypeFilter;
        }
    }
    public var SettingsIdentifier : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.SettingsIdentifier;
        }
    }
    public var SuggestedStartLocation : Windows.Storage.Pickers.PickerLocationId {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.SuggestedStartLocation;
        }
    }
    public var ViewMode : Windows.Storage.Pickers.PickerViewMode {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFolderPicker = try _self.QueryInterface();
        return try _ifc.ViewMode;
        }
    }
    public func get_User() throws -> Optional<Windows.System.User> {
        let _ifc : Windows.Storage.Pickers.IFolderPicker3 = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.get_User());
    }
    public var User : Optional<Windows.System.User> {
        get throws {
        let _ifc : Windows.Storage.Pickers.IFolderPicker3 = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.User);
        }
    }
}

// type: Windows.Storage.Pickers.IFileOpenPicker
// interface type
open class IFileOpenPicker
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2ca8278a, Data2: 0x12c5, Data3 : 0x4c5f, Data4 : (0x89, 0x77, 0x94, 0x54, 0x77, 0x93, 0xc2, 0x41)) }
    // [IsSpecialName] Windows.Storage.Pickers.PickerViewMode get_ViewMode()
    private func _n_get_ViewMode(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CPickerViewMode>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewMode(pThis, __presult))
        }
    }
    public func get_ViewMode() throws -> Windows.Storage.Pickers.PickerViewMode {
        var __result : _q_CWindows_CStorage_CPickers_CPickerViewMode = _q_CWindows_CStorage_CPickers_CPickerViewMode_List;
        try self._n_get_ViewMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ViewMode(Windows.Storage.Pickers.PickerViewMode)
    private func _n_put_ViewMode(_ value : _q_CWindows_CStorage_CPickers_CPickerViewMode) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ViewMode(pThis, value))
        }
    }
    public func put_ViewMode(value : Windows.Storage.Pickers.PickerViewMode) throws -> Void {
        try self._n_put_ViewMode(value);
    }
    // [IsSpecialName] System.String get_SettingsIdentifier()
    private func _n_get_SettingsIdentifier(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, __presult))
        }
    }
    public func get_SettingsIdentifier() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SettingsIdentifier(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_SettingsIdentifier(System.String)
    private func _n_put_SettingsIdentifier(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SettingsIdentifier(pThis, value))
        }
    }
    public func put_SettingsIdentifier(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_SettingsIdentifier(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Pickers.PickerLocationId get_SuggestedStartLocation()
    private func _n_get_SuggestedStartLocation(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CPickerLocationId>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedStartLocation(pThis, __presult))
        }
    }
    public func get_SuggestedStartLocation() throws -> Windows.Storage.Pickers.PickerLocationId {
        var __result : _q_CWindows_CStorage_CPickers_CPickerLocationId = _q_CWindows_CStorage_CPickers_CPickerLocationId_DocumentsLibrary;
        try self._n_get_SuggestedStartLocation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SuggestedStartLocation(Windows.Storage.Pickers.PickerLocationId)
    private func _n_put_SuggestedStartLocation(_ value : _q_CWindows_CStorage_CPickers_CPickerLocationId) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedStartLocation(pThis, value))
        }
    }
    public func put_SuggestedStartLocation(value : Windows.Storage.Pickers.PickerLocationId) throws -> Void {
        try self._n_put_SuggestedStartLocation(value);
    }
    // [IsSpecialName] System.String get_CommitButtonText()
    private func _n_get_CommitButtonText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommitButtonText(pThis, __presult))
        }
    }
    public func get_CommitButtonText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CommitButtonText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_CommitButtonText(System.String)
    private func _n_put_CommitButtonText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommitButtonText(pThis, value))
        }
    }
    public func put_CommitButtonText(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_CommitButtonText(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_FileTypeFilter()
    private func _n_get_FileTypeFilter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeFilter(pThis, __presult))
        }
    }
    public func get_FileTypeFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_FileTypeFilter(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile> PickSingleFileAsync()
    private func _n_PickSingleFileAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFileAsync(pThis, __presult))
        }
    }
    public func PickSingleFileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_PickSingleFileAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func PickSingleFile() async throws -> Optional<Windows.Storage.IStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PickSingleFileAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>> PickMultipleFilesAsync()
    private func _n_PickMultipleFilesAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickMultipleFilesAsync(pThis, __presult))
        }
    }
    public func PickMultipleFilesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_PickMultipleFilesAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func PickMultipleFiles() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PickMultipleFilesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CommitButtonText : Swift.String {
        get throws {
            return try get_CommitButtonText();
        }
    }
    public var FileTypeFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_FileTypeFilter();
        }
    }
    public var SettingsIdentifier : Swift.String {
        get throws {
            return try get_SettingsIdentifier();
        }
    }
    public var SuggestedStartLocation : Windows.Storage.Pickers.PickerLocationId {
        get throws {
            return try get_SuggestedStartLocation();
        }
    }
    public var ViewMode : Windows.Storage.Pickers.PickerViewMode {
        get throws {
            return try get_ViewMode();
        }
    }
} // IFileOpenPicker


// type: Windows.Storage.Pickers.IFileOpenPicker2
// interface type
open class IFileOpenPicker2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8ceb6cd2, Data2: 0xb446, Data3 : 0x46f7, Data4 : (0xb2, 0x65, 0x90, 0xf8, 0xe5, 0x5a, 0xd6, 0x50)) }
    // [IsSpecialName] Windows.Foundation.Collections.ValueSet get_ContinuationData()
    private func _n_get_ContinuationData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContinuationData(pThis, __presult))
        }
    }
    public func get_ContinuationData() throws -> Optional<Windows.Foundation.Collections.IPropertySet> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>> = nil;
        try self._n_get_ContinuationData(&__result);
        return Windows.Foundation.Collections.IPropertySet(consuming: __result);
    }
    // void PickSingleFileAndContinue()
    private func _n_PickSingleFileAndContinue() throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFileAndContinue(pThis))
        }
    }
    public func PickSingleFileAndContinue() throws -> Void {
        try self._n_PickSingleFileAndContinue();
    }
    // void PickMultipleFilesAndContinue()
    private func _n_PickMultipleFilesAndContinue() throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickMultipleFilesAndContinue(pThis))
        }
    }
    public func PickMultipleFilesAndContinue() throws -> Void {
        try self._n_PickMultipleFilesAndContinue();
    }
    public var ContinuationData : Optional<Windows.Foundation.Collections.IPropertySet> {
        get throws {
            return try get_ContinuationData();
        }
    }
} // IFileOpenPicker2


// type: Windows.Storage.Pickers.IFileOpenPicker3
// interface type
open class IFileOpenPicker3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd9a5c5b3, Data2: 0xc5dc, Data3 : 0x5b98, Data4 : (0xbd, 0x80, 0xa8, 0xd0, 0xca, 0x05, 0x84, 0xd8)) }
    // [IsSpecialName] Windows.System.User get_User()
    private func _n_get_User(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPicker3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, __presult))
        }
    }
    public func get_User() throws -> Optional<Windows.System.IUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>> = nil;
        try self._n_get_User(&__result);
        return Windows.System.IUser(consuming: __result);
    }
    public var User : Optional<Windows.System.IUser> {
        get throws {
            return try get_User();
        }
    }
} // IFileOpenPicker3


// type: Windows.Storage.Pickers.IFileOpenPickerStatics
// interface type
open class IFileOpenPickerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6821573b, Data2: 0x2f02, Data3 : 0x4833, Data4 : (0x96, 0xd4, 0xab, 0xbf, 0xad, 0x72, 0xb6, 0x7b)) }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile> ResumePickSingleFileAsync()
    private func _n_ResumePickSingleFileAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPickerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResumePickSingleFileAsync(pThis, __presult))
        }
    }
    public func ResumePickSingleFileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_ResumePickSingleFileAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func ResumePickSingleFile() async throws -> Optional<Windows.Storage.IStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ResumePickSingleFileAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IFileOpenPickerStatics


// type: Windows.Storage.Pickers.IFileOpenPickerStatics2
// interface type
open class IFileOpenPickerStatics2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe8917415, Data2: 0xeddd, Data3 : 0x5c98, Data4 : (0xb6, 0xf3, 0x36, 0x6f, 0xdf, 0xca, 0xd3, 0x92)) }
    // Windows.Storage.Pickers.FileOpenPicker CreateForUser(Windows.System.User)
    private func _n_CreateForUser(_ user : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CIFileOpenPicker>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPickerStatics2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForUser(pThis, user, __presult))
        }
    }
    public func CreateForUser(user : Optional<Windows.System.IUser>) throws -> Optional<Windows.Storage.Pickers.IFileOpenPicker> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CIFileOpenPicker>> = nil;
        try self._n_CreateForUser(RawPointer(user), &__result);
        return Windows.Storage.Pickers.IFileOpenPicker(consuming: __result);
    }
} // IFileOpenPickerStatics2


// type: Windows.Storage.Pickers.IFileOpenPickerWithOperationId
// interface type
open class IFileOpenPickerWithOperationId
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3f57b569, Data2: 0x2522, Data3 : 0x4ca5, Data4 : (0xaa, 0x73, 0xa1, 0x55, 0x09, 0xf1, 0xfc, 0xbf)) }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile> PickSingleFileAsync(System.String)
    private func _n_PickSingleFileAsync(_ pickerOperationId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileOpenPickerWithOperationId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFileAsync(pThis, pickerOperationId, __presult))
        }
    }
    public func PickSingleFileAsync(pickerOperationId : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let __hstr_pickerOperationId = try HString(pickerOperationId!);
        return try withExtendedLifetime(__hstr_pickerOperationId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_PickSingleFileAsync(__hstr_pickerOperationId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
        }
    }
    public func PickSingleFile(pickerOperationId : Optional<Swift.String>) async throws -> Optional<Windows.Storage.IStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PickSingleFileAsync(pickerOperationId: pickerOperationId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IFileOpenPickerWithOperationId


// type: Windows.Storage.Pickers.IFileSavePicker
// interface type
open class IFileSavePicker
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3286ffcb, Data2: 0x617f, Data3 : 0x4cc5, Data4 : (0xaf, 0x6a, 0xb3, 0xfd, 0xf2, 0x9a, 0xd1, 0x45)) }
    // [IsSpecialName] System.String get_SettingsIdentifier()
    private func _n_get_SettingsIdentifier(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, __presult))
        }
    }
    public func get_SettingsIdentifier() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SettingsIdentifier(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_SettingsIdentifier(System.String)
    private func _n_put_SettingsIdentifier(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SettingsIdentifier(pThis, value))
        }
    }
    public func put_SettingsIdentifier(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_SettingsIdentifier(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Pickers.PickerLocationId get_SuggestedStartLocation()
    private func _n_get_SuggestedStartLocation(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CPickerLocationId>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedStartLocation(pThis, __presult))
        }
    }
    public func get_SuggestedStartLocation() throws -> Windows.Storage.Pickers.PickerLocationId {
        var __result : _q_CWindows_CStorage_CPickers_CPickerLocationId = _q_CWindows_CStorage_CPickers_CPickerLocationId_DocumentsLibrary;
        try self._n_get_SuggestedStartLocation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SuggestedStartLocation(Windows.Storage.Pickers.PickerLocationId)
    private func _n_put_SuggestedStartLocation(_ value : _q_CWindows_CStorage_CPickers_CPickerLocationId) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedStartLocation(pThis, value))
        }
    }
    public func put_SuggestedStartLocation(value : Windows.Storage.Pickers.PickerLocationId) throws -> Void {
        try self._n_put_SuggestedStartLocation(value);
    }
    // [IsSpecialName] System.String get_CommitButtonText()
    private func _n_get_CommitButtonText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommitButtonText(pThis, __presult))
        }
    }
    public func get_CommitButtonText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CommitButtonText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_CommitButtonText(System.String)
    private func _n_put_CommitButtonText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommitButtonText(pThis, value))
        }
    }
    public func put_CommitButtonText(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_CommitButtonText(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IMap<System.String,Windows.Foundation.Collections.IVector<System.String>> get_FileTypeChoices()
    private func _n_get_FileTypeChoices(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeChoices(pThis, __presult))
        }
    }
    public func get_FileTypeChoices() throws -> Optional<ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_FileTypeChoices(&__result);
        return ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] System.String get_DefaultFileExtension()
    private func _n_get_DefaultFileExtension(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFileExtension(pThis, __presult))
        }
    }
    public func get_DefaultFileExtension() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DefaultFileExtension(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_DefaultFileExtension(System.String)
    private func _n_put_DefaultFileExtension(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultFileExtension(pThis, value))
        }
    }
    public func put_DefaultFileExtension(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DefaultFileExtension(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.StorageFile get_SuggestedSaveFile()
    private func _n_get_SuggestedSaveFile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedSaveFile(pThis, __presult))
        }
    }
    public func get_SuggestedSaveFile() throws -> Optional<Windows.Storage.IStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>> = nil;
        try self._n_get_SuggestedSaveFile(&__result);
        return Windows.Storage.IStorageFile(consuming: __result);
    }
    // [IsSpecialName] void put_SuggestedSaveFile(Windows.Storage.StorageFile)
    private func _n_put_SuggestedSaveFile(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedSaveFile(pThis, value))
        }
    }
    public func put_SuggestedSaveFile(value : Optional<Windows.Storage.IStorageFile>) throws -> Void {
        try self._n_put_SuggestedSaveFile(RawPointer(value));
    }
    // [IsSpecialName] System.String get_SuggestedFileName()
    private func _n_get_SuggestedFileName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedFileName(pThis, __presult))
        }
    }
    public func get_SuggestedFileName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SuggestedFileName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_SuggestedFileName(System.String)
    private func _n_put_SuggestedFileName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedFileName(pThis, value))
        }
    }
    public func put_SuggestedFileName(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_SuggestedFileName(__hstr_value.Raw());
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFile> PickSaveFileAsync()
    private func _n_PickSaveFileAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickSaveFileAsync(pThis, __presult))
        }
    }
    public func PickSaveFileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_PickSaveFileAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func PickSaveFile() async throws -> Optional<Windows.Storage.IStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PickSaveFileAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CommitButtonText : Swift.String {
        get throws {
            return try get_CommitButtonText();
        }
    }
    public var DefaultFileExtension : Swift.String {
        get throws {
            return try get_DefaultFileExtension();
        }
    }
    public var FileTypeChoices : Optional<ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING> {
        get throws {
            return try get_FileTypeChoices();
        }
    }
    public var SettingsIdentifier : Swift.String {
        get throws {
            return try get_SettingsIdentifier();
        }
    }
    public var SuggestedFileName : Swift.String {
        get throws {
            return try get_SuggestedFileName();
        }
    }
    public var SuggestedSaveFile : Optional<Windows.Storage.IStorageFile> {
        get throws {
            return try get_SuggestedSaveFile();
        }
    }
    public var SuggestedStartLocation : Windows.Storage.Pickers.PickerLocationId {
        get throws {
            return try get_SuggestedStartLocation();
        }
    }
} // IFileSavePicker


// type: Windows.Storage.Pickers.IFileSavePicker2
// interface type
open class IFileSavePicker2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0ec313a2, Data2: 0xd24b, Data3 : 0x449a, Data4 : (0x81, 0x97, 0xe8, 0x91, 0x04, 0xfd, 0x42, 0xcc)) }
    // [IsSpecialName] Windows.Foundation.Collections.ValueSet get_ContinuationData()
    private func _n_get_ContinuationData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContinuationData(pThis, __presult))
        }
    }
    public func get_ContinuationData() throws -> Optional<Windows.Foundation.Collections.IPropertySet> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>> = nil;
        try self._n_get_ContinuationData(&__result);
        return Windows.Foundation.Collections.IPropertySet(consuming: __result);
    }
    // void PickSaveFileAndContinue()
    private func _n_PickSaveFileAndContinue() throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickSaveFileAndContinue(pThis))
        }
    }
    public func PickSaveFileAndContinue() throws -> Void {
        try self._n_PickSaveFileAndContinue();
    }
    public var ContinuationData : Optional<Windows.Foundation.Collections.IPropertySet> {
        get throws {
            return try get_ContinuationData();
        }
    }
} // IFileSavePicker2


// type: Windows.Storage.Pickers.IFileSavePicker3
// interface type
open class IFileSavePicker3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x698aec69, Data2: 0xba3c, Data3 : 0x4e51, Data4 : (0xbd, 0x90, 0x4a, 0xbc, 0xbb, 0xf4, 0xcf, 0xaf)) }
    // [IsSpecialName] System.String get_EnterpriseId()
    private func _n_get_EnterpriseId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnterpriseId(pThis, __presult))
        }
    }
    public func get_EnterpriseId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_EnterpriseId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_EnterpriseId(System.String)
    private func _n_put_EnterpriseId(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnterpriseId(pThis, value))
        }
    }
    public func put_EnterpriseId(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_EnterpriseId(__hstr_value.Raw());
        }
    }
    public var EnterpriseId : Swift.String {
        get throws {
            return try get_EnterpriseId();
        }
    }
} // IFileSavePicker3


// type: Windows.Storage.Pickers.IFileSavePicker4
// interface type
open class IFileSavePicker4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe7d83a5a, Data2: 0xddfa, Data3 : 0x5de0, Data4 : (0x8b, 0x70, 0xc8, 0x42, 0xc2, 0x19, 0x88, 0xec)) }
    // [IsSpecialName] Windows.System.User get_User()
    private func _n_get_User(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePicker4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, __presult))
        }
    }
    public func get_User() throws -> Optional<Windows.System.IUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>> = nil;
        try self._n_get_User(&__result);
        return Windows.System.IUser(consuming: __result);
    }
    public var User : Optional<Windows.System.IUser> {
        get throws {
            return try get_User();
        }
    }
} // IFileSavePicker4


// type: Windows.Storage.Pickers.IFileSavePickerStatics
// interface type
open class IFileSavePickerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x28e3cf9e, Data2: 0x961c, Data3 : 0x5e2c, Data4 : (0xae, 0xd7, 0xe6, 0x47, 0x37, 0xf4, 0xce, 0x37)) }
    // Windows.Storage.Pickers.FileSavePicker CreateForUser(Windows.System.User)
    private func _n_CreateForUser(_ user : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CIFileSavePicker>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFileSavePickerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForUser(pThis, user, __presult))
        }
    }
    public func CreateForUser(user : Optional<Windows.System.IUser>) throws -> Optional<Windows.Storage.Pickers.IFileSavePicker> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CIFileSavePicker>> = nil;
        try self._n_CreateForUser(RawPointer(user), &__result);
        return Windows.Storage.Pickers.IFileSavePicker(consuming: __result);
    }
} // IFileSavePickerStatics


// type: Windows.Storage.Pickers.IFolderPicker
// interface type
open class IFolderPicker
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x084f7799, Data2: 0xf3fb, Data3 : 0x400a, Data4 : (0x99, 0xb1, 0x7b, 0x4a, 0x77, 0x2f, 0xd6, 0x0d)) }
    // [IsSpecialName] Windows.Storage.Pickers.PickerViewMode get_ViewMode()
    private func _n_get_ViewMode(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CPickerViewMode>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ViewMode(pThis, __presult))
        }
    }
    public func get_ViewMode() throws -> Windows.Storage.Pickers.PickerViewMode {
        var __result : _q_CWindows_CStorage_CPickers_CPickerViewMode = _q_CWindows_CStorage_CPickers_CPickerViewMode_List;
        try self._n_get_ViewMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ViewMode(Windows.Storage.Pickers.PickerViewMode)
    private func _n_put_ViewMode(_ value : _q_CWindows_CStorage_CPickers_CPickerViewMode) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ViewMode(pThis, value))
        }
    }
    public func put_ViewMode(value : Windows.Storage.Pickers.PickerViewMode) throws -> Void {
        try self._n_put_ViewMode(value);
    }
    // [IsSpecialName] System.String get_SettingsIdentifier()
    private func _n_get_SettingsIdentifier(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, __presult))
        }
    }
    public func get_SettingsIdentifier() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SettingsIdentifier(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_SettingsIdentifier(System.String)
    private func _n_put_SettingsIdentifier(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SettingsIdentifier(pThis, value))
        }
    }
    public func put_SettingsIdentifier(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_SettingsIdentifier(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Pickers.PickerLocationId get_SuggestedStartLocation()
    private func _n_get_SuggestedStartLocation(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CPickerLocationId>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuggestedStartLocation(pThis, __presult))
        }
    }
    public func get_SuggestedStartLocation() throws -> Windows.Storage.Pickers.PickerLocationId {
        var __result : _q_CWindows_CStorage_CPickers_CPickerLocationId = _q_CWindows_CStorage_CPickers_CPickerLocationId_DocumentsLibrary;
        try self._n_get_SuggestedStartLocation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SuggestedStartLocation(Windows.Storage.Pickers.PickerLocationId)
    private func _n_put_SuggestedStartLocation(_ value : _q_CWindows_CStorage_CPickers_CPickerLocationId) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SuggestedStartLocation(pThis, value))
        }
    }
    public func put_SuggestedStartLocation(value : Windows.Storage.Pickers.PickerLocationId) throws -> Void {
        try self._n_put_SuggestedStartLocation(value);
    }
    // [IsSpecialName] System.String get_CommitButtonText()
    private func _n_get_CommitButtonText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommitButtonText(pThis, __presult))
        }
    }
    public func get_CommitButtonText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CommitButtonText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_CommitButtonText(System.String)
    private func _n_put_CommitButtonText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommitButtonText(pThis, value))
        }
    }
    public func put_CommitButtonText(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_CommitButtonText(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_FileTypeFilter()
    private func _n_get_FileTypeFilter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeFilter(pThis, __presult))
        }
    }
    public func get_FileTypeFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_FileTypeFilter(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.StorageFolder> PickSingleFolderAsync()
    private func _n_PickSingleFolderAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickSingleFolderAsync(pThis, __presult))
        }
    }
    public func PickSingleFolderAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder>> = nil;
        try self._n_PickSingleFolderAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder(consuming: __result);
    }
    public func PickSingleFolder() async throws -> Optional<Windows.Storage.IStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PickSingleFolderAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CommitButtonText : Swift.String {
        get throws {
            return try get_CommitButtonText();
        }
    }
    public var FileTypeFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_FileTypeFilter();
        }
    }
    public var SettingsIdentifier : Swift.String {
        get throws {
            return try get_SettingsIdentifier();
        }
    }
    public var SuggestedStartLocation : Windows.Storage.Pickers.PickerLocationId {
        get throws {
            return try get_SuggestedStartLocation();
        }
    }
    public var ViewMode : Windows.Storage.Pickers.PickerViewMode {
        get throws {
            return try get_ViewMode();
        }
    }
} // IFolderPicker


// type: Windows.Storage.Pickers.IFolderPicker2
// interface type
open class IFolderPicker2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8eb3ba97, Data2: 0xdc85, Data3 : 0x4616, Data4 : (0xbe, 0x94, 0x96, 0x60, 0x88, 0x1f, 0x2f, 0x5d)) }
    // [IsSpecialName] Windows.Foundation.Collections.ValueSet get_ContinuationData()
    private func _n_get_ContinuationData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContinuationData(pThis, __presult))
        }
    }
    public func get_ContinuationData() throws -> Optional<Windows.Foundation.Collections.IPropertySet> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CCollections_CIPropertySet>> = nil;
        try self._n_get_ContinuationData(&__result);
        return Windows.Foundation.Collections.IPropertySet(consuming: __result);
    }
    // void PickFolderAndContinue()
    private func _n_PickFolderAndContinue() throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PickFolderAndContinue(pThis))
        }
    }
    public func PickFolderAndContinue() throws -> Void {
        try self._n_PickFolderAndContinue();
    }
    public var ContinuationData : Optional<Windows.Foundation.Collections.IPropertySet> {
        get throws {
            return try get_ContinuationData();
        }
    }
} // IFolderPicker2


// type: Windows.Storage.Pickers.IFolderPicker3
// interface type
open class IFolderPicker3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x673b1e29, Data2: 0xd326, Data3 : 0x53c0, Data4 : (0xbd, 0x24, 0xa2, 0x5c, 0x71, 0x4c, 0xee, 0x36)) }
    // [IsSpecialName] Windows.System.User get_User()
    private func _n_get_User(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPicker3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, __presult))
        }
    }
    public func get_User() throws -> Optional<Windows.System.IUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>> = nil;
        try self._n_get_User(&__result);
        return Windows.System.IUser(consuming: __result);
    }
    public var User : Optional<Windows.System.IUser> {
        get throws {
            return try get_User();
        }
    }
} // IFolderPicker3


// type: Windows.Storage.Pickers.IFolderPickerStatics
// interface type
open class IFolderPickerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9be34740, Data2: 0x7ca1, Data3 : 0x5942, Data4 : (0xa3, 0xc8, 0x46, 0xf2, 0x55, 0x1e, 0xcf, 0xf3)) }
    // Windows.Storage.Pickers.FolderPicker CreateForUser(Windows.System.User)
    private func _n_CreateForUser(_ user : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CIFolderPicker>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CIFolderPickerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForUser(pThis, user, __presult))
        }
    }
    public func CreateForUser(user : Optional<Windows.System.IUser>) throws -> Optional<Windows.Storage.Pickers.IFolderPicker> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CIFolderPicker>> = nil;
        try self._n_CreateForUser(RawPointer(user), &__result);
        return Windows.Storage.Pickers.IFolderPicker(consuming: __result);
    }
} // IFolderPickerStatics


// type: Windows.Storage.Pickers.PickerLocationId
// enum type
public typealias PickerLocationId = _q_CWindows_CStorage_CPickers_CPickerLocationId;

// type: Windows.Storage.Pickers.PickerViewMode
// enum type
public typealias PickerViewMode = _q_CWindows_CStorage_CPickers_CPickerViewMode;

}
extension Windows.Storage.Pickers.PickerLocationId {
    public static var DocumentsLibrary : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_DocumentsLibrary;
        }
    }
    public static var ComputerFolder : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_ComputerFolder;
        }
    }
    public static var Desktop : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_Desktop;
        }
    }
    public static var Downloads : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_Downloads;
        }
    }
    public static var HomeGroup : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_HomeGroup;
        }
    }
    public static var MusicLibrary : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_MusicLibrary;
        }
    }
    public static var PicturesLibrary : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_PicturesLibrary;
        }
    }
    public static var VideosLibrary : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_VideosLibrary;
        }
    }
    public static var Objects3D : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_Objects3D;
        }
    }
    public static var Unspecified : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerLocationId_Unspecified;
        }
    }
}
extension Windows.Storage.Pickers.PickerViewMode {
    public static var List : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerViewMode_List;
        }
    }
    public static var Thumbnail : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CPickerViewMode_Thumbnail;
        }
    }
}
