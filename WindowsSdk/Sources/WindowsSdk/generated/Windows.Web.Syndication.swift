// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Web.Syndication {
// type: Windows.Web.Syndication.ISyndicationAttribute
// interface type
open class ISyndicationAttribute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x71e8f969, Data2: 0x526e, Data3 : 0x4001, Data4 : (0x9a, 0x91, 0xe8, 0x4f, 0x83, 0x16, 0x1a, 0xb1)) }
// method not needed: get_Name
// method not needed: put_Name
// method not needed: get_Namespace
// method not needed: put_Namespace
// method not needed: get_Value
// method not needed: put_Value
} // ISyndicationAttribute


// type: Windows.Web.Syndication.ISyndicationAttributeFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationAttributeFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x624f1599, Data2: 0xed3e, Data3 : 0x420f, Data4 : (0xbe, 0x86, 0x64, 0x04, 0x14, 0x88, 0x6e, 0x4b)) }
    // Windows.Web.Syndication.SyndicationAttribute CreateSyndicationAttribute(System.String, System.String, System.String)
    private func _n_CreateSyndicationAttribute(_ attributeName : Optional<HSTRING>, _ attributeNamespace : Optional<HSTRING>, _ attributeValue : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationAttribute>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationAttributeFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationAttribute(pThis, attributeName, attributeNamespace, attributeValue, __presult))
        }
    }
    public func CreateSyndicationAttribute(attributeName : Optional<Swift.String>, attributeNamespace : Optional<Swift.String>, attributeValue : Optional<Swift.String>) throws -> Optional<Windows.Web.Syndication.ISyndicationAttribute> {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        let __hstr_attributeNamespace = try HString(attributeNamespace!);
        return try withExtendedLifetime(__hstr_attributeNamespace) {
        let __hstr_attributeValue = try HString(attributeValue!);
        return try withExtendedLifetime(__hstr_attributeValue) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationAttribute>> = nil;
        try self._n_CreateSyndicationAttribute(__hstr_attributeName.Raw(), __hstr_attributeNamespace.Raw(), __hstr_attributeValue.Raw(), &__result);
        return Windows.Web.Syndication.ISyndicationAttribute(consuming: __result);
        }
        }
        }
    }
} // ISyndicationAttributeFactory


// type: Windows.Web.Syndication.ISyndicationCategory
// interface type
open class ISyndicationCategory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8715626f, Data2: 0x0cba, Data3 : 0x4a7f, Data4 : (0x89, 0xff, 0xec, 0xb5, 0x28, 0x14, 0x23, 0xb6)) }
    // [IsSpecialName] System.String get_Label()
    private func _n_get_Label(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Label(pThis, __presult))
        }
    }
    public func get_Label() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Label(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Label(System.String)
    private func _n_put_Label(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Label(pThis, value))
        }
    }
    public func put_Label(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Label(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Scheme()
    private func _n_get_Scheme(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scheme(pThis, __presult))
        }
    }
    public func get_Scheme() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Scheme(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Scheme(System.String)
    private func _n_put_Scheme(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Scheme(pThis, value))
        }
    }
    public func put_Scheme(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Scheme(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Term()
    private func _n_get_Term(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Term(pThis, __presult))
        }
    }
    public func get_Term() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Term(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Term(System.String)
    private func _n_put_Term(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Term(pThis, value))
        }
    }
    public func put_Term(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Term(__hstr_value.Raw());
        }
    }
    public var Label : Swift.String {
        get throws {
            return try get_Label();
        }
    }
    public var Scheme : Swift.String {
        get throws {
            return try get_Scheme();
        }
    }
    public var Term : Swift.String {
        get throws {
            return try get_Term();
        }
    }
} // ISyndicationCategory


// type: Windows.Web.Syndication.ISyndicationCategoryFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationCategoryFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xab42802f, Data2: 0x49e0, Data3 : 0x4525, Data4 : (0x8a, 0xb2, 0xab, 0x45, 0xc0, 0x25, 0x28, 0xff)) }
    // Windows.Web.Syndication.SyndicationCategory CreateSyndicationCategory(System.String)
    private func _n_CreateSyndicationCategory(_ term : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationCategory>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategoryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationCategory(pThis, term, __presult))
        }
    }
    public func CreateSyndicationCategory(term : Optional<Swift.String>) throws -> Optional<Windows.Web.Syndication.ISyndicationCategory> {
        let __hstr_term = try HString(term!);
        return try withExtendedLifetime(__hstr_term) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationCategory>> = nil;
        try self._n_CreateSyndicationCategory(__hstr_term.Raw(), &__result);
        return Windows.Web.Syndication.ISyndicationCategory(consuming: __result);
        }
    }
    // Windows.Web.Syndication.SyndicationCategory CreateSyndicationCategoryEx(System.String, System.String, System.String)
    private func _n_CreateSyndicationCategoryEx(_ term : Optional<HSTRING>, _ scheme : Optional<HSTRING>, _ label : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationCategory>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationCategoryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationCategoryEx(pThis, term, scheme, label, __presult))
        }
    }
    public func CreateSyndicationCategoryEx(term : Optional<Swift.String>, scheme : Optional<Swift.String>, label : Optional<Swift.String>) throws -> Optional<Windows.Web.Syndication.ISyndicationCategory> {
        let __hstr_term = try HString(term!);
        return try withExtendedLifetime(__hstr_term) {
        let __hstr_scheme = try HString(scheme!);
        return try withExtendedLifetime(__hstr_scheme) {
        let __hstr_label = try HString(label!);
        return try withExtendedLifetime(__hstr_label) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationCategory>> = nil;
        try self._n_CreateSyndicationCategoryEx(__hstr_term.Raw(), __hstr_scheme.Raw(), __hstr_label.Raw(), &__result);
        return Windows.Web.Syndication.ISyndicationCategory(consuming: __result);
        }
        }
        }
    }
} // ISyndicationCategoryFactory


// type: Windows.Web.Syndication.ISyndicationClient
// interface type
open class ISyndicationClient
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e18a9b7, Data2: 0x7249, Data3 : 0x4b45, Data4 : (0xb2, 0x29, 0x7d, 0xf8, 0x95, 0xa5, 0xa1, 0xf5)) }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_ServerCredential()
    private func _n_get_ServerCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCredential(pThis, __presult))
        }
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_ServerCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] void put_ServerCredential(Windows.Security.Credentials.PasswordCredential)
    private func _n_put_ServerCredential(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ServerCredential(pThis, value))
        }
    }
    public func put_ServerCredential(value : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Void {
        try self._n_put_ServerCredential(RawPointer(value));
    }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_ProxyCredential()
    private func _n_get_ProxyCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyCredential(pThis, __presult))
        }
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_ProxyCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] void put_ProxyCredential(Windows.Security.Credentials.PasswordCredential)
    private func _n_put_ProxyCredential(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProxyCredential(pThis, value))
        }
    }
    public func put_ProxyCredential(value : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Void {
        try self._n_put_ProxyCredential(RawPointer(value));
    }
    // [IsSpecialName] System.UInt32 get_MaxResponseBufferSize()
    private func _n_get_MaxResponseBufferSize(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxResponseBufferSize(pThis, __presult))
        }
    }
    public func get_MaxResponseBufferSize() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxResponseBufferSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxResponseBufferSize(System.UInt32)
    private func _n_put_MaxResponseBufferSize(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxResponseBufferSize(pThis, value))
        }
    }
    public func put_MaxResponseBufferSize(value : Swift.UInt32) throws -> Void {
        try self._n_put_MaxResponseBufferSize(value);
    }
    // [IsSpecialName] System.UInt32 get_Timeout()
    private func _n_get_Timeout(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Timeout(pThis, __presult))
        }
    }
    public func get_Timeout() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Timeout(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Timeout(System.UInt32)
    private func _n_put_Timeout(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Timeout(pThis, value))
        }
    }
    public func put_Timeout(value : Swift.UInt32) throws -> Void {
        try self._n_put_Timeout(value);
    }
    // [IsSpecialName] bool get_BypassCacheOnRetrieve()
    private func _n_get_BypassCacheOnRetrieve(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BypassCacheOnRetrieve(pThis, __presult))
        }
    }
    public func get_BypassCacheOnRetrieve() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_BypassCacheOnRetrieve(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BypassCacheOnRetrieve(bool)
    private func _n_put_BypassCacheOnRetrieve(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BypassCacheOnRetrieve(pThis, value))
        }
    }
    public func put_BypassCacheOnRetrieve(value : boolean) throws -> Void {
        try self._n_put_BypassCacheOnRetrieve(value);
    }
    // void SetRequestHeader(System.String, System.String)
    private func _n_SetRequestHeader(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRequestHeader(pThis, name, value))
        }
    }
    public func SetRequestHeader(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> Void {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_SetRequestHeader(__hstr_name.Raw(), __hstr_value.Raw());
        }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Web.Syndication.SyndicationFeed,Windows.Web.Syndication.RetrievalProgress> RetrieveFeedAsync(Windows.Foundation.Uri)
    private func _n_RetrieveFeedAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationFeed__q_CWindows_CWeb_CSyndication_CRetrievalProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RetrieveFeedAsync(pThis, uri, __presult))
        }
    }
    public func RetrieveFeedAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationFeed__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationFeed__q_CWindows_CWeb_CSyndication_CRetrievalProgress>> = nil;
        try self._n_RetrieveFeedAsync(RawPointer(uri), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationFeed__q_CWindows_CWeb_CSyndication_CRetrievalProgress(consuming: __result);
    }
    public func RetrieveFeed(uri : Optional<Windows.Foundation.IUriRuntimeClass>) async throws -> Optional<Windows.Web.Syndication.ISyndicationFeed> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RetrieveFeedAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var BypassCacheOnRetrieve : boolean {
        get throws {
            return try get_BypassCacheOnRetrieve();
        }
    }
    public var MaxResponseBufferSize : Swift.UInt32 {
        get throws {
            return try get_MaxResponseBufferSize();
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_ProxyCredential();
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_ServerCredential();
        }
    }
    public var Timeout : Swift.UInt32 {
        get throws {
            return try get_Timeout();
        }
    }
} // ISyndicationClient


// type: Windows.Web.Syndication.ISyndicationClientFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationClientFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2ec4b32c, Data2: 0xa79b, Data3 : 0x4114, Data4 : (0xb2, 0x9a, 0x05, 0xdf, 0xfb, 0xaf, 0xb9, 0xa4)) }
    // Windows.Web.Syndication.SyndicationClient CreateSyndicationClient(Windows.Security.Credentials.PasswordCredential)
    private func _n_CreateSyndicationClient(_ serverCredential : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationClient>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationClientFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationClient(pThis, serverCredential, __presult))
        }
    }
    public func CreateSyndicationClient(serverCredential : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Optional<Windows.Web.Syndication.ISyndicationClient> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationClient>> = nil;
        try self._n_CreateSyndicationClient(RawPointer(serverCredential), &__result);
        return Windows.Web.Syndication.ISyndicationClient(consuming: __result);
    }
} // ISyndicationClientFactory


// type: Windows.Web.Syndication.ISyndicationContent
// interface type
open class ISyndicationContent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4641fefe, Data2: 0x0e55, Data3 : 0x40d0, Data4 : (0xb8, 0xd0, 0x6a, 0x2c, 0xcb, 0xa9, 0xfc, 0x7c)) }
    // [IsSpecialName] Windows.Foundation.Uri get_SourceUri()
    private func _n_get_SourceUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceUri(pThis, __presult))
        }
    }
    public func get_SourceUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_SourceUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_SourceUri(Windows.Foundation.Uri)
    private func _n_put_SourceUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceUri(pThis, value))
        }
    }
    public func put_SourceUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_SourceUri(RawPointer(value));
    }
    public var SourceUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_SourceUri();
        }
    }
} // ISyndicationContent


// type: Windows.Web.Syndication.ISyndicationContentFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationContentFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3d2fbb93, Data2: 0x9520, Data3 : 0x4173, Data4 : (0x93, 0x88, 0x7e, 0x2d, 0xf3, 0x24, 0xa8, 0xa0)) }
    // Windows.Web.Syndication.SyndicationContent CreateSyndicationContent(System.String, Windows.Web.Syndication.SyndicationTextType)
    private func _n_CreateSyndicationContent(_ text : Optional<HSTRING>, _ type : _q_CWindows_CWeb_CSyndication_CSyndicationTextType, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationContentFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationContent(pThis, text, type, __presult))
        }
    }
    public func CreateSyndicationContent(text : Optional<Swift.String>, type : Windows.Web.Syndication.SyndicationTextType) throws -> Optional<Windows.Web.Syndication.ISyndicationContent> {
        let __hstr_text = try HString(text!);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>> = nil;
        try self._n_CreateSyndicationContent(__hstr_text.Raw(), type, &__result);
        return Windows.Web.Syndication.ISyndicationContent(consuming: __result);
        }
    }
    // Windows.Web.Syndication.SyndicationContent CreateSyndicationContentWithSourceUri(Windows.Foundation.Uri)
    private func _n_CreateSyndicationContentWithSourceUri(_ sourceUri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationContentFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationContentWithSourceUri(pThis, sourceUri, __presult))
        }
    }
    public func CreateSyndicationContentWithSourceUri(sourceUri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Windows.Web.Syndication.ISyndicationContent> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>> = nil;
        try self._n_CreateSyndicationContentWithSourceUri(RawPointer(sourceUri), &__result);
        return Windows.Web.Syndication.ISyndicationContent(consuming: __result);
    }
} // ISyndicationContentFactory


// type: Windows.Web.Syndication.ISyndicationErrorStatics
// interface type
open class ISyndicationErrorStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1fbb2361, Data2: 0x45c7, Data3 : 0x4833, Data4 : (0x8a, 0xa0, 0xbe, 0x5f, 0x3b, 0x58, 0xa7, 0xf4)) }
    // Windows.Web.Syndication.SyndicationErrorStatus GetStatus(System.Int32)
    private func _n_GetStatus(_ hresult : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationErrorStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetStatus(pThis, hresult, __presult))
        }
    }
    public func GetStatus(hresult : Swift.Int32) throws -> Windows.Web.Syndication.SyndicationErrorStatus {
        var __result : _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus = _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus_Unknown;
        try self._n_GetStatus(hresult, &__result);
        return __result;
    }
} // ISyndicationErrorStatics


// type: Windows.Web.Syndication.ISyndicationFeed
// interface type
open class ISyndicationFeed
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7ffe3cd2, Data2: 0x5b66, Data3 : 0x4d62, Data4 : (0x84, 0x03, 0x1b, 0xc1, 0x0d, 0x91, 0x0d, 0x6b)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationPerson> get_Authors()
    private func _n_get_Authors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Authors(pThis, __presult))
        }
    }
    public func get_Authors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>> = nil;
        try self._n_get_Authors(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationCategory> get_Categories()
    private func _n_get_Categories(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Categories(pThis, __presult))
        }
    }
    public func get_Categories() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory>> = nil;
        try self._n_get_Categories(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationPerson> get_Contributors()
    private func _n_get_Contributors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Contributors(pThis, __presult))
        }
    }
    public func get_Contributors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>> = nil;
        try self._n_get_Contributors(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Syndication.SyndicationGenerator get_Generator()
    private func _n_get_Generator(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationGenerator>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Generator(pThis, __presult))
        }
    }
    public func get_Generator() throws -> Optional<Windows.Web.Syndication.ISyndicationGenerator> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationGenerator>> = nil;
        try self._n_get_Generator(&__result);
        return Windows.Web.Syndication.ISyndicationGenerator(consuming: __result);
    }
    // [IsSpecialName] void put_Generator(Windows.Web.Syndication.SyndicationGenerator)
    private func _n_put_Generator(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationGenerator>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Generator(pThis, value))
        }
    }
    public func put_Generator(value : Optional<Windows.Web.Syndication.ISyndicationGenerator>) throws -> Void {
        try self._n_put_Generator(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_IconUri()
    private func _n_get_IconUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconUri(pThis, __presult))
        }
    }
    public func get_IconUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_IconUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_IconUri(Windows.Foundation.Uri)
    private func _n_put_IconUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconUri(pThis, value))
        }
    }
    public func put_IconUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_IconUri(RawPointer(value));
    }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Id(System.String)
    private func _n_put_Id(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
        }
    }
    public func put_Id(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Id(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationItem> get_Items()
    private func _n_get_Items(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationItem>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Items(pThis, __presult))
        }
    }
    public func get_Items() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationItem> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationItem>> = nil;
        try self._n_get_Items(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationItem(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.DateTime get_LastUpdatedTime()
    private func _n_get_LastUpdatedTime(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CDateTime>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastUpdatedTime(pThis, __presult))
        }
    }
    public func get_LastUpdatedTime() throws -> Windows.Foundation.DateTime {
        var __result : _q_CWindows_CFoundation_CDateTime = _q_CWindows_CFoundation_CDateTime(UniversalTime: 0);
        try self._n_get_LastUpdatedTime(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LastUpdatedTime(Windows.Foundation.DateTime)
    private func _n_put_LastUpdatedTime(_ value : _q_CWindows_CFoundation_CDateTime) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastUpdatedTime(pThis, value))
        }
    }
    public func put_LastUpdatedTime(value : Windows.Foundation.DateTime) throws -> Void {
        try self._n_put_LastUpdatedTime(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationLink> get_Links()
    private func _n_get_Links(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Links(pThis, __presult))
        }
    }
    public func get_Links() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink>> = nil;
        try self._n_get_Links(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_ImageUri()
    private func _n_get_ImageUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ImageUri(pThis, __presult))
        }
    }
    public func get_ImageUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_ImageUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_ImageUri(Windows.Foundation.Uri)
    private func _n_put_ImageUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ImageUri(pThis, value))
        }
    }
    public func put_ImageUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_ImageUri(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Rights()
    private func _n_get_Rights(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Rights(pThis, __presult))
        }
    }
    public func get_Rights() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Rights(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] void put_Rights(Windows.Web.Syndication.ISyndicationText)
    private func _n_put_Rights(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Rights(pThis, value))
        }
    }
    public func put_Rights(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        try self._n_put_Rights(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Subtitle()
    private func _n_get_Subtitle(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Subtitle(pThis, __presult))
        }
    }
    public func get_Subtitle() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Subtitle(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] void put_Subtitle(Windows.Web.Syndication.ISyndicationText)
    private func _n_put_Subtitle(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Subtitle(pThis, value))
        }
    }
    public func put_Subtitle(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        try self._n_put_Subtitle(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Title(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] void put_Title(Windows.Web.Syndication.ISyndicationText)
    private func _n_put_Title(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        try self._n_put_Title(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_FirstUri()
    private func _n_get_FirstUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstUri(pThis, __presult))
        }
    }
    public func get_FirstUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_FirstUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_LastUri()
    private func _n_get_LastUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastUri(pThis, __presult))
        }
    }
    public func get_LastUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_LastUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_NextUri()
    private func _n_get_NextUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextUri(pThis, __presult))
        }
    }
    public func get_NextUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_NextUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_PreviousUri()
    private func _n_get_PreviousUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviousUri(pThis, __presult))
        }
    }
    public func get_PreviousUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_PreviousUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Syndication.SyndicationFormat get_SourceFormat()
    private func _n_get_SourceFormat(_ __presult: UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CSyndicationFormat>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceFormat(pThis, __presult))
        }
    }
    public func get_SourceFormat() throws -> Windows.Web.Syndication.SyndicationFormat {
        var __result : _q_CWindows_CWeb_CSyndication_CSyndicationFormat = _q_CWindows_CWeb_CSyndication_CSyndicationFormat_Atom10;
        try self._n_get_SourceFormat(&__result);
        return __result;
    }
    // void Load(System.String)
    private func _n_Load(_ feed : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Load(pThis, feed))
        }
    }
    public func Load(feed : Optional<Swift.String>) throws -> Void {
        let __hstr_feed = try HString(feed!);
        return try withExtendedLifetime(__hstr_feed) {
        try self._n_Load(__hstr_feed.Raw());
        }
    }
    // void LoadFromXml(Windows.Data.Xml.Dom.XmlDocument)
    private func _n_LoadFromXml(_ feedDocument : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeed.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromXml(pThis, feedDocument))
        }
    }
    public func LoadFromXml(feedDocument : Optional<Windows.Data.Xml.Dom.IXmlDocument>) throws -> Void {
        try self._n_LoadFromXml(RawPointer(feedDocument));
    }
    public var Authors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
            return try get_Authors();
        }
    }
    public var Categories : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        get throws {
            return try get_Categories();
        }
    }
    public var Contributors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
            return try get_Contributors();
        }
    }
    public var FirstUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_FirstUri();
        }
    }
    public var Generator : Optional<Windows.Web.Syndication.ISyndicationGenerator> {
        get throws {
            return try get_Generator();
        }
    }
    public var IconUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_IconUri();
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var ImageUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_ImageUri();
        }
    }
    public var Items : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationItem> {
        get throws {
            return try get_Items();
        }
    }
    public var LastUpdatedTime : Windows.Foundation.DateTime {
        get throws {
            return try get_LastUpdatedTime();
        }
    }
    public var LastUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_LastUri();
        }
    }
    public var Links : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        get throws {
            return try get_Links();
        }
    }
    public var NextUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_NextUri();
        }
    }
    public var PreviousUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_PreviousUri();
        }
    }
    public var Rights : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Rights();
        }
    }
    public var SourceFormat : Windows.Web.Syndication.SyndicationFormat {
        get throws {
            return try get_SourceFormat();
        }
    }
    public var Subtitle : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Subtitle();
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Title();
        }
    }
} // ISyndicationFeed


// type: Windows.Web.Syndication.ISyndicationFeedFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationFeedFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x23472232, Data2: 0x8be9, Data3 : 0x48b7, Data4 : (0x89, 0x34, 0x62, 0x05, 0x13, 0x1d, 0x93, 0x57)) }
    // Windows.Web.Syndication.SyndicationFeed CreateSyndicationFeed(System.String, System.String, Windows.Foundation.Uri)
    private func _n_CreateSyndicationFeed(_ title : Optional<HSTRING>, _ subtitle : Optional<HSTRING>, _ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationFeed>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationFeedFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationFeed(pThis, title, subtitle, uri, __presult))
        }
    }
    public func CreateSyndicationFeed(title : Optional<Swift.String>, subtitle : Optional<Swift.String>, uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Windows.Web.Syndication.ISyndicationFeed> {
        let __hstr_title = try HString(title!);
        return try withExtendedLifetime(__hstr_title) {
        let __hstr_subtitle = try HString(subtitle!);
        return try withExtendedLifetime(__hstr_subtitle) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationFeed>> = nil;
        try self._n_CreateSyndicationFeed(__hstr_title.Raw(), __hstr_subtitle.Raw(), RawPointer(uri), &__result);
        return Windows.Web.Syndication.ISyndicationFeed(consuming: __result);
        }
        }
    }
} // ISyndicationFeedFactory


// type: Windows.Web.Syndication.ISyndicationGenerator
// interface type
open class ISyndicationGenerator
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9768b379, Data2: 0xfb2b, Data3 : 0x4f6d, Data4 : (0xb4, 0x1c, 0x08, 0x8a, 0x58, 0x68, 0x82, 0x5c)) }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Text(System.String)
    private func _n_put_Text(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, value))
        }
    }
    public func put_Text(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Text(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Uri get_Uri()
    private func _n_get_Uri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, __presult))
        }
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_Uri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_Uri(Windows.Foundation.Uri)
    private func _n_put_Uri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Uri(pThis, value))
        }
    }
    public func put_Uri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_Uri(RawPointer(value));
    }
    // [IsSpecialName] System.String get_Version()
    private func _n_get_Version(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Version(pThis, __presult))
        }
    }
    public func get_Version() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Version(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Version(System.String)
    private func _n_put_Version(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Version(pThis, value))
        }
    }
    public func put_Version(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Version(__hstr_value.Raw());
        }
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
    public var Uri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_Uri();
        }
    }
    public var Version : Swift.String {
        get throws {
            return try get_Version();
        }
    }
} // ISyndicationGenerator


// type: Windows.Web.Syndication.ISyndicationGeneratorFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationGeneratorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa34083e3, Data2: 0x1e26, Data3 : 0x4dbc, Data4 : (0xba, 0x9d, 0x1a, 0xb8, 0x4b, 0xef, 0xf9, 0x7b)) }
    // Windows.Web.Syndication.SyndicationGenerator CreateSyndicationGenerator(System.String)
    private func _n_CreateSyndicationGenerator(_ text : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationGenerator>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationGeneratorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationGenerator(pThis, text, __presult))
        }
    }
    public func CreateSyndicationGenerator(text : Optional<Swift.String>) throws -> Optional<Windows.Web.Syndication.ISyndicationGenerator> {
        let __hstr_text = try HString(text!);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationGenerator>> = nil;
        try self._n_CreateSyndicationGenerator(__hstr_text.Raw(), &__result);
        return Windows.Web.Syndication.ISyndicationGenerator(consuming: __result);
        }
    }
} // ISyndicationGeneratorFactory


// type: Windows.Web.Syndication.ISyndicationItem
// interface type
open class ISyndicationItem
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x548db883, Data2: 0xc384, Data3 : 0x45c1, Data4 : (0x8a, 0xe8, 0xa3, 0x78, 0xc4, 0xec, 0x48, 0x6c)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationPerson> get_Authors()
    private func _n_get_Authors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Authors(pThis, __presult))
        }
    }
    public func get_Authors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>> = nil;
        try self._n_get_Authors(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationCategory> get_Categories()
    private func _n_get_Categories(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Categories(pThis, __presult))
        }
    }
    public func get_Categories() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory>> = nil;
        try self._n_get_Categories(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationPerson> get_Contributors()
    private func _n_get_Contributors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Contributors(pThis, __presult))
        }
    }
    public func get_Contributors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson>> = nil;
        try self._n_get_Contributors(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Syndication.SyndicationContent get_Content()
    private func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Optional<Windows.Web.Syndication.ISyndicationContent> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>> = nil;
        try self._n_get_Content(&__result);
        return Windows.Web.Syndication.ISyndicationContent(consuming: __result);
    }
    // [IsSpecialName] void put_Content(Windows.Web.Syndication.SyndicationContent)
    private func _n_put_Content(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, value))
        }
    }
    public func put_Content(value : Optional<Windows.Web.Syndication.ISyndicationContent>) throws -> Void {
        try self._n_put_Content(RawPointer(value));
    }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Id(System.String)
    private func _n_put_Id(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
        }
    }
    public func put_Id(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Id(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.DateTime get_LastUpdatedTime()
    private func _n_get_LastUpdatedTime(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CDateTime>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastUpdatedTime(pThis, __presult))
        }
    }
    public func get_LastUpdatedTime() throws -> Windows.Foundation.DateTime {
        var __result : _q_CWindows_CFoundation_CDateTime = _q_CWindows_CFoundation_CDateTime(UniversalTime: 0);
        try self._n_get_LastUpdatedTime(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LastUpdatedTime(Windows.Foundation.DateTime)
    private func _n_put_LastUpdatedTime(_ value : _q_CWindows_CFoundation_CDateTime) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastUpdatedTime(pThis, value))
        }
    }
    public func put_LastUpdatedTime(value : Windows.Foundation.DateTime) throws -> Void {
        try self._n_put_LastUpdatedTime(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationLink> get_Links()
    private func _n_get_Links(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Links(pThis, __presult))
        }
    }
    public func get_Links() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink>> = nil;
        try self._n_get_Links(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.DateTime get_PublishedDate()
    private func _n_get_PublishedDate(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CDateTime>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PublishedDate(pThis, __presult))
        }
    }
    public func get_PublishedDate() throws -> Windows.Foundation.DateTime {
        var __result : _q_CWindows_CFoundation_CDateTime = _q_CWindows_CFoundation_CDateTime(UniversalTime: 0);
        try self._n_get_PublishedDate(&__result);
        return __result;
    }
    // [IsSpecialName] void put_PublishedDate(Windows.Foundation.DateTime)
    private func _n_put_PublishedDate(_ value : _q_CWindows_CFoundation_CDateTime) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PublishedDate(pThis, value))
        }
    }
    public func put_PublishedDate(value : Windows.Foundation.DateTime) throws -> Void {
        try self._n_put_PublishedDate(value);
    }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Rights()
    private func _n_get_Rights(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Rights(pThis, __presult))
        }
    }
    public func get_Rights() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Rights(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] void put_Rights(Windows.Web.Syndication.ISyndicationText)
    private func _n_put_Rights(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Rights(pThis, value))
        }
    }
    public func put_Rights(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        try self._n_put_Rights(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Syndication.SyndicationFeed get_Source()
    private func _n_get_Source(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationFeed>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, __presult))
        }
    }
    public func get_Source() throws -> Optional<Windows.Web.Syndication.ISyndicationFeed> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationFeed>> = nil;
        try self._n_get_Source(&__result);
        return Windows.Web.Syndication.ISyndicationFeed(consuming: __result);
    }
    // [IsSpecialName] void put_Source(Windows.Web.Syndication.SyndicationFeed)
    private func _n_put_Source(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationFeed>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, value))
        }
    }
    public func put_Source(value : Optional<Windows.Web.Syndication.ISyndicationFeed>) throws -> Void {
        try self._n_put_Source(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Summary()
    private func _n_get_Summary(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Summary(pThis, __presult))
        }
    }
    public func get_Summary() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Summary(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] void put_Summary(Windows.Web.Syndication.ISyndicationText)
    private func _n_put_Summary(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Summary(pThis, value))
        }
    }
    public func put_Summary(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        try self._n_put_Summary(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Title(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] void put_Title(Windows.Web.Syndication.ISyndicationText)
    private func _n_put_Title(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        try self._n_put_Title(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_CommentsUri()
    private func _n_get_CommentsUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CommentsUri(pThis, __presult))
        }
    }
    public func get_CommentsUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_CommentsUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_CommentsUri(Windows.Foundation.Uri)
    private func _n_put_CommentsUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CommentsUri(pThis, value))
        }
    }
    public func put_CommentsUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_CommentsUri(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_EditUri()
    private func _n_get_EditUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EditUri(pThis, __presult))
        }
    }
    public func get_EditUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_EditUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_EditMediaUri()
    private func _n_get_EditMediaUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EditMediaUri(pThis, __presult))
        }
    }
    public func get_EditMediaUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_EditMediaUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] System.String get_ETag()
    private func _n_get_ETag(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ETag(pThis, __presult))
        }
    }
    public func get_ETag() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ETag(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_ItemUri()
    private func _n_get_ItemUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemUri(pThis, __presult))
        }
    }
    public func get_ItemUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_ItemUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // void Load(System.String)
    private func _n_Load(_ item : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Load(pThis, item))
        }
    }
    public func Load(item : Optional<Swift.String>) throws -> Void {
        let __hstr_item = try HString(item!);
        return try withExtendedLifetime(__hstr_item) {
        try self._n_Load(__hstr_item.Raw());
        }
    }
    // void LoadFromXml(Windows.Data.Xml.Dom.XmlDocument)
    private func _n_LoadFromXml(_ itemDocument : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromXml(pThis, itemDocument))
        }
    }
    public func LoadFromXml(itemDocument : Optional<Windows.Data.Xml.Dom.IXmlDocument>) throws -> Void {
        try self._n_LoadFromXml(RawPointer(itemDocument));
    }
    public var Authors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
            return try get_Authors();
        }
    }
    public var Categories : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        get throws {
            return try get_Categories();
        }
    }
    public var CommentsUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_CommentsUri();
        }
    }
    public var Content : Optional<Windows.Web.Syndication.ISyndicationContent> {
        get throws {
            return try get_Content();
        }
    }
    public var Contributors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
            return try get_Contributors();
        }
    }
    public var ETag : Swift.String {
        get throws {
            return try get_ETag();
        }
    }
    public var EditMediaUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_EditMediaUri();
        }
    }
    public var EditUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_EditUri();
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var ItemUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_ItemUri();
        }
    }
    public var LastUpdatedTime : Windows.Foundation.DateTime {
        get throws {
            return try get_LastUpdatedTime();
        }
    }
    public var Links : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        get throws {
            return try get_Links();
        }
    }
    public var PublishedDate : Windows.Foundation.DateTime {
        get throws {
            return try get_PublishedDate();
        }
    }
    public var Rights : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Rights();
        }
    }
    public var Source : Optional<Windows.Web.Syndication.ISyndicationFeed> {
        get throws {
            return try get_Source();
        }
    }
    public var Summary : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Summary();
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Title();
        }
    }
} // ISyndicationItem


// type: Windows.Web.Syndication.ISyndicationItemFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationItemFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x251d434f, Data2: 0x7db8, Data3 : 0x487a, Data4 : (0x85, 0xe4, 0x10, 0xd1, 0x91, 0xe6, 0x6e, 0xbb)) }
    // Windows.Web.Syndication.SyndicationItem CreateSyndicationItem(System.String, Windows.Web.Syndication.SyndicationContent, Windows.Foundation.Uri)
    private func _n_CreateSyndicationItem(_ title : Optional<HSTRING>, _ content : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationContent>>, _ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationItem>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationItemFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationItem(pThis, title, content, uri, __presult))
        }
    }
    public func CreateSyndicationItem(title : Optional<Swift.String>, content : Optional<Windows.Web.Syndication.ISyndicationContent>, uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Windows.Web.Syndication.ISyndicationItem> {
        let __hstr_title = try HString(title!);
        return try withExtendedLifetime(__hstr_title) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationItem>> = nil;
        try self._n_CreateSyndicationItem(__hstr_title.Raw(), RawPointer(content), RawPointer(uri), &__result);
        return Windows.Web.Syndication.ISyndicationItem(consuming: __result);
        }
    }
} // ISyndicationItemFactory


// type: Windows.Web.Syndication.ISyndicationLink
// interface type
open class ISyndicationLink
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x27553abd, Data2: 0xa10e, Data3 : 0x41b5, Data4 : (0x86, 0xbd, 0x97, 0x59, 0x08, 0x6e, 0xb0, 0xc5)) }
    // [IsSpecialName] System.UInt32 get_Length()
    private func _n_get_Length(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, __presult))
        }
    }
    public func get_Length() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Length(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Length(System.UInt32)
    private func _n_put_Length(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Length(pThis, value))
        }
    }
    public func put_Length(value : Swift.UInt32) throws -> Void {
        try self._n_put_Length(value);
    }
    // [IsSpecialName] System.String get_MediaType()
    private func _n_get_MediaType(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaType(pThis, __presult))
        }
    }
    public func get_MediaType() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MediaType(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_MediaType(System.String)
    private func _n_put_MediaType(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaType(pThis, value))
        }
    }
    public func put_MediaType(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_MediaType(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Relationship()
    private func _n_get_Relationship(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Relationship(pThis, __presult))
        }
    }
    public func get_Relationship() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Relationship(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Relationship(System.String)
    private func _n_put_Relationship(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Relationship(pThis, value))
        }
    }
    public func put_Relationship(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Relationship(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Title(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Title(System.String)
    private func _n_put_Title(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Title(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Uri get_Uri()
    private func _n_get_Uri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, __presult))
        }
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_Uri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_Uri(Windows.Foundation.Uri)
    private func _n_put_Uri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Uri(pThis, value))
        }
    }
    public func put_Uri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_Uri(RawPointer(value));
    }
    // [IsSpecialName] System.String get_ResourceLanguage()
    private func _n_get_ResourceLanguage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResourceLanguage(pThis, __presult))
        }
    }
    public func get_ResourceLanguage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ResourceLanguage(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_ResourceLanguage(System.String)
    private func _n_put_ResourceLanguage(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLink.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ResourceLanguage(pThis, value))
        }
    }
    public func put_ResourceLanguage(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_ResourceLanguage(__hstr_value.Raw());
        }
    }
    public var Length : Swift.UInt32 {
        get throws {
            return try get_Length();
        }
    }
    public var MediaType : Swift.String {
        get throws {
            return try get_MediaType();
        }
    }
    public var Relationship : Swift.String {
        get throws {
            return try get_Relationship();
        }
    }
    public var ResourceLanguage : Swift.String {
        get throws {
            return try get_ResourceLanguage();
        }
    }
    public var Title : Swift.String {
        get throws {
            return try get_Title();
        }
    }
    public var Uri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_Uri();
        }
    }
} // ISyndicationLink


// type: Windows.Web.Syndication.ISyndicationLinkFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationLinkFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5ed863d4, Data2: 0x5535, Data3 : 0x48ac, Data4 : (0x98, 0xd4, 0xc1, 0x90, 0x99, 0x50, 0x80, 0xb3)) }
    // Windows.Web.Syndication.SyndicationLink CreateSyndicationLink(Windows.Foundation.Uri)
    private func _n_CreateSyndicationLink(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationLink>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLinkFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationLink(pThis, uri, __presult))
        }
    }
    public func CreateSyndicationLink(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Windows.Web.Syndication.ISyndicationLink> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationLink>> = nil;
        try self._n_CreateSyndicationLink(RawPointer(uri), &__result);
        return Windows.Web.Syndication.ISyndicationLink(consuming: __result);
    }
    // Windows.Web.Syndication.SyndicationLink CreateSyndicationLinkEx(Windows.Foundation.Uri, System.String, System.String, System.String, System.UInt32)
    private func _n_CreateSyndicationLinkEx(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ relationship : Optional<HSTRING>, _ title : Optional<HSTRING>, _ mediaType : Optional<HSTRING>, _ length : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationLink>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationLinkFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationLinkEx(pThis, uri, relationship, title, mediaType, length, __presult))
        }
    }
    public func CreateSyndicationLinkEx(uri : Optional<Windows.Foundation.IUriRuntimeClass>, relationship : Optional<Swift.String>, title : Optional<Swift.String>, mediaType : Optional<Swift.String>, length : Swift.UInt32) throws -> Optional<Windows.Web.Syndication.ISyndicationLink> {
        let __hstr_relationship = try HString(relationship!);
        return try withExtendedLifetime(__hstr_relationship) {
        let __hstr_title = try HString(title!);
        return try withExtendedLifetime(__hstr_title) {
        let __hstr_mediaType = try HString(mediaType!);
        return try withExtendedLifetime(__hstr_mediaType) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationLink>> = nil;
        try self._n_CreateSyndicationLinkEx(RawPointer(uri), __hstr_relationship.Raw(), __hstr_title.Raw(), __hstr_mediaType.Raw(), length, &__result);
        return Windows.Web.Syndication.ISyndicationLink(consuming: __result);
        }
        }
        }
    }
} // ISyndicationLinkFactory


// type: Windows.Web.Syndication.ISyndicationNode
// interface type
open class ISyndicationNode
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x753cef78, Data2: 0x51f8, Data3 : 0x45c0, Data4 : (0xa9, 0xf5, 0xf1, 0x71, 0x9d, 0xec, 0x3f, 0xb2)) }
    // [IsSpecialName] System.String get_NodeName()
    private func _n_get_NodeName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeName(pThis, __presult))
        }
    }
    public func get_NodeName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NodeName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_NodeName(System.String)
    private func _n_put_NodeName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NodeName(pThis, value))
        }
    }
    public func put_NodeName(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_NodeName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_NodeNamespace()
    private func _n_get_NodeNamespace(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeNamespace(pThis, __presult))
        }
    }
    public func get_NodeNamespace() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NodeNamespace(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_NodeNamespace(System.String)
    private func _n_put_NodeNamespace(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NodeNamespace(pThis, value))
        }
    }
    public func put_NodeNamespace(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_NodeNamespace(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_NodeValue()
    private func _n_get_NodeValue(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NodeValue(pThis, __presult))
        }
    }
    public func get_NodeValue() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NodeValue(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_NodeValue(System.String)
    private func _n_put_NodeValue(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NodeValue(pThis, value))
        }
    }
    public func put_NodeValue(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_NodeValue(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Language()
    private func _n_get_Language(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, __presult))
        }
    }
    public func get_Language() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Language(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Language(System.String)
    private func _n_put_Language(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, value))
        }
    }
    public func put_Language(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Language(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Uri get_BaseUri()
    private func _n_get_BaseUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseUri(pThis, __presult))
        }
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_BaseUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_BaseUri(Windows.Foundation.Uri)
    private func _n_put_BaseUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BaseUri(pThis, value))
        }
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_BaseUri(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.SyndicationAttribute> get_AttributeExtensions()
    private func _n_get_AttributeExtensions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttributeExtensions(pThis, __presult))
        }
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute>> = nil;
        try self._n_get_AttributeExtensions(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Syndication.ISyndicationNode> get_ElementExtensions()
    private func _n_get_ElementExtensions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementExtensions(pThis, __presult))
        }
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode>> = nil;
        try self._n_get_ElementExtensions(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode(consuming: __result);
    }
    // Windows.Data.Xml.Dom.XmlDocument GetXmlDocument(Windows.Web.Syndication.SyndicationFormat)
    private func _n_GetXmlDocument(_ format : _q_CWindows_CWeb_CSyndication_CSyndicationFormat, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNode.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetXmlDocument(pThis, format, __presult))
        }
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_GetXmlDocument(format, &__result);
        return Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
            return try get_AttributeExtensions();
        }
    }
    public var BaseUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_BaseUri();
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
            return try get_ElementExtensions();
        }
    }
    public var Language : Swift.String {
        get throws {
            return try get_Language();
        }
    }
    public var NodeName : Swift.String {
        get throws {
            return try get_NodeName();
        }
    }
    public var NodeNamespace : Swift.String {
        get throws {
            return try get_NodeNamespace();
        }
    }
    public var NodeValue : Swift.String {
        get throws {
            return try get_NodeValue();
        }
    }
} // ISyndicationNode


// type: Windows.Web.Syndication.ISyndicationNodeFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationNodeFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x12902188, Data2: 0x4acb, Data3 : 0x49a8, Data4 : (0xb7, 0x77, 0xa5, 0xeb, 0x92, 0xe1, 0x8a, 0x79)) }
    // Windows.Web.Syndication.SyndicationNode CreateSyndicationNode(System.String, System.String, System.String)
    private func _n_CreateSyndicationNode(_ nodeName : Optional<HSTRING>, _ nodeNamespace : Optional<HSTRING>, _ nodeValue : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationNode>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationNodeFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationNode(pThis, nodeName, nodeNamespace, nodeValue, __presult))
        }
    }
    public func CreateSyndicationNode(nodeName : Optional<Swift.String>, nodeNamespace : Optional<Swift.String>, nodeValue : Optional<Swift.String>) throws -> Optional<Windows.Web.Syndication.ISyndicationNode> {
        let __hstr_nodeName = try HString(nodeName!);
        return try withExtendedLifetime(__hstr_nodeName) {
        let __hstr_nodeNamespace = try HString(nodeNamespace!);
        return try withExtendedLifetime(__hstr_nodeNamespace) {
        let __hstr_nodeValue = try HString(nodeValue!);
        return try withExtendedLifetime(__hstr_nodeValue) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationNode>> = nil;
        try self._n_CreateSyndicationNode(__hstr_nodeName.Raw(), __hstr_nodeNamespace.Raw(), __hstr_nodeValue.Raw(), &__result);
        return Windows.Web.Syndication.ISyndicationNode(consuming: __result);
        }
        }
        }
    }
} // ISyndicationNodeFactory


// type: Windows.Web.Syndication.ISyndicationPerson
// interface type
open class ISyndicationPerson
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfa1ee5da, Data2: 0xa7c6, Data3 : 0x4517, Data4 : (0xa0, 0x96, 0x01, 0x43, 0xfa, 0xf2, 0x93, 0x27)) }
    // [IsSpecialName] System.String get_Email()
    private func _n_get_Email(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPerson.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Email(pThis, __presult))
        }
    }
    public func get_Email() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Email(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Email(System.String)
    private func _n_put_Email(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPerson.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Email(pThis, value))
        }
    }
    public func put_Email(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Email(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPerson.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Name(System.String)
    private func _n_put_Name(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPerson.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Name(pThis, value))
        }
    }
    public func put_Name(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Name(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Uri get_Uri()
    private func _n_get_Uri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPerson.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, __presult))
        }
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_Uri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_Uri(Windows.Foundation.Uri)
    private func _n_put_Uri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPerson.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Uri(pThis, value))
        }
    }
    public func put_Uri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_Uri(RawPointer(value));
    }
    public var Email : Swift.String {
        get throws {
            return try get_Email();
        }
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var Uri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_Uri();
        }
    }
} // ISyndicationPerson


// type: Windows.Web.Syndication.ISyndicationPersonFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationPersonFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdcf4886d, Data2: 0x229d, Data3 : 0x4b58, Data4 : (0xa4, 0x9b, 0xf3, 0xd2, 0xf0, 0xf5, 0xc9, 0x9f)) }
    // Windows.Web.Syndication.SyndicationPerson CreateSyndicationPerson(System.String)
    private func _n_CreateSyndicationPerson(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationPerson>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPersonFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationPerson(pThis, name, __presult))
        }
    }
    public func CreateSyndicationPerson(name : Optional<Swift.String>) throws -> Optional<Windows.Web.Syndication.ISyndicationPerson> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationPerson>> = nil;
        try self._n_CreateSyndicationPerson(__hstr_name.Raw(), &__result);
        return Windows.Web.Syndication.ISyndicationPerson(consuming: __result);
        }
    }
    // Windows.Web.Syndication.SyndicationPerson CreateSyndicationPersonEx(System.String, System.String, Windows.Foundation.Uri)
    private func _n_CreateSyndicationPersonEx(_ name : Optional<HSTRING>, _ email : Optional<HSTRING>, _ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationPerson>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationPersonFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationPersonEx(pThis, name, email, uri, __presult))
        }
    }
    public func CreateSyndicationPersonEx(name : Optional<Swift.String>, email : Optional<Swift.String>, uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Windows.Web.Syndication.ISyndicationPerson> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_email = try HString(email!);
        return try withExtendedLifetime(__hstr_email) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationPerson>> = nil;
        try self._n_CreateSyndicationPersonEx(__hstr_name.Raw(), __hstr_email.Raw(), RawPointer(uri), &__result);
        return Windows.Web.Syndication.ISyndicationPerson(consuming: __result);
        }
        }
    }
} // ISyndicationPersonFactory


// type: Windows.Web.Syndication.ISyndicationText
// interface type
open class ISyndicationText
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb9cc5e80, Data2: 0x313a, Data3 : 0x4091, Data4 : (0xa2, 0xa6, 0x24, 0x3e, 0x0e, 0xe9, 0x23, 0xf9)) }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Text(System.String)
    private func _n_put_Text(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, value))
        }
    }
    public func put_Text(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Text(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Type(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Type(System.String)
    private func _n_put_Type(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Type(pThis, value))
        }
    }
    public func put_Type(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Type(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlDocument get_Xml()
    private func _n_get_Xml(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Xml(pThis, __presult))
        }
    }
    public func get_Xml() throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_get_Xml(&__result);
        return Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
    // [IsSpecialName] void put_Xml(Windows.Data.Xml.Dom.XmlDocument)
    private func _n_put_Xml(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationText.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Xml(pThis, value))
        }
    }
    public func put_Xml(value : Optional<Windows.Data.Xml.Dom.IXmlDocument>) throws -> Void {
        try self._n_put_Xml(RawPointer(value));
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
    public var Type_ : Swift.String {
        get throws {
            return try get_Type();
        }
    }
    public var Xml : Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        get throws {
            return try get_Xml();
        }
    }
} // ISyndicationText


// type: Windows.Web.Syndication.ISyndicationTextFactory
// interface type
// ACTIVATION INTERFACE
open class ISyndicationTextFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xee7342f7, Data2: 0x11c6, Data3 : 0x4b25, Data4 : (0xab, 0x62, 0xe5, 0x96, 0xbd, 0x16, 0x29, 0x46)) }
    // Windows.Web.Syndication.SyndicationText CreateSyndicationText(System.String)
    private func _n_CreateSyndicationText(_ text : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationTextFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationText(pThis, text, __presult))
        }
    }
    public func CreateSyndicationText(text : Optional<Swift.String>) throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let __hstr_text = try HString(text!);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_CreateSyndicationText(__hstr_text.Raw(), &__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
        }
    }
    // Windows.Web.Syndication.SyndicationText CreateSyndicationTextEx(System.String, Windows.Web.Syndication.SyndicationTextType)
    private func _n_CreateSyndicationTextEx(_ text : Optional<HSTRING>, _ type : _q_CWindows_CWeb_CSyndication_CSyndicationTextType, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CSyndication_CISyndicationTextFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSyndicationTextEx(pThis, text, type, __presult))
        }
    }
    public func CreateSyndicationTextEx(text : Optional<Swift.String>, type : Windows.Web.Syndication.SyndicationTextType) throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let __hstr_text = try HString(text!);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_CreateSyndicationTextEx(__hstr_text.Raw(), type, &__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
        }
    }
} // ISyndicationTextFactory


// type: Windows.Web.Syndication.RetrievalProgress
// struct type
public typealias RetrievalProgress = _q_CWindows_CWeb_CSyndication_CRetrievalProgress;

// type: Windows.Web.Syndication.SyndicationAttribute
// runtime class
public class SyndicationAttribute
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationAttribute;
    public init(plok: Windows.Web.Syndication.ISyndicationAttribute?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationAttribute { return _self; }
    public init(attributeName : Swift.String, attributeNamespace : Swift.String, attributeValue : Swift.String) throws {
        let _af : ISyndicationAttributeFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationAttribute");
        _self = try _af.CreateSyndicationAttribute(attributeName: attributeName, attributeNamespace: attributeNamespace, attributeValue: attributeValue)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationAttribute")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Name
    // method not needed: put_Name
    // method not needed: get_Namespace
    // method not needed: put_Namespace
    // method not needed: get_Value
    // method not needed: put_Value
}

// type: Windows.Web.Syndication.SyndicationCategory
// runtime class
public class SyndicationCategory
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationCategory;
    public init(plok: Windows.Web.Syndication.ISyndicationCategory?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationCategory { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationCategory")
        try super.init(plok: _self.QueryInterface())
    }
    public init(term : Swift.String) throws {
        let _af : ISyndicationCategoryFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationCategory");
        _self = try _af.CreateSyndicationCategory(term: term)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(term : Swift.String, scheme : Swift.String, label : Swift.String) throws {
        let _af : ISyndicationCategoryFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationCategory");
        _self = try _af.CreateSyndicationCategoryEx(term: term, scheme: scheme, label: label)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Label() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.get_Label();
    }
    public func put_Label(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.put_Label(value: value);
    }
    public func get_Scheme() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.get_Scheme();
    }
    public func put_Scheme(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.put_Scheme(value: value);
    }
    public func get_Term() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.get_Term();
    }
    public func put_Term(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.put_Term(value: value);
    }
    public var Label : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.Label;
        }
    }
    public var Scheme : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.Scheme;
        }
    }
    public var Term : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationCategory = try _self.QueryInterface();
        return try _ifc.Term;
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationClient
// runtime class
public class SyndicationClient
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationClient;
    public init(plok: Windows.Web.Syndication.ISyndicationClient?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationClient { return _self; }
    public init(serverCredential : Optional<Windows.Security.Credentials.PasswordCredential>) throws {
        let _af : ISyndicationClientFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationClient");
        _self = try _af.CreateSyndicationClient(serverCredential: serverCredential!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationClient")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ServerCredential());
    }
    public func put_ServerCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_ServerCredential(value: value!.Interface());
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ProxyCredential());
    }
    public func put_ProxyCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_ProxyCredential(value: value!.Interface());
    }
    public func get_MaxResponseBufferSize() throws -> Swift.UInt32 {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.get_MaxResponseBufferSize();
    }
    public func put_MaxResponseBufferSize(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_MaxResponseBufferSize(value: value);
    }
    public func get_Timeout() throws -> Swift.UInt32 {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.get_Timeout();
    }
    public func put_Timeout(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_Timeout(value: value);
    }
    public func get_BypassCacheOnRetrieve() throws -> boolean {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.get_BypassCacheOnRetrieve();
    }
    public func put_BypassCacheOnRetrieve(value : boolean) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_BypassCacheOnRetrieve(value: value);
    }
    public func SetRequestHeader(name : Swift.String, value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(name: name, value: value);
    }
    public func RetrieveFeedAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationFeed__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.RetrieveFeedAsync(uri: uri!.Interface());
    }
    public func RetrieveFeed(uri : Optional<Windows.Foundation.Uri>) async throws -> Optional<Windows.Web.Syndication.SyndicationFeed> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Web.Syndication.SyndicationFeed(plok: self.RetrieveFeedAsync(uri: uri)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var BypassCacheOnRetrieve : boolean {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.BypassCacheOnRetrieve;
        }
    }
    public var MaxResponseBufferSize : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.MaxResponseBufferSize;
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ProxyCredential);
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ServerCredential);
        }
    }
    public var Timeout : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.Timeout;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationContent
// runtime class
public class SyndicationContent
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationContent;
    public init(plok: Windows.Web.Syndication.ISyndicationContent?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationContent { return _self; }
    public init(text : Swift.String, type : Windows.Web.Syndication.SyndicationTextType) throws {
        let _af : ISyndicationContentFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationContent");
        _self = try _af.CreateSyndicationContent(text: text, type: type)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(sourceUri : Optional<Windows.Foundation.Uri>) throws {
        let _af : ISyndicationContentFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationContent");
        _self = try _af.CreateSyndicationContentWithSourceUri(sourceUri: sourceUri!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationContent")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.put_Text(value: value);
    }
    public func get_Type() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public func put_Type(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.put_Type(value: value);
    }
    public func get_Xml() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_Xml());
    }
    public func put_Xml(value : Optional<Windows.Data.Xml.Dom.XmlDocument>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.put_Xml(value: value!.Interface());
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public var Type_ : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
    public var Xml : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.Xml);
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
    public func get_SourceUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationContent = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_SourceUri());
    }
    public func put_SourceUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationContent = try _self.QueryInterface();
        return try _ifc.put_SourceUri(value: value!.Interface());
    }
    public var SourceUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationContent = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.SourceUri);
        }
    }
}

// type: Windows.Web.Syndication.SyndicationError
// static class
public class SyndicationError
{
    private struct _ISyndicationErrorStatics {
        static var x : ISyndicationErrorStatics =
            try! RoGetActivationFactory("Windows.Web.Syndication.SyndicationError")
    }
    public static var SyndicationErrorStatics : ISyndicationErrorStatics {
        _ISyndicationErrorStatics.x
    }
    public static func GetStatus(hresult : Swift.Int32) throws -> Windows.Web.Syndication.SyndicationErrorStatus {
        return try SyndicationErrorStatics.GetStatus(hresult: hresult);
    }
}

// type: Windows.Web.Syndication.SyndicationErrorStatus
// enum type
public typealias SyndicationErrorStatus = _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus;

// type: Windows.Web.Syndication.SyndicationFeed
// runtime class
public class SyndicationFeed
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationFeed;
    public init(plok: Windows.Web.Syndication.ISyndicationFeed?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationFeed { return _self; }
    public init(title : Swift.String, subtitle : Swift.String, uri : Optional<Windows.Foundation.Uri>) throws {
        let _af : ISyndicationFeedFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationFeed");
        _self = try _af.CreateSyndicationFeed(title: title, subtitle: subtitle, uri: uri!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationFeed")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Authors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Authors();
    }
    public func get_Categories() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Categories();
    }
    public func get_Contributors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Contributors();
    }
    public func get_Generator() throws -> Optional<Windows.Web.Syndication.SyndicationGenerator> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Web.Syndication.SyndicationGenerator(plok: _ifc.get_Generator());
    }
    public func put_Generator(value : Optional<Windows.Web.Syndication.SyndicationGenerator>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_Generator(value: value!.Interface());
    }
    public func get_IconUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_IconUri());
    }
    public func put_IconUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_IconUri(value: value!.Interface());
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func put_Id(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_Id(value: value);
    }
    public func get_Items() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationItem> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Items();
    }
    public func get_LastUpdatedTime() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_LastUpdatedTime();
    }
    public func put_LastUpdatedTime(value : Windows.Foundation.DateTime) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_LastUpdatedTime(value: value);
    }
    public func get_Links() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Links();
    }
    public func get_ImageUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_ImageUri());
    }
    public func put_ImageUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_ImageUri(value: value!.Interface());
    }
    public func get_Rights() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Rights();
    }
    public func put_Rights(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_Rights(value: value);
    }
    public func get_Subtitle() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Subtitle();
    }
    public func put_Subtitle(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_Subtitle(value: value);
    }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func get_FirstUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_FirstUri());
    }
    public func get_LastUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_LastUri());
    }
    public func get_NextUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_NextUri());
    }
    public func get_PreviousUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_PreviousUri());
    }
    public func get_SourceFormat() throws -> Windows.Web.Syndication.SyndicationFormat {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.get_SourceFormat();
    }
    public func Load(feed : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Load(feed: feed);
    }
    public func LoadFromXml(feedDocument : Optional<Windows.Data.Xml.Dom.XmlDocument>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.LoadFromXml(feedDocument: feedDocument!.Interface());
    }
    public var Authors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Authors;
        }
    }
    public var Categories : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Categories;
        }
    }
    public var Contributors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Contributors;
        }
    }
    public var FirstUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.FirstUri);
        }
    }
    public var Generator : Optional<Windows.Web.Syndication.SyndicationGenerator> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Web.Syndication.SyndicationGenerator(plok: _ifc.Generator);
        }
    }
    public var IconUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.IconUri);
        }
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var ImageUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.ImageUri);
        }
    }
    public var Items : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationItem> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Items;
        }
    }
    public var LastUpdatedTime : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.LastUpdatedTime;
        }
    }
    public var LastUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.LastUri);
        }
    }
    public var Links : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Links;
        }
    }
    public var NextUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.NextUri);
        }
    }
    public var PreviousUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.PreviousUri);
        }
    }
    public var Rights : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Rights;
        }
    }
    public var SourceFormat : Windows.Web.Syndication.SyndicationFormat {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.SourceFormat;
        }
    }
    public var Subtitle : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Subtitle;
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationFeed = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationFormat
// enum type
public typealias SyndicationFormat = _q_CWindows_CWeb_CSyndication_CSyndicationFormat;

// type: Windows.Web.Syndication.SyndicationGenerator
// runtime class
public class SyndicationGenerator
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationGenerator;
    public init(plok: Windows.Web.Syndication.ISyndicationGenerator?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationGenerator { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationGenerator")
        try super.init(plok: _self.QueryInterface())
    }
    public init(text : Swift.String) throws {
        let _af : ISyndicationGeneratorFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationGenerator");
        _self = try _af.CreateSyndicationGenerator(text: text)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try _ifc.put_Text(value: value);
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_Uri());
    }
    public func put_Uri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try _ifc.put_Uri(value: value!.Interface());
    }
    public func get_Version() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try _ifc.get_Version();
    }
    public func put_Version(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try _ifc.put_Version(value: value);
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public var Uri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.Uri);
        }
    }
    public var Version : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationGenerator = try _self.QueryInterface();
        return try _ifc.Version;
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationItem
// runtime class
public class SyndicationItem
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationItem;
    public init(plok: Windows.Web.Syndication.ISyndicationItem?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationItem { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationItem")
        try super.init(plok: _self.QueryInterface())
    }
    public init(title : Swift.String, content : Optional<Windows.Web.Syndication.SyndicationContent>, uri : Optional<Windows.Foundation.Uri>) throws {
        let _af : ISyndicationItemFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationItem");
        _self = try _af.CreateSyndicationItem(title: title, content: content!.Interface(), uri: uri!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Authors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Authors();
    }
    public func get_Categories() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Categories();
    }
    public func get_Contributors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Contributors();
    }
    public func get_Content() throws -> Optional<Windows.Web.Syndication.SyndicationContent> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Web.Syndication.SyndicationContent(plok: _ifc.get_Content());
    }
    public func put_Content(value : Optional<Windows.Web.Syndication.SyndicationContent>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_Content(value: value!.Interface());
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func put_Id(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_Id(value: value);
    }
    public func get_LastUpdatedTime() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_LastUpdatedTime();
    }
    public func put_LastUpdatedTime(value : Windows.Foundation.DateTime) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_LastUpdatedTime(value: value);
    }
    public func get_Links() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Links();
    }
    public func get_PublishedDate() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_PublishedDate();
    }
    public func put_PublishedDate(value : Windows.Foundation.DateTime) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_PublishedDate(value: value);
    }
    public func get_Rights() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Rights();
    }
    public func put_Rights(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_Rights(value: value);
    }
    public func get_Source() throws -> Optional<Windows.Web.Syndication.SyndicationFeed> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Web.Syndication.SyndicationFeed(plok: _ifc.get_Source());
    }
    public func put_Source(value : Optional<Windows.Web.Syndication.SyndicationFeed>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_Source(value: value!.Interface());
    }
    public func get_Summary() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Summary();
    }
    public func put_Summary(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_Summary(value: value);
    }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Optional<Windows.Web.Syndication.ISyndicationText>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func get_CommentsUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_CommentsUri());
    }
    public func put_CommentsUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.put_CommentsUri(value: value!.Interface());
    }
    public func get_EditUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_EditUri());
    }
    public func get_EditMediaUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_EditMediaUri());
    }
    public func get_ETag() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.get_ETag();
    }
    public func get_ItemUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_ItemUri());
    }
    public func Load(item : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Load(item: item);
    }
    public func LoadFromXml(itemDocument : Optional<Windows.Data.Xml.Dom.XmlDocument>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.LoadFromXml(itemDocument: itemDocument!.Interface());
    }
    public var Authors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Authors;
        }
    }
    public var Categories : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Categories;
        }
    }
    public var CommentsUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.CommentsUri);
        }
    }
    public var Content : Optional<Windows.Web.Syndication.SyndicationContent> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Web.Syndication.SyndicationContent(plok: _ifc.Content);
        }
    }
    public var Contributors : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationPerson> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Contributors;
        }
    }
    public var ETag : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.ETag;
        }
    }
    public var EditMediaUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.EditMediaUri);
        }
    }
    public var EditUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.EditUri);
        }
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var ItemUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.ItemUri);
        }
    }
    public var LastUpdatedTime : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.LastUpdatedTime;
        }
    }
    public var Links : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationLink> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Links;
        }
    }
    public var PublishedDate : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.PublishedDate;
        }
    }
    public var Rights : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Rights;
        }
    }
    public var Source : Optional<Windows.Web.Syndication.SyndicationFeed> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try Windows.Web.Syndication.SyndicationFeed(plok: _ifc.Source);
        }
    }
    public var Summary : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Summary;
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationItem = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationLink
// runtime class
public class SyndicationLink
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationLink;
    public init(plok: Windows.Web.Syndication.ISyndicationLink?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationLink { return _self; }
    public init(uri : Optional<Windows.Foundation.Uri>) throws {
        let _af : ISyndicationLinkFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationLink");
        _self = try _af.CreateSyndicationLink(uri: uri!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(uri : Optional<Windows.Foundation.Uri>, relationship : Swift.String, title : Swift.String, mediaType : Swift.String, length : Swift.UInt32) throws {
        let _af : ISyndicationLinkFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationLink");
        _self = try _af.CreateSyndicationLinkEx(uri: uri!.Interface(), relationship: relationship, title: title, mediaType: mediaType, length: length)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationLink")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Length() throws -> Swift.UInt32 {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.get_Length();
    }
    public func put_Length(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.put_Length(value: value);
    }
    public func get_MediaType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.get_MediaType();
    }
    public func put_MediaType(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.put_MediaType(value: value);
    }
    public func get_Relationship() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.get_Relationship();
    }
    public func put_Relationship(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.put_Relationship(value: value);
    }
    public func get_Title() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_Uri());
    }
    public func put_Uri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.put_Uri(value: value!.Interface());
    }
    public func get_ResourceLanguage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.get_ResourceLanguage();
    }
    public func put_ResourceLanguage(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.put_ResourceLanguage(value: value);
    }
    public var Length : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.Length;
        }
    }
    public var MediaType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.MediaType;
        }
    }
    public var Relationship : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.Relationship;
        }
    }
    public var ResourceLanguage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.ResourceLanguage;
        }
    }
    public var Title : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
    public var Uri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationLink = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.Uri);
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationNode
// runtime class
public class SyndicationNode
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationNode;
    public init(plok: Windows.Web.Syndication.ISyndicationNode?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationNode { return _self; }
    public init(nodeName : Swift.String, nodeNamespace : Swift.String, nodeValue : Swift.String) throws {
        let _af : ISyndicationNodeFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationNode");
        _self = try _af.CreateSyndicationNode(nodeName: nodeName, nodeNamespace: nodeNamespace, nodeValue: nodeValue)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationNode")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationPerson
// runtime class
public class SyndicationPerson
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationPerson;
    public init(plok: Windows.Web.Syndication.ISyndicationPerson?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationPerson { return _self; }
    public init(name : Swift.String) throws {
        let _af : ISyndicationPersonFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationPerson");
        _self = try _af.CreateSyndicationPerson(name: name)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(name : Swift.String, email : Swift.String, uri : Optional<Windows.Foundation.Uri>) throws {
        let _af : ISyndicationPersonFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationPerson");
        _self = try _af.CreateSyndicationPersonEx(name: name, email: email, uri: uri!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationPerson")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Email() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try _ifc.get_Email();
    }
    public func put_Email(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try _ifc.put_Email(value: value);
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try _ifc.put_Name(value: value);
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_Uri());
    }
    public func put_Uri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try _ifc.put_Uri(value: value!.Interface());
    }
    public var Email : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try _ifc.Email;
        }
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Uri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationPerson = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.Uri);
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationText
// runtime class
public class SyndicationText
    :
    WinRT.Object
{
    private var _self : Windows.Web.Syndication.ISyndicationText;
    public init(plok: Windows.Web.Syndication.ISyndicationText?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Syndication.ISyndicationText { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Syndication.SyndicationText")
        try super.init(plok: _self.QueryInterface())
    }
    public init(text : Swift.String) throws {
        let _af : ISyndicationTextFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationText");
        _self = try _af.CreateSyndicationText(text: text)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(text : Swift.String, type : Windows.Web.Syndication.SyndicationTextType) throws {
        let _af : ISyndicationTextFactory = try RoGetActivationFactory("Windows.Web.Syndication.SyndicationText");
        _self = try _af.CreateSyndicationTextEx(text: text, type: type)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.put_Text(value: value);
    }
    public func get_Type() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public func put_Type(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.put_Type(value: value);
    }
    public func get_Xml() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_Xml());
    }
    public func put_Xml(value : Optional<Windows.Data.Xml.Dom.XmlDocument>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.put_Xml(value: value!.Interface());
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public var Type_ : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
    public var Xml : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationText = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.Xml);
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.Syndication.SyndicationTextType
// enum type
public typealias SyndicationTextType = _q_CWindows_CWeb_CSyndication_CSyndicationTextType;

// type: Windows.Web.Syndication.TransferProgress
// struct type
public typealias TransferProgress = _q_CWindows_CWeb_CSyndication_CTransferProgress;

}
extension Windows.Web.Syndication.SyndicationErrorStatus {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus_Unknown;
        }
    }
    public static var MissingRequiredElement : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus_MissingRequiredElement;
        }
    }
    public static var MissingRequiredAttribute : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus_MissingRequiredAttribute;
        }
    }
    public static var InvalidXml : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus_InvalidXml;
        }
    }
    public static var UnexpectedContent : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus_UnexpectedContent;
        }
    }
    public static var UnsupportedFormat : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationErrorStatus_UnsupportedFormat;
        }
    }
}
extension Windows.Web.Syndication.SyndicationFormat {
    public static var Atom10 : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationFormat_Atom10;
        }
    }
    public static var Rss20 : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationFormat_Rss20;
        }
    }
    public static var Rss10 : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationFormat_Rss10;
        }
    }
    public static var Rss092 : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationFormat_Rss092;
        }
    }
    public static var Rss091 : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationFormat_Rss091;
        }
    }
    public static var Atom03 : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationFormat_Atom03;
        }
    }
}
extension Windows.Web.Syndication.SyndicationTextType {
    public static var Text : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationTextType_Text;
        }
    }
    public static var Html : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationTextType_Html;
        }
    }
    public static var Xhtml : Self {
        get {
            return _q_CWindows_CWeb_CSyndication_CSyndicationTextType_Xhtml;
        }
    }
}
