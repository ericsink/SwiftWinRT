// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Data.Xml.Xsl {
// type: Windows.Data.Xml.Xsl.IXsltProcessor
// interface type
open class IXsltProcessor
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7b64703f, Data2: 0x550c, Data3 : 0x48c6, Data4 : (0xa9, 0x0f, 0x93, 0xa5, 0xb9, 0x64, 0x51, 0x8f)) }
    // System.String TransformToString(Windows.Data.Xml.Dom.IXmlNode)
    private func _n_TransformToString(_ inputNode : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CXsl_CIXsltProcessor.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransformToString(pThis, inputNode, __presult))
        }
    }
    public func TransformToString(inputNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_TransformToString(RawPointer(inputNode), &__result);
        return Swift.String(from: __result);
    }
} // IXsltProcessor


// type: Windows.Data.Xml.Xsl.IXsltProcessor2
// interface type
open class IXsltProcessor2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8da45c56, Data2: 0x97a5, Data3 : 0x44cb, Data4 : (0xa8, 0xbe, 0x27, 0xd8, 0x62, 0x80, 0xc7, 0x0a)) }
    // Windows.Data.Xml.Dom.XmlDocument TransformToDocument(Windows.Data.Xml.Dom.IXmlNode)
    private func _n_TransformToDocument(_ inputNode : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlNode>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CXsl_CIXsltProcessor2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransformToDocument(pThis, inputNode, __presult))
        }
    }
    public func TransformToDocument(inputNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_TransformToDocument(RawPointer(inputNode), &__result);
        return Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
} // IXsltProcessor2


// type: Windows.Data.Xml.Xsl.IXsltProcessorFactory
// interface type
// ACTIVATION INTERFACE
open class IXsltProcessorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x274146c0, Data2: 0x9a51, Data3 : 0x4663, Data4 : (0xbf, 0x30, 0x0e, 0xf7, 0x42, 0x14, 0x6f, 0x20)) }
    // Windows.Data.Xml.Xsl.XsltProcessor CreateInstance(Windows.Data.Xml.Dom.XmlDocument)
    private func _n_CreateInstance(_ document : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CXsl_CIXsltProcessor>>>?) throws {
        return try perform(as: _q_CWindows_CData_CXml_CXsl_CIXsltProcessorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, document, __presult))
        }
    }
    public func CreateInstance(document : Optional<Windows.Data.Xml.Dom.IXmlDocument>) throws -> Optional<Windows.Data.Xml.Xsl.IXsltProcessor> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CXsl_CIXsltProcessor>> = nil;
        try self._n_CreateInstance(RawPointer(document), &__result);
        return Windows.Data.Xml.Xsl.IXsltProcessor(consuming: __result);
    }
} // IXsltProcessorFactory


// type: Windows.Data.Xml.Xsl.XsltProcessor
// runtime class
public class XsltProcessor
    :
    WinRT.Object
{
    private var _self : Windows.Data.Xml.Xsl.IXsltProcessor;
    public init(plok: Windows.Data.Xml.Xsl.IXsltProcessor?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Xml.Xsl.IXsltProcessor { return _self; }
    public init(document : Optional<Windows.Data.Xml.Dom.XmlDocument>) throws {
        let _af : IXsltProcessorFactory = try RoGetActivationFactory("Windows.Data.Xml.Xsl.XsltProcessor");
        _self = try _af.CreateInstance(document: document!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func TransformToString(inputNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Xml.Xsl.IXsltProcessor = try _self.QueryInterface();
        return try _ifc.TransformToString(inputNode: inputNode);
    }
    public func TransformToDocument(inputNode : Optional<Windows.Data.Xml.Dom.IXmlNode>) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Data.Xml.Xsl.IXsltProcessor2 = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.TransformToDocument(inputNode: inputNode));
    }
}

}
