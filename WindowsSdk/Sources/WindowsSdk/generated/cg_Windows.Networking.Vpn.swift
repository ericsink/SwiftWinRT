// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x39907949, Data2: 0xa8cc, Data3 : 0x5ce5, Data4 : (0x9e, 0x0a, 0x06, 0xe3, 0xb2, 0xd3, 0x15, 0x70)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Vpn.VpnChannel, Windows.Networking.Vpn.VpnChannelActivityEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannel>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Vpn.IVpnChannel>, args : Optional<Windows.Networking.Vpn.IVpnChannelActivityEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannel>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannelActivityEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Vpn.VpnChannel(plok: Windows.Networking.Vpn.IVpnChannel(sender)), args: Windows.Networking.Vpn.VpnChannelActivityEventArgs(plok: Windows.Networking.Vpn.IVpnChannelActivityEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Vpn.VpnChannel>, Optional<Windows.Networking.Vpn.VpnChannelActivityEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Vpn.VpnChannel>, Optional<Windows.Networking.Vpn.VpnChannelActivityEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Vpn.VpnChannel>, args : Optional<Windows.Networking.Vpn.VpnChannelActivityEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Vpn.VpnChannel>, args : Optional<Windows.Networking.Vpn.VpnChannelActivityEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityEventArgs {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x804449c2, Data2: 0x3bc1, Data3 : 0x5cfe, Data4 : (0x84, 0x68, 0x3b, 0xbe, 0xce, 0x4a, 0x5c, 0xd7)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPrompt
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2cfcf1ba, Data2: 0xbffc, Data3 : 0x5746, Data4 : (0xb8, 0x68, 0x2e, 0x45, 0xa4, 0x6d, 0x29, 0x58)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Vpn.VpnChannel, Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannel>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Vpn.IVpnChannel>, args : Optional<Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannel>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnChannelActivityStateChangedArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Vpn.VpnChannel(plok: Windows.Networking.Vpn.IVpnChannel(sender)), args: Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs(plok: Windows.Networking.Vpn.IVpnChannelActivityStateChangedArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Vpn.VpnChannel>, Optional<Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Vpn.VpnChannel>, Optional<Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Vpn.VpnChannel>, args : Optional<Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Vpn.VpnChannel>, args : Optional<Windows.Networking.Vpn.VpnChannelActivityStateChangedArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CVpn_CVpnChannel__q_CWindows_CNetworking_CVpn_CVpnChannelActivityStateChangedArgs {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x25eaf5eb, Data2: 0x2f39, Data3 : 0x5b4d, Data4 : (0xbb, 0x6e, 0xe6, 0x52, 0xc7, 0xd0, 0x0f, 0x6a)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnCustomPromptElement
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x216a6f97, Data2: 0xdba1, Data3 : 0x5f71, Data4 : (0xa1, 0x4b, 0x28, 0x18, 0xad, 0x3c, 0x4c, 0x69)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.Vpn.VpnCredential>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.Vpn.VpnCredential> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential(consuming: __result);
    }
    // Windows.Networking.Vpn.VpnCredential GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnCredential>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.Vpn.IVpnCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnCredential>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.Vpn.IVpnCredential(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1c9c4504, Data2: 0x4b75, Data3 : 0x57ea, Data4 : (0x83, 0x7d, 0x53, 0x38, 0x35, 0x8b, 0xb7, 0x62)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnCredential>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential
// impl delegate type
open class AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredentialVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential.from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential {
        return _self
    }
}
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8179b6f2, Data2: 0x7273, Data3 : 0x5ca3, Data4 : (0xa8, 0x1b, 0x53, 0xe9, 0x02, 0xca, 0x20, 0x9b)) }
    // Windows.Networking.Vpn.VpnDomainNameInfo GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Networking.Vpn.IVpnDomainNameInfo> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Networking.Vpn.IVpnDomainNameInfo(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.VpnDomainNameInfo> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.Vpn.VpnDomainNameInfo, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Networking.Vpn.IVpnDomainNameInfo>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.Vpn.VpnDomainNameInfo)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnDomainNameInfo>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Networking.Vpn.VpnDomainNameInfo)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnDomainNameInfo>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.Vpn.VpnDomainNameInfo)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Networking.Vpn.IVpnDomainNameInfo>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.Vpn.VpnDomainNameInfo[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.Vpn.VpnDomainNameInfo[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnDomainNameInfo>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd4772f57, Data2: 0x2328, Data3 : 0x5c25, Data4 : (0x9a, 0x11, 0x24, 0x6d, 0xa1, 0x7e, 0x39, 0xd5)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnDomainNameInfo
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe99b86dc, Data2: 0x6b65, Data3 : 0x5f23, Data4 : (0x94, 0x19, 0x90, 0xb5, 0x58, 0x52, 0xf2, 0x83)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.Vpn.VpnManagementErrorStatus>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.Vpn.VpnManagementErrorStatus> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(consuming: __result);
    }
    // Windows.Networking.Vpn.VpnManagementErrorStatus GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
        var __result : _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus = _q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus_Ok;
        try self._n_GetResults(&__result);
        return __result;
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x31229f8c, Data2: 0x709d, Data3 : 0x5017, Data4 : (0x86, 0x29, 0x57, 0xef, 0x12, 0x89, 0xe6, 0x16)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.Vpn.VpnManagementErrorStatus>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
// impl delegate type
open class AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatusVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus {
        return _self
    }
}
// closed interface type
public class IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x69d957be, Data2: 0x045e, Data3 : 0x538f, Data4 : (0x98, 0xf6, 0x1a, 0xa6, 0x5c, 0xee, 0x24, 0x4a)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.IVpnProfile>>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.IVpnProfile>> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.IVpnProfile> GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>> = nil;
        try self._n_GetResults(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdac6dd72, Data2: 0xa5d1, Data3 : 0x56d4, Data4 : (0xaf, 0xc4, 0x98, 0x9f, 0x84, 0xdc, 0xb2, 0xb3)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.IVpnProfile>>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
// impl delegate type
open class AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfileVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.from_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf1dc8f7d, Data2: 0xca33, Data3 : 0x53fd, Data4 : (0x9d, 0x4c, 0x40, 0xc5, 0x1b, 0x58, 0x73, 0xec)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x056bddf2, Data2: 0x135d, Data3 : 0x542e, Data4 : (0xa3, 0x22, 0x36, 0xaa, 0x4c, 0xa0, 0xe6, 0x0d)) }
    // Windows.Networking.Vpn.VpnNamespaceInfo GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Networking.Vpn.IVpnNamespaceInfo> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Networking.Vpn.IVpnNamespaceInfo(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.VpnNamespaceInfo> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.Vpn.VpnNamespaceInfo, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Networking.Vpn.IVpnNamespaceInfo>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.Vpn.VpnNamespaceInfo)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnNamespaceInfo>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Networking.Vpn.VpnNamespaceInfo)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnNamespaceInfo>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.Vpn.VpnNamespaceInfo)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Networking.Vpn.IVpnNamespaceInfo>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.Vpn.VpnNamespaceInfo[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.Vpn.VpnNamespaceInfo[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnNamespaceInfo>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc6ed05a9, Data2: 0x4dc7, Data3 : 0x507d, Data4 : (0x9c, 0x92, 0x7c, 0x78, 0xc2, 0xef, 0x47, 0x86)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnNamespaceInfo
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x89097d58, Data2: 0xedb8, Data3 : 0x5ad4, Data4 : (0xab, 0xc5, 0x60, 0x3f, 0x21, 0xdd, 0x4b, 0x15)) }
    // Windows.Networking.Vpn.VpnAppId GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Networking.Vpn.IVpnAppId> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Networking.Vpn.IVpnAppId(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.VpnAppId> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnAppId>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnAppId> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnAppId>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnAppId(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.Vpn.VpnAppId, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Networking.Vpn.IVpnAppId>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.Vpn.VpnAppId)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnAppId>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Networking.Vpn.VpnAppId)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnAppId>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.Vpn.VpnAppId)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Networking.Vpn.IVpnAppId>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.Vpn.VpnAppId[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.Vpn.VpnAppId[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnAppId>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CVpn_CVpnAppId
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnAppId
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfaecbc50, Data2: 0xda9a, Data3 : 0x5102, Data4 : (0x82, 0x29, 0x1d, 0xd2, 0x4e, 0x87, 0x3d, 0x1f)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnAppId
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5b026bd8, Data2: 0x2cc5, Data3 : 0x5570, Data4 : (0xbd, 0xe5, 0x0d, 0xb7, 0xc4, 0x33, 0x12, 0x79)) }
    // Windows.Networking.Vpn.VpnRoute GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Networking.Vpn.IVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Networking.Vpn.IVpnRoute(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.VpnRoute> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnRoute>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnRoute> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnRoute>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnRoute(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.Vpn.VpnRoute, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Networking.Vpn.IVpnRoute>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.Vpn.VpnRoute)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnRoute>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Networking.Vpn.VpnRoute)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnRoute>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.Vpn.VpnRoute)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Networking.Vpn.IVpnRoute>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.Vpn.VpnRoute[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.Vpn.VpnRoute[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnRoute>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CVpn_CVpnRoute
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnRoute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43701a74, Data2: 0xe497, Data3 : 0x5559, Data4 : (0xa7, 0x1b, 0x11, 0xd0, 0x15, 0x6f, 0xa8, 0x39)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnRoute
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2a5b9ad8, Data2: 0xf005, Data3 : 0x5f69, Data4 : (0xad, 0x81, 0x30, 0x06, 0x42, 0xe7, 0xc6, 0x67)) }
    // Windows.Networking.Vpn.VpnTrafficFilter GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Networking.Vpn.IVpnTrafficFilter> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Networking.Vpn.IVpnTrafficFilter(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.Vpn.VpnTrafficFilter> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.Vpn.VpnTrafficFilter, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Networking.Vpn.IVpnTrafficFilter>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.Vpn.VpnTrafficFilter)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnTrafficFilter>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Networking.Vpn.VpnTrafficFilter)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Networking.Vpn.IVpnTrafficFilter>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.Vpn.VpnTrafficFilter)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Networking.Vpn.IVpnTrafficFilter>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.Vpn.VpnTrafficFilter[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.Vpn.VpnTrafficFilter[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CVpn_CIVpnTrafficFilter>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x75de1766, Data2: 0xee22, Data3 : 0x56e9, Data4 : (0xbe, 0x99, 0x27, 0x14, 0x06, 0x53, 0x49, 0xe5)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CVpn_CVpnTrafficFilter
// closed interface type
public class IIterable_1__q_CWindows_CNetworking_CVpn_CVpnPacketBuffer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfa954f6e, Data2: 0x30d7, Data3 : 0x50e0, Data4 : (0x9d, 0x43, 0xda, 0xdb, 0x6c, 0x53, 0xe1, 0x96)) }
// method not needed: First
} // IIterable_1__q_CWindows_CNetworking_CVpn_CVpnPacketBuffer
// closed interface type
public class IIterator_1__q_CWindows_CNetworking_CVpn_CVpnPacketBuffer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x04c88ba5, Data2: 0x05e9, Data3 : 0x53b2, Data4 : (0x85, 0x24, 0xdf, 0x45, 0x8d, 0x2a, 0x91, 0x79)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CNetworking_CVpn_CVpnPacketBuffer
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnCredential?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.Vpn.IVpnCredential> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnCredential =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Windows.Networking.Vpn.VpnManagementErrorStatus {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CVpn_CVpnManagementErrorStatus =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CVpn_CIVpnProfile =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
