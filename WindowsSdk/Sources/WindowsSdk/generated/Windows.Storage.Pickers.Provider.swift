// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Storage.Pickers.Provider {
// type: Windows.Storage.Pickers.Provider.AddFileResult
// enum type
public typealias AddFileResult = _q_CWindows_CStorage_CPickers_CProvider_CAddFileResult;

// type: Windows.Storage.Pickers.Provider.FileOpenPickerUI
// runtime class
public class FileOpenPickerUI
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.IFileOpenPickerUI;
    public init(plok: Windows.Storage.Pickers.Provider.IFileOpenPickerUI?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.IFileOpenPickerUI { return _self; }
    public func AddFile(id : Swift.String, file : Optional<Windows.Storage.IStorageFile>) throws -> Windows.Storage.Pickers.Provider.AddFileResult {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.AddFile(id: id, file: file);
    }
    public func RemoveFile(id : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.RemoveFile(id: id);
    }
    public func ContainsFile(id : Swift.String) throws -> boolean {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.ContainsFile(id: id);
    }
    public func CanAddFile(file : Optional<Windows.Storage.IStorageFile>) throws -> boolean {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.CanAddFile(file: file);
    }
    public func get_AllowedFileTypes() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.get_AllowedFileTypes();
    }
    public func get_SelectionMode() throws -> Windows.Storage.Pickers.Provider.FileSelectionMode {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.get_SelectionMode();
    }
    public func get_SettingsIdentifier() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.get_SettingsIdentifier();
    }
    public func get_Title() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func add_FileRemoved(handler : @escaping (Optional<Windows.Storage.Pickers.Provider.FileOpenPickerUI>, Optional<Windows.Storage.Pickers.Provider.FileRemovedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.add_FileRemoved(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileOpenPickerUI__q_CWindows_CStorage_CPickers_CProvider_CFileRemovedEventArgs(cb: handler).Interface());
    }
    public func remove_FileRemoved(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.remove_FileRemoved(token: token);
    }
    public func add_Closing(handler : @escaping (Optional<Windows.Storage.Pickers.Provider.FileOpenPickerUI>, Optional<Windows.Storage.Pickers.Provider.PickerClosingEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.add_Closing(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileOpenPickerUI__q_CWindows_CStorage_CPickers_CProvider_CPickerClosingEventArgs(cb: handler).Interface());
    }
    public func remove_Closing(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.remove_Closing(token: token);
    }
    public var AllowedFileTypes : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.AllowedFileTypes;
        }
    }
    public var SelectionMode : Windows.Storage.Pickers.Provider.FileSelectionMode {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.SelectionMode;
        }
    }
    public var SettingsIdentifier : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.SettingsIdentifier;
        }
    }
    public var Title : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileOpenPickerUI = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
}

// type: Windows.Storage.Pickers.Provider.FileRemovedEventArgs
// runtime class
public class FileRemovedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.IFileRemovedEventArgs;
    public init(plok: Windows.Storage.Pickers.Provider.IFileRemovedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.IFileRemovedEventArgs { return _self; }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileRemovedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileRemovedEventArgs = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
}

// type: Windows.Storage.Pickers.Provider.FileSavePickerUI
// runtime class
public class FileSavePickerUI
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.IFileSavePickerUI;
    public init(plok: Windows.Storage.Pickers.Provider.IFileSavePickerUI?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.IFileSavePickerUI { return _self; }
    public func get_Title() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func get_AllowedFileTypes() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.get_AllowedFileTypes();
    }
    public func get_SettingsIdentifier() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.get_SettingsIdentifier();
    }
    public func get_FileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.get_FileName();
    }
    public func TrySetFileName(value : Swift.String) throws -> Windows.Storage.Pickers.Provider.SetFileNameResult {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.TrySetFileName(value: value);
    }
    public func add_FileNameChanged(handler : @escaping (Optional<Windows.Storage.Pickers.Provider.FileSavePickerUI>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.add_FileNameChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileSavePickerUI_IInspectable(cb: handler).Interface());
    }
    public func remove_FileNameChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.remove_FileNameChanged(token: token);
    }
    public func add_TargetFileRequested(handler : @escaping (Optional<Windows.Storage.Pickers.Provider.FileSavePickerUI>, Optional<Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.add_TargetFileRequested(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileSavePickerUI__q_CWindows_CStorage_CPickers_CProvider_CTargetFileRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_TargetFileRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.remove_TargetFileRequested(token: token);
    }
    public var AllowedFileTypes : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.AllowedFileTypes;
        }
    }
    public var FileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.FileName;
        }
    }
    public var SettingsIdentifier : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.SettingsIdentifier;
        }
    }
    public var Title : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IFileSavePickerUI = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
}

// type: Windows.Storage.Pickers.Provider.FileSelectionMode
// enum type
public typealias FileSelectionMode = _q_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode;

// type: Windows.Storage.Pickers.Provider.IFileOpenPickerUI
// interface type
open class IFileOpenPickerUI
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdda45a10, Data2: 0xf9d4, Data3 : 0x40c4, Data4 : (0x8a, 0xf5, 0xc5, 0xb6, 0xb5, 0xa6, 0x1d, 0x1d)) }
    // Windows.Storage.Pickers.Provider.AddFileResult AddFile(System.String, Windows.Storage.IStorageFile)
    private func _n_AddFile(_ id : Optional<HSTRING>, _ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CAddFileResult>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddFile(pThis, id, file, __presult))
        }
    }
    public func AddFile(id : Swift.String, file : Optional<Windows.Storage.IStorageFile>) throws -> Windows.Storage.Pickers.Provider.AddFileResult {
        let __hstr_id = try HString(id);
        return try withExtendedLifetime(__hstr_id) {
        var __result : _q_CWindows_CStorage_CPickers_CProvider_CAddFileResult = _q_CWindows_CStorage_CPickers_CProvider_CAddFileResult_Added;
        try self._n_AddFile(__hstr_id.Raw(), RawPointer(file), &__result);
        return __result;
        }
    }
    // void RemoveFile(System.String)
    private func _n_RemoveFile(_ id : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFile(pThis, id))
        }
    }
    public func RemoveFile(id : Swift.String) throws -> Void {
        let __hstr_id = try HString(id);
        return try withExtendedLifetime(__hstr_id) {
        try self._n_RemoveFile(__hstr_id.Raw());
        }
    }
    // bool ContainsFile(System.String)
    private func _n_ContainsFile(_ id : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ContainsFile(pThis, id, __presult))
        }
    }
    public func ContainsFile(id : Swift.String) throws -> boolean {
        let __hstr_id = try HString(id);
        return try withExtendedLifetime(__hstr_id) {
        var __result : boolean = 0;
        try self._n_ContainsFile(__hstr_id.Raw(), &__result);
        return __result;
        }
    }
    // bool CanAddFile(Windows.Storage.IStorageFile)
    private func _n_CanAddFile(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CanAddFile(pThis, file, __presult))
        }
    }
    public func CanAddFile(file : Optional<Windows.Storage.IStorageFile>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_CanAddFile(RawPointer(file), &__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.String> get_AllowedFileTypes()
    private func _n_get_AllowedFileTypes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowedFileTypes(pThis, __presult))
        }
    }
    public func get_AllowedFileTypes() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_get_AllowedFileTypes(&__result);
        return ClosedGenerics.IVectorView_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Pickers.Provider.FileSelectionMode get_SelectionMode()
    private func _n_get_SelectionMode(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionMode(pThis, __presult))
        }
    }
    public func get_SelectionMode() throws -> Windows.Storage.Pickers.Provider.FileSelectionMode {
        var __result : _q_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode = _q_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode_Single;
        try self._n_get_SelectionMode(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_SettingsIdentifier()
    private func _n_get_SettingsIdentifier(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, __presult))
        }
    }
    public func get_SettingsIdentifier() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SettingsIdentifier(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Title(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Title(System.String)
    private func _n_put_Title(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Title(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_FileRemoved(Windows.Foundation.TypedEventHandler<Windows.Storage.Pickers.Provider.FileOpenPickerUI,Windows.Storage.Pickers.Provider.FileRemovedEventArgs>)
    private func _n_add_FileRemoved(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileOpenPickerUI__q_CWindows_CStorage_CPickers_CProvider_CFileRemovedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_FileRemoved(pThis, handler, __presult))
        }
    }
    public func add_FileRemoved(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileOpenPickerUI__q_CWindows_CStorage_CPickers_CProvider_CFileRemovedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_FileRemoved(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_FileRemoved(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_FileRemoved(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FileRemoved(pThis, token))
        }
    }
    public func remove_FileRemoved(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_FileRemoved(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Closing(Windows.Foundation.TypedEventHandler<Windows.Storage.Pickers.Provider.FileOpenPickerUI,Windows.Storage.Pickers.Provider.PickerClosingEventArgs>)
    private func _n_add_Closing(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileOpenPickerUI__q_CWindows_CStorage_CPickers_CProvider_CPickerClosingEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closing(pThis, handler, __presult))
        }
    }
    public func add_Closing(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileOpenPickerUI__q_CWindows_CStorage_CPickers_CProvider_CPickerClosingEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Closing(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Closing(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Closing(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileOpenPickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closing(pThis, token))
        }
    }
    public func remove_Closing(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Closing(token);
    }
    public var AllowedFileTypes : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
            return try get_AllowedFileTypes();
        }
    }
    public var SelectionMode : Windows.Storage.Pickers.Provider.FileSelectionMode {
        get throws {
            return try get_SelectionMode();
        }
    }
    public var SettingsIdentifier : Swift.String {
        get throws {
            return try get_SettingsIdentifier();
        }
    }
    public var Title : Swift.String {
        get throws {
            return try get_Title();
        }
    }
} // IFileOpenPickerUI


// type: Windows.Storage.Pickers.Provider.IFileRemovedEventArgs
// interface type
open class IFileRemovedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x13043da7, Data2: 0x7fca, Data3 : 0x4c2b, Data4 : (0x9e, 0xca, 0x68, 0x90, 0xf9, 0xf0, 0x01, 0x85)) }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileRemovedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
} // IFileRemovedEventArgs


// type: Windows.Storage.Pickers.Provider.IFileSavePickerUI
// interface type
open class IFileSavePickerUI
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9656c1e7, Data2: 0x3e56, Data3 : 0x43cc, Data4 : (0x8a, 0x39, 0x33, 0xc7, 0x3d, 0x9d, 0x54, 0x2b)) }
    // [IsSpecialName] System.String get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Title(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Title(System.String)
    private func _n_put_Title(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Title(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.String> get_AllowedFileTypes()
    private func _n_get_AllowedFileTypes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowedFileTypes(pThis, __presult))
        }
    }
    public func get_AllowedFileTypes() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_get_AllowedFileTypes(&__result);
        return ClosedGenerics.IVectorView_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] System.String get_SettingsIdentifier()
    private func _n_get_SettingsIdentifier(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SettingsIdentifier(pThis, __presult))
        }
    }
    public func get_SettingsIdentifier() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SettingsIdentifier(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_FileName()
    private func _n_get_FileName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileName(pThis, __presult))
        }
    }
    public func get_FileName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FileName(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Storage.Pickers.Provider.SetFileNameResult TrySetFileName(System.String)
    private func _n_TrySetFileName(_ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TrySetFileName(pThis, value, __presult))
        }
    }
    public func TrySetFileName(value : Swift.String) throws -> Windows.Storage.Pickers.Provider.SetFileNameResult {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        var __result : _q_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult = _q_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult_Succeeded;
        try self._n_TrySetFileName(__hstr_value.Raw(), &__result);
        return __result;
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_FileNameChanged(Windows.Foundation.TypedEventHandler<Windows.Storage.Pickers.Provider.FileSavePickerUI,System.Object>)
    private func _n_add_FileNameChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileSavePickerUI_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_FileNameChanged(pThis, handler, __presult))
        }
    }
    public func add_FileNameChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileSavePickerUI_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_FileNameChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_FileNameChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_FileNameChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FileNameChanged(pThis, token))
        }
    }
    public func remove_FileNameChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_FileNameChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_TargetFileRequested(Windows.Foundation.TypedEventHandler<Windows.Storage.Pickers.Provider.FileSavePickerUI,Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs>)
    private func _n_add_TargetFileRequested(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileSavePickerUI__q_CWindows_CStorage_CPickers_CProvider_CTargetFileRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_TargetFileRequested(pThis, handler, __presult))
        }
    }
    public func add_TargetFileRequested(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CPickers_CProvider_CFileSavePickerUI__q_CWindows_CStorage_CPickers_CProvider_CTargetFileRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_TargetFileRequested(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_TargetFileRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_TargetFileRequested(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIFileSavePickerUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TargetFileRequested(pThis, token))
        }
    }
    public func remove_TargetFileRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_TargetFileRequested(token);
    }
    public var AllowedFileTypes : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
            return try get_AllowedFileTypes();
        }
    }
    public var FileName : Swift.String {
        get throws {
            return try get_FileName();
        }
    }
    public var SettingsIdentifier : Swift.String {
        get throws {
            return try get_SettingsIdentifier();
        }
    }
    public var Title : Swift.String {
        get throws {
            return try get_Title();
        }
    }
} // IFileSavePickerUI


// type: Windows.Storage.Pickers.Provider.IPickerClosingDeferral
// interface type
open class IPickerClosingDeferral
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7af7f71e, Data2: 0x1a67, Data3 : 0x4a31, Data4 : (0xae, 0x80, 0xe9, 0x07, 0x70, 0x8a, 0x61, 0x9b)) }
    // void Complete()
    private func _n_Complete() throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
        }
    }
    public func Complete() throws -> Void {
        try self._n_Complete();
    }
} // IPickerClosingDeferral


// type: Windows.Storage.Pickers.Provider.IPickerClosingEventArgs
// interface type
open class IPickerClosingEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7e59f224, Data2: 0xb332, Data3 : 0x4f12, Data4 : (0x8b, 0x9f, 0xa8, 0xc2, 0xf0, 0x6b, 0x32, 0xcd)) }
    // [IsSpecialName] Windows.Storage.Pickers.Provider.PickerClosingOperation get_ClosingOperation()
    private func _n_get_ClosingOperation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClosingOperation(pThis, __presult))
        }
    }
    public func get_ClosingOperation() throws -> Optional<Windows.Storage.Pickers.Provider.IPickerClosingOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation>> = nil;
        try self._n_get_ClosingOperation(&__result);
        return Windows.Storage.Pickers.Provider.IPickerClosingOperation(consuming: __result);
    }
    // [IsSpecialName] bool get_IsCanceled()
    private func _n_get_IsCanceled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCanceled(pThis, __presult))
        }
    }
    public func get_IsCanceled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsCanceled(&__result);
        return __result;
    }
    public var ClosingOperation : Optional<Windows.Storage.Pickers.Provider.IPickerClosingOperation> {
        get throws {
            return try get_ClosingOperation();
        }
    }
    public var IsCanceled : boolean {
        get throws {
            return try get_IsCanceled();
        }
    }
} // IPickerClosingEventArgs


// type: Windows.Storage.Pickers.Provider.IPickerClosingOperation
// interface type
open class IPickerClosingOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4ce9fb84, Data2: 0xbeee, Data3 : 0x4e39, Data4 : (0xa7, 0x73, 0xfc, 0x5f, 0x0e, 0xae, 0x32, 0x8d)) }
    // Windows.Storage.Pickers.Provider.PickerClosingDeferral GetDeferral()
    private func _n_GetDeferral(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, __presult))
        }
    }
    public func GetDeferral() throws -> Optional<Windows.Storage.Pickers.Provider.IPickerClosingDeferral> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingDeferral>> = nil;
        try self._n_GetDeferral(&__result);
        return Windows.Storage.Pickers.Provider.IPickerClosingDeferral(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.DateTime get_Deadline()
    private func _n_get_Deadline(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CDateTime>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CIPickerClosingOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Deadline(pThis, __presult))
        }
    }
    public func get_Deadline() throws -> Windows.Foundation.DateTime {
        var __result : _q_CWindows_CFoundation_CDateTime = _q_CWindows_CFoundation_CDateTime(UniversalTime: 0);
        try self._n_get_Deadline(&__result);
        return __result;
    }
    public var Deadline : Windows.Foundation.DateTime {
        get throws {
            return try get_Deadline();
        }
    }
} // IPickerClosingOperation


// type: Windows.Storage.Pickers.Provider.ITargetFileRequest
// interface type
open class ITargetFileRequest
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x42bd3355, Data2: 0x7f88, Data3 : 0x478b, Data4 : (0x8e, 0x81, 0x69, 0x0b, 0x20, 0x34, 0x06, 0x78)) }
    // [IsSpecialName] Windows.Storage.IStorageFile get_TargetFile()
    private func _n_get_TargetFile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetFile(pThis, __presult))
        }
    }
    public func get_TargetFile() throws -> Optional<Windows.Storage.IStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>> = nil;
        try self._n_get_TargetFile(&__result);
        return Windows.Storage.IStorageFile(consuming: __result);
    }
    // [IsSpecialName] void put_TargetFile(Windows.Storage.IStorageFile)
    private func _n_put_TargetFile(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TargetFile(pThis, value))
        }
    }
    public func put_TargetFile(value : Optional<Windows.Storage.IStorageFile>) throws -> Void {
        try self._n_put_TargetFile(RawPointer(value));
    }
    // Windows.Storage.Pickers.Provider.TargetFileRequestDeferral GetDeferral()
    private func _n_GetDeferral(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, __presult))
        }
    }
    public func GetDeferral() throws -> Optional<Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral>> = nil;
        try self._n_GetDeferral(&__result);
        return Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral(consuming: __result);
    }
    public var TargetFile : Optional<Windows.Storage.IStorageFile> {
        get throws {
            return try get_TargetFile();
        }
    }
} // ITargetFileRequest


// type: Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral
// interface type
open class ITargetFileRequestDeferral
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4aee9d91, Data2: 0xbf15, Data3 : 0x4da9, Data4 : (0x95, 0xf6, 0xf6, 0xb7, 0xd5, 0x58, 0x22, 0x5b)) }
    // void Complete()
    private func _n_Complete() throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestDeferral.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
        }
    }
    public func Complete() throws -> Void {
        try self._n_Complete();
    }
} // ITargetFileRequestDeferral


// type: Windows.Storage.Pickers.Provider.ITargetFileRequestedEventArgs
// interface type
open class ITargetFileRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb163dbc1, Data2: 0x1b51, Data3 : 0x4c89, Data4 : (0xa5, 0x91, 0x0f, 0xd4, 0x0b, 0x3c, 0x57, 0xc9)) }
    // [IsSpecialName] Windows.Storage.Pickers.Provider.TargetFileRequest get_Request()
    private func _n_get_Request(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, __presult))
        }
    }
    public func get_Request() throws -> Optional<Windows.Storage.Pickers.Provider.ITargetFileRequest> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CPickers_CProvider_CITargetFileRequest>> = nil;
        try self._n_get_Request(&__result);
        return Windows.Storage.Pickers.Provider.ITargetFileRequest(consuming: __result);
    }
    public var Request : Optional<Windows.Storage.Pickers.Provider.ITargetFileRequest> {
        get throws {
            return try get_Request();
        }
    }
} // ITargetFileRequestedEventArgs


// type: Windows.Storage.Pickers.Provider.PickerClosingDeferral
// runtime class
public class PickerClosingDeferral
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.IPickerClosingDeferral;
    public init(plok: Windows.Storage.Pickers.Provider.IPickerClosingDeferral?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.IPickerClosingDeferral { return _self; }
    public func Complete() throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingDeferral = try _self.QueryInterface();
        return try _ifc.Complete();
    }
}

// type: Windows.Storage.Pickers.Provider.PickerClosingEventArgs
// runtime class
public class PickerClosingEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.IPickerClosingEventArgs;
    public init(plok: Windows.Storage.Pickers.Provider.IPickerClosingEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.IPickerClosingEventArgs { return _self; }
    public func get_ClosingOperation() throws -> Optional<Windows.Storage.Pickers.Provider.PickerClosingOperation> {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Pickers.Provider.PickerClosingOperation(plok: _ifc.get_ClosingOperation());
    }
    public func get_IsCanceled() throws -> boolean {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingEventArgs = try _self.QueryInterface();
        return try _ifc.get_IsCanceled();
    }
    public var ClosingOperation : Optional<Windows.Storage.Pickers.Provider.PickerClosingOperation> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Pickers.Provider.PickerClosingOperation(plok: _ifc.ClosingOperation);
        }
    }
    public var IsCanceled : boolean {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingEventArgs = try _self.QueryInterface();
        return try _ifc.IsCanceled;
        }
    }
}

// type: Windows.Storage.Pickers.Provider.PickerClosingOperation
// runtime class
public class PickerClosingOperation
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.IPickerClosingOperation;
    public init(plok: Windows.Storage.Pickers.Provider.IPickerClosingOperation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.IPickerClosingOperation { return _self; }
    public func GetDeferral() throws -> Optional<Windows.Storage.Pickers.Provider.PickerClosingDeferral> {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingOperation = try _self.QueryInterface();
        return try Windows.Storage.Pickers.Provider.PickerClosingDeferral(plok: _ifc.GetDeferral());
    }
    public func get_Deadline() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingOperation = try _self.QueryInterface();
        return try _ifc.get_Deadline();
    }
    public var Deadline : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.IPickerClosingOperation = try _self.QueryInterface();
        return try _ifc.Deadline;
        }
    }
}

// type: Windows.Storage.Pickers.Provider.SetFileNameResult
// enum type
public typealias SetFileNameResult = _q_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult;

// type: Windows.Storage.Pickers.Provider.TargetFileRequest
// runtime class
public class TargetFileRequest
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.ITargetFileRequest;
    public init(plok: Windows.Storage.Pickers.Provider.ITargetFileRequest?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.ITargetFileRequest { return _self; }
    public func get_TargetFile() throws -> Optional<Windows.Storage.IStorageFile> {
        let _ifc : Windows.Storage.Pickers.Provider.ITargetFileRequest = try _self.QueryInterface();
        return try _ifc.get_TargetFile();
    }
    public func put_TargetFile(value : Optional<Windows.Storage.IStorageFile>) throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.ITargetFileRequest = try _self.QueryInterface();
        return try _ifc.put_TargetFile(value: value);
    }
    public func GetDeferral() throws -> Optional<Windows.Storage.Pickers.Provider.TargetFileRequestDeferral> {
        let _ifc : Windows.Storage.Pickers.Provider.ITargetFileRequest = try _self.QueryInterface();
        return try Windows.Storage.Pickers.Provider.TargetFileRequestDeferral(plok: _ifc.GetDeferral());
    }
    public var TargetFile : Optional<Windows.Storage.IStorageFile> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.ITargetFileRequest = try _self.QueryInterface();
        return try _ifc.TargetFile;
        }
    }
}

// type: Windows.Storage.Pickers.Provider.TargetFileRequestDeferral
// runtime class
public class TargetFileRequestDeferral
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral;
    public init(plok: Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral { return _self; }
    public func Complete() throws -> Void {
        let _ifc : Windows.Storage.Pickers.Provider.ITargetFileRequestDeferral = try _self.QueryInterface();
        return try _ifc.Complete();
    }
}

// type: Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs
// runtime class
public class TargetFileRequestedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Pickers.Provider.ITargetFileRequestedEventArgs;
    public init(plok: Windows.Storage.Pickers.Provider.ITargetFileRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Pickers.Provider.ITargetFileRequestedEventArgs { return _self; }
    public func get_Request() throws -> Optional<Windows.Storage.Pickers.Provider.TargetFileRequest> {
        let _ifc : Windows.Storage.Pickers.Provider.ITargetFileRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Pickers.Provider.TargetFileRequest(plok: _ifc.get_Request());
    }
    public var Request : Optional<Windows.Storage.Pickers.Provider.TargetFileRequest> {
        get throws {
        let _ifc : Windows.Storage.Pickers.Provider.ITargetFileRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Pickers.Provider.TargetFileRequest(plok: _ifc.Request);
        }
    }
}

}
extension Windows.Storage.Pickers.Provider.AddFileResult {
    public static var Added : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CAddFileResult_Added;
        }
    }
    public static var AlreadyAdded : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CAddFileResult_AlreadyAdded;
        }
    }
    public static var NotAllowed : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CAddFileResult_NotAllowed;
        }
    }
    public static var Unavailable : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CAddFileResult_Unavailable;
        }
    }
}
extension Windows.Storage.Pickers.Provider.FileSelectionMode {
    public static var Single : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode_Single;
        }
    }
    public static var Multiple : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CFileSelectionMode_Multiple;
        }
    }
}
extension Windows.Storage.Pickers.Provider.SetFileNameResult {
    public static var Succeeded : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult_Succeeded;
        }
    }
    public static var NotAllowed : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult_NotAllowed;
        }
    }
    public static var Unavailable : Self {
        get {
            return _q_CWindows_CStorage_CPickers_CProvider_CSetFileNameResult_Unavailable;
        }
    }
}
