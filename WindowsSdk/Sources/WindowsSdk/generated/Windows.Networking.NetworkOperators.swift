// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.NetworkOperators {
// type: Windows.Networking.NetworkOperators.DataClasses
// enum type
public typealias DataClasses = _q_CWindows_CNetworking_CNetworkOperators_CDataClasses;

// type: Windows.Networking.NetworkOperators.ESim
// runtime class
public class ESim
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESim;
    public init(plok: Windows.Networking.NetworkOperators.IESim?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESim { return _self; }
    public func get_AvailableMemoryInBytes() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.get_AvailableMemoryInBytes();
    }
    public func get_Eid() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.get_Eid();
    }
    public func get_FirmwareVersion() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.get_FirmwareVersion();
    }
    public func get_MobileBroadbandModemDeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.get_MobileBroadbandModemDeviceId();
    }
    public func get_Policy() throws -> Optional<Windows.Networking.NetworkOperators.ESimPolicy> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimPolicy(plok: _ifc.get_Policy());
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.ESimState {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.get_State();
    }
    public func GetProfiles() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimProfile> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.GetProfiles();
    }
    public func DeleteProfileAsync(profileId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.DeleteProfileAsync(profileId: profileId);
    }
    public func DeleteProfile(profileId : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.DeleteProfileAsync(profileId: profileId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DownloadProfileMetadataAsync(activationCode : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDownloadProfileMetadataResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.DownloadProfileMetadataAsync(activationCode: activationCode);
    }
    public func DownloadProfileMetadata(activationCode : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult(plok: self.DownloadProfileMetadataAsync(activationCode: activationCode)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ResetAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.ResetAsync();
    }
    public func Reset() async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.ResetAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func add_ProfileChanged(handler : @escaping (Optional<Windows.Networking.NetworkOperators.ESim>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.add_ProfileChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESim_IInspectable(cb: handler).Interface());
    }
    public func remove_ProfileChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.remove_ProfileChanged(token: token);
    }
    public var AvailableMemoryInBytes : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.AvailableMemoryInBytes;
        }
    }
    public var Eid : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.Eid;
        }
    }
    public var FirmwareVersion : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.FirmwareVersion;
        }
    }
    public var MobileBroadbandModemDeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.MobileBroadbandModemDeviceId;
        }
    }
    public var Policy : Optional<Windows.Networking.NetworkOperators.ESimPolicy> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimPolicy(plok: _ifc.Policy);
        }
    }
    public var State : Windows.Networking.NetworkOperators.ESimState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESim = try _self.QueryInterface();
        return try _ifc.State;
        }
    }
    public func Discover() throws -> Optional<Windows.Networking.NetworkOperators.ESimDiscoverResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESim2 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimDiscoverResult(plok: _ifc.Discover());
    }
    public func Discover(serverAddress : Swift.String, matchingId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.ESimDiscoverResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESim2 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimDiscoverResult(plok: _ifc.DiscoverWithServerAddressAndMatchingId(serverAddress: serverAddress, matchingId: matchingId));
    }
    public func DiscoverAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESim2 = try _self.QueryInterface();
        return try _ifc.DiscoverAsync();
    }
    public func Discover() async throws -> Optional<Windows.Networking.NetworkOperators.ESimDiscoverResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimDiscoverResult(plok: self.DiscoverAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DiscoverAsync(serverAddress : Swift.String, matchingId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESim2 = try _self.QueryInterface();
        return try _ifc.DiscoverWithServerAddressAndMatchingIdAsync(serverAddress: serverAddress, matchingId: matchingId);
    }
    public func Discover(serverAddress : Swift.String, matchingId : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.ESimDiscoverResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimDiscoverResult(plok: self.DiscoverAsync(serverAddress: serverAddress, matchingId: matchingId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimAddedEventArgs
// runtime class
public class ESimAddedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimAddedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IESimAddedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimAddedEventArgs { return _self; }
    public func get_ESim() throws -> Optional<Windows.Networking.NetworkOperators.ESim> {
        let _ifc : Windows.Networking.NetworkOperators.IESimAddedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESim(plok: _ifc.get_ESim());
    }
    public var ESim : Optional<Windows.Networking.NetworkOperators.ESim> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimAddedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESim(plok: _ifc.ESim);
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimAuthenticationPreference
// enum type
public typealias ESimAuthenticationPreference = _q_CWindows_CNetworking_CNetworkOperators_CESimAuthenticationPreference;

// type: Windows.Networking.NetworkOperators.ESimDiscoverEvent
// runtime class
public class ESimDiscoverEvent
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimDiscoverEvent;
    public init(plok: Windows.Networking.NetworkOperators.IESimDiscoverEvent?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimDiscoverEvent { return _self; }
    public func get_MatchingId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverEvent = try _self.QueryInterface();
        return try _ifc.get_MatchingId();
    }
    public func get_RspServerAddress() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverEvent = try _self.QueryInterface();
        return try _ifc.get_RspServerAddress();
    }
    public var MatchingId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverEvent = try _self.QueryInterface();
        return try _ifc.MatchingId;
        }
    }
    public var RspServerAddress : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverEvent = try _self.QueryInterface();
        return try _ifc.RspServerAddress;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimDiscoverResult
// runtime class
public class ESimDiscoverResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimDiscoverResult;
    public init(plok: Windows.Networking.NetworkOperators.IESimDiscoverResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimDiscoverResult { return _self; }
    public func get_Events() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverEvent> {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try _ifc.get_Events();
    }
    public func get_Kind() throws -> Windows.Networking.NetworkOperators.ESimDiscoverResultKind {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try _ifc.get_Kind();
    }
    public func get_ProfileMetadata() throws -> Optional<Windows.Networking.NetworkOperators.ESimProfileMetadata> {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfileMetadata(plok: _ifc.get_ProfileMetadata());
    }
    public func get_Result() throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimOperationResult(plok: _ifc.get_Result());
    }
    public var Events : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverEvent> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try _ifc.Events;
        }
    }
    public var Kind : Windows.Networking.NetworkOperators.ESimDiscoverResultKind {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try _ifc.Kind;
        }
    }
    public var ProfileMetadata : Optional<Windows.Networking.NetworkOperators.ESimProfileMetadata> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfileMetadata(plok: _ifc.ProfileMetadata);
        }
    }
    public var Result : Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDiscoverResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimOperationResult(plok: _ifc.Result);
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimDiscoverResultKind
// enum type
public typealias ESimDiscoverResultKind = _q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResultKind;

// type: Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult
// runtime class
public class ESimDownloadProfileMetadataResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult;
    public init(plok: Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult { return _self; }
    public func get_Result() throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimOperationResult(plok: _ifc.get_Result());
    }
    public func get_ProfileMetadata() throws -> Optional<Windows.Networking.NetworkOperators.ESimProfileMetadata> {
        let _ifc : Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfileMetadata(plok: _ifc.get_ProfileMetadata());
    }
    public var ProfileMetadata : Optional<Windows.Networking.NetworkOperators.ESimProfileMetadata> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfileMetadata(plok: _ifc.ProfileMetadata);
        }
    }
    public var Result : Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimOperationResult(plok: _ifc.Result);
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimManager
// static class
public class ESimManager
{
    private struct _IESimManagerStatics {
        static var x : IESimManagerStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.ESimManager")
    }
    public static var ESimManagerStatics : IESimManagerStatics {
        _IESimManagerStatics.x
    }
    public static func get_ServiceInfo() throws -> Optional<Windows.Networking.NetworkOperators.ESimServiceInfo> {
        return try Windows.Networking.NetworkOperators.ESimServiceInfo(plok: ESimManagerStatics.get_ServiceInfo());
    }
    public static func TryCreateESimWatcher() throws -> Optional<Windows.Networking.NetworkOperators.ESimWatcher> {
        return try Windows.Networking.NetworkOperators.ESimWatcher(plok: ESimManagerStatics.TryCreateESimWatcher());
    }
    public static func add_ServiceInfoChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try ESimManagerStatics.add_ServiceInfoChanged(handler: ClosedGenerics.impl_EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_ServiceInfoChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try ESimManagerStatics.remove_ServiceInfoChanged(token: token);
    }
    public static var ServiceInfo : Optional<Windows.Networking.NetworkOperators.ESimServiceInfo> {
        get throws {
        return try Windows.Networking.NetworkOperators.ESimServiceInfo(plok: ESimManagerStatics.ServiceInfo);
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimOperationResult
// runtime class
public class ESimOperationResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimOperationResult;
    public init(plok: Windows.Networking.NetworkOperators.IESimOperationResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimOperationResult { return _self; }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.ESimOperationStatus {
        let _ifc : Windows.Networking.NetworkOperators.IESimOperationResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public var Status : Windows.Networking.NetworkOperators.ESimOperationStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimOperationResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimOperationStatus
// enum type
public typealias ESimOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus;

// type: Windows.Networking.NetworkOperators.ESimPolicy
// runtime class
public class ESimPolicy
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimPolicy;
    public init(plok: Windows.Networking.NetworkOperators.IESimPolicy?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimPolicy { return _self; }
    public func get_ShouldEnableManagingUi() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IESimPolicy = try _self.QueryInterface();
        return try _ifc.get_ShouldEnableManagingUi();
    }
    public var ShouldEnableManagingUi : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimPolicy = try _self.QueryInterface();
        return try _ifc.ShouldEnableManagingUi;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimProfile
// runtime class
public class ESimProfile
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimProfile;
    public init(plok: Windows.Networking.NetworkOperators.IESimProfile?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimProfile { return _self; }
    public func get_Class() throws -> Windows.Networking.NetworkOperators.ESimProfileClass {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.get_Class();
    }
    public func get_Nickname() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.get_Nickname();
    }
    public func get_Policy() throws -> Optional<Windows.Networking.NetworkOperators.ESimProfilePolicy> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfilePolicy(plok: _ifc.get_Policy());
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_ProviderIcon() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.get_ProviderIcon();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func get_ProviderName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.get_ProviderName();
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.ESimProfileState {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.get_State();
    }
    public func DisableAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.DisableAsync();
    }
    public func Disable() async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.DisableAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func EnableAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.EnableAsync();
    }
    public func Enable() async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.EnableAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetNicknameAsync(newNickname : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.SetNicknameAsync(newNickname: newNickname);
    }
    public func SetNickname(newNickname : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.SetNicknameAsync(newNickname: newNickname)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Class : Windows.Networking.NetworkOperators.ESimProfileClass {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.Class;
        }
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var Nickname : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.Nickname;
        }
    }
    public var Policy : Optional<Windows.Networking.NetworkOperators.ESimProfilePolicy> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfilePolicy(plok: _ifc.Policy);
        }
    }
    public var ProviderIcon : Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.ProviderIcon;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var ProviderName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.ProviderName;
        }
    }
    public var State : Windows.Networking.NetworkOperators.ESimProfileState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfile = try _self.QueryInterface();
        return try _ifc.State;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimProfileClass
// enum type
public typealias ESimProfileClass = _q_CWindows_CNetworking_CNetworkOperators_CESimProfileClass;

// type: Windows.Networking.NetworkOperators.ESimProfileInstallProgress
// struct type
public typealias ESimProfileInstallProgress = _q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress;

// type: Windows.Networking.NetworkOperators.ESimProfileMetadata
// runtime class
public class ESimProfileMetadata
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimProfileMetadata;
    public init(plok: Windows.Networking.NetworkOperators.IESimProfileMetadata?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimProfileMetadata { return _self; }
    public func get_IsConfirmationCodeRequired() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.get_IsConfirmationCodeRequired();
    }
    public func get_Policy() throws -> Optional<Windows.Networking.NetworkOperators.ESimProfilePolicy> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfilePolicy(plok: _ifc.get_Policy());
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_ProviderIcon() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.get_ProviderIcon();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func get_ProviderName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.get_ProviderName();
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.ESimProfileMetadataState {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.get_State();
    }
    public func DenyInstallAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.DenyInstallAsync();
    }
    public func DenyInstall() async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.DenyInstallAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConfirmInstallAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.ConfirmInstallAsync();
    }
    public func ConfirmInstall() async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.ConfirmInstallAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConfirmInstallAsync(confirmationCode : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.ConfirmInstallWithConfirmationCodeAsync(confirmationCode: confirmationCode);
    }
    public func ConfirmInstall(confirmationCode : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.ConfirmInstallAsync(confirmationCode: confirmationCode)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func PostponeInstallAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.PostponeInstallAsync();
    }
    public func PostponeInstall() async throws -> Optional<Windows.Networking.NetworkOperators.ESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ESimOperationResult(plok: self.PostponeInstallAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func add_StateChanged(handler : @escaping (Optional<Windows.Networking.NetworkOperators.ESimProfileMetadata>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.add_StateChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadata_IInspectable(cb: handler).Interface());
    }
    public func remove_StateChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.remove_StateChanged(token: token);
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var IsConfirmationCodeRequired : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.IsConfirmationCodeRequired;
        }
    }
    public var Policy : Optional<Windows.Networking.NetworkOperators.ESimProfilePolicy> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESimProfilePolicy(plok: _ifc.Policy);
        }
    }
    public var ProviderIcon : Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.ProviderIcon;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var ProviderName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.ProviderName;
        }
    }
    public var State : Windows.Networking.NetworkOperators.ESimProfileMetadataState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfileMetadata = try _self.QueryInterface();
        return try _ifc.State;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimProfileMetadataState
// enum type
public typealias ESimProfileMetadataState = _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState;

// type: Windows.Networking.NetworkOperators.ESimProfilePolicy
// runtime class
public class ESimProfilePolicy
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimProfilePolicy;
    public init(plok: Windows.Networking.NetworkOperators.IESimProfilePolicy?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimProfilePolicy { return _self; }
    public func get_CanDelete() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfilePolicy = try _self.QueryInterface();
        return try _ifc.get_CanDelete();
    }
    public func get_CanDisable() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfilePolicy = try _self.QueryInterface();
        return try _ifc.get_CanDisable();
    }
    public func get_IsManagedByEnterprise() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfilePolicy = try _self.QueryInterface();
        return try _ifc.get_IsManagedByEnterprise();
    }
    public var CanDelete : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfilePolicy = try _self.QueryInterface();
        return try _ifc.CanDelete;
        }
    }
    public var CanDisable : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfilePolicy = try _self.QueryInterface();
        return try _ifc.CanDisable;
        }
    }
    public var IsManagedByEnterprise : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimProfilePolicy = try _self.QueryInterface();
        return try _ifc.IsManagedByEnterprise;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimProfileState
// enum type
public typealias ESimProfileState = _q_CWindows_CNetworking_CNetworkOperators_CESimProfileState;

// type: Windows.Networking.NetworkOperators.ESimRemovedEventArgs
// runtime class
public class ESimRemovedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimRemovedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IESimRemovedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimRemovedEventArgs { return _self; }
    public func get_ESim() throws -> Optional<Windows.Networking.NetworkOperators.ESim> {
        let _ifc : Windows.Networking.NetworkOperators.IESimRemovedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESim(plok: _ifc.get_ESim());
    }
    public var ESim : Optional<Windows.Networking.NetworkOperators.ESim> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimRemovedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESim(plok: _ifc.ESim);
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimServiceInfo
// runtime class
public class ESimServiceInfo
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimServiceInfo;
    public init(plok: Windows.Networking.NetworkOperators.IESimServiceInfo?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimServiceInfo { return _self; }
    public func get_AuthenticationPreference() throws -> Windows.Networking.NetworkOperators.ESimAuthenticationPreference {
        let _ifc : Windows.Networking.NetworkOperators.IESimServiceInfo = try _self.QueryInterface();
        return try _ifc.get_AuthenticationPreference();
    }
    public func get_IsESimUiEnabled() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IESimServiceInfo = try _self.QueryInterface();
        return try _ifc.get_IsESimUiEnabled();
    }
    public var AuthenticationPreference : Windows.Networking.NetworkOperators.ESimAuthenticationPreference {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimServiceInfo = try _self.QueryInterface();
        return try _ifc.AuthenticationPreference;
        }
    }
    public var IsESimUiEnabled : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimServiceInfo = try _self.QueryInterface();
        return try _ifc.IsESimUiEnabled;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimState
// enum type
public typealias ESimState = _q_CWindows_CNetworking_CNetworkOperators_CESimState;

// type: Windows.Networking.NetworkOperators.ESimUpdatedEventArgs
// runtime class
public class ESimUpdatedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimUpdatedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IESimUpdatedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimUpdatedEventArgs { return _self; }
    public func get_ESim() throws -> Optional<Windows.Networking.NetworkOperators.ESim> {
        let _ifc : Windows.Networking.NetworkOperators.IESimUpdatedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESim(plok: _ifc.get_ESim());
    }
    public var ESim : Optional<Windows.Networking.NetworkOperators.ESim> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimUpdatedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ESim(plok: _ifc.ESim);
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimWatcher
// runtime class
public class ESimWatcher
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IESimWatcher;
    public init(plok: Windows.Networking.NetworkOperators.IESimWatcher?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IESimWatcher { return _self; }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.ESimWatcherStatus {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func Start() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.Start();
    }
    public func Stop() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public func add_Added(handler : @escaping (Optional<Windows.Networking.NetworkOperators.ESimWatcher>, Optional<Windows.Networking.NetworkOperators.ESimAddedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.add_Added(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimAddedEventArgs(cb: handler).Interface());
    }
    public func remove_Added(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.remove_Added(token: token);
    }
    public func add_EnumerationCompleted(handler : @escaping (Optional<Windows.Networking.NetworkOperators.ESimWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.add_EnumerationCompleted(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_EnumerationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.remove_EnumerationCompleted(token: token);
    }
    public func add_Removed(handler : @escaping (Optional<Windows.Networking.NetworkOperators.ESimWatcher>, Optional<Windows.Networking.NetworkOperators.ESimRemovedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.add_Removed(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimRemovedEventArgs(cb: handler).Interface());
    }
    public func remove_Removed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.remove_Removed(token: token);
    }
    public func add_Stopped(handler : @escaping (Optional<Windows.Networking.NetworkOperators.ESimWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.add_Stopped(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_Stopped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.remove_Stopped(token: token);
    }
    public func add_Updated(handler : @escaping (Optional<Windows.Networking.NetworkOperators.ESimWatcher>, Optional<Windows.Networking.NetworkOperators.ESimUpdatedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.add_Updated(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimUpdatedEventArgs(cb: handler).Interface());
    }
    public func remove_Updated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.remove_Updated(token: token);
    }
    public var Status : Windows.Networking.NetworkOperators.ESimWatcherStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IESimWatcher = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ESimWatcherStatus
// enum type
public typealias ESimWatcherStatus = _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus;

// type: Windows.Networking.NetworkOperators.HotspotAuthenticationContext
// runtime class
public class HotspotAuthenticationContext
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext;
    public init(plok: Windows.Networking.NetworkOperators.IHotspotAuthenticationContext?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IHotspotAuthenticationContext { return _self; }
    private struct _IHotspotAuthenticationContextStatics {
        static var x : IHotspotAuthenticationContextStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.HotspotAuthenticationContext")
    }
    public static var HotspotAuthenticationContextStatics : IHotspotAuthenticationContextStatics {
        _IHotspotAuthenticationContextStatics.x
    }
    public static func TryGetAuthenticationContext(evenToken : Swift.String, context : inout Optional<Windows.Networking.NetworkOperators.HotspotAuthenticationContext>) throws -> boolean {
            var _tmp_out_context: Optional<Windows.Networking.NetworkOperators.IHotspotAuthenticationContext> = nil;
        return try HotspotAuthenticationContextStatics.TryGetAuthenticationContext(evenToken: evenToken, context: &_tmp_out_context);
    }
    public func get_WirelessNetworkId() throws -> UINT32 {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try _ifc.get_WirelessNetworkId();
    }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.get_NetworkAdapter());
    }
    public func get_RedirectMessageUrl() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_RedirectMessageUrl());
    }
    public func get_RedirectMessageXml() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_RedirectMessageXml());
    }
    public func get_AuthenticationUrl() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_AuthenticationUrl());
    }
    public func IssueCredentials(userName : Swift.String, password : Swift.String, extraParameters : Swift.String, markAsManualConnectOnFailure : boolean) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try _ifc.IssueCredentials(userName: userName, password: password, extraParameters: extraParameters, markAsManualConnectOnFailure: markAsManualConnectOnFailure);
    }
    public func AbortAuthentication(markAsManual : boolean) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try _ifc.AbortAuthentication(markAsManual: markAsManual);
    }
    public func SkipAuthentication() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try _ifc.SkipAuthentication();
    }
    public func TriggerAttentionRequired(packageRelativeApplicationId : Swift.String, applicationParameters : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try _ifc.TriggerAttentionRequired(packageRelativeApplicationId: packageRelativeApplicationId, applicationParameters: applicationParameters);
    }
    public var AuthenticationUrl : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.AuthenticationUrl);
        }
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.NetworkAdapter);
        }
    }
    public var RedirectMessageUrl : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.RedirectMessageUrl);
        }
    }
    public var RedirectMessageXml : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.RedirectMessageXml);
        }
    }
    public var WirelessNetworkId : UINT32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext = try _self.QueryInterface();
        return try _ifc.WirelessNetworkId;
        }
    }
    public func IssueCredentialsAsync(userName : Swift.String, password : Swift.String, extraParameters : Swift.String, markAsManualConnectOnFailure : boolean) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CHotspotCredentialsAuthenticationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationContext2 = try _self.QueryInterface();
        return try _ifc.IssueCredentialsAsync(userName: userName, password: password, extraParameters: extraParameters, markAsManualConnectOnFailure: markAsManualConnectOnFailure);
    }
    public func IssueCredentials(userName : Swift.String, password : Swift.String, extraParameters : Swift.String, markAsManualConnectOnFailure : boolean) async throws -> Optional<Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult(plok: self.IssueCredentialsAsync(userName: userName, password: password, extraParameters: extraParameters, markAsManualConnectOnFailure: markAsManualConnectOnFailure)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Networking.NetworkOperators.HotspotAuthenticationEventDetails
// runtime class
public class HotspotAuthenticationEventDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IHotspotAuthenticationEventDetails;
    public init(plok: Windows.Networking.NetworkOperators.IHotspotAuthenticationEventDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IHotspotAuthenticationEventDetails { return _self; }
    public func get_EventToken() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationEventDetails = try _self.QueryInterface();
        return try _ifc.get_EventToken();
    }
    public var EventToken : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotAuthenticationEventDetails = try _self.QueryInterface();
        return try _ifc.EventToken;
        }
    }
}

// type: Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode
// enum type
public typealias HotspotAuthenticationResponseCode = _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode;

// type: Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult
// runtime class
public class HotspotCredentialsAuthenticationResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult;
    public init(plok: Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult { return _self; }
    public func get_HasNetworkErrorOccurred() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try _ifc.get_HasNetworkErrorOccurred();
    }
    public func get_ResponseCode() throws -> Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try _ifc.get_ResponseCode();
    }
    public func get_LogoffUrl() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_LogoffUrl());
    }
    public func get_AuthenticationReplyXml() throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.get_AuthenticationReplyXml());
    }
    public var AuthenticationReplyXml : Optional<Windows.Data.Xml.Dom.XmlDocument> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.AuthenticationReplyXml);
        }
    }
    public var HasNetworkErrorOccurred : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try _ifc.HasNetworkErrorOccurred;
        }
    }
    public var LogoffUrl : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.LogoffUrl);
        }
    }
    public var ResponseCode : Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult = try _self.QueryInterface();
        return try _ifc.ResponseCode;
        }
    }
}

// type: Windows.Networking.NetworkOperators.IESim
// interface type
open class IESim
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6f6e6e26, Data2: 0xf123, Data3 : 0x437d, Data4 : (0x8c, 0xed, 0xdc, 0x1d, 0x2b, 0xc0, 0xc3, 0xa9)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_AvailableMemoryInBytes()
    private func _n_get_AvailableMemoryInBytes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AvailableMemoryInBytes(pThis, __presult))
        }
    }
    public func get_AvailableMemoryInBytes() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_AvailableMemoryInBytes(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] System.String get_Eid()
    private func _n_get_Eid(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Eid(pThis, __presult))
        }
    }
    public func get_Eid() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Eid(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_FirmwareVersion()
    private func _n_get_FirmwareVersion(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirmwareVersion(pThis, __presult))
        }
    }
    public func get_FirmwareVersion() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FirmwareVersion(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_MobileBroadbandModemDeviceId()
    private func _n_get_MobileBroadbandModemDeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MobileBroadbandModemDeviceId(pThis, __presult))
        }
    }
    public func get_MobileBroadbandModemDeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MobileBroadbandModemDeviceId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimPolicy get_Policy()
    private func _n_get_Policy(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimPolicy>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Policy(pThis, __presult))
        }
    }
    public func get_Policy() throws -> Optional<Windows.Networking.NetworkOperators.IESimPolicy> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimPolicy>> = nil;
        try self._n_get_Policy(&__result);
        return Windows.Networking.NetworkOperators.IESimPolicy(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimState get_State()
    private func _n_get_State(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, __presult))
        }
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.ESimState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimState = _q_CWindows_CNetworking_CNetworkOperators_CESimState_Unknown;
        try self._n_get_State(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.ESimProfile> GetProfiles()
    private func _n_GetProfiles(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimProfile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetProfiles(pThis, __presult))
        }
    }
    public func GetProfiles() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimProfile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimProfile>> = nil;
        try self._n_GetProfiles(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimProfile(consuming: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimOperationResult> DeleteProfileAsync(System.String)
    private func _n_DeleteProfileAsync(_ profileId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteProfileAsync(pThis, profileId, __presult))
        }
    }
    public func DeleteProfileAsync(profileId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let __hstr_profileId = try HString(profileId);
        return try withExtendedLifetime(__hstr_profileId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>> = nil;
        try self._n_DeleteProfileAsync(__hstr_profileId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult(consuming: __result);
        }
    }
    public func DeleteProfile(profileId : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteProfileAsync(profileId: profileId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimDownloadProfileMetadataResult> DownloadProfileMetadataAsync(System.String)
    private func _n_DownloadProfileMetadataAsync(_ activationCode : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDownloadProfileMetadataResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DownloadProfileMetadataAsync(pThis, activationCode, __presult))
        }
    }
    public func DownloadProfileMetadataAsync(activationCode : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDownloadProfileMetadataResult> {
        let __hstr_activationCode = try HString(activationCode);
        return try withExtendedLifetime(__hstr_activationCode) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDownloadProfileMetadataResult>> = nil;
        try self._n_DownloadProfileMetadataAsync(__hstr_activationCode.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDownloadProfileMetadataResult(consuming: __result);
        }
    }
    public func DownloadProfileMetadata(activationCode : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DownloadProfileMetadataAsync(activationCode: activationCode)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimOperationResult> ResetAsync()
    private func _n_ResetAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResetAsync(pThis, __presult))
        }
    }
    public func ResetAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>> = nil;
        try self._n_ResetAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult(consuming: __result);
    }
    public func Reset() async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ResetAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ProfileChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.ESim,System.Object>)
    private func _n_add_ProfileChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESim_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ProfileChanged(pThis, handler, __presult))
        }
    }
    public func add_ProfileChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESim_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ProfileChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ProfileChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ProfileChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ProfileChanged(pThis, token))
        }
    }
    public func remove_ProfileChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ProfileChanged(token);
    }
    public var AvailableMemoryInBytes : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_AvailableMemoryInBytes();
        }
    }
    public var Eid : Swift.String {
        get throws {
            return try get_Eid();
        }
    }
    public var FirmwareVersion : Swift.String {
        get throws {
            return try get_FirmwareVersion();
        }
    }
    public var MobileBroadbandModemDeviceId : Swift.String {
        get throws {
            return try get_MobileBroadbandModemDeviceId();
        }
    }
    public var Policy : Optional<Windows.Networking.NetworkOperators.IESimPolicy> {
        get throws {
            return try get_Policy();
        }
    }
    public var State : Windows.Networking.NetworkOperators.ESimState {
        get throws {
            return try get_State();
        }
    }
} // IESim


// type: Windows.Networking.NetworkOperators.IESim2
// interface type
open class IESim2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbd4fd0a0, Data2: 0xc68f, Data3 : 0x56eb, Data4 : (0xb9, 0x9b, 0x8f, 0x34, 0xb8, 0x10, 0x02, 0x99)) }
    // Windows.Networking.NetworkOperators.ESimDiscoverResult Discover()
    private func _n_Discover(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Discover(pThis, __presult))
        }
    }
    public func Discover() throws -> Optional<Windows.Networking.NetworkOperators.IESimDiscoverResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult>> = nil;
        try self._n_Discover(&__result);
        return Windows.Networking.NetworkOperators.IESimDiscoverResult(consuming: __result);
    }
    // Windows.Networking.NetworkOperators.ESimDiscoverResult Discover(System.String, System.String)
    private func _n_DiscoverWithServerAddressAndMatchingId(_ serverAddress : Optional<HSTRING>, _ matchingId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DiscoverWithServerAddressAndMatchingId(pThis, serverAddress, matchingId, __presult))
        }
    }
    public func DiscoverWithServerAddressAndMatchingId(serverAddress : Swift.String, matchingId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IESimDiscoverResult> {
        let __hstr_serverAddress = try HString(serverAddress);
        return try withExtendedLifetime(__hstr_serverAddress) {
        let __hstr_matchingId = try HString(matchingId);
        return try withExtendedLifetime(__hstr_matchingId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult>> = nil;
        try self._n_DiscoverWithServerAddressAndMatchingId(__hstr_serverAddress.Raw(), __hstr_matchingId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IESimDiscoverResult(consuming: __result);
        }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimDiscoverResult> DiscoverAsync()
    private func _n_DiscoverAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DiscoverAsync(pThis, __presult))
        }
    }
    public func DiscoverAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult>> = nil;
        try self._n_DiscoverAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult(consuming: __result);
    }
    public func Discover() async throws -> Optional<Windows.Networking.NetworkOperators.IESimDiscoverResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DiscoverAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimDiscoverResult> DiscoverAsync(System.String, System.String)
    private func _n_DiscoverWithServerAddressAndMatchingIdAsync(_ serverAddress : Optional<HSTRING>, _ matchingId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESim2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DiscoverWithServerAddressAndMatchingIdAsync(pThis, serverAddress, matchingId, __presult))
        }
    }
    public func DiscoverWithServerAddressAndMatchingIdAsync(serverAddress : Swift.String, matchingId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult> {
        let __hstr_serverAddress = try HString(serverAddress);
        return try withExtendedLifetime(__hstr_serverAddress) {
        let __hstr_matchingId = try HString(matchingId);
        return try withExtendedLifetime(__hstr_matchingId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult>> = nil;
        try self._n_DiscoverWithServerAddressAndMatchingIdAsync(__hstr_serverAddress.Raw(), __hstr_matchingId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResult(consuming: __result);
        }
        }
    }
    public func DiscoverWithServerAddressAndMatchingId(serverAddress : Swift.String, matchingId : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IESimDiscoverResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DiscoverWithServerAddressAndMatchingIdAsync(serverAddress: serverAddress, matchingId: matchingId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IESim2


// type: Windows.Networking.NetworkOperators.IESimAddedEventArgs
// interface type
open class IESimAddedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x38bd0a58, Data2: 0x4d5a, Data3 : 0x4d08, Data4 : (0x8d, 0xa7, 0xe7, 0x3e, 0xff, 0x36, 0x9d, 0xdd)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESim get_ESim()
    private func _n_get_ESim(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESim>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimAddedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ESim(pThis, __presult))
        }
    }
    public func get_ESim() throws -> Optional<Windows.Networking.NetworkOperators.IESim> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESim>> = nil;
        try self._n_get_ESim(&__result);
        return Windows.Networking.NetworkOperators.IESim(consuming: __result);
    }
    public var ESim : Optional<Windows.Networking.NetworkOperators.IESim> {
        get throws {
            return try get_ESim();
        }
    }
} // IESimAddedEventArgs


// type: Windows.Networking.NetworkOperators.IESimDiscoverEvent
// interface type
open class IESimDiscoverEvent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe59ac3e3, Data2: 0x39bc, Data3 : 0x5f6f, Data4 : (0x93, 0x21, 0x0d, 0x4a, 0x18, 0x2d, 0x26, 0x1b)) }
    // [IsSpecialName] System.String get_MatchingId()
    private func _n_get_MatchingId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverEvent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MatchingId(pThis, __presult))
        }
    }
    public func get_MatchingId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MatchingId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_RspServerAddress()
    private func _n_get_RspServerAddress(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverEvent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RspServerAddress(pThis, __presult))
        }
    }
    public func get_RspServerAddress() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RspServerAddress(&__result);
        return Swift.String(from: __result);
    }
    public var MatchingId : Swift.String {
        get throws {
            return try get_MatchingId();
        }
    }
    public var RspServerAddress : Swift.String {
        get throws {
            return try get_RspServerAddress();
        }
    }
} // IESimDiscoverEvent


// type: Windows.Networking.NetworkOperators.IESimDiscoverResult
// interface type
open class IESimDiscoverResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x56b4bb5e, Data2: 0xab2f, Data3 : 0x5ac6, Data4 : (0xb3, 0x59, 0xdd, 0x5a, 0x8e, 0x23, 0x79, 0x26)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.ESimDiscoverEvent> get_Events()
    private func _n_get_Events(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverEvent>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Events(pThis, __presult))
        }
    }
    public func get_Events() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverEvent> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverEvent>> = nil;
        try self._n_get_Events(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverEvent(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimDiscoverResultKind get_Kind()
    private func _n_get_Kind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResultKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, __presult))
        }
    }
    public func get_Kind() throws -> Windows.Networking.NetworkOperators.ESimDiscoverResultKind {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResultKind = _q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResultKind_None;
        try self._n_get_Kind(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimProfileMetadata get_ProfileMetadata()
    private func _n_get_ProfileMetadata(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileMetadata(pThis, __presult))
        }
    }
    public func get_ProfileMetadata() throws -> Optional<Windows.Networking.NetworkOperators.IESimProfileMetadata> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata>> = nil;
        try self._n_get_ProfileMetadata(&__result);
        return Windows.Networking.NetworkOperators.IESimProfileMetadata(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimOperationResult get_Result()
    private func _n_get_Result(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDiscoverResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, __presult))
        }
    }
    public func get_Result() throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimOperationResult>> = nil;
        try self._n_get_Result(&__result);
        return Windows.Networking.NetworkOperators.IESimOperationResult(consuming: __result);
    }
    public var Events : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverEvent> {
        get throws {
            return try get_Events();
        }
    }
    public var Kind : Windows.Networking.NetworkOperators.ESimDiscoverResultKind {
        get throws {
            return try get_Kind();
        }
    }
    public var ProfileMetadata : Optional<Windows.Networking.NetworkOperators.IESimProfileMetadata> {
        get throws {
            return try get_ProfileMetadata();
        }
    }
    public var Result : Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        get throws {
            return try get_Result();
        }
    }
} // IESimDiscoverResult


// type: Windows.Networking.NetworkOperators.IESimDownloadProfileMetadataResult
// interface type
open class IESimDownloadProfileMetadataResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc4234d9e, Data2: 0x5ad6, Data3 : 0x426d, Data4 : (0x8d, 0x00, 0x44, 0x34, 0xf4, 0x49, 0xaf, 0xec)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimOperationResult get_Result()
    private func _n_get_Result(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDownloadProfileMetadataResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Result(pThis, __presult))
        }
    }
    public func get_Result() throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimOperationResult>> = nil;
        try self._n_get_Result(&__result);
        return Windows.Networking.NetworkOperators.IESimOperationResult(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimProfileMetadata get_ProfileMetadata()
    private func _n_get_ProfileMetadata(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimDownloadProfileMetadataResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileMetadata(pThis, __presult))
        }
    }
    public func get_ProfileMetadata() throws -> Optional<Windows.Networking.NetworkOperators.IESimProfileMetadata> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata>> = nil;
        try self._n_get_ProfileMetadata(&__result);
        return Windows.Networking.NetworkOperators.IESimProfileMetadata(consuming: __result);
    }
    public var ProfileMetadata : Optional<Windows.Networking.NetworkOperators.IESimProfileMetadata> {
        get throws {
            return try get_ProfileMetadata();
        }
    }
    public var Result : Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        get throws {
            return try get_Result();
        }
    }
} // IESimDownloadProfileMetadataResult


// type: Windows.Networking.NetworkOperators.IESimManagerStatics
// interface type
open class IESimManagerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0bfa2c0c, Data2: 0xdf88, Data3 : 0x4631, Data4 : (0xbf, 0x04, 0xc1, 0x2e, 0x28, 0x1b, 0x39, 0x62)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimServiceInfo get_ServiceInfo()
    private func _n_get_ServiceInfo(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimServiceInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServiceInfo(pThis, __presult))
        }
    }
    public func get_ServiceInfo() throws -> Optional<Windows.Networking.NetworkOperators.IESimServiceInfo> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimServiceInfo>> = nil;
        try self._n_get_ServiceInfo(&__result);
        return Windows.Networking.NetworkOperators.IESimServiceInfo(consuming: __result);
    }
    // Windows.Networking.NetworkOperators.ESimWatcher TryCreateESimWatcher()
    private func _n_TryCreateESimWatcher(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryCreateESimWatcher(pThis, __presult))
        }
    }
    public func TryCreateESimWatcher() throws -> Optional<Windows.Networking.NetworkOperators.IESimWatcher> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher>> = nil;
        try self._n_TryCreateESimWatcher(&__result);
        return Windows.Networking.NetworkOperators.IESimWatcher(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ServiceInfoChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_ServiceInfoChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ServiceInfoChanged(pThis, handler, __presult))
        }
    }
    public func add_ServiceInfoChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ServiceInfoChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ServiceInfoChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ServiceInfoChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ServiceInfoChanged(pThis, token))
        }
    }
    public func remove_ServiceInfoChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ServiceInfoChanged(token);
    }
    public var ServiceInfo : Optional<Windows.Networking.NetworkOperators.IESimServiceInfo> {
        get throws {
            return try get_ServiceInfo();
        }
    }
} // IESimManagerStatics


// type: Windows.Networking.NetworkOperators.IESimOperationResult
// interface type
open class IESimOperationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa67b63b1, Data2: 0x309b, Data3 : 0x4e77, Data4 : (0x9e, 0x7e, 0xcd, 0x93, 0xf1, 0xdd, 0xc7, 0xb9)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimOperationStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimOperationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.ESimOperationStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    public var Status : Windows.Networking.NetworkOperators.ESimOperationStatus {
        get throws {
            return try get_Status();
        }
    }
} // IESimOperationResult


// type: Windows.Networking.NetworkOperators.IESimPolicy
// interface type
open class IESimPolicy
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x41e1b99d, Data2: 0xcf7e, Data3 : 0x4315, Data4 : (0x88, 0x2b, 0x6f, 0x1e, 0x74, 0xb0, 0xd3, 0x8f)) }
    // [IsSpecialName] bool get_ShouldEnableManagingUi()
    private func _n_get_ShouldEnableManagingUi(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimPolicy.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldEnableManagingUi(pThis, __presult))
        }
    }
    public func get_ShouldEnableManagingUi() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ShouldEnableManagingUi(&__result);
        return __result;
    }
    public var ShouldEnableManagingUi : boolean {
        get throws {
            return try get_ShouldEnableManagingUi();
        }
    }
} // IESimPolicy


// type: Windows.Networking.NetworkOperators.IESimProfile
// interface type
open class IESimProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xee1e7880, Data2: 0x06a9, Data3 : 0x4027, Data4 : (0xb4, 0xf8, 0xdd, 0xb2, 0x3d, 0x78, 0x10, 0xe0)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimProfileClass get_Class()
    private func _n_get_Class(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimProfileClass>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Class(pThis, __presult))
        }
    }
    public func get_Class() throws -> Windows.Networking.NetworkOperators.ESimProfileClass {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimProfileClass = _q_CWindows_CNetworking_CNetworkOperators_CESimProfileClass_Operational;
        try self._n_get_Class(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Nickname()
    private func _n_get_Nickname(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Nickname(pThis, __presult))
        }
    }
    public func get_Nickname() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Nickname(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimProfilePolicy get_Policy()
    private func _n_get_Policy(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfilePolicy>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Policy(pThis, __presult))
        }
    }
    public func get_Policy() throws -> Optional<Windows.Networking.NetworkOperators.IESimProfilePolicy> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfilePolicy>> = nil;
        try self._n_get_Policy(&__result);
        return Windows.Networking.NetworkOperators.IESimProfilePolicy(consuming: __result);
    }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IRandomAccessStreamReference get_ProviderIcon()
    private func _n_get_ProviderIcon(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderIcon(pThis, __presult))
        }
    }
    public func get_ProviderIcon() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>> = nil;
        try self._n_get_ProviderIcon(&__result);
        return Windows.Storage.Streams.IRandomAccessStreamReference(consuming: __result);
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_ProviderName()
    private func _n_get_ProviderName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderName(pThis, __presult))
        }
    }
    public func get_ProviderName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimProfileState get_State()
    private func _n_get_State(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimProfileState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, __presult))
        }
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.ESimProfileState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimProfileState = _q_CWindows_CNetworking_CNetworkOperators_CESimProfileState_Unknown;
        try self._n_get_State(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimOperationResult> DisableAsync()
    private func _n_DisableAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DisableAsync(pThis, __presult))
        }
    }
    public func DisableAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>> = nil;
        try self._n_DisableAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult(consuming: __result);
    }
    public func Disable() async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DisableAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimOperationResult> EnableAsync()
    private func _n_EnableAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableAsync(pThis, __presult))
        }
    }
    public func EnableAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>> = nil;
        try self._n_EnableAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult(consuming: __result);
    }
    public func Enable() async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.EnableAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimOperationResult> SetNicknameAsync(System.String)
    private func _n_SetNicknameAsync(_ newNickname : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetNicknameAsync(pThis, newNickname, __presult))
        }
    }
    public func SetNicknameAsync(newNickname : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        let __hstr_newNickname = try HString(newNickname);
        return try withExtendedLifetime(__hstr_newNickname) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>> = nil;
        try self._n_SetNicknameAsync(__hstr_newNickname.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult(consuming: __result);
        }
    }
    public func SetNickname(newNickname : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetNicknameAsync(newNickname: newNickname)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Class : Windows.Networking.NetworkOperators.ESimProfileClass {
        get throws {
            return try get_Class();
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var Nickname : Swift.String {
        get throws {
            return try get_Nickname();
        }
    }
    public var Policy : Optional<Windows.Networking.NetworkOperators.IESimProfilePolicy> {
        get throws {
            return try get_Policy();
        }
    }
    public var ProviderIcon : Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        get throws {
            return try get_ProviderIcon();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var ProviderName : Swift.String {
        get throws {
            return try get_ProviderName();
        }
    }
    public var State : Windows.Networking.NetworkOperators.ESimProfileState {
        get throws {
            return try get_State();
        }
    }
} // IESimProfile


// type: Windows.Networking.NetworkOperators.IESimProfileMetadata
// interface type
open class IESimProfileMetadata
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xed25831f, Data2: 0x90db, Data3 : 0x498d, Data4 : (0xa7, 0xb4, 0xeb, 0xce, 0x80, 0x7d, 0x3c, 0x23)) }
    // [IsSpecialName] bool get_IsConfirmationCodeRequired()
    private func _n_get_IsConfirmationCodeRequired(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsConfirmationCodeRequired(pThis, __presult))
        }
    }
    public func get_IsConfirmationCodeRequired() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsConfirmationCodeRequired(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimProfilePolicy get_Policy()
    private func _n_get_Policy(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfilePolicy>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Policy(pThis, __presult))
        }
    }
    public func get_Policy() throws -> Optional<Windows.Networking.NetworkOperators.IESimProfilePolicy> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESimProfilePolicy>> = nil;
        try self._n_get_Policy(&__result);
        return Windows.Networking.NetworkOperators.IESimProfilePolicy(consuming: __result);
    }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IRandomAccessStreamReference get_ProviderIcon()
    private func _n_get_ProviderIcon(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderIcon(pThis, __presult))
        }
    }
    public func get_ProviderIcon() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>> = nil;
        try self._n_get_ProviderIcon(&__result);
        return Windows.Storage.Streams.IRandomAccessStreamReference(consuming: __result);
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_ProviderName()
    private func _n_get_ProviderName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderName(pThis, __presult))
        }
    }
    public func get_ProviderName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimProfileMetadataState get_State()
    private func _n_get_State(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, __presult))
        }
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.ESimProfileMetadataState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState = _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_Unknown;
        try self._n_get_State(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimOperationResult> DenyInstallAsync()
    private func _n_DenyInstallAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DenyInstallAsync(pThis, __presult))
        }
    }
    public func DenyInstallAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>> = nil;
        try self._n_DenyInstallAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult(consuming: __result);
    }
    public func DenyInstall() async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DenyInstallAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.NetworkOperators.ESimOperationResult,Windows.Networking.NetworkOperators.ESimProfileInstallProgress> ConfirmInstallAsync()
    private func _n_ConfirmInstallAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConfirmInstallAsync(pThis, __presult))
        }
    }
    public func ConfirmInstallAsync() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress>> = nil;
        try self._n_ConfirmInstallAsync(&__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress(consuming: __result);
    }
    public func ConfirmInstall() async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConfirmInstallAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.NetworkOperators.ESimOperationResult,Windows.Networking.NetworkOperators.ESimProfileInstallProgress> ConfirmInstallAsync(System.String)
    private func _n_ConfirmInstallWithConfirmationCodeAsync(_ confirmationCode : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConfirmInstallWithConfirmationCodeAsync(pThis, confirmationCode, __presult))
        }
    }
    public func ConfirmInstallWithConfirmationCodeAsync(confirmationCode : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress> {
        let __hstr_confirmationCode = try HString(confirmationCode);
        return try withExtendedLifetime(__hstr_confirmationCode) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress>> = nil;
        try self._n_ConfirmInstallWithConfirmationCodeAsync(__hstr_confirmationCode.Raw(), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult__q_CWindows_CNetworking_CNetworkOperators_CESimProfileInstallProgress(consuming: __result);
        }
    }
    public func ConfirmInstallWithConfirmationCode(confirmationCode : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConfirmInstallWithConfirmationCodeAsync(confirmationCode: confirmationCode)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ESimOperationResult> PostponeInstallAsync()
    private func _n_PostponeInstallAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PostponeInstallAsync(pThis, __presult))
        }
    }
    public func PostponeInstallAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult>> = nil;
        try self._n_PostponeInstallAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CESimOperationResult(consuming: __result);
    }
    public func PostponeInstall() async throws -> Optional<Windows.Networking.NetworkOperators.IESimOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.PostponeInstallAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_StateChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.ESimProfileMetadata,System.Object>)
    private func _n_add_StateChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadata_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, handler, __presult))
        }
    }
    public func add_StateChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadata_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_StateChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_StateChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_StateChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfileMetadata.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
        }
    }
    public func remove_StateChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_StateChanged(token);
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var IsConfirmationCodeRequired : boolean {
        get throws {
            return try get_IsConfirmationCodeRequired();
        }
    }
    public var Policy : Optional<Windows.Networking.NetworkOperators.IESimProfilePolicy> {
        get throws {
            return try get_Policy();
        }
    }
    public var ProviderIcon : Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        get throws {
            return try get_ProviderIcon();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var ProviderName : Swift.String {
        get throws {
            return try get_ProviderName();
        }
    }
    public var State : Windows.Networking.NetworkOperators.ESimProfileMetadataState {
        get throws {
            return try get_State();
        }
    }
} // IESimProfileMetadata


// type: Windows.Networking.NetworkOperators.IESimProfilePolicy
// interface type
open class IESimProfilePolicy
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe6dd0f1d, Data2: 0x9c5c, Data3 : 0x46c5, Data4 : (0xa2, 0x89, 0xa9, 0x48, 0x99, 0x9b, 0xf0, 0x62)) }
    // [IsSpecialName] bool get_CanDelete()
    private func _n_get_CanDelete(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfilePolicy.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDelete(pThis, __presult))
        }
    }
    public func get_CanDelete() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_CanDelete(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_CanDisable()
    private func _n_get_CanDisable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfilePolicy.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDisable(pThis, __presult))
        }
    }
    public func get_CanDisable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_CanDisable(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsManagedByEnterprise()
    private func _n_get_IsManagedByEnterprise(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimProfilePolicy.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsManagedByEnterprise(pThis, __presult))
        }
    }
    public func get_IsManagedByEnterprise() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsManagedByEnterprise(&__result);
        return __result;
    }
    public var CanDelete : boolean {
        get throws {
            return try get_CanDelete();
        }
    }
    public var CanDisable : boolean {
        get throws {
            return try get_CanDisable();
        }
    }
    public var IsManagedByEnterprise : boolean {
        get throws {
            return try get_IsManagedByEnterprise();
        }
    }
} // IESimProfilePolicy


// type: Windows.Networking.NetworkOperators.IESimRemovedEventArgs
// interface type
open class IESimRemovedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdec5277b, Data2: 0x2fd9, Data3 : 0x4ed9, Data4 : (0x83, 0x76, 0xd9, 0xb5, 0xe4, 0x12, 0x78, 0xa3)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESim get_ESim()
    private func _n_get_ESim(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESim>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimRemovedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ESim(pThis, __presult))
        }
    }
    public func get_ESim() throws -> Optional<Windows.Networking.NetworkOperators.IESim> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESim>> = nil;
        try self._n_get_ESim(&__result);
        return Windows.Networking.NetworkOperators.IESim(consuming: __result);
    }
    public var ESim : Optional<Windows.Networking.NetworkOperators.IESim> {
        get throws {
            return try get_ESim();
        }
    }
} // IESimRemovedEventArgs


// type: Windows.Networking.NetworkOperators.IESimServiceInfo
// interface type
open class IESimServiceInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf16aabcf, Data2: 0x7f59, Data3 : 0x4a51, Data4 : (0x84, 0x94, 0xbd, 0x89, 0xd5, 0xff, 0x50, 0xee)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimAuthenticationPreference get_AuthenticationPreference()
    private func _n_get_AuthenticationPreference(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimAuthenticationPreference>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimServiceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthenticationPreference(pThis, __presult))
        }
    }
    public func get_AuthenticationPreference() throws -> Windows.Networking.NetworkOperators.ESimAuthenticationPreference {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimAuthenticationPreference = _q_CWindows_CNetworking_CNetworkOperators_CESimAuthenticationPreference_OnEntry;
        try self._n_get_AuthenticationPreference(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsESimUiEnabled()
    private func _n_get_IsESimUiEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimServiceInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsESimUiEnabled(pThis, __presult))
        }
    }
    public func get_IsESimUiEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsESimUiEnabled(&__result);
        return __result;
    }
    public var AuthenticationPreference : Windows.Networking.NetworkOperators.ESimAuthenticationPreference {
        get throws {
            return try get_AuthenticationPreference();
        }
    }
    public var IsESimUiEnabled : boolean {
        get throws {
            return try get_IsESimUiEnabled();
        }
    }
} // IESimServiceInfo


// type: Windows.Networking.NetworkOperators.IESimUpdatedEventArgs
// interface type
open class IESimUpdatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4c125cec, Data2: 0x508d, Data3 : 0x4b88, Data4 : (0x83, 0xcb, 0x68, 0xbe, 0xf8, 0x16, 0x8d, 0x12)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESim get_ESim()
    private func _n_get_ESim(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESim>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimUpdatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ESim(pThis, __presult))
        }
    }
    public func get_ESim() throws -> Optional<Windows.Networking.NetworkOperators.IESim> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIESim>> = nil;
        try self._n_get_ESim(&__result);
        return Windows.Networking.NetworkOperators.IESim(consuming: __result);
    }
    public var ESim : Optional<Windows.Networking.NetworkOperators.IESim> {
        get throws {
            return try get_ESim();
        }
    }
} // IESimUpdatedEventArgs


// type: Windows.Networking.NetworkOperators.IESimWatcher
// interface type
open class IESimWatcher
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc1f84ceb, Data2: 0xa28d, Data3 : 0x4fbf, Data4 : (0x97, 0x71, 0x6e, 0x31, 0xb8, 0x1c, 0xcf, 0x22)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.ESimWatcherStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.ESimWatcherStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus = _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus_Created;
        try self._n_get_Status(&__result);
        return __result;
    }
    // void Start()
    private func _n_Start() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
        }
    }
    public func Start() throws -> Void {
        try self._n_Start();
    }
    // void Stop()
    private func _n_Stop() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
        }
    }
    public func Stop() throws -> Void {
        try self._n_Stop();
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Added(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.ESimWatcher,Windows.Networking.NetworkOperators.ESimAddedEventArgs>)
    private func _n_add_Added(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimAddedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, handler, __presult))
        }
    }
    public func add_Added(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimAddedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Added(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Added(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Added(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
        }
    }
    public func remove_Added(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Added(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EnumerationCompleted(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.ESimWatcher,System.Object>)
    private func _n_add_EnumerationCompleted(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, handler, __presult))
        }
    }
    public func add_EnumerationCompleted(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EnumerationCompleted(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_EnumerationCompleted(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
        }
    }
    public func remove_EnumerationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EnumerationCompleted(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Removed(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.ESimWatcher,Windows.Networking.NetworkOperators.ESimRemovedEventArgs>)
    private func _n_add_Removed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimRemovedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Removed(pThis, handler, __presult))
        }
    }
    public func add_Removed(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimRemovedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Removed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Removed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Removed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Removed(pThis, token))
        }
    }
    public func remove_Removed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Removed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Stopped(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.ESimWatcher,System.Object>)
    private func _n_add_Stopped(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, handler, __presult))
        }
    }
    public func add_Stopped(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Stopped(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Stopped(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Stopped(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
        }
    }
    public func remove_Stopped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Stopped(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Updated(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.ESimWatcher,Windows.Networking.NetworkOperators.ESimUpdatedEventArgs>)
    private func _n_add_Updated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimUpdatedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Updated(pThis, handler, __presult))
        }
    }
    public func add_Updated(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CESimWatcher__q_CWindows_CNetworking_CNetworkOperators_CESimUpdatedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Updated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Updated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Updated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIESimWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Updated(pThis, token))
        }
    }
    public func remove_Updated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Updated(token);
    }
    public var Status : Windows.Networking.NetworkOperators.ESimWatcherStatus {
        get throws {
            return try get_Status();
        }
    }
} // IESimWatcher


// type: Windows.Networking.NetworkOperators.IHotspotAuthenticationContext
// interface type
open class IHotspotAuthenticationContext
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe756c791, Data2: 0x1003, Data3 : 0x4de5, Data4 : (0x83, 0xc7, 0xde, 0x61, 0xd8, 0x88, 0x31, 0xd0)) }
    // [IsSpecialName] System.Byte[] get_WirelessNetworkId()
    private func _n_get_WirelessNetworkId(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<UINT8>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WirelessNetworkId(pThis, __presultLength, __presult))
        }
    }
    public func get_WirelessNetworkId() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<UINT8>> = nil;
        try self._n_get_WirelessNetworkId(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkAdapter get_NetworkAdapter()
    private func _n_get_NetworkAdapter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapter(pThis, __presult))
        }
    }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>> = nil;
        try self._n_get_NetworkAdapter(&__result);
        return Windows.Networking.Connectivity.INetworkAdapter(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_RedirectMessageUrl()
    private func _n_get_RedirectMessageUrl(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedirectMessageUrl(pThis, __presult))
        }
    }
    public func get_RedirectMessageUrl() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_RedirectMessageUrl(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlDocument get_RedirectMessageXml()
    private func _n_get_RedirectMessageXml(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedirectMessageXml(pThis, __presult))
        }
    }
    public func get_RedirectMessageXml() throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_get_RedirectMessageXml(&__result);
        return Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_AuthenticationUrl()
    private func _n_get_AuthenticationUrl(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthenticationUrl(pThis, __presult))
        }
    }
    public func get_AuthenticationUrl() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_AuthenticationUrl(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // void IssueCredentials(System.String, System.String, System.String, bool)
    private func _n_IssueCredentials(_ userName : Optional<HSTRING>, _ password : Optional<HSTRING>, _ extraParameters : Optional<HSTRING>, _ markAsManualConnectOnFailure : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IssueCredentials(pThis, userName, password, extraParameters, markAsManualConnectOnFailure))
        }
    }
    public func IssueCredentials(userName : Swift.String, password : Swift.String, extraParameters : Swift.String, markAsManualConnectOnFailure : boolean) throws -> Void {
        let __hstr_userName = try HString(userName);
        return try withExtendedLifetime(__hstr_userName) {
        let __hstr_password = try HString(password);
        return try withExtendedLifetime(__hstr_password) {
        let __hstr_extraParameters = try HString(extraParameters);
        return try withExtendedLifetime(__hstr_extraParameters) {
        try self._n_IssueCredentials(__hstr_userName.Raw(), __hstr_password.Raw(), __hstr_extraParameters.Raw(), markAsManualConnectOnFailure);
        }
        }
        }
    }
    // void AbortAuthentication(bool)
    private func _n_AbortAuthentication(_ markAsManual : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AbortAuthentication(pThis, markAsManual))
        }
    }
    public func AbortAuthentication(markAsManual : boolean) throws -> Void {
        try self._n_AbortAuthentication(markAsManual);
    }
    // void SkipAuthentication()
    private func _n_SkipAuthentication() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SkipAuthentication(pThis))
        }
    }
    public func SkipAuthentication() throws -> Void {
        try self._n_SkipAuthentication();
    }
    // void TriggerAttentionRequired(System.String, System.String)
    private func _n_TriggerAttentionRequired(_ packageRelativeApplicationId : Optional<HSTRING>, _ applicationParameters : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TriggerAttentionRequired(pThis, packageRelativeApplicationId, applicationParameters))
        }
    }
    public func TriggerAttentionRequired(packageRelativeApplicationId : Swift.String, applicationParameters : Swift.String) throws -> Void {
        let __hstr_packageRelativeApplicationId = try HString(packageRelativeApplicationId);
        return try withExtendedLifetime(__hstr_packageRelativeApplicationId) {
        let __hstr_applicationParameters = try HString(applicationParameters);
        return try withExtendedLifetime(__hstr_applicationParameters) {
        try self._n_TriggerAttentionRequired(__hstr_packageRelativeApplicationId.Raw(), __hstr_applicationParameters.Raw());
        }
        }
    }
    public var AuthenticationUrl : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_AuthenticationUrl();
        }
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        get throws {
            return try get_NetworkAdapter();
        }
    }
    public var RedirectMessageUrl : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_RedirectMessageUrl();
        }
    }
    public var RedirectMessageXml : Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        get throws {
            return try get_RedirectMessageXml();
        }
    }
    public var WirelessNetworkId : UINT32 {
        get throws {
            return try get_WirelessNetworkId();
        }
    }
} // IHotspotAuthenticationContext


// type: Windows.Networking.NetworkOperators.IHotspotAuthenticationContext2
// interface type
open class IHotspotAuthenticationContext2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe756c791, Data2: 0x1004, Data3 : 0x4de5, Data4 : (0x83, 0xc7, 0xde, 0x61, 0xd8, 0x88, 0x31, 0xd0)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult> IssueCredentialsAsync(System.String, System.String, System.String, bool)
    private func _n_IssueCredentialsAsync(_ userName : Optional<HSTRING>, _ password : Optional<HSTRING>, _ extraParameters : Optional<HSTRING>, _ markAsManualConnectOnFailure : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CHotspotCredentialsAuthenticationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IssueCredentialsAsync(pThis, userName, password, extraParameters, markAsManualConnectOnFailure, __presult))
        }
    }
    public func IssueCredentialsAsync(userName : Swift.String, password : Swift.String, extraParameters : Swift.String, markAsManualConnectOnFailure : boolean) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CHotspotCredentialsAuthenticationResult> {
        let __hstr_userName = try HString(userName);
        return try withExtendedLifetime(__hstr_userName) {
        let __hstr_password = try HString(password);
        return try withExtendedLifetime(__hstr_password) {
        let __hstr_extraParameters = try HString(extraParameters);
        return try withExtendedLifetime(__hstr_extraParameters) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CHotspotCredentialsAuthenticationResult>> = nil;
        try self._n_IssueCredentialsAsync(__hstr_userName.Raw(), __hstr_password.Raw(), __hstr_extraParameters.Raw(), markAsManualConnectOnFailure, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CHotspotCredentialsAuthenticationResult(consuming: __result);
        }
        }
        }
    }
    public func IssueCredentials(userName : Swift.String, password : Swift.String, extraParameters : Swift.String, markAsManualConnectOnFailure : boolean) async throws -> Optional<Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.IssueCredentialsAsync(userName: userName, password: password, extraParameters: extraParameters, markAsManualConnectOnFailure: markAsManualConnectOnFailure)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IHotspotAuthenticationContext2


// type: Windows.Networking.NetworkOperators.IHotspotAuthenticationContextStatics
// interface type
open class IHotspotAuthenticationContextStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe756c791, Data2: 0x1002, Data3 : 0x4de5, Data4 : (0x83, 0xc7, 0xde, 0x61, 0xd8, 0x88, 0x31, 0xd0)) }
    // bool TryGetAuthenticationContext(System.String, ref Windows.Networking.NetworkOperators.HotspotAuthenticationContext)
    private func _n_TryGetAuthenticationContext(_ evenToken : Optional<HSTRING>, _ context : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContextStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetAuthenticationContext(pThis, evenToken, context, __presult))
        }
    }
    public func TryGetAuthenticationContext(evenToken : Swift.String, context : inout Optional<Windows.Networking.NetworkOperators.IHotspotAuthenticationContext>) throws -> boolean {
        let __hstr_evenToken = try HString(evenToken);
        return try withExtendedLifetime(__hstr_evenToken) {
        var __result : boolean = 0;
            var _tmp_out_context: Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationContext>> = nil;
        try self._n_TryGetAuthenticationContext(__hstr_evenToken.Raw(), &_tmp_out_context, &__result);
            context = Windows.Networking.NetworkOperators.IHotspotAuthenticationContext(consuming: _tmp_out_context);
        return __result;
        }
    }
} // IHotspotAuthenticationContextStatics


// type: Windows.Networking.NetworkOperators.IHotspotAuthenticationEventDetails
// interface type
open class IHotspotAuthenticationEventDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe756c791, Data2: 0x1001, Data3 : 0x4de5, Data4 : (0x83, 0xc7, 0xde, 0x61, 0xd8, 0x88, 0x31, 0xd0)) }
    // [IsSpecialName] System.String get_EventToken()
    private func _n_get_EventToken(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotAuthenticationEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EventToken(pThis, __presult))
        }
    }
    public func get_EventToken() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_EventToken(&__result);
        return Swift.String(from: __result);
    }
    public var EventToken : Swift.String {
        get throws {
            return try get_EventToken();
        }
    }
} // IHotspotAuthenticationEventDetails


// type: Windows.Networking.NetworkOperators.IHotspotCredentialsAuthenticationResult
// interface type
open class IHotspotCredentialsAuthenticationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe756c791, Data2: 0x1005, Data3 : 0x4de5, Data4 : (0x83, 0xc7, 0xde, 0x61, 0xd8, 0x88, 0x31, 0xd0)) }
    // [IsSpecialName] bool get_HasNetworkErrorOccurred()
    private func _n_get_HasNetworkErrorOccurred(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotCredentialsAuthenticationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNetworkErrorOccurred(pThis, __presult))
        }
    }
    public func get_HasNetworkErrorOccurred() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNetworkErrorOccurred(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode get_ResponseCode()
    private func _n_get_ResponseCode(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotCredentialsAuthenticationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResponseCode(pThis, __presult))
        }
    }
    public func get_ResponseCode() throws -> Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode = _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_NoError;
        try self._n_get_ResponseCode(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Uri get_LogoffUrl()
    private func _n_get_LogoffUrl(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotCredentialsAuthenticationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LogoffUrl(pThis, __presult))
        }
    }
    public func get_LogoffUrl() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_LogoffUrl(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Data.Xml.Dom.XmlDocument get_AuthenticationReplyXml()
    private func _n_get_AuthenticationReplyXml(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIHotspotCredentialsAuthenticationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthenticationReplyXml(pThis, __presult))
        }
    }
    public func get_AuthenticationReplyXml() throws -> Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CXml_CDom_CIXmlDocument>> = nil;
        try self._n_get_AuthenticationReplyXml(&__result);
        return Windows.Data.Xml.Dom.IXmlDocument(consuming: __result);
    }
    public var AuthenticationReplyXml : Optional<Windows.Data.Xml.Dom.IXmlDocument> {
        get throws {
            return try get_AuthenticationReplyXml();
        }
    }
    public var HasNetworkErrorOccurred : boolean {
        get throws {
            return try get_HasNetworkErrorOccurred();
        }
    }
    public var LogoffUrl : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_LogoffUrl();
        }
    }
    public var ResponseCode : Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode {
        get throws {
            return try get_ResponseCode();
        }
    }
} // IHotspotCredentialsAuthenticationResult


// type: Windows.Networking.NetworkOperators.IKnownCSimFilePathsStatics
// interface type
open class IKnownCSimFilePathsStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb458aeed, Data2: 0x49f1, Data3 : 0x4c22, Data4 : (0xb0, 0x73, 0x96, 0xd5, 0x11, 0xbf, 0x9c, 0x35)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_EFSpn()
    private func _n_get_EFSpn(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownCSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EFSpn(pThis, __presult))
        }
    }
    public func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_EFSpn(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid1()
    private func _n_get_Gid1(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownCSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid1(pThis, __presult))
        }
    }
    public func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid1(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid2()
    private func _n_get_Gid2(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownCSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid2(pThis, __presult))
        }
    }
    public func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid2(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    public var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_EFSpn();
        }
    }
    public var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid1();
        }
    }
    public var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid2();
        }
    }
} // IKnownCSimFilePathsStatics


// type: Windows.Networking.NetworkOperators.IKnownRuimFilePathsStatics
// interface type
open class IKnownRuimFilePathsStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3883c8b9, Data2: 0xff24, Data3 : 0x4571, Data4 : (0xa8, 0x67, 0x09, 0xf9, 0x60, 0x42, 0x6e, 0x14)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_EFSpn()
    private func _n_get_EFSpn(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownRuimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EFSpn(pThis, __presult))
        }
    }
    public func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_EFSpn(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid1()
    private func _n_get_Gid1(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownRuimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid1(pThis, __presult))
        }
    }
    public func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid1(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid2()
    private func _n_get_Gid2(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownRuimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid2(pThis, __presult))
        }
    }
    public func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid2(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    public var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_EFSpn();
        }
    }
    public var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid1();
        }
    }
    public var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid2();
        }
    }
} // IKnownRuimFilePathsStatics


// type: Windows.Networking.NetworkOperators.IKnownSimFilePathsStatics
// interface type
open class IKnownSimFilePathsStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x80cd1a63, Data2: 0x37a5, Data3 : 0x43d3, Data4 : (0x80, 0xa3, 0xcc, 0xd2, 0x3e, 0x8f, 0xec, 0xee)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_EFOns()
    private func _n_get_EFOns(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EFOns(pThis, __presult))
        }
    }
    public func get_EFOns() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_EFOns(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_EFSpn()
    private func _n_get_EFSpn(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EFSpn(pThis, __presult))
        }
    }
    public func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_EFSpn(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid1()
    private func _n_get_Gid1(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid1(pThis, __presult))
        }
    }
    public func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid1(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid2()
    private func _n_get_Gid2(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid2(pThis, __presult))
        }
    }
    public func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid2(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    public var EFOns : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_EFOns();
        }
    }
    public var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_EFSpn();
        }
    }
    public var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid1();
        }
    }
    public var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid2();
        }
    }
} // IKnownSimFilePathsStatics


// type: Windows.Networking.NetworkOperators.IKnownUSimFilePathsStatics
// interface type
open class IKnownUSimFilePathsStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7c34e581, Data2: 0x1f1b, Data3 : 0x43f4, Data4 : (0x95, 0x30, 0x8b, 0x09, 0x2d, 0x32, 0xd7, 0x1f)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_EFSpn()
    private func _n_get_EFSpn(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownUSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EFSpn(pThis, __presult))
        }
    }
    public func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_EFSpn(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_EFOpl()
    private func _n_get_EFOpl(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownUSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EFOpl(pThis, __presult))
        }
    }
    public func get_EFOpl() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_EFOpl(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_EFPnn()
    private func _n_get_EFPnn(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownUSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EFPnn(pThis, __presult))
        }
    }
    public func get_EFPnn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_EFPnn(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid1()
    private func _n_get_Gid1(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownUSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid1(pThis, __presult))
        }
    }
    public func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid1(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_Gid2()
    private func _n_get_Gid2(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIKnownUSimFilePathsStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Gid2(pThis, __presult))
        }
    }
    public func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_Gid2(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    public var EFOpl : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_EFOpl();
        }
    }
    public var EFPnn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_EFPnn();
        }
    }
    public var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_EFSpn();
        }
    }
    public var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid1();
        }
    }
    public var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_Gid2();
        }
    }
} // IKnownUSimFilePathsStatics


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAccount
// interface type
open class IMobileBroadbandAccount
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x36c24ccd, Data2: 0xcee2, Data3 : 0x43e0, Data4 : (0xa6, 0x03, 0xee, 0x86, 0xa3, 0x6d, 0x65, 0x70)) }
    // [IsSpecialName] System.String get_NetworkAccountId()
    private func _n_get_NetworkAccountId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAccountId(pThis, __presult))
        }
    }
    public func get_NetworkAccountId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NetworkAccountId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.Guid get_ServiceProviderGuid()
    private func _n_get_ServiceProviderGuid(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServiceProviderGuid(pThis, __presult))
        }
    }
    public func get_ServiceProviderGuid() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_ServiceProviderGuid(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_ServiceProviderName()
    private func _n_get_ServiceProviderName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServiceProviderName(pThis, __presult))
        }
    }
    public func get_ServiceProviderName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ServiceProviderName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandNetwork get_CurrentNetwork()
    private func _n_get_CurrentNetwork(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentNetwork(pThis, __presult))
        }
    }
    public func get_CurrentNetwork() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandNetwork> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork>> = nil;
        try self._n_get_CurrentNetwork(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandNetwork(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation get_CurrentDeviceInformation()
    private func _n_get_CurrentDeviceInformation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentDeviceInformation(pThis, __presult))
        }
    }
    public func get_CurrentDeviceInformation() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation>> = nil;
        try self._n_get_CurrentDeviceInformation(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation(consuming: __result);
    }
    public var CurrentDeviceInformation : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation> {
        get throws {
            return try get_CurrentDeviceInformation();
        }
    }
    public var CurrentNetwork : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandNetwork> {
        get throws {
            return try get_CurrentNetwork();
        }
    }
    public var NetworkAccountId : Swift.String {
        get throws {
            return try get_NetworkAccountId();
        }
    }
    public var ServiceProviderGuid : GUID {
        get throws {
            return try get_ServiceProviderGuid();
        }
    }
    public var ServiceProviderName : Swift.String {
        get throws {
            return try get_ServiceProviderName();
        }
    }
} // IMobileBroadbandAccount


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAccount2
// interface type
open class IMobileBroadbandAccount2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x38f52f1c, Data2: 0x1136, Data3 : 0x4257, Data4 : (0x95, 0x9f, 0xb6, 0x58, 0xa3, 0x52, 0xb6, 0xd4)) }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.Connectivity.ConnectionProfile> GetConnectionProfiles()
    private func _n_GetConnectionProfiles(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectionProfiles(pThis, __presult))
        }
    }
    public func GetConnectionProfiles() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile>> = nil;
        try self._n_GetConnectionProfiles(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile(consuming: __result);
    }
} // IMobileBroadbandAccount2


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAccount3
// interface type
open class IMobileBroadbandAccount3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x092a1e21, Data2: 0x9379, Data3 : 0x4b9b, Data4 : (0xad, 0x31, 0xd5, 0xfe, 0xe2, 0xf7, 0x48, 0xc6)) }
    // [IsSpecialName] Windows.Foundation.Uri get_AccountExperienceUrl()
    private func _n_get_AccountExperienceUrl(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccountExperienceUrl(pThis, __presult))
        }
    }
    public func get_AccountExperienceUrl() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_AccountExperienceUrl(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    public var AccountExperienceUrl : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_AccountExperienceUrl();
        }
    }
} // IMobileBroadbandAccount3


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAccountEventArgs
// interface type
open class IMobileBroadbandAccountEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3853c880, Data2: 0x77de, Data3 : 0x4c04, Data4 : (0xbe, 0xad, 0xa1, 0x23, 0xb0, 0x8c, 0x9f, 0x59)) }
    // [IsSpecialName] System.String get_NetworkAccountId()
    private func _n_get_NetworkAccountId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAccountId(pThis, __presult))
        }
    }
    public func get_NetworkAccountId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NetworkAccountId(&__result);
        return Swift.String(from: __result);
    }
    public var NetworkAccountId : Swift.String {
        get throws {
            return try get_NetworkAccountId();
        }
    }
} // IMobileBroadbandAccountEventArgs


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAccountStatics
// interface type
open class IMobileBroadbandAccountStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaa7f4d24, Data2: 0xafc1, Data3 : 0x4fc8, Data4 : (0xae, 0x9a, 0xa9, 0x17, 0x53, 0x10, 0xfa, 0xad)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.String> get_AvailableNetworkAccountIds()
    private func _n_get_AvailableNetworkAccountIds(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AvailableNetworkAccountIds(pThis, __presult))
        }
    }
    public func get_AvailableNetworkAccountIds() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_get_AvailableNetworkAccountIds(&__result);
        return ClosedGenerics.IVectorView_1_HSTRING(consuming: __result);
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandAccount CreateFromNetworkAccountId(System.String)
    private func _n_CreateFromNetworkAccountId(_ networkAccountId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNetworkAccountId(pThis, networkAccountId, __presult))
        }
    }
    public func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandAccount> {
        let __hstr_networkAccountId = try HString(networkAccountId);
        return try withExtendedLifetime(__hstr_networkAccountId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount>> = nil;
        try self._n_CreateFromNetworkAccountId(__hstr_networkAccountId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandAccount(consuming: __result);
        }
    }
    public var AvailableNetworkAccountIds : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
            return try get_AvailableNetworkAccountIds();
        }
    }
} // IMobileBroadbandAccountStatics


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs
// interface type
open class IMobileBroadbandAccountUpdatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7bc31d88, Data2: 0xa6bd, Data3 : 0x49e1, Data4 : (0x80, 0xab, 0x6b, 0x91, 0x35, 0x4a, 0x57, 0xd4)) }
    // [IsSpecialName] System.String get_NetworkAccountId()
    private func _n_get_NetworkAccountId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountUpdatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAccountId(pThis, __presult))
        }
    }
    public func get_NetworkAccountId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NetworkAccountId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] bool get_HasDeviceInformationChanged()
    private func _n_get_HasDeviceInformationChanged(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountUpdatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasDeviceInformationChanged(pThis, __presult))
        }
    }
    public func get_HasDeviceInformationChanged() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasDeviceInformationChanged(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasNetworkChanged()
    private func _n_get_HasNetworkChanged(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountUpdatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNetworkChanged(pThis, __presult))
        }
    }
    public func get_HasNetworkChanged() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNetworkChanged(&__result);
        return __result;
    }
    public var HasDeviceInformationChanged : boolean {
        get throws {
            return try get_HasDeviceInformationChanged();
        }
    }
    public var HasNetworkChanged : boolean {
        get throws {
            return try get_HasNetworkChanged();
        }
    }
    public var NetworkAccountId : Swift.String {
        get throws {
            return try get_NetworkAccountId();
        }
    }
} // IMobileBroadbandAccountUpdatedEventArgs


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher
// interface type
open class IMobileBroadbandAccountWatcher
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6bf3335e, Data2: 0x23b5, Data3 : 0x449f, Data4 : (0x92, 0x8d, 0x5e, 0x0d, 0x3e, 0x04, 0x47, 0x1d)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_AccountAdded(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>)
    private func _n_add_AccountAdded(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccountAdded(pThis, handler, __presult))
        }
    }
    public func add_AccountAdded(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_AccountAdded(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_AccountAdded(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_AccountAdded(_ cookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccountAdded(pThis, cookie))
        }
    }
    public func remove_AccountAdded(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_AccountAdded(cookie);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_AccountUpdated(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs>)
    private func _n_add_AccountUpdated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountUpdatedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccountUpdated(pThis, handler, __presult))
        }
    }
    public func add_AccountUpdated(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountUpdatedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_AccountUpdated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_AccountUpdated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_AccountUpdated(_ cookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccountUpdated(pThis, cookie))
        }
    }
    public func remove_AccountUpdated(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_AccountUpdated(cookie);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_AccountRemoved(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>)
    private func _n_add_AccountRemoved(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccountRemoved(pThis, handler, __presult))
        }
    }
    public func add_AccountRemoved(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_AccountRemoved(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_AccountRemoved(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_AccountRemoved(_ cookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccountRemoved(pThis, cookie))
        }
    }
    public func remove_AccountRemoved(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_AccountRemoved(cookie);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EnumerationCompleted(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,System.Object>)
    private func _n_add_EnumerationCompleted(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, handler, __presult))
        }
    }
    public func add_EnumerationCompleted(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EnumerationCompleted(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_EnumerationCompleted(_ cookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, cookie))
        }
    }
    public func remove_EnumerationCompleted(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EnumerationCompleted(cookie);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Stopped(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher,System.Object>)
    private func _n_add_Stopped(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, handler, __presult))
        }
    }
    public func add_Stopped(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Stopped(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Stopped(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Stopped(_ cookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, cookie))
        }
    }
    public func remove_Stopped(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Stopped(cookie);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus_Created;
        try self._n_get_Status(&__result);
        return __result;
    }
    // void Start()
    private func _n_Start() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
        }
    }
    public func Start() throws -> Void {
        try self._n_Start();
    }
    // void Stop()
    private func _n_Stop() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccountWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
        }
    }
    public func Stop() throws -> Void {
        try self._n_Stop();
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus {
        get throws {
            return try get_Status();
        }
    }
} // IMobileBroadbandAccountWatcher


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar
// interface type
open class IMobileBroadbandAntennaSar
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb9af4b7e, Data2: 0xcbf9, Data3 : 0x4109, Data4 : (0x90, 0xbe, 0x5c, 0x06, 0xbf, 0xd5, 0x13, 0xb6)) }
    // [IsSpecialName] System.Int32 get_AntennaIndex()
    private func _n_get_AntennaIndex(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAntennaSar.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AntennaIndex(pThis, __presult))
        }
    }
    public func get_AntennaIndex() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_AntennaIndex(&__result);
        return __result;
    }
    // [IsSpecialName] System.Int32 get_SarBackoffIndex()
    private func _n_get_SarBackoffIndex(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAntennaSar.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SarBackoffIndex(pThis, __presult))
        }
    }
    public func get_SarBackoffIndex() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_SarBackoffIndex(&__result);
        return __result;
    }
    public var AntennaIndex : Swift.Int32 {
        get throws {
            return try get_AntennaIndex();
        }
    }
    public var SarBackoffIndex : Swift.Int32 {
        get throws {
            return try get_SarBackoffIndex();
        }
    }
} // IMobileBroadbandAntennaSar


// type: Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSarFactory
// interface type
// ACTIVATION INTERFACE
open class IMobileBroadbandAntennaSarFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa91e1716, Data2: 0xc04d, Data3 : 0x4a21, Data4 : (0x86, 0x98, 0x14, 0x59, 0xdc, 0x67, 0x2c, 0x6e)) }
    // Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar CreateWithIndex(System.Int32, System.Int32)
    private func _n_CreateWithIndex(_ antennaIndex : INT32, _ sarBackoffIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAntennaSar>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAntennaSarFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithIndex(pThis, antennaIndex, sarBackoffIndex, __presult))
        }
    }
    public func CreateWithIndex(antennaIndex : Swift.Int32, sarBackoffIndex : Swift.Int32) throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAntennaSar>> = nil;
        try self._n_CreateWithIndex(antennaIndex, sarBackoffIndex, &__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar(consuming: __result);
    }
} // IMobileBroadbandAntennaSarFactory


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma
// interface type
open class IMobileBroadbandCellCdma
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0601b3b4, Data2: 0x411a, Data3 : 0x4f2e, Data4 : (0x82, 0x87, 0x76, 0xf5, 0x65, 0x0c, 0x60, 0xcd)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_BaseStationId()
    private func _n_get_BaseStationId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseStationId(pThis, __presult))
        }
    }
    public func get_BaseStationId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_BaseStationId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_BaseStationPNCode()
    private func _n_get_BaseStationPNCode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseStationPNCode(pThis, __presult))
        }
    }
    public func get_BaseStationPNCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_BaseStationPNCode(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_BaseStationLatitude()
    private func _n_get_BaseStationLatitude(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseStationLatitude(pThis, __presult))
        }
    }
    public func get_BaseStationLatitude() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_BaseStationLatitude(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_BaseStationLongitude()
    private func _n_get_BaseStationLongitude(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseStationLongitude(pThis, __presult))
        }
    }
    public func get_BaseStationLongitude() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_BaseStationLongitude(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> get_BaseStationLastBroadcastGpsTime()
    private func _n_get_BaseStationLastBroadcastGpsTime(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseStationLastBroadcastGpsTime(pThis, __presult))
        }
    }
    public func get_BaseStationLastBroadcastGpsTime() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>> = nil;
        try self._n_get_BaseStationLastBroadcastGpsTime(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_NetworkId()
    private func _n_get_NetworkId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkId(pThis, __presult))
        }
    }
    public func get_NetworkId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_NetworkId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_PilotSignalStrengthInDB()
    private func _n_get_PilotSignalStrengthInDB(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PilotSignalStrengthInDB(pThis, __presult))
        }
    }
    public func get_PilotSignalStrengthInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_PilotSignalStrengthInDB(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_SystemId()
    private func _n_get_SystemId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellCdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemId(pThis, __presult))
        }
    }
    public func get_SystemId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_SystemId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    public var BaseStationId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_BaseStationId();
        }
    }
    public var BaseStationLastBroadcastGpsTime : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
            return try get_BaseStationLastBroadcastGpsTime();
        }
    }
    public var BaseStationLatitude : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_BaseStationLatitude();
        }
    }
    public var BaseStationLongitude : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_BaseStationLongitude();
        }
    }
    public var BaseStationPNCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_BaseStationPNCode();
        }
    }
    public var NetworkId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_NetworkId();
        }
    }
    public var PilotSignalStrengthInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_PilotSignalStrengthInDB();
        }
    }
    public var SystemId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_SystemId();
        }
    }
} // IMobileBroadbandCellCdma


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm
// interface type
open class IMobileBroadbandCellGsm
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcc917f06, Data2: 0x7ee0, Data3 : 0x47b8, Data4 : (0x9e, 0x1f, 0xc3, 0xb4, 0x8d, 0xf9, 0xdf, 0x5b)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_BaseStationId()
    private func _n_get_BaseStationId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellGsm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseStationId(pThis, __presult))
        }
    }
    public func get_BaseStationId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_BaseStationId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_CellId()
    private func _n_get_CellId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellGsm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CellId(pThis, __presult))
        }
    }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_CellId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_ChannelNumber()
    private func _n_get_ChannelNumber(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellGsm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChannelNumber(pThis, __presult))
        }
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_ChannelNumber(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_LocationAreaCode()
    private func _n_get_LocationAreaCode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellGsm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocationAreaCode(pThis, __presult))
        }
    }
    public func get_LocationAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_LocationAreaCode(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellGsm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_ReceivedSignalStrengthInDBm()
    private func _n_get_ReceivedSignalStrengthInDBm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellGsm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReceivedSignalStrengthInDBm(pThis, __presult))
        }
    }
    public func get_ReceivedSignalStrengthInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_ReceivedSignalStrengthInDBm(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_TimingAdvanceInBitPeriods()
    private func _n_get_TimingAdvanceInBitPeriods(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellGsm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimingAdvanceInBitPeriods(pThis, __presult))
        }
    }
    public func get_TimingAdvanceInBitPeriods() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_TimingAdvanceInBitPeriods(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    public var BaseStationId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_BaseStationId();
        }
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_CellId();
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_ChannelNumber();
        }
    }
    public var LocationAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_LocationAreaCode();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var ReceivedSignalStrengthInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_ReceivedSignalStrengthInDBm();
        }
    }
    public var TimingAdvanceInBitPeriods : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_TimingAdvanceInBitPeriods();
        }
    }
} // IMobileBroadbandCellGsm


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellLte
// interface type
open class IMobileBroadbandCellLte
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9197c87b, Data2: 0x2b78, Data3 : 0x456d, Data4 : (0x8b, 0x53, 0xaa, 0xa2, 0x5d, 0x0a, 0xf7, 0x41)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_CellId()
    private func _n_get_CellId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CellId(pThis, __presult))
        }
    }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_CellId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_ChannelNumber()
    private func _n_get_ChannelNumber(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChannelNumber(pThis, __presult))
        }
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_ChannelNumber(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_PhysicalCellId()
    private func _n_get_PhysicalCellId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhysicalCellId(pThis, __presult))
        }
    }
    public func get_PhysicalCellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_PhysicalCellId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_ReferenceSignalReceivedPowerInDBm()
    private func _n_get_ReferenceSignalReceivedPowerInDBm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReferenceSignalReceivedPowerInDBm(pThis, __presult))
        }
    }
    public func get_ReferenceSignalReceivedPowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_ReferenceSignalReceivedPowerInDBm(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_ReferenceSignalReceivedQualityInDBm()
    private func _n_get_ReferenceSignalReceivedQualityInDBm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReferenceSignalReceivedQualityInDBm(pThis, __presult))
        }
    }
    public func get_ReferenceSignalReceivedQualityInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_ReferenceSignalReceivedQualityInDBm(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_TimingAdvanceInBitPeriods()
    private func _n_get_TimingAdvanceInBitPeriods(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimingAdvanceInBitPeriods(pThis, __presult))
        }
    }
    public func get_TimingAdvanceInBitPeriods() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_TimingAdvanceInBitPeriods(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_TrackingAreaCode()
    private func _n_get_TrackingAreaCode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellLte.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrackingAreaCode(pThis, __presult))
        }
    }
    public func get_TrackingAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_TrackingAreaCode(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_CellId();
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_ChannelNumber();
        }
    }
    public var PhysicalCellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_PhysicalCellId();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var ReferenceSignalReceivedPowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_ReferenceSignalReceivedPowerInDBm();
        }
    }
    public var ReferenceSignalReceivedQualityInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_ReferenceSignalReceivedQualityInDBm();
        }
    }
    public var TimingAdvanceInBitPeriods : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_TimingAdvanceInBitPeriods();
        }
    }
    public var TrackingAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_TrackingAreaCode();
        }
    }
} // IMobileBroadbandCellLte


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellNR
// interface type
open class IMobileBroadbandCellNR
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa13f0deb, Data2: 0x66fc, Data3 : 0x4b4b, Data4 : (0x83, 0xa9, 0xa4, 0x87, 0xa3, 0xa5, 0xa0, 0xa6)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int64> get_CellId()
    private func _n_get_CellId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT64>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CellId(pThis, __presult))
        }
    }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT64>> = nil;
        try self._n_get_CellId(&__result);
        return ClosedGenerics.IReference_1_INT64(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_ChannelNumber()
    private func _n_get_ChannelNumber(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChannelNumber(pThis, __presult))
        }
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_ChannelNumber(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_PhysicalCellId()
    private func _n_get_PhysicalCellId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PhysicalCellId(pThis, __presult))
        }
    }
    public func get_PhysicalCellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_PhysicalCellId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_ReferenceSignalReceivedPowerInDBm()
    private func _n_get_ReferenceSignalReceivedPowerInDBm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReferenceSignalReceivedPowerInDBm(pThis, __presult))
        }
    }
    public func get_ReferenceSignalReceivedPowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_ReferenceSignalReceivedPowerInDBm(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_ReferenceSignalReceivedQualityInDBm()
    private func _n_get_ReferenceSignalReceivedQualityInDBm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReferenceSignalReceivedQualityInDBm(pThis, __presult))
        }
    }
    public func get_ReferenceSignalReceivedQualityInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_ReferenceSignalReceivedQualityInDBm(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_TimingAdvanceInNanoseconds()
    private func _n_get_TimingAdvanceInNanoseconds(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimingAdvanceInNanoseconds(pThis, __presult))
        }
    }
    public func get_TimingAdvanceInNanoseconds() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_TimingAdvanceInNanoseconds(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_TrackingAreaCode()
    private func _n_get_TrackingAreaCode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrackingAreaCode(pThis, __presult))
        }
    }
    public func get_TrackingAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_TrackingAreaCode(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_SignalToNoiseRatioInDB()
    private func _n_get_SignalToNoiseRatioInDB(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellNR.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SignalToNoiseRatioInDB(pThis, __presult))
        }
    }
    public func get_SignalToNoiseRatioInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_SignalToNoiseRatioInDB(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT64> {
        get throws {
            return try get_CellId();
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_ChannelNumber();
        }
    }
    public var PhysicalCellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_PhysicalCellId();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var ReferenceSignalReceivedPowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_ReferenceSignalReceivedPowerInDBm();
        }
    }
    public var ReferenceSignalReceivedQualityInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_ReferenceSignalReceivedQualityInDBm();
        }
    }
    public var SignalToNoiseRatioInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_SignalToNoiseRatioInDB();
        }
    }
    public var TimingAdvanceInNanoseconds : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_TimingAdvanceInNanoseconds();
        }
    }
    public var TrackingAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_TrackingAreaCode();
        }
    }
} // IMobileBroadbandCellNR


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma
// interface type
open class IMobileBroadbandCellTdscdma
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0eda1655, Data2: 0xdb0e, Data3 : 0x4182, Data4 : (0x8c, 0xda, 0xcc, 0x41, 0x9a, 0x7b, 0xde, 0x08)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_CellId()
    private func _n_get_CellId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CellId(pThis, __presult))
        }
    }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_CellId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_CellParameterId()
    private func _n_get_CellParameterId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CellParameterId(pThis, __presult))
        }
    }
    public func get_CellParameterId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_CellParameterId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_ChannelNumber()
    private func _n_get_ChannelNumber(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChannelNumber(pThis, __presult))
        }
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_ChannelNumber(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_LocationAreaCode()
    private func _n_get_LocationAreaCode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocationAreaCode(pThis, __presult))
        }
    }
    public func get_LocationAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_LocationAreaCode(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_PathLossInDB()
    private func _n_get_PathLossInDB(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PathLossInDB(pThis, __presult))
        }
    }
    public func get_PathLossInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_PathLossInDB(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_ReceivedSignalCodePowerInDBm()
    private func _n_get_ReceivedSignalCodePowerInDBm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReceivedSignalCodePowerInDBm(pThis, __presult))
        }
    }
    public func get_ReceivedSignalCodePowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_ReceivedSignalCodePowerInDBm(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_TimingAdvanceInBitPeriods()
    private func _n_get_TimingAdvanceInBitPeriods(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellTdscdma.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimingAdvanceInBitPeriods(pThis, __presult))
        }
    }
    public func get_TimingAdvanceInBitPeriods() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_TimingAdvanceInBitPeriods(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_CellId();
        }
    }
    public var CellParameterId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_CellParameterId();
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_ChannelNumber();
        }
    }
    public var LocationAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_LocationAreaCode();
        }
    }
    public var PathLossInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_PathLossInDB();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var ReceivedSignalCodePowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_ReceivedSignalCodePowerInDBm();
        }
    }
    public var TimingAdvanceInBitPeriods : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_TimingAdvanceInBitPeriods();
        }
    }
} // IMobileBroadbandCellTdscdma


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts
// interface type
open class IMobileBroadbandCellUmts
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x77b4b5ae, Data2: 0x49c8, Data3 : 0x4f15, Data4 : (0xb2, 0x85, 0x4c, 0x26, 0xa7, 0xf6, 0x72, 0x15)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_CellId()
    private func _n_get_CellId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CellId(pThis, __presult))
        }
    }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_CellId(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_ChannelNumber()
    private func _n_get_ChannelNumber(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChannelNumber(pThis, __presult))
        }
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_ChannelNumber(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_LocationAreaCode()
    private func _n_get_LocationAreaCode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocationAreaCode(pThis, __presult))
        }
    }
    public func get_LocationAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_LocationAreaCode(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_PathLossInDB()
    private func _n_get_PathLossInDB(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PathLossInDB(pThis, __presult))
        }
    }
    public func get_PathLossInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_PathLossInDB(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Int32> get_PrimaryScramblingCode()
    private func _n_get_PrimaryScramblingCode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryScramblingCode(pThis, __presult))
        }
    }
    public func get_PrimaryScramblingCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_INT32>> = nil;
        try self._n_get_PrimaryScramblingCode(&__result);
        return ClosedGenerics.IReference_1_INT32(consuming: __result);
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_ReceivedSignalCodePowerInDBm()
    private func _n_get_ReceivedSignalCodePowerInDBm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReceivedSignalCodePowerInDBm(pThis, __presult))
        }
    }
    public func get_ReceivedSignalCodePowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_ReceivedSignalCodePowerInDBm(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_SignalToNoiseRatioInDB()
    private func _n_get_SignalToNoiseRatioInDB(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellUmts.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SignalToNoiseRatioInDB(pThis, __presult))
        }
    }
    public func get_SignalToNoiseRatioInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_SignalToNoiseRatioInDB(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_CellId();
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_ChannelNumber();
        }
    }
    public var LocationAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_LocationAreaCode();
        }
    }
    public var PathLossInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_PathLossInDB();
        }
    }
    public var PrimaryScramblingCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
            return try get_PrimaryScramblingCode();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var ReceivedSignalCodePowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_ReceivedSignalCodePowerInDBm();
        }
    }
    public var SignalToNoiseRatioInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_SignalToNoiseRatioInDB();
        }
    }
} // IMobileBroadbandCellUmts


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo
// interface type
open class IMobileBroadbandCellsInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x89a9562a, Data2: 0xe472, Data3 : 0x4da5, Data4 : (0x92, 0x9c, 0xde, 0x61, 0x71, 0x1d, 0xd2, 0x61)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellCdma> get_NeighboringCellsCdma()
    private func _n_get_NeighboringCellsCdma(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NeighboringCellsCdma(pThis, __presult))
        }
    }
    public func get_NeighboringCellsCdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma>> = nil;
        try self._n_get_NeighboringCellsCdma(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellGsm> get_NeighboringCellsGsm()
    private func _n_get_NeighboringCellsGsm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NeighboringCellsGsm(pThis, __presult))
        }
    }
    public func get_NeighboringCellsGsm() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm>> = nil;
        try self._n_get_NeighboringCellsGsm(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellLte> get_NeighboringCellsLte()
    private func _n_get_NeighboringCellsLte(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NeighboringCellsLte(pThis, __presult))
        }
    }
    public func get_NeighboringCellsLte() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte>> = nil;
        try self._n_get_NeighboringCellsLte(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma> get_NeighboringCellsTdscdma()
    private func _n_get_NeighboringCellsTdscdma(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NeighboringCellsTdscdma(pThis, __presult))
        }
    }
    public func get_NeighboringCellsTdscdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma>> = nil;
        try self._n_get_NeighboringCellsTdscdma(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellUmts> get_NeighboringCellsUmts()
    private func _n_get_NeighboringCellsUmts(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NeighboringCellsUmts(pThis, __presult))
        }
    }
    public func get_NeighboringCellsUmts() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts>> = nil;
        try self._n_get_NeighboringCellsUmts(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellCdma> get_ServingCellsCdma()
    private func _n_get_ServingCellsCdma(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServingCellsCdma(pThis, __presult))
        }
    }
    public func get_ServingCellsCdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma>> = nil;
        try self._n_get_ServingCellsCdma(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellGsm> get_ServingCellsGsm()
    private func _n_get_ServingCellsGsm(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServingCellsGsm(pThis, __presult))
        }
    }
    public func get_ServingCellsGsm() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm>> = nil;
        try self._n_get_ServingCellsGsm(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellLte> get_ServingCellsLte()
    private func _n_get_ServingCellsLte(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServingCellsLte(pThis, __presult))
        }
    }
    public func get_ServingCellsLte() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte>> = nil;
        try self._n_get_ServingCellsLte(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma> get_ServingCellsTdscdma()
    private func _n_get_ServingCellsTdscdma(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServingCellsTdscdma(pThis, __presult))
        }
    }
    public func get_ServingCellsTdscdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma>> = nil;
        try self._n_get_ServingCellsTdscdma(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellUmts> get_ServingCellsUmts()
    private func _n_get_ServingCellsUmts(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServingCellsUmts(pThis, __presult))
        }
    }
    public func get_ServingCellsUmts() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts>> = nil;
        try self._n_get_ServingCellsUmts(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts(consuming: __result);
    }
    public var NeighboringCellsCdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        get throws {
            return try get_NeighboringCellsCdma();
        }
    }
    public var NeighboringCellsGsm : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        get throws {
            return try get_NeighboringCellsGsm();
        }
    }
    public var NeighboringCellsLte : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        get throws {
            return try get_NeighboringCellsLte();
        }
    }
    public var NeighboringCellsTdscdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        get throws {
            return try get_NeighboringCellsTdscdma();
        }
    }
    public var NeighboringCellsUmts : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        get throws {
            return try get_NeighboringCellsUmts();
        }
    }
    public var ServingCellsCdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        get throws {
            return try get_ServingCellsCdma();
        }
    }
    public var ServingCellsGsm : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        get throws {
            return try get_ServingCellsGsm();
        }
    }
    public var ServingCellsLte : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        get throws {
            return try get_ServingCellsLte();
        }
    }
    public var ServingCellsTdscdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        get throws {
            return try get_ServingCellsTdscdma();
        }
    }
    public var ServingCellsUmts : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        get throws {
            return try get_ServingCellsUmts();
        }
    }
} // IMobileBroadbandCellsInfo


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo2
// interface type
open class IMobileBroadbandCellsInfo2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x66205912, Data2: 0xb89f, Data3 : 0x4e12, Data4 : (0xbb, 0xb6, 0xd5, 0xcf, 0x09, 0xa8, 0x20, 0xca)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellNR> get_NeighboringCellsNR()
    private func _n_get_NeighboringCellsNR(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NeighboringCellsNR(pThis, __presult))
        }
    }
    public func get_NeighboringCellsNR() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR>> = nil;
        try self._n_get_NeighboringCellsNR(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandCellNR> get_ServingCellsNR()
    private func _n_get_ServingCellsNR(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCellsInfo2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServingCellsNR(pThis, __presult))
        }
    }
    public func get_ServingCellsNR() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR>> = nil;
        try self._n_get_ServingCellsNR(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR(consuming: __result);
    }
    public var NeighboringCellsNR : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        get throws {
            return try get_NeighboringCellsNR();
        }
    }
    public var ServingCellsNR : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        get throws {
            return try get_ServingCellsNR();
        }
    }
} // IMobileBroadbandCellsInfo2


// type: Windows.Networking.NetworkOperators.IMobileBroadbandCurrentSlotIndexChangedEventArgs
// interface type
open class IMobileBroadbandCurrentSlotIndexChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf718b184, Data2: 0xc370, Data3 : 0x5fd4, Data4 : (0xa6, 0x70, 0x18, 0x46, 0xcb, 0x9b, 0xce, 0x47)) }
    // [IsSpecialName] System.Int32 get_CurrentSlotIndex()
    private func _n_get_CurrentSlotIndex(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandCurrentSlotIndexChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentSlotIndex(pThis, __presult))
        }
    }
    public func get_CurrentSlotIndex() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_CurrentSlotIndex(&__result);
        return __result;
    }
    public var CurrentSlotIndex : Swift.Int32 {
        get throws {
            return try get_CurrentSlotIndex();
        }
    }
} // IMobileBroadbandCurrentSlotIndexChangedEventArgs


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation
// interface type
open class IMobileBroadbandDeviceInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe6d08168, Data2: 0xe381, Data3 : 0x4c6e, Data4 : (0x9b, 0xe8, 0xfe, 0x15, 0x69, 0x69, 0xa4, 0x46)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.NetworkDeviceStatus get_NetworkDeviceStatus()
    private func _n_get_NetworkDeviceStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkDeviceStatus(pThis, __presult))
        }
    }
    public func get_NetworkDeviceStatus() throws -> Windows.Networking.NetworkOperators.NetworkDeviceStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus = _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_DeviceNotReady;
        try self._n_get_NetworkDeviceStatus(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Manufacturer()
    private func _n_get_Manufacturer(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Manufacturer(pThis, __presult))
        }
    }
    public func get_Manufacturer() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Manufacturer(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Model()
    private func _n_get_Model(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Model(pThis, __presult))
        }
    }
    public func get_Model() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Model(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_FirmwareInformation()
    private func _n_get_FirmwareInformation(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirmwareInformation(pThis, __presult))
        }
    }
    public func get_FirmwareInformation() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FirmwareInformation(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Devices.Sms.CellularClass get_CellularClass()
    private func _n_get_CellularClass(_ __presult: UnsafeMutablePointer<_q_CWindows_CDevices_CSms_CCellularClass>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CellularClass(pThis, __presult))
        }
    }
    public func get_CellularClass() throws -> Windows.Devices.Sms.CellularClass {
        var __result : _q_CWindows_CDevices_CSms_CCellularClass = _q_CWindows_CDevices_CSms_CCellularClass_None;
        try self._n_get_CellularClass(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.DataClasses get_DataClasses()
    private func _n_get_DataClasses(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CDataClasses>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataClasses(pThis, __presult))
        }
    }
    public func get_DataClasses() throws -> Windows.Networking.NetworkOperators.DataClasses {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CDataClasses = _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_None;
        try self._n_get_DataClasses(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_CustomDataClass()
    private func _n_get_CustomDataClass(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomDataClass(pThis, __presult))
        }
    }
    public func get_CustomDataClass() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CustomDataClass(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_MobileEquipmentId()
    private func _n_get_MobileEquipmentId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MobileEquipmentId(pThis, __presult))
        }
    }
    public func get_MobileEquipmentId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MobileEquipmentId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.String> get_TelephoneNumbers()
    private func _n_get_TelephoneNumbers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TelephoneNumbers(pThis, __presult))
        }
    }
    public func get_TelephoneNumbers() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_get_TelephoneNumbers(&__result);
        return ClosedGenerics.IVectorView_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] System.String get_SubscriberId()
    private func _n_get_SubscriberId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriberId(pThis, __presult))
        }
    }
    public func get_SubscriberId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SubscriberId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_SimIccId()
    private func _n_get_SimIccId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SimIccId(pThis, __presult))
        }
    }
    public func get_SimIccId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SimIccId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandDeviceType get_DeviceType()
    private func _n_get_DeviceType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceType(pThis, __presult))
        }
    }
    public func get_DeviceType() throws -> Windows.Networking.NetworkOperators.MobileBroadbandDeviceType {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType_Unknown;
        try self._n_get_DeviceType(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandRadioState get_CurrentRadioState()
    private func _n_get_CurrentRadioState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentRadioState(pThis, __presult))
        }
    }
    public func get_CurrentRadioState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState_Off;
        try self._n_get_CurrentRadioState(&__result);
        return __result;
    }
    public var CellularClass : Windows.Devices.Sms.CellularClass {
        get throws {
            return try get_CellularClass();
        }
    }
    public var CurrentRadioState : Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        get throws {
            return try get_CurrentRadioState();
        }
    }
    public var CustomDataClass : Swift.String {
        get throws {
            return try get_CustomDataClass();
        }
    }
    public var DataClasses : Windows.Networking.NetworkOperators.DataClasses {
        get throws {
            return try get_DataClasses();
        }
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var DeviceType : Windows.Networking.NetworkOperators.MobileBroadbandDeviceType {
        get throws {
            return try get_DeviceType();
        }
    }
    public var FirmwareInformation : Swift.String {
        get throws {
            return try get_FirmwareInformation();
        }
    }
    public var Manufacturer : Swift.String {
        get throws {
            return try get_Manufacturer();
        }
    }
    public var MobileEquipmentId : Swift.String {
        get throws {
            return try get_MobileEquipmentId();
        }
    }
    public var Model : Swift.String {
        get throws {
            return try get_Model();
        }
    }
    public var NetworkDeviceStatus : Windows.Networking.NetworkOperators.NetworkDeviceStatus {
        get throws {
            return try get_NetworkDeviceStatus();
        }
    }
    public var SimIccId : Swift.String {
        get throws {
            return try get_SimIccId();
        }
    }
    public var SubscriberId : Swift.String {
        get throws {
            return try get_SubscriberId();
        }
    }
    public var TelephoneNumbers : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
            return try get_TelephoneNumbers();
        }
    }
} // IMobileBroadbandDeviceInformation


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2
// interface type
open class IMobileBroadbandDeviceInformation2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2e467af1, Data2: 0xf932, Data3 : 0x4737, Data4 : (0xa7, 0x22, 0x03, 0xba, 0x72, 0x37, 0x0c, 0xb8)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandPinManager get_PinManager()
    private func _n_get_PinManager(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinManager>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PinManager(pThis, __presult))
        }
    }
    public func get_PinManager() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPinManager> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinManager>> = nil;
        try self._n_get_PinManager(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandPinManager(consuming: __result);
    }
    // [IsSpecialName] System.String get_Revision()
    private func _n_get_Revision(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Revision(pThis, __presult))
        }
    }
    public func get_Revision() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Revision(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_SerialNumber()
    private func _n_get_SerialNumber(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SerialNumber(pThis, __presult))
        }
    }
    public func get_SerialNumber() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SerialNumber(&__result);
        return Swift.String(from: __result);
    }
    public var PinManager : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPinManager> {
        get throws {
            return try get_PinManager();
        }
    }
    public var Revision : Swift.String {
        get throws {
            return try get_Revision();
        }
    }
    public var SerialNumber : Swift.String {
        get throws {
            return try get_SerialNumber();
        }
    }
} // IMobileBroadbandDeviceInformation2


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3
// interface type
open class IMobileBroadbandDeviceInformation3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe08bb4bd, Data2: 0x5d30, Data3 : 0x4b5a, Data4 : (0x92, 0xcc, 0xd5, 0x4d, 0xf8, 0x81, 0xd4, 0x9e)) }
    // [IsSpecialName] System.String get_SimSpn()
    private func _n_get_SimSpn(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SimSpn(pThis, __presult))
        }
    }
    public func get_SimSpn() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SimSpn(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_SimPnn()
    private func _n_get_SimPnn(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SimPnn(pThis, __presult))
        }
    }
    public func get_SimPnn() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SimPnn(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_SimGid1()
    private func _n_get_SimGid1(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SimGid1(pThis, __presult))
        }
    }
    public func get_SimGid1() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SimGid1(&__result);
        return Swift.String(from: __result);
    }
    public var SimGid1 : Swift.String {
        get throws {
            return try get_SimGid1();
        }
    }
    public var SimPnn : Swift.String {
        get throws {
            return try get_SimPnn();
        }
    }
    public var SimSpn : Swift.String {
        get throws {
            return try get_SimSpn();
        }
    }
} // IMobileBroadbandDeviceInformation3


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation4
// interface type
open class IMobileBroadbandDeviceInformation4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x263f3152, Data2: 0x7b9d, Data3 : 0x582c, Data4 : (0xb1, 0x7c, 0xf8, 0x0a, 0x60, 0xb5, 0x00, 0x31)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandSlotManager get_SlotManager()
    private func _n_get_SlotManager(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SlotManager(pThis, __presult))
        }
    }
    public func get_SlotManager() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager>> = nil;
        try self._n_get_SlotManager(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager(consuming: __result);
    }
    public var SlotManager : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager> {
        get throws {
            return try get_SlotManager();
        }
    }
} // IMobileBroadbandDeviceInformation4


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService
// interface type
open class IMobileBroadbandDeviceService
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x22be1a52, Data2: 0xbd80, Data3 : 0x40ac, Data4 : (0x8e, 0x1f, 0x2e, 0x07, 0x83, 0x6a, 0x3d, 0xbd)) }
    // [IsSpecialName] System.Guid get_DeviceServiceId()
    private func _n_get_DeviceServiceId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceService.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceServiceId(pThis, __presult))
        }
    }
    public func get_DeviceServiceId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_DeviceServiceId(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.UInt32> get_SupportedCommands()
    private func _n_get_SupportedCommands(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceService.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedCommands(pThis, __presult))
        }
    }
    public func get_SupportedCommands() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT32>> = nil;
        try self._n_get_SupportedCommands(&__result);
        return ClosedGenerics.IVectorView_1_UINT32(consuming: __result);
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession OpenDataSession()
    private func _n_OpenDataSession(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceDataSession>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceService.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OpenDataSession(pThis, __presult))
        }
    }
    public func OpenDataSession() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceDataSession>> = nil;
        try self._n_OpenDataSession(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession(consuming: __result);
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession OpenCommandSession()
    private func _n_OpenCommandSession(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceCommandSession>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceService.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OpenCommandSession(pThis, __presult))
        }
    }
    public func OpenCommandSession() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceCommandSession>> = nil;
        try self._n_OpenCommandSession(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession(consuming: __result);
    }
    public var DeviceServiceId : GUID {
        get throws {
            return try get_DeviceServiceId();
        }
    }
    public var SupportedCommands : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
            return try get_SupportedCommands();
        }
    }
} // IMobileBroadbandDeviceService


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult
// interface type
open class IMobileBroadbandDeviceServiceCommandResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb0f46abb, Data2: 0x94d6, Data3 : 0x44b9, Data4 : (0xa5, 0x38, 0xf0, 0x81, 0x0b, 0x64, 0x53, 0x89)) }
    // [IsSpecialName] System.UInt32 get_StatusCode()
    private func _n_get_StatusCode(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceCommandResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StatusCode(pThis, __presult))
        }
    }
    public func get_StatusCode() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_StatusCode(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_ResponseData()
    private func _n_get_ResponseData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceCommandResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResponseData(pThis, __presult))
        }
    }
    public func get_ResponseData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_ResponseData(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var ResponseData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_ResponseData();
        }
    }
    public var StatusCode : Swift.UInt32 {
        get throws {
            return try get_StatusCode();
        }
    }
} // IMobileBroadbandDeviceServiceCommandResult


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession
// interface type
open class IMobileBroadbandDeviceServiceCommandSession
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfc098a45, Data2: 0x913b, Data3 : 0x4914, Data4 : (0xb6, 0xc3, 0xae, 0x63, 0x04, 0x59, 0x3e, 0x75)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult> SendQueryCommandAsync(System.UInt32, Windows.Storage.Streams.IBuffer)
    private func _n_SendQueryCommandAsync(_ commandId : UINT32, _ data : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceCommandSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SendQueryCommandAsync(pThis, commandId, data, __presult))
        }
    }
    public func SendQueryCommandAsync(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult>> = nil;
        try self._n_SendQueryCommandAsync(commandId, RawPointer(data), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult(consuming: __result);
    }
    public func SendQueryCommand(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SendQueryCommandAsync(commandId: commandId, data: data)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult> SendSetCommandAsync(System.UInt32, Windows.Storage.Streams.IBuffer)
    private func _n_SendSetCommandAsync(_ commandId : UINT32, _ data : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceCommandSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SendSetCommandAsync(pThis, commandId, data, __presult))
        }
    }
    public func SendSetCommandAsync(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult>> = nil;
        try self._n_SendSetCommandAsync(commandId, RawPointer(data), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult(consuming: __result);
    }
    public func SendSetCommand(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SendSetCommandAsync(commandId: commandId, data: data)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void CloseSession()
    private func _n_CloseSession() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceCommandSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CloseSession(pThis))
        }
    }
    public func CloseSession() throws -> Void {
        try self._n_CloseSession();
    }
} // IMobileBroadbandDeviceServiceCommandSession


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataReceivedEventArgs
// interface type
open class IMobileBroadbandDeviceServiceDataReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6aa13de, Data2: 0x1380, Data3 : 0x40e3, Data4 : (0x86, 0x18, 0x73, 0xcb, 0xca, 0x48, 0x13, 0x8c)) }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_ReceivedData()
    private func _n_get_ReceivedData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceDataReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReceivedData(pThis, __presult))
        }
    }
    public func get_ReceivedData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_ReceivedData(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var ReceivedData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_ReceivedData();
        }
    }
} // IMobileBroadbandDeviceServiceDataReceivedEventArgs


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession
// interface type
open class IMobileBroadbandDeviceServiceDataSession
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdad62333, Data2: 0x8bcf, Data3 : 0x4289, Data4 : (0x8a, 0x37, 0x04, 0x5c, 0x21, 0x69, 0x48, 0x6a)) }
    // Windows.Foundation.IAsyncAction WriteDataAsync(Windows.Storage.Streams.IBuffer)
    private func _n_WriteDataAsync(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceDataSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.WriteDataAsync(pThis, value, __presult))
        }
    }
    public func WriteDataAsync(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_WriteDataAsync(RawPointer(value), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func WriteData(value : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.WriteDataAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void CloseSession()
    private func _n_CloseSession() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceDataSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CloseSession(pThis))
        }
    }
    public func CloseSession() throws -> Void {
        try self._n_CloseSession();
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DataReceived(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession,Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs>)
    private func _n_add_DataReceived(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceDataSession__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceDataReceivedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceDataSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DataReceived(pThis, eventHandler, __presult))
        }
    }
    public func add_DataReceived(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceDataSession__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceDataReceivedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DataReceived(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DataReceived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DataReceived(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceDataSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DataReceived(pThis, eventCookie))
        }
    }
    public func remove_DataReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DataReceived(eventCookie);
    }
} // IMobileBroadbandDeviceServiceDataSession


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation
// interface type
open class IMobileBroadbandDeviceServiceInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x53d69b5b, Data2: 0xc4ed, Data3 : 0x45f0, Data4 : (0x80, 0x3a, 0xd9, 0x41, 0x7a, 0x6d, 0x98, 0x46)) }
    // [IsSpecialName] System.Guid get_DeviceServiceId()
    private func _n_get_DeviceServiceId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceServiceId(pThis, __presult))
        }
    }
    public func get_DeviceServiceId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_DeviceServiceId(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsDataReadSupported()
    private func _n_get_IsDataReadSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDataReadSupported(pThis, __presult))
        }
    }
    public func get_IsDataReadSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsDataReadSupported(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsDataWriteSupported()
    private func _n_get_IsDataWriteSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDataWriteSupported(pThis, __presult))
        }
    }
    public func get_IsDataWriteSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsDataWriteSupported(&__result);
        return __result;
    }
    public var DeviceServiceId : GUID {
        get throws {
            return try get_DeviceServiceId();
        }
    }
    public var IsDataReadSupported : boolean {
        get throws {
            return try get_IsDataReadSupported();
        }
    }
    public var IsDataWriteSupported : boolean {
        get throws {
            return try get_IsDataWriteSupported();
        }
    }
} // IMobileBroadbandDeviceServiceInformation


// type: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails
// interface type
open class IMobileBroadbandDeviceServiceTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4a055b70, Data2: 0xb9ae, Data3 : 0x4458, Data4 : (0x92, 0x41, 0xa6, 0xa5, 0xfb, 0xf1, 0x8a, 0x0c)) }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.Guid get_DeviceServiceId()
    private func _n_get_DeviceServiceId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceServiceId(pThis, __presult))
        }
    }
    public func get_DeviceServiceId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_DeviceServiceId(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_ReceivedData()
    private func _n_get_ReceivedData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceServiceTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReceivedData(pThis, __presult))
        }
    }
    public func get_ReceivedData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_ReceivedData(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var DeviceServiceId : GUID {
        get throws {
            return try get_DeviceServiceId();
        }
    }
    public var ReceivedData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_ReceivedData();
        }
    }
} // IMobileBroadbandDeviceServiceTriggerDetails


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModem
// interface type
open class IMobileBroadbandModem
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd0356912, Data2: 0xe9f9, Data3 : 0x4f67, Data4 : (0xa0, 0x3d, 0x43, 0x18, 0x9a, 0x31, 0x6b, 0xf1)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandAccount get_CurrentAccount()
    private func _n_get_CurrentAccount(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentAccount(pThis, __presult))
        }
    }
    public func get_CurrentAccount() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandAccount> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandAccount>> = nil;
        try self._n_get_CurrentAccount(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandAccount(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation get_DeviceInformation()
    private func _n_get_DeviceInformation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceInformation(pThis, __presult))
        }
    }
    public func get_DeviceInformation() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceInformation>> = nil;
        try self._n_get_DeviceInformation(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_MaxDeviceServiceCommandSizeInBytes()
    private func _n_get_MaxDeviceServiceCommandSizeInBytes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxDeviceServiceCommandSizeInBytes(pThis, __presult))
        }
    }
    public func get_MaxDeviceServiceCommandSizeInBytes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxDeviceServiceCommandSizeInBytes(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_MaxDeviceServiceDataSizeInBytes()
    private func _n_get_MaxDeviceServiceDataSizeInBytes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxDeviceServiceDataSizeInBytes(pThis, __presult))
        }
    }
    public func get_MaxDeviceServiceDataSizeInBytes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxDeviceServiceDataSizeInBytes(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceInformation> get_DeviceServices()
    private func _n_get_DeviceServices(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceServices(pThis, __presult))
        }
    }
    public func get_DeviceServices() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceInformation>> = nil;
        try self._n_get_DeviceServices(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceInformation(consuming: __result);
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandDeviceService GetDeviceService(System.Guid)
    private func _n_GetDeviceService(_ deviceServiceId : GUID, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceService>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeviceService(pThis, deviceServiceId, __presult))
        }
    }
    public func GetDeviceService(deviceServiceId : GUID) throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandDeviceService>> = nil;
        try self._n_GetDeviceService(deviceServiceId, &__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService(consuming: __result);
    }
    // [IsSpecialName] bool get_IsResetSupported()
    private func _n_get_IsResetSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsResetSupported(pThis, __presult))
        }
    }
    public func get_IsResetSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsResetSupported(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncAction ResetAsync()
    private func _n_ResetAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ResetAsync(pThis, __presult))
        }
    }
    public func ResetAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ResetAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Reset() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ResetAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration> GetCurrentConfigurationAsync()
    private func _n_GetCurrentConfigurationAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemConfiguration>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentConfigurationAsync(pThis, __presult))
        }
    }
    public func GetCurrentConfigurationAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemConfiguration> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemConfiguration>> = nil;
        try self._n_GetCurrentConfigurationAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemConfiguration(consuming: __result);
    }
    public func GetCurrentConfiguration() async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCurrentConfigurationAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandNetwork get_CurrentNetwork()
    private func _n_get_CurrentNetwork(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentNetwork(pThis, __presult))
        }
    }
    public func get_CurrentNetwork() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandNetwork> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork>> = nil;
        try self._n_get_CurrentNetwork(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandNetwork(consuming: __result);
    }
    public var CurrentAccount : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandAccount> {
        get throws {
            return try get_CurrentAccount();
        }
    }
    public var CurrentNetwork : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandNetwork> {
        get throws {
            return try get_CurrentNetwork();
        }
    }
    public var DeviceInformation : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation> {
        get throws {
            return try get_DeviceInformation();
        }
    }
    public var DeviceServices : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceInformation> {
        get throws {
            return try get_DeviceServices();
        }
    }
    public var IsResetSupported : boolean {
        get throws {
            return try get_IsResetSupported();
        }
    }
    public var MaxDeviceServiceCommandSizeInBytes : Swift.UInt32 {
        get throws {
            return try get_MaxDeviceServiceCommandSizeInBytes();
        }
    }
    public var MaxDeviceServiceDataSizeInBytes : Swift.UInt32 {
        get throws {
            return try get_MaxDeviceServiceDataSizeInBytes();
        }
    }
} // IMobileBroadbandModem


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModem2
// interface type
open class IMobileBroadbandModem2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x12862b28, Data2: 0xb9eb, Data3 : 0x4ee2, Data4 : (0xbb, 0xe3, 0x71, 0x1f, 0x53, 0xee, 0xa3, 0x73)) }
    // Windows.Foundation.IAsyncOperation<bool> GetIsPassthroughEnabledAsync()
    private func _n_GetIsPassthroughEnabledAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsPassthroughEnabledAsync(pThis, __presult))
        }
    }
    public func GetIsPassthroughEnabledAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>> = nil;
        try self._n_GetIsPassthroughEnabledAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1_boolean(consuming: __result);
    }
    public func GetIsPassthroughEnabled() async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetIsPassthroughEnabledAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandModemStatus> SetIsPassthroughEnabledAsync(bool)
    private func _n_SetIsPassthroughEnabledAsync(_ value : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsPassthroughEnabledAsync(pThis, value, __presult))
        }
    }
    public func SetIsPassthroughEnabledAsync(value : boolean) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus>> = nil;
        try self._n_SetIsPassthroughEnabledAsync(value, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus(consuming: __result);
    }
    public func SetIsPassthroughEnabled(value : boolean) async throws -> Windows.Networking.NetworkOperators.MobileBroadbandModemStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetIsPassthroughEnabledAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IMobileBroadbandModem2


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModem3
// interface type
open class IMobileBroadbandModem3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe9fec6ea, Data2: 0x2f34, Data3 : 0x4582, Data4 : (0x91, 0x02, 0xc3, 0x14, 0xd2, 0xa8, 0x7e, 0xec)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandPco> TryGetPcoAsync()
    private func _n_TryGetPcoAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPco>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryGetPcoAsync(pThis, __presult))
        }
    }
    public func TryGetPcoAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPco> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPco>> = nil;
        try self._n_TryGetPcoAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPco(consuming: __result);
    }
    public func TryGetPco() async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPco> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.TryGetPcoAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] bool get_IsInEmergencyCallMode()
    private func _n_get_IsInEmergencyCallMode(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsInEmergencyCallMode(pThis, __presult))
        }
    }
    public func get_IsInEmergencyCallMode() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsInEmergencyCallMode(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_IsInEmergencyCallModeChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandModem,System.Object>)
    private func _n_add_IsInEmergencyCallModeChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModem_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsInEmergencyCallModeChanged(pThis, handler, __presult))
        }
    }
    public func add_IsInEmergencyCallModeChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModem_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_IsInEmergencyCallModeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_IsInEmergencyCallModeChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_IsInEmergencyCallModeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsInEmergencyCallModeChanged(pThis, token))
        }
    }
    public func remove_IsInEmergencyCallModeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_IsInEmergencyCallModeChanged(token);
    }
    public var IsInEmergencyCallMode : boolean {
        get throws {
            return try get_IsInEmergencyCallMode();
        }
    }
} // IMobileBroadbandModem3


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration
// interface type
open class IMobileBroadbandModemConfiguration
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfce035a3, Data2: 0xd6cd, Data3 : 0x4320, Data4 : (0xb9, 0x82, 0xbe, 0x9d, 0x3e, 0xc7, 0x89, 0x0f)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandUicc get_Uicc()
    private func _n_get_Uicc(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUicc>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uicc(pThis, __presult))
        }
    }
    public func get_Uicc() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandUicc> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUicc>> = nil;
        try self._n_get_Uicc(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandUicc(consuming: __result);
    }
    // [IsSpecialName] System.String get_HomeProviderId()
    private func _n_get_HomeProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HomeProviderId(pThis, __presult))
        }
    }
    public func get_HomeProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_HomeProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_HomeProviderName()
    private func _n_get_HomeProviderName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HomeProviderName(pThis, __presult))
        }
    }
    public func get_HomeProviderName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_HomeProviderName(&__result);
        return Swift.String(from: __result);
    }
    public var HomeProviderId : Swift.String {
        get throws {
            return try get_HomeProviderId();
        }
    }
    public var HomeProviderName : Swift.String {
        get throws {
            return try get_HomeProviderName();
        }
    }
    public var Uicc : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandUicc> {
        get throws {
            return try get_Uicc();
        }
    }
} // IMobileBroadbandModemConfiguration


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration2
// interface type
open class IMobileBroadbandModemConfiguration2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x320ff5c5, Data2: 0xe460, Data3 : 0x42ae, Data4 : (0xaa, 0x51, 0x69, 0x62, 0x1e, 0x7a, 0x44, 0x77)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandSarManager get_SarManager()
    private func _n_get_SarManager(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemConfiguration2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SarManager(pThis, __presult))
        }
    }
    public func get_SarManager() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandSarManager> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager>> = nil;
        try self._n_get_SarManager(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandSarManager(consuming: __result);
    }
    public var SarManager : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandSarManager> {
        get throws {
            return try get_SarManager();
        }
    }
} // IMobileBroadbandModemConfiguration2


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation
// interface type
open class IMobileBroadbandModemIsolation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb5618fec, Data2: 0xe661, Data3 : 0x4330, Data4 : (0x9b, 0xb4, 0x34, 0x80, 0x21, 0x2e, 0xc3, 0x54)) }
    // void AddAllowedHost(Windows.Networking.HostName)
    private func _n_AddAllowedHost(_ host : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemIsolation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddAllowedHost(pThis, host))
        }
    }
    public func AddAllowedHost(host : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_AddAllowedHost(RawPointer(host));
    }
    // void AddAllowedHostRange(Windows.Networking.HostName, Windows.Networking.HostName)
    private func _n_AddAllowedHostRange(_ first : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ last : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemIsolation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddAllowedHostRange(pThis, first, last))
        }
    }
    public func AddAllowedHostRange(first : Optional<Windows.Networking.IHostName>, last : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_AddAllowedHostRange(RawPointer(first), RawPointer(last));
    }
    // Windows.Foundation.IAsyncAction ApplyConfigurationAsync()
    private func _n_ApplyConfigurationAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemIsolation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyConfigurationAsync(pThis, __presult))
        }
    }
    public func ApplyConfigurationAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ApplyConfigurationAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func ApplyConfiguration() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ApplyConfigurationAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction ClearConfigurationAsync()
    private func _n_ClearConfigurationAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemIsolation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ClearConfigurationAsync(pThis, __presult))
        }
    }
    public func ClearConfigurationAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ClearConfigurationAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func ClearConfiguration() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ClearConfigurationAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IMobileBroadbandModemIsolation


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolationFactory
// interface type
// ACTIVATION INTERFACE
open class IMobileBroadbandModemIsolationFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x21d7ec58, Data2: 0xc2b1, Data3 : 0x4c2f, Data4 : (0xa0, 0x30, 0x72, 0x82, 0x0a, 0x24, 0xec, 0xd9)) }
    // Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation Create(System.String, System.String)
    private func _n_Create(_ modemDeviceId : Optional<HSTRING>, _ ruleGroupId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemIsolation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemIsolationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, modemDeviceId, ruleGroupId, __presult))
        }
    }
    public func Create(modemDeviceId : Swift.String, ruleGroupId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation> {
        let __hstr_modemDeviceId = try HString(modemDeviceId);
        return try withExtendedLifetime(__hstr_modemDeviceId) {
        let __hstr_ruleGroupId = try HString(ruleGroupId);
        return try withExtendedLifetime(__hstr_ruleGroupId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemIsolation>> = nil;
        try self._n_Create(__hstr_modemDeviceId.Raw(), __hstr_ruleGroupId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation(consuming: __result);
        }
        }
    }
} // IMobileBroadbandModemIsolationFactory


// type: Windows.Networking.NetworkOperators.IMobileBroadbandModemStatics
// interface type
open class IMobileBroadbandModemStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf99ed637, Data2: 0xd6f1, Data3 : 0x4a78, Data4 : (0x8c, 0xbc, 0x64, 0x21, 0xa6, 0x50, 0x63, 0xc8)) }
    // System.String GetDeviceSelector()
    private func _n_GetDeviceSelector(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeviceSelector(pThis, __presult))
        }
    }
    public func GetDeviceSelector() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetDeviceSelector(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandModem FromId(System.String)
    private func _n_FromId(_ deviceId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FromId(pThis, deviceId, __presult))
        }
    }
    public func FromId(deviceId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandModem> {
        let __hstr_deviceId = try HString(deviceId);
        return try withExtendedLifetime(__hstr_deviceId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem>> = nil;
        try self._n_FromId(__hstr_deviceId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandModem(consuming: __result);
        }
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandModem GetDefault()
    private func _n_GetDefault(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModemStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, __presult))
        }
    }
    public func GetDefault() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandModem> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandModem>> = nil;
        try self._n_GetDefault(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandModem(consuming: __result);
    }
} // IMobileBroadbandModemStatics


// type: Windows.Networking.NetworkOperators.IMobileBroadbandNetwork
// interface type
open class IMobileBroadbandNetwork
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcb63928c, Data2: 0x0309, Data3 : 0x4cb6, Data4 : (0xa8, 0xc1, 0x6a, 0x5a, 0x3c, 0x8e, 0x1f, 0xf6)) }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkAdapter get_NetworkAdapter()
    private func _n_get_NetworkAdapter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapter(pThis, __presult))
        }
    }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>> = nil;
        try self._n_get_NetworkAdapter(&__result);
        return Windows.Networking.Connectivity.INetworkAdapter(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.NetworkRegistrationState get_NetworkRegistrationState()
    private func _n_get_NetworkRegistrationState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkRegistrationState(pThis, __presult))
        }
    }
    public func get_NetworkRegistrationState() throws -> Windows.Networking.NetworkOperators.NetworkRegistrationState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState = _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_None;
        try self._n_get_NetworkRegistrationState(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_RegistrationNetworkError()
    private func _n_get_RegistrationNetworkError(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RegistrationNetworkError(pThis, __presult))
        }
    }
    public func get_RegistrationNetworkError() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_RegistrationNetworkError(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_PacketAttachNetworkError()
    private func _n_get_PacketAttachNetworkError(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PacketAttachNetworkError(pThis, __presult))
        }
    }
    public func get_PacketAttachNetworkError() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_PacketAttachNetworkError(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_ActivationNetworkError()
    private func _n_get_ActivationNetworkError(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActivationNetworkError(pThis, __presult))
        }
    }
    public func get_ActivationNetworkError() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_ActivationNetworkError(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_AccessPointName()
    private func _n_get_AccessPointName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessPointName(pThis, __presult))
        }
    }
    public func get_AccessPointName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AccessPointName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.DataClasses get_RegisteredDataClass()
    private func _n_get_RegisteredDataClass(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CDataClasses>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RegisteredDataClass(pThis, __presult))
        }
    }
    public func get_RegisteredDataClass() throws -> Windows.Networking.NetworkOperators.DataClasses {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CDataClasses = _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_None;
        try self._n_get_RegisteredDataClass(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_RegisteredProviderId()
    private func _n_get_RegisteredProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RegisteredProviderId(pThis, __presult))
        }
    }
    public func get_RegisteredProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RegisteredProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_RegisteredProviderName()
    private func _n_get_RegisteredProviderName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RegisteredProviderName(pThis, __presult))
        }
    }
    public func get_RegisteredProviderName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RegisteredProviderName(&__result);
        return Swift.String(from: __result);
    }
    // void ShowConnectionUI()
    private func _n_ShowConnectionUI() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ShowConnectionUI(pThis))
        }
    }
    public func ShowConnectionUI() throws -> Void {
        try self._n_ShowConnectionUI();
    }
    public var AccessPointName : Swift.String {
        get throws {
            return try get_AccessPointName();
        }
    }
    public var ActivationNetworkError : Swift.UInt32 {
        get throws {
            return try get_ActivationNetworkError();
        }
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        get throws {
            return try get_NetworkAdapter();
        }
    }
    public var NetworkRegistrationState : Windows.Networking.NetworkOperators.NetworkRegistrationState {
        get throws {
            return try get_NetworkRegistrationState();
        }
    }
    public var PacketAttachNetworkError : Swift.UInt32 {
        get throws {
            return try get_PacketAttachNetworkError();
        }
    }
    public var RegisteredDataClass : Windows.Networking.NetworkOperators.DataClasses {
        get throws {
            return try get_RegisteredDataClass();
        }
    }
    public var RegisteredProviderId : Swift.String {
        get throws {
            return try get_RegisteredProviderId();
        }
    }
    public var RegisteredProviderName : Swift.String {
        get throws {
            return try get_RegisteredProviderName();
        }
    }
    public var RegistrationNetworkError : Swift.UInt32 {
        get throws {
            return try get_RegistrationNetworkError();
        }
    }
} // IMobileBroadbandNetwork


// type: Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2
// interface type
open class IMobileBroadbandNetwork2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5a55db22, Data2: 0x62f7, Data3 : 0x4bdd, Data4 : (0xba, 0x1d, 0x47, 0x74, 0x41, 0x96, 0x0b, 0xa0)) }
    // Windows.Foundation.IAsyncOperation<bool> GetVoiceCallSupportAsync()
    private func _n_GetVoiceCallSupportAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVoiceCallSupportAsync(pThis, __presult))
        }
    }
    public func GetVoiceCallSupportAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>> = nil;
        try self._n_GetVoiceCallSupportAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1_boolean(consuming: __result);
    }
    public func GetVoiceCallSupport() async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetVoiceCallSupportAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandUiccApp> get_RegistrationUiccApps()
    private func _n_get_RegistrationUiccApps(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RegistrationUiccApps(pThis, __presult))
        }
    }
    public func get_RegistrationUiccApps() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp>> = nil;
        try self._n_get_RegistrationUiccApps(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp(consuming: __result);
    }
    public var RegistrationUiccApps : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        get throws {
            return try get_RegistrationUiccApps();
        }
    }
} // IMobileBroadbandNetwork2


// type: Windows.Networking.NetworkOperators.IMobileBroadbandNetwork3
// interface type
open class IMobileBroadbandNetwork3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x33670a8a, Data2: 0xc7ef, Data3 : 0x444c, Data4 : (0xab, 0x6c, 0xdf, 0x7e, 0xf7, 0xa3, 0x90, 0xfe)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo> GetCellsInfoAsync()
    private func _n_GetCellsInfoAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellsInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCellsInfoAsync(pThis, __presult))
        }
    }
    public func GetCellsInfoAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellsInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellsInfo>> = nil;
        try self._n_GetCellsInfoAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellsInfo(consuming: __result);
    }
    public func GetCellsInfo() async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCellsInfoAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IMobileBroadbandNetwork3


// type: Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange
// interface type
open class IMobileBroadbandNetworkRegistrationStateChange
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbeaf94e1, Data2: 0x960f, Data3 : 0x49b4, Data4 : (0xa0, 0x8d, 0x7d, 0x85, 0xe9, 0x68, 0xc7, 0xec)) }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetworkRegistrationStateChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandNetwork get_Network()
    private func _n_get_Network(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetworkRegistrationStateChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Network(pThis, __presult))
        }
    }
    public func get_Network() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandNetwork> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetwork>> = nil;
        try self._n_get_Network(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandNetwork(consuming: __result);
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var Network : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandNetwork> {
        get throws {
            return try get_Network();
        }
    }
} // IMobileBroadbandNetworkRegistrationStateChange


// type: Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails
// interface type
open class IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x89135cff, Data2: 0x28b8, Data3 : 0x46aa, Data4 : (0xb1, 0x37, 0x1c, 0x4b, 0x0f, 0x21, 0xed, 0xfe)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandNetworkRegistrationStateChange> get_NetworkRegistrationStateChanges()
    private func _n_get_NetworkRegistrationStateChanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandNetworkRegistrationStateChange>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandNetworkRegistrationStateChangeTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkRegistrationStateChanges(pThis, __presult))
        }
    }
    public func get_NetworkRegistrationStateChanges() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandNetworkRegistrationStateChange> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandNetworkRegistrationStateChange>> = nil;
        try self._n_get_NetworkRegistrationStateChanges(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandNetworkRegistrationStateChange(consuming: __result);
    }
    public var NetworkRegistrationStateChanges : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandNetworkRegistrationStateChange> {
        get throws {
            return try get_NetworkRegistrationStateChanges();
        }
    }
} // IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails


// type: Windows.Networking.NetworkOperators.IMobileBroadbandPco
// interface type
open class IMobileBroadbandPco
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd4e4fcbe, Data2: 0xe3a3, Data3 : 0x43c5, Data4 : (0xa8, 0x7b, 0x6c, 0x86, 0xd2, 0x29, 0xd7, 0xfa)) }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_Data()
    private func _n_get_Data(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPco.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, __presult))
        }
    }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Data(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // [IsSpecialName] bool get_IsComplete()
    private func _n_get_IsComplete(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPco.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsComplete(pThis, __presult))
        }
    }
    public func get_IsComplete() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsComplete(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPco.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Data();
        }
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var IsComplete : boolean {
        get throws {
            return try get_IsComplete();
        }
    }
} // IMobileBroadbandPco


// type: Windows.Networking.NetworkOperators.IMobileBroadbandPcoDataChangeTriggerDetails
// interface type
open class IMobileBroadbandPcoDataChangeTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x263f5114, Data2: 0x64e0, Data3 : 0x4493, Data4 : (0x90, 0x9b, 0x2d, 0x14, 0xa0, 0x19, 0x62, 0xb1)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandPco get_UpdatedData()
    private func _n_get_UpdatedData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPco>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPcoDataChangeTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UpdatedData(pThis, __presult))
        }
    }
    public func get_UpdatedData() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPco> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPco>> = nil;
        try self._n_get_UpdatedData(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandPco(consuming: __result);
    }
    public var UpdatedData : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPco> {
        get throws {
            return try get_UpdatedData();
        }
    }
} // IMobileBroadbandPcoDataChangeTriggerDetails


// type: Windows.Networking.NetworkOperators.IMobileBroadbandPin
// interface type
open class IMobileBroadbandPin
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe661d709, Data2: 0xe779, Data3 : 0x45bf, Data4 : (0x82, 0x81, 0x75, 0x32, 0x3d, 0xf9, 0xe3, 0x21)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandPinType get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_None;
        try self._n_get_Type(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandPinLockState get_LockState()
    private func _n_get_LockState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LockState(pThis, __presult))
        }
    }
    public func get_LockState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState_Unknown;
        try self._n_get_LockState(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandPinFormat get_Format()
    private func _n_get_Format(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinFormat>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Format(pThis, __presult))
        }
    }
    public func get_Format() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinFormat {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinFormat = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinFormat_Unknown;
        try self._n_get_Format(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Enabled()
    private func _n_get_Enabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Enabled(pThis, __presult))
        }
    }
    public func get_Enabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Enabled(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_MaxLength()
    private func _n_get_MaxLength(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLength(pThis, __presult))
        }
    }
    public func get_MaxLength() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxLength(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_MinLength()
    private func _n_get_MinLength(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinLength(pThis, __presult))
        }
    }
    public func get_MinLength() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MinLength(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_AttemptsRemaining()
    private func _n_get_AttemptsRemaining(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttemptsRemaining(pThis, __presult))
        }
    }
    public func get_AttemptsRemaining() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_AttemptsRemaining(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> EnableAsync(System.String)
    private func _n_EnableAsync(_ currentPin : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableAsync(pThis, currentPin, __presult))
        }
    }
    public func EnableAsync(currentPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let __hstr_currentPin = try HString(currentPin);
        return try withExtendedLifetime(__hstr_currentPin) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>> = nil;
        try self._n_EnableAsync(__hstr_currentPin.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult(consuming: __result);
        }
    }
    public func Enable(currentPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.EnableAsync(currentPin: currentPin)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> DisableAsync(System.String)
    private func _n_DisableAsync(_ currentPin : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DisableAsync(pThis, currentPin, __presult))
        }
    }
    public func DisableAsync(currentPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let __hstr_currentPin = try HString(currentPin);
        return try withExtendedLifetime(__hstr_currentPin) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>> = nil;
        try self._n_DisableAsync(__hstr_currentPin.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult(consuming: __result);
        }
    }
    public func Disable(currentPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DisableAsync(currentPin: currentPin)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> EnterAsync(System.String)
    private func _n_EnterAsync(_ currentPin : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnterAsync(pThis, currentPin, __presult))
        }
    }
    public func EnterAsync(currentPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let __hstr_currentPin = try HString(currentPin);
        return try withExtendedLifetime(__hstr_currentPin) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>> = nil;
        try self._n_EnterAsync(__hstr_currentPin.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult(consuming: __result);
        }
    }
    public func Enter(currentPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.EnterAsync(currentPin: currentPin)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> ChangeAsync(System.String, System.String)
    private func _n_ChangeAsync(_ currentPin : Optional<HSTRING>, _ newPin : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ChangeAsync(pThis, currentPin, newPin, __presult))
        }
    }
    public func ChangeAsync(currentPin : Swift.String, newPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let __hstr_currentPin = try HString(currentPin);
        return try withExtendedLifetime(__hstr_currentPin) {
        let __hstr_newPin = try HString(newPin);
        return try withExtendedLifetime(__hstr_newPin) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>> = nil;
        try self._n_ChangeAsync(__hstr_currentPin.Raw(), __hstr_newPin.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult(consuming: __result);
        }
        }
    }
    public func Change(currentPin : Swift.String, newPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ChangeAsync(currentPin: currentPin, newPin: newPin)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> UnblockAsync(System.String, System.String)
    private func _n_UnblockAsync(_ pinUnblockKey : Optional<HSTRING>, _ newPin : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UnblockAsync(pThis, pinUnblockKey, newPin, __presult))
        }
    }
    public func UnblockAsync(pinUnblockKey : Swift.String, newPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let __hstr_pinUnblockKey = try HString(pinUnblockKey);
        return try withExtendedLifetime(__hstr_pinUnblockKey) {
        let __hstr_newPin = try HString(newPin);
        return try withExtendedLifetime(__hstr_newPin) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult>> = nil;
        try self._n_UnblockAsync(__hstr_pinUnblockKey.Raw(), __hstr_newPin.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult(consuming: __result);
        }
        }
    }
    public func Unblock(pinUnblockKey : Swift.String, newPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UnblockAsync(pinUnblockKey: pinUnblockKey, newPin: newPin)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var AttemptsRemaining : Swift.UInt32 {
        get throws {
            return try get_AttemptsRemaining();
        }
    }
    public var Enabled : boolean {
        get throws {
            return try get_Enabled();
        }
    }
    public var Format : Windows.Networking.NetworkOperators.MobileBroadbandPinFormat {
        get throws {
            return try get_Format();
        }
    }
    public var LockState : Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        get throws {
            return try get_LockState();
        }
    }
    public var MaxLength : Swift.UInt32 {
        get throws {
            return try get_MaxLength();
        }
    }
    public var MinLength : Swift.UInt32 {
        get throws {
            return try get_MinLength();
        }
    }
    public var Type_ : Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        get throws {
            return try get_Type();
        }
    }
} // IMobileBroadbandPin


// type: Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange
// interface type
open class IMobileBroadbandPinLockStateChange
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbe16673e, Data2: 0x1f04, Data3 : 0x4f95, Data4 : (0x8b, 0x90, 0xe7, 0xf5, 0x59, 0xdd, 0xe7, 0xe5)) }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinLockStateChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandPinType get_PinType()
    private func _n_get_PinType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinLockStateChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PinType(pThis, __presult))
        }
    }
    public func get_PinType() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_None;
        try self._n_get_PinType(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandPinLockState get_PinLockState()
    private func _n_get_PinLockState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinLockStateChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PinLockState(pThis, __presult))
        }
    }
    public func get_PinLockState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState_Unknown;
        try self._n_get_PinLockState(&__result);
        return __result;
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var PinLockState : Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        get throws {
            return try get_PinLockState();
        }
    }
    public var PinType : Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        get throws {
            return try get_PinType();
        }
    }
} // IMobileBroadbandPinLockStateChange


// type: Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChangeTriggerDetails
// interface type
open class IMobileBroadbandPinLockStateChangeTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd338c091, Data2: 0x3e91, Data3 : 0x4d38, Data4 : (0x90, 0x36, 0xae, 0xe8, 0x3a, 0x6e, 0x79, 0xad)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChange> get_PinLockStateChanges()
    private func _n_get_PinLockStateChanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockStateChange>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinLockStateChangeTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PinLockStateChanges(pThis, __presult))
        }
    }
    public func get_PinLockStateChanges() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockStateChange> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockStateChange>> = nil;
        try self._n_get_PinLockStateChanges(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockStateChange(consuming: __result);
    }
    public var PinLockStateChanges : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockStateChange> {
        get throws {
            return try get_PinLockStateChanges();
        }
    }
} // IMobileBroadbandPinLockStateChangeTriggerDetails


// type: Windows.Networking.NetworkOperators.IMobileBroadbandPinManager
// interface type
open class IMobileBroadbandPinManager
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x83567edd, Data2: 0x6e1f, Data3 : 0x4b9b, Data4 : (0xa4, 0x13, 0x2b, 0x1f, 0x50, 0xcc, 0x36, 0xdf)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandPinType> get_SupportedPins()
    private func _n_get_SupportedPins(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedPins(pThis, __presult))
        }
    }
    public func get_SupportedPins() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType>> = nil;
        try self._n_get_SupportedPins(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType(consuming: __result);
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandPin GetPin(Windows.Networking.NetworkOperators.MobileBroadbandPinType)
    private func _n_GetPin(_ pinType : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPin(pThis, pinType, __presult))
        }
    }
    public func GetPin(pinType : Windows.Networking.NetworkOperators.MobileBroadbandPinType) throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandPin> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPin>> = nil;
        try self._n_GetPin(pinType, &__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandPin(consuming: __result);
    }
    public var SupportedPins : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType> {
        get throws {
            return try get_SupportedPins();
        }
    }
} // IMobileBroadbandPinManager


// type: Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult
// interface type
open class IMobileBroadbandPinOperationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x11dddc32, Data2: 0x31e7, Data3 : 0x49f5, Data4 : (0xb6, 0x63, 0x12, 0x3d, 0x3b, 0xef, 0x03, 0x62)) }
    // [IsSpecialName] bool get_IsSuccessful()
    private func _n_get_IsSuccessful(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinOperationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSuccessful(pThis, __presult))
        }
    }
    public func get_IsSuccessful() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSuccessful(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_AttemptsRemaining()
    private func _n_get_AttemptsRemaining(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandPinOperationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttemptsRemaining(pThis, __presult))
        }
    }
    public func get_AttemptsRemaining() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_AttemptsRemaining(&__result);
        return __result;
    }
    public var AttemptsRemaining : Swift.UInt32 {
        get throws {
            return try get_AttemptsRemaining();
        }
    }
    public var IsSuccessful : boolean {
        get throws {
            return try get_IsSuccessful();
        }
    }
} // IMobileBroadbandPinOperationResult


// type: Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange
// interface type
open class IMobileBroadbandRadioStateChange
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb054a561, Data2: 0x9833, Data3 : 0x4aed, Data4 : (0x97, 0x17, 0x43, 0x48, 0xb2, 0x1a, 0x24, 0xb3)) }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandRadioStateChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandRadioState get_RadioState()
    private func _n_get_RadioState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandRadioStateChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RadioState(pThis, __presult))
        }
    }
    public func get_RadioState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState_Off;
        try self._n_get_RadioState(&__result);
        return __result;
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var RadioState : Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        get throws {
            return try get_RadioState();
        }
    }
} // IMobileBroadbandRadioStateChange


// type: Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChangeTriggerDetails
// interface type
open class IMobileBroadbandRadioStateChangeTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x71301ace, Data2: 0x093c, Data3 : 0x42c6, Data4 : (0xb0, 0xdb, 0xad, 0x1f, 0x75, 0xa6, 0x54, 0x45)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandRadioStateChange> get_RadioStateChanges()
    private func _n_get_RadioStateChanges(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioStateChange>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandRadioStateChangeTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RadioStateChanges(pThis, __presult))
        }
    }
    public func get_RadioStateChanges() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioStateChange> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioStateChange>> = nil;
        try self._n_get_RadioStateChanges(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioStateChange(consuming: __result);
    }
    public var RadioStateChanges : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioStateChange> {
        get throws {
            return try get_RadioStateChanges();
        }
    }
} // IMobileBroadbandRadioStateChangeTriggerDetails


// type: Windows.Networking.NetworkOperators.IMobileBroadbandSarManager
// interface type
open class IMobileBroadbandSarManager
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe5b26833, Data2: 0x967e, Data3 : 0x40c9, Data4 : (0xa4, 0x85, 0x19, 0xc0, 0xdd, 0x20, 0x9e, 0x22)) }
    // [IsSpecialName] bool get_IsBackoffEnabled()
    private func _n_get_IsBackoffEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBackoffEnabled(pThis, __presult))
        }
    }
    public func get_IsBackoffEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsBackoffEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsWiFiHardwareIntegrated()
    private func _n_get_IsWiFiHardwareIntegrated(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWiFiHardwareIntegrated(pThis, __presult))
        }
    }
    public func get_IsWiFiHardwareIntegrated() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsWiFiHardwareIntegrated(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsSarControlledByHardware()
    private func _n_get_IsSarControlledByHardware(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSarControlledByHardware(pThis, __presult))
        }
    }
    public func get_IsSarControlledByHardware() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSarControlledByHardware(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar> get_Antennas()
    private func _n_get_Antennas(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Antennas(pThis, __presult))
        }
    }
    public func get_Antennas() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar>> = nil;
        try self._n_get_Antennas(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_HysteresisTimerPeriod()
    private func _n_get_HysteresisTimerPeriod(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HysteresisTimerPeriod(pThis, __presult))
        }
    }
    public func get_HysteresisTimerPeriod() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_HysteresisTimerPeriod(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_TransmissionStateChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandSarManager,Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs>)
    private func _n_add_TransmissionStateChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSarManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandTransmissionStateChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_TransmissionStateChanged(pThis, handler, __presult))
        }
    }
    public func add_TransmissionStateChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSarManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandTransmissionStateChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_TransmissionStateChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_TransmissionStateChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_TransmissionStateChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_TransmissionStateChanged(pThis, token))
        }
    }
    public func remove_TransmissionStateChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_TransmissionStateChanged(token);
    }
    // Windows.Foundation.IAsyncAction EnableBackoffAsync()
    private func _n_EnableBackoffAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableBackoffAsync(pThis, __presult))
        }
    }
    public func EnableBackoffAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_EnableBackoffAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func EnableBackoff() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.EnableBackoffAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction DisableBackoffAsync()
    private func _n_DisableBackoffAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DisableBackoffAsync(pThis, __presult))
        }
    }
    public func DisableBackoffAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_DisableBackoffAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func DisableBackoff() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DisableBackoffAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction SetConfigurationAsync(Windows.Foundation.Collections.IIterable<Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar>)
    private func _n_SetConfigurationAsync(_ antennas : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetConfigurationAsync(pThis, antennas, __presult))
        }
    }
    public func SetConfigurationAsync(antennas : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_SetConfigurationAsync(RawPointer(antennas), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func SetConfiguration(antennas : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetConfigurationAsync(antennas: antennas)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction RevertSarToHardwareControlAsync()
    private func _n_RevertSarToHardwareControlAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RevertSarToHardwareControlAsync(pThis, __presult))
        }
    }
    public func RevertSarToHardwareControlAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_RevertSarToHardwareControlAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func RevertSarToHardwareControl() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RevertSarToHardwareControlAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction SetTransmissionStateChangedHysteresisAsync(Windows.Foundation.TimeSpan)
    private func _n_SetTransmissionStateChangedHysteresisAsync(_ timerPeriod : _q_CWindows_CFoundation_CTimeSpan, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetTransmissionStateChangedHysteresisAsync(pThis, timerPeriod, __presult))
        }
    }
    public func SetTransmissionStateChangedHysteresisAsync(timerPeriod : Windows.Foundation.TimeSpan) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_SetTransmissionStateChangedHysteresisAsync(timerPeriod, &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func SetTransmissionStateChangedHysteresis(timerPeriod : Windows.Foundation.TimeSpan) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetTransmissionStateChangedHysteresisAsync(timerPeriod: timerPeriod)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<bool> GetIsTransmittingAsync()
    private func _n_GetIsTransmittingAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTransmittingAsync(pThis, __presult))
        }
    }
    public func GetIsTransmittingAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>> = nil;
        try self._n_GetIsTransmittingAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1_boolean(consuming: __result);
    }
    public func GetIsTransmitting() async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetIsTransmittingAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void StartTransmissionStateMonitoring()
    private func _n_StartTransmissionStateMonitoring() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartTransmissionStateMonitoring(pThis))
        }
    }
    public func StartTransmissionStateMonitoring() throws -> Void {
        try self._n_StartTransmissionStateMonitoring();
    }
    // void StopTransmissionStateMonitoring()
    private func _n_StopTransmissionStateMonitoring() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSarManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StopTransmissionStateMonitoring(pThis))
        }
    }
    public func StopTransmissionStateMonitoring() throws -> Void {
        try self._n_StopTransmissionStateMonitoring();
    }
    public var Antennas : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar> {
        get throws {
            return try get_Antennas();
        }
    }
    public var HysteresisTimerPeriod : Windows.Foundation.TimeSpan {
        get throws {
            return try get_HysteresisTimerPeriod();
        }
    }
    public var IsBackoffEnabled : boolean {
        get throws {
            return try get_IsBackoffEnabled();
        }
    }
    public var IsSarControlledByHardware : boolean {
        get throws {
            return try get_IsSarControlledByHardware();
        }
    }
    public var IsWiFiHardwareIntegrated : boolean {
        get throws {
            return try get_IsWiFiHardwareIntegrated();
        }
    }
} // IMobileBroadbandSarManager


// type: Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo
// interface type
open class IMobileBroadbandSlotInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbd350b32, Data2: 0x882e, Data3 : 0x542a, Data4 : (0xb1, 0x7d, 0x0b, 0xb1, 0xb4, 0x9b, 0xae, 0x9e)) }
    // [IsSpecialName] System.Int32 get_Index()
    private func _n_get_Index(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Index(pThis, __presult))
        }
    }
    public func get_Index() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Index(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandSlotState get_State()
    private func _n_get_State(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, __presult))
        }
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.MobileBroadbandSlotState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_Unmanaged;
        try self._n_get_State(&__result);
        return __result;
    }
    public var Index : Swift.Int32 {
        get throws {
            return try get_Index();
        }
    }
    public var State : Windows.Networking.NetworkOperators.MobileBroadbandSlotState {
        get throws {
            return try get_State();
        }
    }
} // IMobileBroadbandSlotInfo


// type: Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfoChangedEventArgs
// interface type
open class IMobileBroadbandSlotInfoChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3158839f, Data2: 0x950c, Data3 : 0x54ce, Data4 : (0xa4, 0x8d, 0xba, 0x45, 0x29, 0xb4, 0x8f, 0x0f)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo get_SlotInfo()
    private func _n_get_SlotInfo(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotInfoChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SlotInfo(pThis, __presult))
        }
    }
    public func get_SlotInfo() throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotInfo>> = nil;
        try self._n_get_SlotInfo(&__result);
        return Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo(consuming: __result);
    }
    public var SlotInfo : Optional<Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo> {
        get throws {
            return try get_SlotInfo();
        }
    }
} // IMobileBroadbandSlotInfoChangedEventArgs


// type: Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager
// interface type
open class IMobileBroadbandSlotManager
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xeba07cd6, Data2: 0x2019, Data3 : 0x5f81, Data4 : (0xa2, 0x94, 0xcc, 0x36, 0x4a, 0x11, 0xd0, 0xb2)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo> get_SlotInfos()
    private func _n_get_SlotInfos(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfo>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SlotInfos(pThis, __presult))
        }
    }
    public func get_SlotInfos() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfo>> = nil;
        try self._n_get_SlotInfos(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfo(consuming: __result);
    }
    // [IsSpecialName] System.Int32 get_CurrentSlotIndex()
    private func _n_get_CurrentSlotIndex(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentSlotIndex(pThis, __presult))
        }
    }
    public func get_CurrentSlotIndex() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_CurrentSlotIndex(&__result);
        return __result;
    }
    // Windows.Networking.NetworkOperators.MobileBroadbandModemStatus SetCurrentSlot(System.Int32)
    private func _n_SetCurrentSlot(_ slotIndex : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetCurrentSlot(pThis, slotIndex, __presult))
        }
    }
    public func SetCurrentSlot(slotIndex : Swift.Int32) throws -> Windows.Networking.NetworkOperators.MobileBroadbandModemStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus_Success;
        try self._n_SetCurrentSlot(slotIndex, &__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandModemStatus> SetCurrentSlotAsync(System.Int32)
    private func _n_SetCurrentSlotAsync(_ slotIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetCurrentSlotAsync(pThis, slotIndex, __presult))
        }
    }
    public func SetCurrentSlotAsync(slotIndex : Swift.Int32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus>> = nil;
        try self._n_SetCurrentSlotAsync(slotIndex, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus(consuming: __result);
    }
    public func SetCurrentSlot(slotIndex : Swift.Int32) async throws -> Windows.Networking.NetworkOperators.MobileBroadbandModemStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetCurrentSlotAsync(slotIndex: slotIndex)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SlotInfoChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager,Windows.Networking.NetworkOperators.MobileBroadbandSlotInfoChangedEventArgs>)
    private func _n_add_SlotInfoChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfoChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SlotInfoChanged(pThis, handler, __presult))
        }
    }
    public func add_SlotInfoChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfoChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SlotInfoChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SlotInfoChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_SlotInfoChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SlotInfoChanged(pThis, token))
        }
    }
    public func remove_SlotInfoChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SlotInfoChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_CurrentSlotIndexChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager,Windows.Networking.NetworkOperators.MobileBroadbandCurrentSlotIndexChangedEventArgs>)
    private func _n_add_CurrentSlotIndexChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCurrentSlotIndexChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_CurrentSlotIndexChanged(pThis, handler, __presult))
        }
    }
    public func add_CurrentSlotIndexChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCurrentSlotIndexChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_CurrentSlotIndexChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_CurrentSlotIndexChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_CurrentSlotIndexChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandSlotManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CurrentSlotIndexChanged(pThis, token))
        }
    }
    public func remove_CurrentSlotIndexChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_CurrentSlotIndexChanged(token);
    }
    public var CurrentSlotIndex : Swift.Int32 {
        get throws {
            return try get_CurrentSlotIndex();
        }
    }
    public var SlotInfos : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfo> {
        get throws {
            return try get_SlotInfos();
        }
    }
} // IMobileBroadbandSlotManager


// type: Windows.Networking.NetworkOperators.IMobileBroadbandTransmissionStateChangedEventArgs
// interface type
open class IMobileBroadbandTransmissionStateChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x612e3875, Data2: 0x040a, Data3 : 0x4f99, Data4 : (0xa4, 0xf9, 0x61, 0xd7, 0xc3, 0x2d, 0xa1, 0x29)) }
    // [IsSpecialName] bool get_IsTransmitting()
    private func _n_get_IsTransmitting(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandTransmissionStateChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTransmitting(pThis, __presult))
        }
    }
    public func get_IsTransmitting() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTransmitting(&__result);
        return __result;
    }
    public var IsTransmitting : boolean {
        get throws {
            return try get_IsTransmitting();
        }
    }
} // IMobileBroadbandTransmissionStateChangedEventArgs


// type: Windows.Networking.NetworkOperators.IMobileBroadbandUicc
// interface type
open class IMobileBroadbandUicc
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe634f691, Data2: 0x525a, Data3 : 0x4ce2, Data4 : (0x8f, 0xce, 0xaa, 0x41, 0x62, 0x57, 0x91, 0x54)) }
    // [IsSpecialName] System.String get_SimIccId()
    private func _n_get_SimIccId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUicc.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SimIccId(pThis, __presult))
        }
    }
    public func get_SimIccId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SimIccId(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult> GetUiccAppsAsync()
    private func _n_GetUiccAppsAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppsResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUicc.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetUiccAppsAsync(pThis, __presult))
        }
    }
    public func GetUiccAppsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppsResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppsResult>> = nil;
        try self._n_GetUiccAppsAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppsResult(consuming: __result);
    }
    public func GetUiccApps() async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetUiccAppsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var SimIccId : Swift.String {
        get throws {
            return try get_SimIccId();
        }
    }
} // IMobileBroadbandUicc


// type: Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp
// interface type
open class IMobileBroadbandUiccApp
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4d170556, Data2: 0x98a1, Data3 : 0x43dd, Data4 : (0xb2, 0xec, 0x50, 0xc9, 0x0c, 0xf2, 0x48, 0xdf)) }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccApp.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Id(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.UiccAppKind get_Kind()
    private func _n_get_Kind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccApp.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, __presult))
        }
    }
    public func get_Kind() throws -> Windows.Networking.NetworkOperators.UiccAppKind {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind = _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_Unknown;
        try self._n_get_Kind(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult> GetRecordDetailsAsync(Windows.Foundation.Collections.IIterable<System.UInt32>)
    private func _n_GetRecordDetailsAsync(_ uiccFilePath : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_UINT32>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppRecordDetailsResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccApp.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecordDetailsAsync(pThis, uiccFilePath, __presult))
        }
    }
    public func GetRecordDetailsAsync(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppRecordDetailsResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppRecordDetailsResult>> = nil;
        try self._n_GetRecordDetailsAsync(RawPointer(uiccFilePath), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppRecordDetailsResult(consuming: __result);
    }
    public func GetRecordDetails(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetRecordDetailsAsync(uiccFilePath: uiccFilePath)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult> ReadRecordAsync(Windows.Foundation.Collections.IIterable<System.UInt32>, System.Int32)
    private func _n_ReadRecordAsync(_ uiccFilePath : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_UINT32>>, _ recordIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppReadRecordResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccApp.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReadRecordAsync(pThis, uiccFilePath, recordIndex, __presult))
        }
    }
    public func ReadRecordAsync(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>, recordIndex : Swift.Int32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppReadRecordResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppReadRecordResult>> = nil;
        try self._n_ReadRecordAsync(RawPointer(uiccFilePath), recordIndex, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppReadRecordResult(consuming: __result);
    }
    public func ReadRecord(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>, recordIndex : Swift.Int32) async throws -> Optional<Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ReadRecordAsync(uiccFilePath: uiccFilePath, recordIndex: recordIndex)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Id : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Id();
        }
    }
    public var Kind : Windows.Networking.NetworkOperators.UiccAppKind {
        get throws {
            return try get_Kind();
        }
    }
} // IMobileBroadbandUiccApp


// type: Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult
// interface type
open class IMobileBroadbandUiccAppReadRecordResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x64c95285, Data2: 0x358e, Data3 : 0x47c5, Data4 : (0x82, 0x49, 0x69, 0x5f, 0x38, 0x3b, 0x2b, 0xdb)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppReadRecordResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_Data()
    private func _n_get_Data(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppReadRecordResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, __presult))
        }
    }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Data(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Data();
        }
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        get throws {
            return try get_Status();
        }
    }
} // IMobileBroadbandUiccAppReadRecordResult


// type: Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult
// interface type
open class IMobileBroadbandUiccAppRecordDetailsResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd919682f, Data2: 0xbe14, Data3 : 0x4934, Data4 : (0x98, 0x1d, 0x2f, 0x57, 0xb9, 0xed, 0x83, 0xe6)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppRecordDetailsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.UiccAppRecordKind get_Kind()
    private func _n_get_Kind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CUiccAppRecordKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppRecordDetailsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Kind(pThis, __presult))
        }
    }
    public func get_Kind() throws -> Windows.Networking.NetworkOperators.UiccAppRecordKind {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CUiccAppRecordKind = _q_CWindows_CNetworking_CNetworkOperators_CUiccAppRecordKind_Unknown;
        try self._n_get_Kind(&__result);
        return __result;
    }
    // [IsSpecialName] System.Int32 get_RecordCount()
    private func _n_get_RecordCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppRecordDetailsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecordCount(pThis, __presult))
        }
    }
    public func get_RecordCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_RecordCount(&__result);
        return __result;
    }
    // [IsSpecialName] System.Int32 get_RecordSize()
    private func _n_get_RecordSize(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppRecordDetailsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecordSize(pThis, __presult))
        }
    }
    public func get_RecordSize() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_RecordSize(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.UiccAccessCondition get_ReadAccessCondition()
    private func _n_get_ReadAccessCondition(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppRecordDetailsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadAccessCondition(pThis, __presult))
        }
    }
    public func get_ReadAccessCondition() throws -> Windows.Networking.NetworkOperators.UiccAccessCondition {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition = _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_AlwaysAllowed;
        try self._n_get_ReadAccessCondition(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.UiccAccessCondition get_WriteAccessCondition()
    private func _n_get_WriteAccessCondition(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppRecordDetailsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WriteAccessCondition(pThis, __presult))
        }
    }
    public func get_WriteAccessCondition() throws -> Windows.Networking.NetworkOperators.UiccAccessCondition {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition = _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_AlwaysAllowed;
        try self._n_get_WriteAccessCondition(&__result);
        return __result;
    }
    public var Kind : Windows.Networking.NetworkOperators.UiccAppRecordKind {
        get throws {
            return try get_Kind();
        }
    }
    public var ReadAccessCondition : Windows.Networking.NetworkOperators.UiccAccessCondition {
        get throws {
            return try get_ReadAccessCondition();
        }
    }
    public var RecordCount : Swift.Int32 {
        get throws {
            return try get_RecordCount();
        }
    }
    public var RecordSize : Swift.Int32 {
        get throws {
            return try get_RecordSize();
        }
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        get throws {
            return try get_Status();
        }
    }
    public var WriteAccessCondition : Windows.Networking.NetworkOperators.UiccAccessCondition {
        get throws {
            return try get_WriteAccessCondition();
        }
    }
} // IMobileBroadbandUiccAppRecordDetailsResult


// type: Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult
// interface type
open class IMobileBroadbandUiccAppsResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x744930eb, Data2: 0x8157, Data3 : 0x4a41, Data4 : (0x84, 0x94, 0x6b, 0xf5, 0x4c, 0x9b, 0x1d, 0x2b)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.MobileBroadbandUiccApp> get_UiccApps()
    private func _n_get_UiccApps(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIMobileBroadbandUiccAppsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UiccApps(pThis, __presult))
        }
    }
    public func get_UiccApps() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp>> = nil;
        try self._n_get_UiccApps(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp(consuming: __result);
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        get throws {
            return try get_Status();
        }
    }
    public var UiccApps : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        get throws {
            return try get_UiccApps();
        }
    }
} // IMobileBroadbandUiccAppsResult


// type: Windows.Networking.NetworkOperators.INetworkOperatorDataUsageTriggerDetails
// interface type
open class INetworkOperatorDataUsageTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x50e3126d, Data2: 0xa465, Data3 : 0x4eeb, Data4 : (0x93, 0x17, 0x28, 0xa1, 0x67, 0x63, 0x0c, 0xea)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind get_NotificationKind()
    private func _n_get_NotificationKind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorDataUsageNotificationKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorDataUsageTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NotificationKind(pThis, __presult))
        }
    }
    public func get_NotificationKind() throws -> Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorDataUsageNotificationKind = _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorDataUsageNotificationKind_DataUsageProgress;
        try self._n_get_NotificationKind(&__result);
        return __result;
    }
    public var NotificationKind : Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind {
        get throws {
            return try get_NotificationKind();
        }
    }
} // INetworkOperatorDataUsageTriggerDetails


// type: Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails
// interface type
open class INetworkOperatorNotificationEventDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbc68a9d1, Data2: 0x82e1, Data3 : 0x4488, Data4 : (0x9f, 0x2c, 0x12, 0x76, 0xc2, 0x46, 0x8f, 0xac)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType get_NotificationType()
    private func _n_get_NotificationType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorNotificationEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NotificationType(pThis, __presult))
        }
    }
    public func get_NotificationType() throws -> Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType = _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_Gsm;
        try self._n_get_NotificationType(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_NetworkAccountId()
    private func _n_get_NetworkAccountId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorNotificationEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAccountId(pThis, __presult))
        }
    }
    public func get_NetworkAccountId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NetworkAccountId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.Byte get_EncodingType()
    private func _n_get_EncodingType(_ __presult: UnsafeMutablePointer<UINT8>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorNotificationEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncodingType(pThis, __presult))
        }
    }
    public func get_EncodingType() throws -> Swift.UInt8 {
        var __result : UINT8 = 0;
        try self._n_get_EncodingType(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Message()
    private func _n_get_Message(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorNotificationEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Message(pThis, __presult))
        }
    }
    public func get_Message() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Message(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_RuleId()
    private func _n_get_RuleId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorNotificationEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RuleId(pThis, __presult))
        }
    }
    public func get_RuleId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RuleId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Devices.Sms.ISmsMessage get_SmsMessage()
    private func _n_get_SmsMessage(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CSms_CISmsMessage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorNotificationEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SmsMessage(pThis, __presult))
        }
    }
    public func get_SmsMessage() throws -> Optional<Windows.Devices.Sms.ISmsMessage> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CSms_CISmsMessage>> = nil;
        try self._n_get_SmsMessage(&__result);
        return Windows.Devices.Sms.ISmsMessage(consuming: __result);
    }
    public var EncodingType : Swift.UInt8 {
        get throws {
            return try get_EncodingType();
        }
    }
    public var Message : Swift.String {
        get throws {
            return try get_Message();
        }
    }
    public var NetworkAccountId : Swift.String {
        get throws {
            return try get_NetworkAccountId();
        }
    }
    public var NotificationType : Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType {
        get throws {
            return try get_NotificationType();
        }
    }
    public var RuleId : Swift.String {
        get throws {
            return try get_RuleId();
        }
    }
    public var SmsMessage : Optional<Windows.Devices.Sms.ISmsMessage> {
        get throws {
            return try get_SmsMessage();
        }
    }
} // INetworkOperatorNotificationEventDetails


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration
// interface type
open class INetworkOperatorTetheringAccessPointConfiguration
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0bcc0284, Data2: 0x412e, Data3 : 0x403d, Data4 : (0xac, 0xc6, 0xb7, 0x57, 0xe3, 0x47, 0x74, 0xa4)) }
    // [IsSpecialName] System.String get_Ssid()
    private func _n_get_Ssid(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ssid(pThis, __presult))
        }
    }
    public func get_Ssid() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Ssid(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Ssid(System.String)
    private func _n_put_Ssid(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Ssid(pThis, value))
        }
    }
    public func put_Ssid(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Ssid(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Passphrase()
    private func _n_get_Passphrase(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Passphrase(pThis, __presult))
        }
    }
    public func get_Passphrase() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Passphrase(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Passphrase(System.String)
    private func _n_put_Passphrase(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Passphrase(pThis, value))
        }
    }
    public func put_Passphrase(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Passphrase(__hstr_value.Raw());
        }
    }
    public var Passphrase : Swift.String {
        get throws {
            return try get_Passphrase();
        }
    }
    public var Ssid : Swift.String {
        get throws {
            return try get_Ssid();
        }
    }
} // INetworkOperatorTetheringAccessPointConfiguration


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2
// interface type
open class INetworkOperatorTetheringAccessPointConfiguration2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb1809142, Data2: 0x7238, Data3 : 0x59a0, Data4 : (0x92, 0x8b, 0x74, 0xab, 0x46, 0xfd, 0x64, 0xb6)) }
    // bool IsBandSupported(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    private func _n_IsBandSupported(_ band : _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsBandSupported(pThis, band, __presult))
        }
    }
    public func IsBandSupported(band : Windows.Networking.NetworkOperators.TetheringWiFiBand) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsBandSupported(band, &__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<bool> IsBandSupportedAsync(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    private func _n_IsBandSupportedAsync(_ band : _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsBandSupportedAsync(pThis, band, __presult))
        }
    }
    public func IsBandSupportedAsync(band : Windows.Networking.NetworkOperators.TetheringWiFiBand) throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>> = nil;
        try self._n_IsBandSupportedAsync(band, &__result);
        return ClosedGenerics.IAsyncOperation_1_boolean(consuming: __result);
    }
    public func IsBandSupported(band : Windows.Networking.NetworkOperators.TetheringWiFiBand) async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.IsBandSupportedAsync(band: band)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.TetheringWiFiBand get_Band()
    private func _n_get_Band(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Band(pThis, __presult))
        }
    }
    public func get_Band() throws -> Windows.Networking.NetworkOperators.TetheringWiFiBand {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand = _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand_Auto;
        try self._n_get_Band(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Band(Windows.Networking.NetworkOperators.TetheringWiFiBand)
    private func _n_put_Band(_ value : _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Band(pThis, value))
        }
    }
    public func put_Band(value : Windows.Networking.NetworkOperators.TetheringWiFiBand) throws -> Void {
        try self._n_put_Band(value);
    }
    public var Band : Windows.Networking.NetworkOperators.TetheringWiFiBand {
        get throws {
            return try get_Band();
        }
    }
} // INetworkOperatorTetheringAccessPointConfiguration2


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient
// interface type
open class INetworkOperatorTetheringClient
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x709d254c, Data2: 0x595f, Data3 : 0x4847, Data4 : (0xbb, 0x30, 0x64, 0x69, 0x35, 0x54, 0x29, 0x18)) }
    // [IsSpecialName] System.String get_MacAddress()
    private func _n_get_MacAddress(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MacAddress(pThis, __presult))
        }
    }
    public func get_MacAddress() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MacAddress(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.HostName> get_HostNames()
    private func _n_get_HostNames(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HostNames(pThis, __presult))
        }
    }
    public func get_HostNames() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CHostName>> = nil;
        try self._n_get_HostNames(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName(consuming: __result);
    }
    public var HostNames : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        get throws {
            return try get_HostNames();
        }
    }
    public var MacAddress : Swift.String {
        get throws {
            return try get_MacAddress();
        }
    }
} // INetworkOperatorTetheringClient


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringClientManager
// interface type
open class INetworkOperatorTetheringClientManager
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x91b14016, Data2: 0x8dca, Data3 : 0x4225, Data4 : (0xbb, 0xed, 0xee, 0xf8, 0xb8, 0xd7, 0x18, 0xd7)) }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.NetworkOperators.NetworkOperatorTetheringClient> GetTetheringClients()
    private func _n_GetTetheringClients(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringClient>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringClientManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTetheringClients(pThis, __presult))
        }
    }
    public func GetTetheringClients() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringClient> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringClient>> = nil;
        try self._n_GetTetheringClients(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringClient(consuming: __result);
    }
} // INetworkOperatorTetheringClientManager


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringEntitlementCheck
// interface type
open class INetworkOperatorTetheringEntitlementCheck
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0108916d, Data2: 0x9e9a, Data3 : 0x4af6, Data4 : (0x8d, 0xa3, 0x60, 0x49, 0x3b, 0x19, 0xc2, 0x04)) }
    // void AuthorizeTethering(bool, System.String)
    private func _n_AuthorizeTethering(_ allow : boolean, _ entitlementFailureReason : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringEntitlementCheck.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AuthorizeTethering(pThis, allow, entitlementFailureReason))
        }
    }
    public func AuthorizeTethering(allow : boolean, entitlementFailureReason : Swift.String) throws -> Void {
        let __hstr_entitlementFailureReason = try HString(entitlementFailureReason);
        return try withExtendedLifetime(__hstr_entitlementFailureReason) {
        try self._n_AuthorizeTethering(allow, __hstr_entitlementFailureReason.Raw());
        }
    }
} // INetworkOperatorTetheringEntitlementCheck


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager
// interface type
open class INetworkOperatorTetheringManager
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd45a8da0, Data2: 0x0e86, Data3 : 0x4d98, Data4 : (0x8b, 0xa4, 0xdd, 0x70, 0xd4, 0xb7, 0x64, 0xd3)) }
    // [IsSpecialName] System.UInt32 get_MaxClientCount()
    private func _n_get_MaxClientCount(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxClientCount(pThis, __presult))
        }
    }
    public func get_MaxClientCount() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxClientCount(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_ClientCount()
    private func _n_get_ClientCount(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClientCount(pThis, __presult))
        }
    }
    public func get_ClientCount() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_ClientCount(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.TetheringOperationalState get_TetheringOperationalState()
    private func _n_get_TetheringOperationalState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TetheringOperationalState(pThis, __presult))
        }
    }
    public func get_TetheringOperationalState() throws -> Windows.Networking.NetworkOperators.TetheringOperationalState {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState = _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState_Unknown;
        try self._n_get_TetheringOperationalState(&__result);
        return __result;
    }
    // Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration GetCurrentAccessPointConfiguration()
    private func _n_GetCurrentAccessPointConfiguration(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentAccessPointConfiguration(pThis, __presult))
        }
    }
    public func GetCurrentAccessPointConfiguration() throws -> Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration>> = nil;
        try self._n_GetCurrentAccessPointConfiguration(&__result);
        return Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration(consuming: __result);
    }
    // Windows.Foundation.IAsyncAction ConfigureAccessPointAsync(Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration)
    private func _n_ConfigureAccessPointAsync(_ configuration : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringAccessPointConfiguration>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConfigureAccessPointAsync(pThis, configuration, __presult))
        }
    }
    public func ConfigureAccessPointAsync(configuration : Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConfigureAccessPointAsync(RawPointer(configuration), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func ConfigureAccessPoint(configuration : Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConfigureAccessPointAsync(configuration: configuration)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult> StartTetheringAsync()
    private func _n_StartTetheringAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartTetheringAsync(pThis, __presult))
        }
    }
    public func StartTetheringAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult>> = nil;
        try self._n_StartTetheringAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult(consuming: __result);
    }
    public func StartTethering() async throws -> Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.StartTetheringAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult> StopTetheringAsync()
    private func _n_StopTetheringAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StopTetheringAsync(pThis, __presult))
        }
    }
    public func StopTetheringAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult>> = nil;
        try self._n_StopTetheringAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult(consuming: __result);
    }
    public func StopTethering() async throws -> Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.StopTetheringAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var ClientCount : Swift.UInt32 {
        get throws {
            return try get_ClientCount();
        }
    }
    public var MaxClientCount : Swift.UInt32 {
        get throws {
            return try get_MaxClientCount();
        }
    }
    public var TetheringOperationalState : Windows.Networking.NetworkOperators.TetheringOperationalState {
        get throws {
            return try get_TetheringOperationalState();
        }
    }
} // INetworkOperatorTetheringManager


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics
// interface type
open class INetworkOperatorTetheringManagerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3ebcbacc, Data2: 0xf8c3, Data3 : 0x405c, Data4 : (0x99, 0x64, 0x70, 0xa1, 0xee, 0xab, 0xe1, 0x94)) }
    // Windows.Networking.NetworkOperators.TetheringCapability GetTetheringCapability(System.String)
    private func _n_GetTetheringCapability(_ networkAccountId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTetheringCapability(pThis, networkAccountId, __presult))
        }
    }
    public func GetTetheringCapability(networkAccountId : Swift.String) throws -> Windows.Networking.NetworkOperators.TetheringCapability {
        let __hstr_networkAccountId = try HString(networkAccountId);
        return try withExtendedLifetime(__hstr_networkAccountId) {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability = _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_Enabled;
        try self._n_GetTetheringCapability(__hstr_networkAccountId.Raw(), &__result);
        return __result;
        }
    }
    // Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager CreateFromNetworkAccountId(System.String)
    private func _n_CreateFromNetworkAccountId(_ networkAccountId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNetworkAccountId(pThis, networkAccountId, __presult))
        }
    }
    public func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager> {
        let __hstr_networkAccountId = try HString(networkAccountId);
        return try withExtendedLifetime(__hstr_networkAccountId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager>> = nil;
        try self._n_CreateFromNetworkAccountId(__hstr_networkAccountId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager(consuming: __result);
        }
    }
} // INetworkOperatorTetheringManagerStatics


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics2
// interface type
open class INetworkOperatorTetheringManagerStatics2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5b235412, Data2: 0x35f0, Data3 : 0x49e7, Data4 : (0x9b, 0x08, 0x16, 0xd2, 0x78, 0xfb, 0xaa, 0x42)) }
    // Windows.Networking.NetworkOperators.TetheringCapability GetTetheringCapabilityFromConnectionProfile(Windows.Networking.Connectivity.ConnectionProfile)
    private func _n_GetTetheringCapabilityFromConnectionProfile(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTetheringCapabilityFromConnectionProfile(pThis, profile, __presult))
        }
    }
    public func GetTetheringCapabilityFromConnectionProfile(profile : Optional<Windows.Networking.Connectivity.IConnectionProfile>) throws -> Windows.Networking.NetworkOperators.TetheringCapability {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability = _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_Enabled;
        try self._n_GetTetheringCapabilityFromConnectionProfile(RawPointer(profile), &__result);
        return __result;
    }
    // Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager CreateFromConnectionProfile(Windows.Networking.Connectivity.ConnectionProfile)
    private func _n_CreateFromConnectionProfile(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromConnectionProfile(pThis, profile, __presult))
        }
    }
    public func CreateFromConnectionProfile(profile : Optional<Windows.Networking.Connectivity.IConnectionProfile>) throws -> Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager>> = nil;
        try self._n_CreateFromConnectionProfile(RawPointer(profile), &__result);
        return Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager(consuming: __result);
    }
} // INetworkOperatorTetheringManagerStatics2


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics3
// interface type
open class INetworkOperatorTetheringManagerStatics3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8fdaadb6, Data2: 0x4af9, Data3 : 0x4f21, Data4 : (0x9b, 0x58, 0xd5, 0x3e, 0x9f, 0x24, 0x23, 0x1e)) }
    // Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager CreateFromConnectionProfile(Windows.Networking.Connectivity.ConnectionProfile, Windows.Networking.Connectivity.NetworkAdapter)
    private func _n_CreateFromConnectionProfileWithTargetAdapter(_ profile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>>, _ adapter : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromConnectionProfileWithTargetAdapter(pThis, profile, adapter, __presult))
        }
    }
    public func CreateFromConnectionProfileWithTargetAdapter(profile : Optional<Windows.Networking.Connectivity.IConnectionProfile>, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) throws -> Optional<Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManager>> = nil;
        try self._n_CreateFromConnectionProfileWithTargetAdapter(RawPointer(profile), RawPointer(adapter), &__result);
        return Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager(consuming: __result);
    }
} // INetworkOperatorTetheringManagerStatics3


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManagerStatics4
// interface type
open class INetworkOperatorTetheringManagerStatics4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb3b9f9d0, Data2: 0xebff, Data3 : 0x46a4, Data4 : (0xa8, 0x47, 0xd6, 0x63, 0xd8, 0xb0, 0x97, 0x7e)) }
    // bool IsNoConnectionsTimeoutEnabled()
    private func _n_IsNoConnectionsTimeoutEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsNoConnectionsTimeoutEnabled(pThis, __presult))
        }
    }
    public func IsNoConnectionsTimeoutEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsNoConnectionsTimeoutEnabled(&__result);
        return __result;
    }
    // void EnableNoConnectionsTimeout()
    private func _n_EnableNoConnectionsTimeout() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableNoConnectionsTimeout(pThis))
        }
    }
    public func EnableNoConnectionsTimeout() throws -> Void {
        try self._n_EnableNoConnectionsTimeout();
    }
    // Windows.Foundation.IAsyncAction EnableNoConnectionsTimeoutAsync()
    private func _n_EnableNoConnectionsTimeoutAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableNoConnectionsTimeoutAsync(pThis, __presult))
        }
    }
    public func EnableNoConnectionsTimeoutAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_EnableNoConnectionsTimeoutAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func EnableNoConnectionsTimeout() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.EnableNoConnectionsTimeoutAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void DisableNoConnectionsTimeout()
    private func _n_DisableNoConnectionsTimeout() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DisableNoConnectionsTimeout(pThis))
        }
    }
    public func DisableNoConnectionsTimeout() throws -> Void {
        try self._n_DisableNoConnectionsTimeout();
    }
    // Windows.Foundation.IAsyncAction DisableNoConnectionsTimeoutAsync()
    private func _n_DisableNoConnectionsTimeoutAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DisableNoConnectionsTimeoutAsync(pThis, __presult))
        }
    }
    public func DisableNoConnectionsTimeoutAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_DisableNoConnectionsTimeoutAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func DisableNoConnectionsTimeout() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DisableNoConnectionsTimeoutAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // INetworkOperatorTetheringManagerStatics4


// type: Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult
// interface type
open class INetworkOperatorTetheringOperationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xebd203a1, Data2: 0x01ba, Data3 : 0x476d, Data4 : (0xb4, 0xb3, 0xbf, 0x3d, 0x12, 0xc8, 0xf8, 0x0c)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.TetheringOperationStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringOperationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.TetheringOperationStatus {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_AdditionalErrorMessage()
    private func _n_get_AdditionalErrorMessage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CINetworkOperatorTetheringOperationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AdditionalErrorMessage(pThis, __presult))
        }
    }
    public func get_AdditionalErrorMessage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AdditionalErrorMessage(&__result);
        return Swift.String(from: __result);
    }
    public var AdditionalErrorMessage : Swift.String {
        get throws {
            return try get_AdditionalErrorMessage();
        }
    }
    public var Status : Windows.Networking.NetworkOperators.TetheringOperationStatus {
        get throws {
            return try get_Status();
        }
    }
} // INetworkOperatorTetheringOperationResult


// type: Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults
// interface type
open class IProvisionFromXmlDocumentResults
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x217700e0, Data2: 0x8203, Data3 : 0x11df, Data4 : (0xad, 0xb9, 0xf4, 0xce, 0x46, 0x2d, 0x91, 0x37)) }
    // [IsSpecialName] bool get_AllElementsProvisioned()
    private func _n_get_AllElementsProvisioned(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIProvisionFromXmlDocumentResults.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllElementsProvisioned(pThis, __presult))
        }
    }
    public func get_AllElementsProvisioned() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AllElementsProvisioned(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_ProvisionResultsXml()
    private func _n_get_ProvisionResultsXml(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIProvisionFromXmlDocumentResults.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProvisionResultsXml(pThis, __presult))
        }
    }
    public func get_ProvisionResultsXml() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProvisionResultsXml(&__result);
        return Swift.String(from: __result);
    }
    public var AllElementsProvisioned : boolean {
        get throws {
            return try get_AllElementsProvisioned();
        }
    }
    public var ProvisionResultsXml : Swift.String {
        get throws {
            return try get_ProvisionResultsXml();
        }
    }
} // IProvisionFromXmlDocumentResults


// type: Windows.Networking.NetworkOperators.IProvisionedProfile
// interface type
open class IProvisionedProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x217700e0, Data2: 0x8202, Data3 : 0x11df, Data4 : (0xad, 0xb9, 0xf4, 0xce, 0x46, 0x2d, 0x91, 0x37)) }
    // void UpdateCost(Windows.Networking.Connectivity.NetworkCostType)
    private func _n_UpdateCost(_ value : _q_CWindows_CNetworking_CConnectivity_CNetworkCostType) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIProvisionedProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateCost(pThis, value))
        }
    }
    public func UpdateCost(value : Windows.Networking.Connectivity.NetworkCostType) throws -> Void {
        try self._n_UpdateCost(value);
    }
    // void UpdateUsage(Windows.Networking.NetworkOperators.ProfileUsage)
    private func _n_UpdateUsage(_ value : _q_CWindows_CNetworking_CNetworkOperators_CProfileUsage) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIProvisionedProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateUsage(pThis, value))
        }
    }
    public func UpdateUsage(value : Windows.Networking.NetworkOperators.ProfileUsage) throws -> Void {
        try self._n_UpdateUsage(value);
    }
} // IProvisionedProfile


// type: Windows.Networking.NetworkOperators.IProvisioningAgent
// interface type
open class IProvisioningAgent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x217700e0, Data2: 0x8201, Data3 : 0x11df, Data4 : (0xad, 0xb9, 0xf4, 0xce, 0x46, 0x2d, 0x91, 0x37)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults> ProvisionFromXmlDocumentAsync(System.String)
    private func _n_ProvisionFromXmlDocumentAsync(_ provisioningXmlDocument : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CProvisionFromXmlDocumentResults>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIProvisioningAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ProvisionFromXmlDocumentAsync(pThis, provisioningXmlDocument, __presult))
        }
    }
    public func ProvisionFromXmlDocumentAsync(provisioningXmlDocument : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CProvisionFromXmlDocumentResults> {
        let __hstr_provisioningXmlDocument = try HString(provisioningXmlDocument);
        return try withExtendedLifetime(__hstr_provisioningXmlDocument) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CProvisionFromXmlDocumentResults>> = nil;
        try self._n_ProvisionFromXmlDocumentAsync(__hstr_provisioningXmlDocument.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CProvisionFromXmlDocumentResults(consuming: __result);
        }
    }
    public func ProvisionFromXmlDocument(provisioningXmlDocument : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ProvisionFromXmlDocumentAsync(provisioningXmlDocument: provisioningXmlDocument)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Networking.NetworkOperators.ProvisionedProfile GetProvisionedProfile(Windows.Networking.NetworkOperators.ProfileMediaType, System.String)
    private func _n_GetProvisionedProfile(_ mediaType : _q_CWindows_CNetworking_CNetworkOperators_CProfileMediaType, _ profileName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIProvisionedProfile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIProvisioningAgent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetProvisionedProfile(pThis, mediaType, profileName, __presult))
        }
    }
    public func GetProvisionedProfile(mediaType : Windows.Networking.NetworkOperators.ProfileMediaType, profileName : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IProvisionedProfile> {
        let __hstr_profileName = try HString(profileName);
        return try withExtendedLifetime(__hstr_profileName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIProvisionedProfile>> = nil;
        try self._n_GetProvisionedProfile(mediaType, __hstr_profileName.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IProvisionedProfile(consuming: __result);
        }
    }
} // IProvisioningAgent


// type: Windows.Networking.NetworkOperators.IProvisioningAgentStaticMethods
// interface type
open class IProvisioningAgentStaticMethods
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x217700e0, Data2: 0x8101, Data3 : 0x11df, Data4 : (0xad, 0xb9, 0xf4, 0xce, 0x46, 0x2d, 0x91, 0x37)) }
    // Windows.Networking.NetworkOperators.ProvisioningAgent CreateFromNetworkAccountId(System.String)
    private func _n_CreateFromNetworkAccountId(_ networkAccountId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIProvisioningAgent>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIProvisioningAgentStaticMethods.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNetworkAccountId(pThis, networkAccountId, __presult))
        }
    }
    public func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IProvisioningAgent> {
        let __hstr_networkAccountId = try HString(networkAccountId);
        return try withExtendedLifetime(__hstr_networkAccountId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIProvisioningAgent>> = nil;
        try self._n_CreateFromNetworkAccountId(__hstr_networkAccountId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IProvisioningAgent(consuming: __result);
        }
    }
} // IProvisioningAgentStaticMethods


// type: Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails
// interface type
open class ITetheringEntitlementCheckTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x03c65e9d, Data2: 0x5926, Data3 : 0x41f3, Data4 : (0xa9, 0x4e, 0xb5, 0x09, 0x26, 0xfc, 0x42, 0x1b)) }
    // [IsSpecialName] System.String get_NetworkAccountId()
    private func _n_get_NetworkAccountId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CITetheringEntitlementCheckTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAccountId(pThis, __presult))
        }
    }
    public func get_NetworkAccountId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_NetworkAccountId(&__result);
        return Swift.String(from: __result);
    }
    // void AllowTethering()
    private func _n_AllowTethering() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CITetheringEntitlementCheckTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AllowTethering(pThis))
        }
    }
    public func AllowTethering() throws -> Void {
        try self._n_AllowTethering();
    }
    // void DenyTethering(System.String)
    private func _n_DenyTethering(_ entitlementFailureReason : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CITetheringEntitlementCheckTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DenyTethering(pThis, entitlementFailureReason))
        }
    }
    public func DenyTethering(entitlementFailureReason : Swift.String) throws -> Void {
        let __hstr_entitlementFailureReason = try HString(entitlementFailureReason);
        return try withExtendedLifetime(__hstr_entitlementFailureReason) {
        try self._n_DenyTethering(__hstr_entitlementFailureReason.Raw());
        }
    }
    public var NetworkAccountId : Swift.String {
        get throws {
            return try get_NetworkAccountId();
        }
    }
} // ITetheringEntitlementCheckTriggerDetails


// type: Windows.Networking.NetworkOperators.IUssdMessage
// interface type
open class IUssdMessage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f9acf82, Data2: 0x2004, Data3 : 0x4d5d, Data4 : (0xbf, 0x81, 0x2a, 0xba, 0x1b, 0x4b, 0xe4, 0xa8)) }
    // [IsSpecialName] System.Byte get_DataCodingScheme()
    private func _n_get_DataCodingScheme(_ __presult: UnsafeMutablePointer<UINT8>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataCodingScheme(pThis, __presult))
        }
    }
    public func get_DataCodingScheme() throws -> Swift.UInt8 {
        var __result : UINT8 = 0;
        try self._n_get_DataCodingScheme(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DataCodingScheme(System.Byte)
    private func _n_put_DataCodingScheme(_ value : UINT8) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DataCodingScheme(pThis, value))
        }
    }
    public func put_DataCodingScheme(value : Swift.UInt8) throws -> Void {
        try self._n_put_DataCodingScheme(value);
    }
    // System.Byte[] GetPayload()
    private func _n_GetPayload(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<UINT8>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPayload(pThis, __presultLength, __presult))
        }
    }
    public func GetPayload() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<UINT8>> = nil;
        try self._n_GetPayload(&__resultLength, &__result);
        return __resultLength;
    }
    // void SetPayload(System.Byte[])
    private func _n_SetPayload(_ valueLength : UINT32, _ value : Optional<UnsafeMutablePointer<UINT8>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetPayload(pThis, valueLength, value))
        }
    }
    public func SetPayload(valueLength : UINT32, value : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        try self._n_SetPayload(valueLength, value);
    }
    // [IsSpecialName] System.String get_PayloadAsText()
    private func _n_get_PayloadAsText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PayloadAsText(pThis, __presult))
        }
    }
    public func get_PayloadAsText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_PayloadAsText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_PayloadAsText(System.String)
    private func _n_put_PayloadAsText(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PayloadAsText(pThis, value))
        }
    }
    public func put_PayloadAsText(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_PayloadAsText(__hstr_value.Raw());
        }
    }
    public var DataCodingScheme : Swift.UInt8 {
        get throws {
            return try get_DataCodingScheme();
        }
    }
    public var PayloadAsText : Swift.String {
        get throws {
            return try get_PayloadAsText();
        }
    }
} // IUssdMessage


// type: Windows.Networking.NetworkOperators.IUssdMessageFactory
// interface type
// ACTIVATION INTERFACE
open class IUssdMessageFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f9acf82, Data2: 0x1003, Data3 : 0x4d5d, Data4 : (0xbf, 0x81, 0x2a, 0xba, 0x1b, 0x4b, 0xe4, 0xa8)) }
    // Windows.Networking.NetworkOperators.UssdMessage CreateMessage(System.String)
    private func _n_CreateMessage(_ messageText : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdMessageFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMessage(pThis, messageText, __presult))
        }
    }
    public func CreateMessage(messageText : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IUssdMessage> {
        let __hstr_messageText = try HString(messageText);
        return try withExtendedLifetime(__hstr_messageText) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage>> = nil;
        try self._n_CreateMessage(__hstr_messageText.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IUssdMessage(consuming: __result);
        }
    }
} // IUssdMessageFactory


// type: Windows.Networking.NetworkOperators.IUssdReply
// interface type
open class IUssdReply
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f9acf82, Data2: 0x2005, Data3 : 0x4d5d, Data4 : (0xbf, 0x81, 0x2a, 0xba, 0x1b, 0x4b, 0xe4, 0xa8)) }
    // [IsSpecialName] Windows.Networking.NetworkOperators.UssdResultCode get_ResultCode()
    private func _n_get_ResultCode(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdReply.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResultCode(pThis, __presult))
        }
    }
    public func get_ResultCode() throws -> Windows.Networking.NetworkOperators.UssdResultCode {
        var __result : _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode = _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode_NoActionRequired;
        try self._n_get_ResultCode(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.NetworkOperators.UssdMessage get_Message()
    private func _n_get_Message(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdReply.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Message(pThis, __presult))
        }
    }
    public func get_Message() throws -> Optional<Windows.Networking.NetworkOperators.IUssdMessage> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage>> = nil;
        try self._n_get_Message(&__result);
        return Windows.Networking.NetworkOperators.IUssdMessage(consuming: __result);
    }
    public var Message : Optional<Windows.Networking.NetworkOperators.IUssdMessage> {
        get throws {
            return try get_Message();
        }
    }
    public var ResultCode : Windows.Networking.NetworkOperators.UssdResultCode {
        get throws {
            return try get_ResultCode();
        }
    }
} // IUssdReply


// type: Windows.Networking.NetworkOperators.IUssdSession
// interface type
open class IUssdSession
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f9acf82, Data2: 0x2002, Data3 : 0x4d5d, Data4 : (0xbf, 0x81, 0x2a, 0xba, 0x1b, 0x4b, 0xe4, 0xa8)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.NetworkOperators.UssdReply> SendMessageAndGetReplyAsync(Windows.Networking.NetworkOperators.UssdMessage)
    private func _n_SendMessageAndGetReplyAsync(_ message : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdMessage>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CUssdReply>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SendMessageAndGetReplyAsync(pThis, message, __presult))
        }
    }
    public func SendMessageAndGetReplyAsync(message : Optional<Windows.Networking.NetworkOperators.IUssdMessage>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CUssdReply> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CUssdReply>> = nil;
        try self._n_SendMessageAndGetReplyAsync(RawPointer(message), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CUssdReply(consuming: __result);
    }
    public func SendMessageAndGetReply(message : Optional<Windows.Networking.NetworkOperators.IUssdMessage>) async throws -> Optional<Windows.Networking.NetworkOperators.IUssdReply> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SendMessageAndGetReplyAsync(message: message)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void Close()
    private func _n_Close() throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
        }
    }
    public func Close() throws -> Void {
        try self._n_Close();
    }
} // IUssdSession


// type: Windows.Networking.NetworkOperators.IUssdSessionStatics
// interface type
open class IUssdSessionStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f9acf82, Data2: 0x1001, Data3 : 0x4d5d, Data4 : (0xbf, 0x81, 0x2a, 0xba, 0x1b, 0x4b, 0xe4, 0xa8)) }
    // Windows.Networking.NetworkOperators.UssdSession CreateFromNetworkAccountId(System.String)
    private func _n_CreateFromNetworkAccountId(_ networkAccountId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdSession>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdSessionStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNetworkAccountId(pThis, networkAccountId, __presult))
        }
    }
    public func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IUssdSession> {
        let __hstr_networkAccountId = try HString(networkAccountId);
        return try withExtendedLifetime(__hstr_networkAccountId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdSession>> = nil;
        try self._n_CreateFromNetworkAccountId(__hstr_networkAccountId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IUssdSession(consuming: __result);
        }
    }
    // Windows.Networking.NetworkOperators.UssdSession CreateFromNetworkInterfaceId(System.String)
    private func _n_CreateFromNetworkInterfaceId(_ networkInterfaceId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdSession>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CNetworkOperators_CIUssdSessionStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNetworkInterfaceId(pThis, networkInterfaceId, __presult))
        }
    }
    public func CreateFromNetworkInterfaceId(networkInterfaceId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.IUssdSession> {
        let __hstr_networkInterfaceId = try HString(networkInterfaceId);
        return try withExtendedLifetime(__hstr_networkInterfaceId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CNetworkOperators_CIUssdSession>> = nil;
        try self._n_CreateFromNetworkInterfaceId(__hstr_networkInterfaceId.Raw(), &__result);
        return Windows.Networking.NetworkOperators.IUssdSession(consuming: __result);
        }
    }
} // IUssdSessionStatics


// type: Windows.Networking.NetworkOperators.KnownCSimFilePaths
// static class
public class KnownCSimFilePaths
{
    private struct _IKnownCSimFilePathsStatics {
        static var x : IKnownCSimFilePathsStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.KnownCSimFilePaths")
    }
    public static var KnownCSimFilePathsStatics : IKnownCSimFilePathsStatics {
        _IKnownCSimFilePathsStatics.x
    }
    public static func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownCSimFilePathsStatics.get_EFSpn();
    }
    public static func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownCSimFilePathsStatics.get_Gid1();
    }
    public static func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownCSimFilePathsStatics.get_Gid2();
    }
    public static var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownCSimFilePathsStatics.EFSpn;
        }
    }
    public static var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownCSimFilePathsStatics.Gid1;
        }
    }
    public static var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownCSimFilePathsStatics.Gid2;
        }
    }
}

// type: Windows.Networking.NetworkOperators.KnownRuimFilePaths
// static class
public class KnownRuimFilePaths
{
    private struct _IKnownRuimFilePathsStatics {
        static var x : IKnownRuimFilePathsStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.KnownRuimFilePaths")
    }
    public static var KnownRuimFilePathsStatics : IKnownRuimFilePathsStatics {
        _IKnownRuimFilePathsStatics.x
    }
    public static func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownRuimFilePathsStatics.get_EFSpn();
    }
    public static func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownRuimFilePathsStatics.get_Gid1();
    }
    public static func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownRuimFilePathsStatics.get_Gid2();
    }
    public static var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownRuimFilePathsStatics.EFSpn;
        }
    }
    public static var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownRuimFilePathsStatics.Gid1;
        }
    }
    public static var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownRuimFilePathsStatics.Gid2;
        }
    }
}

// type: Windows.Networking.NetworkOperators.KnownSimFilePaths
// static class
public class KnownSimFilePaths
{
    private struct _IKnownSimFilePathsStatics {
        static var x : IKnownSimFilePathsStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.KnownSimFilePaths")
    }
    public static var KnownSimFilePathsStatics : IKnownSimFilePathsStatics {
        _IKnownSimFilePathsStatics.x
    }
    public static func get_EFOns() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownSimFilePathsStatics.get_EFOns();
    }
    public static func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownSimFilePathsStatics.get_EFSpn();
    }
    public static func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownSimFilePathsStatics.get_Gid1();
    }
    public static func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownSimFilePathsStatics.get_Gid2();
    }
    public static var EFOns : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownSimFilePathsStatics.EFOns;
        }
    }
    public static var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownSimFilePathsStatics.EFSpn;
        }
    }
    public static var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownSimFilePathsStatics.Gid1;
        }
    }
    public static var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownSimFilePathsStatics.Gid2;
        }
    }
}

// type: Windows.Networking.NetworkOperators.KnownUSimFilePaths
// static class
public class KnownUSimFilePaths
{
    private struct _IKnownUSimFilePathsStatics {
        static var x : IKnownUSimFilePathsStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.KnownUSimFilePaths")
    }
    public static var KnownUSimFilePathsStatics : IKnownUSimFilePathsStatics {
        _IKnownUSimFilePathsStatics.x
    }
    public static func get_EFSpn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownUSimFilePathsStatics.get_EFSpn();
    }
    public static func get_EFOpl() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownUSimFilePathsStatics.get_EFOpl();
    }
    public static func get_EFPnn() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownUSimFilePathsStatics.get_EFPnn();
    }
    public static func get_Gid1() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownUSimFilePathsStatics.get_Gid1();
    }
    public static func get_Gid2() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        return try KnownUSimFilePathsStatics.get_Gid2();
    }
    public static var EFOpl : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownUSimFilePathsStatics.EFOpl;
        }
    }
    public static var EFPnn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownUSimFilePathsStatics.EFPnn;
        }
    }
    public static var EFSpn : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownUSimFilePathsStatics.EFSpn;
        }
    }
    public static var Gid1 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownUSimFilePathsStatics.Gid1;
        }
    }
    public static var Gid2 : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        return try KnownUSimFilePathsStatics.Gid2;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandAccount
// runtime class
public class MobileBroadbandAccount
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandAccount;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandAccount?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandAccount { return _self; }
    private struct _IMobileBroadbandAccountStatics {
        static var x : IMobileBroadbandAccountStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.MobileBroadbandAccount")
    }
    public static var MobileBroadbandAccountStatics : IMobileBroadbandAccountStatics {
        _IMobileBroadbandAccountStatics.x
    }
    public static func get_AvailableNetworkAccountIds() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try MobileBroadbandAccountStatics.get_AvailableNetworkAccountIds();
    }
    public static func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccount> {
        return try Windows.Networking.NetworkOperators.MobileBroadbandAccount(plok: MobileBroadbandAccountStatics.CreateFromNetworkAccountId(networkAccountId: networkAccountId));
    }
    public static var AvailableNetworkAccountIds : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
        return try MobileBroadbandAccountStatics.AvailableNetworkAccountIds;
        }
    }
    public func get_NetworkAccountId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try _ifc.get_NetworkAccountId();
    }
    public func get_ServiceProviderGuid() throws -> GUID {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try _ifc.get_ServiceProviderGuid();
    }
    public func get_ServiceProviderName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try _ifc.get_ServiceProviderName();
    }
    public func get_CurrentNetwork() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandNetwork> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandNetwork(plok: _ifc.get_CurrentNetwork());
    }
    public func get_CurrentDeviceInformation() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation(plok: _ifc.get_CurrentDeviceInformation());
    }
    public var CurrentDeviceInformation : Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation(plok: _ifc.CurrentDeviceInformation);
        }
    }
    public var CurrentNetwork : Optional<Windows.Networking.NetworkOperators.MobileBroadbandNetwork> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandNetwork(plok: _ifc.CurrentNetwork);
        }
    }
    public var NetworkAccountId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try _ifc.NetworkAccountId;
        }
    }
    public var ServiceProviderGuid : GUID {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try _ifc.ServiceProviderGuid;
        }
    }
    public var ServiceProviderName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount = try _self.QueryInterface();
        return try _ifc.ServiceProviderName;
        }
    }
    public func GetConnectionProfiles() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount2 = try _self.QueryInterface();
        return try _ifc.GetConnectionProfiles();
    }
    public func get_AccountExperienceUrl() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount3 = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_AccountExperienceUrl());
    }
    public var AccountExperienceUrl : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccount3 = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.AccountExperienceUrl);
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs
// runtime class
public class MobileBroadbandAccountEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandAccountEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandAccountEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandAccountEventArgs { return _self; }
    public func get_NetworkAccountId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountEventArgs = try _self.QueryInterface();
        return try _ifc.get_NetworkAccountId();
    }
    public var NetworkAccountId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountEventArgs = try _self.QueryInterface();
        return try _ifc.NetworkAccountId;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs
// runtime class
public class MobileBroadbandAccountUpdatedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs { return _self; }
    public func get_NetworkAccountId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_NetworkAccountId();
    }
    public func get_HasDeviceInformationChanged() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_HasDeviceInformationChanged();
    }
    public func get_HasNetworkChanged() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs = try _self.QueryInterface();
        return try _ifc.get_HasNetworkChanged();
    }
    public var HasDeviceInformationChanged : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs = try _self.QueryInterface();
        return try _ifc.HasDeviceInformationChanged;
        }
    }
    public var HasNetworkChanged : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs = try _self.QueryInterface();
        return try _ifc.HasNetworkChanged;
        }
    }
    public var NetworkAccountId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountUpdatedEventArgs = try _self.QueryInterface();
        return try _ifc.NetworkAccountId;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher
// runtime class
public class MobileBroadbandAccountWatcher
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher")
        try super.init(plok: _self.QueryInterface())
    }
    public func add_AccountAdded(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher>, Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.add_AccountAdded(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountEventArgs(cb: handler).Interface());
    }
    public func remove_AccountAdded(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.remove_AccountAdded(cookie: cookie);
    }
    public func add_AccountUpdated(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher>, Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.add_AccountUpdated(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountUpdatedEventArgs(cb: handler).Interface());
    }
    public func remove_AccountUpdated(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.remove_AccountUpdated(cookie: cookie);
    }
    public func add_AccountRemoved(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher>, Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.add_AccountRemoved(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountEventArgs(cb: handler).Interface());
    }
    public func remove_AccountRemoved(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.remove_AccountRemoved(cookie: cookie);
    }
    public func add_EnumerationCompleted(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.add_EnumerationCompleted(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_EnumerationCompleted(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.remove_EnumerationCompleted(cookie: cookie);
    }
    public func add_Stopped(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.add_Stopped(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_Stopped(cookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.remove_Stopped(cookie: cookie);
    }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func Start() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.Start();
    }
    public func Stop() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAccountWatcher = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus
// enum type
public typealias MobileBroadbandAccountWatcherStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus;

// type: Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar
// runtime class
public class MobileBroadbandAntennaSar
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar { return _self; }
    public init(antennaIndex : Swift.Int32, sarBackoffIndex : Swift.Int32) throws {
        let _af : IMobileBroadbandAntennaSarFactory = try RoGetActivationFactory("Windows.Networking.NetworkOperators.MobileBroadbandAntennaSar");
        _self = try _af.CreateWithIndex(antennaIndex: antennaIndex, sarBackoffIndex: sarBackoffIndex)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_AntennaIndex() throws -> Swift.Int32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar = try _self.QueryInterface();
        return try _ifc.get_AntennaIndex();
    }
    public func get_SarBackoffIndex() throws -> Swift.Int32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar = try _self.QueryInterface();
        return try _ifc.get_SarBackoffIndex();
    }
    public var AntennaIndex : Swift.Int32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar = try _self.QueryInterface();
        return try _ifc.AntennaIndex;
        }
    }
    public var SarBackoffIndex : Swift.Int32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandAntennaSar = try _self.QueryInterface();
        return try _ifc.SarBackoffIndex;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCellCdma
// runtime class
public class MobileBroadbandCellCdma
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma { return _self; }
    public func get_BaseStationId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_BaseStationId();
    }
    public func get_BaseStationPNCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_BaseStationPNCode();
    }
    public func get_BaseStationLatitude() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_BaseStationLatitude();
    }
    public func get_BaseStationLongitude() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_BaseStationLongitude();
    }
    public func get_BaseStationLastBroadcastGpsTime() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_BaseStationLastBroadcastGpsTime();
    }
    public func get_NetworkId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_NetworkId();
    }
    public func get_PilotSignalStrengthInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_PilotSignalStrengthInDB();
    }
    public func get_SystemId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.get_SystemId();
    }
    public var BaseStationId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.BaseStationId;
        }
    }
    public var BaseStationLastBroadcastGpsTime : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.BaseStationLastBroadcastGpsTime;
        }
    }
    public var BaseStationLatitude : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.BaseStationLatitude;
        }
    }
    public var BaseStationLongitude : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.BaseStationLongitude;
        }
    }
    public var BaseStationPNCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.BaseStationPNCode;
        }
    }
    public var NetworkId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.NetworkId;
        }
    }
    public var PilotSignalStrengthInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.PilotSignalStrengthInDB;
        }
    }
    public var SystemId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellCdma = try _self.QueryInterface();
        return try _ifc.SystemId;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCellGsm
// runtime class
public class MobileBroadbandCellGsm
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm { return _self; }
    public func get_BaseStationId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.get_BaseStationId();
    }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.get_CellId();
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.get_ChannelNumber();
    }
    public func get_LocationAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.get_LocationAreaCode();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func get_ReceivedSignalStrengthInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.get_ReceivedSignalStrengthInDBm();
    }
    public func get_TimingAdvanceInBitPeriods() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.get_TimingAdvanceInBitPeriods();
    }
    public var BaseStationId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.BaseStationId;
        }
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.CellId;
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.ChannelNumber;
        }
    }
    public var LocationAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.LocationAreaCode;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var ReceivedSignalStrengthInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.ReceivedSignalStrengthInDBm;
        }
    }
    public var TimingAdvanceInBitPeriods : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellGsm = try _self.QueryInterface();
        return try _ifc.TimingAdvanceInBitPeriods;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCellLte
// runtime class
public class MobileBroadbandCellLte
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCellLte?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCellLte { return _self; }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_CellId();
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_ChannelNumber();
    }
    public func get_PhysicalCellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_PhysicalCellId();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func get_ReferenceSignalReceivedPowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_ReferenceSignalReceivedPowerInDBm();
    }
    public func get_ReferenceSignalReceivedQualityInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_ReferenceSignalReceivedQualityInDBm();
    }
    public func get_TimingAdvanceInBitPeriods() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_TimingAdvanceInBitPeriods();
    }
    public func get_TrackingAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.get_TrackingAreaCode();
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.CellId;
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.ChannelNumber;
        }
    }
    public var PhysicalCellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.PhysicalCellId;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var ReferenceSignalReceivedPowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.ReferenceSignalReceivedPowerInDBm;
        }
    }
    public var ReferenceSignalReceivedQualityInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.ReferenceSignalReceivedQualityInDBm;
        }
    }
    public var TimingAdvanceInBitPeriods : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.TimingAdvanceInBitPeriods;
        }
    }
    public var TrackingAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellLte = try _self.QueryInterface();
        return try _ifc.TrackingAreaCode;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCellNR
// runtime class
public class MobileBroadbandCellNR
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCellNR?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCellNR { return _self; }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT64> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_CellId();
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_ChannelNumber();
    }
    public func get_PhysicalCellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_PhysicalCellId();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func get_ReferenceSignalReceivedPowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_ReferenceSignalReceivedPowerInDBm();
    }
    public func get_ReferenceSignalReceivedQualityInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_ReferenceSignalReceivedQualityInDBm();
    }
    public func get_TimingAdvanceInNanoseconds() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_TimingAdvanceInNanoseconds();
    }
    public func get_TrackingAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_TrackingAreaCode();
    }
    public func get_SignalToNoiseRatioInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.get_SignalToNoiseRatioInDB();
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT64> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.CellId;
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.ChannelNumber;
        }
    }
    public var PhysicalCellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.PhysicalCellId;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var ReferenceSignalReceivedPowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.ReferenceSignalReceivedPowerInDBm;
        }
    }
    public var ReferenceSignalReceivedQualityInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.ReferenceSignalReceivedQualityInDBm;
        }
    }
    public var SignalToNoiseRatioInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.SignalToNoiseRatioInDB;
        }
    }
    public var TimingAdvanceInNanoseconds : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.TimingAdvanceInNanoseconds;
        }
    }
    public var TrackingAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellNR = try _self.QueryInterface();
        return try _ifc.TrackingAreaCode;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCellTdscdma
// runtime class
public class MobileBroadbandCellTdscdma
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma { return _self; }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_CellId();
    }
    public func get_CellParameterId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_CellParameterId();
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_ChannelNumber();
    }
    public func get_LocationAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_LocationAreaCode();
    }
    public func get_PathLossInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_PathLossInDB();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func get_ReceivedSignalCodePowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_ReceivedSignalCodePowerInDBm();
    }
    public func get_TimingAdvanceInBitPeriods() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.get_TimingAdvanceInBitPeriods();
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.CellId;
        }
    }
    public var CellParameterId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.CellParameterId;
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.ChannelNumber;
        }
    }
    public var LocationAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.LocationAreaCode;
        }
    }
    public var PathLossInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.PathLossInDB;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var ReceivedSignalCodePowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.ReceivedSignalCodePowerInDBm;
        }
    }
    public var TimingAdvanceInBitPeriods : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellTdscdma = try _self.QueryInterface();
        return try _ifc.TimingAdvanceInBitPeriods;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCellUmts
// runtime class
public class MobileBroadbandCellUmts
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts { return _self; }
    public func get_CellId() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_CellId();
    }
    public func get_ChannelNumber() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_ChannelNumber();
    }
    public func get_LocationAreaCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_LocationAreaCode();
    }
    public func get_PathLossInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_PathLossInDB();
    }
    public func get_PrimaryScramblingCode() throws -> Optional<ClosedGenerics.IReference_1_INT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_PrimaryScramblingCode();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func get_ReceivedSignalCodePowerInDBm() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_ReceivedSignalCodePowerInDBm();
    }
    public func get_SignalToNoiseRatioInDB() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.get_SignalToNoiseRatioInDB();
    }
    public var CellId : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.CellId;
        }
    }
    public var ChannelNumber : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.ChannelNumber;
        }
    }
    public var LocationAreaCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.LocationAreaCode;
        }
    }
    public var PathLossInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.PathLossInDB;
        }
    }
    public var PrimaryScramblingCode : Optional<ClosedGenerics.IReference_1_INT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.PrimaryScramblingCode;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var ReceivedSignalCodePowerInDBm : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.ReceivedSignalCodePowerInDBm;
        }
    }
    public var SignalToNoiseRatioInDB : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellUmts = try _self.QueryInterface();
        return try _ifc.SignalToNoiseRatioInDB;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo
// runtime class
public class MobileBroadbandCellsInfo
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo { return _self; }
    public func get_NeighboringCellsCdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_NeighboringCellsCdma();
    }
    public func get_NeighboringCellsGsm() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_NeighboringCellsGsm();
    }
    public func get_NeighboringCellsLte() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_NeighboringCellsLte();
    }
    public func get_NeighboringCellsTdscdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_NeighboringCellsTdscdma();
    }
    public func get_NeighboringCellsUmts() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_NeighboringCellsUmts();
    }
    public func get_ServingCellsCdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_ServingCellsCdma();
    }
    public func get_ServingCellsGsm() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_ServingCellsGsm();
    }
    public func get_ServingCellsLte() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_ServingCellsLte();
    }
    public func get_ServingCellsTdscdma() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_ServingCellsTdscdma();
    }
    public func get_ServingCellsUmts() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.get_ServingCellsUmts();
    }
    public var NeighboringCellsCdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.NeighboringCellsCdma;
        }
    }
    public var NeighboringCellsGsm : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.NeighboringCellsGsm;
        }
    }
    public var NeighboringCellsLte : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.NeighboringCellsLte;
        }
    }
    public var NeighboringCellsTdscdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.NeighboringCellsTdscdma;
        }
    }
    public var NeighboringCellsUmts : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.NeighboringCellsUmts;
        }
    }
    public var ServingCellsCdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellCdma> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.ServingCellsCdma;
        }
    }
    public var ServingCellsGsm : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellGsm> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.ServingCellsGsm;
        }
    }
    public var ServingCellsLte : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellLte> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.ServingCellsLte;
        }
    }
    public var ServingCellsTdscdma : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellTdscdma> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.ServingCellsTdscdma;
        }
    }
    public var ServingCellsUmts : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellUmts> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo = try _self.QueryInterface();
        return try _ifc.ServingCellsUmts;
        }
    }
    public func get_NeighboringCellsNR() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo2 = try _self.QueryInterface();
        return try _ifc.get_NeighboringCellsNR();
    }
    public func get_ServingCellsNR() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo2 = try _self.QueryInterface();
        return try _ifc.get_ServingCellsNR();
    }
    public var NeighboringCellsNR : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo2 = try _self.QueryInterface();
        return try _ifc.NeighboringCellsNR;
        }
    }
    public var ServingCellsNR : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellNR> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCellsInfo2 = try _self.QueryInterface();
        return try _ifc.ServingCellsNR;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandCurrentSlotIndexChangedEventArgs
// runtime class
public class MobileBroadbandCurrentSlotIndexChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandCurrentSlotIndexChangedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandCurrentSlotIndexChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandCurrentSlotIndexChangedEventArgs { return _self; }
    public func get_CurrentSlotIndex() throws -> Swift.Int32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCurrentSlotIndexChangedEventArgs = try _self.QueryInterface();
        return try _ifc.get_CurrentSlotIndex();
    }
    public var CurrentSlotIndex : Swift.Int32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandCurrentSlotIndexChangedEventArgs = try _self.QueryInterface();
        return try _ifc.CurrentSlotIndex;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation
// runtime class
public class MobileBroadbandDeviceInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation { return _self; }
    public func get_NetworkDeviceStatus() throws -> Windows.Networking.NetworkOperators.NetworkDeviceStatus {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_NetworkDeviceStatus();
    }
    public func get_Manufacturer() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_Manufacturer();
    }
    public func get_Model() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_Model();
    }
    public func get_FirmwareInformation() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_FirmwareInformation();
    }
    public func get_CellularClass() throws -> Windows.Devices.Sms.CellularClass {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_CellularClass();
    }
    public func get_DataClasses() throws -> Windows.Networking.NetworkOperators.DataClasses {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_DataClasses();
    }
    public func get_CustomDataClass() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_CustomDataClass();
    }
    public func get_MobileEquipmentId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_MobileEquipmentId();
    }
    public func get_TelephoneNumbers() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_TelephoneNumbers();
    }
    public func get_SubscriberId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_SubscriberId();
    }
    public func get_SimIccId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_SimIccId();
    }
    public func get_DeviceType() throws -> Windows.Networking.NetworkOperators.MobileBroadbandDeviceType {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_DeviceType();
    }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public func get_CurrentRadioState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.get_CurrentRadioState();
    }
    public var CellularClass : Windows.Devices.Sms.CellularClass {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.CellularClass;
        }
    }
    public var CurrentRadioState : Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.CurrentRadioState;
        }
    }
    public var CustomDataClass : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.CustomDataClass;
        }
    }
    public var DataClasses : Windows.Networking.NetworkOperators.DataClasses {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.DataClasses;
        }
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var DeviceType : Windows.Networking.NetworkOperators.MobileBroadbandDeviceType {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.DeviceType;
        }
    }
    public var FirmwareInformation : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.FirmwareInformation;
        }
    }
    public var Manufacturer : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.Manufacturer;
        }
    }
    public var MobileEquipmentId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.MobileEquipmentId;
        }
    }
    public var Model : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.Model;
        }
    }
    public var NetworkDeviceStatus : Windows.Networking.NetworkOperators.NetworkDeviceStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.NetworkDeviceStatus;
        }
    }
    public var SimIccId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.SimIccId;
        }
    }
    public var SubscriberId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.SubscriberId;
        }
    }
    public var TelephoneNumbers : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation = try _self.QueryInterface();
        return try _ifc.TelephoneNumbers;
        }
    }
    public func get_PinManager() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPinManager> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandPinManager(plok: _ifc.get_PinManager());
    }
    public func get_Revision() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 = try _self.QueryInterface();
        return try _ifc.get_Revision();
    }
    public func get_SerialNumber() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 = try _self.QueryInterface();
        return try _ifc.get_SerialNumber();
    }
    public var PinManager : Optional<Windows.Networking.NetworkOperators.MobileBroadbandPinManager> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandPinManager(plok: _ifc.PinManager);
        }
    }
    public var Revision : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 = try _self.QueryInterface();
        return try _ifc.Revision;
        }
    }
    public var SerialNumber : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation2 = try _self.QueryInterface();
        return try _ifc.SerialNumber;
        }
    }
    public func get_SimSpn() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 = try _self.QueryInterface();
        return try _ifc.get_SimSpn();
    }
    public func get_SimPnn() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 = try _self.QueryInterface();
        return try _ifc.get_SimPnn();
    }
    public func get_SimGid1() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 = try _self.QueryInterface();
        return try _ifc.get_SimGid1();
    }
    public var SimGid1 : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 = try _self.QueryInterface();
        return try _ifc.SimGid1;
        }
    }
    public var SimPnn : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 = try _self.QueryInterface();
        return try _ifc.SimPnn;
        }
    }
    public var SimSpn : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation3 = try _self.QueryInterface();
        return try _ifc.SimSpn;
        }
    }
    public func get_SlotManager() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation4 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandSlotManager(plok: _ifc.get_SlotManager());
    }
    public var SlotManager : Optional<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceInformation4 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandSlotManager(plok: _ifc.SlotManager);
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceService
// runtime class
public class MobileBroadbandDeviceService
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService { return _self; }
    public func get_DeviceServiceId() throws -> GUID {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService = try _self.QueryInterface();
        return try _ifc.get_DeviceServiceId();
    }
    public func get_SupportedCommands() throws -> Optional<ClosedGenerics.IVectorView_1_UINT32> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService = try _self.QueryInterface();
        return try _ifc.get_SupportedCommands();
    }
    public func OpenDataSession() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession(plok: _ifc.OpenDataSession());
    }
    public func OpenCommandSession() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession(plok: _ifc.OpenCommandSession());
    }
    public var DeviceServiceId : GUID {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService = try _self.QueryInterface();
        return try _ifc.DeviceServiceId;
        }
    }
    public var SupportedCommands : Optional<ClosedGenerics.IVectorView_1_UINT32> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceService = try _self.QueryInterface();
        return try _ifc.SupportedCommands;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult
// runtime class
public class MobileBroadbandDeviceServiceCommandResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult { return _self; }
    public func get_StatusCode() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult = try _self.QueryInterface();
        return try _ifc.get_StatusCode();
    }
    public func get_ResponseData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult = try _self.QueryInterface();
        return try _ifc.get_ResponseData();
    }
    public var ResponseData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult = try _self.QueryInterface();
        return try _ifc.ResponseData;
        }
    }
    public var StatusCode : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandResult = try _self.QueryInterface();
        return try _ifc.StatusCode;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandSession
// runtime class
public class MobileBroadbandDeviceServiceCommandSession
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession { return _self; }
    public func SendQueryCommandAsync(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession = try _self.QueryInterface();
        return try _ifc.SendQueryCommandAsync(commandId: commandId, data: data);
    }
    public func SendQueryCommand(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult(plok: self.SendQueryCommandAsync(commandId: commandId, data: data)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SendSetCommandAsync(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceCommandResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession = try _self.QueryInterface();
        return try _ifc.SendSetCommandAsync(commandId: commandId, data: data);
    }
    public func SendSetCommand(commandId : Swift.UInt32, data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceCommandResult(plok: self.SendSetCommandAsync(commandId: commandId, data: data)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CloseSession() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceCommandSession = try _self.QueryInterface();
        return try _ifc.CloseSession();
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs
// runtime class
public class MobileBroadbandDeviceServiceDataReceivedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataReceivedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataReceivedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataReceivedEventArgs { return _self; }
    public func get_ReceivedData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.get_ReceivedData();
    }
    public var ReceivedData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.ReceivedData;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession
// runtime class
public class MobileBroadbandDeviceServiceDataSession
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession { return _self; }
    public func WriteDataAsync(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession = try _self.QueryInterface();
        return try _ifc.WriteDataAsync(value: value);
    }
    public func WriteData(value : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.WriteDataAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CloseSession() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession = try _self.QueryInterface();
        return try _ifc.CloseSession();
    }
    public func add_DataReceived(eventHandler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataSession>, Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceDataReceivedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession = try _self.QueryInterface();
        return try _ifc.add_DataReceived(eventHandler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceDataSession__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceDataReceivedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_DataReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceDataSession = try _self.QueryInterface();
        return try _ifc.remove_DataReceived(eventCookie: eventCookie);
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceInformation
// runtime class
public class MobileBroadbandDeviceServiceInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation { return _self; }
    public func get_DeviceServiceId() throws -> GUID {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation = try _self.QueryInterface();
        return try _ifc.get_DeviceServiceId();
    }
    public func get_IsDataReadSupported() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation = try _self.QueryInterface();
        return try _ifc.get_IsDataReadSupported();
    }
    public func get_IsDataWriteSupported() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation = try _self.QueryInterface();
        return try _ifc.get_IsDataWriteSupported();
    }
    public var DeviceServiceId : GUID {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation = try _self.QueryInterface();
        return try _ifc.DeviceServiceId;
        }
    }
    public var IsDataReadSupported : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation = try _self.QueryInterface();
        return try _ifc.IsDataReadSupported;
        }
    }
    public var IsDataWriteSupported : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceInformation = try _self.QueryInterface();
        return try _ifc.IsDataWriteSupported;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceServiceTriggerDetails
// runtime class
public class MobileBroadbandDeviceServiceTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails { return _self; }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public func get_DeviceServiceId() throws -> GUID {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_DeviceServiceId();
    }
    public func get_ReceivedData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_ReceivedData();
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var DeviceServiceId : GUID {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails = try _self.QueryInterface();
        return try _ifc.DeviceServiceId;
        }
    }
    public var ReceivedData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandDeviceServiceTriggerDetails = try _self.QueryInterface();
        return try _ifc.ReceivedData;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandDeviceType
// enum type
public typealias MobileBroadbandDeviceType = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType;

// type: Windows.Networking.NetworkOperators.MobileBroadbandModem
// runtime class
public class MobileBroadbandModem
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandModem;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandModem?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandModem { return _self; }
    private struct _IMobileBroadbandModemStatics {
        static var x : IMobileBroadbandModemStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.MobileBroadbandModem")
    }
    public static var MobileBroadbandModemStatics : IMobileBroadbandModemStatics {
        _IMobileBroadbandModemStatics.x
    }
    public static func GetDeviceSelector() throws -> Optional<Swift.String> {
        return try MobileBroadbandModemStatics.GetDeviceSelector();
    }
    public static func FromId(deviceId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandModem> {
        return try Windows.Networking.NetworkOperators.MobileBroadbandModem(plok: MobileBroadbandModemStatics.FromId(deviceId: deviceId));
    }
    public static func GetDefault() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandModem> {
        return try Windows.Networking.NetworkOperators.MobileBroadbandModem(plok: MobileBroadbandModemStatics.GetDefault());
    }
    public func get_CurrentAccount() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccount> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandAccount(plok: _ifc.get_CurrentAccount());
    }
    public func get_DeviceInformation() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation(plok: _ifc.get_DeviceInformation());
    }
    public func get_MaxDeviceServiceCommandSizeInBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.get_MaxDeviceServiceCommandSizeInBytes();
    }
    public func get_MaxDeviceServiceDataSizeInBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.get_MaxDeviceServiceDataSizeInBytes();
    }
    public func get_DeviceServices() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceInformation> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.get_DeviceServices();
    }
    public func GetDeviceService(deviceServiceId : GUID) throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceService> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandDeviceService(plok: _ifc.GetDeviceService(deviceServiceId: deviceServiceId));
    }
    public func get_IsResetSupported() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.get_IsResetSupported();
    }
    public func ResetAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.ResetAsync();
    }
    public func Reset() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ResetAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetCurrentConfigurationAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemConfiguration> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.GetCurrentConfigurationAsync();
    }
    public func GetCurrentConfiguration() async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration(plok: self.GetCurrentConfigurationAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_CurrentNetwork() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandNetwork> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandNetwork(plok: _ifc.get_CurrentNetwork());
    }
    public var CurrentAccount : Optional<Windows.Networking.NetworkOperators.MobileBroadbandAccount> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandAccount(plok: _ifc.CurrentAccount);
        }
    }
    public var CurrentNetwork : Optional<Windows.Networking.NetworkOperators.MobileBroadbandNetwork> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandNetwork(plok: _ifc.CurrentNetwork);
        }
    }
    public var DeviceInformation : Optional<Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation(plok: _ifc.DeviceInformation);
        }
    }
    public var DeviceServices : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceServiceInformation> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.DeviceServices;
        }
    }
    public var IsResetSupported : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.IsResetSupported;
        }
    }
    public var MaxDeviceServiceCommandSizeInBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.MaxDeviceServiceCommandSizeInBytes;
        }
    }
    public var MaxDeviceServiceDataSizeInBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem = try _self.QueryInterface();
        return try _ifc.MaxDeviceServiceDataSizeInBytes;
        }
    }
    public func GetIsPassthroughEnabledAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem2 = try _self.QueryInterface();
        return try _ifc.GetIsPassthroughEnabledAsync();
    }
    public func GetIsPassthroughEnabled() async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetIsPassthroughEnabledAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetIsPassthroughEnabledAsync(value : boolean) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem2 = try _self.QueryInterface();
        return try _ifc.SetIsPassthroughEnabledAsync(value: value);
    }
    public func SetIsPassthroughEnabled(value : boolean) async throws -> Windows.Networking.NetworkOperators.MobileBroadbandModemStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetIsPassthroughEnabledAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func TryGetPcoAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPco> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem3 = try _self.QueryInterface();
        return try _ifc.TryGetPcoAsync();
    }
    public func TryGetPco() async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPco> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandPco(plok: self.TryGetPcoAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_IsInEmergencyCallMode() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem3 = try _self.QueryInterface();
        return try _ifc.get_IsInEmergencyCallMode();
    }
    public func add_IsInEmergencyCallModeChanged(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandModem>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem3 = try _self.QueryInterface();
        return try _ifc.add_IsInEmergencyCallModeChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModem_IInspectable(cb: handler).Interface());
    }
    public func remove_IsInEmergencyCallModeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem3 = try _self.QueryInterface();
        return try _ifc.remove_IsInEmergencyCallModeChanged(token: token);
    }
    public var IsInEmergencyCallMode : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModem3 = try _self.QueryInterface();
        return try _ifc.IsInEmergencyCallMode;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandModemConfiguration
// runtime class
public class MobileBroadbandModemConfiguration
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration { return _self; }
    public func get_Uicc() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandUicc> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandUicc(plok: _ifc.get_Uicc());
    }
    public func get_HomeProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration = try _self.QueryInterface();
        return try _ifc.get_HomeProviderId();
    }
    public func get_HomeProviderName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration = try _self.QueryInterface();
        return try _ifc.get_HomeProviderName();
    }
    public var HomeProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration = try _self.QueryInterface();
        return try _ifc.HomeProviderId;
        }
    }
    public var HomeProviderName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration = try _self.QueryInterface();
        return try _ifc.HomeProviderName;
        }
    }
    public var Uicc : Optional<Windows.Networking.NetworkOperators.MobileBroadbandUicc> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandUicc(plok: _ifc.Uicc);
        }
    }
    public func get_SarManager() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandSarManager> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration2 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandSarManager(plok: _ifc.get_SarManager());
    }
    public var SarManager : Optional<Windows.Networking.NetworkOperators.MobileBroadbandSarManager> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemConfiguration2 = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandSarManager(plok: _ifc.SarManager);
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation
// runtime class
public class MobileBroadbandModemIsolation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation { return _self; }
    public init(modemDeviceId : Swift.String, ruleGroupId : Swift.String) throws {
        let _af : IMobileBroadbandModemIsolationFactory = try RoGetActivationFactory("Windows.Networking.NetworkOperators.MobileBroadbandModemIsolation");
        _self = try _af.Create(modemDeviceId: modemDeviceId, ruleGroupId: ruleGroupId)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func AddAllowedHost(host : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation = try _self.QueryInterface();
        return try _ifc.AddAllowedHost(host: host!.Interface());
    }
    public func AddAllowedHostRange(first : Optional<Windows.Networking.HostName>, last : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation = try _self.QueryInterface();
        return try _ifc.AddAllowedHostRange(first: first!.Interface(), last: last!.Interface());
    }
    public func ApplyConfigurationAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation = try _self.QueryInterface();
        return try _ifc.ApplyConfigurationAsync();
    }
    public func ApplyConfiguration() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ApplyConfigurationAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ClearConfigurationAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandModemIsolation = try _self.QueryInterface();
        return try _ifc.ClearConfigurationAsync();
    }
    public func ClearConfiguration() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ClearConfigurationAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandModemStatus
// enum type
public typealias MobileBroadbandModemStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus;

// type: Windows.Networking.NetworkOperators.MobileBroadbandNetwork
// runtime class
public class MobileBroadbandNetwork
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandNetwork?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandNetwork { return _self; }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.get_NetworkAdapter());
    }
    public func get_NetworkRegistrationState() throws -> Windows.Networking.NetworkOperators.NetworkRegistrationState {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_NetworkRegistrationState();
    }
    public func get_RegistrationNetworkError() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_RegistrationNetworkError();
    }
    public func get_PacketAttachNetworkError() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_PacketAttachNetworkError();
    }
    public func get_ActivationNetworkError() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_ActivationNetworkError();
    }
    public func get_AccessPointName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_AccessPointName();
    }
    public func get_RegisteredDataClass() throws -> Windows.Networking.NetworkOperators.DataClasses {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_RegisteredDataClass();
    }
    public func get_RegisteredProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_RegisteredProviderId();
    }
    public func get_RegisteredProviderName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.get_RegisteredProviderName();
    }
    public func ShowConnectionUI() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.ShowConnectionUI();
    }
    public var AccessPointName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.AccessPointName;
        }
    }
    public var ActivationNetworkError : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.ActivationNetworkError;
        }
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.NetworkAdapter);
        }
    }
    public var NetworkRegistrationState : Windows.Networking.NetworkOperators.NetworkRegistrationState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.NetworkRegistrationState;
        }
    }
    public var PacketAttachNetworkError : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.PacketAttachNetworkError;
        }
    }
    public var RegisteredDataClass : Windows.Networking.NetworkOperators.DataClasses {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.RegisteredDataClass;
        }
    }
    public var RegisteredProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.RegisteredProviderId;
        }
    }
    public var RegisteredProviderName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.RegisteredProviderName;
        }
    }
    public var RegistrationNetworkError : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork = try _self.QueryInterface();
        return try _ifc.RegistrationNetworkError;
        }
    }
    public func GetVoiceCallSupportAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2 = try _self.QueryInterface();
        return try _ifc.GetVoiceCallSupportAsync();
    }
    public func GetVoiceCallSupport() async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetVoiceCallSupportAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_RegistrationUiccApps() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2 = try _self.QueryInterface();
        return try _ifc.get_RegistrationUiccApps();
    }
    public var RegistrationUiccApps : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork2 = try _self.QueryInterface();
        return try _ifc.RegistrationUiccApps;
        }
    }
    public func GetCellsInfoAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCellsInfo> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetwork3 = try _self.QueryInterface();
        return try _ifc.GetCellsInfoAsync();
    }
    public func GetCellsInfo() async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandCellsInfo(plok: self.GetCellsInfoAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandNetworkRegistrationStateChange
// runtime class
public class MobileBroadbandNetworkRegistrationStateChange
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange { return _self; }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public func get_Network() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandNetwork> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandNetwork(plok: _ifc.get_Network());
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var Network : Optional<Windows.Networking.NetworkOperators.MobileBroadbandNetwork> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChange = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandNetwork(plok: _ifc.Network);
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandNetworkRegistrationStateChangeTriggerDetails
// runtime class
public class MobileBroadbandNetworkRegistrationStateChangeTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails { return _self; }
    public func get_NetworkRegistrationStateChanges() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandNetworkRegistrationStateChange> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_NetworkRegistrationStateChanges();
    }
    public var NetworkRegistrationStateChanges : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandNetworkRegistrationStateChange> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails = try _self.QueryInterface();
        return try _ifc.NetworkRegistrationStateChanges;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPco
// runtime class
public class MobileBroadbandPco
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandPco;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandPco?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandPco { return _self; }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPco = try _self.QueryInterface();
        return try _ifc.get_Data();
    }
    public func get_IsComplete() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPco = try _self.QueryInterface();
        return try _ifc.get_IsComplete();
    }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPco = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPco = try _self.QueryInterface();
        return try _ifc.Data;
        }
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPco = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var IsComplete : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPco = try _self.QueryInterface();
        return try _ifc.IsComplete;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPcoDataChangeTriggerDetails
// runtime class
public class MobileBroadbandPcoDataChangeTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandPcoDataChangeTriggerDetails;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandPcoDataChangeTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandPcoDataChangeTriggerDetails { return _self; }
    public func get_UpdatedData() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPco> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPcoDataChangeTriggerDetails = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandPco(plok: _ifc.get_UpdatedData());
    }
    public var UpdatedData : Optional<Windows.Networking.NetworkOperators.MobileBroadbandPco> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPcoDataChangeTriggerDetails = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandPco(plok: _ifc.UpdatedData);
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPin
// runtime class
public class MobileBroadbandPin
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandPin;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandPin?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandPin { return _self; }
    public func get_Type() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public func get_LockState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.get_LockState();
    }
    public func get_Format() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinFormat {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.get_Format();
    }
    public func get_Enabled() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.get_Enabled();
    }
    public func get_MaxLength() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.get_MaxLength();
    }
    public func get_MinLength() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.get_MinLength();
    }
    public func get_AttemptsRemaining() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.get_AttemptsRemaining();
    }
    public func EnableAsync(currentPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.EnableAsync(currentPin: currentPin);
    }
    public func Enable(currentPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult(plok: self.EnableAsync(currentPin: currentPin)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DisableAsync(currentPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.DisableAsync(currentPin: currentPin);
    }
    public func Disable(currentPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult(plok: self.DisableAsync(currentPin: currentPin)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func EnterAsync(currentPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.EnterAsync(currentPin: currentPin);
    }
    public func Enter(currentPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult(plok: self.EnterAsync(currentPin: currentPin)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ChangeAsync(currentPin : Swift.String, newPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.ChangeAsync(currentPin: currentPin, newPin: newPin);
    }
    public func Change(currentPin : Swift.String, newPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult(plok: self.ChangeAsync(currentPin: currentPin, newPin: newPin)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func UnblockAsync(pinUnblockKey : Swift.String, newPin : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.UnblockAsync(pinUnblockKey: pinUnblockKey, newPin: newPin);
    }
    public func Unblock(pinUnblockKey : Swift.String, newPin : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult(plok: self.UnblockAsync(pinUnblockKey: pinUnblockKey, newPin: newPin)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var AttemptsRemaining : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.AttemptsRemaining;
        }
    }
    public var Enabled : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.Enabled;
        }
    }
    public var Format : Windows.Networking.NetworkOperators.MobileBroadbandPinFormat {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.Format;
        }
    }
    public var LockState : Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.LockState;
        }
    }
    public var MaxLength : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.MaxLength;
        }
    }
    public var MinLength : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.MinLength;
        }
    }
    public var Type_ : Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPin = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPinFormat
// enum type
public typealias MobileBroadbandPinFormat = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinFormat;

// type: Windows.Networking.NetworkOperators.MobileBroadbandPinLockState
// enum type
public typealias MobileBroadbandPinLockState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState;

// type: Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChange
// runtime class
public class MobileBroadbandPinLockStateChange
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange { return _self; }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public func get_PinType() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange = try _self.QueryInterface();
        return try _ifc.get_PinType();
    }
    public func get_PinLockState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange = try _self.QueryInterface();
        return try _ifc.get_PinLockState();
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var PinLockState : Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange = try _self.QueryInterface();
        return try _ifc.PinLockState;
        }
    }
    public var PinType : Windows.Networking.NetworkOperators.MobileBroadbandPinType {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChange = try _self.QueryInterface();
        return try _ifc.PinType;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPinLockStateChangeTriggerDetails
// runtime class
public class MobileBroadbandPinLockStateChangeTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChangeTriggerDetails;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChangeTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChangeTriggerDetails { return _self; }
    public func get_PinLockStateChanges() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockStateChange> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChangeTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_PinLockStateChanges();
    }
    public var PinLockStateChanges : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockStateChange> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinLockStateChangeTriggerDetails = try _self.QueryInterface();
        return try _ifc.PinLockStateChanges;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPinManager
// runtime class
public class MobileBroadbandPinManager
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandPinManager;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandPinManager?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandPinManager { return _self; }
    public func get_SupportedPins() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinManager = try _self.QueryInterface();
        return try _ifc.get_SupportedPins();
    }
    public func GetPin(pinType : Windows.Networking.NetworkOperators.MobileBroadbandPinType) throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandPin> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinManager = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandPin(plok: _ifc.GetPin(pinType: pinType));
    }
    public var SupportedPins : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinManager = try _self.QueryInterface();
        return try _ifc.SupportedPins;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPinOperationResult
// runtime class
public class MobileBroadbandPinOperationResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult { return _self; }
    public func get_IsSuccessful() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult = try _self.QueryInterface();
        return try _ifc.get_IsSuccessful();
    }
    public func get_AttemptsRemaining() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult = try _self.QueryInterface();
        return try _ifc.get_AttemptsRemaining();
    }
    public var AttemptsRemaining : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult = try _self.QueryInterface();
        return try _ifc.AttemptsRemaining;
        }
    }
    public var IsSuccessful : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandPinOperationResult = try _self.QueryInterface();
        return try _ifc.IsSuccessful;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandPinType
// enum type
public typealias MobileBroadbandPinType = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType;

// type: Windows.Networking.NetworkOperators.MobileBroadbandRadioState
// enum type
public typealias MobileBroadbandRadioState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState;

// type: Windows.Networking.NetworkOperators.MobileBroadbandRadioStateChange
// runtime class
public class MobileBroadbandRadioStateChange
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange { return _self; }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public func get_RadioState() throws -> Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange = try _self.QueryInterface();
        return try _ifc.get_RadioState();
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var RadioState : Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChange = try _self.QueryInterface();
        return try _ifc.RadioState;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandRadioStateChangeTriggerDetails
// runtime class
public class MobileBroadbandRadioStateChangeTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChangeTriggerDetails;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChangeTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChangeTriggerDetails { return _self; }
    public func get_RadioStateChanges() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioStateChange> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChangeTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_RadioStateChanges();
    }
    public var RadioStateChanges : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioStateChange> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandRadioStateChangeTriggerDetails = try _self.QueryInterface();
        return try _ifc.RadioStateChanges;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandSarManager
// runtime class
public class MobileBroadbandSarManager
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandSarManager?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandSarManager { return _self; }
    public func get_IsBackoffEnabled() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.get_IsBackoffEnabled();
    }
    public func get_IsWiFiHardwareIntegrated() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.get_IsWiFiHardwareIntegrated();
    }
    public func get_IsSarControlledByHardware() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.get_IsSarControlledByHardware();
    }
    public func get_Antennas() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.get_Antennas();
    }
    public func get_HysteresisTimerPeriod() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.get_HysteresisTimerPeriod();
    }
    public func add_TransmissionStateChanged(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandSarManager>, Optional<Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.add_TransmissionStateChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSarManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandTransmissionStateChangedEventArgs(cb: handler).Interface());
    }
    public func remove_TransmissionStateChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.remove_TransmissionStateChanged(token: token);
    }
    public func EnableBackoffAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.EnableBackoffAsync();
    }
    public func EnableBackoff() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.EnableBackoffAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DisableBackoffAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.DisableBackoffAsync();
    }
    public func DisableBackoff() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DisableBackoffAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetConfigurationAsync(antennas : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.SetConfigurationAsync(antennas: antennas);
    }
    public func SetConfiguration(antennas : Optional<ClosedGenerics.IIterable_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetConfigurationAsync(antennas: antennas)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RevertSarToHardwareControlAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.RevertSarToHardwareControlAsync();
    }
    public func RevertSarToHardwareControl() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RevertSarToHardwareControlAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetTransmissionStateChangedHysteresisAsync(timerPeriod : Windows.Foundation.TimeSpan) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.SetTransmissionStateChangedHysteresisAsync(timerPeriod: timerPeriod);
    }
    public func SetTransmissionStateChangedHysteresis(timerPeriod : Windows.Foundation.TimeSpan) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetTransmissionStateChangedHysteresisAsync(timerPeriod: timerPeriod)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetIsTransmittingAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.GetIsTransmittingAsync();
    }
    public func GetIsTransmitting() async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetIsTransmittingAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func StartTransmissionStateMonitoring() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.StartTransmissionStateMonitoring();
    }
    public func StopTransmissionStateMonitoring() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.StopTransmissionStateMonitoring();
    }
    public var Antennas : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAntennaSar> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.Antennas;
        }
    }
    public var HysteresisTimerPeriod : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.HysteresisTimerPeriod;
        }
    }
    public var IsBackoffEnabled : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.IsBackoffEnabled;
        }
    }
    public var IsSarControlledByHardware : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.IsSarControlledByHardware;
        }
    }
    public var IsWiFiHardwareIntegrated : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSarManager = try _self.QueryInterface();
        return try _ifc.IsWiFiHardwareIntegrated;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo
// runtime class
public class MobileBroadbandSlotInfo
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo { return _self; }
    public func get_Index() throws -> Swift.Int32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo = try _self.QueryInterface();
        return try _ifc.get_Index();
    }
    public func get_State() throws -> Windows.Networking.NetworkOperators.MobileBroadbandSlotState {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo = try _self.QueryInterface();
        return try _ifc.get_State();
    }
    public var Index : Swift.Int32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo = try _self.QueryInterface();
        return try _ifc.Index;
        }
    }
    public var State : Windows.Networking.NetworkOperators.MobileBroadbandSlotState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfo = try _self.QueryInterface();
        return try _ifc.State;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandSlotInfoChangedEventArgs
// runtime class
public class MobileBroadbandSlotInfoChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfoChangedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfoChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfoChangedEventArgs { return _self; }
    public func get_SlotInfo() throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfoChangedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo(plok: _ifc.get_SlotInfo());
    }
    public var SlotInfo : Optional<Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotInfoChangedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.MobileBroadbandSlotInfo(plok: _ifc.SlotInfo);
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandSlotManager
// runtime class
public class MobileBroadbandSlotManager
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager { return _self; }
    public func get_SlotInfos() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfo> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.get_SlotInfos();
    }
    public func get_CurrentSlotIndex() throws -> Swift.Int32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.get_CurrentSlotIndex();
    }
    public func SetCurrentSlot(slotIndex : Swift.Int32) throws -> Windows.Networking.NetworkOperators.MobileBroadbandModemStatus {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.SetCurrentSlot(slotIndex: slotIndex);
    }
    public func SetCurrentSlotAsync(slotIndex : Swift.Int32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.SetCurrentSlotAsync(slotIndex: slotIndex);
    }
    public func SetCurrentSlot(slotIndex : Swift.Int32) async throws -> Windows.Networking.NetworkOperators.MobileBroadbandModemStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetCurrentSlotAsync(slotIndex: slotIndex)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func add_SlotInfoChanged(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager>, Optional<Windows.Networking.NetworkOperators.MobileBroadbandSlotInfoChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.add_SlotInfoChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfoChangedEventArgs(cb: handler).Interface());
    }
    public func remove_SlotInfoChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.remove_SlotInfoChanged(token: token);
    }
    public func add_CurrentSlotIndexChanged(handler : @escaping (Optional<Windows.Networking.NetworkOperators.MobileBroadbandSlotManager>, Optional<Windows.Networking.NetworkOperators.MobileBroadbandCurrentSlotIndexChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.add_CurrentSlotIndexChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotManager__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandCurrentSlotIndexChangedEventArgs(cb: handler).Interface());
    }
    public func remove_CurrentSlotIndexChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.remove_CurrentSlotIndexChanged(token: token);
    }
    public var CurrentSlotIndex : Swift.Int32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.CurrentSlotIndex;
        }
    }
    public var SlotInfos : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotInfo> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandSlotManager = try _self.QueryInterface();
        return try _ifc.SlotInfos;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandSlotState
// enum type
public typealias MobileBroadbandSlotState = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState;

// type: Windows.Networking.NetworkOperators.MobileBroadbandTransmissionStateChangedEventArgs
// runtime class
public class MobileBroadbandTransmissionStateChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandTransmissionStateChangedEventArgs;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandTransmissionStateChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandTransmissionStateChangedEventArgs { return _self; }
    public func get_IsTransmitting() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandTransmissionStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.get_IsTransmitting();
    }
    public var IsTransmitting : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandTransmissionStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.IsTransmitting;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandUicc
// runtime class
public class MobileBroadbandUicc
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandUicc;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandUicc?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandUicc { return _self; }
    public func get_SimIccId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUicc = try _self.QueryInterface();
        return try _ifc.get_SimIccId();
    }
    public func GetUiccAppsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppsResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUicc = try _self.QueryInterface();
        return try _ifc.GetUiccAppsAsync();
    }
    public func GetUiccApps() async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult(plok: self.GetUiccAppsAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var SimIccId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUicc = try _self.QueryInterface();
        return try _ifc.SimIccId;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandUiccApp
// runtime class
public class MobileBroadbandUiccApp
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp { return _self; }
    public func get_Id() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_Kind() throws -> Windows.Networking.NetworkOperators.UiccAppKind {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp = try _self.QueryInterface();
        return try _ifc.get_Kind();
    }
    public func GetRecordDetailsAsync(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppRecordDetailsResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp = try _self.QueryInterface();
        return try _ifc.GetRecordDetailsAsync(uiccFilePath: uiccFilePath);
    }
    public func GetRecordDetails(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult(plok: self.GetRecordDetailsAsync(uiccFilePath: uiccFilePath)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ReadRecordAsync(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>, recordIndex : Swift.Int32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppReadRecordResult> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp = try _self.QueryInterface();
        return try _ifc.ReadRecordAsync(uiccFilePath: uiccFilePath, recordIndex: recordIndex);
    }
    public func ReadRecord(uiccFilePath : Optional<ClosedGenerics.IIterable_1_UINT32>, recordIndex : Swift.Int32) async throws -> Optional<Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult(plok: self.ReadRecordAsync(uiccFilePath: uiccFilePath, recordIndex: recordIndex)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Id : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var Kind : Windows.Networking.NetworkOperators.UiccAppKind {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccApp = try _self.QueryInterface();
        return try _ifc.Kind;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus
// enum type
public typealias MobileBroadbandUiccAppOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus;

// type: Windows.Networking.NetworkOperators.MobileBroadbandUiccAppReadRecordResult
// runtime class
public class MobileBroadbandUiccAppReadRecordResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult { return _self; }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult = try _self.QueryInterface();
        return try _ifc.get_Data();
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult = try _self.QueryInterface();
        return try _ifc.Data;
        }
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppReadRecordResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandUiccAppRecordDetailsResult
// runtime class
public class MobileBroadbandUiccAppRecordDetailsResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult { return _self; }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_Kind() throws -> Windows.Networking.NetworkOperators.UiccAppRecordKind {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.get_Kind();
    }
    public func get_RecordCount() throws -> Swift.Int32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.get_RecordCount();
    }
    public func get_RecordSize() throws -> Swift.Int32 {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.get_RecordSize();
    }
    public func get_ReadAccessCondition() throws -> Windows.Networking.NetworkOperators.UiccAccessCondition {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.get_ReadAccessCondition();
    }
    public func get_WriteAccessCondition() throws -> Windows.Networking.NetworkOperators.UiccAccessCondition {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.get_WriteAccessCondition();
    }
    public var Kind : Windows.Networking.NetworkOperators.UiccAppRecordKind {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.Kind;
        }
    }
    public var ReadAccessCondition : Windows.Networking.NetworkOperators.UiccAccessCondition {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.ReadAccessCondition;
        }
    }
    public var RecordCount : Swift.Int32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.RecordCount;
        }
    }
    public var RecordSize : Swift.Int32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.RecordSize;
        }
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    public var WriteAccessCondition : Windows.Networking.NetworkOperators.UiccAccessCondition {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppRecordDetailsResult = try _self.QueryInterface();
        return try _ifc.WriteAccessCondition;
        }
    }
}

// type: Windows.Networking.NetworkOperators.MobileBroadbandUiccAppsResult
// runtime class
public class MobileBroadbandUiccAppsResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult;
    public init(plok: Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult { return _self; }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_UiccApps() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult = try _self.QueryInterface();
        return try _ifc.get_UiccApps();
    }
    public var Status : Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    public var UiccApps : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccApp> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IMobileBroadbandUiccAppsResult = try _self.QueryInterface();
        return try _ifc.UiccApps;
        }
    }
}

// type: Windows.Networking.NetworkOperators.NetworkDeviceStatus
// enum type
public typealias NetworkDeviceStatus = _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus;

// type: Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind
// enum type
public typealias NetworkOperatorDataUsageNotificationKind = _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorDataUsageNotificationKind;

// type: Windows.Networking.NetworkOperators.NetworkOperatorDataUsageTriggerDetails
// runtime class
public class NetworkOperatorDataUsageTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.INetworkOperatorDataUsageTriggerDetails;
    public init(plok: Windows.Networking.NetworkOperators.INetworkOperatorDataUsageTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.INetworkOperatorDataUsageTriggerDetails { return _self; }
    public func get_NotificationKind() throws -> Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorDataUsageTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_NotificationKind();
    }
    public var NotificationKind : Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorDataUsageTriggerDetails = try _self.QueryInterface();
        return try _ifc.NotificationKind;
        }
    }
}

// type: Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType
// enum type
public typealias NetworkOperatorEventMessageType = _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType;

// type: Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails
// runtime class
public class NetworkOperatorNotificationEventDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails;
    public init(plok: Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails { return _self; }
    public func get_NotificationType() throws -> Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.get_NotificationType();
    }
    public func get_NetworkAccountId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.get_NetworkAccountId();
    }
    public func get_EncodingType() throws -> Swift.UInt8 {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.get_EncodingType();
    }
    public func get_Message() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.get_Message();
    }
    public func get_RuleId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.get_RuleId();
    }
    public func get_SmsMessage() throws -> Optional<Windows.Devices.Sms.ISmsMessage> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.get_SmsMessage();
    }
    public var EncodingType : Swift.UInt8 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.EncodingType;
        }
    }
    public var Message : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.Message;
        }
    }
    public var NetworkAccountId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.NetworkAccountId;
        }
    }
    public var NotificationType : Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.NotificationType;
        }
    }
    public var RuleId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.RuleId;
        }
    }
    public var SmsMessage : Optional<Windows.Devices.Sms.ISmsMessage> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorNotificationEventDetails = try _self.QueryInterface();
        return try _ifc.SmsMessage;
        }
    }
    public func AuthorizeTethering(allow : boolean, entitlementFailureReason : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringEntitlementCheck = try _self.QueryInterface();
        return try _ifc.AuthorizeTethering(allow: allow, entitlementFailureReason: entitlementFailureReason);
    }
}

// type: Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration
// runtime class
public class NetworkOperatorTetheringAccessPointConfiguration
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration;
    public init(plok: Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Ssid() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration = try _self.QueryInterface();
        return try _ifc.get_Ssid();
    }
    public func put_Ssid(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration = try _self.QueryInterface();
        return try _ifc.put_Ssid(value: value);
    }
    public func get_Passphrase() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration = try _self.QueryInterface();
        return try _ifc.get_Passphrase();
    }
    public func put_Passphrase(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration = try _self.QueryInterface();
        return try _ifc.put_Passphrase(value: value);
    }
    public var Passphrase : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration = try _self.QueryInterface();
        return try _ifc.Passphrase;
        }
    }
    public var Ssid : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration = try _self.QueryInterface();
        return try _ifc.Ssid;
        }
    }
    public func IsBandSupported(band : Windows.Networking.NetworkOperators.TetheringWiFiBand) throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 = try _self.QueryInterface();
        return try _ifc.IsBandSupported(band: band);
    }
    public func IsBandSupportedAsync(band : Windows.Networking.NetworkOperators.TetheringWiFiBand) throws -> Optional<ClosedGenerics.IAsyncOperation_1_boolean> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 = try _self.QueryInterface();
        return try _ifc.IsBandSupportedAsync(band: band);
    }
    public func IsBandSupported(band : Windows.Networking.NetworkOperators.TetheringWiFiBand) async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.IsBandSupportedAsync(band: band)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Band() throws -> Windows.Networking.NetworkOperators.TetheringWiFiBand {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 = try _self.QueryInterface();
        return try _ifc.get_Band();
    }
    public func put_Band(value : Windows.Networking.NetworkOperators.TetheringWiFiBand) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 = try _self.QueryInterface();
        return try _ifc.put_Band(value: value);
    }
    public var Band : Windows.Networking.NetworkOperators.TetheringWiFiBand {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringAccessPointConfiguration2 = try _self.QueryInterface();
        return try _ifc.Band;
        }
    }
}

// type: Windows.Networking.NetworkOperators.NetworkOperatorTetheringClient
// runtime class
public class NetworkOperatorTetheringClient
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient;
    public init(plok: Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient { return _self; }
    public func get_MacAddress() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient = try _self.QueryInterface();
        return try _ifc.get_MacAddress();
    }
    public func get_HostNames() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient = try _self.QueryInterface();
        return try _ifc.get_HostNames();
    }
    public var HostNames : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CHostName> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient = try _self.QueryInterface();
        return try _ifc.HostNames;
        }
    }
    public var MacAddress : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringClient = try _self.QueryInterface();
        return try _ifc.MacAddress;
        }
    }
}

// type: Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager
// runtime class
public class NetworkOperatorTetheringManager
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager;
    public init(plok: Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager { return _self; }
    private struct _INetworkOperatorTetheringManagerStatics3 {
        static var x : INetworkOperatorTetheringManagerStatics3 =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager")
    }
    public static var NetworkOperatorTetheringManagerStatics3 : INetworkOperatorTetheringManagerStatics3 {
        _INetworkOperatorTetheringManagerStatics3.x
    }
    public static func CreateFromConnectionProfile(profile : Optional<Windows.Networking.Connectivity.ConnectionProfile>, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) throws -> Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager> {
        return try Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager(plok: NetworkOperatorTetheringManagerStatics3.CreateFromConnectionProfileWithTargetAdapter(profile: profile!.Interface(), adapter: adapter!.Interface()));
    }
    private struct _INetworkOperatorTetheringManagerStatics2 {
        static var x : INetworkOperatorTetheringManagerStatics2 =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager")
    }
    public static var NetworkOperatorTetheringManagerStatics2 : INetworkOperatorTetheringManagerStatics2 {
        _INetworkOperatorTetheringManagerStatics2.x
    }
    public static func GetTetheringCapabilityFromConnectionProfile(profile : Optional<Windows.Networking.Connectivity.ConnectionProfile>) throws -> Windows.Networking.NetworkOperators.TetheringCapability {
        return try NetworkOperatorTetheringManagerStatics2.GetTetheringCapabilityFromConnectionProfile(profile: profile!.Interface());
    }
    public static func CreateFromConnectionProfile(profile : Optional<Windows.Networking.Connectivity.ConnectionProfile>) throws -> Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager> {
        return try Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager(plok: NetworkOperatorTetheringManagerStatics2.CreateFromConnectionProfile(profile: profile!.Interface()));
    }
    private struct _INetworkOperatorTetheringManagerStatics {
        static var x : INetworkOperatorTetheringManagerStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager")
    }
    public static var NetworkOperatorTetheringManagerStatics : INetworkOperatorTetheringManagerStatics {
        _INetworkOperatorTetheringManagerStatics.x
    }
    public static func GetTetheringCapability(networkAccountId : Swift.String) throws -> Windows.Networking.NetworkOperators.TetheringCapability {
        return try NetworkOperatorTetheringManagerStatics.GetTetheringCapability(networkAccountId: networkAccountId);
    }
    public static func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager> {
        return try Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager(plok: NetworkOperatorTetheringManagerStatics.CreateFromNetworkAccountId(networkAccountId: networkAccountId));
    }
    private struct _INetworkOperatorTetheringManagerStatics4 {
        static var x : INetworkOperatorTetheringManagerStatics4 =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager")
    }
    public static var NetworkOperatorTetheringManagerStatics4 : INetworkOperatorTetheringManagerStatics4 {
        _INetworkOperatorTetheringManagerStatics4.x
    }
    public static func IsNoConnectionsTimeoutEnabled() throws -> boolean {
        return try NetworkOperatorTetheringManagerStatics4.IsNoConnectionsTimeoutEnabled();
    }
    public static func EnableNoConnectionsTimeout() throws -> Void {
        return try NetworkOperatorTetheringManagerStatics4.EnableNoConnectionsTimeout();
    }
    public static func EnableNoConnectionsTimeoutAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        return try NetworkOperatorTetheringManagerStatics4.EnableNoConnectionsTimeoutAsync();
    }
    public static func EnableNoConnectionsTimeout() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.EnableNoConnectionsTimeoutAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func DisableNoConnectionsTimeout() throws -> Void {
        return try NetworkOperatorTetheringManagerStatics4.DisableNoConnectionsTimeout();
    }
    public static func DisableNoConnectionsTimeoutAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        return try NetworkOperatorTetheringManagerStatics4.DisableNoConnectionsTimeoutAsync();
    }
    public static func DisableNoConnectionsTimeout() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.DisableNoConnectionsTimeoutAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_MaxClientCount() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.get_MaxClientCount();
    }
    public func get_ClientCount() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.get_ClientCount();
    }
    public func get_TetheringOperationalState() throws -> Windows.Networking.NetworkOperators.TetheringOperationalState {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.get_TetheringOperationalState();
    }
    public func GetCurrentAccessPointConfiguration() throws -> Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration(plok: _ifc.GetCurrentAccessPointConfiguration());
    }
    public func ConfigureAccessPointAsync(configuration : Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.ConfigureAccessPointAsync(configuration: configuration!.Interface());
    }
    public func ConfigureAccessPoint(configuration : Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConfigureAccessPointAsync(configuration: configuration)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func StartTetheringAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.StartTetheringAsync();
    }
    public func StartTethering() async throws -> Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult(plok: self.StartTetheringAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func StopTetheringAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringOperationResult> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.StopTetheringAsync();
    }
    public func StopTethering() async throws -> Optional<Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult(plok: self.StopTetheringAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var ClientCount : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.ClientCount;
        }
    }
    public var MaxClientCount : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.MaxClientCount;
        }
    }
    public var TetheringOperationalState : Windows.Networking.NetworkOperators.TetheringOperationalState {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringManager = try _self.QueryInterface();
        return try _ifc.TetheringOperationalState;
        }
    }
    public func GetTetheringClients() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorTetheringClient> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringClientManager = try _self.QueryInterface();
        return try _ifc.GetTetheringClients();
    }
}

// type: Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult
// runtime class
public class NetworkOperatorTetheringOperationResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult;
    public init(plok: Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult { return _self; }
    public func get_Status() throws -> Windows.Networking.NetworkOperators.TetheringOperationStatus {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_AdditionalErrorMessage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult = try _self.QueryInterface();
        return try _ifc.get_AdditionalErrorMessage();
    }
    public var AdditionalErrorMessage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult = try _self.QueryInterface();
        return try _ifc.AdditionalErrorMessage;
        }
    }
    public var Status : Windows.Networking.NetworkOperators.TetheringOperationStatus {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.INetworkOperatorTetheringOperationResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.NetworkOperators.NetworkRegistrationState
// enum type
public typealias NetworkRegistrationState = _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState;

// type: Windows.Networking.NetworkOperators.ProfileMediaType
// enum type
public typealias ProfileMediaType = _q_CWindows_CNetworking_CNetworkOperators_CProfileMediaType;

// type: Windows.Networking.NetworkOperators.ProfileUsage
// struct type
public typealias ProfileUsage = _q_CWindows_CNetworking_CNetworkOperators_CProfileUsage;

// type: Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults
// runtime class
public class ProvisionFromXmlDocumentResults
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults;
    public init(plok: Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults { return _self; }
    public func get_AllElementsProvisioned() throws -> boolean {
        let _ifc : Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults = try _self.QueryInterface();
        return try _ifc.get_AllElementsProvisioned();
    }
    public func get_ProvisionResultsXml() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults = try _self.QueryInterface();
        return try _ifc.get_ProvisionResultsXml();
    }
    public var AllElementsProvisioned : boolean {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults = try _self.QueryInterface();
        return try _ifc.AllElementsProvisioned;
        }
    }
    public var ProvisionResultsXml : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IProvisionFromXmlDocumentResults = try _self.QueryInterface();
        return try _ifc.ProvisionResultsXml;
        }
    }
}

// type: Windows.Networking.NetworkOperators.ProvisionedProfile
// runtime class
public class ProvisionedProfile
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IProvisionedProfile;
    public init(plok: Windows.Networking.NetworkOperators.IProvisionedProfile?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IProvisionedProfile { return _self; }
    public func UpdateCost(value : Windows.Networking.Connectivity.NetworkCostType) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IProvisionedProfile = try _self.QueryInterface();
        return try _ifc.UpdateCost(value: value);
    }
    public func UpdateUsage(value : Windows.Networking.NetworkOperators.ProfileUsage) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IProvisionedProfile = try _self.QueryInterface();
        return try _ifc.UpdateUsage(value: value);
    }
}

// type: Windows.Networking.NetworkOperators.ProvisioningAgent
// runtime class
public class ProvisioningAgent
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IProvisioningAgent;
    public init(plok: Windows.Networking.NetworkOperators.IProvisioningAgent?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IProvisioningAgent { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.NetworkOperators.ProvisioningAgent")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IProvisioningAgentStaticMethods {
        static var x : IProvisioningAgentStaticMethods =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.ProvisioningAgent")
    }
    public static var ProvisioningAgentStaticMethods : IProvisioningAgentStaticMethods {
        _IProvisioningAgentStaticMethods.x
    }
    public static func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.ProvisioningAgent> {
        return try Windows.Networking.NetworkOperators.ProvisioningAgent(plok: ProvisioningAgentStaticMethods.CreateFromNetworkAccountId(networkAccountId: networkAccountId));
    }
    public func ProvisionFromXmlDocumentAsync(provisioningXmlDocument : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CProvisionFromXmlDocumentResults> {
        let _ifc : Windows.Networking.NetworkOperators.IProvisioningAgent = try _self.QueryInterface();
        return try _ifc.ProvisionFromXmlDocumentAsync(provisioningXmlDocument: provisioningXmlDocument);
    }
    public func ProvisionFromXmlDocument(provisioningXmlDocument : Swift.String) async throws -> Optional<Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults(plok: self.ProvisionFromXmlDocumentAsync(provisioningXmlDocument: provisioningXmlDocument)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetProvisionedProfile(mediaType : Windows.Networking.NetworkOperators.ProfileMediaType, profileName : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.ProvisionedProfile> {
        let _ifc : Windows.Networking.NetworkOperators.IProvisioningAgent = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.ProvisionedProfile(plok: _ifc.GetProvisionedProfile(mediaType: mediaType, profileName: profileName));
    }
}

// type: Windows.Networking.NetworkOperators.TetheringCapability
// enum type
public typealias TetheringCapability = _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability;

// type: Windows.Networking.NetworkOperators.TetheringEntitlementCheckTriggerDetails
// runtime class
public class TetheringEntitlementCheckTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails;
    public init(plok: Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails { return _self; }
    public func get_NetworkAccountId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_NetworkAccountId();
    }
    public func AllowTethering() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails = try _self.QueryInterface();
        return try _ifc.AllowTethering();
    }
    public func DenyTethering(entitlementFailureReason : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails = try _self.QueryInterface();
        return try _ifc.DenyTethering(entitlementFailureReason: entitlementFailureReason);
    }
    public var NetworkAccountId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.ITetheringEntitlementCheckTriggerDetails = try _self.QueryInterface();
        return try _ifc.NetworkAccountId;
        }
    }
}

// type: Windows.Networking.NetworkOperators.TetheringOperationStatus
// enum type
public typealias TetheringOperationStatus = _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus;

// type: Windows.Networking.NetworkOperators.TetheringOperationalState
// enum type
public typealias TetheringOperationalState = _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState;

// type: Windows.Networking.NetworkOperators.TetheringWiFiBand
// enum type
public typealias TetheringWiFiBand = _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand;

// type: Windows.Networking.NetworkOperators.UiccAccessCondition
// enum type
public typealias UiccAccessCondition = _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition;

// type: Windows.Networking.NetworkOperators.UiccAppKind
// enum type
public typealias UiccAppKind = _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind;

// type: Windows.Networking.NetworkOperators.UiccAppRecordKind
// enum type
public typealias UiccAppRecordKind = _q_CWindows_CNetworking_CNetworkOperators_CUiccAppRecordKind;

// type: Windows.Networking.NetworkOperators.UssdMessage
// runtime class
public class UssdMessage
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IUssdMessage;
    public init(plok: Windows.Networking.NetworkOperators.IUssdMessage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IUssdMessage { return _self; }
    public init(messageText : Swift.String) throws {
        let _af : IUssdMessageFactory = try RoGetActivationFactory("Windows.Networking.NetworkOperators.UssdMessage");
        _self = try _af.CreateMessage(messageText: messageText)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_DataCodingScheme() throws -> Swift.UInt8 {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.get_DataCodingScheme();
    }
    public func put_DataCodingScheme(value : Swift.UInt8) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.put_DataCodingScheme(value: value);
    }
    public func GetPayload() throws -> UINT32 {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.GetPayload();
    }
    public func SetPayload(valueLength : UINT32, value : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.SetPayload(valueLength: valueLength, value: value);
    }
    public func get_PayloadAsText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.get_PayloadAsText();
    }
    public func put_PayloadAsText(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.put_PayloadAsText(value: value);
    }
    public var DataCodingScheme : Swift.UInt8 {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.DataCodingScheme;
        }
    }
    public var PayloadAsText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IUssdMessage = try _self.QueryInterface();
        return try _ifc.PayloadAsText;
        }
    }
}

// type: Windows.Networking.NetworkOperators.UssdReply
// runtime class
public class UssdReply
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IUssdReply;
    public init(plok: Windows.Networking.NetworkOperators.IUssdReply?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IUssdReply { return _self; }
    public func get_ResultCode() throws -> Windows.Networking.NetworkOperators.UssdResultCode {
        let _ifc : Windows.Networking.NetworkOperators.IUssdReply = try _self.QueryInterface();
        return try _ifc.get_ResultCode();
    }
    public func get_Message() throws -> Optional<Windows.Networking.NetworkOperators.UssdMessage> {
        let _ifc : Windows.Networking.NetworkOperators.IUssdReply = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.UssdMessage(plok: _ifc.get_Message());
    }
    public var Message : Optional<Windows.Networking.NetworkOperators.UssdMessage> {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IUssdReply = try _self.QueryInterface();
        return try Windows.Networking.NetworkOperators.UssdMessage(plok: _ifc.Message);
        }
    }
    public var ResultCode : Windows.Networking.NetworkOperators.UssdResultCode {
        get throws {
        let _ifc : Windows.Networking.NetworkOperators.IUssdReply = try _self.QueryInterface();
        return try _ifc.ResultCode;
        }
    }
}

// type: Windows.Networking.NetworkOperators.UssdResultCode
// enum type
public typealias UssdResultCode = _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode;

// type: Windows.Networking.NetworkOperators.UssdSession
// runtime class
public class UssdSession
    :
    WinRT.Object
{
    private var _self : Windows.Networking.NetworkOperators.IUssdSession;
    public init(plok: Windows.Networking.NetworkOperators.IUssdSession?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.NetworkOperators.IUssdSession { return _self; }
    private struct _IUssdSessionStatics {
        static var x : IUssdSessionStatics =
            try! RoGetActivationFactory("Windows.Networking.NetworkOperators.UssdSession")
    }
    public static var UssdSessionStatics : IUssdSessionStatics {
        _IUssdSessionStatics.x
    }
    public static func CreateFromNetworkAccountId(networkAccountId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.UssdSession> {
        return try Windows.Networking.NetworkOperators.UssdSession(plok: UssdSessionStatics.CreateFromNetworkAccountId(networkAccountId: networkAccountId));
    }
    public static func CreateFromNetworkInterfaceId(networkInterfaceId : Swift.String) throws -> Optional<Windows.Networking.NetworkOperators.UssdSession> {
        return try Windows.Networking.NetworkOperators.UssdSession(plok: UssdSessionStatics.CreateFromNetworkInterfaceId(networkInterfaceId: networkInterfaceId));
    }
    public func SendMessageAndGetReplyAsync(message : Optional<Windows.Networking.NetworkOperators.UssdMessage>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CNetworkOperators_CUssdReply> {
        let _ifc : Windows.Networking.NetworkOperators.IUssdSession = try _self.QueryInterface();
        return try _ifc.SendMessageAndGetReplyAsync(message: message!.Interface());
    }
    public func SendMessageAndGetReply(message : Optional<Windows.Networking.NetworkOperators.UssdMessage>) async throws -> Optional<Windows.Networking.NetworkOperators.UssdReply> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.NetworkOperators.UssdReply(plok: self.SendMessageAndGetReplyAsync(message: message)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Networking.NetworkOperators.IUssdSession = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

}
extension Windows.Networking.NetworkOperators.DataClasses {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_None;
        }
    }
    public static var Gprs : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Gprs;
        }
    }
    public static var Edge : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Edge;
        }
    }
    public static var Umts : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Umts;
        }
    }
    public static var Hsdpa : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Hsdpa;
        }
    }
    public static var Hsupa : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Hsupa;
        }
    }
    public static var LteAdvanced : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_LteAdvanced;
        }
    }
    public static var NewRadioNonStandalone : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_NewRadioNonStandalone;
        }
    }
    public static var NewRadioStandalone : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_NewRadioStandalone;
        }
    }
    public static var Cdma1xRtt : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Cdma1xRtt;
        }
    }
    public static var Cdma1xEvdo : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Cdma1xEvdo;
        }
    }
    public static var Cdma1xEvdoRevA : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Cdma1xEvdoRevA;
        }
    }
    public static var Cdma1xEvdv : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Cdma1xEvdv;
        }
    }
    public static var Cdma3xRtt : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Cdma3xRtt;
        }
    }
    public static var Cdma1xEvdoRevB : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Cdma1xEvdoRevB;
        }
    }
    public static var CdmaUmb : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_CdmaUmb;
        }
    }
    public static var Custom : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CDataClasses_Custom;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimAuthenticationPreference {
    public static var OnEntry : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimAuthenticationPreference_OnEntry;
        }
    }
    public static var OnAction : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimAuthenticationPreference_OnAction;
        }
    }
    public static var Never : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimAuthenticationPreference_Never;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimDiscoverResultKind {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResultKind_None;
        }
    }
    public static var Events : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResultKind_Events;
        }
    }
    public static var ProfileMetadata : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimDiscoverResultKind_ProfileMetadata;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimOperationStatus {
    public static var Success : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_Success;
        }
    }
    public static var NotAuthorized : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_NotAuthorized;
        }
    }
    public static var NotFound : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_NotFound;
        }
    }
    public static var PolicyViolation : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_PolicyViolation;
        }
    }
    public static var InsufficientSpaceOnCard : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_InsufficientSpaceOnCard;
        }
    }
    public static var ServerFailure : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ServerFailure;
        }
    }
    public static var ServerNotReachable : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ServerNotReachable;
        }
    }
    public static var TimeoutWaitingForUserConsent : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_TimeoutWaitingForUserConsent;
        }
    }
    public static var IncorrectConfirmationCode : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_IncorrectConfirmationCode;
        }
    }
    public static var ConfirmationCodeMaxRetriesExceeded : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ConfirmationCodeMaxRetriesExceeded;
        }
    }
    public static var CardRemoved : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_CardRemoved;
        }
    }
    public static var CardBusy : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_CardBusy;
        }
    }
    public static var Other : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_Other;
        }
    }
    public static var CardGeneralFailure : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_CardGeneralFailure;
        }
    }
    public static var ConfirmationCodeMissing : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ConfirmationCodeMissing;
        }
    }
    public static var InvalidMatchingId : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_InvalidMatchingId;
        }
    }
    public static var NoEligibleProfileForThisDevice : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_NoEligibleProfileForThisDevice;
        }
    }
    public static var OperationAborted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_OperationAborted;
        }
    }
    public static var EidMismatch : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_EidMismatch;
        }
    }
    public static var ProfileNotAvailableForNewBinding : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ProfileNotAvailableForNewBinding;
        }
    }
    public static var ProfileNotReleasedByOperator : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ProfileNotReleasedByOperator;
        }
    }
    public static var OperationProhibitedByProfileClass : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_OperationProhibitedByProfileClass;
        }
    }
    public static var ProfileNotPresent : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ProfileNotPresent;
        }
    }
    public static var NoCorrespondingRequest : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_NoCorrespondingRequest;
        }
    }
    public static var TimeoutWaitingForResponse : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_TimeoutWaitingForResponse;
        }
    }
    public static var IccidAlreadyExists : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_IccidAlreadyExists;
        }
    }
    public static var ProfileProcessingError : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ProfileProcessingError;
        }
    }
    public static var ServerNotTrusted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ServerNotTrusted;
        }
    }
    public static var ProfileDownloadMaxRetriesExceeded : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimOperationStatus_ProfileDownloadMaxRetriesExceeded;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimProfileClass {
    public static var Operational : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileClass_Operational;
        }
    }
    public static var Test : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileClass_Test;
        }
    }
    public static var Provisioning : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileClass_Provisioning;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimProfileMetadataState {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_Unknown;
        }
    }
    public static var WaitingForInstall : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_WaitingForInstall;
        }
    }
    public static var Downloading : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_Downloading;
        }
    }
    public static var Installing : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_Installing;
        }
    }
    public static var Expired : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_Expired;
        }
    }
    public static var RejectingDownload : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_RejectingDownload;
        }
    }
    public static var NoLongerAvailable : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_NoLongerAvailable;
        }
    }
    public static var DeniedByPolicy : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileMetadataState_DeniedByPolicy;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimProfileState {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileState_Unknown;
        }
    }
    public static var Disabled : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileState_Disabled;
        }
    }
    public static var Enabled : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileState_Enabled;
        }
    }
    public static var Deleted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimProfileState_Deleted;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimState {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimState_Unknown;
        }
    }
    public static var Idle : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimState_Idle;
        }
    }
    public static var Removed : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimState_Removed;
        }
    }
    public static var Busy : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimState_Busy;
        }
    }
}
extension Windows.Networking.NetworkOperators.ESimWatcherStatus {
    public static var Created : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus_Created;
        }
    }
    public static var Started : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus_Started;
        }
    }
    public static var EnumerationCompleted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus_EnumerationCompleted;
        }
    }
    public static var Stopping : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus_Stopping;
        }
    }
    public static var Stopped : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CESimWatcherStatus_Stopped;
        }
    }
}
extension Windows.Networking.NetworkOperators.HotspotAuthenticationResponseCode {
    public static var NoError : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_NoError;
        }
    }
    public static var LoginSucceeded : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_LoginSucceeded;
        }
    }
    public static var LoginFailed : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_LoginFailed;
        }
    }
    public static var RadiusServerError : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_RadiusServerError;
        }
    }
    public static var NetworkAdministratorError : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_NetworkAdministratorError;
        }
    }
    public static var LoginAborted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_LoginAborted;
        }
    }
    public static var AccessGatewayInternalError : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CHotspotAuthenticationResponseCode_AccessGatewayInternalError;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcherStatus {
    public static var Created : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus_Created;
        }
    }
    public static var Started : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus_Started;
        }
    }
    public static var EnumerationCompleted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus_EnumerationCompleted;
        }
    }
    public static var Stopped : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus_Stopped;
        }
    }
    public static var Aborted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandAccountWatcherStatus_Aborted;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandDeviceType {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType_Unknown;
        }
    }
    public static var Embedded : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType_Embedded;
        }
    }
    public static var Removable : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType_Removable;
        }
    }
    public static var Remote : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandDeviceType_Remote;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandModemStatus {
    public static var Success : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus_Success;
        }
    }
    public static var OtherFailure : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus_OtherFailure;
        }
    }
    public static var Busy : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus_Busy;
        }
    }
    public static var NoDeviceSupport : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandModemStatus_NoDeviceSupport;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandPinFormat {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinFormat_Unknown;
        }
    }
    public static var Numeric : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinFormat_Numeric;
        }
    }
    public static var Alphanumeric : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinFormat_Alphanumeric;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandPinLockState {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState_Unknown;
        }
    }
    public static var Unlocked : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState_Unlocked;
        }
    }
    public static var PinRequired : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState_PinRequired;
        }
    }
    public static var PinUnblockKeyRequired : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinLockState_PinUnblockKeyRequired;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandPinType {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_None;
        }
    }
    public static var Custom : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_Custom;
        }
    }
    public static var Pin1 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_Pin1;
        }
    }
    public static var Pin2 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_Pin2;
        }
    }
    public static var SimPin : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_SimPin;
        }
    }
    public static var FirstSimPin : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_FirstSimPin;
        }
    }
    public static var NetworkPin : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_NetworkPin;
        }
    }
    public static var NetworkSubsetPin : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_NetworkSubsetPin;
        }
    }
    public static var ServiceProviderPin : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_ServiceProviderPin;
        }
    }
    public static var CorporatePin : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_CorporatePin;
        }
    }
    public static var SubsidyLock : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandPinType_SubsidyLock;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandRadioState {
    public static var Off : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState_Off;
        }
    }
    public static var On : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandRadioState_On;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandSlotState {
    public static var Unmanaged : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_Unmanaged;
        }
    }
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_Unknown;
        }
    }
    public static var OffEmpty : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_OffEmpty;
        }
    }
    public static var Off : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_Off;
        }
    }
    public static var Empty : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_Empty;
        }
    }
    public static var NotReady : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_NotReady;
        }
    }
    public static var Active : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_Active;
        }
    }
    public static var Error : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_Error;
        }
    }
    public static var ActiveEsim : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_ActiveEsim;
        }
    }
    public static var ActiveEsimNoProfile : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandSlotState_ActiveEsimNoProfile;
        }
    }
}
extension Windows.Networking.NetworkOperators.MobileBroadbandUiccAppOperationStatus {
    public static var Success : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus_Success;
        }
    }
    public static var InvalidUiccFilePath : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus_InvalidUiccFilePath;
        }
    }
    public static var AccessConditionNotHeld : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus_AccessConditionNotHeld;
        }
    }
    public static var UiccBusy : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CMobileBroadbandUiccAppOperationStatus_UiccBusy;
        }
    }
}
extension Windows.Networking.NetworkOperators.NetworkDeviceStatus {
    public static var DeviceNotReady : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_DeviceNotReady;
        }
    }
    public static var DeviceReady : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_DeviceReady;
        }
    }
    public static var SimNotInserted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_SimNotInserted;
        }
    }
    public static var BadSim : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_BadSim;
        }
    }
    public static var DeviceHardwareFailure : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_DeviceHardwareFailure;
        }
    }
    public static var AccountNotActivated : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_AccountNotActivated;
        }
    }
    public static var DeviceLocked : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_DeviceLocked;
        }
    }
    public static var DeviceBlocked : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkDeviceStatus_DeviceBlocked;
        }
    }
}
extension Windows.Networking.NetworkOperators.NetworkOperatorDataUsageNotificationKind {
    public static var DataUsageProgress : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorDataUsageNotificationKind_DataUsageProgress;
        }
    }
}
extension Windows.Networking.NetworkOperators.NetworkOperatorEventMessageType {
    public static var Gsm : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_Gsm;
        }
    }
    public static var Cdma : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_Cdma;
        }
    }
    public static var Ussd : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_Ussd;
        }
    }
    public static var DataPlanThresholdReached : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_DataPlanThresholdReached;
        }
    }
    public static var DataPlanReset : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_DataPlanReset;
        }
    }
    public static var DataPlanDeleted : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_DataPlanDeleted;
        }
    }
    public static var ProfileConnected : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_ProfileConnected;
        }
    }
    public static var ProfileDisconnected : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_ProfileDisconnected;
        }
    }
    public static var RegisteredRoaming : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_RegisteredRoaming;
        }
    }
    public static var RegisteredHome : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_RegisteredHome;
        }
    }
    public static var TetheringEntitlementCheck : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_TetheringEntitlementCheck;
        }
    }
    public static var TetheringOperationalStateChanged : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_TetheringOperationalStateChanged;
        }
    }
    public static var TetheringNumberOfClientsChanged : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkOperatorEventMessageType_TetheringNumberOfClientsChanged;
        }
    }
}
extension Windows.Networking.NetworkOperators.NetworkRegistrationState {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_None;
        }
    }
    public static var Deregistered : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_Deregistered;
        }
    }
    public static var Searching : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_Searching;
        }
    }
    public static var Home : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_Home;
        }
    }
    public static var Roaming : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_Roaming;
        }
    }
    public static var Partner : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_Partner;
        }
    }
    public static var Denied : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CNetworkRegistrationState_Denied;
        }
    }
}
extension Windows.Networking.NetworkOperators.ProfileMediaType {
    public static var Wlan : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CProfileMediaType_Wlan;
        }
    }
    public static var Wwan : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CProfileMediaType_Wwan;
        }
    }
}
extension Windows.Networking.NetworkOperators.TetheringCapability {
    public static var Enabled : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_Enabled;
        }
    }
    public static var DisabledByGroupPolicy : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_DisabledByGroupPolicy;
        }
    }
    public static var DisabledByHardwareLimitation : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_DisabledByHardwareLimitation;
        }
    }
    public static var DisabledByOperator : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_DisabledByOperator;
        }
    }
    public static var DisabledBySku : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_DisabledBySku;
        }
    }
    public static var DisabledByRequiredAppNotInstalled : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_DisabledByRequiredAppNotInstalled;
        }
    }
    public static var DisabledDueToUnknownCause : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_DisabledDueToUnknownCause;
        }
    }
    public static var DisabledBySystemCapability : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringCapability_DisabledBySystemCapability;
        }
    }
}
extension Windows.Networking.NetworkOperators.TetheringOperationStatus {
    public static var Success : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_Success;
        }
    }
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_Unknown;
        }
    }
    public static var MobileBroadbandDeviceOff : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_MobileBroadbandDeviceOff;
        }
    }
    public static var WiFiDeviceOff : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_WiFiDeviceOff;
        }
    }
    public static var EntitlementCheckTimeout : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_EntitlementCheckTimeout;
        }
    }
    public static var EntitlementCheckFailure : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_EntitlementCheckFailure;
        }
    }
    public static var OperationInProgress : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_OperationInProgress;
        }
    }
    public static var BluetoothDeviceOff : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_BluetoothDeviceOff;
        }
    }
    public static var NetworkLimitedConnectivity : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationStatus_NetworkLimitedConnectivity;
        }
    }
}
extension Windows.Networking.NetworkOperators.TetheringOperationalState {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState_Unknown;
        }
    }
    public static var On : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState_On;
        }
    }
    public static var Off : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState_Off;
        }
    }
    public static var InTransition : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringOperationalState_InTransition;
        }
    }
}
extension Windows.Networking.NetworkOperators.TetheringWiFiBand {
    public static var Auto : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand_Auto;
        }
    }
    public static var TwoPointFourGigahertz : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand_TwoPointFourGigahertz;
        }
    }
    public static var FiveGigahertz : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CTetheringWiFiBand_FiveGigahertz;
        }
    }
}
extension Windows.Networking.NetworkOperators.UiccAccessCondition {
    public static var AlwaysAllowed : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_AlwaysAllowed;
        }
    }
    public static var Pin1 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_Pin1;
        }
    }
    public static var Pin2 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_Pin2;
        }
    }
    public static var Pin3 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_Pin3;
        }
    }
    public static var Pin4 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_Pin4;
        }
    }
    public static var Administrative5 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_Administrative5;
        }
    }
    public static var Administrative6 : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_Administrative6;
        }
    }
    public static var NeverAllowed : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAccessCondition_NeverAllowed;
        }
    }
}
extension Windows.Networking.NetworkOperators.UiccAppKind {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_Unknown;
        }
    }
    public static var MF : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_MF;
        }
    }
    public static var MFSim : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_MFSim;
        }
    }
    public static var MFRuim : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_MFRuim;
        }
    }
    public static var USim : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_USim;
        }
    }
    public static var CSim : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_CSim;
        }
    }
    public static var ISim : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppKind_ISim;
        }
    }
}
extension Windows.Networking.NetworkOperators.UiccAppRecordKind {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppRecordKind_Unknown;
        }
    }
    public static var Transparent : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppRecordKind_Transparent;
        }
    }
    public static var RecordOriented : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUiccAppRecordKind_RecordOriented;
        }
    }
}
extension Windows.Networking.NetworkOperators.UssdResultCode {
    public static var NoActionRequired : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode_NoActionRequired;
        }
    }
    public static var ActionRequired : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode_ActionRequired;
        }
    }
    public static var Terminated : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode_Terminated;
        }
    }
    public static var OtherLocalClient : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode_OtherLocalClient;
        }
    }
    public static var OperationNotSupported : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode_OperationNotSupported;
        }
    }
    public static var NetworkTimeout : Self {
        get {
            return _q_CWindows_CNetworking_CNetworkOperators_CUssdResultCode_NetworkTimeout;
        }
    }
}
