// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Data.Text {
// type: Windows.Data.Text.AlternateNormalizationFormat
// enum type
public typealias AlternateNormalizationFormat = _q_CWindows_CData_CText_CAlternateNormalizationFormat;

// type: Windows.Data.Text.AlternateWordForm
// runtime class
public class AlternateWordForm
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.IAlternateWordForm;
    public init(plok: Windows.Data.Text.IAlternateWordForm?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.IAlternateWordForm { return _self; }
    public func get_SourceTextSegment() throws -> Windows.Data.Text.TextSegment {
        let _ifc : Windows.Data.Text.IAlternateWordForm = try _self.QueryInterface();
        return try _ifc.get_SourceTextSegment();
    }
    public func get_AlternateText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.IAlternateWordForm = try _self.QueryInterface();
        return try _ifc.get_AlternateText();
    }
    public func get_NormalizationFormat() throws -> Windows.Data.Text.AlternateNormalizationFormat {
        let _ifc : Windows.Data.Text.IAlternateWordForm = try _self.QueryInterface();
        return try _ifc.get_NormalizationFormat();
    }
    public var AlternateText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.IAlternateWordForm = try _self.QueryInterface();
        return try _ifc.AlternateText;
        }
    }
    public var NormalizationFormat : Windows.Data.Text.AlternateNormalizationFormat {
        get throws {
        let _ifc : Windows.Data.Text.IAlternateWordForm = try _self.QueryInterface();
        return try _ifc.NormalizationFormat;
        }
    }
    public var SourceTextSegment : Windows.Data.Text.TextSegment {
        get throws {
        let _ifc : Windows.Data.Text.IAlternateWordForm = try _self.QueryInterface();
        return try _ifc.SourceTextSegment;
        }
    }
}

// type: Windows.Data.Text.IAlternateWordForm
// interface type
open class IAlternateWordForm
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x47396c1e, Data2: 0x51b9, Data3 : 0x4207, Data4 : (0x91, 0x46, 0x24, 0x8e, 0x63, 0x6a, 0x1d, 0x1d)) }
    // [IsSpecialName] Windows.Data.Text.TextSegment get_SourceTextSegment()
    private func _n_get_SourceTextSegment(_ __presult: UnsafeMutablePointer<_q_CWindows_CData_CText_CTextSegment>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIAlternateWordForm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceTextSegment(pThis, __presult))
        }
    }
    public func get_SourceTextSegment() throws -> Windows.Data.Text.TextSegment {
        var __result : _q_CWindows_CData_CText_CTextSegment = _q_CWindows_CData_CText_CTextSegment(StartPosition: 0, Length: 0);
        try self._n_get_SourceTextSegment(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_AlternateText()
    private func _n_get_AlternateText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIAlternateWordForm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlternateText(pThis, __presult))
        }
    }
    public func get_AlternateText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AlternateText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Data.Text.AlternateNormalizationFormat get_NormalizationFormat()
    private func _n_get_NormalizationFormat(_ __presult: UnsafeMutablePointer<_q_CWindows_CData_CText_CAlternateNormalizationFormat>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIAlternateWordForm.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NormalizationFormat(pThis, __presult))
        }
    }
    public func get_NormalizationFormat() throws -> Windows.Data.Text.AlternateNormalizationFormat {
        var __result : _q_CWindows_CData_CText_CAlternateNormalizationFormat = _q_CWindows_CData_CText_CAlternateNormalizationFormat_NotNormalized;
        try self._n_get_NormalizationFormat(&__result);
        return __result;
    }
    public var AlternateText : Swift.String {
        get throws {
            return try get_AlternateText();
        }
    }
    public var NormalizationFormat : Windows.Data.Text.AlternateNormalizationFormat {
        get throws {
            return try get_NormalizationFormat();
        }
    }
    public var SourceTextSegment : Windows.Data.Text.TextSegment {
        get throws {
            return try get_SourceTextSegment();
        }
    }
} // IAlternateWordForm


// type: Windows.Data.Text.ISelectableWordSegment
// interface type
open class ISelectableWordSegment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x916a4cb7, Data2: 0x8aa7, Data3 : 0x4c78, Data4 : (0xb3, 0x74, 0x5d, 0xed, 0xb7, 0x52, 0xe6, 0x0b)) }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Data.Text.TextSegment get_SourceTextSegment()
    private func _n_get_SourceTextSegment(_ __presult: UnsafeMutablePointer<_q_CWindows_CData_CText_CTextSegment>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceTextSegment(pThis, __presult))
        }
    }
    public func get_SourceTextSegment() throws -> Windows.Data.Text.TextSegment {
        var __result : _q_CWindows_CData_CText_CTextSegment = _q_CWindows_CData_CText_CTextSegment(StartPosition: 0, Length: 0);
        try self._n_get_SourceTextSegment(&__result);
        return __result;
    }
    public var SourceTextSegment : Windows.Data.Text.TextSegment {
        get throws {
            return try get_SourceTextSegment();
        }
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
} // ISelectableWordSegment


// type: Windows.Data.Text.ISelectableWordsSegmenter
// interface type
open class ISelectableWordsSegmenter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf6dc31e7, Data2: 0x4b13, Data3 : 0x45c5, Data4 : (0x88, 0x97, 0x7d, 0x71, 0x26, 0x9e, 0x08, 0x5d)) }
    // [IsSpecialName] System.String get_ResolvedLanguage()
    private func _n_get_ResolvedLanguage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResolvedLanguage(pThis, __presult))
        }
    }
    public func get_ResolvedLanguage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ResolvedLanguage(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Data.Text.SelectableWordSegment GetTokenAt(System.String, System.UInt32)
    private func _n_GetTokenAt(_ text : Optional<HSTRING>, _ startIndex : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISelectableWordSegment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTokenAt(pThis, text, startIndex, __presult))
        }
    }
    public func GetTokenAt(text : Swift.String, startIndex : Swift.UInt32) throws -> Optional<Windows.Data.Text.ISelectableWordSegment> {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISelectableWordSegment>> = nil;
        try self._n_GetTokenAt(__hstr_text.Raw(), startIndex, &__result);
        return Windows.Data.Text.ISelectableWordSegment(consuming: __result);
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Data.Text.SelectableWordSegment> GetTokens(System.String)
    private func _n_GetTokens(_ text : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CSelectableWordSegment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTokens(pThis, text, __presult))
        }
    }
    public func GetTokens(text : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CSelectableWordSegment> {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CSelectableWordSegment>> = nil;
        try self._n_GetTokens(__hstr_text.Raw(), &__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CSelectableWordSegment(consuming: __result);
        }
    }
    // void Tokenize(System.String, System.UInt32, Windows.Data.Text.SelectableWordSegmentsTokenizingHandler)
    private func _n_Tokenize(_ text : Optional<HSTRING>, _ startIndex : UINT32, _ handler : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler>>) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Tokenize(pThis, text, startIndex, handler))
        }
    }
    public func Tokenize(text : Swift.String, startIndex : Swift.UInt32, handler : Optional<Windows.Data.Text.ISelectableWordSegmentsTokenizingHandler>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_Tokenize(__hstr_text.Raw(), startIndex, RawPointer(handler));
        }
    }
    public var ResolvedLanguage : Swift.String {
        get throws {
            return try get_ResolvedLanguage();
        }
    }
} // ISelectableWordsSegmenter


// type: Windows.Data.Text.ISelectableWordsSegmenterFactory
// interface type
// ACTIVATION INTERFACE
open class ISelectableWordsSegmenterFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8c7a7648, Data2: 0x6057, Data3 : 0x4339, Data4 : (0xbc, 0x70, 0xf2, 0x10, 0x01, 0x0a, 0x41, 0x50)) }
    // Windows.Data.Text.SelectableWordsSegmenter CreateWithLanguage(System.String)
    private func _n_CreateWithLanguage(_ language : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISelectableWordsSegmenter>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordsSegmenterFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithLanguage(pThis, language, __presult))
        }
    }
    public func CreateWithLanguage(language : Swift.String) throws -> Optional<Windows.Data.Text.ISelectableWordsSegmenter> {
        let __hstr_language = try HString(language);
        return try withExtendedLifetime(__hstr_language) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISelectableWordsSegmenter>> = nil;
        try self._n_CreateWithLanguage(__hstr_language.Raw(), &__result);
        return Windows.Data.Text.ISelectableWordsSegmenter(consuming: __result);
        }
    }
} // ISelectableWordsSegmenterFactory


// type: Windows.Data.Text.ISemanticTextQuery
// interface type
open class ISemanticTextQuery
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6a1cab51, Data2: 0x1fb2, Data3 : 0x4909, Data4 : (0x80, 0xb8, 0x35, 0x73, 0x1a, 0x2b, 0x3e, 0x7f)) }
    // Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment> Find(System.String)
    private func _n_Find(_ content : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISemanticTextQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Find(pThis, content, __presult))
        }
    }
    public func Find(content : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextSegment> {
        let __hstr_content = try HString(content);
        return try withExtendedLifetime(__hstr_content) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment>> = nil;
        try self._n_Find(__hstr_content.Raw(), &__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextSegment(consuming: __result);
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment> FindInProperty(System.String, System.String)
    private func _n_FindInProperty(_ propertyContent : Optional<HSTRING>, _ propertyName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISemanticTextQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FindInProperty(pThis, propertyContent, propertyName, __presult))
        }
    }
    public func FindInProperty(propertyContent : Swift.String, propertyName : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextSegment> {
        let __hstr_propertyContent = try HString(propertyContent);
        return try withExtendedLifetime(__hstr_propertyContent) {
        let __hstr_propertyName = try HString(propertyName);
        return try withExtendedLifetime(__hstr_propertyName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment>> = nil;
        try self._n_FindInProperty(__hstr_propertyContent.Raw(), __hstr_propertyName.Raw(), &__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextSegment(consuming: __result);
        }
        }
    }
} // ISemanticTextQuery


// type: Windows.Data.Text.ISemanticTextQueryFactory
// interface type
// ACTIVATION INTERFACE
open class ISemanticTextQueryFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x238c0503, Data2: 0xf995, Data3 : 0x4587, Data4 : (0x87, 0x77, 0xa2, 0xb7, 0xd8, 0x0a, 0xcf, 0xef)) }
    // Windows.Data.Text.SemanticTextQuery Create(System.String)
    private func _n_Create(_ aqsFilter : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISemanticTextQuery>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISemanticTextQueryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, aqsFilter, __presult))
        }
    }
    public func Create(aqsFilter : Swift.String) throws -> Optional<Windows.Data.Text.ISemanticTextQuery> {
        let __hstr_aqsFilter = try HString(aqsFilter);
        return try withExtendedLifetime(__hstr_aqsFilter) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISemanticTextQuery>> = nil;
        try self._n_Create(__hstr_aqsFilter.Raw(), &__result);
        return Windows.Data.Text.ISemanticTextQuery(consuming: __result);
        }
    }
    // Windows.Data.Text.SemanticTextQuery CreateWithLanguage(System.String, System.String)
    private func _n_CreateWithLanguage(_ aqsFilter : Optional<HSTRING>, _ filterLanguage : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISemanticTextQuery>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CISemanticTextQueryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithLanguage(pThis, aqsFilter, filterLanguage, __presult))
        }
    }
    public func CreateWithLanguage(aqsFilter : Swift.String, filterLanguage : Swift.String) throws -> Optional<Windows.Data.Text.ISemanticTextQuery> {
        let __hstr_aqsFilter = try HString(aqsFilter);
        return try withExtendedLifetime(__hstr_aqsFilter) {
        let __hstr_filterLanguage = try HString(filterLanguage);
        return try withExtendedLifetime(__hstr_filterLanguage) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CISemanticTextQuery>> = nil;
        try self._n_CreateWithLanguage(__hstr_aqsFilter.Raw(), __hstr_filterLanguage.Raw(), &__result);
        return Windows.Data.Text.ISemanticTextQuery(consuming: __result);
        }
        }
    }
} // ISemanticTextQueryFactory


// type: Windows.Data.Text.ITextConversionGenerator
// interface type
open class ITextConversionGenerator
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x03606a5e, Data2: 0x2aa9, Data3 : 0x4ab6, Data4 : (0xaf, 0x8b, 0xa5, 0x62, 0xb6, 0x3a, 0x89, 0x92)) }
    // [IsSpecialName] System.String get_ResolvedLanguage()
    private func _n_get_ResolvedLanguage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextConversionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResolvedLanguage(pThis, __presult))
        }
    }
    public func get_ResolvedLanguage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ResolvedLanguage(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] bool get_LanguageAvailableButNotInstalled()
    private func _n_get_LanguageAvailableButNotInstalled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextConversionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageAvailableButNotInstalled(pThis, __presult))
        }
    }
    public func get_LanguageAvailableButNotInstalled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_LanguageAvailableButNotInstalled(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<System.String>> GetCandidatesAsync(System.String)
    private func _n_GetCandidatesAsync(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextConversionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCandidatesAsync(pThis, input, __presult))
        }
    }
    public func GetCandidatesAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let __hstr_input = try HString(input);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_GetCandidatesAsync(__hstr_input.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING(consuming: __result);
        }
    }
    public func GetCandidates(input : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<System.String>> GetCandidatesAsync(System.String, System.UInt32)
    private func _n_GetCandidatesWithMaxCountAsync(_ input : Optional<HSTRING>, _ maxCandidates : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextConversionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCandidatesWithMaxCountAsync(pThis, input, maxCandidates, __presult))
        }
    }
    public func GetCandidatesWithMaxCountAsync(input : Swift.String, maxCandidates : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let __hstr_input = try HString(input);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_GetCandidatesWithMaxCountAsync(__hstr_input.Raw(), maxCandidates, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING(consuming: __result);
        }
    }
    public func GetCandidatesWithMaxCount(input : Swift.String, maxCandidates : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesWithMaxCountAsync(input: input, maxCandidates: maxCandidates)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var LanguageAvailableButNotInstalled : boolean {
        get throws {
            return try get_LanguageAvailableButNotInstalled();
        }
    }
    public var ResolvedLanguage : Swift.String {
        get throws {
            return try get_ResolvedLanguage();
        }
    }
} // ITextConversionGenerator


// type: Windows.Data.Text.ITextConversionGeneratorFactory
// interface type
// ACTIVATION INTERFACE
open class ITextConversionGeneratorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfcaa3781, Data2: 0x3083, Data3 : 0x49ab, Data4 : (0xbe, 0x15, 0x56, 0xdf, 0xbb, 0xb7, 0x4d, 0x6f)) }
    // Windows.Data.Text.TextConversionGenerator Create(System.String)
    private func _n_Create(_ languageTag : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CITextConversionGenerator>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextConversionGeneratorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, languageTag, __presult))
        }
    }
    public func Create(languageTag : Swift.String) throws -> Optional<Windows.Data.Text.ITextConversionGenerator> {
        let __hstr_languageTag = try HString(languageTag);
        return try withExtendedLifetime(__hstr_languageTag) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CITextConversionGenerator>> = nil;
        try self._n_Create(__hstr_languageTag.Raw(), &__result);
        return Windows.Data.Text.ITextConversionGenerator(consuming: __result);
        }
    }
} // ITextConversionGeneratorFactory


// type: Windows.Data.Text.ITextPhoneme
// interface type
open class ITextPhoneme
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9362a40a, Data2: 0x9b7a, Data3 : 0x4569, Data4 : (0x94, 0xcf, 0xd8, 0x4f, 0x2f, 0x38, 0xcf, 0x9b)) }
    // [IsSpecialName] System.String get_DisplayText()
    private func _n_get_DisplayText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPhoneme.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayText(pThis, __presult))
        }
    }
    public func get_DisplayText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_ReadingText()
    private func _n_get_ReadingText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPhoneme.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadingText(pThis, __presult))
        }
    }
    public func get_ReadingText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ReadingText(&__result);
        return Swift.String(from: __result);
    }
    public var DisplayText : Swift.String {
        get throws {
            return try get_DisplayText();
        }
    }
    public var ReadingText : Swift.String {
        get throws {
            return try get_ReadingText();
        }
    }
} // ITextPhoneme


// type: Windows.Data.Text.ITextPredictionGenerator
// interface type
open class ITextPredictionGenerator
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5eacab07, Data2: 0xabf1, Data3 : 0x4cb6, Data4 : (0x9d, 0x9e, 0x32, 0x6f, 0x2b, 0x46, 0x87, 0x56)) }
    // [IsSpecialName] System.String get_ResolvedLanguage()
    private func _n_get_ResolvedLanguage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResolvedLanguage(pThis, __presult))
        }
    }
    public func get_ResolvedLanguage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ResolvedLanguage(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] bool get_LanguageAvailableButNotInstalled()
    private func _n_get_LanguageAvailableButNotInstalled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageAvailableButNotInstalled(pThis, __presult))
        }
    }
    public func get_LanguageAvailableButNotInstalled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_LanguageAvailableButNotInstalled(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<System.String>> GetCandidatesAsync(System.String)
    private func _n_GetCandidatesAsync(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCandidatesAsync(pThis, input, __presult))
        }
    }
    public func GetCandidatesAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let __hstr_input = try HString(input);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_GetCandidatesAsync(__hstr_input.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING(consuming: __result);
        }
    }
    public func GetCandidates(input : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<System.String>> GetCandidatesAsync(System.String, System.UInt32)
    private func _n_GetCandidatesWithMaxCountAsync(_ input : Optional<HSTRING>, _ maxCandidates : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCandidatesWithMaxCountAsync(pThis, input, maxCandidates, __presult))
        }
    }
    public func GetCandidatesWithMaxCountAsync(input : Swift.String, maxCandidates : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let __hstr_input = try HString(input);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_GetCandidatesWithMaxCountAsync(__hstr_input.Raw(), maxCandidates, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING(consuming: __result);
        }
    }
    public func GetCandidatesWithMaxCount(input : Swift.String, maxCandidates : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesWithMaxCountAsync(input: input, maxCandidates: maxCandidates)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var LanguageAvailableButNotInstalled : boolean {
        get throws {
            return try get_LanguageAvailableButNotInstalled();
        }
    }
    public var ResolvedLanguage : Swift.String {
        get throws {
            return try get_ResolvedLanguage();
        }
    }
} // ITextPredictionGenerator


// type: Windows.Data.Text.ITextPredictionGenerator2
// interface type
open class ITextPredictionGenerator2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb84723b8, Data2: 0x2c77, Data3 : 0x486a, Data4 : (0x90, 0x0a, 0xa3, 0x45, 0x3e, 0xed, 0xc1, 0x5d)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<System.String>> GetCandidatesAsync(System.String, System.UInt32, Windows.Data.Text.TextPredictionOptions, Windows.Foundation.Collections.IIterable<System.String>)
    private func _n_GetCandidatesWithParametersAsync(_ input : Optional<HSTRING>, _ maxCandidates : UINT32, _ predictionOptions : _q_CWindows_CData_CText_CTextPredictionOptions, _ previousStrings : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCandidatesWithParametersAsync(pThis, input, maxCandidates, predictionOptions, previousStrings, __presult))
        }
    }
    public func GetCandidatesWithParametersAsync(input : Swift.String, maxCandidates : Swift.UInt32, predictionOptions : Windows.Data.Text.TextPredictionOptions, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let __hstr_input = try HString(input);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_GetCandidatesWithParametersAsync(__hstr_input.Raw(), maxCandidates, predictionOptions, RawPointer(previousStrings), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING(consuming: __result);
        }
    }
    public func GetCandidatesWithParameters(input : Swift.String, maxCandidates : Swift.UInt32, predictionOptions : Windows.Data.Text.TextPredictionOptions, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesWithParametersAsync(input: input, maxCandidates: maxCandidates, predictionOptions: predictionOptions, previousStrings: previousStrings)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<System.String>> GetNextWordCandidatesAsync(System.UInt32, Windows.Foundation.Collections.IIterable<System.String>)
    private func _n_GetNextWordCandidatesAsync(_ maxCandidates : UINT32, _ previousStrings : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNextWordCandidatesAsync(pThis, maxCandidates, previousStrings, __presult))
        }
    }
    public func GetNextWordCandidatesAsync(maxCandidates : Swift.UInt32, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_GetNextWordCandidatesAsync(maxCandidates, RawPointer(previousStrings), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING(consuming: __result);
    }
    public func GetNextWordCandidates(maxCandidates : Swift.UInt32, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetNextWordCandidatesAsync(maxCandidates: maxCandidates, previousStrings: previousStrings)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.UI.Text.Core.CoreTextInputScope get_InputScope()
    private func _n_get_InputScope(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CCore_CCoreTextInputScope>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputScope(pThis, __presult))
        }
    }
    public func get_InputScope() throws -> Windows.UI.Text.Core.CoreTextInputScope {
        var __result : _q_CWindows_CUI_CText_CCore_CCoreTextInputScope = _q_CWindows_CUI_CText_CCore_CCoreTextInputScope_Default;
        try self._n_get_InputScope(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InputScope(Windows.UI.Text.Core.CoreTextInputScope)
    private func _n_put_InputScope(_ value : _q_CWindows_CUI_CText_CCore_CCoreTextInputScope) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGenerator2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InputScope(pThis, value))
        }
    }
    public func put_InputScope(value : Windows.UI.Text.Core.CoreTextInputScope) throws -> Void {
        try self._n_put_InputScope(value);
    }
    public var InputScope : Windows.UI.Text.Core.CoreTextInputScope {
        get throws {
            return try get_InputScope();
        }
    }
} // ITextPredictionGenerator2


// type: Windows.Data.Text.ITextPredictionGeneratorFactory
// interface type
// ACTIVATION INTERFACE
open class ITextPredictionGeneratorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7257b416, Data2: 0x8ba2, Data3 : 0x4751, Data4 : (0x9d, 0x30, 0x9d, 0x85, 0x43, 0x56, 0x53, 0xa2)) }
    // Windows.Data.Text.TextPredictionGenerator Create(System.String)
    private func _n_Create(_ languageTag : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CITextPredictionGenerator>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextPredictionGeneratorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, languageTag, __presult))
        }
    }
    public func Create(languageTag : Swift.String) throws -> Optional<Windows.Data.Text.ITextPredictionGenerator> {
        let __hstr_languageTag = try HString(languageTag);
        return try withExtendedLifetime(__hstr_languageTag) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CITextPredictionGenerator>> = nil;
        try self._n_Create(__hstr_languageTag.Raw(), &__result);
        return Windows.Data.Text.ITextPredictionGenerator(consuming: __result);
        }
    }
} // ITextPredictionGeneratorFactory


// type: Windows.Data.Text.ITextReverseConversionGenerator
// interface type
open class ITextReverseConversionGenerator
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x51e7f514, Data2: 0x9c51, Data3 : 0x4d86, Data4 : (0xae, 0x1b, 0xb4, 0x98, 0xfb, 0xad, 0x83, 0x13)) }
    // [IsSpecialName] System.String get_ResolvedLanguage()
    private func _n_get_ResolvedLanguage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextReverseConversionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResolvedLanguage(pThis, __presult))
        }
    }
    public func get_ResolvedLanguage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ResolvedLanguage(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] bool get_LanguageAvailableButNotInstalled()
    private func _n_get_LanguageAvailableButNotInstalled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextReverseConversionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageAvailableButNotInstalled(pThis, __presult))
        }
    }
    public func get_LanguageAvailableButNotInstalled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_LanguageAvailableButNotInstalled(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<System.String> ConvertBackAsync(System.String)
    private func _n_ConvertBackAsync(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextReverseConversionGenerator.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConvertBackAsync(pThis, input, __presult))
        }
    }
    public func ConvertBackAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1_HSTRING> {
        let __hstr_input = try HString(input);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_HSTRING>> = nil;
        try self._n_ConvertBackAsync(__hstr_input.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1_HSTRING(consuming: __result);
        }
    }
    public func ConvertBack(input : Swift.String) async throws -> Swift.String {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConvertBackAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var LanguageAvailableButNotInstalled : boolean {
        get throws {
            return try get_LanguageAvailableButNotInstalled();
        }
    }
    public var ResolvedLanguage : Swift.String {
        get throws {
            return try get_ResolvedLanguage();
        }
    }
} // ITextReverseConversionGenerator


// type: Windows.Data.Text.ITextReverseConversionGenerator2
// interface type
open class ITextReverseConversionGenerator2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1aafd2ec, Data2: 0x85d6, Data3 : 0x46fd, Data4 : (0x82, 0x8a, 0x3a, 0x48, 0x30, 0xfa, 0x6e, 0x18)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextPhoneme>> GetPhonemesAsync(System.String)
    private func _n_GetPhonemesAsync(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextPhoneme>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextReverseConversionGenerator2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPhonemesAsync(pThis, input, __presult))
        }
    }
    public func GetPhonemesAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextPhoneme> {
        let __hstr_input = try HString(input);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextPhoneme>> = nil;
        try self._n_GetPhonemesAsync(__hstr_input.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextPhoneme(consuming: __result);
        }
    }
    public func GetPhonemes(input : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextPhoneme> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetPhonemesAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // ITextReverseConversionGenerator2


// type: Windows.Data.Text.ITextReverseConversionGeneratorFactory
// interface type
// ACTIVATION INTERFACE
open class ITextReverseConversionGeneratorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x63bed326, Data2: 0x1fda, Data3 : 0x41f6, Data4 : (0x89, 0xd5, 0x23, 0xdd, 0xea, 0x3c, 0x72, 0x9a)) }
    // Windows.Data.Text.TextReverseConversionGenerator Create(System.String)
    private func _n_Create(_ languageTag : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CITextReverseConversionGenerator>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CITextReverseConversionGeneratorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, languageTag, __presult))
        }
    }
    public func Create(languageTag : Swift.String) throws -> Optional<Windows.Data.Text.ITextReverseConversionGenerator> {
        let __hstr_languageTag = try HString(languageTag);
        return try withExtendedLifetime(__hstr_languageTag) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CITextReverseConversionGenerator>> = nil;
        try self._n_Create(__hstr_languageTag.Raw(), &__result);
        return Windows.Data.Text.ITextReverseConversionGenerator(consuming: __result);
        }
    }
} // ITextReverseConversionGeneratorFactory


// type: Windows.Data.Text.IWordSegment
// interface type
open class IWordSegment
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd2d4ba6d, Data2: 0x987c, Data3 : 0x4cc0, Data4 : (0xb6, 0xbd, 0xd4, 0x9a, 0x11, 0xb3, 0x8f, 0x9a)) }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Data.Text.TextSegment get_SourceTextSegment()
    private func _n_get_SourceTextSegment(_ __presult: UnsafeMutablePointer<_q_CWindows_CData_CText_CTextSegment>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceTextSegment(pThis, __presult))
        }
    }
    public func get_SourceTextSegment() throws -> Windows.Data.Text.TextSegment {
        var __result : _q_CWindows_CData_CText_CTextSegment = _q_CWindows_CData_CText_CTextSegment(StartPosition: 0, Length: 0);
        try self._n_get_SourceTextSegment(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Data.Text.AlternateWordForm> get_AlternateForms()
    private func _n_get_AlternateForms(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CAlternateWordForm>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlternateForms(pThis, __presult))
        }
    }
    public func get_AlternateForms() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CAlternateWordForm> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CAlternateWordForm>> = nil;
        try self._n_get_AlternateForms(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CAlternateWordForm(consuming: __result);
    }
    public var AlternateForms : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CAlternateWordForm> {
        get throws {
            return try get_AlternateForms();
        }
    }
    public var SourceTextSegment : Windows.Data.Text.TextSegment {
        get throws {
            return try get_SourceTextSegment();
        }
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
} // IWordSegment


// type: Windows.Data.Text.IWordsSegmenter
// interface type
open class IWordsSegmenter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x86b4d4d1, Data2: 0xb2fe, Data3 : 0x4e34, Data4 : (0xa8, 0x1d, 0x66, 0x64, 0x03, 0x00, 0x45, 0x4f)) }
    // [IsSpecialName] System.String get_ResolvedLanguage()
    private func _n_get_ResolvedLanguage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ResolvedLanguage(pThis, __presult))
        }
    }
    public func get_ResolvedLanguage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ResolvedLanguage(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Data.Text.WordSegment GetTokenAt(System.String, System.UInt32)
    private func _n_GetTokenAt(_ text : Optional<HSTRING>, _ startIndex : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CIWordSegment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTokenAt(pThis, text, startIndex, __presult))
        }
    }
    public func GetTokenAt(text : Swift.String, startIndex : Swift.UInt32) throws -> Optional<Windows.Data.Text.IWordSegment> {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CIWordSegment>> = nil;
        try self._n_GetTokenAt(__hstr_text.Raw(), startIndex, &__result);
        return Windows.Data.Text.IWordSegment(consuming: __result);
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Data.Text.WordSegment> GetTokens(System.String)
    private func _n_GetTokens(_ text : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CWordSegment>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTokens(pThis, text, __presult))
        }
    }
    public func GetTokens(text : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CWordSegment> {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CWordSegment>> = nil;
        try self._n_GetTokens(__hstr_text.Raw(), &__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CWordSegment(consuming: __result);
        }
    }
    // void Tokenize(System.String, System.UInt32, Windows.Data.Text.WordSegmentsTokenizingHandler)
    private func _n_Tokenize(_ text : Optional<HSTRING>, _ startIndex : UINT32, _ handler : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CIWordSegmentsTokenizingHandler>>) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordsSegmenter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Tokenize(pThis, text, startIndex, handler))
        }
    }
    public func Tokenize(text : Swift.String, startIndex : Swift.UInt32, handler : Optional<Windows.Data.Text.IWordSegmentsTokenizingHandler>) throws -> Void {
        let __hstr_text = try HString(text);
        return try withExtendedLifetime(__hstr_text) {
        try self._n_Tokenize(__hstr_text.Raw(), startIndex, RawPointer(handler));
        }
    }
    public var ResolvedLanguage : Swift.String {
        get throws {
            return try get_ResolvedLanguage();
        }
    }
} // IWordsSegmenter


// type: Windows.Data.Text.IWordsSegmenterFactory
// interface type
// ACTIVATION INTERFACE
open class IWordsSegmenterFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe6977274, Data2: 0xfc35, Data3 : 0x455c, Data4 : (0x8b, 0xfb, 0x6d, 0x7f, 0x46, 0x53, 0xca, 0x97)) }
    // Windows.Data.Text.WordsSegmenter CreateWithLanguage(System.String)
    private func _n_CreateWithLanguage(_ language : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CIWordsSegmenter>>>?) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordsSegmenterFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithLanguage(pThis, language, __presult))
        }
    }
    public func CreateWithLanguage(language : Swift.String) throws -> Optional<Windows.Data.Text.IWordsSegmenter> {
        let __hstr_language = try HString(language);
        return try withExtendedLifetime(__hstr_language) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CData_CText_CIWordsSegmenter>> = nil;
        try self._n_CreateWithLanguage(__hstr_language.Raw(), &__result);
        return Windows.Data.Text.IWordsSegmenter(consuming: __result);
        }
    }
} // IWordsSegmenterFactory


// type: Windows.Data.Text.SelectableWordSegment
// runtime class
public class SelectableWordSegment
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.ISelectableWordSegment;
    public init(plok: Windows.Data.Text.ISelectableWordSegment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.ISelectableWordSegment { return _self; }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.ISelectableWordSegment = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public func get_SourceTextSegment() throws -> Windows.Data.Text.TextSegment {
        let _ifc : Windows.Data.Text.ISelectableWordSegment = try _self.QueryInterface();
        return try _ifc.get_SourceTextSegment();
    }
    public var SourceTextSegment : Windows.Data.Text.TextSegment {
        get throws {
        let _ifc : Windows.Data.Text.ISelectableWordSegment = try _self.QueryInterface();
        return try _ifc.SourceTextSegment;
        }
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.ISelectableWordSegment = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
}

// type: Windows.Data.Text.SelectableWordSegmentsTokenizingHandler
// delegate type
open class ISelectableWordSegmentsTokenizingHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3a3dfc9c, Data2: 0xaede, Data3 : 0x4dc7, Data4 : (0x9e, 0x6c, 0x41, 0xc0, 0x44, 0xbd, 0x35, 0x92)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.Collections.IIterable<Windows.Data.Text.SelectableWordSegment>, Windows.Foundation.Collections.IIterable<Windows.Data.Text.SelectableWordSegment>)
    private func _n_Invoke(_ precedingWords : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>>, _ words : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>>) throws {
        return try perform(as: _q_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, precedingWords, words))
        }
    }
    public func Invoke(precedingWords : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>, words : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>) throws -> Void {
        try self._n_Invoke(RawPointer(precedingWords), RawPointer(words));
    }
}
// impl delegate type
open class SelectableWordSegmentsTokenizingHandler
{
    private static var vtable: _q_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Windows.Data.Text.ISelectableWordSegmentsTokenizingHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: SelectableWordSegmentsTokenizingHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: SelectableWordSegmentsTokenizingHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ precedingWords : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>>, _ words : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>>) in
        guard let self = SelectableWordSegmentsTokenizingHandler.from_SelectableWordSegmentsTokenizingHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(precedingWords: ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment(precedingWords), words: ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment(words))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: SelectableWordSegmentsTokenizingHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>, Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>, Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CWindows_CData_CText_CISelectableWordSegmentsTokenizingHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_SelectableWordSegmentsTokenizingHandler(_ pUnk: UnsafeMutableRawPointer?) -> SelectableWordSegmentsTokenizingHandler? {
        return pUnk?.bindMemory(to: SelectableWordSegmentsTokenizingHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(precedingWords : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>, words : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>) throws -> Void {
        if let cb = _cb {
            return try cb(precedingWords, words)
        }
    }
    public func Interface() -> Windows.Data.Text.ISelectableWordSegmentsTokenizingHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Windows.Data.Text.ISelectableWordSegmentsTokenizingHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_SelectableWordSegmentsTokenizingHandler
{
    private var _self : Windows.Data.Text.ISelectableWordSegmentsTokenizingHandler;
    public init(plok: Windows.Data.Text.ISelectableWordSegmentsTokenizingHandler?) throws {
        _self = plok!
    }
    public func Invoke(precedingWords : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>, words : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>) throws -> Void {
        return try _self.Invoke(precedingWords: precedingWords, words: words);
    }
    public func Interface() -> Windows.Data.Text.ISelectableWordSegmentsTokenizingHandler {
        return _self
    }
}

// type: Windows.Data.Text.SelectableWordsSegmenter
// runtime class
public class SelectableWordsSegmenter
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.ISelectableWordsSegmenter;
    public init(plok: Windows.Data.Text.ISelectableWordsSegmenter?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.ISelectableWordsSegmenter { return _self; }
    public init(language : Swift.String) throws {
        let _af : ISelectableWordsSegmenterFactory = try RoGetActivationFactory("Windows.Data.Text.SelectableWordsSegmenter");
        _self = try _af.CreateWithLanguage(language: language)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ResolvedLanguage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.ISelectableWordsSegmenter = try _self.QueryInterface();
        return try _ifc.get_ResolvedLanguage();
    }
    public func GetTokenAt(text : Swift.String, startIndex : Swift.UInt32) throws -> Optional<Windows.Data.Text.SelectableWordSegment> {
        let _ifc : Windows.Data.Text.ISelectableWordsSegmenter = try _self.QueryInterface();
        return try Windows.Data.Text.SelectableWordSegment(plok: _ifc.GetTokenAt(text: text, startIndex: startIndex));
    }
    public func GetTokens(text : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CSelectableWordSegment> {
        let _ifc : Windows.Data.Text.ISelectableWordsSegmenter = try _self.QueryInterface();
        return try _ifc.GetTokens(text: text);
    }
    public func Tokenize(text : Swift.String, startIndex : Swift.UInt32, handler : @escaping (Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>, Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CSelectableWordSegment>) throws -> Void) throws -> Void {
        let _ifc : Windows.Data.Text.ISelectableWordsSegmenter = try _self.QueryInterface();
        return try _ifc.Tokenize(text: text, startIndex: startIndex, handler: Windows.Data.Text.SelectableWordSegmentsTokenizingHandler(cb: handler).Interface());
    }
    public var ResolvedLanguage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.ISelectableWordsSegmenter = try _self.QueryInterface();
        return try _ifc.ResolvedLanguage;
        }
    }
}

// type: Windows.Data.Text.SemanticTextQuery
// runtime class
public class SemanticTextQuery
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.ISemanticTextQuery;
    public init(plok: Windows.Data.Text.ISemanticTextQuery?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.ISemanticTextQuery { return _self; }
    public init(aqsFilter : Swift.String) throws {
        let _af : ISemanticTextQueryFactory = try RoGetActivationFactory("Windows.Data.Text.SemanticTextQuery");
        _self = try _af.Create(aqsFilter: aqsFilter)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(aqsFilter : Swift.String, filterLanguage : Swift.String) throws {
        let _af : ISemanticTextQueryFactory = try RoGetActivationFactory("Windows.Data.Text.SemanticTextQuery");
        _self = try _af.CreateWithLanguage(aqsFilter: aqsFilter, filterLanguage: filterLanguage)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func Find(content : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextSegment> {
        let _ifc : Windows.Data.Text.ISemanticTextQuery = try _self.QueryInterface();
        return try _ifc.Find(content: content);
    }
    public func FindInProperty(propertyContent : Swift.String, propertyName : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextSegment> {
        let _ifc : Windows.Data.Text.ISemanticTextQuery = try _self.QueryInterface();
        return try _ifc.FindInProperty(propertyContent: propertyContent, propertyName: propertyName);
    }
}

// type: Windows.Data.Text.TextConversionGenerator
// runtime class
public class TextConversionGenerator
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.ITextConversionGenerator;
    public init(plok: Windows.Data.Text.ITextConversionGenerator?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.ITextConversionGenerator { return _self; }
    public init(languageTag : Swift.String) throws {
        let _af : ITextConversionGeneratorFactory = try RoGetActivationFactory("Windows.Data.Text.TextConversionGenerator");
        _self = try _af.Create(languageTag: languageTag)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ResolvedLanguage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.ITextConversionGenerator = try _self.QueryInterface();
        return try _ifc.get_ResolvedLanguage();
    }
    public func get_LanguageAvailableButNotInstalled() throws -> boolean {
        let _ifc : Windows.Data.Text.ITextConversionGenerator = try _self.QueryInterface();
        return try _ifc.get_LanguageAvailableButNotInstalled();
    }
    public func GetCandidatesAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let _ifc : Windows.Data.Text.ITextConversionGenerator = try _self.QueryInterface();
        return try _ifc.GetCandidatesAsync(input: input);
    }
    public func GetCandidates(input : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetCandidatesAsync(input : Swift.String, maxCandidates : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let _ifc : Windows.Data.Text.ITextConversionGenerator = try _self.QueryInterface();
        return try _ifc.GetCandidatesWithMaxCountAsync(input: input, maxCandidates: maxCandidates);
    }
    public func GetCandidates(input : Swift.String, maxCandidates : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesAsync(input: input, maxCandidates: maxCandidates)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var LanguageAvailableButNotInstalled : boolean {
        get throws {
        let _ifc : Windows.Data.Text.ITextConversionGenerator = try _self.QueryInterface();
        return try _ifc.LanguageAvailableButNotInstalled;
        }
    }
    public var ResolvedLanguage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.ITextConversionGenerator = try _self.QueryInterface();
        return try _ifc.ResolvedLanguage;
        }
    }
}

// type: Windows.Data.Text.TextPhoneme
// runtime class
public class TextPhoneme
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.ITextPhoneme;
    public init(plok: Windows.Data.Text.ITextPhoneme?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.ITextPhoneme { return _self; }
    public func get_DisplayText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.ITextPhoneme = try _self.QueryInterface();
        return try _ifc.get_DisplayText();
    }
    public func get_ReadingText() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.ITextPhoneme = try _self.QueryInterface();
        return try _ifc.get_ReadingText();
    }
    public var DisplayText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.ITextPhoneme = try _self.QueryInterface();
        return try _ifc.DisplayText;
        }
    }
    public var ReadingText : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.ITextPhoneme = try _self.QueryInterface();
        return try _ifc.ReadingText;
        }
    }
}

// type: Windows.Data.Text.TextPredictionGenerator
// runtime class
public class TextPredictionGenerator
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.ITextPredictionGenerator;
    public init(plok: Windows.Data.Text.ITextPredictionGenerator?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.ITextPredictionGenerator { return _self; }
    public init(languageTag : Swift.String) throws {
        let _af : ITextPredictionGeneratorFactory = try RoGetActivationFactory("Windows.Data.Text.TextPredictionGenerator");
        _self = try _af.Create(languageTag: languageTag)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ResolvedLanguage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator = try _self.QueryInterface();
        return try _ifc.get_ResolvedLanguage();
    }
    public func get_LanguageAvailableButNotInstalled() throws -> boolean {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator = try _self.QueryInterface();
        return try _ifc.get_LanguageAvailableButNotInstalled();
    }
    public func GetCandidatesAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator = try _self.QueryInterface();
        return try _ifc.GetCandidatesAsync(input: input);
    }
    public func GetCandidates(input : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetCandidatesAsync(input : Swift.String, maxCandidates : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator = try _self.QueryInterface();
        return try _ifc.GetCandidatesWithMaxCountAsync(input: input, maxCandidates: maxCandidates);
    }
    public func GetCandidates(input : Swift.String, maxCandidates : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesAsync(input: input, maxCandidates: maxCandidates)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var LanguageAvailableButNotInstalled : boolean {
        get throws {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator = try _self.QueryInterface();
        return try _ifc.LanguageAvailableButNotInstalled;
        }
    }
    public var ResolvedLanguage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator = try _self.QueryInterface();
        return try _ifc.ResolvedLanguage;
        }
    }
    public func GetCandidatesAsync(input : Swift.String, maxCandidates : Swift.UInt32, predictionOptions : Windows.Data.Text.TextPredictionOptions, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator2 = try _self.QueryInterface();
        return try _ifc.GetCandidatesWithParametersAsync(input: input, maxCandidates: maxCandidates, predictionOptions: predictionOptions, previousStrings: previousStrings);
    }
    public func GetCandidates(input : Swift.String, maxCandidates : Swift.UInt32, predictionOptions : Windows.Data.Text.TextPredictionOptions, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCandidatesAsync(input: input, maxCandidates: maxCandidates, predictionOptions: predictionOptions, previousStrings: previousStrings)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetNextWordCandidatesAsync(maxCandidates : Swift.UInt32, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING> {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator2 = try _self.QueryInterface();
        return try _ifc.GetNextWordCandidatesAsync(maxCandidates: maxCandidates, previousStrings: previousStrings);
    }
    public func GetNextWordCandidates(maxCandidates : Swift.UInt32, previousStrings : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetNextWordCandidatesAsync(maxCandidates: maxCandidates, previousStrings: previousStrings)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_InputScope() throws -> Windows.UI.Text.Core.CoreTextInputScope {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator2 = try _self.QueryInterface();
        return try _ifc.get_InputScope();
    }
    public func put_InputScope(value : Windows.UI.Text.Core.CoreTextInputScope) throws -> Void {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator2 = try _self.QueryInterface();
        return try _ifc.put_InputScope(value: value);
    }
    public var InputScope : Windows.UI.Text.Core.CoreTextInputScope {
        get throws {
        let _ifc : Windows.Data.Text.ITextPredictionGenerator2 = try _self.QueryInterface();
        return try _ifc.InputScope;
        }
    }
}

// type: Windows.Data.Text.TextPredictionOptions
// enum type
public typealias TextPredictionOptions = _q_CWindows_CData_CText_CTextPredictionOptions;

// type: Windows.Data.Text.TextReverseConversionGenerator
// runtime class
public class TextReverseConversionGenerator
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.ITextReverseConversionGenerator;
    public init(plok: Windows.Data.Text.ITextReverseConversionGenerator?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.ITextReverseConversionGenerator { return _self; }
    public init(languageTag : Swift.String) throws {
        let _af : ITextReverseConversionGeneratorFactory = try RoGetActivationFactory("Windows.Data.Text.TextReverseConversionGenerator");
        _self = try _af.Create(languageTag: languageTag)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ResolvedLanguage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.ITextReverseConversionGenerator = try _self.QueryInterface();
        return try _ifc.get_ResolvedLanguage();
    }
    public func get_LanguageAvailableButNotInstalled() throws -> boolean {
        let _ifc : Windows.Data.Text.ITextReverseConversionGenerator = try _self.QueryInterface();
        return try _ifc.get_LanguageAvailableButNotInstalled();
    }
    public func ConvertBackAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1_HSTRING> {
        let _ifc : Windows.Data.Text.ITextReverseConversionGenerator = try _self.QueryInterface();
        return try _ifc.ConvertBackAsync(input: input);
    }
    public func ConvertBack(input : Swift.String) async throws -> Optional<Swift.String> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConvertBackAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var LanguageAvailableButNotInstalled : boolean {
        get throws {
        let _ifc : Windows.Data.Text.ITextReverseConversionGenerator = try _self.QueryInterface();
        return try _ifc.LanguageAvailableButNotInstalled;
        }
    }
    public var ResolvedLanguage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.ITextReverseConversionGenerator = try _self.QueryInterface();
        return try _ifc.ResolvedLanguage;
        }
    }
    public func GetPhonemesAsync(input : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextPhoneme> {
        let _ifc : Windows.Data.Text.ITextReverseConversionGenerator2 = try _self.QueryInterface();
        return try _ifc.GetPhonemesAsync(input: input);
    }
    public func GetPhonemes(input : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CTextPhoneme> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetPhonemesAsync(input: input)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Data.Text.TextSegment
// struct type
public typealias TextSegment = _q_CWindows_CData_CText_CTextSegment;

// type: Windows.Data.Text.WordSegment
// runtime class
public class WordSegment
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.IWordSegment;
    public init(plok: Windows.Data.Text.IWordSegment?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.IWordSegment { return _self; }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.IWordSegment = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public func get_SourceTextSegment() throws -> Windows.Data.Text.TextSegment {
        let _ifc : Windows.Data.Text.IWordSegment = try _self.QueryInterface();
        return try _ifc.get_SourceTextSegment();
    }
    public func get_AlternateForms() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CAlternateWordForm> {
        let _ifc : Windows.Data.Text.IWordSegment = try _self.QueryInterface();
        return try _ifc.get_AlternateForms();
    }
    public var AlternateForms : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CAlternateWordForm> {
        get throws {
        let _ifc : Windows.Data.Text.IWordSegment = try _self.QueryInterface();
        return try _ifc.AlternateForms;
        }
    }
    public var SourceTextSegment : Windows.Data.Text.TextSegment {
        get throws {
        let _ifc : Windows.Data.Text.IWordSegment = try _self.QueryInterface();
        return try _ifc.SourceTextSegment;
        }
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.IWordSegment = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
}

// type: Windows.Data.Text.WordSegmentsTokenizingHandler
// delegate type
open class IWordSegmentsTokenizingHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa5dd6357, Data2: 0xbf2a, Data3 : 0x4c4f, Data4 : (0xa3, 0x1f, 0x29, 0xe7, 0x1c, 0x6f, 0x8b, 0x35)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.Collections.IIterable<Windows.Data.Text.WordSegment>, Windows.Foundation.Collections.IIterable<Windows.Data.Text.WordSegment>)
    private func _n_Invoke(_ precedingWords : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CWordSegment>>, _ words : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CWordSegment>>) throws {
        return try perform(as: _q_CWindows_CData_CText_CIWordSegmentsTokenizingHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, precedingWords, words))
        }
    }
    public func Invoke(precedingWords : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>, words : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>) throws -> Void {
        try self._n_Invoke(RawPointer(precedingWords), RawPointer(words));
    }
}
// impl delegate type
open class WordSegmentsTokenizingHandler
{
    private static var vtable: _q_CWindows_CData_CText_CIWordSegmentsTokenizingHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Windows.Data.Text.IWordSegmentsTokenizingHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: WordSegmentsTokenizingHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: WordSegmentsTokenizingHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ precedingWords : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CWordSegment>>, _ words : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CData_CText_CWordSegment>>) in
        guard let self = WordSegmentsTokenizingHandler.from_WordSegmentsTokenizingHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(precedingWords: ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment(precedingWords), words: ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment(words))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: WordSegmentsTokenizingHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CWindows_CData_CText_CIWordSegmentsTokenizingHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>, Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>, Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CWindows_CData_CText_CIWordSegmentsTokenizingHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_WordSegmentsTokenizingHandler(_ pUnk: UnsafeMutableRawPointer?) -> WordSegmentsTokenizingHandler? {
        return pUnk?.bindMemory(to: WordSegmentsTokenizingHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(precedingWords : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>, words : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>) throws -> Void {
        if let cb = _cb {
            return try cb(precedingWords, words)
        }
    }
    public func Interface() -> Windows.Data.Text.IWordSegmentsTokenizingHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Windows.Data.Text.IWordSegmentsTokenizingHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_WordSegmentsTokenizingHandler
{
    private var _self : Windows.Data.Text.IWordSegmentsTokenizingHandler;
    public init(plok: Windows.Data.Text.IWordSegmentsTokenizingHandler?) throws {
        _self = plok!
    }
    public func Invoke(precedingWords : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>, words : Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>) throws -> Void {
        return try _self.Invoke(precedingWords: precedingWords, words: words);
    }
    public func Interface() -> Windows.Data.Text.IWordSegmentsTokenizingHandler {
        return _self
    }
}

// type: Windows.Data.Text.WordsSegmenter
// runtime class
public class WordsSegmenter
    :
    WinRT.Object
{
    private var _self : Windows.Data.Text.IWordsSegmenter;
    public init(plok: Windows.Data.Text.IWordsSegmenter?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Data.Text.IWordsSegmenter { return _self; }
    public init(language : Swift.String) throws {
        let _af : IWordsSegmenterFactory = try RoGetActivationFactory("Windows.Data.Text.WordsSegmenter");
        _self = try _af.CreateWithLanguage(language: language)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ResolvedLanguage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Data.Text.IWordsSegmenter = try _self.QueryInterface();
        return try _ifc.get_ResolvedLanguage();
    }
    public func GetTokenAt(text : Swift.String, startIndex : Swift.UInt32) throws -> Optional<Windows.Data.Text.WordSegment> {
        let _ifc : Windows.Data.Text.IWordsSegmenter = try _self.QueryInterface();
        return try Windows.Data.Text.WordSegment(plok: _ifc.GetTokenAt(text: text, startIndex: startIndex));
    }
    public func GetTokens(text : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CData_CText_CWordSegment> {
        let _ifc : Windows.Data.Text.IWordsSegmenter = try _self.QueryInterface();
        return try _ifc.GetTokens(text: text);
    }
    public func Tokenize(text : Swift.String, startIndex : Swift.UInt32, handler : @escaping (Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>, Optional<ClosedGenerics.IIterable_1__q_CWindows_CData_CText_CWordSegment>) throws -> Void) throws -> Void {
        let _ifc : Windows.Data.Text.IWordsSegmenter = try _self.QueryInterface();
        return try _ifc.Tokenize(text: text, startIndex: startIndex, handler: Windows.Data.Text.WordSegmentsTokenizingHandler(cb: handler).Interface());
    }
    public var ResolvedLanguage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Data.Text.IWordsSegmenter = try _self.QueryInterface();
        return try _ifc.ResolvedLanguage;
        }
    }
}

}
extension Windows.Data.Text.AlternateNormalizationFormat {
    public static var NotNormalized : Self {
        get {
            return _q_CWindows_CData_CText_CAlternateNormalizationFormat_NotNormalized;
        }
    }
    public static var Number : Self {
        get {
            return _q_CWindows_CData_CText_CAlternateNormalizationFormat_Number;
        }
    }
    public static var Currency : Self {
        get {
            return _q_CWindows_CData_CText_CAlternateNormalizationFormat_Currency;
        }
    }
    public static var Date : Self {
        get {
            return _q_CWindows_CData_CText_CAlternateNormalizationFormat_Date;
        }
    }
    public static var Time : Self {
        get {
            return _q_CWindows_CData_CText_CAlternateNormalizationFormat_Time;
        }
    }
}
extension Windows.Data.Text.TextPredictionOptions {
    public static var None : Self {
        get {
            return _q_CWindows_CData_CText_CTextPredictionOptions_None;
        }
    }
    public static var Predictions : Self {
        get {
            return _q_CWindows_CData_CText_CTextPredictionOptions_Predictions;
        }
    }
    public static var Corrections : Self {
        get {
            return _q_CWindows_CData_CText_CTextPredictionOptions_Corrections;
        }
    }
}
