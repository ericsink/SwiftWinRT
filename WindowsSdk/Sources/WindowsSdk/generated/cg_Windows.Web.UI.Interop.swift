// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x234d40c0, Data2: 0x2c51, Data3 : 0x5128, Data4 : (0xb9, 0x19, 0x00, 0x3f, 0x1c, 0x0a, 0x8a, 0x26)) }
    // [IsSpecialName] void Invoke(Windows.Web.UI.Interop.WebViewControl, Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Web.UI.IWebViewControl>, args : Optional<Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs
// impl delegate type
open class impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs>>) in
        guard let self = impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs.from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Web.UI.Interop.WebViewControl(plok: Windows.Web.UI.IWebViewControl(sender)), args: Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs(plok: Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs? {
        return pUnk?.bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControl>, args : Optional<Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControl>, args : Optional<Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb24e7b5b, Data2: 0xb804, Data3 : 0x5346, Data4 : (0x97, 0xb5, 0x02, 0xe6, 0xd9, 0xb6, 0xcb, 0xa8)) }
    // [IsSpecialName] void Invoke(Windows.Web.UI.Interop.WebViewControl, Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Web.UI.IWebViewControl>, args : Optional<Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs
// impl delegate type
open class impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs>>) in
        guard let self = impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs.from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Web.UI.Interop.WebViewControl(plok: Windows.Web.UI.IWebViewControl(sender)), args: Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs(plok: Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs? {
        return pUnk?.bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControl>, args : Optional<Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControl>, args : Optional<Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x34a6446f, Data2: 0x5467, Data3 : 0x5063, Data4 : (0xbd, 0xc0, 0x7f, 0xb0, 0x65, 0x75, 0x10, 0xd1)) }
    // [IsSpecialName] void Invoke(Windows.Web.UI.Interop.WebViewControl, System.Object)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Web.UI.IWebViewControl>, args : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable
// impl delegate type
open class impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable.from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Web.UI.Interop.WebViewControl(plok: Windows.Web.UI.IWebViewControl(sender)), args: WinRT.Object(plok: WinRT.IInspectable(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<WinRT.Object>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<WinRT.Object>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable(_ pUnk: UnsafeMutableRawPointer?) -> impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable? {
        return pUnk?.bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControl>, args : Optional<WinRT.Object>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControl>, args : Optional<WinRT.Object>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.GetInterface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable {
        return _self
    }
}
// closed interface type
public class IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xac3d28ac, Data2: 0x8362, Data3 : 0x51c6, Data4 : (0xb2, 0xcc, 0x16, 0xf3, 0x67, 0x27, 0x58, 0xf1)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Web.UI.Interop.WebViewControl>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Web.UI.Interop.WebViewControl> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(consuming: __result);
    }
    // Windows.Web.UI.Interop.WebViewControl GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Web.UI.IWebViewControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CIWebViewControl>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Web.UI.IWebViewControl(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd61963d6, Data2: 0x806d, Data3 : 0x50a8, Data4 : (0xa8, 0x1c, 0x75, 0xd9, 0x35, 0x6a, 0xd5, 0xd7)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Web.UI.Interop.WebViewControl>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
// impl delegate type
open class impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControlVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.from_impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(_ pUnk: UnsafeMutableRawPointer?) -> impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl? {
        return pUnk?.bindMemory(to: impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5ecbd5c0, Data2: 0x8282, Data3 : 0x5fe1, Data4 : (0xad, 0x39, 0x37, 0x4c, 0xde, 0x70, 0xe0, 0xcd)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0c4182f4, Data2: 0xcc4c, Data3 : 0x55f3, Data4 : (0xb4, 0x21, 0xd4, 0xe7, 0x49, 0xeb, 0x80, 0xa1)) }
    // [IsSpecialName] void Invoke(Windows.Web.UI.Interop.WebViewControlProcess, System.Object)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Web.UI.Interop.IWebViewControlProcess>, args : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable
// impl delegate type
open class impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable.from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Web.UI.Interop.WebViewControlProcess(plok: Windows.Web.UI.Interop.IWebViewControlProcess(sender)), args: WinRT.Object(plok: WinRT.IInspectable(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControlProcess>, Optional<WinRT.Object>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Web.UI.Interop.WebViewControlProcess>, Optional<WinRT.Object>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable(_ pUnk: UnsafeMutableRawPointer?) -> impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable? {
        return pUnk?.bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControlProcess>, args : Optional<WinRT.Object>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Web.UI.Interop.WebViewControlProcess>, args : Optional<WinRT.Object>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.GetInterface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable {
        return _self
    }
}
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Web.UI.IWebViewControl> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.impl_AsyncOperationCompletedHandler_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
