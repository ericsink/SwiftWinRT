// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.ServiceDiscovery.Dnssd {
// type: Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult
// runtime class
public class DnssdRegistrationResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult;
    public init(plok: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Status() throws -> Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_IPAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_IPAddress());
    }
    public func get_HasInstanceNameChanged() throws -> boolean {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult = try _self.QueryInterface();
        return try _ifc.get_HasInstanceNameChanged();
    }
    public var HasInstanceNameChanged : boolean {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult = try _self.QueryInterface();
        return try _ifc.HasInstanceNameChanged;
        }
    }
    public var IPAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.IPAddress);
        }
    }
    public var Status : Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus
// enum type
public typealias DnssdRegistrationStatus = _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus;

// type: Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance
// runtime class
public class DnssdServiceInstance
    :
    WinRT.Object
{
    private var _self : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance;
    public init(plok: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance { return _self; }
    public init(dnssdServiceInstanceName : Swift.String, hostName : Optional<Windows.Networking.HostName>, port : Swift.UInt16) throws {
        let _af : IDnssdServiceInstanceFactory = try RoGetActivationFactory("Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance");
        _self = try _af.Create(dnssdServiceInstanceName: dnssdServiceInstanceName, hostName: hostName!.Interface(), port: port)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_DnssdServiceInstanceName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.get_DnssdServiceInstanceName();
    }
    public func put_DnssdServiceInstanceName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.put_DnssdServiceInstanceName(value: value);
    }
    public func get_HostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_HostName());
    }
    public func put_HostName(value : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.put_HostName(value: value!.Interface());
    }
    public func get_Port() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.get_Port();
    }
    public func put_Port(value : Swift.UInt16) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.put_Port(value: value);
    }
    public func get_Priority() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.get_Priority();
    }
    public func put_Priority(value : Swift.UInt16) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.put_Priority(value: value);
    }
    public func get_Weight() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.get_Weight();
    }
    public func put_Weight(value : Swift.UInt16) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.put_Weight(value: value);
    }
    public func get_TextAttributes() throws -> Optional<ClosedGenerics.IMap_2_HSTRING_HSTRING> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.get_TextAttributes();
    }
    public func RegisterStreamSocketListenerAsync(socket : Optional<Windows.Networking.Sockets.StreamSocketListener>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.RegisterStreamSocketListenerAsync1(socket: socket!.Interface());
    }
    public func RegisterStreamSocketListener(socket : Optional<Windows.Networking.Sockets.StreamSocketListener>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult(plok: self.RegisterStreamSocketListenerAsync(socket: socket)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RegisterStreamSocketListenerAsync(socket : Optional<Windows.Networking.Sockets.StreamSocketListener>, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.RegisterStreamSocketListenerAsync2(socket: socket!.Interface(), adapter: adapter!.Interface());
    }
    public func RegisterStreamSocketListener(socket : Optional<Windows.Networking.Sockets.StreamSocketListener>, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult(plok: self.RegisterStreamSocketListenerAsync(socket: socket, adapter: adapter)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RegisterDatagramSocketAsync(socket : Optional<Windows.Networking.Sockets.DatagramSocket>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.RegisterDatagramSocketAsync1(socket: socket!.Interface());
    }
    public func RegisterDatagramSocket(socket : Optional<Windows.Networking.Sockets.DatagramSocket>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult(plok: self.RegisterDatagramSocketAsync(socket: socket)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RegisterDatagramSocketAsync(socket : Optional<Windows.Networking.Sockets.DatagramSocket>, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.RegisterDatagramSocketAsync2(socket: socket!.Interface(), adapter: adapter!.Interface());
    }
    public func RegisterDatagramSocket(socket : Optional<Windows.Networking.Sockets.DatagramSocket>, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult(plok: self.RegisterDatagramSocketAsync(socket: socket, adapter: adapter)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var DnssdServiceInstanceName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.DnssdServiceInstanceName;
        }
    }
    public var HostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.HostName);
        }
    }
    public var Port : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.Port;
        }
    }
    public var Priority : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.Priority;
        }
    }
    public var TextAttributes : Optional<ClosedGenerics.IMap_2_HSTRING_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.TextAttributes;
        }
    }
    public var Weight : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance = try _self.QueryInterface();
        return try _ifc.Weight;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstanceCollection
// runtime class
public class DnssdServiceInstanceCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance;
    public init(plok: ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance { return _self; }
    // method not needed: GetAt
    // method not needed: get_Size
    // method not needed: IndexOf
    // method not needed: GetMany
    // method not needed: First
}

// type: Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher
// runtime class
public class DnssdServiceWatcher
    :
    WinRT.Object
{
    private var _self : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher;
    public init(plok: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher { return _self; }
    public func add_Added(handler : @escaping (Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.add_Added(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance(cb: handler).Interface());
    }
    public func remove_Added(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.remove_Added(token: token);
    }
    public func add_EnumerationCompleted(handler : @escaping (Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.add_EnumerationCompleted(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_EnumerationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.remove_EnumerationCompleted(token: token);
    }
    public func add_Stopped(handler : @escaping (Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.add_Stopped(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable(cb: handler).Interface());
    }
    public func remove_Stopped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.remove_Stopped(token: token);
    }
    public func get_Status() throws -> Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func Start() throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.Start();
    }
    public func Stop() throws -> Void {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public var Status : Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus {
        get throws {
        let _ifc : Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus
// enum type
public typealias DnssdServiceWatcherStatus = _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus;

// type: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult
// interface type
open class IDnssdRegistrationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3d786ad2, Data2: 0xe606, Data3 : 0x5350, Data4 : (0x73, 0xea, 0x7e, 0x97, 0xf0, 0x66, 0x16, 0x2f)) }
    // [IsSpecialName] Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdRegistrationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus {
        var __result : _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus = _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.HostName get_IPAddress()
    private func _n_get_IPAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdRegistrationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IPAddress(pThis, __presult))
        }
    }
    public func get_IPAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_IPAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] bool get_HasInstanceNameChanged()
    private func _n_get_HasInstanceNameChanged(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdRegistrationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasInstanceNameChanged(pThis, __presult))
        }
    }
    public func get_HasInstanceNameChanged() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasInstanceNameChanged(&__result);
        return __result;
    }
    public var HasInstanceNameChanged : boolean {
        get throws {
            return try get_HasInstanceNameChanged();
        }
    }
    public var IPAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_IPAddress();
        }
    }
    public var Status : Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus {
        get throws {
            return try get_Status();
        }
    }
} // IDnssdRegistrationResult


// type: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance
// interface type
open class IDnssdServiceInstance
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe246db7e, Data2: 0x98a5, Data3 : 0x4ca1, Data4 : (0xb9, 0xe4, 0xc2, 0x53, 0xd3, 0x3c, 0x35, 0xff)) }
    // [IsSpecialName] System.String get_DnssdServiceInstanceName()
    private func _n_get_DnssdServiceInstanceName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DnssdServiceInstanceName(pThis, __presult))
        }
    }
    public func get_DnssdServiceInstanceName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DnssdServiceInstanceName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_DnssdServiceInstanceName(System.String)
    private func _n_put_DnssdServiceInstanceName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DnssdServiceInstanceName(pThis, value))
        }
    }
    public func put_DnssdServiceInstanceName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DnssdServiceInstanceName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Networking.HostName get_HostName()
    private func _n_get_HostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HostName(pThis, __presult))
        }
    }
    public func get_HostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_HostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] void put_HostName(Windows.Networking.HostName)
    private func _n_put_HostName(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HostName(pThis, value))
        }
    }
    public func put_HostName(value : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_put_HostName(RawPointer(value));
    }
    // [IsSpecialName] System.UInt16 get_Port()
    private func _n_get_Port(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Port(pThis, __presult))
        }
    }
    public func get_Port() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_Port(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Port(System.UInt16)
    private func _n_put_Port(_ value : UINT16) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Port(pThis, value))
        }
    }
    public func put_Port(value : Swift.UInt16) throws -> Void {
        try self._n_put_Port(value);
    }
    // [IsSpecialName] System.UInt16 get_Priority()
    private func _n_get_Priority(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Priority(pThis, __presult))
        }
    }
    public func get_Priority() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_Priority(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Priority(System.UInt16)
    private func _n_put_Priority(_ value : UINT16) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Priority(pThis, value))
        }
    }
    public func put_Priority(value : Swift.UInt16) throws -> Void {
        try self._n_put_Priority(value);
    }
    // [IsSpecialName] System.UInt16 get_Weight()
    private func _n_get_Weight(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Weight(pThis, __presult))
        }
    }
    public func get_Weight() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_Weight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Weight(System.UInt16)
    private func _n_put_Weight(_ value : UINT16) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Weight(pThis, value))
        }
    }
    public func put_Weight(value : Swift.UInt16) throws -> Void {
        try self._n_put_Weight(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IMap<System.String,System.String> get_TextAttributes()
    private func _n_get_TextAttributes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAttributes(pThis, __presult))
        }
    }
    public func get_TextAttributes() throws -> Optional<ClosedGenerics.IMap_2_HSTRING_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING_HSTRING>> = nil;
        try self._n_get_TextAttributes(&__result);
        return ClosedGenerics.IMap_2_HSTRING_HSTRING(consuming: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> RegisterStreamSocketListenerAsync(Windows.Networking.Sockets.StreamSocketListener)
    private func _n_RegisterStreamSocketListenerAsync1(_ socket : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListener>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterStreamSocketListenerAsync1(pThis, socket, __presult))
        }
    }
    public func RegisterStreamSocketListenerAsync1(socket : Optional<Windows.Networking.Sockets.IStreamSocketListener>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>> = nil;
        try self._n_RegisterStreamSocketListenerAsync1(RawPointer(socket), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(consuming: __result);
    }
    public func RegisterStreamSocketListenerAsync1(socket : Optional<Windows.Networking.Sockets.IStreamSocketListener>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RegisterStreamSocketListenerAsync1(socket: socket)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> RegisterStreamSocketListenerAsync(Windows.Networking.Sockets.StreamSocketListener, Windows.Networking.Connectivity.NetworkAdapter)
    private func _n_RegisterStreamSocketListenerAsync2(_ socket : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListener>>, _ adapter : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterStreamSocketListenerAsync2(pThis, socket, adapter, __presult))
        }
    }
    public func RegisterStreamSocketListenerAsync2(socket : Optional<Windows.Networking.Sockets.IStreamSocketListener>, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>> = nil;
        try self._n_RegisterStreamSocketListenerAsync2(RawPointer(socket), RawPointer(adapter), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(consuming: __result);
    }
    public func RegisterStreamSocketListenerAsync2(socket : Optional<Windows.Networking.Sockets.IStreamSocketListener>, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RegisterStreamSocketListenerAsync2(socket: socket, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> RegisterDatagramSocketAsync(Windows.Networking.Sockets.DatagramSocket)
    private func _n_RegisterDatagramSocketAsync1(_ socket : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocket>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterDatagramSocketAsync1(pThis, socket, __presult))
        }
    }
    public func RegisterDatagramSocketAsync1(socket : Optional<Windows.Networking.Sockets.IDatagramSocket>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>> = nil;
        try self._n_RegisterDatagramSocketAsync1(RawPointer(socket), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(consuming: __result);
    }
    public func RegisterDatagramSocketAsync1(socket : Optional<Windows.Networking.Sockets.IDatagramSocket>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RegisterDatagramSocketAsync1(socket: socket)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> RegisterDatagramSocketAsync(Windows.Networking.Sockets.DatagramSocket, Windows.Networking.Connectivity.NetworkAdapter)
    private func _n_RegisterDatagramSocketAsync2(_ socket : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocket>>, _ adapter : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterDatagramSocketAsync2(pThis, socket, adapter, __presult))
        }
    }
    public func RegisterDatagramSocketAsync2(socket : Optional<Windows.Networking.Sockets.IDatagramSocket>, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>> = nil;
        try self._n_RegisterDatagramSocketAsync2(RawPointer(socket), RawPointer(adapter), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(consuming: __result);
    }
    public func RegisterDatagramSocketAsync2(socket : Optional<Windows.Networking.Sockets.IDatagramSocket>, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) async throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RegisterDatagramSocketAsync2(socket: socket, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var DnssdServiceInstanceName : Swift.String {
        get throws {
            return try get_DnssdServiceInstanceName();
        }
    }
    public var HostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_HostName();
        }
    }
    public var Port : Swift.UInt16 {
        get throws {
            return try get_Port();
        }
    }
    public var Priority : Swift.UInt16 {
        get throws {
            return try get_Priority();
        }
    }
    public var TextAttributes : Optional<ClosedGenerics.IMap_2_HSTRING_HSTRING> {
        get throws {
            return try get_TextAttributes();
        }
    }
    public var Weight : Swift.UInt16 {
        get throws {
            return try get_Weight();
        }
    }
} // IDnssdServiceInstance


// type: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstanceFactory
// interface type
// ACTIVATION INTERFACE
open class IDnssdServiceInstanceFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6cb061a1, Data2: 0xc478, Data3 : 0x4331, Data4 : (0x96, 0x84, 0x4a, 0xf2, 0x18, 0x6c, 0x0a, 0x2b)) }
    // Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance Create(System.String, Windows.Networking.HostName, System.UInt16)
    private func _n_Create(_ dnssdServiceInstanceName : Optional<HSTRING>, _ hostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ port : UINT16, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstanceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, dnssdServiceInstanceName, hostName, port, __presult))
        }
    }
    public func Create(dnssdServiceInstanceName : Swift.String, hostName : Optional<Windows.Networking.IHostName>, port : Swift.UInt16) throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance> {
        let __hstr_dnssdServiceInstanceName = try HString(dnssdServiceInstanceName);
        return try withExtendedLifetime(__hstr_dnssdServiceInstanceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance>> = nil;
        try self._n_Create(__hstr_dnssdServiceInstanceName.Raw(), RawPointer(hostName), port, &__result);
        return Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance(consuming: __result);
        }
    }
} // IDnssdServiceInstanceFactory


// type: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher
// interface type
open class IDnssdServiceWatcher
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcc34d9c1, Data2: 0xdb7d, Data3 : 0x4b69, Data4 : (0x98, 0x3d, 0xc6, 0xf8, 0x3f, 0x20, 0x56, 0x82)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Added(Windows.Foundation.TypedEventHandler<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher,Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>)
    private func _n_add_Added(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Added(pThis, handler, __presult))
        }
    }
    public func add_Added(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Added(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Added(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Added(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Added(pThis, token))
        }
    }
    public func remove_Added(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Added(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EnumerationCompleted(Windows.Foundation.TypedEventHandler<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher,System.Object>)
    private func _n_add_EnumerationCompleted(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnumerationCompleted(pThis, handler, __presult))
        }
    }
    public func add_EnumerationCompleted(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EnumerationCompleted(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EnumerationCompleted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_EnumerationCompleted(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnumerationCompleted(pThis, token))
        }
    }
    public func remove_EnumerationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EnumerationCompleted(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Stopped(Windows.Foundation.TypedEventHandler<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher,System.Object>)
    private func _n_add_Stopped(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Stopped(pThis, handler, __presult))
        }
    }
    public func add_Stopped(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Stopped(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Stopped(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Stopped(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Stopped(pThis, token))
        }
    }
    public func remove_Stopped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Stopped(token);
    }
    // [IsSpecialName] Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus {
        var __result : _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus = _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus_Created;
        try self._n_get_Status(&__result);
        return __result;
    }
    // void Start()
    private func _n_Start() throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
        }
    }
    public func Start() throws -> Void {
        try self._n_Start();
    }
    // void Stop()
    private func _n_Stop() throws {
        return try perform(as: _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
        }
    }
    public func Stop() throws -> Void {
        try self._n_Stop();
    }
    public var Status : Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus {
        get throws {
            return try get_Status();
        }
    }
} // IDnssdServiceWatcher


}
extension Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationStatus {
    public static var Success : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus_Success;
        }
    }
    public static var InvalidServiceName : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus_InvalidServiceName;
        }
    }
    public static var ServerError : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus_ServerError;
        }
    }
    public static var SecurityError : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationStatus_SecurityError;
        }
    }
}
extension Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcherStatus {
    public static var Created : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus_Created;
        }
    }
    public static var Started : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus_Started;
        }
    }
    public static var EnumerationCompleted : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus_EnumerationCompleted;
        }
    }
    public static var Stopping : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus_Stopping;
        }
    }
    public static var Stopped : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus_Stopped;
        }
    }
    public static var Aborted : Self {
        get {
            return _q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcherStatus_Aborted;
        }
    }
}
