// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7fa76199, Data2: 0xd1b8, Data3 : 0x5494, Data4 : (0xa0, 0x42, 0x70, 0x02, 0xa4, 0x16, 0xad, 0xc3)) }
    // [IsSpecialName] void Invoke(Windows.Networking.XboxLive.XboxLiveDeviceAddress, System.Object)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, args : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable
// impl delegate type
open class impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable.from_impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: Windows.Networking.XboxLive.IXboxLiveDeviceAddress(sender)), args: WinRT.Object(plok: WinRT.IInspectable(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, Optional<WinRT.Object>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, Optional<WinRT.Object>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable(_ pUnk: UnsafeMutableRawPointer?) -> impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable? {
        return pUnk?.bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, args : Optional<WinRT.Object>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, args : Optional<WinRT.Object>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.GetInterface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x51037260, Data2: 0x4609, Data3 : 0x58c1, Data4 : (0xad, 0xb3, 0x06, 0x18, 0xb8, 0x9b, 0x99, 0x75)) }
    // [IsSpecialName] void Invoke(Windows.Networking.XboxLive.XboxLiveEndpointPair, Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPair>, args : Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs
// impl delegate type
open class impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs>>) in
        guard let self = impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs.from_impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.XboxLive.XboxLiveEndpointPair(plok: Windows.Networking.XboxLive.IXboxLiveEndpointPair(sender)), args: Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs(plok: Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair>, Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair>, Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs? {
        return pUnk?.bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair>, args : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair>, args : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1128b50b, Data2: 0x3ac4, Data3 : 0x543e, Data4 : (0x9d, 0x7e, 0xd7, 0x96, 0xc6, 0x22, 0x66, 0x69)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2aef5136, Data2: 0x6e7a, Data3 : 0x51f8, Data4 : (0x88, 0x53, 0xcc, 0x0c, 0xe4, 0x66, 0xfe, 0xf9)) }
    // [IsSpecialName] void Invoke(Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate, Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate>, args : Optional<Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs
// impl delegate type
open class impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs>>) in
        guard let self = impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs.from_impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate(plok: Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate(sender)), args: Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs(plok: Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate>, Optional<Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate>, Optional<Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs? {
        return pUnk?.bindMemory(to: impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate>, args : Optional<Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate>, args : Optional<Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs {
        return _self
    }
}
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa4b9d41e, Data2: 0x4b2c, Data3 : 0x5bf9, Data4 : (0xa1, 0x9d, 0xed, 0x39, 0x5b, 0x23, 0x82, 0x3c)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(consuming: __result);
    }
    // Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xad57fa1d, Data2: 0xdb1b, Data3 : 0x5df5, Data4 : (0x96, 0x94, 0xf7, 0x1b, 0x9b, 0xd5, 0x62, 0x5b)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult
// impl delegate type
open class impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResultVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.from_impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(_ pUnk: UnsafeMutableRawPointer?) -> impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult? {
        return pUnk?.bindMemory(to: impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc88caa17, Data2: 0xae4a, Data3 : 0x5e4c, Data4 : (0x84, 0x35, 0xd6, 0xdb, 0x6b, 0x12, 0x04, 0x64)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfd58662f, Data2: 0xd206, Data3 : 0x5d57, Data4 : (0xa6, 0xad, 0xa8, 0x45, 0x67, 0x18, 0x7f, 0x30)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8f3109d5, Data2: 0xdc6b, Data3 : 0x58d1, Data4 : (0x9f, 0x70, 0x60, 0xcc, 0x47, 0xbf, 0x1c, 0xed)) }
    // Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric = _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageLatencyInMilliseconds;
        try self._n_GetAt(index, &__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric, ref System.UInt32)
    private func _n_IndexOf(_ value : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(value, &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric)
    private func _n_SetAt(_ index : UINT32, _ value : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric) throws -> Void {
        try self._n_SetAt(index, value);
    }
    // void InsertAt(System.UInt32, Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric)
    private func _n_InsertAt(_ index : UINT32, _ value : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric) throws -> Void {
        try self._n_InsertAt(index, value);
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric)
    private func _n_Append(_ value : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric) throws -> Void {
        try self._n_Append(value);
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x05b168df, Data2: 0x9678, Data3 : 0x509d, Data4 : (0x90, 0x57, 0xa7, 0x9f, 0xd8, 0x4b, 0x54, 0xbf)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8aacb2da, Data2: 0xc37e, Data3 : 0x5be0, Data4 : (0xab, 0x46, 0xba, 0x44, 0x59, 0x10, 0xb9, 0xcb)) }
    // Windows.Networking.XboxLive.XboxLiveDeviceAddress GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_GetAt(index, &__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveDeviceAddress> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.XboxLive.XboxLiveDeviceAddress, ref System.UInt32)
    private func _n_IndexOf(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(RawPointer(value), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.XboxLive.XboxLiveDeviceAddress)
    private func _n_SetAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) throws -> Void {
        try self._n_SetAt(index, RawPointer(value));
    }
    // void InsertAt(System.UInt32, Windows.Networking.XboxLive.XboxLiveDeviceAddress)
    private func _n_InsertAt(_ index : UINT32, _ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) throws -> Void {
        try self._n_InsertAt(index, RawPointer(value));
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.XboxLive.XboxLiveDeviceAddress)
    private func _n_Append(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) throws -> Void {
        try self._n_Append(RawPointer(value));
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.XboxLive.XboxLiveDeviceAddress[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.XboxLive.XboxLiveDeviceAddress[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa0594a5f, Data2: 0x664d, Data3 : 0x52f2, Data4 : (0xa4, 0xef, 0x53, 0xa2, 0x3c, 0x0d, 0xea, 0x3d)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x821b8135, Data2: 0x7801, Data3 : 0x5cb5, Data4 : (0xba, 0xa4, 0xfd, 0x74, 0x77, 0x2f, 0xb9, 0x1c)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.impl_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
