// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.Connectivity {
// type: Windows.Networking.Connectivity.AttributedNetworkUsage
// runtime class
public class AttributedNetworkUsage
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IAttributedNetworkUsage;
    public init(plok: Windows.Networking.Connectivity.IAttributedNetworkUsage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IAttributedNetworkUsage { return _self; }
    public func get_BytesSent() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_BytesSent();
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_BytesReceived();
    }
    public func get_AttributionId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_AttributionId();
    }
    public func get_AttributionName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_AttributionName();
    }
    public func get_AttributionThumbnail() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_AttributionThumbnail();
    }
    public var AttributionId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.AttributionId;
        }
    }
    public var AttributionName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.AttributionName;
        }
    }
    public var AttributionThumbnail : Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.AttributionThumbnail;
        }
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.BytesReceived;
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IAttributedNetworkUsage = try _self.QueryInterface();
        return try _ifc.BytesSent;
        }
    }
}

// type: Windows.Networking.Connectivity.CellularApnAuthenticationType
// enum type
public typealias CellularApnAuthenticationType = _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType;

// type: Windows.Networking.Connectivity.CellularApnContext
// runtime class
public class CellularApnContext
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.ICellularApnContext;
    public init(plok: Windows.Networking.Connectivity.ICellularApnContext?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.ICellularApnContext { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Connectivity.CellularApnContext")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func put_ProviderId(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.put_ProviderId(value: value);
    }
    public func get_AccessPointName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.get_AccessPointName();
    }
    public func put_AccessPointName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.put_AccessPointName(value: value);
    }
    public func get_UserName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.get_UserName();
    }
    public func put_UserName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.put_UserName(value: value);
    }
    public func get_Password() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.get_Password();
    }
    public func put_Password(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.put_Password(value: value);
    }
    public func get_IsCompressionEnabled() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.get_IsCompressionEnabled();
    }
    public func put_IsCompressionEnabled(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.put_IsCompressionEnabled(value: value);
    }
    public func get_AuthenticationType() throws -> Windows.Networking.Connectivity.CellularApnAuthenticationType {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.get_AuthenticationType();
    }
    public func put_AuthenticationType(value : Windows.Networking.Connectivity.CellularApnAuthenticationType) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.put_AuthenticationType(value: value);
    }
    public var AccessPointName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.AccessPointName;
        }
    }
    public var AuthenticationType : Windows.Networking.Connectivity.CellularApnAuthenticationType {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.AuthenticationType;
        }
    }
    public var IsCompressionEnabled : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.IsCompressionEnabled;
        }
    }
    public var Password : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.Password;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public var UserName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext = try _self.QueryInterface();
        return try _ifc.UserName;
        }
    }
    public func get_ProfileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext2 = try _self.QueryInterface();
        return try _ifc.get_ProfileName();
    }
    public func put_ProfileName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext2 = try _self.QueryInterface();
        return try _ifc.put_ProfileName(value: value);
    }
    public var ProfileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ICellularApnContext2 = try _self.QueryInterface();
        return try _ifc.ProfileName;
        }
    }
}

// type: Windows.Networking.Connectivity.ConnectionCost
// runtime class
public class ConnectionCost
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IConnectionCost;
    public init(plok: Windows.Networking.Connectivity.IConnectionCost?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IConnectionCost { return _self; }
    public func get_NetworkCostType() throws -> Windows.Networking.Connectivity.NetworkCostType {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.get_NetworkCostType();
    }
    public func get_Roaming() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.get_Roaming();
    }
    public func get_OverDataLimit() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.get_OverDataLimit();
    }
    public func get_ApproachingDataLimit() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.get_ApproachingDataLimit();
    }
    public var ApproachingDataLimit : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.ApproachingDataLimit;
        }
    }
    public var NetworkCostType : Windows.Networking.Connectivity.NetworkCostType {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.NetworkCostType;
        }
    }
    public var OverDataLimit : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.OverDataLimit;
        }
    }
    public var Roaming : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost = try _self.QueryInterface();
        return try _ifc.Roaming;
        }
    }
    public func get_BackgroundDataUsageRestricted() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost2 = try _self.QueryInterface();
        return try _ifc.get_BackgroundDataUsageRestricted();
    }
    public var BackgroundDataUsageRestricted : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionCost2 = try _self.QueryInterface();
        return try _ifc.BackgroundDataUsageRestricted;
        }
    }
}

// type: Windows.Networking.Connectivity.ConnectionProfile
// runtime class
public class ConnectionProfile
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IConnectionProfile;
    public init(plok: Windows.Networking.Connectivity.IConnectionProfile?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IConnectionProfile { return _self; }
    public func get_ProfileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try _ifc.get_ProfileName();
    }
    public func GetNetworkConnectivityLevel() throws -> Windows.Networking.Connectivity.NetworkConnectivityLevel {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try _ifc.GetNetworkConnectivityLevel();
    }
    public func GetNetworkNames() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try _ifc.GetNetworkNames();
    }
    public func GetConnectionCost() throws -> Optional<Windows.Networking.Connectivity.ConnectionCost> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.ConnectionCost(plok: _ifc.GetConnectionCost());
    }
    public func GetDataPlanStatus() throws -> Optional<Windows.Networking.Connectivity.DataPlanStatus> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.DataPlanStatus(plok: _ifc.GetDataPlanStatus());
    }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.get_NetworkAdapter());
    }
    public func GetLocalUsage(StartTime : Windows.Foundation.DateTime, EndTime : Windows.Foundation.DateTime) throws -> Optional<Windows.Networking.Connectivity.DataUsage> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.DataUsage(plok: _ifc.GetLocalUsage(StartTime: StartTime, EndTime: EndTime));
    }
    public func GetLocalUsage(StartTime : Windows.Foundation.DateTime, EndTime : Windows.Foundation.DateTime, States : Windows.Networking.Connectivity.RoamingStates) throws -> Optional<Windows.Networking.Connectivity.DataUsage> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.DataUsage(plok: _ifc.GetLocalUsagePerRoamingStates(StartTime: StartTime, EndTime: EndTime, States: States));
    }
    public func get_NetworkSecuritySettings() throws -> Optional<Windows.Networking.Connectivity.NetworkSecuritySettings> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkSecuritySettings(plok: _ifc.get_NetworkSecuritySettings());
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.NetworkAdapter);
        }
    }
    public var NetworkSecuritySettings : Optional<Windows.Networking.Connectivity.NetworkSecuritySettings> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkSecuritySettings(plok: _ifc.NetworkSecuritySettings);
        }
    }
    public var ProfileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile = try _self.QueryInterface();
        return try _ifc.ProfileName;
        }
    }
    public func get_IsWwanConnectionProfile() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.get_IsWwanConnectionProfile();
    }
    public func get_IsWlanConnectionProfile() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.get_IsWlanConnectionProfile();
    }
    public func get_WwanConnectionProfileDetails() throws -> Optional<Windows.Networking.Connectivity.WwanConnectionProfileDetails> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.WwanConnectionProfileDetails(plok: _ifc.get_WwanConnectionProfileDetails());
    }
    public func get_WlanConnectionProfileDetails() throws -> Optional<Windows.Networking.Connectivity.WlanConnectionProfileDetails> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.WlanConnectionProfileDetails(plok: _ifc.get_WlanConnectionProfileDetails());
    }
    public func get_ServiceProviderGuid() throws -> Optional<ClosedGenerics.IReference_1_GUID> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.get_ServiceProviderGuid();
    }
    public func GetSignalBars() throws -> Optional<ClosedGenerics.IReference_1_UINT8> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.GetSignalBars();
    }
    public func GetDomainConnectivityLevel() throws -> Windows.Networking.Connectivity.DomainConnectivityLevel {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.GetDomainConnectivityLevel();
    }
    public func GetNetworkUsageAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, granularity : Windows.Networking.Connectivity.DataUsageGranularity, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CNetworkUsage> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.GetNetworkUsageAsync(startTime: startTime, endTime: endTime, granularity: granularity, states: states);
    }
    public func GetNetworkUsage(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, granularity : Windows.Networking.Connectivity.DataUsageGranularity, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CNetworkUsage> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetNetworkUsageAsync(startTime: startTime, endTime: endTime, granularity: granularity, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetConnectivityIntervalsAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectivityInterval> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.GetConnectivityIntervalsAsync(startTime: startTime, endTime: endTime, states: states);
    }
    public func GetConnectivityIntervals(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectivityInterval> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetConnectivityIntervalsAsync(startTime: startTime, endTime: endTime, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var IsWlanConnectionProfile : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.IsWlanConnectionProfile;
        }
    }
    public var IsWwanConnectionProfile : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.IsWwanConnectionProfile;
        }
    }
    public var ServiceProviderGuid : Optional<ClosedGenerics.IReference_1_GUID> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try _ifc.ServiceProviderGuid;
        }
    }
    public var WlanConnectionProfileDetails : Optional<Windows.Networking.Connectivity.WlanConnectionProfileDetails> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.WlanConnectionProfileDetails(plok: _ifc.WlanConnectionProfileDetails);
        }
    }
    public var WwanConnectionProfileDetails : Optional<Windows.Networking.Connectivity.WwanConnectionProfileDetails> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile2 = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.WwanConnectionProfileDetails(plok: _ifc.WwanConnectionProfileDetails);
        }
    }
    public func GetAttributedNetworkUsageAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CAttributedNetworkUsage> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile3 = try _self.QueryInterface();
        return try _ifc.GetAttributedNetworkUsageAsync(startTime: startTime, endTime: endTime, states: states);
    }
    public func GetAttributedNetworkUsage(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CAttributedNetworkUsage> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetAttributedNetworkUsageAsync(startTime: startTime, endTime: endTime, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetProviderNetworkUsageAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CProviderNetworkUsage> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile4 = try _self.QueryInterface();
        return try _ifc.GetProviderNetworkUsageAsync(startTime: startTime, endTime: endTime, states: states);
    }
    public func GetProviderNetworkUsage(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CProviderNetworkUsage> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetProviderNetworkUsageAsync(startTime: startTime, endTime: endTime, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_CanDelete() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile5 = try _self.QueryInterface();
        return try _ifc.get_CanDelete();
    }
    public func TryDeleteAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile5 = try _self.QueryInterface();
        return try _ifc.TryDeleteAsync();
    }
    public func TryDelete() async throws -> Windows.Networking.Connectivity.ConnectionProfileDeleteStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.TryDeleteAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CanDelete : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfile5 = try _self.QueryInterface();
        return try _ifc.CanDelete;
        }
    }
}

// type: Windows.Networking.Connectivity.ConnectionProfileDeleteStatus
// enum type
public typealias ConnectionProfileDeleteStatus = _q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus;

// type: Windows.Networking.Connectivity.ConnectionProfileFilter
// runtime class
public class ConnectionProfileFilter
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IConnectionProfileFilter;
    public init(plok: Windows.Networking.Connectivity.IConnectionProfileFilter?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IConnectionProfileFilter { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Connectivity.ConnectionProfileFilter")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_IsConnected(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.put_IsConnected(value: value);
    }
    public func get_IsConnected() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.get_IsConnected();
    }
    public func put_IsWwanConnectionProfile(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.put_IsWwanConnectionProfile(value: value);
    }
    public func get_IsWwanConnectionProfile() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.get_IsWwanConnectionProfile();
    }
    public func put_IsWlanConnectionProfile(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.put_IsWlanConnectionProfile(value: value);
    }
    public func get_IsWlanConnectionProfile() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.get_IsWlanConnectionProfile();
    }
    public func put_NetworkCostType(value : Windows.Networking.Connectivity.NetworkCostType) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.put_NetworkCostType(value: value);
    }
    public func get_NetworkCostType() throws -> Windows.Networking.Connectivity.NetworkCostType {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.get_NetworkCostType();
    }
    public func put_ServiceProviderGuid(value : Optional<ClosedGenerics.IReference_1_GUID>) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.put_ServiceProviderGuid(value: value);
    }
    public func get_ServiceProviderGuid() throws -> Optional<ClosedGenerics.IReference_1_GUID> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.get_ServiceProviderGuid();
    }
    public var IsConnected : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.IsConnected;
        }
    }
    public var IsWlanConnectionProfile : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.IsWlanConnectionProfile;
        }
    }
    public var IsWwanConnectionProfile : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.IsWwanConnectionProfile;
        }
    }
    public var NetworkCostType : Windows.Networking.Connectivity.NetworkCostType {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.NetworkCostType;
        }
    }
    public var ServiceProviderGuid : Optional<ClosedGenerics.IReference_1_GUID> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter = try _self.QueryInterface();
        return try _ifc.ServiceProviderGuid;
        }
    }
    public func put_IsRoaming(value : Optional<ClosedGenerics.IReference_1_boolean>) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.put_IsRoaming(value: value);
    }
    public func get_IsRoaming() throws -> Optional<ClosedGenerics.IReference_1_boolean> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.get_IsRoaming();
    }
    public func put_IsOverDataLimit(value : Optional<ClosedGenerics.IReference_1_boolean>) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.put_IsOverDataLimit(value: value);
    }
    public func get_IsOverDataLimit() throws -> Optional<ClosedGenerics.IReference_1_boolean> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.get_IsOverDataLimit();
    }
    public func put_IsBackgroundDataUsageRestricted(value : Optional<ClosedGenerics.IReference_1_boolean>) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.put_IsBackgroundDataUsageRestricted(value: value);
    }
    public func get_IsBackgroundDataUsageRestricted() throws -> Optional<ClosedGenerics.IReference_1_boolean> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.get_IsBackgroundDataUsageRestricted();
    }
    public func get_RawData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.get_RawData();
    }
    public var IsBackgroundDataUsageRestricted : Optional<ClosedGenerics.IReference_1_boolean> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.IsBackgroundDataUsageRestricted;
        }
    }
    public var IsOverDataLimit : Optional<ClosedGenerics.IReference_1_boolean> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.IsOverDataLimit;
        }
    }
    public var IsRoaming : Optional<ClosedGenerics.IReference_1_boolean> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.IsRoaming;
        }
    }
    public var RawData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter2 = try _self.QueryInterface();
        return try _ifc.RawData;
        }
    }
    public func put_PurposeGuid(value : Optional<ClosedGenerics.IReference_1_GUID>) throws -> Void {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter3 = try _self.QueryInterface();
        return try _ifc.put_PurposeGuid(value: value);
    }
    public func get_PurposeGuid() throws -> Optional<ClosedGenerics.IReference_1_GUID> {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter3 = try _self.QueryInterface();
        return try _ifc.get_PurposeGuid();
    }
    public var PurposeGuid : Optional<ClosedGenerics.IReference_1_GUID> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionProfileFilter3 = try _self.QueryInterface();
        return try _ifc.PurposeGuid;
        }
    }
}

// type: Windows.Networking.Connectivity.ConnectionSession
// runtime class
public class ConnectionSession
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IConnectionSession;
    public init(plok: Windows.Networking.Connectivity.IConnectionSession?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IConnectionSession { return _self; }
    public func get_ConnectionProfile() throws -> Optional<Windows.Networking.Connectivity.ConnectionProfile> {
        let _ifc : Windows.Networking.Connectivity.IConnectionSession = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.ConnectionProfile(plok: _ifc.get_ConnectionProfile());
    }
    public var ConnectionProfile : Optional<Windows.Networking.Connectivity.ConnectionProfile> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectionSession = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.ConnectionProfile(plok: _ifc.ConnectionProfile);
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Windows.Networking.Connectivity.ConnectivityInterval
// runtime class
public class ConnectivityInterval
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IConnectivityInterval;
    public init(plok: Windows.Networking.Connectivity.IConnectivityInterval?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IConnectivityInterval { return _self; }
    public func get_StartTime() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Networking.Connectivity.IConnectivityInterval = try _self.QueryInterface();
        return try _ifc.get_StartTime();
    }
    public func get_ConnectionDuration() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Windows.Networking.Connectivity.IConnectivityInterval = try _self.QueryInterface();
        return try _ifc.get_ConnectionDuration();
    }
    public var ConnectionDuration : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectivityInterval = try _self.QueryInterface();
        return try _ifc.ConnectionDuration;
        }
    }
    public var StartTime : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IConnectivityInterval = try _self.QueryInterface();
        return try _ifc.StartTime;
        }
    }
}

// type: Windows.Networking.Connectivity.DataPlanStatus
// runtime class
public class DataPlanStatus
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IDataPlanStatus;
    public init(plok: Windows.Networking.Connectivity.IDataPlanStatus?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IDataPlanStatus { return _self; }
    public func get_DataPlanUsage() throws -> Optional<Windows.Networking.Connectivity.DataPlanUsage> {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.DataPlanUsage(plok: _ifc.get_DataPlanUsage());
    }
    public func get_DataLimitInMegabytes() throws -> Optional<ClosedGenerics.IReference_1_UINT32> {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.get_DataLimitInMegabytes();
    }
    public func get_InboundBitsPerSecond() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.get_InboundBitsPerSecond();
    }
    public func get_OutboundBitsPerSecond() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.get_OutboundBitsPerSecond();
    }
    public func get_NextBillingCycle() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.get_NextBillingCycle();
    }
    public func get_MaxTransferSizeInMegabytes() throws -> Optional<ClosedGenerics.IReference_1_UINT32> {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.get_MaxTransferSizeInMegabytes();
    }
    public var DataLimitInMegabytes : Optional<ClosedGenerics.IReference_1_UINT32> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.DataLimitInMegabytes;
        }
    }
    public var DataPlanUsage : Optional<Windows.Networking.Connectivity.DataPlanUsage> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.DataPlanUsage(plok: _ifc.DataPlanUsage);
        }
    }
    public var InboundBitsPerSecond : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.InboundBitsPerSecond;
        }
    }
    public var MaxTransferSizeInMegabytes : Optional<ClosedGenerics.IReference_1_UINT32> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.MaxTransferSizeInMegabytes;
        }
    }
    public var NextBillingCycle : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.NextBillingCycle;
        }
    }
    public var OutboundBitsPerSecond : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanStatus = try _self.QueryInterface();
        return try _ifc.OutboundBitsPerSecond;
        }
    }
}

// type: Windows.Networking.Connectivity.DataPlanUsage
// runtime class
public class DataPlanUsage
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IDataPlanUsage;
    public init(plok: Windows.Networking.Connectivity.IDataPlanUsage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IDataPlanUsage { return _self; }
    public func get_MegabytesUsed() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Connectivity.IDataPlanUsage = try _self.QueryInterface();
        return try _ifc.get_MegabytesUsed();
    }
    public func get_LastSyncTime() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Networking.Connectivity.IDataPlanUsage = try _self.QueryInterface();
        return try _ifc.get_LastSyncTime();
    }
    public var LastSyncTime : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanUsage = try _self.QueryInterface();
        return try _ifc.LastSyncTime;
        }
    }
    public var MegabytesUsed : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataPlanUsage = try _self.QueryInterface();
        return try _ifc.MegabytesUsed;
        }
    }
}

// type: Windows.Networking.Connectivity.DataUsage
// runtime class
public class DataUsage
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IDataUsage;
    public init(plok: Windows.Networking.Connectivity.IDataUsage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IDataUsage { return _self; }
    public func get_BytesSent() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.IDataUsage = try _self.QueryInterface();
        return try _ifc.get_BytesSent();
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.IDataUsage = try _self.QueryInterface();
        return try _ifc.get_BytesReceived();
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataUsage = try _self.QueryInterface();
        return try _ifc.BytesReceived;
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IDataUsage = try _self.QueryInterface();
        return try _ifc.BytesSent;
        }
    }
}

// type: Windows.Networking.Connectivity.DataUsageGranularity
// enum type
public typealias DataUsageGranularity = _q_CWindows_CNetworking_CConnectivity_CDataUsageGranularity;

// type: Windows.Networking.Connectivity.DomainConnectivityLevel
// enum type
public typealias DomainConnectivityLevel = _q_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel;

// type: Windows.Networking.Connectivity.IAttributedNetworkUsage
// interface type
open class IAttributedNetworkUsage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf769b039, Data2: 0xeca2, Data3 : 0x45eb, Data4 : (0xad, 0xe1, 0xb0, 0x36, 0x8b, 0x75, 0x6c, 0x49)) }
    // [IsSpecialName] System.UInt64 get_BytesSent()
    private func _n_get_BytesSent(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, __presult))
        }
    }
    public func get_BytesSent() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesSent(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt64 get_BytesReceived()
    private func _n_get_BytesReceived(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, __presult))
        }
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesReceived(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_AttributionId()
    private func _n_get_AttributionId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttributionId(pThis, __presult))
        }
    }
    public func get_AttributionId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AttributionId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_AttributionName()
    private func _n_get_AttributionName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttributionName(pThis, __presult))
        }
    }
    public func get_AttributionName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AttributionName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IRandomAccessStreamReference get_AttributionThumbnail()
    private func _n_get_AttributionThumbnail(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIAttributedNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AttributionThumbnail(pThis, __presult))
        }
    }
    public func get_AttributionThumbnail() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamReference>> = nil;
        try self._n_get_AttributionThumbnail(&__result);
        return Windows.Storage.Streams.IRandomAccessStreamReference(consuming: __result);
    }
    public var AttributionId : Swift.String {
        get throws {
            return try get_AttributionId();
        }
    }
    public var AttributionName : Swift.String {
        get throws {
            return try get_AttributionName();
        }
    }
    public var AttributionThumbnail : Optional<Windows.Storage.Streams.IRandomAccessStreamReference> {
        get throws {
            return try get_AttributionThumbnail();
        }
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
            return try get_BytesReceived();
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
            return try get_BytesSent();
        }
    }
} // IAttributedNetworkUsage


// type: Windows.Networking.Connectivity.ICellularApnContext
// interface type
open class ICellularApnContext
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6fa529f4, Data2: 0xeffd, Data3 : 0x4542, Data4 : (0x9a, 0xb2, 0x70, 0x5b, 0xbf, 0x94, 0x94, 0x3a)) }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_ProviderId(System.String)
    private func _n_put_ProviderId(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProviderId(pThis, value))
        }
    }
    public func put_ProviderId(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_ProviderId(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_AccessPointName()
    private func _n_get_AccessPointName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessPointName(pThis, __presult))
        }
    }
    public func get_AccessPointName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AccessPointName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_AccessPointName(System.String)
    private func _n_put_AccessPointName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AccessPointName(pThis, value))
        }
    }
    public func put_AccessPointName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_AccessPointName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_UserName()
    private func _n_get_UserName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserName(pThis, __presult))
        }
    }
    public func get_UserName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_UserName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_UserName(System.String)
    private func _n_put_UserName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserName(pThis, value))
        }
    }
    public func put_UserName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_UserName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Password()
    private func _n_get_Password(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Password(pThis, __presult))
        }
    }
    public func get_Password() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Password(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Password(System.String)
    private func _n_put_Password(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Password(pThis, value))
        }
    }
    public func put_Password(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Password(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] bool get_IsCompressionEnabled()
    private func _n_get_IsCompressionEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCompressionEnabled(pThis, __presult))
        }
    }
    public func get_IsCompressionEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsCompressionEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsCompressionEnabled(bool)
    private func _n_put_IsCompressionEnabled(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsCompressionEnabled(pThis, value))
        }
    }
    public func put_IsCompressionEnabled(value : boolean) throws -> Void {
        try self._n_put_IsCompressionEnabled(value);
    }
    // [IsSpecialName] Windows.Networking.Connectivity.CellularApnAuthenticationType get_AuthenticationType()
    private func _n_get_AuthenticationType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AuthenticationType(pThis, __presult))
        }
    }
    public func get_AuthenticationType() throws -> Windows.Networking.Connectivity.CellularApnAuthenticationType {
        var __result : _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType = _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_None;
        try self._n_get_AuthenticationType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AuthenticationType(Windows.Networking.Connectivity.CellularApnAuthenticationType)
    private func _n_put_AuthenticationType(_ value : _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AuthenticationType(pThis, value))
        }
    }
    public func put_AuthenticationType(value : Windows.Networking.Connectivity.CellularApnAuthenticationType) throws -> Void {
        try self._n_put_AuthenticationType(value);
    }
    public var AccessPointName : Swift.String {
        get throws {
            return try get_AccessPointName();
        }
    }
    public var AuthenticationType : Windows.Networking.Connectivity.CellularApnAuthenticationType {
        get throws {
            return try get_AuthenticationType();
        }
    }
    public var IsCompressionEnabled : boolean {
        get throws {
            return try get_IsCompressionEnabled();
        }
    }
    public var Password : Swift.String {
        get throws {
            return try get_Password();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
    public var UserName : Swift.String {
        get throws {
            return try get_UserName();
        }
    }
} // ICellularApnContext


// type: Windows.Networking.Connectivity.ICellularApnContext2
// interface type
open class ICellularApnContext2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x76b0eb1a, Data2: 0xac49, Data3 : 0x4350, Data4 : (0xb1, 0xe5, 0xdc, 0x47, 0x63, 0xbc, 0x69, 0xc7)) }
    // [IsSpecialName] System.String get_ProfileName()
    private func _n_get_ProfileName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileName(pThis, __presult))
        }
    }
    public func get_ProfileName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProfileName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_ProfileName(System.String)
    private func _n_put_ProfileName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CICellularApnContext2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProfileName(pThis, value))
        }
    }
    public func put_ProfileName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_ProfileName(__hstr_value.Raw());
        }
    }
    public var ProfileName : Swift.String {
        get throws {
            return try get_ProfileName();
        }
    }
} // ICellularApnContext2


// type: Windows.Networking.Connectivity.IConnectionCost
// interface type
open class IConnectionCost
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbad7d829, Data2: 0x3416, Data3 : 0x4b10, Data4 : (0xa2, 0x02, 0xba, 0xc0, 0xb0, 0x75, 0xbd, 0xae)) }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkCostType get_NetworkCostType()
    private func _n_get_NetworkCostType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CNetworkCostType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkCostType(pThis, __presult))
        }
    }
    public func get_NetworkCostType() throws -> Windows.Networking.Connectivity.NetworkCostType {
        var __result : _q_CWindows_CNetworking_CConnectivity_CNetworkCostType = _q_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unknown;
        try self._n_get_NetworkCostType(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Roaming()
    private func _n_get_Roaming(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Roaming(pThis, __presult))
        }
    }
    public func get_Roaming() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Roaming(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_OverDataLimit()
    private func _n_get_OverDataLimit(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverDataLimit(pThis, __presult))
        }
    }
    public func get_OverDataLimit() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_OverDataLimit(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_ApproachingDataLimit()
    private func _n_get_ApproachingDataLimit(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionCost.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ApproachingDataLimit(pThis, __presult))
        }
    }
    public func get_ApproachingDataLimit() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ApproachingDataLimit(&__result);
        return __result;
    }
    public var ApproachingDataLimit : boolean {
        get throws {
            return try get_ApproachingDataLimit();
        }
    }
    public var NetworkCostType : Windows.Networking.Connectivity.NetworkCostType {
        get throws {
            return try get_NetworkCostType();
        }
    }
    public var OverDataLimit : boolean {
        get throws {
            return try get_OverDataLimit();
        }
    }
    public var Roaming : boolean {
        get throws {
            return try get_Roaming();
        }
    }
} // IConnectionCost


// type: Windows.Networking.Connectivity.IConnectionCost2
// interface type
open class IConnectionCost2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8e113a05, Data2: 0xe209, Data3 : 0x4549, Data4 : (0xbb, 0x25, 0x5e, 0x0d, 0xb6, 0x91, 0xcb, 0x05)) }
    // [IsSpecialName] bool get_BackgroundDataUsageRestricted()
    private func _n_get_BackgroundDataUsageRestricted(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionCost2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundDataUsageRestricted(pThis, __presult))
        }
    }
    public func get_BackgroundDataUsageRestricted() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_BackgroundDataUsageRestricted(&__result);
        return __result;
    }
    public var BackgroundDataUsageRestricted : boolean {
        get throws {
            return try get_BackgroundDataUsageRestricted();
        }
    }
} // IConnectionCost2


// type: Windows.Networking.Connectivity.IConnectionProfile
// interface type
open class IConnectionProfile
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x71ba143c, Data2: 0x598e, Data3 : 0x49d0, Data4 : (0x84, 0xeb, 0x8f, 0xeb, 0xae, 0xdc, 0xc1, 0x95)) }
    // [IsSpecialName] System.String get_ProfileName()
    private func _n_get_ProfileName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProfileName(pThis, __presult))
        }
    }
    public func get_ProfileName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProfileName(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Networking.Connectivity.NetworkConnectivityLevel GetNetworkConnectivityLevel()
    private func _n_GetNetworkConnectivityLevel(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkConnectivityLevel(pThis, __presult))
        }
    }
    public func GetNetworkConnectivityLevel() throws -> Windows.Networking.Connectivity.NetworkConnectivityLevel {
        var __result : _q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel = _q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_None;
        try self._n_GetNetworkConnectivityLevel(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<System.String> GetNetworkNames()
    private func _n_GetNetworkNames(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkNames(pThis, __presult))
        }
    }
    public func GetNetworkNames() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_GetNetworkNames(&__result);
        return ClosedGenerics.IVectorView_1_HSTRING(consuming: __result);
    }
    // Windows.Networking.Connectivity.ConnectionCost GetConnectionCost()
    private func _n_GetConnectionCost(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionCost>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectionCost(pThis, __presult))
        }
    }
    public func GetConnectionCost() throws -> Optional<Windows.Networking.Connectivity.IConnectionCost> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionCost>> = nil;
        try self._n_GetConnectionCost(&__result);
        return Windows.Networking.Connectivity.IConnectionCost(consuming: __result);
    }
    // Windows.Networking.Connectivity.DataPlanStatus GetDataPlanStatus()
    private func _n_GetDataPlanStatus(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataPlanStatus(pThis, __presult))
        }
    }
    public func GetDataPlanStatus() throws -> Optional<Windows.Networking.Connectivity.IDataPlanStatus> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus>> = nil;
        try self._n_GetDataPlanStatus(&__result);
        return Windows.Networking.Connectivity.IDataPlanStatus(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkAdapter get_NetworkAdapter()
    private func _n_get_NetworkAdapter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapter(pThis, __presult))
        }
    }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>> = nil;
        try self._n_get_NetworkAdapter(&__result);
        return Windows.Networking.Connectivity.INetworkAdapter(consuming: __result);
    }
    // Windows.Networking.Connectivity.DataUsage GetLocalUsage(Windows.Foundation.DateTime, Windows.Foundation.DateTime)
    private func _n_GetLocalUsage(_ StartTime : _q_CWindows_CFoundation_CDateTime, _ EndTime : _q_CWindows_CFoundation_CDateTime, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataUsage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalUsage(pThis, StartTime, EndTime, __presult))
        }
    }
    public func GetLocalUsage(StartTime : Windows.Foundation.DateTime, EndTime : Windows.Foundation.DateTime) throws -> Optional<Windows.Networking.Connectivity.IDataUsage> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataUsage>> = nil;
        try self._n_GetLocalUsage(StartTime, EndTime, &__result);
        return Windows.Networking.Connectivity.IDataUsage(consuming: __result);
    }
    // Windows.Networking.Connectivity.DataUsage GetLocalUsage(Windows.Foundation.DateTime, Windows.Foundation.DateTime, Windows.Networking.Connectivity.RoamingStates)
    private func _n_GetLocalUsagePerRoamingStates(_ StartTime : _q_CWindows_CFoundation_CDateTime, _ EndTime : _q_CWindows_CFoundation_CDateTime, _ States : _q_CWindows_CNetworking_CConnectivity_CRoamingStates, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataUsage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalUsagePerRoamingStates(pThis, StartTime, EndTime, States, __presult))
        }
    }
    public func GetLocalUsagePerRoamingStates(StartTime : Windows.Foundation.DateTime, EndTime : Windows.Foundation.DateTime, States : Windows.Networking.Connectivity.RoamingStates) throws -> Optional<Windows.Networking.Connectivity.IDataUsage> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataUsage>> = nil;
        try self._n_GetLocalUsagePerRoamingStates(StartTime, EndTime, States, &__result);
        return Windows.Networking.Connectivity.IDataUsage(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkSecuritySettings get_NetworkSecuritySettings()
    private func _n_get_NetworkSecuritySettings(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkSecuritySettings(pThis, __presult))
        }
    }
    public func get_NetworkSecuritySettings() throws -> Optional<Windows.Networking.Connectivity.INetworkSecuritySettings> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings>> = nil;
        try self._n_get_NetworkSecuritySettings(&__result);
        return Windows.Networking.Connectivity.INetworkSecuritySettings(consuming: __result);
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        get throws {
            return try get_NetworkAdapter();
        }
    }
    public var NetworkSecuritySettings : Optional<Windows.Networking.Connectivity.INetworkSecuritySettings> {
        get throws {
            return try get_NetworkSecuritySettings();
        }
    }
    public var ProfileName : Swift.String {
        get throws {
            return try get_ProfileName();
        }
    }
} // IConnectionProfile


// type: Windows.Networking.Connectivity.IConnectionProfile2
// interface type
open class IConnectionProfile2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe2045145, Data2: 0x4c9f, Data3 : 0x400c, Data4 : (0x91, 0x50, 0x7e, 0xc7, 0xd6, 0xe2, 0x88, 0x8a)) }
    // [IsSpecialName] bool get_IsWwanConnectionProfile()
    private func _n_get_IsWwanConnectionProfile(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWwanConnectionProfile(pThis, __presult))
        }
    }
    public func get_IsWwanConnectionProfile() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsWwanConnectionProfile(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsWlanConnectionProfile()
    private func _n_get_IsWlanConnectionProfile(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWlanConnectionProfile(pThis, __presult))
        }
    }
    public func get_IsWlanConnectionProfile() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsWlanConnectionProfile(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Connectivity.WwanConnectionProfileDetails get_WwanConnectionProfileDetails()
    private func _n_get_WwanConnectionProfileDetails(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WwanConnectionProfileDetails(pThis, __presult))
        }
    }
    public func get_WwanConnectionProfileDetails() throws -> Optional<Windows.Networking.Connectivity.IWwanConnectionProfileDetails> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails>> = nil;
        try self._n_get_WwanConnectionProfileDetails(&__result);
        return Windows.Networking.Connectivity.IWwanConnectionProfileDetails(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Connectivity.WlanConnectionProfileDetails get_WlanConnectionProfileDetails()
    private func _n_get_WlanConnectionProfileDetails(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WlanConnectionProfileDetails(pThis, __presult))
        }
    }
    public func get_WlanConnectionProfileDetails() throws -> Optional<Windows.Networking.Connectivity.IWlanConnectionProfileDetails> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails>> = nil;
        try self._n_get_WlanConnectionProfileDetails(&__result);
        return Windows.Networking.Connectivity.IWlanConnectionProfileDetails(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Guid> get_ServiceProviderGuid()
    private func _n_get_ServiceProviderGuid(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServiceProviderGuid(pThis, __presult))
        }
    }
    public func get_ServiceProviderGuid() throws -> Optional<ClosedGenerics.IReference_1_GUID> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>> = nil;
        try self._n_get_ServiceProviderGuid(&__result);
        return ClosedGenerics.IReference_1_GUID(consuming: __result);
    }
    // Windows.Foundation.IReference<System.Byte> GetSignalBars()
    private func _n_GetSignalBars(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT8>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSignalBars(pThis, __presult))
        }
    }
    public func GetSignalBars() throws -> Optional<ClosedGenerics.IReference_1_UINT8> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT8>> = nil;
        try self._n_GetSignalBars(&__result);
        return ClosedGenerics.IReference_1_UINT8(consuming: __result);
    }
    // Windows.Networking.Connectivity.DomainConnectivityLevel GetDomainConnectivityLevel()
    private func _n_GetDomainConnectivityLevel(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDomainConnectivityLevel(pThis, __presult))
        }
    }
    public func GetDomainConnectivityLevel() throws -> Windows.Networking.Connectivity.DomainConnectivityLevel {
        var __result : _q_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel = _q_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_None;
        try self._n_GetDomainConnectivityLevel(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.Connectivity.NetworkUsage>> GetNetworkUsageAsync(Windows.Foundation.DateTime, Windows.Foundation.DateTime, Windows.Networking.Connectivity.DataUsageGranularity, Windows.Networking.Connectivity.NetworkUsageStates)
    private func _n_GetNetworkUsageAsync(_ startTime : _q_CWindows_CFoundation_CDateTime, _ endTime : _q_CWindows_CFoundation_CDateTime, _ granularity : _q_CWindows_CNetworking_CConnectivity_CDataUsageGranularity, _ states : _q_CWindows_CNetworking_CConnectivity_CNetworkUsageStates, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CNetworkUsage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkUsageAsync(pThis, startTime, endTime, granularity, states, __presult))
        }
    }
    public func GetNetworkUsageAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, granularity : Windows.Networking.Connectivity.DataUsageGranularity, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CNetworkUsage> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CNetworkUsage>> = nil;
        try self._n_GetNetworkUsageAsync(startTime, endTime, granularity, states, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CNetworkUsage(consuming: __result);
    }
    public func GetNetworkUsage(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, granularity : Windows.Networking.Connectivity.DataUsageGranularity, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CNetworkUsage> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetNetworkUsageAsync(startTime: startTime, endTime: endTime, granularity: granularity, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.Connectivity.ConnectivityInterval>> GetConnectivityIntervalsAsync(Windows.Foundation.DateTime, Windows.Foundation.DateTime, Windows.Networking.Connectivity.NetworkUsageStates)
    private func _n_GetConnectivityIntervalsAsync(_ startTime : _q_CWindows_CFoundation_CDateTime, _ endTime : _q_CWindows_CFoundation_CDateTime, _ states : _q_CWindows_CNetworking_CConnectivity_CNetworkUsageStates, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectivityInterval>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectivityIntervalsAsync(pThis, startTime, endTime, states, __presult))
        }
    }
    public func GetConnectivityIntervalsAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectivityInterval> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectivityInterval>> = nil;
        try self._n_GetConnectivityIntervalsAsync(startTime, endTime, states, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectivityInterval(consuming: __result);
    }
    public func GetConnectivityIntervals(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CConnectivityInterval> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetConnectivityIntervalsAsync(startTime: startTime, endTime: endTime, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var IsWlanConnectionProfile : boolean {
        get throws {
            return try get_IsWlanConnectionProfile();
        }
    }
    public var IsWwanConnectionProfile : boolean {
        get throws {
            return try get_IsWwanConnectionProfile();
        }
    }
    public var ServiceProviderGuid : Optional<ClosedGenerics.IReference_1_GUID> {
        get throws {
            return try get_ServiceProviderGuid();
        }
    }
    public var WlanConnectionProfileDetails : Optional<Windows.Networking.Connectivity.IWlanConnectionProfileDetails> {
        get throws {
            return try get_WlanConnectionProfileDetails();
        }
    }
    public var WwanConnectionProfileDetails : Optional<Windows.Networking.Connectivity.IWwanConnectionProfileDetails> {
        get throws {
            return try get_WwanConnectionProfileDetails();
        }
    }
} // IConnectionProfile2


// type: Windows.Networking.Connectivity.IConnectionProfile3
// interface type
open class IConnectionProfile3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x578c2528, Data2: 0x4cd9, Data3 : 0x4161, Data4 : (0x80, 0x45, 0x20, 0x1c, 0xfd, 0x5b, 0x11, 0x5c)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.Connectivity.AttributedNetworkUsage>> GetAttributedNetworkUsageAsync(Windows.Foundation.DateTime, Windows.Foundation.DateTime, Windows.Networking.Connectivity.NetworkUsageStates)
    private func _n_GetAttributedNetworkUsageAsync(_ startTime : _q_CWindows_CFoundation_CDateTime, _ endTime : _q_CWindows_CFoundation_CDateTime, _ states : _q_CWindows_CNetworking_CConnectivity_CNetworkUsageStates, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CAttributedNetworkUsage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttributedNetworkUsageAsync(pThis, startTime, endTime, states, __presult))
        }
    }
    public func GetAttributedNetworkUsageAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CAttributedNetworkUsage> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CAttributedNetworkUsage>> = nil;
        try self._n_GetAttributedNetworkUsageAsync(startTime, endTime, states, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CAttributedNetworkUsage(consuming: __result);
    }
    public func GetAttributedNetworkUsage(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CAttributedNetworkUsage> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetAttributedNetworkUsageAsync(startTime: startTime, endTime: endTime, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IConnectionProfile3


// type: Windows.Networking.Connectivity.IConnectionProfile4
// interface type
open class IConnectionProfile4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7a2d42cd, Data2: 0x81e0, Data3 : 0x4ae6, Data4 : (0xab, 0xed, 0xab, 0x9c, 0xa1, 0x3e, 0xb7, 0x14)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.Connectivity.ProviderNetworkUsage>> GetProviderNetworkUsageAsync(Windows.Foundation.DateTime, Windows.Foundation.DateTime, Windows.Networking.Connectivity.NetworkUsageStates)
    private func _n_GetProviderNetworkUsageAsync(_ startTime : _q_CWindows_CFoundation_CDateTime, _ endTime : _q_CWindows_CFoundation_CDateTime, _ states : _q_CWindows_CNetworking_CConnectivity_CNetworkUsageStates, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CProviderNetworkUsage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetProviderNetworkUsageAsync(pThis, startTime, endTime, states, __presult))
        }
    }
    public func GetProviderNetworkUsageAsync(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CProviderNetworkUsage> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CProviderNetworkUsage>> = nil;
        try self._n_GetProviderNetworkUsageAsync(startTime, endTime, states, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CConnectivity_CProviderNetworkUsage(consuming: __result);
    }
    public func GetProviderNetworkUsage(startTime : Windows.Foundation.DateTime, endTime : Windows.Foundation.DateTime, states : Windows.Networking.Connectivity.NetworkUsageStates) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CConnectivity_CProviderNetworkUsage> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetProviderNetworkUsageAsync(startTime: startTime, endTime: endTime, states: states)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IConnectionProfile4


// type: Windows.Networking.Connectivity.IConnectionProfile5
// interface type
open class IConnectionProfile5
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x85361ec7, Data2: 0x9c73, Data3 : 0x4be0, Data4 : (0x8f, 0x14, 0x57, 0x8e, 0xec, 0x71, 0xee, 0x0e)) }
    // [IsSpecialName] bool get_CanDelete()
    private func _n_get_CanDelete(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDelete(pThis, __presult))
        }
    }
    public func get_CanDelete() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_CanDelete(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Connectivity.ConnectionProfileDeleteStatus> TryDeleteAsync()
    private func _n_TryDeleteAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfile5.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryDeleteAsync(pThis, __presult))
        }
    }
    public func TryDeleteAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus>> = nil;
        try self._n_TryDeleteAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus(consuming: __result);
    }
    public func TryDelete() async throws -> Windows.Networking.Connectivity.ConnectionProfileDeleteStatus {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.TryDeleteAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var CanDelete : boolean {
        get throws {
            return try get_CanDelete();
        }
    }
} // IConnectionProfile5


// type: Windows.Networking.Connectivity.IConnectionProfileFilter
// interface type
open class IConnectionProfileFilter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x204c7cc8, Data2: 0xbd2d, Data3 : 0x4e8d, Data4 : (0xa4, 0xb3, 0x45, 0x5e, 0xc3, 0x37, 0x38, 0x8a)) }
    // [IsSpecialName] void put_IsConnected(bool)
    private func _n_put_IsConnected(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsConnected(pThis, value))
        }
    }
    public func put_IsConnected(value : boolean) throws -> Void {
        try self._n_put_IsConnected(value);
    }
    // [IsSpecialName] bool get_IsConnected()
    private func _n_get_IsConnected(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsConnected(pThis, __presult))
        }
    }
    public func get_IsConnected() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsConnected(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsWwanConnectionProfile(bool)
    private func _n_put_IsWwanConnectionProfile(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsWwanConnectionProfile(pThis, value))
        }
    }
    public func put_IsWwanConnectionProfile(value : boolean) throws -> Void {
        try self._n_put_IsWwanConnectionProfile(value);
    }
    // [IsSpecialName] bool get_IsWwanConnectionProfile()
    private func _n_get_IsWwanConnectionProfile(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWwanConnectionProfile(pThis, __presult))
        }
    }
    public func get_IsWwanConnectionProfile() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsWwanConnectionProfile(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsWlanConnectionProfile(bool)
    private func _n_put_IsWlanConnectionProfile(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsWlanConnectionProfile(pThis, value))
        }
    }
    public func put_IsWlanConnectionProfile(value : boolean) throws -> Void {
        try self._n_put_IsWlanConnectionProfile(value);
    }
    // [IsSpecialName] bool get_IsWlanConnectionProfile()
    private func _n_get_IsWlanConnectionProfile(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWlanConnectionProfile(pThis, __presult))
        }
    }
    public func get_IsWlanConnectionProfile() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsWlanConnectionProfile(&__result);
        return __result;
    }
    // [IsSpecialName] void put_NetworkCostType(Windows.Networking.Connectivity.NetworkCostType)
    private func _n_put_NetworkCostType(_ value : _q_CWindows_CNetworking_CConnectivity_CNetworkCostType) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NetworkCostType(pThis, value))
        }
    }
    public func put_NetworkCostType(value : Windows.Networking.Connectivity.NetworkCostType) throws -> Void {
        try self._n_put_NetworkCostType(value);
    }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkCostType get_NetworkCostType()
    private func _n_get_NetworkCostType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CNetworkCostType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkCostType(pThis, __presult))
        }
    }
    public func get_NetworkCostType() throws -> Windows.Networking.Connectivity.NetworkCostType {
        var __result : _q_CWindows_CNetworking_CConnectivity_CNetworkCostType = _q_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unknown;
        try self._n_get_NetworkCostType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ServiceProviderGuid(Windows.Foundation.IReference<System.Guid>)
    private func _n_put_ServiceProviderGuid(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ServiceProviderGuid(pThis, value))
        }
    }
    public func put_ServiceProviderGuid(value : Optional<ClosedGenerics.IReference_1_GUID>) throws -> Void {
        try self._n_put_ServiceProviderGuid(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Guid> get_ServiceProviderGuid()
    private func _n_get_ServiceProviderGuid(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServiceProviderGuid(pThis, __presult))
        }
    }
    public func get_ServiceProviderGuid() throws -> Optional<ClosedGenerics.IReference_1_GUID> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>> = nil;
        try self._n_get_ServiceProviderGuid(&__result);
        return ClosedGenerics.IReference_1_GUID(consuming: __result);
    }
    public var IsConnected : boolean {
        get throws {
            return try get_IsConnected();
        }
    }
    public var IsWlanConnectionProfile : boolean {
        get throws {
            return try get_IsWlanConnectionProfile();
        }
    }
    public var IsWwanConnectionProfile : boolean {
        get throws {
            return try get_IsWwanConnectionProfile();
        }
    }
    public var NetworkCostType : Windows.Networking.Connectivity.NetworkCostType {
        get throws {
            return try get_NetworkCostType();
        }
    }
    public var ServiceProviderGuid : Optional<ClosedGenerics.IReference_1_GUID> {
        get throws {
            return try get_ServiceProviderGuid();
        }
    }
} // IConnectionProfileFilter


// type: Windows.Networking.Connectivity.IConnectionProfileFilter2
// interface type
open class IConnectionProfileFilter2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcd068ee1, Data2: 0xc3fc, Data3 : 0x4fad, Data4 : (0x9d, 0xdc, 0x59, 0x3f, 0xaa, 0x4b, 0x78, 0x85)) }
    // [IsSpecialName] void put_IsRoaming(Windows.Foundation.IReference<bool>)
    private func _n_put_IsRoaming(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsRoaming(pThis, value))
        }
    }
    public func put_IsRoaming(value : Optional<ClosedGenerics.IReference_1_boolean>) throws -> Void {
        try self._n_put_IsRoaming(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<bool> get_IsRoaming()
    private func _n_get_IsRoaming(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRoaming(pThis, __presult))
        }
    }
    public func get_IsRoaming() throws -> Optional<ClosedGenerics.IReference_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>> = nil;
        try self._n_get_IsRoaming(&__result);
        return ClosedGenerics.IReference_1_boolean(consuming: __result);
    }
    // [IsSpecialName] void put_IsOverDataLimit(Windows.Foundation.IReference<bool>)
    private func _n_put_IsOverDataLimit(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsOverDataLimit(pThis, value))
        }
    }
    public func put_IsOverDataLimit(value : Optional<ClosedGenerics.IReference_1_boolean>) throws -> Void {
        try self._n_put_IsOverDataLimit(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<bool> get_IsOverDataLimit()
    private func _n_get_IsOverDataLimit(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsOverDataLimit(pThis, __presult))
        }
    }
    public func get_IsOverDataLimit() throws -> Optional<ClosedGenerics.IReference_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>> = nil;
        try self._n_get_IsOverDataLimit(&__result);
        return ClosedGenerics.IReference_1_boolean(consuming: __result);
    }
    // [IsSpecialName] void put_IsBackgroundDataUsageRestricted(Windows.Foundation.IReference<bool>)
    private func _n_put_IsBackgroundDataUsageRestricted(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsBackgroundDataUsageRestricted(pThis, value))
        }
    }
    public func put_IsBackgroundDataUsageRestricted(value : Optional<ClosedGenerics.IReference_1_boolean>) throws -> Void {
        try self._n_put_IsBackgroundDataUsageRestricted(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<bool> get_IsBackgroundDataUsageRestricted()
    private func _n_get_IsBackgroundDataUsageRestricted(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBackgroundDataUsageRestricted(pThis, __presult))
        }
    }
    public func get_IsBackgroundDataUsageRestricted() throws -> Optional<ClosedGenerics.IReference_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_boolean>> = nil;
        try self._n_get_IsBackgroundDataUsageRestricted(&__result);
        return ClosedGenerics.IReference_1_boolean(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_RawData()
    private func _n_get_RawData(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RawData(pThis, __presult))
        }
    }
    public func get_RawData() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_RawData(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var IsBackgroundDataUsageRestricted : Optional<ClosedGenerics.IReference_1_boolean> {
        get throws {
            return try get_IsBackgroundDataUsageRestricted();
        }
    }
    public var IsOverDataLimit : Optional<ClosedGenerics.IReference_1_boolean> {
        get throws {
            return try get_IsOverDataLimit();
        }
    }
    public var IsRoaming : Optional<ClosedGenerics.IReference_1_boolean> {
        get throws {
            return try get_IsRoaming();
        }
    }
    public var RawData : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_RawData();
        }
    }
} // IConnectionProfileFilter2


// type: Windows.Networking.Connectivity.IConnectionProfileFilter3
// interface type
open class IConnectionProfileFilter3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0aaa09c0, Data2: 0x5014, Data3 : 0x447c, Data4 : (0x88, 0x09, 0xae, 0xe4, 0xcb, 0x0a, 0xf9, 0x4a)) }
    // [IsSpecialName] void put_PurposeGuid(Windows.Foundation.IReference<System.Guid>)
    private func _n_put_PurposeGuid(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PurposeGuid(pThis, value))
        }
    }
    public func put_PurposeGuid(value : Optional<ClosedGenerics.IReference_1_GUID>) throws -> Void {
        try self._n_put_PurposeGuid(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Guid> get_PurposeGuid()
    private func _n_get_PurposeGuid(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionProfileFilter3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PurposeGuid(pThis, __presult))
        }
    }
    public func get_PurposeGuid() throws -> Optional<ClosedGenerics.IReference_1_GUID> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_GUID>> = nil;
        try self._n_get_PurposeGuid(&__result);
        return ClosedGenerics.IReference_1_GUID(consuming: __result);
    }
    public var PurposeGuid : Optional<ClosedGenerics.IReference_1_GUID> {
        get throws {
            return try get_PurposeGuid();
        }
    }
} // IConnectionProfileFilter3


// type: Windows.Networking.Connectivity.IConnectionSession
// interface type
open class IConnectionSession
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xff905d4c, Data2: 0xf83b, Data3 : 0x41b0, Data4 : (0x8a, 0x0c, 0x14, 0x62, 0xd9, 0xc5, 0x6b, 0x73)) }
    // [IsSpecialName] Windows.Networking.Connectivity.ConnectionProfile get_ConnectionProfile()
    private func _n_get_ConnectionProfile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectionSession.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionProfile(pThis, __presult))
        }
    }
    public func get_ConnectionProfile() throws -> Optional<Windows.Networking.Connectivity.IConnectionProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>> = nil;
        try self._n_get_ConnectionProfile(&__result);
        return Windows.Networking.Connectivity.IConnectionProfile(consuming: __result);
    }
    public var ConnectionProfile : Optional<Windows.Networking.Connectivity.IConnectionProfile> {
        get throws {
            return try get_ConnectionProfile();
        }
    }
} // IConnectionSession


// type: Windows.Networking.Connectivity.IConnectivityInterval
// interface type
open class IConnectivityInterval
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4faa3fff, Data2: 0x6746, Data3 : 0x4824, Data4 : (0xa9, 0x64, 0xee, 0xd8, 0xe8, 0x7f, 0x87, 0x09)) }
    // [IsSpecialName] Windows.Foundation.DateTime get_StartTime()
    private func _n_get_StartTime(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CDateTime>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectivityInterval.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartTime(pThis, __presult))
        }
    }
    public func get_StartTime() throws -> Windows.Foundation.DateTime {
        var __result : _q_CWindows_CFoundation_CDateTime = _q_CWindows_CFoundation_CDateTime(UniversalTime: 0);
        try self._n_get_StartTime(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_ConnectionDuration()
    private func _n_get_ConnectionDuration(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIConnectivityInterval.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionDuration(pThis, __presult))
        }
    }
    public func get_ConnectionDuration() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_ConnectionDuration(&__result);
        return __result;
    }
    public var ConnectionDuration : Windows.Foundation.TimeSpan {
        get throws {
            return try get_ConnectionDuration();
        }
    }
    public var StartTime : Windows.Foundation.DateTime {
        get throws {
            return try get_StartTime();
        }
    }
} // IConnectivityInterval


// type: Windows.Networking.Connectivity.IDataPlanStatus
// interface type
open class IDataPlanStatus
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x977a8b8c, Data2: 0x3885, Data3 : 0x40f3, Data4 : (0x88, 0x51, 0x42, 0xcd, 0x2b, 0xd5, 0x68, 0xbb)) }
    // [IsSpecialName] Windows.Networking.Connectivity.DataPlanUsage get_DataPlanUsage()
    private func _n_get_DataPlanUsage(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataPlanUsage>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataPlanUsage(pThis, __presult))
        }
    }
    public func get_DataPlanUsage() throws -> Optional<Windows.Networking.Connectivity.IDataPlanUsage> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIDataPlanUsage>> = nil;
        try self._n_get_DataPlanUsage(&__result);
        return Windows.Networking.Connectivity.IDataPlanUsage(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt32> get_DataLimitInMegabytes()
    private func _n_get_DataLimitInMegabytes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataLimitInMegabytes(pThis, __presult))
        }
    }
    public func get_DataLimitInMegabytes() throws -> Optional<ClosedGenerics.IReference_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT32>> = nil;
        try self._n_get_DataLimitInMegabytes(&__result);
        return ClosedGenerics.IReference_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt64> get_InboundBitsPerSecond()
    private func _n_get_InboundBitsPerSecond(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InboundBitsPerSecond(pThis, __presult))
        }
    }
    public func get_InboundBitsPerSecond() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>> = nil;
        try self._n_get_InboundBitsPerSecond(&__result);
        return ClosedGenerics.IReference_1_UINT64(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt64> get_OutboundBitsPerSecond()
    private func _n_get_OutboundBitsPerSecond(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundBitsPerSecond(pThis, __presult))
        }
    }
    public func get_OutboundBitsPerSecond() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>> = nil;
        try self._n_get_OutboundBitsPerSecond(&__result);
        return ClosedGenerics.IReference_1_UINT64(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_NextBillingCycle()
    private func _n_get_NextBillingCycle(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NextBillingCycle(pThis, __presult))
        }
    }
    public func get_NextBillingCycle() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_NextBillingCycle(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt32> get_MaxTransferSizeInMegabytes()
    private func _n_get_MaxTransferSizeInMegabytes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxTransferSizeInMegabytes(pThis, __presult))
        }
    }
    public func get_MaxTransferSizeInMegabytes() throws -> Optional<ClosedGenerics.IReference_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT32>> = nil;
        try self._n_get_MaxTransferSizeInMegabytes(&__result);
        return ClosedGenerics.IReference_1_UINT32(consuming: __result);
    }
    public var DataLimitInMegabytes : Optional<ClosedGenerics.IReference_1_UINT32> {
        get throws {
            return try get_DataLimitInMegabytes();
        }
    }
    public var DataPlanUsage : Optional<Windows.Networking.Connectivity.IDataPlanUsage> {
        get throws {
            return try get_DataPlanUsage();
        }
    }
    public var InboundBitsPerSecond : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
            return try get_InboundBitsPerSecond();
        }
    }
    public var MaxTransferSizeInMegabytes : Optional<ClosedGenerics.IReference_1_UINT32> {
        get throws {
            return try get_MaxTransferSizeInMegabytes();
        }
    }
    public var NextBillingCycle : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_NextBillingCycle();
        }
    }
    public var OutboundBitsPerSecond : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
            return try get_OutboundBitsPerSecond();
        }
    }
} // IDataPlanStatus


// type: Windows.Networking.Connectivity.IDataPlanUsage
// interface type
open class IDataPlanUsage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb921492d, Data2: 0x3b44, Data3 : 0x47ff, Data4 : (0xb3, 0x61, 0xbe, 0x59, 0xe6, 0x9e, 0xd1, 0xb0)) }
    // [IsSpecialName] System.UInt32 get_MegabytesUsed()
    private func _n_get_MegabytesUsed(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MegabytesUsed(pThis, __presult))
        }
    }
    public func get_MegabytesUsed() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MegabytesUsed(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.DateTime get_LastSyncTime()
    private func _n_get_LastSyncTime(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CDateTime>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataPlanUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastSyncTime(pThis, __presult))
        }
    }
    public func get_LastSyncTime() throws -> Windows.Foundation.DateTime {
        var __result : _q_CWindows_CFoundation_CDateTime = _q_CWindows_CFoundation_CDateTime(UniversalTime: 0);
        try self._n_get_LastSyncTime(&__result);
        return __result;
    }
    public var LastSyncTime : Windows.Foundation.DateTime {
        get throws {
            return try get_LastSyncTime();
        }
    }
    public var MegabytesUsed : Swift.UInt32 {
        get throws {
            return try get_MegabytesUsed();
        }
    }
} // IDataPlanUsage


// type: Windows.Networking.Connectivity.IDataUsage
// interface type
open class IDataUsage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc1431dd3, Data2: 0xb146, Data3 : 0x4d39, Data4 : (0xb9, 0x59, 0x0c, 0x69, 0xb0, 0x96, 0xc5, 0x12)) }
    // [IsSpecialName] System.UInt64 get_BytesSent()
    private func _n_get_BytesSent(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, __presult))
        }
    }
    public func get_BytesSent() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesSent(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt64 get_BytesReceived()
    private func _n_get_BytesReceived(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIDataUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, __presult))
        }
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesReceived(&__result);
        return __result;
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
            return try get_BytesReceived();
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
            return try get_BytesSent();
        }
    }
} // IDataUsage


// type: Windows.Networking.Connectivity.IIPInformation
// interface type
open class IIPInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd85145e0, Data2: 0x138f, Data3 : 0x47d7, Data4 : (0x9b, 0x3a, 0x36, 0xbb, 0x48, 0x8c, 0xef, 0x33)) }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkAdapter get_NetworkAdapter()
    private func _n_get_NetworkAdapter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIIPInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapter(pThis, __presult))
        }
    }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>> = nil;
        try self._n_get_NetworkAdapter(&__result);
        return Windows.Networking.Connectivity.INetworkAdapter(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Byte> get_PrefixLength()
    private func _n_get_PrefixLength(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT8>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIIPInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrefixLength(pThis, __presult))
        }
    }
    public func get_PrefixLength() throws -> Optional<ClosedGenerics.IReference_1_UINT8> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT8>> = nil;
        try self._n_get_PrefixLength(&__result);
        return ClosedGenerics.IReference_1_UINT8(consuming: __result);
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.INetworkAdapter> {
        get throws {
            return try get_NetworkAdapter();
        }
    }
    public var PrefixLength : Optional<ClosedGenerics.IReference_1_UINT8> {
        get throws {
            return try get_PrefixLength();
        }
    }
} // IIPInformation


// type: Windows.Networking.Connectivity.ILanIdentifier
// interface type
open class ILanIdentifier
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x48aa53aa, Data2: 0x1108, Data3 : 0x4546, Data4 : (0xa6, 0xcb, 0x9a, 0x74, 0xda, 0x4b, 0x7b, 0xa0)) }
    // [IsSpecialName] Windows.Networking.Connectivity.LanIdentifierData get_InfrastructureId()
    private func _n_get_InfrastructureId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CILanIdentifierData>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CILanIdentifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InfrastructureId(pThis, __presult))
        }
    }
    public func get_InfrastructureId() throws -> Optional<Windows.Networking.Connectivity.ILanIdentifierData> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CILanIdentifierData>> = nil;
        try self._n_get_InfrastructureId(&__result);
        return Windows.Networking.Connectivity.ILanIdentifierData(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Connectivity.LanIdentifierData get_PortId()
    private func _n_get_PortId(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CILanIdentifierData>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CILanIdentifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PortId(pThis, __presult))
        }
    }
    public func get_PortId() throws -> Optional<Windows.Networking.Connectivity.ILanIdentifierData> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CILanIdentifierData>> = nil;
        try self._n_get_PortId(&__result);
        return Windows.Networking.Connectivity.ILanIdentifierData(consuming: __result);
    }
    // [IsSpecialName] System.Guid get_NetworkAdapterId()
    private func _n_get_NetworkAdapterId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CILanIdentifier.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapterId(pThis, __presult))
        }
    }
    public func get_NetworkAdapterId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_NetworkAdapterId(&__result);
        return __result;
    }
    public var InfrastructureId : Optional<Windows.Networking.Connectivity.ILanIdentifierData> {
        get throws {
            return try get_InfrastructureId();
        }
    }
    public var NetworkAdapterId : GUID {
        get throws {
            return try get_NetworkAdapterId();
        }
    }
    public var PortId : Optional<Windows.Networking.Connectivity.ILanIdentifierData> {
        get throws {
            return try get_PortId();
        }
    }
} // ILanIdentifier


// type: Windows.Networking.Connectivity.ILanIdentifierData
// interface type
open class ILanIdentifierData
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa74e83c3, Data2: 0xd639, Data3 : 0x45be, Data4 : (0xa3, 0x6a, 0xc4, 0xe4, 0xae, 0xaf, 0x6d, 0x9b)) }
    // [IsSpecialName] System.UInt32 get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CILanIdentifierData.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Type(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.Byte> get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT8>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CILanIdentifierData.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Optional<ClosedGenerics.IVectorView_1_UINT8> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_UINT8>> = nil;
        try self._n_get_Value(&__result);
        return ClosedGenerics.IVectorView_1_UINT8(consuming: __result);
    }
    public var Type_ : Swift.UInt32 {
        get throws {
            return try get_Type();
        }
    }
    public var Value : Optional<ClosedGenerics.IVectorView_1_UINT8> {
        get throws {
            return try get_Value();
        }
    }
} // ILanIdentifierData


// type: Windows.Networking.Connectivity.INetworkAdapter
// interface type
open class INetworkAdapter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3b542e03, Data2: 0x5388, Data3 : 0x496c, Data4 : (0xa8, 0xa3, 0xaf, 0xfd, 0x39, 0xae, 0xc2, 0xe6)) }
    // [IsSpecialName] System.UInt64 get_OutboundMaxBitsPerSecond()
    private func _n_get_OutboundMaxBitsPerSecond(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundMaxBitsPerSecond(pThis, __presult))
        }
    }
    public func get_OutboundMaxBitsPerSecond() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_OutboundMaxBitsPerSecond(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt64 get_InboundMaxBitsPerSecond()
    private func _n_get_InboundMaxBitsPerSecond(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InboundMaxBitsPerSecond(pThis, __presult))
        }
    }
    public func get_InboundMaxBitsPerSecond() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_InboundMaxBitsPerSecond(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_IanaInterfaceType()
    private func _n_get_IanaInterfaceType(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IanaInterfaceType(pThis, __presult))
        }
    }
    public func get_IanaInterfaceType() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_IanaInterfaceType(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkItem get_NetworkItem()
    private func _n_get_NetworkItem(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkItem>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkItem(pThis, __presult))
        }
    }
    public func get_NetworkItem() throws -> Optional<Windows.Networking.Connectivity.INetworkItem> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkItem>> = nil;
        try self._n_get_NetworkItem(&__result);
        return Windows.Networking.Connectivity.INetworkItem(consuming: __result);
    }
    // [IsSpecialName] System.Guid get_NetworkAdapterId()
    private func _n_get_NetworkAdapterId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAdapterId(pThis, __presult))
        }
    }
    public func get_NetworkAdapterId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_NetworkAdapterId(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.Connectivity.ConnectionProfile> GetConnectedProfileAsync()
    private func _n_GetConnectedProfileAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkAdapter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectedProfileAsync(pThis, __presult))
        }
    }
    public func GetConnectedProfileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile>> = nil;
        try self._n_GetConnectedProfileAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile(consuming: __result);
    }
    public func GetConnectedProfile() async throws -> Optional<Windows.Networking.Connectivity.IConnectionProfile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetConnectedProfileAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var IanaInterfaceType : Swift.UInt32 {
        get throws {
            return try get_IanaInterfaceType();
        }
    }
    public var InboundMaxBitsPerSecond : Swift.UInt64 {
        get throws {
            return try get_InboundMaxBitsPerSecond();
        }
    }
    public var NetworkAdapterId : GUID {
        get throws {
            return try get_NetworkAdapterId();
        }
    }
    public var NetworkItem : Optional<Windows.Networking.Connectivity.INetworkItem> {
        get throws {
            return try get_NetworkItem();
        }
    }
    public var OutboundMaxBitsPerSecond : Swift.UInt64 {
        get throws {
            return try get_OutboundMaxBitsPerSecond();
        }
    }
} // INetworkAdapter


// type: Windows.Networking.Connectivity.INetworkItem
// interface type
open class INetworkItem
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x01bc4d39, Data2: 0xf5e0, Data3 : 0x4567, Data4 : (0xa2, 0x8c, 0x42, 0x08, 0x0c, 0x83, 0x1b, 0x2b)) }
    // [IsSpecialName] System.Guid get_NetworkId()
    private func _n_get_NetworkId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkId(pThis, __presult))
        }
    }
    public func get_NetworkId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_NetworkId(&__result);
        return __result;
    }
    // Windows.Networking.Connectivity.NetworkTypes GetNetworkTypes()
    private func _n_GetNetworkTypes(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CNetworkTypes>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkTypes(pThis, __presult))
        }
    }
    public func GetNetworkTypes() throws -> Windows.Networking.Connectivity.NetworkTypes {
        var __result : _q_CWindows_CNetworking_CConnectivity_CNetworkTypes = _q_CWindows_CNetworking_CConnectivity_CNetworkTypes_None;
        try self._n_GetNetworkTypes(&__result);
        return __result;
    }
    public var NetworkId : GUID {
        get throws {
            return try get_NetworkId();
        }
    }
} // INetworkItem


// type: Windows.Networking.Connectivity.INetworkSecuritySettings
// interface type
open class INetworkSecuritySettings
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7ca07e8d, Data2: 0x917b, Data3 : 0x4b5f, Data4 : (0xb8, 0x4d, 0x28, 0xf7, 0xa5, 0xac, 0x54, 0x02)) }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkAuthenticationType get_NetworkAuthenticationType()
    private func _n_get_NetworkAuthenticationType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAuthenticationType(pThis, __presult))
        }
    }
    public func get_NetworkAuthenticationType() throws -> Windows.Networking.Connectivity.NetworkAuthenticationType {
        var __result : _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType = _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_None;
        try self._n_get_NetworkAuthenticationType(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Connectivity.NetworkEncryptionType get_NetworkEncryptionType()
    private func _n_get_NetworkEncryptionType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkSecuritySettings.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkEncryptionType(pThis, __presult))
        }
    }
    public func get_NetworkEncryptionType() throws -> Windows.Networking.Connectivity.NetworkEncryptionType {
        var __result : _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType = _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_None;
        try self._n_get_NetworkEncryptionType(&__result);
        return __result;
    }
    public var NetworkAuthenticationType : Windows.Networking.Connectivity.NetworkAuthenticationType {
        get throws {
            return try get_NetworkAuthenticationType();
        }
    }
    public var NetworkEncryptionType : Windows.Networking.Connectivity.NetworkEncryptionType {
        get throws {
            return try get_NetworkEncryptionType();
        }
    }
} // INetworkSecuritySettings


// type: Windows.Networking.Connectivity.INetworkStateChangeEventDetails
// interface type
open class INetworkStateChangeEventDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1f0cf333, Data2: 0xd7a6, Data3 : 0x44dd, Data4 : (0xa4, 0xe9, 0x68, 0x7c, 0x47, 0x6b, 0x90, 0x3d)) }
    // [IsSpecialName] bool get_HasNewInternetConnectionProfile()
    private func _n_get_HasNewInternetConnectionProfile(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewInternetConnectionProfile(pThis, __presult))
        }
    }
    public func get_HasNewInternetConnectionProfile() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewInternetConnectionProfile(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasNewConnectionCost()
    private func _n_get_HasNewConnectionCost(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewConnectionCost(pThis, __presult))
        }
    }
    public func get_HasNewConnectionCost() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewConnectionCost(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasNewNetworkConnectivityLevel()
    private func _n_get_HasNewNetworkConnectivityLevel(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewNetworkConnectivityLevel(pThis, __presult))
        }
    }
    public func get_HasNewNetworkConnectivityLevel() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewNetworkConnectivityLevel(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasNewDomainConnectivityLevel()
    private func _n_get_HasNewDomainConnectivityLevel(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewDomainConnectivityLevel(pThis, __presult))
        }
    }
    public func get_HasNewDomainConnectivityLevel() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewDomainConnectivityLevel(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasNewHostNameList()
    private func _n_get_HasNewHostNameList(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewHostNameList(pThis, __presult))
        }
    }
    public func get_HasNewHostNameList() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewHostNameList(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasNewWwanRegistrationState()
    private func _n_get_HasNewWwanRegistrationState(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewWwanRegistrationState(pThis, __presult))
        }
    }
    public func get_HasNewWwanRegistrationState() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewWwanRegistrationState(&__result);
        return __result;
    }
    public var HasNewConnectionCost : boolean {
        get throws {
            return try get_HasNewConnectionCost();
        }
    }
    public var HasNewDomainConnectivityLevel : boolean {
        get throws {
            return try get_HasNewDomainConnectivityLevel();
        }
    }
    public var HasNewHostNameList : boolean {
        get throws {
            return try get_HasNewHostNameList();
        }
    }
    public var HasNewInternetConnectionProfile : boolean {
        get throws {
            return try get_HasNewInternetConnectionProfile();
        }
    }
    public var HasNewNetworkConnectivityLevel : boolean {
        get throws {
            return try get_HasNewNetworkConnectivityLevel();
        }
    }
    public var HasNewWwanRegistrationState : boolean {
        get throws {
            return try get_HasNewWwanRegistrationState();
        }
    }
} // INetworkStateChangeEventDetails


// type: Windows.Networking.Connectivity.INetworkStateChangeEventDetails2
// interface type
open class INetworkStateChangeEventDetails2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd643c0e8, Data2: 0x30d3, Data3 : 0x4f6a, Data4 : (0xad, 0x47, 0x6a, 0x18, 0x73, 0xce, 0xb3, 0xc1)) }
    // [IsSpecialName] bool get_HasNewTetheringOperationalState()
    private func _n_get_HasNewTetheringOperationalState(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewTetheringOperationalState(pThis, __presult))
        }
    }
    public func get_HasNewTetheringOperationalState() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewTetheringOperationalState(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasNewTetheringClientCount()
    private func _n_get_HasNewTetheringClientCount(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkStateChangeEventDetails2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasNewTetheringClientCount(pThis, __presult))
        }
    }
    public func get_HasNewTetheringClientCount() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasNewTetheringClientCount(&__result);
        return __result;
    }
    public var HasNewTetheringClientCount : boolean {
        get throws {
            return try get_HasNewTetheringClientCount();
        }
    }
    public var HasNewTetheringOperationalState : boolean {
        get throws {
            return try get_HasNewTetheringOperationalState();
        }
    }
} // INetworkStateChangeEventDetails2


// type: Windows.Networking.Connectivity.INetworkUsage
// interface type
open class INetworkUsage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x49da8fce, Data2: 0x9985, Data3 : 0x4927, Data4 : (0xbf, 0x5b, 0x07, 0x2b, 0x5c, 0x65, 0xf8, 0xd9)) }
    // [IsSpecialName] System.UInt64 get_BytesSent()
    private func _n_get_BytesSent(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, __presult))
        }
    }
    public func get_BytesSent() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesSent(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt64 get_BytesReceived()
    private func _n_get_BytesReceived(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, __presult))
        }
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesReceived(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_ConnectionDuration()
    private func _n_get_ConnectionDuration(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CINetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionDuration(pThis, __presult))
        }
    }
    public func get_ConnectionDuration() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_ConnectionDuration(&__result);
        return __result;
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
            return try get_BytesReceived();
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
            return try get_BytesSent();
        }
    }
    public var ConnectionDuration : Windows.Foundation.TimeSpan {
        get throws {
            return try get_ConnectionDuration();
        }
    }
} // INetworkUsage


// type: Windows.Networking.Connectivity.IPInformation
// runtime class
public class IPInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IIPInformation;
    public init(plok: Windows.Networking.Connectivity.IIPInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IIPInformation { return _self; }
    public func get_NetworkAdapter() throws -> Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        let _ifc : Windows.Networking.Connectivity.IIPInformation = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.get_NetworkAdapter());
    }
    public func get_PrefixLength() throws -> Optional<ClosedGenerics.IReference_1_UINT8> {
        let _ifc : Windows.Networking.Connectivity.IIPInformation = try _self.QueryInterface();
        return try _ifc.get_PrefixLength();
    }
    public var NetworkAdapter : Optional<Windows.Networking.Connectivity.NetworkAdapter> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IIPInformation = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkAdapter(plok: _ifc.NetworkAdapter);
        }
    }
    public var PrefixLength : Optional<ClosedGenerics.IReference_1_UINT8> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IIPInformation = try _self.QueryInterface();
        return try _ifc.PrefixLength;
        }
    }
}

// type: Windows.Networking.Connectivity.IProviderNetworkUsage
// interface type
open class IProviderNetworkUsage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5ec69e04, Data2: 0x7931, Data3 : 0x48c8, Data4 : (0xb8, 0xf3, 0x46, 0x30, 0x0f, 0xa4, 0x27, 0x28)) }
    // [IsSpecialName] System.UInt64 get_BytesSent()
    private func _n_get_BytesSent(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesSent(pThis, __presult))
        }
    }
    public func get_BytesSent() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesSent(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt64 get_BytesReceived()
    private func _n_get_BytesReceived(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BytesReceived(pThis, __presult))
        }
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_BytesReceived(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIProviderNetworkUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ProviderId(&__result);
        return Swift.String(from: __result);
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
            return try get_BytesReceived();
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
            return try get_BytesSent();
        }
    }
    public var ProviderId : Swift.String {
        get throws {
            return try get_ProviderId();
        }
    }
} // IProviderNetworkUsage


// type: Windows.Networking.Connectivity.IProxyConfiguration
// interface type
open class IProxyConfiguration
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xef3a60b4, Data2: 0x9004, Data3 : 0x4dd6, Data4 : (0xb7, 0xd8, 0xb3, 0xe5, 0x02, 0xf4, 0xaa, 0xd0)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Uri> get_ProxyUris()
    private func _n_get_ProxyUris(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CFoundation_CUri>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIProxyConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyUris(pThis, __presult))
        }
    }
    public func get_ProxyUris() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CFoundation_CUri>> = nil;
        try self._n_get_ProxyUris(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri(consuming: __result);
    }
    // [IsSpecialName] bool get_CanConnectDirectly()
    private func _n_get_CanConnectDirectly(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIProxyConfiguration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanConnectDirectly(pThis, __presult))
        }
    }
    public func get_CanConnectDirectly() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_CanConnectDirectly(&__result);
        return __result;
    }
    public var CanConnectDirectly : boolean {
        get throws {
            return try get_CanConnectDirectly();
        }
    }
    public var ProxyUris : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        get throws {
            return try get_ProxyUris();
        }
    }
} // IProxyConfiguration


// type: Windows.Networking.Connectivity.IRoutePolicy
// interface type
open class IRoutePolicy
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x11abc4ac, Data2: 0x0fc7, Data3 : 0x42e4, Data4 : (0x87, 0x42, 0x56, 0x99, 0x23, 0xb1, 0xca, 0x11)) }
    // [IsSpecialName] Windows.Networking.Connectivity.ConnectionProfile get_ConnectionProfile()
    private func _n_get_ConnectionProfile(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIRoutePolicy.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ConnectionProfile(pThis, __presult))
        }
    }
    public func get_ConnectionProfile() throws -> Optional<Windows.Networking.Connectivity.IConnectionProfile> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>> = nil;
        try self._n_get_ConnectionProfile(&__result);
        return Windows.Networking.Connectivity.IConnectionProfile(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_HostName()
    private func _n_get_HostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIRoutePolicy.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HostName(pThis, __presult))
        }
    }
    public func get_HostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_HostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.DomainNameType get_HostNameType()
    private func _n_get_HostNameType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CDomainNameType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIRoutePolicy.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HostNameType(pThis, __presult))
        }
    }
    public func get_HostNameType() throws -> Windows.Networking.DomainNameType {
        var __result : _q_CWindows_CNetworking_CDomainNameType = _q_CWindows_CNetworking_CDomainNameType_Suffix;
        try self._n_get_HostNameType(&__result);
        return __result;
    }
    public var ConnectionProfile : Optional<Windows.Networking.Connectivity.IConnectionProfile> {
        get throws {
            return try get_ConnectionProfile();
        }
    }
    public var HostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_HostName();
        }
    }
    public var HostNameType : Windows.Networking.DomainNameType {
        get throws {
            return try get_HostNameType();
        }
    }
} // IRoutePolicy


// type: Windows.Networking.Connectivity.IRoutePolicyFactory
// interface type
// ACTIVATION INTERFACE
open class IRoutePolicyFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x36027933, Data2: 0xa18e, Data3 : 0x4db5, Data4 : (0xa6, 0x97, 0xf5, 0x8f, 0xa7, 0x36, 0x4e, 0x44)) }
    // Windows.Networking.Connectivity.RoutePolicy CreateRoutePolicy(Windows.Networking.Connectivity.ConnectionProfile, Windows.Networking.HostName, Windows.Networking.DomainNameType)
    private func _n_CreateRoutePolicy(_ connectionProfile : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIConnectionProfile>>, _ hostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ type : _q_CWindows_CNetworking_CDomainNameType, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIRoutePolicy>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIRoutePolicyFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRoutePolicy(pThis, connectionProfile, hostName, type, __presult))
        }
    }
    public func CreateRoutePolicy(connectionProfile : Optional<Windows.Networking.Connectivity.IConnectionProfile>, hostName : Optional<Windows.Networking.IHostName>, type : Windows.Networking.DomainNameType) throws -> Optional<Windows.Networking.Connectivity.IRoutePolicy> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIRoutePolicy>> = nil;
        try self._n_CreateRoutePolicy(RawPointer(connectionProfile), RawPointer(hostName), type, &__result);
        return Windows.Networking.Connectivity.IRoutePolicy(consuming: __result);
    }
} // IRoutePolicyFactory


// type: Windows.Networking.Connectivity.IWlanConnectionProfileDetails
// interface type
open class IWlanConnectionProfileDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x562098cb, Data2: 0xb35a, Data3 : 0x4bf1, Data4 : (0xa8, 0x84, 0xb7, 0x55, 0x7e, 0x88, 0xff, 0x86)) }
    // System.String GetConnectedSsid()
    private func _n_GetConnectedSsid(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIWlanConnectionProfileDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetConnectedSsid(pThis, __presult))
        }
    }
    public func GetConnectedSsid() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetConnectedSsid(&__result);
        return Swift.String(from: __result);
    }
} // IWlanConnectionProfileDetails


// type: Windows.Networking.Connectivity.IWwanConnectionProfileDetails
// interface type
open class IWwanConnectionProfileDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0e4da8fe, Data2: 0x835f, Data3 : 0x4df3, Data4 : (0x82, 0xfd, 0xdf, 0x55, 0x6e, 0xbc, 0x09, 0xef)) }
    // [IsSpecialName] System.String get_HomeProviderId()
    private func _n_get_HomeProviderId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HomeProviderId(pThis, __presult))
        }
    }
    public func get_HomeProviderId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_HomeProviderId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_AccessPointName()
    private func _n_get_AccessPointName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessPointName(pThis, __presult))
        }
    }
    public func get_AccessPointName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AccessPointName(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Networking.Connectivity.WwanNetworkRegistrationState GetNetworkRegistrationState()
    private func _n_GetNetworkRegistrationState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNetworkRegistrationState(pThis, __presult))
        }
    }
    public func GetNetworkRegistrationState() throws -> Windows.Networking.Connectivity.WwanNetworkRegistrationState {
        var __result : _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState = _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_None;
        try self._n_GetNetworkRegistrationState(&__result);
        return __result;
    }
    // Windows.Networking.Connectivity.WwanDataClass GetCurrentDataClass()
    private func _n_GetCurrentDataClass(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CWwanDataClass>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentDataClass(pThis, __presult))
        }
    }
    public func GetCurrentDataClass() throws -> Windows.Networking.Connectivity.WwanDataClass {
        var __result : _q_CWindows_CNetworking_CConnectivity_CWwanDataClass = _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_None;
        try self._n_GetCurrentDataClass(&__result);
        return __result;
    }
    public var AccessPointName : Swift.String {
        get throws {
            return try get_AccessPointName();
        }
    }
    public var HomeProviderId : Swift.String {
        get throws {
            return try get_HomeProviderId();
        }
    }
} // IWwanConnectionProfileDetails


// type: Windows.Networking.Connectivity.IWwanConnectionProfileDetails2
// interface type
open class IWwanConnectionProfileDetails2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7a754ede, Data2: 0xa1ed, Data3 : 0x48b2, Data4 : (0x8e, 0x92, 0xb4, 0x60, 0x03, 0x3d, 0x52, 0xe2)) }
    // [IsSpecialName] Windows.Networking.Connectivity.WwanNetworkIPKind get_IPKind()
    private func _n_get_IPKind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IPKind(pThis, __presult))
        }
    }
    public func get_IPKind() throws -> Windows.Networking.Connectivity.WwanNetworkIPKind {
        var __result : _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind = _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_None;
        try self._n_get_IPKind(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.Guid> get_PurposeGuids()
    private func _n_get_PurposeGuids(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_GUID>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CConnectivity_CIWwanConnectionProfileDetails2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PurposeGuids(pThis, __presult))
        }
    }
    public func get_PurposeGuids() throws -> Optional<ClosedGenerics.IVectorView_1_GUID> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_GUID>> = nil;
        try self._n_get_PurposeGuids(&__result);
        return ClosedGenerics.IVectorView_1_GUID(consuming: __result);
    }
    public var IPKind : Windows.Networking.Connectivity.WwanNetworkIPKind {
        get throws {
            return try get_IPKind();
        }
    }
    public var PurposeGuids : Optional<ClosedGenerics.IVectorView_1_GUID> {
        get throws {
            return try get_PurposeGuids();
        }
    }
} // IWwanConnectionProfileDetails2


// type: Windows.Networking.Connectivity.LanIdentifier
// runtime class
public class LanIdentifier
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.ILanIdentifier;
    public init(plok: Windows.Networking.Connectivity.ILanIdentifier?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.ILanIdentifier { return _self; }
    public func get_InfrastructureId() throws -> Optional<Windows.Networking.Connectivity.LanIdentifierData> {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifier = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.LanIdentifierData(plok: _ifc.get_InfrastructureId());
    }
    public func get_PortId() throws -> Optional<Windows.Networking.Connectivity.LanIdentifierData> {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifier = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.LanIdentifierData(plok: _ifc.get_PortId());
    }
    public func get_NetworkAdapterId() throws -> GUID {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifier = try _self.QueryInterface();
        return try _ifc.get_NetworkAdapterId();
    }
    public var InfrastructureId : Optional<Windows.Networking.Connectivity.LanIdentifierData> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifier = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.LanIdentifierData(plok: _ifc.InfrastructureId);
        }
    }
    public var NetworkAdapterId : GUID {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifier = try _self.QueryInterface();
        return try _ifc.NetworkAdapterId;
        }
    }
    public var PortId : Optional<Windows.Networking.Connectivity.LanIdentifierData> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifier = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.LanIdentifierData(plok: _ifc.PortId);
        }
    }
}

// type: Windows.Networking.Connectivity.LanIdentifierData
// runtime class
public class LanIdentifierData
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.ILanIdentifierData;
    public init(plok: Windows.Networking.Connectivity.ILanIdentifierData?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.ILanIdentifierData { return _self; }
    public func get_Type() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifierData = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public func get_Value() throws -> Optional<ClosedGenerics.IVectorView_1_UINT8> {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifierData = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public var Type_ : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifierData = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
    public var Value : Optional<ClosedGenerics.IVectorView_1_UINT8> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.ILanIdentifierData = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
}

// type: Windows.Networking.Connectivity.NetworkAdapter
// runtime class
public class NetworkAdapter
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.INetworkAdapter;
    public init(plok: Windows.Networking.Connectivity.INetworkAdapter?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.INetworkAdapter { return _self; }
    public func get_OutboundMaxBitsPerSecond() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.get_OutboundMaxBitsPerSecond();
    }
    public func get_InboundMaxBitsPerSecond() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.get_InboundMaxBitsPerSecond();
    }
    public func get_IanaInterfaceType() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.get_IanaInterfaceType();
    }
    public func get_NetworkItem() throws -> Optional<Windows.Networking.Connectivity.NetworkItem> {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkItem(plok: _ifc.get_NetworkItem());
    }
    public func get_NetworkAdapterId() throws -> GUID {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.get_NetworkAdapterId();
    }
    public func GetConnectedProfileAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CConnectivity_CConnectionProfile> {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.GetConnectedProfileAsync();
    }
    public func GetConnectedProfile() async throws -> Optional<Windows.Networking.Connectivity.ConnectionProfile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.Connectivity.ConnectionProfile(plok: self.GetConnectedProfileAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var IanaInterfaceType : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.IanaInterfaceType;
        }
    }
    public var InboundMaxBitsPerSecond : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.InboundMaxBitsPerSecond;
        }
    }
    public var NetworkAdapterId : GUID {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.NetworkAdapterId;
        }
    }
    public var NetworkItem : Optional<Windows.Networking.Connectivity.NetworkItem> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.NetworkItem(plok: _ifc.NetworkItem);
        }
    }
    public var OutboundMaxBitsPerSecond : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkAdapter = try _self.QueryInterface();
        return try _ifc.OutboundMaxBitsPerSecond;
        }
    }
}

// type: Windows.Networking.Connectivity.NetworkAuthenticationType
// enum type
public typealias NetworkAuthenticationType = _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType;

// type: Windows.Networking.Connectivity.NetworkConnectivityLevel
// enum type
public typealias NetworkConnectivityLevel = _q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel;

// type: Windows.Networking.Connectivity.NetworkCostType
// enum type
public typealias NetworkCostType = _q_CWindows_CNetworking_CConnectivity_CNetworkCostType;

// type: Windows.Networking.Connectivity.NetworkEncryptionType
// enum type
public typealias NetworkEncryptionType = _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType;

// type: Windows.Networking.Connectivity.NetworkItem
// runtime class
public class NetworkItem
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.INetworkItem;
    public init(plok: Windows.Networking.Connectivity.INetworkItem?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.INetworkItem { return _self; }
    public func get_NetworkId() throws -> GUID {
        let _ifc : Windows.Networking.Connectivity.INetworkItem = try _self.QueryInterface();
        return try _ifc.get_NetworkId();
    }
    public func GetNetworkTypes() throws -> Windows.Networking.Connectivity.NetworkTypes {
        let _ifc : Windows.Networking.Connectivity.INetworkItem = try _self.QueryInterface();
        return try _ifc.GetNetworkTypes();
    }
    public var NetworkId : GUID {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkItem = try _self.QueryInterface();
        return try _ifc.NetworkId;
        }
    }
}

// type: Windows.Networking.Connectivity.NetworkSecuritySettings
// runtime class
public class NetworkSecuritySettings
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.INetworkSecuritySettings;
    public init(plok: Windows.Networking.Connectivity.INetworkSecuritySettings?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.INetworkSecuritySettings { return _self; }
    public func get_NetworkAuthenticationType() throws -> Windows.Networking.Connectivity.NetworkAuthenticationType {
        let _ifc : Windows.Networking.Connectivity.INetworkSecuritySettings = try _self.QueryInterface();
        return try _ifc.get_NetworkAuthenticationType();
    }
    public func get_NetworkEncryptionType() throws -> Windows.Networking.Connectivity.NetworkEncryptionType {
        let _ifc : Windows.Networking.Connectivity.INetworkSecuritySettings = try _self.QueryInterface();
        return try _ifc.get_NetworkEncryptionType();
    }
    public var NetworkAuthenticationType : Windows.Networking.Connectivity.NetworkAuthenticationType {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkSecuritySettings = try _self.QueryInterface();
        return try _ifc.NetworkAuthenticationType;
        }
    }
    public var NetworkEncryptionType : Windows.Networking.Connectivity.NetworkEncryptionType {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkSecuritySettings = try _self.QueryInterface();
        return try _ifc.NetworkEncryptionType;
        }
    }
}

// type: Windows.Networking.Connectivity.NetworkStateChangeEventDetails
// runtime class
public class NetworkStateChangeEventDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.INetworkStateChangeEventDetails;
    public init(plok: Windows.Networking.Connectivity.INetworkStateChangeEventDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.INetworkStateChangeEventDetails { return _self; }
    public func get_HasNewInternetConnectionProfile() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.get_HasNewInternetConnectionProfile();
    }
    public func get_HasNewConnectionCost() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.get_HasNewConnectionCost();
    }
    public func get_HasNewNetworkConnectivityLevel() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.get_HasNewNetworkConnectivityLevel();
    }
    public func get_HasNewDomainConnectivityLevel() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.get_HasNewDomainConnectivityLevel();
    }
    public func get_HasNewHostNameList() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.get_HasNewHostNameList();
    }
    public func get_HasNewWwanRegistrationState() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.get_HasNewWwanRegistrationState();
    }
    public var HasNewConnectionCost : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.HasNewConnectionCost;
        }
    }
    public var HasNewDomainConnectivityLevel : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.HasNewDomainConnectivityLevel;
        }
    }
    public var HasNewHostNameList : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.HasNewHostNameList;
        }
    }
    public var HasNewInternetConnectionProfile : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.HasNewInternetConnectionProfile;
        }
    }
    public var HasNewNetworkConnectivityLevel : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.HasNewNetworkConnectivityLevel;
        }
    }
    public var HasNewWwanRegistrationState : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails = try _self.QueryInterface();
        return try _ifc.HasNewWwanRegistrationState;
        }
    }
    public func get_HasNewTetheringOperationalState() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails2 = try _self.QueryInterface();
        return try _ifc.get_HasNewTetheringOperationalState();
    }
    public func get_HasNewTetheringClientCount() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails2 = try _self.QueryInterface();
        return try _ifc.get_HasNewTetheringClientCount();
    }
    public var HasNewTetheringClientCount : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails2 = try _self.QueryInterface();
        return try _ifc.HasNewTetheringClientCount;
        }
    }
    public var HasNewTetheringOperationalState : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkStateChangeEventDetails2 = try _self.QueryInterface();
        return try _ifc.HasNewTetheringOperationalState;
        }
    }
}

// type: Windows.Networking.Connectivity.NetworkTypes
// enum type
public typealias NetworkTypes = _q_CWindows_CNetworking_CConnectivity_CNetworkTypes;

// type: Windows.Networking.Connectivity.NetworkUsage
// runtime class
public class NetworkUsage
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.INetworkUsage;
    public init(plok: Windows.Networking.Connectivity.INetworkUsage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.INetworkUsage { return _self; }
    public func get_BytesSent() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.INetworkUsage = try _self.QueryInterface();
        return try _ifc.get_BytesSent();
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.INetworkUsage = try _self.QueryInterface();
        return try _ifc.get_BytesReceived();
    }
    public func get_ConnectionDuration() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Windows.Networking.Connectivity.INetworkUsage = try _self.QueryInterface();
        return try _ifc.get_ConnectionDuration();
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkUsage = try _self.QueryInterface();
        return try _ifc.BytesReceived;
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkUsage = try _self.QueryInterface();
        return try _ifc.BytesSent;
        }
    }
    public var ConnectionDuration : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Windows.Networking.Connectivity.INetworkUsage = try _self.QueryInterface();
        return try _ifc.ConnectionDuration;
        }
    }
}

// type: Windows.Networking.Connectivity.NetworkUsageStates
// struct type
public typealias NetworkUsageStates = _q_CWindows_CNetworking_CConnectivity_CNetworkUsageStates;

// type: Windows.Networking.Connectivity.ProviderNetworkUsage
// runtime class
public class ProviderNetworkUsage
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IProviderNetworkUsage;
    public init(plok: Windows.Networking.Connectivity.IProviderNetworkUsage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IProviderNetworkUsage { return _self; }
    public func get_BytesSent() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.IProviderNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_BytesSent();
    }
    public func get_BytesReceived() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.Connectivity.IProviderNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_BytesReceived();
    }
    public func get_ProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.IProviderNetworkUsage = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public var BytesReceived : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IProviderNetworkUsage = try _self.QueryInterface();
        return try _ifc.BytesReceived;
        }
    }
    public var BytesSent : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IProviderNetworkUsage = try _self.QueryInterface();
        return try _ifc.BytesSent;
        }
    }
    public var ProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IProviderNetworkUsage = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
}

// type: Windows.Networking.Connectivity.ProxyConfiguration
// runtime class
public class ProxyConfiguration
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IProxyConfiguration;
    public init(plok: Windows.Networking.Connectivity.IProxyConfiguration?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IProxyConfiguration { return _self; }
    public func get_ProxyUris() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        let _ifc : Windows.Networking.Connectivity.IProxyConfiguration = try _self.QueryInterface();
        return try _ifc.get_ProxyUris();
    }
    public func get_CanConnectDirectly() throws -> boolean {
        let _ifc : Windows.Networking.Connectivity.IProxyConfiguration = try _self.QueryInterface();
        return try _ifc.get_CanConnectDirectly();
    }
    public var CanConnectDirectly : boolean {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IProxyConfiguration = try _self.QueryInterface();
        return try _ifc.CanConnectDirectly;
        }
    }
    public var ProxyUris : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CFoundation_CUri> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IProxyConfiguration = try _self.QueryInterface();
        return try _ifc.ProxyUris;
        }
    }
}

// type: Windows.Networking.Connectivity.RoamingStates
// enum type
public typealias RoamingStates = _q_CWindows_CNetworking_CConnectivity_CRoamingStates;

// type: Windows.Networking.Connectivity.RoutePolicy
// runtime class
public class RoutePolicy
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IRoutePolicy;
    public init(plok: Windows.Networking.Connectivity.IRoutePolicy?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IRoutePolicy { return _self; }
    public init(connectionProfile : Optional<Windows.Networking.Connectivity.ConnectionProfile>, hostName : Optional<Windows.Networking.HostName>, type : Windows.Networking.DomainNameType) throws {
        let _af : IRoutePolicyFactory = try RoGetActivationFactory("Windows.Networking.Connectivity.RoutePolicy");
        _self = try _af.CreateRoutePolicy(connectionProfile: connectionProfile!.Interface(), hostName: hostName!.Interface(), type: type)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ConnectionProfile() throws -> Optional<Windows.Networking.Connectivity.ConnectionProfile> {
        let _ifc : Windows.Networking.Connectivity.IRoutePolicy = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.ConnectionProfile(plok: _ifc.get_ConnectionProfile());
    }
    public func get_HostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Connectivity.IRoutePolicy = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_HostName());
    }
    public func get_HostNameType() throws -> Windows.Networking.DomainNameType {
        let _ifc : Windows.Networking.Connectivity.IRoutePolicy = try _self.QueryInterface();
        return try _ifc.get_HostNameType();
    }
    public var ConnectionProfile : Optional<Windows.Networking.Connectivity.ConnectionProfile> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IRoutePolicy = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.ConnectionProfile(plok: _ifc.ConnectionProfile);
        }
    }
    public var HostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IRoutePolicy = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.HostName);
        }
    }
    public var HostNameType : Windows.Networking.DomainNameType {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IRoutePolicy = try _self.QueryInterface();
        return try _ifc.HostNameType;
        }
    }
}

// type: Windows.Networking.Connectivity.TriStates
// enum type
public typealias TriStates = _q_CWindows_CNetworking_CConnectivity_CTriStates;

// type: Windows.Networking.Connectivity.WlanConnectionProfileDetails
// runtime class
public class WlanConnectionProfileDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IWlanConnectionProfileDetails;
    public init(plok: Windows.Networking.Connectivity.IWlanConnectionProfileDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IWlanConnectionProfileDetails { return _self; }
    public func GetConnectedSsid() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.IWlanConnectionProfileDetails = try _self.QueryInterface();
        return try _ifc.GetConnectedSsid();
    }
}

// type: Windows.Networking.Connectivity.WwanConnectionProfileDetails
// runtime class
public class WwanConnectionProfileDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Connectivity.IWwanConnectionProfileDetails;
    public init(plok: Windows.Networking.Connectivity.IWwanConnectionProfileDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Connectivity.IWwanConnectionProfileDetails { return _self; }
    public func get_HomeProviderId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails = try _self.QueryInterface();
        return try _ifc.get_HomeProviderId();
    }
    public func get_AccessPointName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails = try _self.QueryInterface();
        return try _ifc.get_AccessPointName();
    }
    public func GetNetworkRegistrationState() throws -> Windows.Networking.Connectivity.WwanNetworkRegistrationState {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails = try _self.QueryInterface();
        return try _ifc.GetNetworkRegistrationState();
    }
    public func GetCurrentDataClass() throws -> Windows.Networking.Connectivity.WwanDataClass {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails = try _self.QueryInterface();
        return try _ifc.GetCurrentDataClass();
    }
    public var AccessPointName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails = try _self.QueryInterface();
        return try _ifc.AccessPointName;
        }
    }
    public var HomeProviderId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails = try _self.QueryInterface();
        return try _ifc.HomeProviderId;
        }
    }
    public func get_IPKind() throws -> Windows.Networking.Connectivity.WwanNetworkIPKind {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails2 = try _self.QueryInterface();
        return try _ifc.get_IPKind();
    }
    public func get_PurposeGuids() throws -> Optional<ClosedGenerics.IVectorView_1_GUID> {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails2 = try _self.QueryInterface();
        return try _ifc.get_PurposeGuids();
    }
    public var IPKind : Windows.Networking.Connectivity.WwanNetworkIPKind {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails2 = try _self.QueryInterface();
        return try _ifc.IPKind;
        }
    }
    public var PurposeGuids : Optional<ClosedGenerics.IVectorView_1_GUID> {
        get throws {
        let _ifc : Windows.Networking.Connectivity.IWwanConnectionProfileDetails2 = try _self.QueryInterface();
        return try _ifc.PurposeGuids;
        }
    }
}

// type: Windows.Networking.Connectivity.WwanDataClass
// enum type
public typealias WwanDataClass = _q_CWindows_CNetworking_CConnectivity_CWwanDataClass;

// type: Windows.Networking.Connectivity.WwanNetworkIPKind
// enum type
public typealias WwanNetworkIPKind = _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind;

// type: Windows.Networking.Connectivity.WwanNetworkRegistrationState
// enum type
public typealias WwanNetworkRegistrationState = _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState;

}
extension Windows.Networking.Connectivity.CellularApnAuthenticationType {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_None;
        }
    }
    public static var Pap : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_Pap;
        }
    }
    public static var Chap : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_Chap;
        }
    }
    public static var Mschapv2 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CCellularApnAuthenticationType_Mschapv2;
        }
    }
}
extension Windows.Networking.Connectivity.ConnectionProfileDeleteStatus {
    public static var Success : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_Success;
        }
    }
    public static var DeniedByUser : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_DeniedByUser;
        }
    }
    public static var DeniedBySystem : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_DeniedBySystem;
        }
    }
    public static var UnknownError : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_UnknownError;
        }
    }
}
extension Windows.Networking.Connectivity.DataUsageGranularity {
    public static var PerMinute : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerMinute;
        }
    }
    public static var PerHour : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerHour;
        }
    }
    public static var PerDay : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_PerDay;
        }
    }
    public static var Total : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CDataUsageGranularity_Total;
        }
    }
}
extension Windows.Networking.Connectivity.DomainConnectivityLevel {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_None;
        }
    }
    public static var Unauthenticated : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_Unauthenticated;
        }
    }
    public static var Authenticated : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CDomainConnectivityLevel_Authenticated;
        }
    }
}
extension Windows.Networking.Connectivity.NetworkAuthenticationType {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_None;
        }
    }
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Unknown;
        }
    }
    public static var Open80211 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Open80211;
        }
    }
    public static var SharedKey80211 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_SharedKey80211;
        }
    }
    public static var Wpa : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa;
        }
    }
    public static var WpaPsk : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_WpaPsk;
        }
    }
    public static var WpaNone : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_WpaNone;
        }
    }
    public static var Rsna : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Rsna;
        }
    }
    public static var RsnaPsk : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_RsnaPsk;
        }
    }
    public static var Ihv : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Ihv;
        }
    }
    public static var Wpa3 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3;
        }
    }
    public static var Wpa3Enterprise192Bits : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3Enterprise192Bits;
        }
    }
    public static var Wpa3Sae : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3Sae;
        }
    }
    public static var Owe : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Owe;
        }
    }
    public static var Wpa3Enterprise : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkAuthenticationType_Wpa3Enterprise;
        }
    }
}
extension Windows.Networking.Connectivity.NetworkConnectivityLevel {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_None;
        }
    }
    public static var LocalAccess : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_LocalAccess;
        }
    }
    public static var ConstrainedInternetAccess : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_ConstrainedInternetAccess;
        }
    }
    public static var InternetAccess : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkConnectivityLevel_InternetAccess;
        }
    }
}
extension Windows.Networking.Connectivity.NetworkCostType {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unknown;
        }
    }
    public static var Unrestricted : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkCostType_Unrestricted;
        }
    }
    public static var Fixed : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkCostType_Fixed;
        }
    }
    public static var Variable : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkCostType_Variable;
        }
    }
}
extension Windows.Networking.Connectivity.NetworkEncryptionType {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_None;
        }
    }
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Unknown;
        }
    }
    public static var Wep : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep;
        }
    }
    public static var Wep40 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep40;
        }
    }
    public static var Wep104 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Wep104;
        }
    }
    public static var Tkip : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Tkip;
        }
    }
    public static var Ccmp : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Ccmp;
        }
    }
    public static var WpaUseGroup : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_WpaUseGroup;
        }
    }
    public static var RsnUseGroup : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_RsnUseGroup;
        }
    }
    public static var Ihv : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Ihv;
        }
    }
    public static var Gcmp : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Gcmp;
        }
    }
    public static var Gcmp256 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkEncryptionType_Gcmp256;
        }
    }
}
extension Windows.Networking.Connectivity.NetworkTypes {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkTypes_None;
        }
    }
    public static var Internet : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkTypes_Internet;
        }
    }
    public static var PrivateNetwork : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CNetworkTypes_PrivateNetwork;
        }
    }
}
extension Windows.Networking.Connectivity.RoamingStates {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CRoamingStates_None;
        }
    }
    public static var NotRoaming : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CRoamingStates_NotRoaming;
        }
    }
    public static var Roaming : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CRoamingStates_Roaming;
        }
    }
}
extension Windows.Networking.Connectivity.TriStates {
    public static var DoNotCare : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CTriStates_DoNotCare;
        }
    }
    public static var No : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CTriStates_No;
        }
    }
    public static var Yes : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CTriStates_Yes;
        }
    }
}
extension Windows.Networking.Connectivity.WwanDataClass {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_None;
        }
    }
    public static var Gprs : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Gprs;
        }
    }
    public static var Edge : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Edge;
        }
    }
    public static var Umts : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Umts;
        }
    }
    public static var Hsdpa : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Hsdpa;
        }
    }
    public static var Hsupa : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Hsupa;
        }
    }
    public static var LteAdvanced : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_LteAdvanced;
        }
    }
    public static var Cdma1xRtt : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xRtt;
        }
    }
    public static var Cdma1xEvdo : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdo;
        }
    }
    public static var Cdma1xEvdoRevA : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdoRevA;
        }
    }
    public static var Cdma1xEvdv : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdv;
        }
    }
    public static var Cdma3xRtt : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma3xRtt;
        }
    }
    public static var Cdma1xEvdoRevB : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Cdma1xEvdoRevB;
        }
    }
    public static var CdmaUmb : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_CdmaUmb;
        }
    }
    public static var Custom : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanDataClass_Custom;
        }
    }
}
extension Windows.Networking.Connectivity.WwanNetworkIPKind {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_None;
        }
    }
    public static var Ipv4 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4;
        }
    }
    public static var Ipv6 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv6;
        }
    }
    public static var Ipv4v6 : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4v6;
        }
    }
    public static var Ipv4v6v4Xlat : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkIPKind_Ipv4v6v4Xlat;
        }
    }
}
extension Windows.Networking.Connectivity.WwanNetworkRegistrationState {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_None;
        }
    }
    public static var Deregistered : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Deregistered;
        }
    }
    public static var Searching : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Searching;
        }
    }
    public static var Home : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Home;
        }
    }
    public static var Roaming : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Roaming;
        }
    }
    public static var Partner : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Partner;
        }
    }
    public static var Denied : Self {
        get {
            return _q_CWindows_CNetworking_CConnectivity_CWwanNetworkRegistrationState_Denied;
        }
    }
}
