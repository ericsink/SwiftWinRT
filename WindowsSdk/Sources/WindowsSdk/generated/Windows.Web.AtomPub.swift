// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Web.AtomPub {
// type: Windows.Web.AtomPub.AtomPubClient
// runtime class
public class AtomPubClient
    :
    WinRT.Object
{
    private var _self : Windows.Web.AtomPub.IAtomPubClient;
    public init(plok: Windows.Web.AtomPub.IAtomPubClient?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.AtomPub.IAtomPubClient { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.AtomPub.AtomPubClient")
        try super.init(plok: _self.QueryInterface())
    }
    public init(serverCredential : Optional<Windows.Security.Credentials.PasswordCredential>) throws {
        let _af : IAtomPubClientFactory = try RoGetActivationFactory("Windows.Web.AtomPub.AtomPubClient");
        _self = try _af.CreateAtomPubClientWithCredentials(serverCredential: serverCredential!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func RetrieveServiceDocumentAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CAtomPub_CServiceDocument__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.RetrieveServiceDocumentAsync(uri: uri!.Interface());
    }
    public func RetrieveServiceDocument(uri : Optional<Windows.Foundation.Uri>) async throws -> Optional<Windows.Web.AtomPub.ServiceDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Web.AtomPub.ServiceDocument(plok: self.RetrieveServiceDocumentAsync(uri: uri)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RetrieveMediaResourceAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CStorage_CStreams_CIInputStream__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.RetrieveMediaResourceAsync(uri: uri!.Interface());
    }
    public func RetrieveMediaResource(uri : Optional<Windows.Foundation.Uri>) async throws -> Optional<Windows.Storage.Streams.IInputStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RetrieveMediaResourceAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RetrieveResourceAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.RetrieveResourceAsync(uri: uri!.Interface());
    }
    public func RetrieveResource(uri : Optional<Windows.Foundation.Uri>) async throws -> Optional<Windows.Web.Syndication.SyndicationItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Web.Syndication.SyndicationItem(plok: self.RetrieveResourceAsync(uri: uri)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateResourceAsync(uri : Optional<Windows.Foundation.Uri>, description : Swift.String, item : Optional<Windows.Web.Syndication.SyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.CreateResourceAsync(uri: uri!.Interface(), description: description, item: item!.Interface());
    }
    public func CreateResource(uri : Optional<Windows.Foundation.Uri>, description : Swift.String, item : Optional<Windows.Web.Syndication.SyndicationItem>) async throws -> Optional<Windows.Web.Syndication.SyndicationItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Web.Syndication.SyndicationItem(plok: self.CreateResourceAsync(uri: uri, description: description, item: item)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateMediaResourceAsync(uri : Optional<Windows.Foundation.Uri>, mediaType : Swift.String, description : Swift.String, mediaStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.CreateMediaResourceAsync(uri: uri!.Interface(), mediaType: mediaType, description: description, mediaStream: mediaStream);
    }
    public func CreateMediaResource(uri : Optional<Windows.Foundation.Uri>, mediaType : Swift.String, description : Swift.String, mediaStream : Optional<Windows.Storage.Streams.IInputStream>) async throws -> Optional<Windows.Web.Syndication.SyndicationItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Web.Syndication.SyndicationItem(plok: self.CreateMediaResourceAsync(uri: uri, mediaType: mediaType, description: description, mediaStream: mediaStream)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func UpdateMediaResourceAsync(uri : Optional<Windows.Foundation.Uri>, mediaType : Swift.String, mediaStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.UpdateMediaResourceAsync(uri: uri!.Interface(), mediaType: mediaType, mediaStream: mediaStream);
    }
    public func UpdateResourceAsync(uri : Optional<Windows.Foundation.Uri>, item : Optional<Windows.Web.Syndication.SyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.UpdateResourceAsync(uri: uri!.Interface(), item: item!.Interface());
    }
    public func UpdateResourceItemAsync(item : Optional<Windows.Web.Syndication.SyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.UpdateResourceItemAsync(item: item!.Interface());
    }
    public func DeleteResourceAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.DeleteResourceAsync(uri: uri!.Interface());
    }
    public func DeleteResourceItemAsync(item : Optional<Windows.Web.Syndication.SyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.DeleteResourceItemAsync(item: item!.Interface());
    }
    public func CancelAsyncOperations() throws -> Void {
        let _ifc : Windows.Web.AtomPub.IAtomPubClient = try _self.QueryInterface();
        return try _ifc.CancelAsyncOperations();
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ServerCredential());
    }
    public func put_ServerCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_ServerCredential(value: value!.Interface());
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ProxyCredential());
    }
    public func put_ProxyCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_ProxyCredential(value: value!.Interface());
    }
    public func get_MaxResponseBufferSize() throws -> Swift.UInt32 {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.get_MaxResponseBufferSize();
    }
    public func put_MaxResponseBufferSize(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_MaxResponseBufferSize(value: value);
    }
    public func get_Timeout() throws -> Swift.UInt32 {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.get_Timeout();
    }
    public func put_Timeout(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_Timeout(value: value);
    }
    public func get_BypassCacheOnRetrieve() throws -> boolean {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.get_BypassCacheOnRetrieve();
    }
    public func put_BypassCacheOnRetrieve(value : boolean) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.put_BypassCacheOnRetrieve(value: value);
    }
    public func SetRequestHeader(name : Swift.String, value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(name: name, value: value);
    }
    public func RetrieveFeedAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationFeed__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.RetrieveFeedAsync(uri: uri!.Interface());
    }
    public func RetrieveFeed(uri : Optional<Windows.Foundation.Uri>) async throws -> Optional<Windows.Web.Syndication.SyndicationFeed> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Web.Syndication.SyndicationFeed(plok: self.RetrieveFeedAsync(uri: uri)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var BypassCacheOnRetrieve : boolean {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.BypassCacheOnRetrieve;
        }
    }
    public var MaxResponseBufferSize : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.MaxResponseBufferSize;
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ProxyCredential);
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ServerCredential);
        }
    }
    public var Timeout : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationClient = try _self.QueryInterface();
        return try _ifc.Timeout;
        }
    }
}

// type: Windows.Web.AtomPub.IAtomPubClient
// interface type
open class IAtomPubClient
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x35392c38, Data2: 0xcded, Data3 : 0x4d4c, Data4 : (0x96, 0x37, 0x05, 0xf1, 0x5c, 0x1c, 0x94, 0x06)) }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Web.AtomPub.ServiceDocument,Windows.Web.Syndication.RetrievalProgress> RetrieveServiceDocumentAsync(Windows.Foundation.Uri)
    private func _n_RetrieveServiceDocumentAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CAtomPub_CServiceDocument__q_CWindows_CWeb_CSyndication_CRetrievalProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RetrieveServiceDocumentAsync(pThis, uri, __presult))
        }
    }
    public func RetrieveServiceDocumentAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CAtomPub_CServiceDocument__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CAtomPub_CServiceDocument__q_CWindows_CWeb_CSyndication_CRetrievalProgress>> = nil;
        try self._n_RetrieveServiceDocumentAsync(RawPointer(uri), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CAtomPub_CServiceDocument__q_CWindows_CWeb_CSyndication_CRetrievalProgress(consuming: __result);
    }
    public func RetrieveServiceDocument(uri : Optional<Windows.Foundation.IUriRuntimeClass>) async throws -> Optional<Windows.Web.AtomPub.IServiceDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RetrieveServiceDocumentAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Storage.Streams.IInputStream,Windows.Web.Syndication.RetrievalProgress> RetrieveMediaResourceAsync(Windows.Foundation.Uri)
    private func _n_RetrieveMediaResourceAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CStorage_CStreams_CIInputStream__q_CWindows_CWeb_CSyndication_CRetrievalProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RetrieveMediaResourceAsync(pThis, uri, __presult))
        }
    }
    public func RetrieveMediaResourceAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CStorage_CStreams_CIInputStream__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CStorage_CStreams_CIInputStream__q_CWindows_CWeb_CSyndication_CRetrievalProgress>> = nil;
        try self._n_RetrieveMediaResourceAsync(RawPointer(uri), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CStorage_CStreams_CIInputStream__q_CWindows_CWeb_CSyndication_CRetrievalProgress(consuming: __result);
    }
    public func RetrieveMediaResource(uri : Optional<Windows.Foundation.IUriRuntimeClass>) async throws -> Optional<Windows.Storage.Streams.IInputStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RetrieveMediaResourceAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Web.Syndication.SyndicationItem,Windows.Web.Syndication.RetrievalProgress> RetrieveResourceAsync(Windows.Foundation.Uri)
    private func _n_RetrieveResourceAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CRetrievalProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RetrieveResourceAsync(pThis, uri, __presult))
        }
    }
    public func RetrieveResourceAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CRetrievalProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CRetrievalProgress>> = nil;
        try self._n_RetrieveResourceAsync(RawPointer(uri), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CRetrievalProgress(consuming: __result);
    }
    public func RetrieveResource(uri : Optional<Windows.Foundation.IUriRuntimeClass>) async throws -> Optional<Windows.Web.Syndication.ISyndicationItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RetrieveResourceAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Web.Syndication.SyndicationItem,Windows.Web.Syndication.TransferProgress> CreateResourceAsync(Windows.Foundation.Uri, System.String, Windows.Web.Syndication.SyndicationItem)
    private func _n_CreateResourceAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ description : Optional<HSTRING>, _ item : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationItem>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateResourceAsync(pThis, uri, description, item, __presult))
        }
    }
    public func CreateResourceAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, description : Optional<Swift.String>, item : Optional<Windows.Web.Syndication.ISyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let __hstr_description = try HString(description!);
        return try withExtendedLifetime(__hstr_description) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress>> = nil;
        try self._n_CreateResourceAsync(RawPointer(uri), __hstr_description.Raw(), RawPointer(item), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress(consuming: __result);
        }
    }
    public func CreateResource(uri : Optional<Windows.Foundation.IUriRuntimeClass>, description : Optional<Swift.String>, item : Optional<Windows.Web.Syndication.ISyndicationItem>) async throws -> Optional<Windows.Web.Syndication.ISyndicationItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateResourceAsync(uri: uri, description: description, item: item)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<Windows.Web.Syndication.SyndicationItem,Windows.Web.Syndication.TransferProgress> CreateMediaResourceAsync(Windows.Foundation.Uri, System.String, System.String, Windows.Storage.Streams.IInputStream)
    private func _n_CreateMediaResourceAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ mediaType : Optional<HSTRING>, _ description : Optional<HSTRING>, _ mediaStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateMediaResourceAsync(pThis, uri, mediaType, description, mediaStream, __presult))
        }
    }
    public func CreateMediaResourceAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, mediaType : Optional<Swift.String>, description : Optional<Swift.String>, mediaStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let __hstr_mediaType = try HString(mediaType!);
        return try withExtendedLifetime(__hstr_mediaType) {
        let __hstr_description = try HString(description!);
        return try withExtendedLifetime(__hstr_description) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress>> = nil;
        try self._n_CreateMediaResourceAsync(RawPointer(uri), __hstr_mediaType.Raw(), __hstr_description.Raw(), RawPointer(mediaStream), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CWeb_CSyndication_CSyndicationItem__q_CWindows_CWeb_CSyndication_CTransferProgress(consuming: __result);
        }
        }
    }
    public func CreateMediaResource(uri : Optional<Windows.Foundation.IUriRuntimeClass>, mediaType : Optional<Swift.String>, description : Optional<Swift.String>, mediaStream : Optional<Windows.Storage.Streams.IInputStream>) async throws -> Optional<Windows.Web.Syndication.ISyndicationItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateMediaResourceAsync(uri: uri, mediaType: mediaType, description: description, mediaStream: mediaStream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncActionWithProgress<Windows.Web.Syndication.TransferProgress> UpdateMediaResourceAsync(Windows.Foundation.Uri, System.String, Windows.Storage.Streams.IInputStream)
    private func _n_UpdateMediaResourceAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ mediaType : Optional<HSTRING>, _ mediaStream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateMediaResourceAsync(pThis, uri, mediaType, mediaStream, __presult))
        }
    }
    public func UpdateMediaResourceAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, mediaType : Optional<Swift.String>, mediaStream : Optional<Windows.Storage.Streams.IInputStream>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        let __hstr_mediaType = try HString(mediaType!);
        return try withExtendedLifetime(__hstr_mediaType) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>> = nil;
        try self._n_UpdateMediaResourceAsync(RawPointer(uri), __hstr_mediaType.Raw(), RawPointer(mediaStream), &__result);
        return ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress(consuming: __result);
        }
    }
    // Windows.Foundation.IAsyncActionWithProgress<Windows.Web.Syndication.TransferProgress> UpdateResourceAsync(Windows.Foundation.Uri, Windows.Web.Syndication.SyndicationItem)
    private func _n_UpdateResourceAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ item : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationItem>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateResourceAsync(pThis, uri, item, __presult))
        }
    }
    public func UpdateResourceAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>, item : Optional<Windows.Web.Syndication.ISyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>> = nil;
        try self._n_UpdateResourceAsync(RawPointer(uri), RawPointer(item), &__result);
        return ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress(consuming: __result);
    }
    // Windows.Foundation.IAsyncActionWithProgress<Windows.Web.Syndication.TransferProgress> UpdateResourceItemAsync(Windows.Web.Syndication.SyndicationItem)
    private func _n_UpdateResourceItemAsync(_ item : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationItem>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateResourceItemAsync(pThis, item, __presult))
        }
    }
    public func UpdateResourceItemAsync(item : Optional<Windows.Web.Syndication.ISyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>> = nil;
        try self._n_UpdateResourceItemAsync(RawPointer(item), &__result);
        return ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress(consuming: __result);
    }
    // Windows.Foundation.IAsyncActionWithProgress<Windows.Web.Syndication.TransferProgress> DeleteResourceAsync(Windows.Foundation.Uri)
    private func _n_DeleteResourceAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteResourceAsync(pThis, uri, __presult))
        }
    }
    public func DeleteResourceAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>> = nil;
        try self._n_DeleteResourceAsync(RawPointer(uri), &__result);
        return ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress(consuming: __result);
    }
    // Windows.Foundation.IAsyncActionWithProgress<Windows.Web.Syndication.TransferProgress> DeleteResourceItemAsync(Windows.Web.Syndication.SyndicationItem)
    private func _n_DeleteResourceItemAsync(_ item : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationItem>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteResourceItemAsync(pThis, item, __presult))
        }
    }
    public func DeleteResourceItemAsync(item : Optional<Windows.Web.Syndication.ISyndicationItem>) throws -> Optional<ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress>> = nil;
        try self._n_DeleteResourceItemAsync(RawPointer(item), &__result);
        return ClosedGenerics.IAsyncActionWithProgress_1__q_CWindows_CWeb_CSyndication_CTransferProgress(consuming: __result);
    }
    // void CancelAsyncOperations()
    private func _n_CancelAsyncOperations() throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClient.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CancelAsyncOperations(pThis))
        }
    }
    public func CancelAsyncOperations() throws -> Void {
        try self._n_CancelAsyncOperations();
    }
} // IAtomPubClient


// type: Windows.Web.AtomPub.IAtomPubClientFactory
// interface type
// ACTIVATION INTERFACE
open class IAtomPubClientFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x49d55012, Data2: 0x57cb, Data3 : 0x4bde, Data4 : (0xab, 0x9f, 0x26, 0x10, 0xb1, 0x72, 0x77, 0x7b)) }
    // Windows.Web.AtomPub.AtomPubClient CreateAtomPubClientWithCredentials(Windows.Security.Credentials.PasswordCredential)
    private func _n_CreateAtomPubClientWithCredentials(_ serverCredential : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CAtomPub_CIAtomPubClient>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIAtomPubClientFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAtomPubClientWithCredentials(pThis, serverCredential, __presult))
        }
    }
    public func CreateAtomPubClientWithCredentials(serverCredential : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Optional<Windows.Web.AtomPub.IAtomPubClient> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CAtomPub_CIAtomPubClient>> = nil;
        try self._n_CreateAtomPubClientWithCredentials(RawPointer(serverCredential), &__result);
        return Windows.Web.AtomPub.IAtomPubClient(consuming: __result);
    }
} // IAtomPubClientFactory


// type: Windows.Web.AtomPub.IResourceCollection
// interface type
open class IResourceCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7f5fd609, Data2: 0xbc88, Data3 : 0x41d4, Data4 : (0x88, 0xfa, 0x3d, 0xe6, 0x70, 0x4d, 0x42, 0x8e)) }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIResourceCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Title(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_Uri()
    private func _n_get_Uri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIResourceCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, __presult))
        }
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_Uri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Web.Syndication.SyndicationCategory> get_Categories()
    private func _n_get_Categories(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIResourceCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Categories(pThis, __presult))
        }
    }
    public func get_Categories() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory>> = nil;
        try self._n_get_Categories(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<System.String> get_Accepts()
    private func _n_get_Accepts(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIResourceCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Accepts(pThis, __presult))
        }
    }
    public func get_Accepts() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>> = nil;
        try self._n_get_Accepts(&__result);
        return ClosedGenerics.IVectorView_1_HSTRING(consuming: __result);
    }
    public var Accepts : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
            return try get_Accepts();
        }
    }
    public var Categories : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        get throws {
            return try get_Categories();
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Title();
        }
    }
    public var Uri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_Uri();
        }
    }
} // IResourceCollection


// type: Windows.Web.AtomPub.IServiceDocument
// interface type
open class IServiceDocument
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8b7ec771, Data2: 0x2ab3, Data3 : 0x4dbe, Data4 : (0x8b, 0xcc, 0x77, 0x8f, 0x92, 0xb7, 0x5e, 0x51)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Web.AtomPub.Workspace> get_Workspaces()
    private func _n_get_Workspaces(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CAtomPub_CWorkspace>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIServiceDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Workspaces(pThis, __presult))
        }
    }
    public func get_Workspaces() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CWorkspace> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CAtomPub_CWorkspace>> = nil;
        try self._n_get_Workspaces(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CWorkspace(consuming: __result);
    }
    public var Workspaces : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CWorkspace> {
        get throws {
            return try get_Workspaces();
        }
    }
} // IServiceDocument


// type: Windows.Web.AtomPub.IWorkspace
// interface type
open class IWorkspace
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb41da63b, Data2: 0xa4b8, Data3 : 0x4036, Data4 : (0x89, 0xc5, 0x83, 0xc3, 0x12, 0x66, 0xba, 0x49)) }
    // [IsSpecialName] Windows.Web.Syndication.ISyndicationText get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIWorkspace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CSyndication_CISyndicationText>> = nil;
        try self._n_get_Title(&__result);
        return Windows.Web.Syndication.ISyndicationText(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Web.AtomPub.ResourceCollection> get_Collections()
    private func _n_get_Collections(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CAtomPub_CResourceCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CAtomPub_CIWorkspace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Collections(pThis, __presult))
        }
    }
    public func get_Collections() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CResourceCollection> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CAtomPub_CResourceCollection>> = nil;
        try self._n_get_Collections(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CResourceCollection(consuming: __result);
    }
    public var Collections : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CResourceCollection> {
        get throws {
            return try get_Collections();
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
            return try get_Title();
        }
    }
} // IWorkspace


// type: Windows.Web.AtomPub.ResourceCollection
// runtime class
public class ResourceCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.AtomPub.IResourceCollection;
    public init(plok: Windows.Web.AtomPub.IResourceCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.AtomPub.IResourceCollection { return _self; }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func get_Uri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_Uri());
    }
    public func get_Categories() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try _ifc.get_Categories();
    }
    public func get_Accepts() throws -> Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try _ifc.get_Accepts();
    }
    public var Accepts : Optional<ClosedGenerics.IVectorView_1_HSTRING> {
        get throws {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try _ifc.Accepts;
        }
    }
    public var Categories : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CSyndication_CSyndicationCategory> {
        get throws {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try _ifc.Categories;
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
    public var Uri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.AtomPub.IResourceCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.Uri);
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.AtomPub.ServiceDocument
// runtime class
public class ServiceDocument
    :
    WinRT.Object
{
    private var _self : Windows.Web.AtomPub.IServiceDocument;
    public init(plok: Windows.Web.AtomPub.IServiceDocument?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.AtomPub.IServiceDocument { return _self; }
    public func get_Workspaces() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CWorkspace> {
        let _ifc : Windows.Web.AtomPub.IServiceDocument = try _self.QueryInterface();
        return try _ifc.get_Workspaces();
    }
    public var Workspaces : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CWorkspace> {
        get throws {
        let _ifc : Windows.Web.AtomPub.IServiceDocument = try _self.QueryInterface();
        return try _ifc.Workspaces;
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

// type: Windows.Web.AtomPub.Workspace
// runtime class
public class Workspace
    :
    WinRT.Object
{
    private var _self : Windows.Web.AtomPub.IWorkspace;
    public init(plok: Windows.Web.AtomPub.IWorkspace?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.AtomPub.IWorkspace { return _self; }
    public func get_Title() throws -> Optional<Windows.Web.Syndication.ISyndicationText> {
        let _ifc : Windows.Web.AtomPub.IWorkspace = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func get_Collections() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CResourceCollection> {
        let _ifc : Windows.Web.AtomPub.IWorkspace = try _self.QueryInterface();
        return try _ifc.get_Collections();
    }
    public var Collections : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CAtomPub_CResourceCollection> {
        get throws {
        let _ifc : Windows.Web.AtomPub.IWorkspace = try _self.QueryInterface();
        return try _ifc.Collections;
        }
    }
    public var Title : Optional<Windows.Web.Syndication.ISyndicationText> {
        get throws {
        let _ifc : Windows.Web.AtomPub.IWorkspace = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
    public func get_NodeName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeName();
    }
    public func put_NodeName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeName(value: value);
    }
    public func get_NodeNamespace() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeNamespace();
    }
    public func put_NodeNamespace(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeNamespace(value: value);
    }
    public func get_NodeValue() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_NodeValue();
    }
    public func put_NodeValue(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_NodeValue(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func put_BaseUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.put_BaseUri(value: value!.Interface());
    }
    public func get_AttributeExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_AttributeExtensions();
    }
    public func get_ElementExtensions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.get_ElementExtensions();
    }
    public func GetXmlDocument(format : Windows.Web.Syndication.SyndicationFormat) throws -> Optional<Windows.Data.Xml.Dom.XmlDocument> {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Data.Xml.Dom.XmlDocument(plok: _ifc.GetXmlDocument(format: format));
    }
    public var AttributeExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CSyndicationAttribute> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.AttributeExtensions;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var ElementExtensions : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CSyndication_CISyndicationNode> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.ElementExtensions;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var NodeName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeName;
        }
    }
    public var NodeNamespace : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeNamespace;
        }
    }
    public var NodeValue : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Syndication.ISyndicationNode = try _self.QueryInterface();
        return try _ifc.NodeValue;
        }
    }
}

}
