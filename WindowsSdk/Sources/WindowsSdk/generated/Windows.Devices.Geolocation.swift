// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Devices.Geolocation {
// type: Windows.Devices.Geolocation.AltitudeReferenceSystem
// enum type
public typealias AltitudeReferenceSystem = _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem;

// type: Windows.Devices.Geolocation.BasicGeoposition
// struct type
public typealias BasicGeoposition = _q_CWindows_CDevices_CGeolocation_CBasicGeoposition;

// type: Windows.Devices.Geolocation.Geolocator
// runtime class
public class Geolocator
    :
    WinRT.Object
{
    private var _self : Windows.Devices.Geolocation.IGeolocator;
    public init(plok: Windows.Devices.Geolocation.IGeolocator?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Devices.Geolocation.IGeolocator { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Devices.Geolocation.Geolocator")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Windows.Devices.Geolocation.IGeolocatorStatics
    // static interface not needed: Windows.Devices.Geolocation.IGeolocatorStatics2
    // method not needed: get_DesiredAccuracy
    // method not needed: put_DesiredAccuracy
    // method not needed: get_MovementThreshold
    // method not needed: put_MovementThreshold
    // method not needed: get_ReportInterval
    // method not needed: put_ReportInterval
    // method not needed: get_LocationStatus
    // method not needed: GetGeopositionAsync
    // method not needed: GetGeopositionAsync
    // method not needed: add_PositionChanged
    // method not needed: remove_PositionChanged
    // method not needed: add_StatusChanged
    // method not needed: remove_StatusChanged
    // instance interface not needed: Windows.Devices.Geolocation.IGeolocatorWithScalarAccuracy
    // instance interface not needed: Windows.Devices.Geolocation.IGeolocator2
}

// type: Windows.Devices.Geolocation.Geopoint
// runtime class
public class Geopoint
    :
    WinRT.Object
{
    private var _self : Windows.Devices.Geolocation.IGeopoint;
    public init(plok: Windows.Devices.Geolocation.IGeopoint?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Devices.Geolocation.IGeopoint { return _self; }
    public init(position : Windows.Devices.Geolocation.BasicGeoposition) throws {
        let _af : IGeopointFactory = try RoGetActivationFactory("Windows.Devices.Geolocation.Geopoint");
        _self = try _af.Create(position: position)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(position : Windows.Devices.Geolocation.BasicGeoposition, altitudeReferenceSystem : Windows.Devices.Geolocation.AltitudeReferenceSystem) throws {
        let _af : IGeopointFactory = try RoGetActivationFactory("Windows.Devices.Geolocation.Geopoint");
        _self = try _af.CreateWithAltitudeReferenceSystem(position: position, altitudeReferenceSystem: altitudeReferenceSystem)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(position : Windows.Devices.Geolocation.BasicGeoposition, altitudeReferenceSystem : Windows.Devices.Geolocation.AltitudeReferenceSystem, spatialReferenceId : Swift.UInt32) throws {
        let _af : IGeopointFactory = try RoGetActivationFactory("Windows.Devices.Geolocation.Geopoint");
        _self = try _af.CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position: position, altitudeReferenceSystem: altitudeReferenceSystem, spatialReferenceId: spatialReferenceId)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Position
    // instance interface not needed: Windows.Devices.Geolocation.IGeoshape
}

// type: Windows.Devices.Geolocation.IGeolocator
// interface type
open class IGeolocator
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa9c3bf62, Data2: 0x4524, Data3 : 0x4989, Data4 : (0x8a, 0xa9, 0xde, 0x01, 0x9d, 0x2e, 0x55, 0x1f)) }
// method not needed: get_DesiredAccuracy
// method not needed: put_DesiredAccuracy
// method not needed: get_MovementThreshold
// method not needed: put_MovementThreshold
// method not needed: get_ReportInterval
// method not needed: put_ReportInterval
// method not needed: get_LocationStatus
// method not needed: GetGeopositionAsync
// method not needed: GetGeopositionAsyncWithAgeAndTimeout
// method not needed: add_PositionChanged
// method not needed: remove_PositionChanged
// method not needed: add_StatusChanged
// method not needed: remove_StatusChanged
} // IGeolocator


// type: Windows.Devices.Geolocation.IGeopoint
// interface type
open class IGeopoint
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6bfa00eb, Data2: 0xe56e, Data3 : 0x49bb, Data4 : (0x9c, 0xaf, 0xcb, 0xaa, 0x78, 0xa8, 0xbc, 0xef)) }
// method not needed: get_Position
} // IGeopoint


// type: Windows.Devices.Geolocation.IGeopointFactory
// interface type
// ACTIVATION INTERFACE
open class IGeopointFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdb6b8d33, Data2: 0x76bd, Data3 : 0x4e30, Data4 : (0x8a, 0xf7, 0xa8, 0x44, 0xdc, 0x37, 0xb7, 0xa0)) }
    // Windows.Devices.Geolocation.Geopoint Create(Windows.Devices.Geolocation.BasicGeoposition)
    private func _n_Create(_ position : _q_CWindows_CDevices_CGeolocation_CBasicGeoposition, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CGeolocation_CIGeopoint>>>?) throws {
        return try perform(as: _q_CWindows_CDevices_CGeolocation_CIGeopointFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, position, __presult))
        }
    }
    public func Create(position : Windows.Devices.Geolocation.BasicGeoposition) throws -> Optional<Windows.Devices.Geolocation.IGeopoint> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CGeolocation_CIGeopoint>> = nil;
        try self._n_Create(position, &__result);
        return Windows.Devices.Geolocation.IGeopoint(consuming: __result);
    }
    // Windows.Devices.Geolocation.Geopoint CreateWithAltitudeReferenceSystem(Windows.Devices.Geolocation.BasicGeoposition, Windows.Devices.Geolocation.AltitudeReferenceSystem)
    private func _n_CreateWithAltitudeReferenceSystem(_ position : _q_CWindows_CDevices_CGeolocation_CBasicGeoposition, _ altitudeReferenceSystem : _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CGeolocation_CIGeopoint>>>?) throws {
        return try perform(as: _q_CWindows_CDevices_CGeolocation_CIGeopointFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithAltitudeReferenceSystem(pThis, position, altitudeReferenceSystem, __presult))
        }
    }
    public func CreateWithAltitudeReferenceSystem(position : Windows.Devices.Geolocation.BasicGeoposition, altitudeReferenceSystem : Windows.Devices.Geolocation.AltitudeReferenceSystem) throws -> Optional<Windows.Devices.Geolocation.IGeopoint> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CGeolocation_CIGeopoint>> = nil;
        try self._n_CreateWithAltitudeReferenceSystem(position, altitudeReferenceSystem, &__result);
        return Windows.Devices.Geolocation.IGeopoint(consuming: __result);
    }
    // Windows.Devices.Geolocation.Geopoint CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows.Devices.Geolocation.BasicGeoposition, Windows.Devices.Geolocation.AltitudeReferenceSystem, System.UInt32)
    private func _n_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(_ position : _q_CWindows_CDevices_CGeolocation_CBasicGeoposition, _ altitudeReferenceSystem : _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem, _ spatialReferenceId : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CGeolocation_CIGeopoint>>>?) throws {
        return try perform(as: _q_CWindows_CDevices_CGeolocation_CIGeopointFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithAltitudeReferenceSystemAndSpatialReferenceId(pThis, position, altitudeReferenceSystem, spatialReferenceId, __presult))
        }
    }
    public func CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position : Windows.Devices.Geolocation.BasicGeoposition, altitudeReferenceSystem : Windows.Devices.Geolocation.AltitudeReferenceSystem, spatialReferenceId : Swift.UInt32) throws -> Optional<Windows.Devices.Geolocation.IGeopoint> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CDevices_CGeolocation_CIGeopoint>> = nil;
        try self._n_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, altitudeReferenceSystem, spatialReferenceId, &__result);
        return Windows.Devices.Geolocation.IGeopoint(consuming: __result);
    }
} // IGeopointFactory


}
extension Windows.Devices.Geolocation.AltitudeReferenceSystem {
    public static var Unspecified : Self {
        get {
            return _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Unspecified;
        }
    }
    public static var Terrain : Self {
        get {
            return _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Terrain;
        }
    }
    public static var Ellipsoid : Self {
        get {
            return _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Ellipsoid;
        }
    }
    public static var Geoid : Self {
        get {
            return _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Geoid;
        }
    }
    public static var Surface : Self {
        get {
            return _q_CWindows_CDevices_CGeolocation_CAltitudeReferenceSystem_Surface;
        }
    }
}
