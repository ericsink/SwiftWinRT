// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Storage.Search {
// type: Windows.Storage.Search.CommonFileQuery
// enum type
public typealias CommonFileQuery = _q_CWindows_CStorage_CSearch_CCommonFileQuery;

// type: Windows.Storage.Search.CommonFolderQuery
// enum type
public typealias CommonFolderQuery = _q_CWindows_CStorage_CSearch_CCommonFolderQuery;

// type: Windows.Storage.Search.ContentIndexer
// runtime class
public class ContentIndexer
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IContentIndexer;
    public init(plok: Windows.Storage.Search.IContentIndexer?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IContentIndexer { return _self; }
    private struct _IContentIndexerStatics {
        static var x : IContentIndexerStatics =
            try! RoGetActivationFactory("Windows.Storage.Search.ContentIndexer")
    }
    public static var ContentIndexerStatics : IContentIndexerStatics {
        _IContentIndexerStatics.x
    }
    public static func GetIndexer(indexName : Swift.String) throws -> Optional<Windows.Storage.Search.ContentIndexer> {
        return try Windows.Storage.Search.ContentIndexer(plok: ContentIndexerStatics.GetIndexerWithName(indexName: indexName));
    }
    public static func GetIndexer() throws -> Optional<Windows.Storage.Search.ContentIndexer> {
        return try Windows.Storage.Search.ContentIndexer(plok: ContentIndexerStatics.GetIndexer());
    }
    public func AddAsync(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.AddAsync(indexableContent: indexableContent);
    }
    public func Add(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AddAsync(indexableContent: indexableContent)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func UpdateAsync(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.UpdateAsync(indexableContent: indexableContent);
    }
    public func Update(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpdateAsync(indexableContent: indexableContent)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteAsync(contentId : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.DeleteAsync(contentId: contentId);
    }
    public func Delete(contentId : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync(contentId: contentId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteMultipleAsync(contentIds : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.DeleteMultipleAsync(contentIds: contentIds);
    }
    public func DeleteMultiple(contentIds : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteMultipleAsync(contentIds: contentIds)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteAllAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.DeleteAllAsync();
    }
    public func DeleteAll() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAllAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RetrievePropertiesAsync(contentId : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.RetrievePropertiesAsync(contentId: contentId, propertiesToRetrieve: propertiesToRetrieve);
    }
    public func RetrieveProperties(contentId : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_IInspectable> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RetrievePropertiesAsync(contentId: contentId, propertiesToRetrieve: propertiesToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Revision() throws -> Swift.UInt64 {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.get_Revision();
    }
    public var Revision : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Storage.Search.IContentIndexer = try _self.QueryInterface();
        return try _ifc.Revision;
        }
    }
    public func CreateQuery(searchFilter : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>, sortOrder : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CSearch_CSortEntry>, searchFilterLanguage : Swift.String) throws -> Optional<Windows.Storage.Search.ContentIndexerQuery> {
        let _ifc : Windows.Storage.Search.IContentIndexerQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.ContentIndexerQuery(plok: _ifc.CreateQueryWithSortOrderAndLanguage(searchFilter: searchFilter, propertiesToRetrieve: propertiesToRetrieve, sortOrder: sortOrder, searchFilterLanguage: searchFilterLanguage));
    }
    public func CreateQuery(searchFilter : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>, sortOrder : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CSearch_CSortEntry>) throws -> Optional<Windows.Storage.Search.ContentIndexerQuery> {
        let _ifc : Windows.Storage.Search.IContentIndexerQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.ContentIndexerQuery(plok: _ifc.CreateQueryWithSortOrder(searchFilter: searchFilter, propertiesToRetrieve: propertiesToRetrieve, sortOrder: sortOrder));
    }
    public func CreateQuery(searchFilter : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<Windows.Storage.Search.ContentIndexerQuery> {
        let _ifc : Windows.Storage.Search.IContentIndexerQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.ContentIndexerQuery(plok: _ifc.CreateQuery(searchFilter: searchFilter, propertiesToRetrieve: propertiesToRetrieve));
    }
}

// type: Windows.Storage.Search.ContentIndexerQuery
// runtime class
public class ContentIndexerQuery
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IContentIndexerQuery;
    public init(plok: Windows.Storage.Search.IContentIndexerQuery?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IContentIndexerQuery { return _self; }
    public func GetCountAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        let _ifc : Windows.Storage.Search.IContentIndexerQuery = try _self.QueryInterface();
        return try _ifc.GetCountAsync();
    }
    public func GetCount() async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCountAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetPropertiesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        let _ifc : Windows.Storage.Search.IContentIndexerQuery = try _self.QueryInterface();
        return try _ifc.GetPropertiesAsync();
    }
    public func GetProperties() async throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetPropertiesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetPropertiesAsync(startIndex : Swift.UInt32, maxItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        let _ifc : Windows.Storage.Search.IContentIndexerQuery = try _self.QueryInterface();
        return try _ifc.GetPropertiesRangeAsync(startIndex: startIndex, maxItems: maxItems);
    }
    public func GetProperties(startIndex : Swift.UInt32, maxItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetPropertiesAsync(startIndex: startIndex, maxItems: maxItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        let _ifc : Windows.Storage.Search.IContentIndexerQuery = try _self.QueryInterface();
        return try _ifc.GetAsync();
    }
    public func Get() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetAsync(startIndex : Swift.UInt32, maxItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        let _ifc : Windows.Storage.Search.IContentIndexerQuery = try _self.QueryInterface();
        return try _ifc.GetRangeAsync(startIndex: startIndex, maxItems: maxItems);
    }
    public func Get(startIndex : Swift.UInt32, maxItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetAsync(startIndex: startIndex, maxItems: maxItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_QueryFolder() throws -> Optional<Windows.Storage.StorageFolder> {
        let _ifc : Windows.Storage.Search.IContentIndexerQuery = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.get_QueryFolder());
    }
    public var QueryFolder : Optional<Windows.Storage.StorageFolder> {
        get throws {
        let _ifc : Windows.Storage.Search.IContentIndexerQuery = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.QueryFolder);
        }
    }
}

// type: Windows.Storage.Search.DateStackOption
// enum type
public typealias DateStackOption = _q_CWindows_CStorage_CSearch_CDateStackOption;

// type: Windows.Storage.Search.FolderDepth
// enum type
public typealias FolderDepth = _q_CWindows_CStorage_CSearch_CFolderDepth;

// type: Windows.Storage.Search.IContentIndexer
// interface type
open class IContentIndexer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb1767f8d, Data2: 0xf698, Data3 : 0x4982, Data4 : (0xb0, 0x5f, 0x3a, 0x6e, 0x8c, 0xab, 0x01, 0xa2)) }
    // Windows.Foundation.IAsyncAction AddAsync(Windows.Storage.Search.IIndexableContent)
    private func _n_AddAsync(_ indexableContent : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIIndexableContent>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddAsync(pThis, indexableContent, __presult))
        }
    }
    public func AddAsync(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_AddAsync(RawPointer(indexableContent), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Add(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.AddAsync(indexableContent: indexableContent)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction UpdateAsync(Windows.Storage.Search.IIndexableContent)
    private func _n_UpdateAsync(_ indexableContent : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIIndexableContent>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateAsync(pThis, indexableContent, __presult))
        }
    }
    public func UpdateAsync(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_UpdateAsync(RawPointer(indexableContent), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Update(indexableContent : Optional<Windows.Storage.Search.IIndexableContent>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpdateAsync(indexableContent: indexableContent)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction DeleteAsync(System.String)
    private func _n_DeleteAsync(_ contentId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteAsync(pThis, contentId, __presult))
        }
    }
    public func DeleteAsync(contentId : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_contentId = try HString(contentId);
        return try withExtendedLifetime(__hstr_contentId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_DeleteAsync(__hstr_contentId.Raw(), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func Delete(contentId : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync(contentId: contentId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction DeleteMultipleAsync(Windows.Foundation.Collections.IIterable<System.String>)
    private func _n_DeleteMultipleAsync(_ contentIds : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteMultipleAsync(pThis, contentIds, __presult))
        }
    }
    public func DeleteMultipleAsync(contentIds : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_DeleteMultipleAsync(RawPointer(contentIds), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func DeleteMultiple(contentIds : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteMultipleAsync(contentIds: contentIds)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction DeleteAllAsync()
    private func _n_DeleteAllAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteAllAsync(pThis, __presult))
        }
    }
    public func DeleteAllAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_DeleteAllAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func DeleteAll() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAllAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IMapView<System.String,System.Object>> RetrievePropertiesAsync(System.String, Windows.Foundation.Collections.IIterable<System.String>)
    private func _n_RetrievePropertiesAsync(_ contentId : Optional<HSTRING>, _ propertiesToRetrieve : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RetrievePropertiesAsync(pThis, contentId, propertiesToRetrieve, __presult))
        }
    }
    public func RetrievePropertiesAsync(contentId : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        let __hstr_contentId = try HString(contentId);
        return try withExtendedLifetime(__hstr_contentId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable>> = nil;
        try self._n_RetrievePropertiesAsync(__hstr_contentId.Raw(), RawPointer(propertiesToRetrieve), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable(consuming: __result);
        }
    }
    public func RetrieveProperties(contentId : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_IInspectable> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RetrievePropertiesAsync(contentId: contentId, propertiesToRetrieve: propertiesToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] System.UInt64 get_Revision()
    private func _n_get_Revision(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Revision(pThis, __presult))
        }
    }
    public func get_Revision() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_Revision(&__result);
        return __result;
    }
    public var Revision : Swift.UInt64 {
        get throws {
            return try get_Revision();
        }
    }
} // IContentIndexer


// type: Windows.Storage.Search.IContentIndexerQuery
// interface type
open class IContentIndexerQuery
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x70e3b0f8, Data2: 0x4bfc, Data3 : 0x428a, Data4 : (0x88, 0x89, 0xcc, 0x51, 0xda, 0x9a, 0x7b, 0x9d)) }
    // Windows.Foundation.IAsyncOperation<System.UInt32> GetCountAsync()
    private func _n_GetCountAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCountAsync(pThis, __presult))
        }
    }
    public func GetCountAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_UINT32>> = nil;
        try self._n_GetCountAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1_UINT32(consuming: __result);
    }
    public func GetCount() async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetCountAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IMapView<System.String,System.Object>>> GetPropertiesAsync()
    private func _n_GetPropertiesAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertiesAsync(pThis, __presult))
        }
    }
    public func GetPropertiesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable>> = nil;
        try self._n_GetPropertiesAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable(consuming: __result);
    }
    public func GetProperties() async throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetPropertiesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IMapView<System.String,System.Object>>> GetPropertiesAsync(System.UInt32, System.UInt32)
    private func _n_GetPropertiesRangeAsync(_ startIndex : UINT32, _ maxItems : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertiesRangeAsync(pThis, startIndex, maxItems, __presult))
        }
    }
    public func GetPropertiesRangeAsync(startIndex : Swift.UInt32, maxItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable>> = nil;
        try self._n_GetPropertiesRangeAsync(startIndex, maxItems, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable(consuming: __result);
    }
    public func GetPropertiesRange(startIndex : Swift.UInt32, maxItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_IInspectable> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetPropertiesRangeAsync(startIndex: startIndex, maxItems: maxItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.Search.IIndexableContent>> GetAsync()
    private func _n_GetAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAsync(pThis, __presult))
        }
    }
    public func GetAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent>> = nil;
        try self._n_GetAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent(consuming: __result);
    }
    public func Get() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.Search.IIndexableContent>> GetAsync(System.UInt32, System.UInt32)
    private func _n_GetRangeAsync(_ startIndex : UINT32, _ maxItems : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRangeAsync(pThis, startIndex, maxItems, __presult))
        }
    }
    public func GetRangeAsync(startIndex : Swift.UInt32, maxItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent>> = nil;
        try self._n_GetRangeAsync(startIndex, maxItems, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent(consuming: __result);
    }
    public func GetRange(startIndex : Swift.UInt32, maxItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CSearch_CIIndexableContent> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetRangeAsync(startIndex: startIndex, maxItems: maxItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Storage.StorageFolder get_QueryFolder()
    private func _n_get_QueryFolder(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQuery.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_QueryFolder(pThis, __presult))
        }
    }
    public func get_QueryFolder() throws -> Optional<Windows.Storage.IStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>> = nil;
        try self._n_get_QueryFolder(&__result);
        return Windows.Storage.IStorageFolder(consuming: __result);
    }
    public var QueryFolder : Optional<Windows.Storage.IStorageFolder> {
        get throws {
            return try get_QueryFolder();
        }
    }
} // IContentIndexerQuery


// type: Windows.Storage.Search.IContentIndexerQueryOperations
// interface type
open class IContentIndexerQueryOperations
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x28823e10, Data2: 0x4786, Data3 : 0x42f1, Data4 : (0x97, 0x30, 0x79, 0x2b, 0x35, 0x66, 0xb1, 0x50)) }
    // Windows.Storage.Search.ContentIndexerQuery CreateQuery(System.String, Windows.Foundation.Collections.IIterable<System.String>, Windows.Foundation.Collections.IIterable<Windows.Storage.Search.SortEntry>, System.String)
    private func _n_CreateQueryWithSortOrderAndLanguage(_ searchFilter : Optional<HSTRING>, _ propertiesToRetrieve : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ sortOrder : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CStorage_CSearch_CSortEntry>>, _ searchFilterLanguage : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexerQuery>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateQueryWithSortOrderAndLanguage(pThis, searchFilter, propertiesToRetrieve, sortOrder, searchFilterLanguage, __presult))
        }
    }
    public func CreateQueryWithSortOrderAndLanguage(searchFilter : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>, sortOrder : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CSearch_CSortEntry>, searchFilterLanguage : Swift.String) throws -> Optional<Windows.Storage.Search.IContentIndexerQuery> {
        let __hstr_searchFilter = try HString(searchFilter);
        return try withExtendedLifetime(__hstr_searchFilter) {
        let __hstr_searchFilterLanguage = try HString(searchFilterLanguage);
        return try withExtendedLifetime(__hstr_searchFilterLanguage) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexerQuery>> = nil;
        try self._n_CreateQueryWithSortOrderAndLanguage(__hstr_searchFilter.Raw(), RawPointer(propertiesToRetrieve), RawPointer(sortOrder), __hstr_searchFilterLanguage.Raw(), &__result);
        return Windows.Storage.Search.IContentIndexerQuery(consuming: __result);
        }
        }
    }
    // Windows.Storage.Search.ContentIndexerQuery CreateQuery(System.String, Windows.Foundation.Collections.IIterable<System.String>, Windows.Foundation.Collections.IIterable<Windows.Storage.Search.SortEntry>)
    private func _n_CreateQueryWithSortOrder(_ searchFilter : Optional<HSTRING>, _ propertiesToRetrieve : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ sortOrder : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CStorage_CSearch_CSortEntry>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexerQuery>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateQueryWithSortOrder(pThis, searchFilter, propertiesToRetrieve, sortOrder, __presult))
        }
    }
    public func CreateQueryWithSortOrder(searchFilter : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>, sortOrder : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CSearch_CSortEntry>) throws -> Optional<Windows.Storage.Search.IContentIndexerQuery> {
        let __hstr_searchFilter = try HString(searchFilter);
        return try withExtendedLifetime(__hstr_searchFilter) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexerQuery>> = nil;
        try self._n_CreateQueryWithSortOrder(__hstr_searchFilter.Raw(), RawPointer(propertiesToRetrieve), RawPointer(sortOrder), &__result);
        return Windows.Storage.Search.IContentIndexerQuery(consuming: __result);
        }
    }
    // Windows.Storage.Search.ContentIndexerQuery CreateQuery(System.String, Windows.Foundation.Collections.IIterable<System.String>)
    private func _n_CreateQuery(_ searchFilter : Optional<HSTRING>, _ propertiesToRetrieve : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexerQuery>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateQuery(pThis, searchFilter, propertiesToRetrieve, __presult))
        }
    }
    public func CreateQuery(searchFilter : Swift.String, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<Windows.Storage.Search.IContentIndexerQuery> {
        let __hstr_searchFilter = try HString(searchFilter);
        return try withExtendedLifetime(__hstr_searchFilter) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexerQuery>> = nil;
        try self._n_CreateQuery(__hstr_searchFilter.Raw(), RawPointer(propertiesToRetrieve), &__result);
        return Windows.Storage.Search.IContentIndexerQuery(consuming: __result);
        }
    }
} // IContentIndexerQueryOperations


// type: Windows.Storage.Search.IContentIndexerStatics
// interface type
open class IContentIndexerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8c488375, Data2: 0xb37e, Data3 : 0x4c60, Data4 : (0x9b, 0xa8, 0xb7, 0x60, 0xfd, 0xa3, 0xe5, 0x9d)) }
    // Windows.Storage.Search.ContentIndexer GetIndexer(System.String)
    private func _n_GetIndexerWithName(_ indexName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexer>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIndexerWithName(pThis, indexName, __presult))
        }
    }
    public func GetIndexerWithName(indexName : Swift.String) throws -> Optional<Windows.Storage.Search.IContentIndexer> {
        let __hstr_indexName = try HString(indexName);
        return try withExtendedLifetime(__hstr_indexName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexer>> = nil;
        try self._n_GetIndexerWithName(__hstr_indexName.Raw(), &__result);
        return Windows.Storage.Search.IContentIndexer(consuming: __result);
        }
    }
    // Windows.Storage.Search.ContentIndexer GetIndexer()
    private func _n_GetIndexer(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexer>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIContentIndexerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIndexer(pThis, __presult))
        }
    }
    public func GetIndexer() throws -> Optional<Windows.Storage.Search.IContentIndexer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIContentIndexer>> = nil;
        try self._n_GetIndexer(&__result);
        return Windows.Storage.Search.IContentIndexer(consuming: __result);
    }
} // IContentIndexerStatics


// type: Windows.Storage.Search.IIndexableContent
// interface type
open class IIndexableContent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xccf1a05f, Data2: 0xd4b5, Data3 : 0x483a, Data4 : (0xb0, 0x6e, 0xe0, 0xdb, 0x1e, 0xc4, 0x20, 0xe4)) }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIIndexableContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Id(System.String)
    private func _n_put_Id(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIIndexableContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
        }
    }
    public func put_Id(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Id(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IMap<System.String,System.Object> get_Properties()
    private func _n_get_Properties(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING_IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIIndexableContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, __presult))
        }
    }
    public func get_Properties() throws -> Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING_IInspectable>> = nil;
        try self._n_get_Properties(&__result);
        return ClosedGenerics.IMap_2_HSTRING_IInspectable(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IRandomAccessStream get_Stream()
    private func _n_get_Stream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIIndexableContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stream(pThis, __presult))
        }
    }
    public func get_Stream() throws -> Optional<Windows.Storage.Streams.IRandomAccessStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>> = nil;
        try self._n_get_Stream(&__result);
        return Windows.Storage.Streams.IRandomAccessStream(consuming: __result);
    }
    // [IsSpecialName] void put_Stream(Windows.Storage.Streams.IRandomAccessStream)
    private func _n_put_Stream(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIIndexableContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Stream(pThis, value))
        }
    }
    public func put_Stream(value : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Void {
        try self._n_put_Stream(RawPointer(value));
    }
    // [IsSpecialName] System.String get_StreamContentType()
    private func _n_get_StreamContentType(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIIndexableContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StreamContentType(pThis, __presult))
        }
    }
    public func get_StreamContentType() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_StreamContentType(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_StreamContentType(System.String)
    private func _n_put_StreamContentType(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIIndexableContent.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_StreamContentType(pThis, value))
        }
    }
    public func put_StreamContentType(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_StreamContentType(__hstr_value.Raw());
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var Properties : Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        get throws {
            return try get_Properties();
        }
    }
    public var Stream : Optional<Windows.Storage.Streams.IRandomAccessStream> {
        get throws {
            return try get_Stream();
        }
    }
    public var StreamContentType : Swift.String {
        get throws {
            return try get_StreamContentType();
        }
    }
} // IIndexableContent


// type: Windows.Storage.Search.IQueryOptions
// interface type
open class IQueryOptions
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1e5e46ee, Data2: 0x0f45, Data3 : 0x4838, Data4 : (0xa8, 0xe9, 0xd0, 0x47, 0x9d, 0x44, 0x6c, 0x30)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_FileTypeFilter()
    private func _n_get_FileTypeFilter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileTypeFilter(pThis, __presult))
        }
    }
    public func get_FileTypeFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_FileTypeFilter(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Search.FolderDepth get_FolderDepth()
    private func _n_get_FolderDepth(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CFolderDepth>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FolderDepth(pThis, __presult))
        }
    }
    public func get_FolderDepth() throws -> Windows.Storage.Search.FolderDepth {
        var __result : _q_CWindows_CStorage_CSearch_CFolderDepth = _q_CWindows_CStorage_CSearch_CFolderDepth_Shallow;
        try self._n_get_FolderDepth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FolderDepth(Windows.Storage.Search.FolderDepth)
    private func _n_put_FolderDepth(_ value : _q_CWindows_CStorage_CSearch_CFolderDepth) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FolderDepth(pThis, value))
        }
    }
    public func put_FolderDepth(value : Windows.Storage.Search.FolderDepth) throws -> Void {
        try self._n_put_FolderDepth(value);
    }
    // [IsSpecialName] System.String get_ApplicationSearchFilter()
    private func _n_get_ApplicationSearchFilter(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ApplicationSearchFilter(pThis, __presult))
        }
    }
    public func get_ApplicationSearchFilter() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ApplicationSearchFilter(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_ApplicationSearchFilter(System.String)
    private func _n_put_ApplicationSearchFilter(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ApplicationSearchFilter(pThis, value))
        }
    }
    public func put_ApplicationSearchFilter(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_ApplicationSearchFilter(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_UserSearchFilter()
    private func _n_get_UserSearchFilter(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserSearchFilter(pThis, __presult))
        }
    }
    public func get_UserSearchFilter() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_UserSearchFilter(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_UserSearchFilter(System.String)
    private func _n_put_UserSearchFilter(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserSearchFilter(pThis, value))
        }
    }
    public func put_UserSearchFilter(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_UserSearchFilter(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Language()
    private func _n_get_Language(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, __presult))
        }
    }
    public func get_Language() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Language(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Language(System.String)
    private func _n_put_Language(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, value))
        }
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Language(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Search.IndexerOption get_IndexerOption()
    private func _n_get_IndexerOption(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIndexerOption>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IndexerOption(pThis, __presult))
        }
    }
    public func get_IndexerOption() throws -> Windows.Storage.Search.IndexerOption {
        var __result : _q_CWindows_CStorage_CSearch_CIndexerOption = _q_CWindows_CStorage_CSearch_CIndexerOption_UseIndexerWhenAvailable;
        try self._n_get_IndexerOption(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IndexerOption(Windows.Storage.Search.IndexerOption)
    private func _n_put_IndexerOption(_ value : _q_CWindows_CStorage_CSearch_CIndexerOption) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IndexerOption(pThis, value))
        }
    }
    public func put_IndexerOption(value : Windows.Storage.Search.IndexerOption) throws -> Void {
        try self._n_put_IndexerOption(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Storage.Search.SortEntry> get_SortOrder()
    private func _n_get_SortOrder(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CStorage_CSearch_CSortEntry>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SortOrder(pThis, __presult))
        }
    }
    public func get_SortOrder() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CStorage_CSearch_CSortEntry>> = nil;
        try self._n_get_SortOrder(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry(consuming: __result);
    }
    // [IsSpecialName] System.String get_GroupPropertyName()
    private func _n_get_GroupPropertyName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GroupPropertyName(pThis, __presult))
        }
    }
    public func get_GroupPropertyName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_GroupPropertyName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Storage.Search.DateStackOption get_DateStackOption()
    private func _n_get_DateStackOption(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CDateStackOption>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DateStackOption(pThis, __presult))
        }
    }
    public func get_DateStackOption() throws -> Windows.Storage.Search.DateStackOption {
        var __result : _q_CWindows_CStorage_CSearch_CDateStackOption = _q_CWindows_CStorage_CSearch_CDateStackOption_None;
        try self._n_get_DateStackOption(&__result);
        return __result;
    }
    // System.String SaveToString()
    private func _n_SaveToString(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SaveToString(pThis, __presult))
        }
    }
    public func SaveToString() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_SaveToString(&__result);
        return Swift.String(from: __result);
    }
    // void LoadFromString(System.String)
    private func _n_LoadFromString(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromString(pThis, value))
        }
    }
    public func LoadFromString(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_LoadFromString(__hstr_value.Raw());
        }
    }
    // void SetThumbnailPrefetch(Windows.Storage.FileProperties.ThumbnailMode, System.UInt32, Windows.Storage.FileProperties.ThumbnailOptions)
    private func _n_SetThumbnailPrefetch(_ mode : _q_CWindows_CStorage_CFileProperties_CThumbnailMode, _ requestedSize : UINT32, _ options : _q_CWindows_CStorage_CFileProperties_CThumbnailOptions) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetThumbnailPrefetch(pThis, mode, requestedSize, options))
        }
    }
    public func SetThumbnailPrefetch(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32, options : Windows.Storage.FileProperties.ThumbnailOptions) throws -> Void {
        try self._n_SetThumbnailPrefetch(mode, requestedSize, options);
    }
    // void SetPropertyPrefetch(Windows.Storage.FileProperties.PropertyPrefetchOptions, Windows.Foundation.Collections.IIterable<System.String>)
    private func _n_SetPropertyPrefetch(_ options : _q_CWindows_CStorage_CFileProperties_CPropertyPrefetchOptions, _ propertiesToRetrieve : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertyPrefetch(pThis, options, propertiesToRetrieve))
        }
    }
    public func SetPropertyPrefetch(options : Windows.Storage.FileProperties.PropertyPrefetchOptions, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Void {
        try self._n_SetPropertyPrefetch(options, RawPointer(propertiesToRetrieve));
    }
    public var ApplicationSearchFilter : Swift.String {
        get throws {
            return try get_ApplicationSearchFilter();
        }
    }
    public var DateStackOption : Windows.Storage.Search.DateStackOption {
        get throws {
            return try get_DateStackOption();
        }
    }
    public var FileTypeFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_FileTypeFilter();
        }
    }
    public var FolderDepth : Windows.Storage.Search.FolderDepth {
        get throws {
            return try get_FolderDepth();
        }
    }
    public var GroupPropertyName : Swift.String {
        get throws {
            return try get_GroupPropertyName();
        }
    }
    public var IndexerOption : Windows.Storage.Search.IndexerOption {
        get throws {
            return try get_IndexerOption();
        }
    }
    public var Language : Swift.String {
        get throws {
            return try get_Language();
        }
    }
    public var SortOrder : Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry> {
        get throws {
            return try get_SortOrder();
        }
    }
    public var UserSearchFilter : Swift.String {
        get throws {
            return try get_UserSearchFilter();
        }
    }
} // IQueryOptions


// type: Windows.Storage.Search.IQueryOptionsFactory
// interface type
// ACTIVATION INTERFACE
open class IQueryOptionsFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x032e1f8c, Data2: 0xa9c1, Data3 : 0x4e71, Data4 : (0x80, 0x11, 0x0d, 0xee, 0x9d, 0x48, 0x11, 0xa3)) }
    // Windows.Storage.Search.QueryOptions CreateCommonFileQuery(Windows.Storage.Search.CommonFileQuery, Windows.Foundation.Collections.IIterable<System.String>)
    private func _n_CreateCommonFileQuery(_ query : _q_CWindows_CStorage_CSearch_CCommonFileQuery, _ fileTypeFilter : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1_HSTRING>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptionsFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCommonFileQuery(pThis, query, fileTypeFilter, __presult))
        }
    }
    public func CreateCommonFileQuery(query : Windows.Storage.Search.CommonFileQuery, fileTypeFilter : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<Windows.Storage.Search.IQueryOptions> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>> = nil;
        try self._n_CreateCommonFileQuery(query, RawPointer(fileTypeFilter), &__result);
        return Windows.Storage.Search.IQueryOptions(consuming: __result);
    }
    // Windows.Storage.Search.QueryOptions CreateCommonFolderQuery(Windows.Storage.Search.CommonFolderQuery)
    private func _n_CreateCommonFolderQuery(_ query : _q_CWindows_CStorage_CSearch_CCommonFolderQuery, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptionsFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCommonFolderQuery(pThis, query, __presult))
        }
    }
    public func CreateCommonFolderQuery(query : Windows.Storage.Search.CommonFolderQuery) throws -> Optional<Windows.Storage.Search.IQueryOptions> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>> = nil;
        try self._n_CreateCommonFolderQuery(query, &__result);
        return Windows.Storage.Search.IQueryOptions(consuming: __result);
    }
} // IQueryOptionsFactory


// type: Windows.Storage.Search.IQueryOptionsWithProviderFilter
// interface type
open class IQueryOptionsWithProviderFilter
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5b9d1026, Data2: 0x15c4, Data3 : 0x44dd, Data4 : (0xb8, 0x9a, 0x47, 0xa5, 0x9b, 0x7d, 0x7c, 0x4f)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_StorageProviderIdFilter()
    private func _n_get_StorageProviderIdFilter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIQueryOptionsWithProviderFilter.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StorageProviderIdFilter(pThis, __presult))
        }
    }
    public func get_StorageProviderIdFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_StorageProviderIdFilter(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    public var StorageProviderIdFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_StorageProviderIdFilter();
        }
    }
} // IQueryOptionsWithProviderFilter


// type: Windows.Storage.Search.IStorageFileQueryResult
// interface type
open class IStorageFileQueryResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x52fda447, Data2: 0x2baa, Data3 : 0x412c, Data4 : (0xb2, 0x9f, 0xd4, 0xb1, 0x77, 0x8e, 0xfa, 0x1e)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>> GetFilesAsync(System.UInt32, System.UInt32)
    private func _n_GetFilesAsync(_ startIndex : UINT32, _ maxNumberOfItems : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFileQueryResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsync(pThis, startIndex, maxNumberOfItems, __presult))
        }
    }
    public func GetFilesAsync(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_GetFilesAsync(startIndex, maxNumberOfItems, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func GetFiles(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>> GetFilesAsync()
    private func _n_GetFilesAsyncDefaultStartAndCount(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFileQueryResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsyncDefaultStartAndCount(pThis, __presult))
        }
    }
    public func GetFilesAsyncDefaultStartAndCount() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_GetFilesAsyncDefaultStartAndCount(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func GetFilesAsyncDefaultStartAndCount() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsyncDefaultStartAndCount()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IStorageFileQueryResult


// type: Windows.Storage.Search.IStorageFileQueryResult2
// interface type
open class IStorageFileQueryResult2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4e5db9dd, Data2: 0x7141, Data3 : 0x46c4, Data4 : (0x8b, 0xe3, 0xe9, 0xdc, 0x9e, 0x27, 0x27, 0x5c)) }
    // Windows.Foundation.Collections.IMap<System.String,Windows.Foundation.Collections.IVectorView<Windows.Data.Text.TextSegment>> GetMatchingPropertiesWithRanges(Windows.Storage.StorageFile)
    private func _n_GetMatchingPropertiesWithRanges(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFileQueryResult2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMatchingPropertiesWithRanges(pThis, file, __presult))
        }
    }
    public func GetMatchingPropertiesWithRanges(file : Optional<Windows.Storage.IStorageFile>) throws -> Optional<ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment>> = nil;
        try self._n_GetMatchingPropertiesWithRanges(RawPointer(file), &__result);
        return ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment(consuming: __result);
    }
} // IStorageFileQueryResult2


// type: Windows.Storage.Search.IStorageFolderQueryOperations
// interface type
open class IStorageFolderQueryOperations
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcb43ccc9, Data2: 0x446b, Data3 : 0x4a4f, Data4 : (0xbe, 0x97, 0x75, 0x77, 0x71, 0xbe, 0x52, 0x03)) }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.Search.IndexedState> GetIndexedStateAsync()
    private func _n_GetIndexedStateAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CSearch_CIndexedState>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIndexedStateAsync(pThis, __presult))
        }
    }
    public func GetIndexedStateAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CSearch_CIndexedState> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CSearch_CIndexedState>> = nil;
        try self._n_GetIndexedStateAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CSearch_CIndexedState(consuming: __result);
    }
    public func GetIndexedState() async throws -> Windows.Storage.Search.IndexedState {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetIndexedStateAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Storage.Search.StorageFileQueryResult CreateFileQuery()
    private func _n_CreateFileQueryOverloadDefault(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFileQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileQueryOverloadDefault(pThis, __presult))
        }
    }
    public func CreateFileQueryOverloadDefault() throws -> Optional<Windows.Storage.Search.IStorageFileQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFileQueryResult>> = nil;
        try self._n_CreateFileQueryOverloadDefault(&__result);
        return Windows.Storage.Search.IStorageFileQueryResult(consuming: __result);
    }
    // Windows.Storage.Search.StorageFileQueryResult CreateFileQuery(Windows.Storage.Search.CommonFileQuery)
    private func _n_CreateFileQuery(_ query : _q_CWindows_CStorage_CSearch_CCommonFileQuery, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFileQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileQuery(pThis, query, __presult))
        }
    }
    public func CreateFileQuery(query : Windows.Storage.Search.CommonFileQuery) throws -> Optional<Windows.Storage.Search.IStorageFileQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFileQueryResult>> = nil;
        try self._n_CreateFileQuery(query, &__result);
        return Windows.Storage.Search.IStorageFileQueryResult(consuming: __result);
    }
    // Windows.Storage.Search.StorageFileQueryResult CreateFileQueryWithOptions(Windows.Storage.Search.QueryOptions)
    private func _n_CreateFileQueryWithOptions(_ queryOptions : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFileQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFileQueryWithOptions(pThis, queryOptions, __presult))
        }
    }
    public func CreateFileQueryWithOptions(queryOptions : Optional<Windows.Storage.Search.IQueryOptions>) throws -> Optional<Windows.Storage.Search.IStorageFileQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFileQueryResult>> = nil;
        try self._n_CreateFileQueryWithOptions(RawPointer(queryOptions), &__result);
        return Windows.Storage.Search.IStorageFileQueryResult(consuming: __result);
    }
    // Windows.Storage.Search.StorageFolderQueryResult CreateFolderQuery()
    private func _n_CreateFolderQueryOverloadDefault(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderQueryOverloadDefault(pThis, __presult))
        }
    }
    public func CreateFolderQueryOverloadDefault() throws -> Optional<Windows.Storage.Search.IStorageFolderQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>> = nil;
        try self._n_CreateFolderQueryOverloadDefault(&__result);
        return Windows.Storage.Search.IStorageFolderQueryResult(consuming: __result);
    }
    // Windows.Storage.Search.StorageFolderQueryResult CreateFolderQuery(Windows.Storage.Search.CommonFolderQuery)
    private func _n_CreateFolderQuery(_ query : _q_CWindows_CStorage_CSearch_CCommonFolderQuery, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderQuery(pThis, query, __presult))
        }
    }
    public func CreateFolderQuery(query : Windows.Storage.Search.CommonFolderQuery) throws -> Optional<Windows.Storage.Search.IStorageFolderQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>> = nil;
        try self._n_CreateFolderQuery(query, &__result);
        return Windows.Storage.Search.IStorageFolderQueryResult(consuming: __result);
    }
    // Windows.Storage.Search.StorageFolderQueryResult CreateFolderQueryWithOptions(Windows.Storage.Search.QueryOptions)
    private func _n_CreateFolderQueryWithOptions(_ queryOptions : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFolderQueryWithOptions(pThis, queryOptions, __presult))
        }
    }
    public func CreateFolderQueryWithOptions(queryOptions : Optional<Windows.Storage.Search.IQueryOptions>) throws -> Optional<Windows.Storage.Search.IStorageFolderQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult>> = nil;
        try self._n_CreateFolderQueryWithOptions(RawPointer(queryOptions), &__result);
        return Windows.Storage.Search.IStorageFolderQueryResult(consuming: __result);
    }
    // Windows.Storage.Search.StorageItemQueryResult CreateItemQuery()
    private func _n_CreateItemQuery(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageItemQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateItemQuery(pThis, __presult))
        }
    }
    public func CreateItemQuery() throws -> Optional<Windows.Storage.Search.IStorageItemQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageItemQueryResult>> = nil;
        try self._n_CreateItemQuery(&__result);
        return Windows.Storage.Search.IStorageItemQueryResult(consuming: __result);
    }
    // Windows.Storage.Search.StorageItemQueryResult CreateItemQueryWithOptions(Windows.Storage.Search.QueryOptions)
    private func _n_CreateItemQueryWithOptions(_ queryOptions : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageItemQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateItemQueryWithOptions(pThis, queryOptions, __presult))
        }
    }
    public func CreateItemQueryWithOptions(queryOptions : Optional<Windows.Storage.Search.IQueryOptions>) throws -> Optional<Windows.Storage.Search.IStorageItemQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageItemQueryResult>> = nil;
        try self._n_CreateItemQueryWithOptions(RawPointer(queryOptions), &__result);
        return Windows.Storage.Search.IStorageItemQueryResult(consuming: __result);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>> GetFilesAsync(Windows.Storage.Search.CommonFileQuery, System.UInt32, System.UInt32)
    private func _n_GetFilesAsync(_ query : _q_CWindows_CStorage_CSearch_CCommonFileQuery, _ startIndex : UINT32, _ maxItemsToRetrieve : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsync(pThis, query, startIndex, maxItemsToRetrieve, __presult))
        }
    }
    public func GetFilesAsync(query : Windows.Storage.Search.CommonFileQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_GetFilesAsync(query, startIndex, maxItemsToRetrieve, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func GetFiles(query : Windows.Storage.Search.CommonFileQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync(query: query, startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFile>> GetFilesAsync(Windows.Storage.Search.CommonFileQuery)
    private func _n_GetFilesAsyncOverloadDefaultStartAndCount(_ query : _q_CWindows_CStorage_CSearch_CCommonFileQuery, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsyncOverloadDefaultStartAndCount(pThis, query, __presult))
        }
    }
    public func GetFilesAsyncOverloadDefaultStartAndCount(query : Windows.Storage.Search.CommonFileQuery) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile>> = nil;
        try self._n_GetFilesAsyncOverloadDefaultStartAndCount(query, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile(consuming: __result);
    }
    public func GetFilesAsyncOverloadDefaultStartAndCount(query : Windows.Storage.Search.CommonFileQuery) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsyncOverloadDefaultStartAndCount(query: query)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>> GetFoldersAsync(Windows.Storage.Search.CommonFolderQuery, System.UInt32, System.UInt32)
    private func _n_GetFoldersAsync(_ query : _q_CWindows_CStorage_CSearch_CCommonFolderQuery, _ startIndex : UINT32, _ maxItemsToRetrieve : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsync(pThis, query, startIndex, maxItemsToRetrieve, __presult))
        }
    }
    public func GetFoldersAsync(query : Windows.Storage.Search.CommonFolderQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>> = nil;
        try self._n_GetFoldersAsync(query, startIndex, maxItemsToRetrieve, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder(consuming: __result);
    }
    public func GetFolders(query : Windows.Storage.Search.CommonFolderQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync(query: query, startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>> GetFoldersAsync(Windows.Storage.Search.CommonFolderQuery)
    private func _n_GetFoldersAsyncOverloadDefaultStartAndCount(_ query : _q_CWindows_CStorage_CSearch_CCommonFolderQuery, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsyncOverloadDefaultStartAndCount(pThis, query, __presult))
        }
    }
    public func GetFoldersAsyncOverloadDefaultStartAndCount(query : Windows.Storage.Search.CommonFolderQuery) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>> = nil;
        try self._n_GetFoldersAsyncOverloadDefaultStartAndCount(query, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder(consuming: __result);
    }
    public func GetFoldersAsyncOverloadDefaultStartAndCount(query : Windows.Storage.Search.CommonFolderQuery) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsyncOverloadDefaultStartAndCount(query: query)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>> GetItemsAsync(System.UInt32, System.UInt32)
    private func _n_GetItemsAsync(_ startIndex : UINT32, _ maxItemsToRetrieve : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsync(pThis, startIndex, maxItemsToRetrieve, __presult))
        }
    }
    public func GetItemsAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem>> = nil;
        try self._n_GetItemsAsync(startIndex, maxItemsToRetrieve, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem(consuming: __result);
    }
    public func GetItems(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // bool AreQueryOptionsSupported(Windows.Storage.Search.QueryOptions)
    private func _n_AreQueryOptionsSupported(_ queryOptions : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AreQueryOptionsSupported(pThis, queryOptions, __presult))
        }
    }
    public func AreQueryOptionsSupported(queryOptions : Optional<Windows.Storage.Search.IQueryOptions>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_AreQueryOptionsSupported(RawPointer(queryOptions), &__result);
        return __result;
    }
    // bool IsCommonFolderQuerySupported(Windows.Storage.Search.CommonFolderQuery)
    private func _n_IsCommonFolderQuerySupported(_ query : _q_CWindows_CStorage_CSearch_CCommonFolderQuery, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsCommonFolderQuerySupported(pThis, query, __presult))
        }
    }
    public func IsCommonFolderQuerySupported(query : Windows.Storage.Search.CommonFolderQuery) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsCommonFolderQuerySupported(query, &__result);
        return __result;
    }
    // bool IsCommonFileQuerySupported(Windows.Storage.Search.CommonFileQuery)
    private func _n_IsCommonFileQuerySupported(_ query : _q_CWindows_CStorage_CSearch_CCommonFileQuery, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryOperations.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsCommonFileQuerySupported(pThis, query, __presult))
        }
    }
    public func IsCommonFileQuerySupported(query : Windows.Storage.Search.CommonFileQuery) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsCommonFileQuerySupported(query, &__result);
        return __result;
    }
} // IStorageFolderQueryOperations


// type: Windows.Storage.Search.IStorageFolderQueryResult
// interface type
open class IStorageFolderQueryResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6654c911, Data2: 0x7d66, Data3 : 0x46fa, Data4 : (0xae, 0xcf, 0xe4, 0xa4, 0xba, 0xa9, 0x3a, 0xb8)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>> GetFoldersAsync(System.UInt32, System.UInt32)
    private func _n_GetFoldersAsync(_ startIndex : UINT32, _ maxNumberOfItems : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsync(pThis, startIndex, maxNumberOfItems, __presult))
        }
    }
    public func GetFoldersAsync(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>> = nil;
        try self._n_GetFoldersAsync(startIndex, maxNumberOfItems, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder(consuming: __result);
    }
    public func GetFolders(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.StorageFolder>> GetFoldersAsync()
    private func _n_GetFoldersAsyncDefaultStartAndCount(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageFolderQueryResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsyncDefaultStartAndCount(pThis, __presult))
        }
    }
    public func GetFoldersAsyncDefaultStartAndCount() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder>> = nil;
        try self._n_GetFoldersAsyncDefaultStartAndCount(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder(consuming: __result);
    }
    public func GetFoldersAsyncDefaultStartAndCount() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsyncDefaultStartAndCount()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IStorageFolderQueryResult


// type: Windows.Storage.Search.IStorageItemQueryResult
// interface type
open class IStorageItemQueryResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe8948079, Data2: 0x9d58, Data3 : 0x47b8, Data4 : (0xb2, 0xb2, 0x41, 0xb0, 0x7f, 0x47, 0x95, 0xf9)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>> GetItemsAsync(System.UInt32, System.UInt32)
    private func _n_GetItemsAsync(_ startIndex : UINT32, _ maxNumberOfItems : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageItemQueryResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsync(pThis, startIndex, maxNumberOfItems, __presult))
        }
    }
    public func GetItemsAsync(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem>> = nil;
        try self._n_GetItemsAsync(startIndex, maxNumberOfItems, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem(consuming: __result);
    }
    public func GetItems(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.IStorageItem>> GetItemsAsync()
    private func _n_GetItemsAsyncDefaultStartAndCount(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageItemQueryResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsyncDefaultStartAndCount(pThis, __presult))
        }
    }
    public func GetItemsAsyncDefaultStartAndCount() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem>> = nil;
        try self._n_GetItemsAsyncDefaultStartAndCount(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem(consuming: __result);
    }
    public func GetItemsAsyncDefaultStartAndCount() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsyncDefaultStartAndCount()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IStorageItemQueryResult


// type: Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails
// interface type
open class IStorageLibraryChangeTrackerTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1dc7a369, Data2: 0xb7a3, Data3 : 0x4df2, Data4 : (0x9d, 0x61, 0xeb, 0xa8, 0x5a, 0x03, 0x43, 0xd2)) }
    // [IsSpecialName] Windows.Storage.StorageFolder get_Folder()
    private func _n_get_Folder(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageLibraryChangeTrackerTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Folder(pThis, __presult))
        }
    }
    public func get_Folder() throws -> Optional<Windows.Storage.IStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>> = nil;
        try self._n_get_Folder(&__result);
        return Windows.Storage.IStorageFolder(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.StorageLibraryChangeTracker get_ChangeTracker()
    private func _n_get_ChangeTracker(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageLibraryChangeTracker>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageLibraryChangeTrackerTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChangeTracker(pThis, __presult))
        }
    }
    public func get_ChangeTracker() throws -> Optional<Windows.Storage.IStorageLibraryChangeTracker> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageLibraryChangeTracker>> = nil;
        try self._n_get_ChangeTracker(&__result);
        return Windows.Storage.IStorageLibraryChangeTracker(consuming: __result);
    }
    public var ChangeTracker : Optional<Windows.Storage.IStorageLibraryChangeTracker> {
        get throws {
            return try get_ChangeTracker();
        }
    }
    public var Folder : Optional<Windows.Storage.IStorageFolder> {
        get throws {
            return try get_Folder();
        }
    }
} // IStorageLibraryChangeTrackerTriggerDetails


// type: Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails
// interface type
open class IStorageLibraryContentChangedTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2a371977, Data2: 0xabbf, Data3 : 0x4e1d, Data4 : (0x8a, 0xa5, 0x63, 0x85, 0xd8, 0x88, 0x47, 0x99)) }
    // [IsSpecialName] Windows.Storage.StorageFolder get_Folder()
    private func _n_get_Folder(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageLibraryContentChangedTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Folder(pThis, __presult))
        }
    }
    public func get_Folder() throws -> Optional<Windows.Storage.IStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>> = nil;
        try self._n_get_Folder(&__result);
        return Windows.Storage.IStorageFolder(consuming: __result);
    }
    // Windows.Storage.Search.StorageItemQueryResult CreateModifiedSinceQuery(Windows.Foundation.DateTime)
    private func _n_CreateModifiedSinceQuery(_ lastQueryTime : _q_CWindows_CFoundation_CDateTime, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageItemQueryResult>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageLibraryContentChangedTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateModifiedSinceQuery(pThis, lastQueryTime, __presult))
        }
    }
    public func CreateModifiedSinceQuery(lastQueryTime : Windows.Foundation.DateTime) throws -> Optional<Windows.Storage.Search.IStorageItemQueryResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageItemQueryResult>> = nil;
        try self._n_CreateModifiedSinceQuery(lastQueryTime, &__result);
        return Windows.Storage.Search.IStorageItemQueryResult(consuming: __result);
    }
    public var Folder : Optional<Windows.Storage.IStorageFolder> {
        get throws {
            return try get_Folder();
        }
    }
} // IStorageLibraryContentChangedTriggerDetails


// type: Windows.Storage.Search.IStorageQueryResultBase
// interface type
open class IStorageQueryResultBase
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc297d70d, Data2: 0x7353, Data3 : 0x47ab, Data4 : (0xba, 0x58, 0x8c, 0x61, 0x42, 0x5d, 0xc5, 0x4b)) }
    // Windows.Foundation.IAsyncOperation<System.UInt32> GetItemCountAsync()
    private func _n_GetItemCountAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemCountAsync(pThis, __presult))
        }
    }
    public func GetItemCountAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_UINT32>> = nil;
        try self._n_GetItemCountAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1_UINT32(consuming: __result);
    }
    public func GetItemCount() async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemCountAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Storage.StorageFolder get_Folder()
    private func _n_get_Folder(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Folder(pThis, __presult))
        }
    }
    public func get_Folder() throws -> Optional<Windows.Storage.IStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>> = nil;
        try self._n_get_Folder(&__result);
        return Windows.Storage.IStorageFolder(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ContentsChanged(Windows.Foundation.TypedEventHandler<Windows.Storage.Search.IStorageQueryResultBase,System.Object>)
    private func _n_add_ContentsChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContentsChanged(pThis, handler, __presult))
        }
    }
    public func add_ContentsChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ContentsChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ContentsChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ContentsChanged(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContentsChanged(pThis, eventCookie))
        }
    }
    public func remove_ContentsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ContentsChanged(eventCookie);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_OptionsChanged(Windows.Foundation.TypedEventHandler<Windows.Storage.Search.IStorageQueryResultBase,System.Object>)
    private func _n_add_OptionsChanged(_ changedHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_OptionsChanged(pThis, changedHandler, __presult))
        }
    }
    public func add_OptionsChanged(changedHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_OptionsChanged(RawPointer(changedHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_OptionsChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_OptionsChanged(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_OptionsChanged(pThis, eventCookie))
        }
    }
    public func remove_OptionsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_OptionsChanged(eventCookie);
    }
    // Windows.Foundation.IAsyncOperation<System.UInt32> FindStartIndexAsync(System.Object)
    private func _n_FindStartIndexAsync(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FindStartIndexAsync(pThis, value, __presult))
        }
    }
    public func FindStartIndexAsync(value : Optional<WinRT.IInspectable>) throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_UINT32>> = nil;
        try self._n_FindStartIndexAsync(RawPointer(value), &__result);
        return ClosedGenerics.IAsyncOperation_1_UINT32(consuming: __result);
    }
    public func FindStartIndex(value : Optional<WinRT.IInspectable>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.FindStartIndexAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Storage.Search.QueryOptions GetCurrentQueryOptions()
    private func _n_GetCurrentQueryOptions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentQueryOptions(pThis, __presult))
        }
    }
    public func GetCurrentQueryOptions() throws -> Optional<Windows.Storage.Search.IQueryOptions> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>> = nil;
        try self._n_GetCurrentQueryOptions(&__result);
        return Windows.Storage.Search.IQueryOptions(consuming: __result);
    }
    // void ApplyNewQueryOptions(Windows.Storage.Search.QueryOptions)
    private func _n_ApplyNewQueryOptions(_ newQueryOptions : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIQueryOptions>>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIStorageQueryResultBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyNewQueryOptions(pThis, newQueryOptions))
        }
    }
    public func ApplyNewQueryOptions(newQueryOptions : Optional<Windows.Storage.Search.IQueryOptions>) throws -> Void {
        try self._n_ApplyNewQueryOptions(RawPointer(newQueryOptions));
    }
    public var Folder : Optional<Windows.Storage.IStorageFolder> {
        get throws {
            return try get_Folder();
        }
    }
} // IStorageQueryResultBase


// type: Windows.Storage.Search.IValueAndLanguage
// interface type
open class IValueAndLanguage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb9914881, Data2: 0xa1ee, Data3 : 0x4bc4, Data4 : (0x92, 0xa5, 0x46, 0x69, 0x68, 0xe3, 0x04, 0x36)) }
    // [IsSpecialName] System.String get_Language()
    private func _n_get_Language(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIValueAndLanguage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, __presult))
        }
    }
    public func get_Language() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Language(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Language(System.String)
    private func _n_put_Language(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIValueAndLanguage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, value))
        }
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Language(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.Object get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIValueAndLanguage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_Value(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_Value(System.Object)
    private func _n_put_Value(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CStorage_CSearch_CIValueAndLanguage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
        }
    }
    public func put_Value(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_Value(RawPointer(value));
    }
    public var Language : Swift.String {
        get throws {
            return try get_Language();
        }
    }
    public var Value : Optional<WinRT.IInspectable> {
        get throws {
            return try get_Value();
        }
    }
} // IValueAndLanguage


// type: Windows.Storage.Search.IndexableContent
// runtime class
public class IndexableContent
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IIndexableContent;
    public init(plok: Windows.Storage.Search.IIndexableContent?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IIndexableContent { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Search.IndexableContent")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func put_Id(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.put_Id(value: value);
    }
    public func get_Properties() throws -> Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.get_Properties();
    }
    public func get_Stream() throws -> Optional<Windows.Storage.Streams.IRandomAccessStream> {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.get_Stream();
    }
    public func put_Stream(value : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Void {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.put_Stream(value: value);
    }
    public func get_StreamContentType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.get_StreamContentType();
    }
    public func put_StreamContentType(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.put_StreamContentType(value: value);
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var Properties : Optional<ClosedGenerics.IMap_2_HSTRING_IInspectable> {
        get throws {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.Properties;
        }
    }
    public var Stream : Optional<Windows.Storage.Streams.IRandomAccessStream> {
        get throws {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.Stream;
        }
    }
    public var StreamContentType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Search.IIndexableContent = try _self.QueryInterface();
        return try _ifc.StreamContentType;
        }
    }
}

// type: Windows.Storage.Search.IndexedState
// enum type
public typealias IndexedState = _q_CWindows_CStorage_CSearch_CIndexedState;

// type: Windows.Storage.Search.IndexerOption
// enum type
public typealias IndexerOption = _q_CWindows_CStorage_CSearch_CIndexerOption;

// type: Windows.Storage.Search.QueryOptions
// runtime class
public class QueryOptions
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IQueryOptions;
    public init(plok: Windows.Storage.Search.IQueryOptions?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IQueryOptions { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Search.QueryOptions")
        try super.init(plok: _self.QueryInterface())
    }
    public init(query : Windows.Storage.Search.CommonFileQuery, fileTypeFilter : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws {
        let _af : IQueryOptionsFactory = try RoGetActivationFactory("Windows.Storage.Search.QueryOptions");
        _self = try _af.CreateCommonFileQuery(query: query, fileTypeFilter: fileTypeFilter)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(query : Windows.Storage.Search.CommonFolderQuery) throws {
        let _af : IQueryOptionsFactory = try RoGetActivationFactory("Windows.Storage.Search.QueryOptions");
        _self = try _af.CreateCommonFolderQuery(query: query)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_FileTypeFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_FileTypeFilter();
    }
    public func get_FolderDepth() throws -> Windows.Storage.Search.FolderDepth {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_FolderDepth();
    }
    public func put_FolderDepth(value : Windows.Storage.Search.FolderDepth) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.put_FolderDepth(value: value);
    }
    public func get_ApplicationSearchFilter() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_ApplicationSearchFilter();
    }
    public func put_ApplicationSearchFilter(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.put_ApplicationSearchFilter(value: value);
    }
    public func get_UserSearchFilter() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_UserSearchFilter();
    }
    public func put_UserSearchFilter(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.put_UserSearchFilter(value: value);
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_IndexerOption() throws -> Windows.Storage.Search.IndexerOption {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_IndexerOption();
    }
    public func put_IndexerOption(value : Windows.Storage.Search.IndexerOption) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.put_IndexerOption(value: value);
    }
    public func get_SortOrder() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry> {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_SortOrder();
    }
    public func get_GroupPropertyName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_GroupPropertyName();
    }
    public func get_DateStackOption() throws -> Windows.Storage.Search.DateStackOption {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.get_DateStackOption();
    }
    public func SaveToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.SaveToString();
    }
    public func LoadFromString(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.LoadFromString(value: value);
    }
    public func SetThumbnailPrefetch(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32, options : Windows.Storage.FileProperties.ThumbnailOptions) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.SetThumbnailPrefetch(mode: mode, requestedSize: requestedSize, options: options);
    }
    public func SetPropertyPrefetch(options : Windows.Storage.FileProperties.PropertyPrefetchOptions, propertiesToRetrieve : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Void {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.SetPropertyPrefetch(options: options, propertiesToRetrieve: propertiesToRetrieve);
    }
    public var ApplicationSearchFilter : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.ApplicationSearchFilter;
        }
    }
    public var DateStackOption : Windows.Storage.Search.DateStackOption {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.DateStackOption;
        }
    }
    public var FileTypeFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.FileTypeFilter;
        }
    }
    public var FolderDepth : Windows.Storage.Search.FolderDepth {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.FolderDepth;
        }
    }
    public var GroupPropertyName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.GroupPropertyName;
        }
    }
    public var IndexerOption : Windows.Storage.Search.IndexerOption {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.IndexerOption;
        }
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var SortOrder : Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry> {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.SortOrder;
        }
    }
    public var UserSearchFilter : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptions = try _self.QueryInterface();
        return try _ifc.UserSearchFilter;
        }
    }
    public func get_StorageProviderIdFilter() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Storage.Search.IQueryOptionsWithProviderFilter = try _self.QueryInterface();
        return try _ifc.get_StorageProviderIdFilter();
    }
    public var StorageProviderIdFilter : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Storage.Search.IQueryOptionsWithProviderFilter = try _self.QueryInterface();
        return try _ifc.StorageProviderIdFilter;
        }
    }
}

// type: Windows.Storage.Search.SortEntry
// struct type
public typealias SortEntry = _q_CWindows_CStorage_CSearch_CSortEntry;

// type: Windows.Storage.Search.SortEntryVector
// runtime class
public class SortEntryVector
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry;
    public init(plok: ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry { return _self; }
    public func GetAt(index : Swift.UInt32) throws -> Windows.Storage.Search.SortEntry {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.GetAt(index: index);
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CSearch_CSortEntry> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Windows.Storage.Search.SortEntry, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value, index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Windows.Storage.Search.SortEntry) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value);
    }
    public func InsertAt(index : Swift.UInt32, value : Windows.Storage.Search.SortEntry) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value);
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Windows.Storage.Search.SortEntry) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.Append(value: value);
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CSortEntry>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CSortEntry>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CStorage_CSearch_CSortEntry = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
}

// type: Windows.Storage.Search.StorageFileQueryResult
// runtime class
public class StorageFileQueryResult
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IStorageFileQueryResult;
    public init(plok: Windows.Storage.Search.IStorageFileQueryResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IStorageFileQueryResult { return _self; }
    public func GetFilesAsync(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Search.IStorageFileQueryResult = try _self.QueryInterface();
        return try _ifc.GetFilesAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems);
    }
    public func GetFiles(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFilesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Search.IStorageFileQueryResult = try _self.QueryInterface();
        return try _ifc.GetFilesAsyncDefaultStartAndCount();
    }
    public func GetFiles() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemCountAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.GetItemCountAsync();
    }
    public func GetItemCount() async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemCountAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Folder() throws -> Optional<Windows.Storage.StorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.get_Folder());
    }
    public func add_ContentsChanged(handler : @escaping (Optional<Windows.Storage.Search.IStorageQueryResultBase>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.add_ContentsChanged(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable(cb: handler).Interface());
    }
    public func remove_ContentsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.remove_ContentsChanged(eventCookie: eventCookie);
    }
    public func add_OptionsChanged(changedHandler : @escaping (Optional<Windows.Storage.Search.IStorageQueryResultBase>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.add_OptionsChanged(changedHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable(cb: changedHandler).Interface());
    }
    public func remove_OptionsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.remove_OptionsChanged(eventCookie: eventCookie);
    }
    public func FindStartIndexAsync(value : Optional<WinRT.Object>) throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.FindStartIndexAsync(value: value!.GetInterface());
    }
    public func FindStartIndex(value : Optional<WinRT.Object>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.FindStartIndexAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetCurrentQueryOptions() throws -> Optional<Windows.Storage.Search.QueryOptions> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.Search.QueryOptions(plok: _ifc.GetCurrentQueryOptions());
    }
    public func ApplyNewQueryOptions(newQueryOptions : Optional<Windows.Storage.Search.QueryOptions>) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.ApplyNewQueryOptions(newQueryOptions: newQueryOptions!.Interface());
    }
    public var Folder : Optional<Windows.Storage.StorageFolder> {
        get throws {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.Folder);
        }
    }
    public func GetMatchingPropertiesWithRanges(file : Optional<Windows.Storage.StorageFile>) throws -> Optional<ClosedGenerics.IMap_2_HSTRING__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CData_CText_CTextSegment> {
        let _ifc : Windows.Storage.Search.IStorageFileQueryResult2 = try _self.QueryInterface();
        return try _ifc.GetMatchingPropertiesWithRanges(file: file!.Interface());
    }
}

// type: Windows.Storage.Search.StorageFolderQueryResult
// runtime class
public class StorageFolderQueryResult
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IStorageFolderQueryResult;
    public init(plok: Windows.Storage.Search.IStorageFolderQueryResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IStorageFolderQueryResult { return _self; }
    public func GetFoldersAsync(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryResult = try _self.QueryInterface();
        return try _ifc.GetFoldersAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems);
    }
    public func GetFolders(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFoldersAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryResult = try _self.QueryInterface();
        return try _ifc.GetFoldersAsyncDefaultStartAndCount();
    }
    public func GetFolders() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemCountAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.GetItemCountAsync();
    }
    public func GetItemCount() async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemCountAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Folder() throws -> Optional<Windows.Storage.StorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.get_Folder());
    }
    public func add_ContentsChanged(handler : @escaping (Optional<Windows.Storage.Search.IStorageQueryResultBase>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.add_ContentsChanged(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable(cb: handler).Interface());
    }
    public func remove_ContentsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.remove_ContentsChanged(eventCookie: eventCookie);
    }
    public func add_OptionsChanged(changedHandler : @escaping (Optional<Windows.Storage.Search.IStorageQueryResultBase>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.add_OptionsChanged(changedHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable(cb: changedHandler).Interface());
    }
    public func remove_OptionsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.remove_OptionsChanged(eventCookie: eventCookie);
    }
    public func FindStartIndexAsync(value : Optional<WinRT.Object>) throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.FindStartIndexAsync(value: value!.GetInterface());
    }
    public func FindStartIndex(value : Optional<WinRT.Object>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.FindStartIndexAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetCurrentQueryOptions() throws -> Optional<Windows.Storage.Search.QueryOptions> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.Search.QueryOptions(plok: _ifc.GetCurrentQueryOptions());
    }
    public func ApplyNewQueryOptions(newQueryOptions : Optional<Windows.Storage.Search.QueryOptions>) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.ApplyNewQueryOptions(newQueryOptions: newQueryOptions!.Interface());
    }
    public var Folder : Optional<Windows.Storage.StorageFolder> {
        get throws {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.Folder);
        }
    }
}

// type: Windows.Storage.Search.StorageItemQueryResult
// runtime class
public class StorageItemQueryResult
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IStorageItemQueryResult;
    public init(plok: Windows.Storage.Search.IStorageItemQueryResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IStorageItemQueryResult { return _self; }
    public func GetItemsAsync(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        let _ifc : Windows.Storage.Search.IStorageItemQueryResult = try _self.QueryInterface();
        return try _ifc.GetItemsAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems);
    }
    public func GetItems(startIndex : Swift.UInt32, maxNumberOfItems : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync(startIndex: startIndex, maxNumberOfItems: maxNumberOfItems)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        let _ifc : Windows.Storage.Search.IStorageItemQueryResult = try _self.QueryInterface();
        return try _ifc.GetItemsAsyncDefaultStartAndCount();
    }
    public func GetItems() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemCountAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.GetItemCountAsync();
    }
    public func GetItemCount() async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemCountAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Folder() throws -> Optional<Windows.Storage.StorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.get_Folder());
    }
    public func add_ContentsChanged(handler : @escaping (Optional<Windows.Storage.Search.IStorageQueryResultBase>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.add_ContentsChanged(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable(cb: handler).Interface());
    }
    public func remove_ContentsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.remove_ContentsChanged(eventCookie: eventCookie);
    }
    public func add_OptionsChanged(changedHandler : @escaping (Optional<Windows.Storage.Search.IStorageQueryResultBase>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.add_OptionsChanged(changedHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CStorage_CSearch_CIStorageQueryResultBase_IInspectable(cb: changedHandler).Interface());
    }
    public func remove_OptionsChanged(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.remove_OptionsChanged(eventCookie: eventCookie);
    }
    public func FindStartIndexAsync(value : Optional<WinRT.Object>) throws -> Optional<ClosedGenerics.IAsyncOperation_1_UINT32> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.FindStartIndexAsync(value: value!.GetInterface());
    }
    public func FindStartIndex(value : Optional<WinRT.Object>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.FindStartIndexAsync(value: value)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetCurrentQueryOptions() throws -> Optional<Windows.Storage.Search.QueryOptions> {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.Search.QueryOptions(plok: _ifc.GetCurrentQueryOptions());
    }
    public func ApplyNewQueryOptions(newQueryOptions : Optional<Windows.Storage.Search.QueryOptions>) throws -> Void {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try _ifc.ApplyNewQueryOptions(newQueryOptions: newQueryOptions!.Interface());
    }
    public var Folder : Optional<Windows.Storage.StorageFolder> {
        get throws {
        let _ifc : Windows.Storage.Search.IStorageQueryResultBase = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.Folder);
        }
    }
}

// type: Windows.Storage.Search.StorageLibraryChangeTrackerTriggerDetails
// runtime class
public class StorageLibraryChangeTrackerTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails;
    public init(plok: Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails { return _self; }
    public func get_Folder() throws -> Optional<Windows.Storage.StorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.get_Folder());
    }
    public func get_ChangeTracker() throws -> Optional<Windows.Storage.StorageLibraryChangeTracker> {
        let _ifc : Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails = try _self.QueryInterface();
        return try Windows.Storage.StorageLibraryChangeTracker(plok: _ifc.get_ChangeTracker());
    }
    public var ChangeTracker : Optional<Windows.Storage.StorageLibraryChangeTracker> {
        get throws {
        let _ifc : Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails = try _self.QueryInterface();
        return try Windows.Storage.StorageLibraryChangeTracker(plok: _ifc.ChangeTracker);
        }
    }
    public var Folder : Optional<Windows.Storage.StorageFolder> {
        get throws {
        let _ifc : Windows.Storage.Search.IStorageLibraryChangeTrackerTriggerDetails = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.Folder);
        }
    }
}

// type: Windows.Storage.Search.StorageLibraryContentChangedTriggerDetails
// runtime class
public class StorageLibraryContentChangedTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails;
    public init(plok: Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails { return _self; }
    public func get_Folder() throws -> Optional<Windows.Storage.StorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.get_Folder());
    }
    public func CreateModifiedSinceQuery(lastQueryTime : Windows.Foundation.DateTime) throws -> Optional<Windows.Storage.Search.StorageItemQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageItemQueryResult(plok: _ifc.CreateModifiedSinceQuery(lastQueryTime: lastQueryTime));
    }
    public var Folder : Optional<Windows.Storage.StorageFolder> {
        get throws {
        let _ifc : Windows.Storage.Search.IStorageLibraryContentChangedTriggerDetails = try _self.QueryInterface();
        return try Windows.Storage.StorageFolder(plok: _ifc.Folder);
        }
    }
}

// type: Windows.Storage.Search.ValueAndLanguage
// runtime class
public class ValueAndLanguage
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Search.IValueAndLanguage;
    public init(plok: Windows.Storage.Search.IValueAndLanguage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Search.IValueAndLanguage { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Search.ValueAndLanguage")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Language() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Search.IValueAndLanguage = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Search.IValueAndLanguage = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_Value() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Storage.Search.IValueAndLanguage = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public func put_Value(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Storage.Search.IValueAndLanguage = try _self.QueryInterface();
        return try _ifc.put_Value(value: value!.GetInterface());
    }
    public var Language : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Search.IValueAndLanguage = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var Value : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Storage.Search.IValueAndLanguage = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
}

}
extension Windows.Storage.Search.CommonFileQuery {
    public static var DefaultQuery : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFileQuery_DefaultQuery;
        }
    }
    public static var OrderByName : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFileQuery_OrderByName;
        }
    }
    public static var OrderByTitle : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFileQuery_OrderByTitle;
        }
    }
    public static var OrderByMusicProperties : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFileQuery_OrderByMusicProperties;
        }
    }
    public static var OrderBySearchRank : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFileQuery_OrderBySearchRank;
        }
    }
    public static var OrderByDate : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFileQuery_OrderByDate;
        }
    }
}
extension Windows.Storage.Search.CommonFolderQuery {
    public static var DefaultQuery : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_DefaultQuery;
        }
    }
    public static var GroupByYear : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByYear;
        }
    }
    public static var GroupByMonth : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByMonth;
        }
    }
    public static var GroupByArtist : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByArtist;
        }
    }
    public static var GroupByAlbum : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByAlbum;
        }
    }
    public static var GroupByAlbumArtist : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByAlbumArtist;
        }
    }
    public static var GroupByComposer : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByComposer;
        }
    }
    public static var GroupByGenre : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByGenre;
        }
    }
    public static var GroupByPublishedYear : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByPublishedYear;
        }
    }
    public static var GroupByRating : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByRating;
        }
    }
    public static var GroupByTag : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByTag;
        }
    }
    public static var GroupByAuthor : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByAuthor;
        }
    }
    public static var GroupByType : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CCommonFolderQuery_GroupByType;
        }
    }
}
extension Windows.Storage.Search.DateStackOption {
    public static var None : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CDateStackOption_None;
        }
    }
    public static var Year : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CDateStackOption_Year;
        }
    }
    public static var Month : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CDateStackOption_Month;
        }
    }
}
extension Windows.Storage.Search.FolderDepth {
    public static var Shallow : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CFolderDepth_Shallow;
        }
    }
    public static var Deep : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CFolderDepth_Deep;
        }
    }
}
extension Windows.Storage.Search.IndexedState {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexedState_Unknown;
        }
    }
    public static var NotIndexed : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexedState_NotIndexed;
        }
    }
    public static var PartiallyIndexed : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexedState_PartiallyIndexed;
        }
    }
    public static var FullyIndexed : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexedState_FullyIndexed;
        }
    }
}
extension Windows.Storage.Search.IndexerOption {
    public static var UseIndexerWhenAvailable : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexerOption_UseIndexerWhenAvailable;
        }
    }
    public static var OnlyUseIndexer : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexerOption_OnlyUseIndexer;
        }
    }
    public static var DoNotUseIndexer : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexerOption_DoNotUseIndexer;
        }
    }
    public static var OnlyUseIndexerAndOptimizeForIndexedProperties : Self {
        get {
            return _q_CWindows_CStorage_CSearch_CIndexerOption_OnlyUseIndexerAndOptimizeForIndexedProperties;
        }
    }
}
