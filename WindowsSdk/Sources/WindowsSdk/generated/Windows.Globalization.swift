// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Globalization {
// type: Windows.Globalization.ILanguage
// interface type
open class ILanguage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xea79a752, Data2: 0xf7c2, Data3 : 0x4265, Data4 : (0xb1, 0xbd, 0xc4, 0xde, 0xc4, 0xe4, 0xf0, 0x80)) }
// method not needed: get_LanguageTag
// method not needed: get_DisplayName
// method not needed: get_NativeName
// method not needed: get_Script
} // ILanguage


// type: Windows.Globalization.ILanguageFactory
// interface type
// ACTIVATION INTERFACE
open class ILanguageFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9b0252ac, Data2: 0x0c27, Data3 : 0x44f8, Data4 : (0xb7, 0x92, 0x97, 0x93, 0xfb, 0x66, 0xc6, 0x3e)) }
    // Windows.Globalization.Language CreateLanguage(System.String)
    private func _n_CreateLanguage(_ languageTag : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGlobalization_CILanguage>>>?) throws {
        return try perform(as: _q_CWindows_CGlobalization_CILanguageFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateLanguage(pThis, languageTag, __presult))
        }
    }
    public func CreateLanguage(languageTag : Swift.String) throws -> Optional<Windows.Globalization.ILanguage> {
        let __hstr_languageTag = try HString(languageTag);
        return try withExtendedLifetime(__hstr_languageTag) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CGlobalization_CILanguage>> = nil;
        try self._n_CreateLanguage(__hstr_languageTag.Raw(), &__result);
        return Windows.Globalization.ILanguage(consuming: __result);
        }
    }
} // ILanguageFactory


// type: Windows.Globalization.Language
// runtime class
public class Language
    :
    WinRT.Object
{
    private var _self : Windows.Globalization.ILanguage;
    public init(plok: Windows.Globalization.ILanguage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Globalization.ILanguage { return _self; }
    public init(languageTag : Swift.String) throws {
        let _af : ILanguageFactory = try RoGetActivationFactory("Windows.Globalization.Language");
        _self = try _af.CreateLanguage(languageTag: languageTag)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Windows.Globalization.ILanguageStatics
    // static interface not needed: Windows.Globalization.ILanguageStatics2
    // static interface not needed: Windows.Globalization.ILanguageStatics3
    // method not needed: get_LanguageTag
    // method not needed: get_DisplayName
    // method not needed: get_NativeName
    // method not needed: get_Script
    // instance interface not needed: Windows.Globalization.ILanguageExtensionSubtags
    // instance interface not needed: Windows.Globalization.ILanguage2
    // instance interface not needed: Windows.Globalization.ILanguage3
}

}
