// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed interface type
public class IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xae42cddf, Data2: 0x3042, Data3 : 0x5d92, Data4 : (0xa0, 0x1e, 0x64, 0x3c, 0x25, 0x2b, 0x80, 0x50)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation>>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation>> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation> GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_GetResults(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1986b372, Data2: 0x0ddb, Data3 : 0x520c, Data4 : (0xb7, 0x2d, 0xfb, 0x25, 0x77, 0xe9, 0x9f, 0xf5)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.DownloadOperation>>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// impl delegate type
open class AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.from_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf87d9755, Data2: 0x2a7d, Data3 : 0x59fc, Data4 : (0xbc, 0x92, 0xb4, 0x86, 0x36, 0xf4, 0xd9, 0x55)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// closed interface type
public class IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf6fd69cb, Data2: 0xe6e7, Data3 : 0x56d5, Data4 : (0x9b, 0xe6, 0xe0, 0xdc, 0x46, 0x83, 0xfa, 0x80)) }
// method not needed: First
} // IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// closed interface type
public class IIterator_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2ab61055, Data2: 0x2d0a, Data3 : 0x59cb, Data4 : (0x8c, 0xbd, 0x05, 0x6f, 0x2d, 0x7f, 0xb4, 0x54)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa8dc2a04, Data2: 0x3f44, Data3 : 0x5046, Data4 : (0x81, 0x82, 0xcd, 0x0e, 0xc1, 0x47, 0xe1, 0x7d)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(consuming: __result);
    }
    // Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUnconstrainedTransferRequestResult>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUnconstrainedTransferRequestResult>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4f52bfe8, Data2: 0x9b0e, Data3 : 0x5b22, Data4 : (0x91, 0x6b, 0x83, 0x44, 0x25, 0xb4, 0xab, 0x97)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult
// impl delegate type
open class AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResultVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult {
        return _self
    }
}
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43ef3a5f, Data2: 0xcc7d, Data3 : 0x566d, Data4 : (0xa9, 0x2a, 0x4c, 0xaa, 0x76, 0xb9, 0x2a, 0x1f)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.BackgroundTransfer.DownloadOperation>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.BackgroundTransfer.DownloadOperation> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    // Windows.Networking.BackgroundTransfer.DownloadOperation GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.BackgroundTransfer.IDownloadOperation(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2aa63857, Data2: 0xffaf, Data3 : 0x5cf6, Data4 : (0x9b, 0x2c, 0x0d, 0xc5, 0x97, 0xb6, 0x0a, 0x60)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.DownloadOperation>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// impl delegate type
open class AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8e96d4b0, Data2: 0xf0ae, Data3 : 0x51cb, Data4 : (0xb7, 0xc4, 0x02, 0x42, 0x51, 0xbd, 0x16, 0xd8)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// closed interface type
public class IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc73ceef0, Data2: 0x854a, Data3 : 0x5947, Data4 : (0x9e, 0x7c, 0x52, 0x7e, 0x39, 0x15, 0xd3, 0x35)) }
    // Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange GetAt(System.UInt32)
    private func _n_GetAt(_ index : UINT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, __presult))
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange {
        var __result : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange = _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange(Offset: 0, Length: 0);
        try self._n_GetAt(index, &__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Size(&__result);
        return __result;
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange> GetView()
    private func _n_GetView(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, __presult))
        }
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>> = nil;
        try self._n_GetView(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange(consuming: __result);
    }
    // bool IndexOf(Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange, ref System.UInt32)
    private func _n_IndexOf(_ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange, _ index : UnsafeMutablePointer<UINT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, index, __presult))
        }
    }
    public func IndexOf(value : Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange, index : inout Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: UINT32 = 0;
        try self._n_IndexOf(value, &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // void SetAt(System.UInt32, Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange)
    private func _n_SetAt(_ index : UINT32, _ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }
    public func SetAt(index : Swift.UInt32, value : Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange) throws -> Void {
        try self._n_SetAt(index, value);
    }
    // void InsertAt(System.UInt32, Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange)
    private func _n_InsertAt(_ index : UINT32, _ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }
    public func InsertAt(index : Swift.UInt32, value : Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange) throws -> Void {
        try self._n_InsertAt(index, value);
    }
    // void RemoveAt(System.UInt32)
    private func _n_RemoveAt(_ index : UINT32) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        try self._n_RemoveAt(index);
    }
    // void Append(Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange)
    private func _n_Append(_ value : _q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }
    public func Append(value : Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange) throws -> Void {
        try self._n_Append(value);
    }
    // void RemoveAtEnd()
    private func _n_RemoveAtEnd() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }
    public func RemoveAtEnd() throws -> Void {
        try self._n_RemoveAtEnd();
    }
    // void Clear()
    private func _n_Clear() throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }
    public func Clear() throws -> Void {
        try self._n_Clear();
    }
    // System.UInt32 GetMany(System.UInt32, Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange[])
    private func _n_GetMany(_ startIndex : UINT32, _ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>>, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, itemsLength, items, __presult))
        }
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>>) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_GetMany(startIndex, itemsLength, items, &__result);
        return __result;
    }
    // void ReplaceAll(Windows.Networking.BackgroundTransfer.BackgroundTransferFileRange[])
    private func _n_ReplaceAll(_ itemsLength : UINT32, _ items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, itemsLength, items))
        }
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange>>) throws -> Void {
        try self._n_ReplaceAll(itemsLength, items);
    }
    public var Size : Swift.UInt32 {
        get throws {
            return try get_Size();
        }
    }
} // IVector_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5be7934b, Data2: 0xd9fc, Data3 : 0x540a, Data4 : (0x8f, 0xfe, 0x5f, 0xb9, 0xc8, 0x8c, 0x65, 0x58)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferFileRange
// closed interface type
public class IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3e4c6a3c, Data2: 0x48a4, Data3 : 0x5e22, Data4 : (0xb2, 0x9a, 0x3e, 0x42, 0x94, 0x69, 0x46, 0x2f)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation>>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation>> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation> GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_GetResults(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x608a29a8, Data2: 0xbbc5, Data3 : 0x5ea3, Data4 : (0xb3, 0xf7, 0x87, 0xed, 0xc4, 0xe7, 0xbb, 0xbc)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.BackgroundTransfer.UploadOperation>>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// impl delegate type
open class AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.from_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return _self
    }
}
// closed interface type
public class IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x79778799, Data2: 0x38cc, Data3 : 0x5b67, Data4 : (0x9c, 0xd0, 0x04, 0x3f, 0xc4, 0x7a, 0x9e, 0xf7)) }
// method not needed: First
} // IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// closed interface type
public class IIterator_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcaa85133, Data2: 0x73d7, Data3 : 0x5f96, Data4 : (0xab, 0x2d, 0xfb, 0xb4, 0xfa, 0x00, 0xf7, 0x15)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x44212ea1, Data2: 0xb524, Data3 : 0x5aee, Data4 : (0xa3, 0x20, 0x71, 0x99, 0x22, 0x53, 0x81, 0xd1)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.BackgroundTransfer.UploadOperation>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.BackgroundTransfer.UploadOperation> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    // Windows.Networking.BackgroundTransfer.UploadOperation GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.BackgroundTransfer.IUploadOperation(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xead68818, Data2: 0x0c38, Data3 : 0x5cde, Data4 : (0xae, 0xc1, 0xc6, 0xa7, 0x61, 0x87, 0x11, 0xf7)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.BackgroundTransfer.UploadOperation>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// impl delegate type
open class AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return _self
    }
}
// closed interface type
public class IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcf303199, Data2: 0xde3b, Data3 : 0x5dac, Data4 : (0xa7, 0x03, 0x6c, 0x57, 0xd8, 0x08, 0x21, 0xc4)) }
// method not needed: First
} // IIterable_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart
// closed interface type
public class IIterator_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x07fbc351, Data2: 0x781d, Data3 : 0x52c7, Data4 : (0x95, 0x58, 0xa4, 0x53, 0xe5, 0x70, 0x3f, 0x29)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferContentPart
// closed interface type
public class IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe86a4f5d, Data2: 0x743a, Data3 : 0x5f18, Data4 : (0x9d, 0x4c, 0xbc, 0x8e, 0xd5, 0x94, 0x26, 0x59)) }
    // [IsSpecialName] void put_Progress(Windows.Foundation.AsyncOperationProgressHandler<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation>)
    private func _n_put_Progress(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Progress(pThis, handler))
        }
    }
    public func put_Progress(handler : Optional<ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) throws -> Void {
        try self._n_put_Progress(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationProgressHandler<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation> get_Progress()
    private func _n_get_Progress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, __presult))
        }
    }
    public func get_Progress() throws -> Optional<ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_get_Progress(&__result);
        return ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationWithProgressCompletedHandler<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationWithProgressCompletedHandler<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(consuming: __result);
    }
    // Windows.Networking.BackgroundTransfer.DownloadOperation GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.BackgroundTransfer.IDownloadOperation(consuming: __result);
    }
    public var Progress : Optional<ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        get throws {
            return try get_Progress();
        }
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// closed generic delegate type
public class IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb2ff13f1, Data2: 0xc743, Data3 : 0x54f4, Data4 : (0xbc, 0xcc, 0xf0, 0x8e, 0x16, 0xa8, 0x78, 0x90)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation>, Windows.Networking.BackgroundTransfer.DownloadOperation)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ progressInfo : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, progressInfo))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, progressInfo : Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation>) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), RawPointer(progressInfo));
    }
} // IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// impl delegate type
open class AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ progressInfo : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>) in
        guard let self = AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.from_AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(asyncInfo), progressInfo: Windows.Networking.BackgroundTransfer.DownloadOperation(plok: Windows.Networking.BackgroundTransfer.IDownloadOperation(progressInfo)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, progressInfo : Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, progressInfo)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, progressInfo : Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, progressInfo: progressInfo!.Interface());
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return _self
    }
}
// closed generic delegate type
public class IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x781b479c, Data2: 0x0207, Data3 : 0x5d15, Data4 : (0xa4, 0xe5, 0x78, 0x37, 0xd1, 0x3b, 0xf9, 0x3d)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.DownloadOperation,Windows.Networking.BackgroundTransfer.DownloadOperation>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
// impl delegate type
open class AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.from_AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x93a20d85, Data2: 0xbdfc, Data3 : 0x5195, Data4 : (0x90, 0xd9, 0x8c, 0xb5, 0x6c, 0xbc, 0xb3, 0xd8)) }
    // [IsSpecialName] void Invoke(Windows.Networking.BackgroundTransfer.DownloadOperation, Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferRangesDownloadedEventArgs>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation>, args : Optional<Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgsVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIDownloadOperation>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIBackgroundTransferRangesDownloadedEventArgs>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs.from_TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.BackgroundTransfer.DownloadOperation(plok: Windows.Networking.BackgroundTransfer.IDownloadOperation(sender)), args: Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs(plok: Windows.Networking.BackgroundTransfer.IBackgroundTransferRangesDownloadedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>, Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>, Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>, args : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_TypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.BackgroundTransfer.DownloadOperation>, args : Optional<Windows.Networking.BackgroundTransfer.BackgroundTransferRangesDownloadedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CBackgroundTransferRangesDownloadedEventArgs {
        return _self
    }
}
// closed interface type
public class IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x35ddaefa, Data2: 0xdb6a, Data3 : 0x5d0d, Data4 : (0xba, 0x54, 0xa0, 0x72, 0x84, 0x01, 0x17, 0x1e)) }
    // [IsSpecialName] void put_Progress(Windows.Foundation.AsyncOperationProgressHandler<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation>)
    private func _n_put_Progress(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Progress(pThis, handler))
        }
    }
    public func put_Progress(handler : Optional<ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) throws -> Void {
        try self._n_put_Progress(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationProgressHandler<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation> get_Progress()
    private func _n_get_Progress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, __presult))
        }
    }
    public func get_Progress() throws -> Optional<ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_get_Progress(&__result);
        return ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationWithProgressCompletedHandler<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationWithProgressCompletedHandler<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(consuming: __result);
    }
    // Windows.Networking.BackgroundTransfer.UploadOperation GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.BackgroundTransfer.IUploadOperation(consuming: __result);
    }
    public var Progress : Optional<ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        get throws {
            return try get_Progress();
        }
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// closed generic delegate type
public class IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xccd13730, Data2: 0xfed3, Data3 : 0x54e8, Data4 : (0x84, 0x71, 0x09, 0x6e, 0x4b, 0x64, 0xca, 0xdd)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation>, Windows.Networking.BackgroundTransfer.UploadOperation)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ progressInfo : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, progressInfo))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, progressInfo : Optional<Windows.Networking.BackgroundTransfer.IUploadOperation>) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), RawPointer(progressInfo));
    }
} // IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// impl delegate type
open class AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ progressInfo : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CBackgroundTransfer_CIUploadOperation>>) in
        guard let self = AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.from_AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(asyncInfo), progressInfo: Windows.Networking.BackgroundTransfer.UploadOperation(plok: Windows.Networking.BackgroundTransfer.IUploadOperation(progressInfo)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Optional<Windows.Networking.BackgroundTransfer.UploadOperation>) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Optional<Windows.Networking.BackgroundTransfer.UploadOperation>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, progressInfo : Optional<Windows.Networking.BackgroundTransfer.UploadOperation>) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, progressInfo)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, progressInfo : Optional<Windows.Networking.BackgroundTransfer.UploadOperation>) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, progressInfo: progressInfo!.Interface());
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationProgressHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return _self
    }
}
// closed generic delegate type
public class IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x79fcae93, Data2: 0x53ec, Data3 : 0x5f66, Data4 : (0xab, 0x34, 0x82, 0x6a, 0xf7, 0x8e, 0xc1, 0x1a)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperationWithProgress<Windows.Networking.BackgroundTransfer.UploadOperation,Windows.Networking.BackgroundTransfer.UploadOperation>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
// impl delegate type
open class AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.from_AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation? {
        return pUnk?.bindMemory(to: AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation
{
    private var _self : ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation;
    public init(plok: ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        return _self
    }
}
}
extension ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.BackgroundTransfer.IUnconstrainedTransferRequestResult> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUnconstrainedTransferRequestResult =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.BackgroundTransfer.IDownloadOperation> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CDownloadOperation =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
extension ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperationWithProgress_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.BackgroundTransfer.IUploadOperation> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationWithProgressCompletedHandler_2__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation__q_CWindows_CNetworking_CBackgroundTransfer_CUploadOperation =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
