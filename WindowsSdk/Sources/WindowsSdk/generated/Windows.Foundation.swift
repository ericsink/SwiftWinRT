// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
import CWindowsSdk;
@_spi(IUnknown) import WinRT;


extension Windows.Foundation.IAsyncAction: WinRT.Future {
  private final class CompletedHandler: Windows.Foundation.AsyncActionCompletedHandler {
    private var hEvent: HANDLE

    public init(signal event: HANDLE) {
      self.hEvent = event
      super.init()
    }

    override func Invoke(asyncInfo: Windows.Foundation.IAsyncAction?,
                         asyncStatus: Windows.Foundation.AsyncStatus) throws {
      _ = SetEvent(self.hEvent)
    }
  }

  public func get() throws -> Void {
    let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
    if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
      let event: HANDLE =
          CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
      // TODO(compnerd) validate event
      defer { _ = CloseHandle(event) }

      let completion: Windows.Foundation.AsyncActionCompletedHandler =
          Windows.Foundation.IAsyncAction.CompletedHandler(signal: event)
      try withExtendedLifetime(completion) {
        try self.put_Completed(handler: completion.Interface())
        _ = WaitForSingleObject(event, INFINITE)
      }
    }
    try self.GetResults()
  }
}

extension Windows.Foundation {
// type: Windows.Foundation.AsyncActionCompletedHandler
// delegate type
open class IAsyncActionCompletedHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa4ed5c81, Data2: 0x76c9, Data3 : 0x40bd, Data4 : (0x8b, 0xe6, 0xb1, 0xd9, 0x0f, 0xb2, 0x0a, 0xe7)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncAction, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncActionCompletedHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<Windows.Foundation.IAsyncAction>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
}
// impl delegate type
open class AsyncActionCompletedHandler
{
    private static var vtable: _q_CWindows_CFoundation_CIAsyncActionCompletedHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Windows.Foundation.IAsyncActionCompletedHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncActionCompletedHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncActionCompletedHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncActionCompletedHandler.from_AsyncActionCompletedHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: Windows.Foundation.IAsyncAction(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncActionCompletedHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CWindows_CFoundation_CIAsyncActionCompletedHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Foundation.IAsyncAction>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Foundation.IAsyncAction>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CWindows_CFoundation_CIAsyncActionCompletedHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncActionCompletedHandler(_ pUnk: UnsafeMutableRawPointer?) -> AsyncActionCompletedHandler? {
        return pUnk?.bindMemory(to: AsyncActionCompletedHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<Windows.Foundation.IAsyncAction>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> Windows.Foundation.IAsyncActionCompletedHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Windows.Foundation.IAsyncActionCompletedHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncActionCompletedHandler
{
    private var _self : Windows.Foundation.IAsyncActionCompletedHandler;
    public init(plok: Windows.Foundation.IAsyncActionCompletedHandler?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<Windows.Foundation.IAsyncAction>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> Windows.Foundation.IAsyncActionCompletedHandler {
        return _self
    }
}

// type: Windows.Foundation.AsyncStatus
// enum type
public typealias AsyncStatus = _q_CWindows_CFoundation_CAsyncStatus;

// type: Windows.Foundation.DateTime
// struct type
public typealias DateTime = _q_CWindows_CFoundation_CDateTime;

// type: Windows.Foundation.EventRegistrationToken
// struct type
public typealias EventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken;

// type: Windows.Foundation.HResult
// struct type
public typealias HResult = _q_CWindows_CFoundation_CHResult;

// type: Windows.Foundation.IAsyncAction
// interface type
open class IAsyncAction
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5a648006, Data2: 0x843a, Data3 : 0x4da9, Data4 : (0x86, 0x5b, 0x9d, 0x26, 0xe5, 0xdf, 0xad, 0x7b)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncActionCompletedHandler)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncActionCompletedHandler>>) throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncAction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<Windows.Foundation.IAsyncActionCompletedHandler>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncActionCompletedHandler get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncActionCompletedHandler>>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncAction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<Windows.Foundation.IAsyncActionCompletedHandler> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncActionCompletedHandler>> = nil;
        try self._n_get_Completed(&__result);
        return Windows.Foundation.IAsyncActionCompletedHandler(consuming: __result);
    }
    // void GetResults()
    private func _n_GetResults() throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncAction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis))
        }
    }
    public func GetResults() throws -> Void {
        try self._n_GetResults();
    }
    public var Completed : Optional<Windows.Foundation.IAsyncActionCompletedHandler> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncAction

// impl class
open class AsyncAction
{
    private class Container {
        public var self_ref: AsyncAction? = nil
    }
    private struct WithTrailingObjects_IAsyncInfo {
        public var interface_struct: _q_CWindows_CFoundation_CIAsyncInfo
        public var container: Unmanaged<Container>
    }
    private var instance_IAsyncInfo: WithTrailingObjects_IAsyncInfo
    private static func from_IAsyncInfo(_ pUnk: UnsafeMutableRawPointer?) -> AsyncAction? {
        return pUnk?.bindMemory(to: AsyncAction.WithTrailingObjects_IAsyncInfo.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    private static var vtable_IAsyncInfo: _q_CWindows_CFoundation_CIAsyncInfoVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Windows.Foundation.IAsyncInfo.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        case Windows.Foundation.IAsyncAction.IID:
            guard let self = AsyncAction.from_IAsyncInfo(pUnk) else {
                return E_INVALIDARG
            }
            let p =
                withUnsafeMutablePointer(to: &self.instance_IAsyncAction.interface_struct) {
                    return UnsafeMutableRawPointer($0).bindMemory(to: _q_CWindows_CFoundation_CIAsyncAction.self, capacity: 1)
                }
            _ = p.pointee.lpVtbl.pointee.AddRef(p)
            ppvObject.pointee = UnsafeMutableRawPointer(p)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncAction.WithTrailingObjects_IAsyncInfo.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncAction.WithTrailingObjects_IAsyncInfo.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 2
        var mem = CoTaskMemAlloc(32).bindMemory(to: IID.self, capacity: 2)
        (mem + 0).pointee = Windows.Foundation.IAsyncInfo.IID
        (mem + 1).pointee = Windows.Foundation.IAsyncAction.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Windows.Foundation.IAsyncInfo").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    get_Id: {
        (pThis, _ __presult: UnsafeMutablePointer<UINT32>?) in
        guard let self = AsyncAction.from_IAsyncInfo(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Swift.UInt32 = try self.get_Id()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_Status: {
        (pThis, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CAsyncStatus>?) in
        guard let self = AsyncAction.from_IAsyncInfo(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Windows.Foundation.AsyncStatus = try self.get_Status()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_ErrorCode: {
        (pThis, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CHResult>?) in
        guard let self = AsyncAction.from_IAsyncInfo(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Windows.Foundation.HResult = try self.get_ErrorCode()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    Cancel: {
        (pThis) in
        guard let self = AsyncAction.from_IAsyncInfo(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Cancel()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    Close: {
        (pThis) in
        guard let self = AsyncAction.from_IAsyncInfo(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Close()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects_IAsyncAction {
        public var interface_struct: _q_CWindows_CFoundation_CIAsyncAction
        public var container: Unmanaged<Container>
    }
    private var instance_IAsyncAction: WithTrailingObjects_IAsyncAction
    private static func from_IAsyncAction(_ pUnk: UnsafeMutableRawPointer?) -> AsyncAction? {
        return pUnk?.bindMemory(to: AsyncAction.WithTrailingObjects_IAsyncAction.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    private static var vtable_IAsyncAction: _q_CWindows_CFoundation_CIAsyncActionVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Windows.Foundation.IAsyncAction.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        case Windows.Foundation.IAsyncInfo.IID:
            guard let self = AsyncAction.from_IAsyncInfo(pUnk) else {
                return E_INVALIDARG
            }
            let p =
                withUnsafeMutablePointer(to: &self.instance_IAsyncInfo.interface_struct) {
                    return UnsafeMutableRawPointer($0).bindMemory(to: _q_CWindows_CFoundation_CIAsyncInfo.self, capacity: 1)
                }
            _ = p.pointee.lpVtbl.pointee.AddRef(p)
            ppvObject.pointee = UnsafeMutableRawPointer(p)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncAction.WithTrailingObjects_IAsyncAction.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncAction.WithTrailingObjects_IAsyncAction.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 2
        var mem = CoTaskMemAlloc(32).bindMemory(to: IID.self, capacity: 2)
        (mem + 0).pointee = Windows.Foundation.IAsyncInfo.IID
        (mem + 1).pointee = Windows.Foundation.IAsyncAction.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Windows.Foundation.IAsyncAction").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    put_Completed: {
        (pThis, _ handler : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncActionCompletedHandler>>) in
        guard let self = AsyncAction.from_IAsyncAction(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.put_Completed(handler: Windows.Foundation.foo_AsyncActionCompletedHandler(plok: Windows.Foundation.IAsyncActionCompletedHandler(handler)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_Completed: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncActionCompletedHandler>>>?) in
        guard let self = AsyncAction.from_IAsyncAction(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Windows.Foundation.AsyncActionCompletedHandler> = try self.get_Completed()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetResults: {
        (pThis) in
        guard let self = AsyncAction.from_IAsyncAction(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.GetResults()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    public init() throws {
        self.instance_IAsyncInfo = WithTrailingObjects_IAsyncInfo(interface_struct: _q_CWindows_CFoundation_CIAsyncInfo(lpVtbl: &Self.vtable_IAsyncInfo), container: Unmanaged<Container>.passRetained(Container()))
        self.instance_IAsyncAction = WithTrailingObjects_IAsyncAction(interface_struct: _q_CWindows_CFoundation_CIAsyncAction(lpVtbl: &Self.vtable_IAsyncAction), container: Unmanaged<Container>.passRetained(Container()))
        self.instance_IAsyncInfo.container.takeUnretainedValue().self_ref = self
        self.instance_IAsyncAction.container.takeUnretainedValue().self_ref = self
    }
    open func get_Id() throws -> Swift.UInt32 {
    return 0;
    }
    open func get_Status() throws -> Windows.Foundation.AsyncStatus {
    return _q_CWindows_CFoundation_CAsyncStatus_Canceled;
    }
    open func get_ErrorCode() throws -> Windows.Foundation.HResult {
    return _q_CWindows_CFoundation_CHResult(Value: 0);
    }
    open func Cancel() throws -> Void {
    }
    open func Close() throws -> Void {
    }
    open func put_Completed(handler : Optional<Windows.Foundation.foo_AsyncActionCompletedHandler>) throws -> Void {
    }
    open func get_Completed() throws -> Optional<Windows.Foundation.AsyncActionCompletedHandler> {
    return nil;
    }
    open func GetResults() throws -> Void {
    }
    public func to_IAsyncInfo() -> Windows.Foundation.IAsyncInfo {
        return withUnsafeMutablePointer(to: &self.instance_IAsyncInfo.interface_struct) {
            Windows.Foundation.IAsyncInfo(UnsafeMutableRawPointer($0))
        }
    }
    public func to_IAsyncAction() -> Windows.Foundation.IAsyncAction {
        return withUnsafeMutablePointer(to: &self.instance_IAsyncAction.interface_struct) {
            Windows.Foundation.IAsyncAction(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Windows.Foundation.IAsyncInfo
// interface type
open class IAsyncInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x00000036, Data2: 0x0000, Data3 : 0x0000, Data4 : (0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46)) }
    // [IsSpecialName] System.UInt32 get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_Id(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.AsyncStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CAsyncStatus>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Foundation.AsyncStatus {
        var __result : _q_CWindows_CFoundation_CAsyncStatus = _q_CWindows_CFoundation_CAsyncStatus_Canceled;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.HResult get_ErrorCode()
    private func _n_get_ErrorCode(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CHResult>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorCode(pThis, __presult))
        }
    }
    public func get_ErrorCode() throws -> Windows.Foundation.HResult {
        var __result : _q_CWindows_CFoundation_CHResult = _q_CWindows_CFoundation_CHResult(Value: 0);
        try self._n_get_ErrorCode(&__result);
        return __result;
    }
    // void Cancel()
    private func _n_Cancel() throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Cancel(pThis))
        }
    }
    public func Cancel() throws -> Void {
        try self._n_Cancel();
    }
    // void Close()
    private func _n_Close() throws {
        return try perform(as: _q_CWindows_CFoundation_CIAsyncInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
        }
    }
    public func Close() throws -> Void {
        try self._n_Close();
    }
    public var ErrorCode : Windows.Foundation.HResult {
        get throws {
            return try get_ErrorCode();
        }
    }
    public var Id : Swift.UInt32 {
        get throws {
            return try get_Id();
        }
    }
    public var Status : Windows.Foundation.AsyncStatus {
        get throws {
            return try get_Status();
        }
    }
} // IAsyncInfo


// type: Windows.Foundation.IClosable
// interface type
open class IClosable
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x30d5a829, Data2: 0x7fa4, Data3 : 0x4026, Data4 : (0x83, 0xbb, 0xd7, 0x5b, 0xae, 0x4e, 0xa9, 0x9e)) }
    // void Close()
    private func _n_Close() throws {
        return try perform(as: _q_CWindows_CFoundation_CIClosable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
        }
    }
    public func Close() throws -> Void {
        try self._n_Close();
    }
} // IClosable


// type: Windows.Foundation.IStringable
// interface type
open class IStringable
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x96369f54, Data2: 0x8eb6, Data3 : 0x48f0, Data4 : (0xab, 0xce, 0xc1, 0xb2, 0x11, 0xe6, 0x27, 0xc3)) }
    // System.String ToString()
    private func _n_ToString(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIStringable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ToString(pThis, __presult))
        }
    }
    public func ToString() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_ToString(&__result);
        return Swift.String(from: __result);
    }
} // IStringable


// type: Windows.Foundation.IUriEscapeStatics
// interface type
open class IUriEscapeStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc1d432ba, Data2: 0xc824, Data3 : 0x4452, Data4 : (0xa7, 0xfd, 0x51, 0x2b, 0xc3, 0xbb, 0xe9, 0xa1)) }
    // System.String UnescapeComponent(System.String)
    private func _n_UnescapeComponent(_ toUnescape : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriEscapeStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UnescapeComponent(pThis, toUnescape, __presult))
        }
    }
    public func UnescapeComponent(toUnescape : Swift.String) throws -> Swift.String {
        let __hstr_toUnescape = try HString(toUnescape);
        return try withExtendedLifetime(__hstr_toUnescape) {
        var __result : Optional<HSTRING> = nil;
        try self._n_UnescapeComponent(__hstr_toUnescape.Raw(), &__result);
        return Swift.String(from: __result);
        }
    }
    // System.String EscapeComponent(System.String)
    private func _n_EscapeComponent(_ toEscape : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriEscapeStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EscapeComponent(pThis, toEscape, __presult))
        }
    }
    public func EscapeComponent(toEscape : Swift.String) throws -> Swift.String {
        let __hstr_toEscape = try HString(toEscape);
        return try withExtendedLifetime(__hstr_toEscape) {
        var __result : Optional<HSTRING> = nil;
        try self._n_EscapeComponent(__hstr_toEscape.Raw(), &__result);
        return Swift.String(from: __result);
        }
    }
} // IUriEscapeStatics


// type: Windows.Foundation.IUriRuntimeClass
// interface type
open class IUriRuntimeClass
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e365e57, Data2: 0x48b2, Data3 : 0x4160, Data4 : (0x95, 0x6f, 0xc7, 0x38, 0x51, 0x20, 0xbb, 0xfc)) }
    // [IsSpecialName] System.String get_AbsoluteUri()
    private func _n_get_AbsoluteUri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AbsoluteUri(pThis, __presult))
        }
    }
    public func get_AbsoluteUri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AbsoluteUri(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_DisplayUri()
    private func _n_get_DisplayUri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayUri(pThis, __presult))
        }
    }
    public func get_DisplayUri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayUri(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Domain()
    private func _n_get_Domain(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Domain(pThis, __presult))
        }
    }
    public func get_Domain() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Domain(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Extension()
    private func _n_get_Extension(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Extension(pThis, __presult))
        }
    }
    public func get_Extension() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Extension(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Fragment()
    private func _n_get_Fragment(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Fragment(pThis, __presult))
        }
    }
    public func get_Fragment() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Fragment(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Host()
    private func _n_get_Host(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Host(pThis, __presult))
        }
    }
    public func get_Host() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Host(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Password()
    private func _n_get_Password(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Password(pThis, __presult))
        }
    }
    public func get_Password() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Password(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Path()
    private func _n_get_Path(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Path(pThis, __presult))
        }
    }
    public func get_Path() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Path(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Query()
    private func _n_get_Query(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Query(pThis, __presult))
        }
    }
    public func get_Query() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Query(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.WwwFormUrlDecoder get_QueryParsed()
    private func _n_get_QueryParsed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_QueryParsed(pThis, __presult))
        }
    }
    public func get_QueryParsed() throws -> Optional<Windows.Foundation.IWwwFormUrlDecoderRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass>> = nil;
        try self._n_get_QueryParsed(&__result);
        return Windows.Foundation.IWwwFormUrlDecoderRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] System.String get_RawUri()
    private func _n_get_RawUri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RawUri(pThis, __presult))
        }
    }
    public func get_RawUri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RawUri(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_SchemeName()
    private func _n_get_SchemeName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SchemeName(pThis, __presult))
        }
    }
    public func get_SchemeName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SchemeName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_UserName()
    private func _n_get_UserName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserName(pThis, __presult))
        }
    }
    public func get_UserName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_UserName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.Int32 get_Port()
    private func _n_get_Port(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Port(pThis, __presult))
        }
    }
    public func get_Port() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Port(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Suspicious()
    private func _n_get_Suspicious(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Suspicious(pThis, __presult))
        }
    }
    public func get_Suspicious() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Suspicious(&__result);
        return __result;
    }
    // bool Equals(Windows.Foundation.Uri)
    private func _n_Equals(_ pUri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Equals(pThis, pUri, __presult))
        }
    }
    public func Equals(pUri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_Equals(RawPointer(pUri), &__result);
        return __result;
    }
    // Windows.Foundation.Uri CombineUri(System.String)
    private func _n_CombineUri(_ relativeUri : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClass.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CombineUri(pThis, relativeUri, __presult))
        }
    }
    public func CombineUri(relativeUri : Swift.String) throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        let __hstr_relativeUri = try HString(relativeUri);
        return try withExtendedLifetime(__hstr_relativeUri) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_CombineUri(__hstr_relativeUri.Raw(), &__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
        }
    }
    public var AbsoluteUri : Swift.String {
        get throws {
            return try get_AbsoluteUri();
        }
    }
    public var DisplayUri : Swift.String {
        get throws {
            return try get_DisplayUri();
        }
    }
    public var Domain : Swift.String {
        get throws {
            return try get_Domain();
        }
    }
    public var Extension : Swift.String {
        get throws {
            return try get_Extension();
        }
    }
    public var Fragment : Swift.String {
        get throws {
            return try get_Fragment();
        }
    }
    public var Host : Swift.String {
        get throws {
            return try get_Host();
        }
    }
    public var Password : Swift.String {
        get throws {
            return try get_Password();
        }
    }
    public var Path : Swift.String {
        get throws {
            return try get_Path();
        }
    }
    public var Port : Swift.Int32 {
        get throws {
            return try get_Port();
        }
    }
    public var Query : Swift.String {
        get throws {
            return try get_Query();
        }
    }
    public var QueryParsed : Optional<Windows.Foundation.IWwwFormUrlDecoderRuntimeClass> {
        get throws {
            return try get_QueryParsed();
        }
    }
    public var RawUri : Swift.String {
        get throws {
            return try get_RawUri();
        }
    }
    public var SchemeName : Swift.String {
        get throws {
            return try get_SchemeName();
        }
    }
    public var Suspicious : boolean {
        get throws {
            return try get_Suspicious();
        }
    }
    public var UserName : Swift.String {
        get throws {
            return try get_UserName();
        }
    }
} // IUriRuntimeClass


// type: Windows.Foundation.IUriRuntimeClassFactory
// interface type
// ACTIVATION INTERFACE
open class IUriRuntimeClassFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x44a9796f, Data2: 0x723e, Data3 : 0x4fdf, Data4 : (0xa2, 0x18, 0x03, 0x3e, 0x75, 0xb0, 0xc0, 0x84)) }
    // Windows.Foundation.Uri CreateUri(System.String)
    private func _n_CreateUri(_ uri : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClassFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateUri(pThis, uri, __presult))
        }
    }
    public func CreateUri(uri : Swift.String) throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        let __hstr_uri = try HString(uri);
        return try withExtendedLifetime(__hstr_uri) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_CreateUri(__hstr_uri.Raw(), &__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
        }
    }
    // Windows.Foundation.Uri CreateWithRelativeUri(System.String, System.String)
    private func _n_CreateWithRelativeUri(_ baseUri : Optional<HSTRING>, _ relativeUri : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClassFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithRelativeUri(pThis, baseUri, relativeUri, __presult))
        }
    }
    public func CreateWithRelativeUri(baseUri : Swift.String, relativeUri : Swift.String) throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        let __hstr_baseUri = try HString(baseUri);
        return try withExtendedLifetime(__hstr_baseUri) {
        let __hstr_relativeUri = try HString(relativeUri);
        return try withExtendedLifetime(__hstr_relativeUri) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_CreateWithRelativeUri(__hstr_baseUri.Raw(), __hstr_relativeUri.Raw(), &__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
        }
        }
    }
} // IUriRuntimeClassFactory


// type: Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri
// interface type
open class IUriRuntimeClassWithAbsoluteCanonicalUri
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x758d9661, Data2: 0x221c, Data3 : 0x480f, Data4 : (0xa3, 0x39, 0x50, 0x65, 0x66, 0x73, 0xf4, 0x6f)) }
    // [IsSpecialName] System.String get_AbsoluteCanonicalUri()
    private func _n_get_AbsoluteCanonicalUri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AbsoluteCanonicalUri(pThis, __presult))
        }
    }
    public func get_AbsoluteCanonicalUri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AbsoluteCanonicalUri(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_DisplayIri()
    private func _n_get_DisplayIri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIUriRuntimeClassWithAbsoluteCanonicalUri.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayIri(pThis, __presult))
        }
    }
    public func get_DisplayIri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayIri(&__result);
        return Swift.String(from: __result);
    }
    public var AbsoluteCanonicalUri : Swift.String {
        get throws {
            return try get_AbsoluteCanonicalUri();
        }
    }
    public var DisplayIri : Swift.String {
        get throws {
            return try get_DisplayIri();
        }
    }
} // IUriRuntimeClassWithAbsoluteCanonicalUri


// type: Windows.Foundation.IWwwFormUrlDecoderRuntimeClass
// interface type
open class IWwwFormUrlDecoderRuntimeClass
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd45a0451, Data2: 0xf225, Data3 : 0x4542, Data4 : (0x92, 0x96, 0x0e, 0x1d, 0xf5, 0xd2, 0x54, 0xdf)) }
// method not needed: GetFirstValueByName
} // IWwwFormUrlDecoderRuntimeClass


// type: Windows.Foundation.IWwwFormUrlDecoderRuntimeClassFactory
// interface type
// ACTIVATION INTERFACE
open class IWwwFormUrlDecoderRuntimeClassFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5b8c6b3d, Data2: 0x24ae, Data3 : 0x41b5, Data4 : (0xa1, 0xbf, 0xf0, 0xc3, 0xd5, 0x44, 0x84, 0x5b)) }
    // Windows.Foundation.WwwFormUrlDecoder CreateWwwFormUrlDecoder(System.String)
    private func _n_CreateWwwFormUrlDecoder(_ query : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClassFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWwwFormUrlDecoder(pThis, query, __presult))
        }
    }
    public func CreateWwwFormUrlDecoder(query : Swift.String) throws -> Optional<Windows.Foundation.IWwwFormUrlDecoderRuntimeClass> {
        let __hstr_query = try HString(query);
        return try withExtendedLifetime(__hstr_query) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIWwwFormUrlDecoderRuntimeClass>> = nil;
        try self._n_CreateWwwFormUrlDecoder(__hstr_query.Raw(), &__result);
        return Windows.Foundation.IWwwFormUrlDecoderRuntimeClass(consuming: __result);
        }
    }
} // IWwwFormUrlDecoderRuntimeClassFactory


// type: Windows.Foundation.Point
// struct type
public typealias Point = _q_CWindows_CFoundation_CPoint;

// type: Windows.Foundation.Rect
// struct type
public typealias Rect = _q_CWindows_CFoundation_CRect;

// type: Windows.Foundation.Size
// struct type
public typealias Size = _q_CWindows_CFoundation_CSize;

// type: Windows.Foundation.TimeSpan
// struct type
public typealias TimeSpan = _q_CWindows_CFoundation_CTimeSpan;

// type: Windows.Foundation.Uri
// runtime class
public class Uri
    :
    WinRT.Object
{
    private var _self : Windows.Foundation.IUriRuntimeClass;
    public init(plok: Windows.Foundation.IUriRuntimeClass?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Foundation.IUriRuntimeClass { return _self; }
    public init(uri : Swift.String) throws {
        let _af : IUriRuntimeClassFactory = try RoGetActivationFactory("Windows.Foundation.Uri");
        _self = try _af.CreateUri(uri: uri)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(baseUri : Swift.String, relativeUri : Swift.String) throws {
        let _af : IUriRuntimeClassFactory = try RoGetActivationFactory("Windows.Foundation.Uri");
        _self = try _af.CreateWithRelativeUri(baseUri: baseUri, relativeUri: relativeUri)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IUriEscapeStatics {
        static var x : IUriEscapeStatics =
            try! RoGetActivationFactory("Windows.Foundation.Uri")
    }
    public static var UriEscapeStatics : IUriEscapeStatics {
        _IUriEscapeStatics.x
    }
    public static func UnescapeComponent(toUnescape : Swift.String) throws -> Swift.String {
        return try UriEscapeStatics.UnescapeComponent(toUnescape: toUnescape);
    }
    public static func EscapeComponent(toEscape : Swift.String) throws -> Swift.String {
        return try UriEscapeStatics.EscapeComponent(toEscape: toEscape);
    }
    public func get_AbsoluteUri() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_AbsoluteUri();
    }
    public func get_DisplayUri() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_DisplayUri();
    }
    public func get_Domain() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Domain();
    }
    public func get_Extension() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Extension();
    }
    public func get_Fragment() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Fragment();
    }
    public func get_Host() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Host();
    }
    public func get_Password() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Password();
    }
    public func get_Path() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Path();
    }
    public func get_Query() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Query();
    }
    public func get_QueryParsed() throws -> Optional<Windows.Foundation.WwwFormUrlDecoder> {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try Windows.Foundation.WwwFormUrlDecoder(plok: _ifc.get_QueryParsed());
    }
    public func get_RawUri() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_RawUri();
    }
    public func get_SchemeName() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_SchemeName();
    }
    public func get_UserName() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_UserName();
    }
    public func get_Port() throws -> Swift.Int32 {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Port();
    }
    public func get_Suspicious() throws -> boolean {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.get_Suspicious();
    }
    public func Equals(pUri : Optional<Windows.Foundation.Uri>) throws -> boolean {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Equals(pUri: pUri!.Interface());
    }
    public func CombineUri(relativeUri : Swift.String) throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.CombineUri(relativeUri: relativeUri));
    }
    public var AbsoluteUri : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.AbsoluteUri;
        }
    }
    public var DisplayUri : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.DisplayUri;
        }
    }
    public var Domain : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Domain;
        }
    }
    public var Extension : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Extension;
        }
    }
    public var Fragment : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Fragment;
        }
    }
    public var Host : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Host;
        }
    }
    public var Password : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Password;
        }
    }
    public var Path : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Path;
        }
    }
    public var Port : Swift.Int32 {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Port;
        }
    }
    public var Query : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Query;
        }
    }
    public var QueryParsed : Optional<Windows.Foundation.WwwFormUrlDecoder> {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try Windows.Foundation.WwwFormUrlDecoder(plok: _ifc.QueryParsed);
        }
    }
    public var RawUri : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.RawUri;
        }
    }
    public var SchemeName : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.SchemeName;
        }
    }
    public var Suspicious : boolean {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.Suspicious;
        }
    }
    public var UserName : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClass = try _self.QueryInterface();
        return try _ifc.UserName;
        }
    }
    public func get_AbsoluteCanonicalUri() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri = try _self.QueryInterface();
        return try _ifc.get_AbsoluteCanonicalUri();
    }
    public func get_DisplayIri() throws -> Swift.String {
        let _ifc : Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri = try _self.QueryInterface();
        return try _ifc.get_DisplayIri();
    }
    public var AbsoluteCanonicalUri : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri = try _self.QueryInterface();
        return try _ifc.AbsoluteCanonicalUri;
        }
    }
    public var DisplayIri : Swift.String {
        get throws {
        let _ifc : Windows.Foundation.IUriRuntimeClassWithAbsoluteCanonicalUri = try _self.QueryInterface();
        return try _ifc.DisplayIri;
        }
    }
    public func ToString() throws -> Swift.String {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Foundation.WwwFormUrlDecoder
// runtime class
public class WwwFormUrlDecoder
    :
    WinRT.Object
{
    private var _self : Windows.Foundation.IWwwFormUrlDecoderRuntimeClass;
    public init(plok: Windows.Foundation.IWwwFormUrlDecoderRuntimeClass?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Foundation.IWwwFormUrlDecoderRuntimeClass { return _self; }
    public init(query : Swift.String) throws {
        let _af : IWwwFormUrlDecoderRuntimeClassFactory = try RoGetActivationFactory("Windows.Foundation.WwwFormUrlDecoder");
        _self = try _af.CreateWwwFormUrlDecoder(query: query)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: GetFirstValueByName
    // instance interface not needed: Windows.Foundation.Collections.IVectorView`1[[Windows.Foundation.IWwwFormUrlDecoderEntry, Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Windows.Foundation.IWwwFormUrlDecoderEntry, Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

}
extension Windows.Foundation.AsyncStatus {
    public static var Canceled : Self {
        get {
            return _q_CWindows_CFoundation_CAsyncStatus_Canceled;
        }
    }
    public static var Completed : Self {
        get {
            return _q_CWindows_CFoundation_CAsyncStatus_Completed;
        }
    }
    public static var Error : Self {
        get {
            return _q_CWindows_CFoundation_CAsyncStatus_Error;
        }
    }
    public static var Started : Self {
        get {
            return _q_CWindows_CFoundation_CAsyncStatus_Started;
        }
    }
}
