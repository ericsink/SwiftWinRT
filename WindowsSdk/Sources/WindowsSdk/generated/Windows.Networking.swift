// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking {
// type: Windows.Networking.DomainNameType
// enum type
public typealias DomainNameType = _q_CWindows_CNetworking_CDomainNameType;

// type: Windows.Networking.EndpointPair
// runtime class
public class EndpointPair
    :
    WinRT.Object
{
    private var _self : Windows.Networking.IEndpointPair;
    public init(plok: Windows.Networking.IEndpointPair?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.IEndpointPair { return _self; }
    public init(localHostName : Optional<Windows.Networking.HostName>, localServiceName : Swift.String, remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) throws {
        let _af : IEndpointPairFactory = try RoGetActivationFactory("Windows.Networking.EndpointPair");
        _self = try _af.CreateEndpointPair(localHostName: localHostName!.Interface(), localServiceName: localServiceName, remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_LocalHostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalHostName());
    }
    public func put_LocalHostName(value : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.put_LocalHostName(value: value!.Interface());
    }
    public func get_LocalServiceName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.get_LocalServiceName();
    }
    public func put_LocalServiceName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.put_LocalServiceName(value: value);
    }
    public func get_RemoteHostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_RemoteHostName());
    }
    public func put_RemoteHostName(value : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.put_RemoteHostName(value: value!.Interface());
    }
    public func get_RemoteServiceName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.get_RemoteServiceName();
    }
    public func put_RemoteServiceName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.put_RemoteServiceName(value: value);
    }
    public var LocalHostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalHostName);
        }
    }
    public var LocalServiceName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.LocalServiceName;
        }
    }
    public var RemoteHostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.RemoteHostName);
        }
    }
    public var RemoteServiceName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.IEndpointPair = try _self.QueryInterface();
        return try _ifc.RemoteServiceName;
        }
    }
}

// type: Windows.Networking.HostName
// runtime class
public class HostName
    :
    WinRT.Object
{
    private var _self : Windows.Networking.IHostName;
    public init(plok: Windows.Networking.IHostName?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.IHostName { return _self; }
    public init(hostName : Swift.String) throws {
        let _af : IHostNameFactory = try RoGetActivationFactory("Windows.Networking.HostName");
        _self = try _af.CreateHostName(hostName: hostName)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHostNameStatics {
        static var x : IHostNameStatics =
            try! RoGetActivationFactory("Windows.Networking.HostName")
    }
    public static var HostNameStatics : IHostNameStatics {
        _IHostNameStatics.x
    }
    public static func Compare(value1 : Swift.String, value2 : Swift.String) throws -> Swift.Int32 {
        return try HostNameStatics.Compare(value1: value1, value2: value2);
    }
    public func get_IPInformation() throws -> Optional<Windows.Networking.Connectivity.IPInformation> {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.IPInformation(plok: _ifc.get_IPInformation());
    }
    public func get_RawName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.get_RawName();
    }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public func get_CanonicalName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.get_CanonicalName();
    }
    public func get_Type() throws -> Windows.Networking.HostNameType {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.get_Type();
    }
    public func IsEqual(hostName : Optional<Windows.Networking.HostName>) throws -> boolean {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.IsEqual(hostName: hostName!.Interface());
    }
    public var CanonicalName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.CanonicalName;
        }
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public var IPInformation : Optional<Windows.Networking.Connectivity.IPInformation> {
        get throws {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try Windows.Networking.Connectivity.IPInformation(plok: _ifc.IPInformation);
        }
    }
    public var RawName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.RawName;
        }
    }
    public var Type_ : Windows.Networking.HostNameType {
        get throws {
        let _ifc : Windows.Networking.IHostName = try _self.QueryInterface();
        return try _ifc.Type_;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Networking.HostNameSortOptions
// enum type
public typealias HostNameSortOptions = _q_CWindows_CNetworking_CHostNameSortOptions;

// type: Windows.Networking.HostNameType
// enum type
public typealias HostNameType = _q_CWindows_CNetworking_CHostNameType;

// type: Windows.Networking.IEndpointPair
// interface type
open class IEndpointPair
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x33a0aa36, Data2: 0xf8fa, Data3 : 0x4b30, Data4 : (0xb8, 0x56, 0x76, 0x51, 0x7c, 0x3b, 0xd0, 0x6d)) }
    // [IsSpecialName] Windows.Networking.HostName get_LocalHostName()
    private func _n_get_LocalHostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalHostName(pThis, __presult))
        }
    }
    public func get_LocalHostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalHostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] void put_LocalHostName(Windows.Networking.HostName)
    private func _n_put_LocalHostName(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LocalHostName(pThis, value))
        }
    }
    public func put_LocalHostName(value : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_put_LocalHostName(RawPointer(value));
    }
    // [IsSpecialName] System.String get_LocalServiceName()
    private func _n_get_LocalServiceName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalServiceName(pThis, __presult))
        }
    }
    public func get_LocalServiceName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LocalServiceName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_LocalServiceName(System.String)
    private func _n_put_LocalServiceName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LocalServiceName(pThis, value))
        }
    }
    public func put_LocalServiceName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_LocalServiceName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Networking.HostName get_RemoteHostName()
    private func _n_get_RemoteHostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteHostName(pThis, __presult))
        }
    }
    public func get_RemoteHostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_RemoteHostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] void put_RemoteHostName(Windows.Networking.HostName)
    private func _n_put_RemoteHostName(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RemoteHostName(pThis, value))
        }
    }
    public func put_RemoteHostName(value : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_put_RemoteHostName(RawPointer(value));
    }
    // [IsSpecialName] System.String get_RemoteServiceName()
    private func _n_get_RemoteServiceName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteServiceName(pThis, __presult))
        }
    }
    public func get_RemoteServiceName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RemoteServiceName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_RemoteServiceName(System.String)
    private func _n_put_RemoteServiceName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RemoteServiceName(pThis, value))
        }
    }
    public func put_RemoteServiceName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_RemoteServiceName(__hstr_value.Raw());
        }
    }
    public var LocalHostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalHostName();
        }
    }
    public var LocalServiceName : Swift.String {
        get throws {
            return try get_LocalServiceName();
        }
    }
    public var RemoteHostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_RemoteHostName();
        }
    }
    public var RemoteServiceName : Swift.String {
        get throws {
            return try get_RemoteServiceName();
        }
    }
} // IEndpointPair


// type: Windows.Networking.IEndpointPairFactory
// interface type
// ACTIVATION INTERFACE
open class IEndpointPairFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb609d971, Data2: 0x64e0, Data3 : 0x442b, Data4 : (0xaa, 0x6f, 0xcc, 0x8c, 0x8f, 0x18, 0x1f, 0x78)) }
    // Windows.Networking.EndpointPair CreateEndpointPair(Windows.Networking.HostName, System.String, Windows.Networking.HostName, System.String)
    private func _n_CreateEndpointPair(_ localHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ localServiceName : Optional<HSTRING>, _ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIEndpointPairFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEndpointPair(pThis, localHostName, localServiceName, remoteHostName, remoteServiceName, __presult))
        }
    }
    public func CreateEndpointPair(localHostName : Optional<Windows.Networking.IHostName>, localServiceName : Swift.String, remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<Windows.Networking.IEndpointPair> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIEndpointPair>> = nil;
        try self._n_CreateEndpointPair(RawPointer(localHostName), __hstr_localServiceName.Raw(), RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), &__result);
        return Windows.Networking.IEndpointPair(consuming: __result);
        }
        }
    }
} // IEndpointPairFactory


// type: Windows.Networking.IHostName
// interface type
open class IHostName
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbf8ecaad, Data2: 0xed96, Data3 : 0x49a7, Data4 : (0x90, 0x84, 0xd4, 0x16, 0xca, 0xe8, 0x8d, 0xcb)) }
    // [IsSpecialName] Windows.Networking.Connectivity.IPInformation get_IPInformation()
    private func _n_get_IPInformation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIIPInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostName.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IPInformation(pThis, __presult))
        }
    }
    public func get_IPInformation() throws -> Optional<Windows.Networking.Connectivity.IIPInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CIIPInformation>> = nil;
        try self._n_get_IPInformation(&__result);
        return Windows.Networking.Connectivity.IIPInformation(consuming: __result);
    }
    // [IsSpecialName] System.String get_RawName()
    private func _n_get_RawName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostName.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RawName(pThis, __presult))
        }
    }
    public func get_RawName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RawName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_DisplayName()
    private func _n_get_DisplayName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostName.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, __presult))
        }
    }
    public func get_DisplayName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_CanonicalName()
    private func _n_get_CanonicalName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostName.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanonicalName(pThis, __presult))
        }
    }
    public func get_CanonicalName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CanonicalName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.HostNameType get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CHostNameType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostName.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Windows.Networking.HostNameType {
        var __result : _q_CWindows_CNetworking_CHostNameType = _q_CWindows_CNetworking_CHostNameType_DomainName;
        try self._n_get_Type(&__result);
        return __result;
    }
    // bool IsEqual(Windows.Networking.HostName)
    private func _n_IsEqual(_ hostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostName.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsEqual(pThis, hostName, __presult))
        }
    }
    public func IsEqual(hostName : Optional<Windows.Networking.IHostName>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsEqual(RawPointer(hostName), &__result);
        return __result;
    }
    public var CanonicalName : Swift.String {
        get throws {
            return try get_CanonicalName();
        }
    }
    public var DisplayName : Swift.String {
        get throws {
            return try get_DisplayName();
        }
    }
    public var IPInformation : Optional<Windows.Networking.Connectivity.IIPInformation> {
        get throws {
            return try get_IPInformation();
        }
    }
    public var RawName : Swift.String {
        get throws {
            return try get_RawName();
        }
    }
    public var Type_ : Windows.Networking.HostNameType {
        get throws {
            return try get_Type();
        }
    }
} // IHostName


// type: Windows.Networking.IHostNameFactory
// interface type
// ACTIVATION INTERFACE
open class IHostNameFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x458c23ed, Data2: 0x712f, Data3 : 0x4576, Data4 : (0xad, 0xf1, 0xc2, 0x0b, 0x2c, 0x64, 0x35, 0x58)) }
    // Windows.Networking.HostName CreateHostName(System.String)
    private func _n_CreateHostName(_ hostName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostNameFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHostName(pThis, hostName, __presult))
        }
    }
    public func CreateHostName(hostName : Swift.String) throws -> Optional<Windows.Networking.IHostName> {
        let __hstr_hostName = try HString(hostName);
        return try withExtendedLifetime(__hstr_hostName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_CreateHostName(__hstr_hostName.Raw(), &__result);
        return Windows.Networking.IHostName(consuming: __result);
        }
    }
} // IHostNameFactory


// type: Windows.Networking.IHostNameStatics
// interface type
open class IHostNameStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf68cd4bf, Data2: 0xa388, Data3 : 0x4e8b, Data4 : (0x91, 0xea, 0x54, 0xdd, 0x6d, 0xd9, 0x01, 0xc0)) }
    // System.Int32 Compare(System.String, System.String)
    private func _n_Compare(_ value1 : Optional<HSTRING>, _ value2 : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CIHostNameStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Compare(pThis, value1, value2, __presult))
        }
    }
    public func Compare(value1 : Swift.String, value2 : Swift.String) throws -> Swift.Int32 {
        let __hstr_value1 = try HString(value1);
        return try withExtendedLifetime(__hstr_value1) {
        let __hstr_value2 = try HString(value2);
        return try withExtendedLifetime(__hstr_value2) {
        var __result : INT32 = 0;
        try self._n_Compare(__hstr_value1.Raw(), __hstr_value2.Raw(), &__result);
        return __result;
        }
        }
    }
} // IHostNameStatics


}
extension Windows.Networking.DomainNameType {
    public static var Suffix : Self {
        get {
            return _q_CWindows_CNetworking_CDomainNameType_Suffix;
        }
    }
    public static var FullyQualified : Self {
        get {
            return _q_CWindows_CNetworking_CDomainNameType_FullyQualified;
        }
    }
}
extension Windows.Networking.HostNameSortOptions {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameSortOptions_None;
        }
    }
    public static var OptimizeForLongConnections : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameSortOptions_OptimizeForLongConnections;
        }
    }
}
extension Windows.Networking.HostNameType {
    public static var DomainName : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameType_DomainName;
        }
    }
    public static var Ipv4 : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameType_Ipv4;
        }
    }
    public static var Ipv6 : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameType_Ipv6;
        }
    }
    public static var Bluetooth : Self {
        get {
            return _q_CWindows_CNetworking_CHostNameType_Bluetooth;
        }
    }
}
