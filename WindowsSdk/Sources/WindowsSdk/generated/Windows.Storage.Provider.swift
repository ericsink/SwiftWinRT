// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Storage.Provider {
// type: Windows.Storage.Provider.CachedFileOptions
// enum type
public typealias CachedFileOptions = _q_CWindows_CStorage_CProvider_CCachedFileOptions;

// type: Windows.Storage.Provider.CachedFileTarget
// enum type
public typealias CachedFileTarget = _q_CWindows_CStorage_CProvider_CCachedFileTarget;

// type: Windows.Storage.Provider.CachedFileUpdater
// static class
public class CachedFileUpdater
{
    private struct _ICachedFileUpdaterStatics {
        static var x : ICachedFileUpdaterStatics =
            try! RoGetActivationFactory("Windows.Storage.Provider.CachedFileUpdater")
    }
    public static var CachedFileUpdaterStatics : ICachedFileUpdaterStatics {
        _ICachedFileUpdaterStatics.x
    }
    public static func SetUpdateInformation(file : Optional<Windows.Storage.IStorageFile>, contentId : Swift.String, readMode : Windows.Storage.Provider.ReadActivationMode, writeMode : Windows.Storage.Provider.WriteActivationMode, options : Windows.Storage.Provider.CachedFileOptions) throws -> Void {
        return try CachedFileUpdaterStatics.SetUpdateInformation(file: file, contentId: contentId, readMode: readMode, writeMode: writeMode, options: options);
    }
}

// type: Windows.Storage.Provider.CachedFileUpdaterUI
// runtime class
public class CachedFileUpdaterUI
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.ICachedFileUpdaterUI;
    public init(plok: Windows.Storage.Provider.ICachedFileUpdaterUI?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.ICachedFileUpdaterUI { return _self; }
    public func get_Title() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func get_UpdateTarget() throws -> Windows.Storage.Provider.CachedFileTarget {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.get_UpdateTarget();
    }
    public func add_FileUpdateRequested(handler : @escaping (Optional<Windows.Storage.Provider.CachedFileUpdaterUI>, Optional<Windows.Storage.Provider.FileUpdateRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.add_FileUpdateRequested(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CProvider_CCachedFileUpdaterUI__q_CWindows_CStorage_CProvider_CFileUpdateRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_FileUpdateRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.remove_FileUpdateRequested(token: token);
    }
    public func add_UIRequested(handler : @escaping (Optional<Windows.Storage.Provider.CachedFileUpdaterUI>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.add_UIRequested(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CProvider_CCachedFileUpdaterUI_IInspectable(cb: handler).Interface());
    }
    public func remove_UIRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.remove_UIRequested(token: token);
    }
    public func get_UIStatus() throws -> Windows.Storage.Provider.UIStatus {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.get_UIStatus();
    }
    public var Title : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
    public var UIStatus : Windows.Storage.Provider.UIStatus {
        get throws {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.UIStatus;
        }
    }
    public var UpdateTarget : Windows.Storage.Provider.CachedFileTarget {
        get throws {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI = try _self.QueryInterface();
        return try _ifc.UpdateTarget;
        }
    }
    public func get_UpdateRequest() throws -> Optional<Windows.Storage.Provider.FileUpdateRequest> {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI2 = try _self.QueryInterface();
        return try Windows.Storage.Provider.FileUpdateRequest(plok: _ifc.get_UpdateRequest());
    }
    public func GetDeferral() throws -> Optional<Windows.Storage.Provider.FileUpdateRequestDeferral> {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI2 = try _self.QueryInterface();
        return try Windows.Storage.Provider.FileUpdateRequestDeferral(plok: _ifc.GetDeferral());
    }
    public var UpdateRequest : Optional<Windows.Storage.Provider.FileUpdateRequest> {
        get throws {
        let _ifc : Windows.Storage.Provider.ICachedFileUpdaterUI2 = try _self.QueryInterface();
        return try Windows.Storage.Provider.FileUpdateRequest(plok: _ifc.UpdateRequest);
        }
    }
}

// type: Windows.Storage.Provider.FileUpdateRequest
// runtime class
public class FileUpdateRequest
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IFileUpdateRequest;
    public init(plok: Windows.Storage.Provider.IFileUpdateRequest?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IFileUpdateRequest { return _self; }
    public func get_ContentId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try _ifc.get_ContentId();
    }
    public func get_File() throws -> Optional<Windows.Storage.StorageFile> {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try Windows.Storage.StorageFile(plok: _ifc.get_File());
    }
    public func get_Status() throws -> Windows.Storage.Provider.FileUpdateStatus {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func put_Status(value : Windows.Storage.Provider.FileUpdateStatus) throws -> Void {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try _ifc.put_Status(value: value);
    }
    public func GetDeferral() throws -> Optional<Windows.Storage.Provider.FileUpdateRequestDeferral> {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try Windows.Storage.Provider.FileUpdateRequestDeferral(plok: _ifc.GetDeferral());
    }
    public func UpdateLocalFile(value : Optional<Windows.Storage.IStorageFile>) throws -> Void {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try _ifc.UpdateLocalFile(value: value);
    }
    public var ContentId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try _ifc.ContentId;
        }
    }
    public var File : Optional<Windows.Storage.StorageFile> {
        get throws {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try Windows.Storage.StorageFile(plok: _ifc.File);
        }
    }
    public var Status : Windows.Storage.Provider.FileUpdateStatus {
        get throws {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    public func get_UserInputNeededMessage() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest2 = try _self.QueryInterface();
        return try _ifc.get_UserInputNeededMessage();
    }
    public func put_UserInputNeededMessage(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest2 = try _self.QueryInterface();
        return try _ifc.put_UserInputNeededMessage(value: value);
    }
    public var UserInputNeededMessage : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequest2 = try _self.QueryInterface();
        return try _ifc.UserInputNeededMessage;
        }
    }
}

// type: Windows.Storage.Provider.FileUpdateRequestDeferral
// runtime class
public class FileUpdateRequestDeferral
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IFileUpdateRequestDeferral;
    public init(plok: Windows.Storage.Provider.IFileUpdateRequestDeferral?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IFileUpdateRequestDeferral { return _self; }
    public func Complete() throws -> Void {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequestDeferral = try _self.QueryInterface();
        return try _ifc.Complete();
    }
}

// type: Windows.Storage.Provider.FileUpdateRequestedEventArgs
// runtime class
public class FileUpdateRequestedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IFileUpdateRequestedEventArgs;
    public init(plok: Windows.Storage.Provider.IFileUpdateRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IFileUpdateRequestedEventArgs { return _self; }
    public func get_Request() throws -> Optional<Windows.Storage.Provider.FileUpdateRequest> {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Provider.FileUpdateRequest(plok: _ifc.get_Request());
    }
    public var Request : Optional<Windows.Storage.Provider.FileUpdateRequest> {
        get throws {
        let _ifc : Windows.Storage.Provider.IFileUpdateRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Provider.FileUpdateRequest(plok: _ifc.Request);
        }
    }
}

// type: Windows.Storage.Provider.FileUpdateStatus
// enum type
public typealias FileUpdateStatus = _q_CWindows_CStorage_CProvider_CFileUpdateStatus;

// type: Windows.Storage.Provider.ICachedFileUpdaterStatics
// interface type
open class ICachedFileUpdaterStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9fc90920, Data2: 0x7bcf, Data3 : 0x4888, Data4 : (0xa8, 0x1e, 0x10, 0x2d, 0x70, 0x34, 0xd7, 0xce)) }
    // void SetUpdateInformation(Windows.Storage.IStorageFile, System.String, Windows.Storage.Provider.ReadActivationMode, Windows.Storage.Provider.WriteActivationMode, Windows.Storage.Provider.CachedFileOptions)
    private func _n_SetUpdateInformation(_ file : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>, _ contentId : Optional<HSTRING>, _ readMode : _q_CWindows_CStorage_CProvider_CReadActivationMode, _ writeMode : _q_CWindows_CStorage_CProvider_CWriteActivationMode, _ options : _q_CWindows_CStorage_CProvider_CCachedFileOptions) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetUpdateInformation(pThis, file, contentId, readMode, writeMode, options))
        }
    }
    public func SetUpdateInformation(file : Optional<Windows.Storage.IStorageFile>, contentId : Swift.String, readMode : Windows.Storage.Provider.ReadActivationMode, writeMode : Windows.Storage.Provider.WriteActivationMode, options : Windows.Storage.Provider.CachedFileOptions) throws -> Void {
        let __hstr_contentId = try HString(contentId);
        return try withExtendedLifetime(__hstr_contentId) {
        try self._n_SetUpdateInformation(RawPointer(file), __hstr_contentId.Raw(), readMode, writeMode, options);
        }
    }
} // ICachedFileUpdaterStatics


// type: Windows.Storage.Provider.ICachedFileUpdaterUI
// interface type
open class ICachedFileUpdaterUI
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e6f41e6, Data2: 0xbaf2, Data3 : 0x4a97, Data4 : (0xb6, 0x00, 0x93, 0x33, 0xf5, 0xdf, 0x80, 0xfd)) }
    // [IsSpecialName] System.String get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Title(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Title(System.String)
    private func _n_put_Title(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Title(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Provider.CachedFileTarget get_UpdateTarget()
    private func _n_get_UpdateTarget(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CCachedFileTarget>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UpdateTarget(pThis, __presult))
        }
    }
    public func get_UpdateTarget() throws -> Windows.Storage.Provider.CachedFileTarget {
        var __result : _q_CWindows_CStorage_CProvider_CCachedFileTarget = _q_CWindows_CStorage_CProvider_CCachedFileTarget_Local;
        try self._n_get_UpdateTarget(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_FileUpdateRequested(Windows.Foundation.TypedEventHandler<Windows.Storage.Provider.CachedFileUpdaterUI,Windows.Storage.Provider.FileUpdateRequestedEventArgs>)
    private func _n_add_FileUpdateRequested(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CProvider_CCachedFileUpdaterUI__q_CWindows_CStorage_CProvider_CFileUpdateRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_FileUpdateRequested(pThis, handler, __presult))
        }
    }
    public func add_FileUpdateRequested(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CProvider_CCachedFileUpdaterUI__q_CWindows_CStorage_CProvider_CFileUpdateRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_FileUpdateRequested(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_FileUpdateRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_FileUpdateRequested(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FileUpdateRequested(pThis, token))
        }
    }
    public func remove_FileUpdateRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_FileUpdateRequested(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_UIRequested(Windows.Foundation.TypedEventHandler<Windows.Storage.Provider.CachedFileUpdaterUI,System.Object>)
    private func _n_add_UIRequested(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CProvider_CCachedFileUpdaterUI_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_UIRequested(pThis, handler, __presult))
        }
    }
    public func add_UIRequested(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CProvider_CCachedFileUpdaterUI_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_UIRequested(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_UIRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_UIRequested(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UIRequested(pThis, token))
        }
    }
    public func remove_UIRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_UIRequested(token);
    }
    // [IsSpecialName] Windows.Storage.Provider.UIStatus get_UIStatus()
    private func _n_get_UIStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CUIStatus>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UIStatus(pThis, __presult))
        }
    }
    public func get_UIStatus() throws -> Windows.Storage.Provider.UIStatus {
        var __result : _q_CWindows_CStorage_CProvider_CUIStatus = _q_CWindows_CStorage_CProvider_CUIStatus_Unavailable;
        try self._n_get_UIStatus(&__result);
        return __result;
    }
    public var Title : Swift.String {
        get throws {
            return try get_Title();
        }
    }
    public var UIStatus : Windows.Storage.Provider.UIStatus {
        get throws {
            return try get_UIStatus();
        }
    }
    public var UpdateTarget : Windows.Storage.Provider.CachedFileTarget {
        get throws {
            return try get_UpdateTarget();
        }
    }
} // ICachedFileUpdaterUI


// type: Windows.Storage.Provider.ICachedFileUpdaterUI2
// interface type
open class ICachedFileUpdaterUI2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8856a21c, Data2: 0x8699, Data3 : 0x4340, Data4 : (0x9f, 0x49, 0xf7, 0xca, 0xd7, 0xfe, 0x89, 0x91)) }
    // [IsSpecialName] Windows.Storage.Provider.FileUpdateRequest get_UpdateRequest()
    private func _n_get_UpdateRequest(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequest>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UpdateRequest(pThis, __presult))
        }
    }
    public func get_UpdateRequest() throws -> Optional<Windows.Storage.Provider.IFileUpdateRequest> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequest>> = nil;
        try self._n_get_UpdateRequest(&__result);
        return Windows.Storage.Provider.IFileUpdateRequest(consuming: __result);
    }
    // Windows.Storage.Provider.FileUpdateRequestDeferral GetDeferral()
    private func _n_GetDeferral(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequestDeferral>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CICachedFileUpdaterUI2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, __presult))
        }
    }
    public func GetDeferral() throws -> Optional<Windows.Storage.Provider.IFileUpdateRequestDeferral> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequestDeferral>> = nil;
        try self._n_GetDeferral(&__result);
        return Windows.Storage.Provider.IFileUpdateRequestDeferral(consuming: __result);
    }
    public var UpdateRequest : Optional<Windows.Storage.Provider.IFileUpdateRequest> {
        get throws {
            return try get_UpdateRequest();
        }
    }
} // ICachedFileUpdaterUI2


// type: Windows.Storage.Provider.IFileUpdateRequest
// interface type
open class IFileUpdateRequest
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x40c82536, Data2: 0xc1fe, Data3 : 0x4d93, Data4 : (0xa7, 0x92, 0x1e, 0x73, 0x6b, 0xc7, 0x08, 0x37)) }
    // [IsSpecialName] System.String get_ContentId()
    private func _n_get_ContentId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentId(pThis, __presult))
        }
    }
    public func get_ContentId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ContentId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Storage.StorageFile get_File()
    private func _n_get_File(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_File(pThis, __presult))
        }
    }
    public func get_File() throws -> Optional<Windows.Storage.IStorageFile> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>> = nil;
        try self._n_get_File(&__result);
        return Windows.Storage.IStorageFile(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Provider.FileUpdateStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CFileUpdateStatus>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Storage.Provider.FileUpdateStatus {
        var __result : _q_CWindows_CStorage_CProvider_CFileUpdateStatus = _q_CWindows_CStorage_CProvider_CFileUpdateStatus_Incomplete;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Status(Windows.Storage.Provider.FileUpdateStatus)
    private func _n_put_Status(_ value : _q_CWindows_CStorage_CProvider_CFileUpdateStatus) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Status(pThis, value))
        }
    }
    public func put_Status(value : Windows.Storage.Provider.FileUpdateStatus) throws -> Void {
        try self._n_put_Status(value);
    }
    // Windows.Storage.Provider.FileUpdateRequestDeferral GetDeferral()
    private func _n_GetDeferral(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequestDeferral>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, __presult))
        }
    }
    public func GetDeferral() throws -> Optional<Windows.Storage.Provider.IFileUpdateRequestDeferral> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequestDeferral>> = nil;
        try self._n_GetDeferral(&__result);
        return Windows.Storage.Provider.IFileUpdateRequestDeferral(consuming: __result);
    }
    // void UpdateLocalFile(Windows.Storage.IStorageFile)
    private func _n_UpdateLocalFile(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFile>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateLocalFile(pThis, value))
        }
    }
    public func UpdateLocalFile(value : Optional<Windows.Storage.IStorageFile>) throws -> Void {
        try self._n_UpdateLocalFile(RawPointer(value));
    }
    public var ContentId : Swift.String {
        get throws {
            return try get_ContentId();
        }
    }
    public var File : Optional<Windows.Storage.IStorageFile> {
        get throws {
            return try get_File();
        }
    }
    public var Status : Windows.Storage.Provider.FileUpdateStatus {
        get throws {
            return try get_Status();
        }
    }
} // IFileUpdateRequest


// type: Windows.Storage.Provider.IFileUpdateRequest2
// interface type
open class IFileUpdateRequest2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x82484648, Data2: 0xbdbe, Data3 : 0x447b, Data4 : (0xa2, 0xee, 0x7a, 0xfe, 0x6a, 0x03, 0x2a, 0x94)) }
    // [IsSpecialName] System.String get_UserInputNeededMessage()
    private func _n_get_UserInputNeededMessage(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserInputNeededMessage(pThis, __presult))
        }
    }
    public func get_UserInputNeededMessage() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_UserInputNeededMessage(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_UserInputNeededMessage(System.String)
    private func _n_put_UserInputNeededMessage(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequest2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UserInputNeededMessage(pThis, value))
        }
    }
    public func put_UserInputNeededMessage(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_UserInputNeededMessage(__hstr_value.Raw());
        }
    }
    public var UserInputNeededMessage : Swift.String {
        get throws {
            return try get_UserInputNeededMessage();
        }
    }
} // IFileUpdateRequest2


// type: Windows.Storage.Provider.IFileUpdateRequestDeferral
// interface type
open class IFileUpdateRequestDeferral
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xffcedb2b, Data2: 0x8ade, Data3 : 0x44a5, Data4 : (0xbb, 0x00, 0x16, 0x4c, 0x4e, 0x72, 0xf1, 0x3a)) }
    // void Complete()
    private func _n_Complete() throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequestDeferral.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
        }
    }
    public func Complete() throws -> Void {
        try self._n_Complete();
    }
} // IFileUpdateRequestDeferral


// type: Windows.Storage.Provider.IFileUpdateRequestedEventArgs
// interface type
open class IFileUpdateRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7b0a9342, Data2: 0x3905, Data3 : 0x438d, Data4 : (0xaa, 0xef, 0x78, 0xae, 0x26, 0x5f, 0x8d, 0xd2)) }
    // [IsSpecialName] Windows.Storage.Provider.FileUpdateRequest get_Request()
    private func _n_get_Request(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequest>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIFileUpdateRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Request(pThis, __presult))
        }
    }
    public func get_Request() throws -> Optional<Windows.Storage.Provider.IFileUpdateRequest> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIFileUpdateRequest>> = nil;
        try self._n_get_Request(&__result);
        return Windows.Storage.Provider.IFileUpdateRequest(consuming: __result);
    }
    public var Request : Optional<Windows.Storage.Provider.IFileUpdateRequest> {
        get throws {
            return try get_Request();
        }
    }
} // IFileUpdateRequestedEventArgs


// type: Windows.Storage.Provider.IStorageProviderError
// interface type
open class IStorageProviderError
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x47f2780b, Data2: 0xef7f, Data3 : 0x5910, Data4 : (0xbf, 0x83, 0x33, 0x1d, 0x89, 0x25, 0x66, 0x15)) }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Title(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Message()
    private func _n_get_Message(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Message(pThis, __presult))
        }
    }
    public func get_Message() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Message(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_FilePath()
    private func _n_get_FilePath(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FilePath(pThis, __presult))
        }
    }
    public func get_FilePath() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FilePath(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_FilePath(System.String)
    private func _n_put_FilePath(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FilePath(pThis, value))
        }
    }
    public func put_FilePath(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_FilePath(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderErrorCommand get_PrimaryAction()
    private func _n_get_PrimaryAction(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrimaryAction(pThis, __presult))
        }
    }
    public func get_PrimaryAction() throws -> Optional<Windows.Storage.Provider.IStorageProviderErrorCommand> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>> = nil;
        try self._n_get_PrimaryAction(&__result);
        return Windows.Storage.Provider.IStorageProviderErrorCommand(consuming: __result);
    }
    // [IsSpecialName] void put_PrimaryAction(Windows.Storage.Provider.StorageProviderErrorCommand)
    private func _n_put_PrimaryAction(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrimaryAction(pThis, value))
        }
    }
    public func put_PrimaryAction(value : Optional<Windows.Storage.Provider.IStorageProviderErrorCommand>) throws -> Void {
        try self._n_put_PrimaryAction(RawPointer(value));
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderErrorCommand get_SecondaryAction()
    private func _n_get_SecondaryAction(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SecondaryAction(pThis, __presult))
        }
    }
    public func get_SecondaryAction() throws -> Optional<Windows.Storage.Provider.IStorageProviderErrorCommand> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>> = nil;
        try self._n_get_SecondaryAction(&__result);
        return Windows.Storage.Provider.IStorageProviderErrorCommand(consuming: __result);
    }
    // [IsSpecialName] void put_SecondaryAction(Windows.Storage.Provider.StorageProviderErrorCommand)
    private func _n_put_SecondaryAction(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SecondaryAction(pThis, value))
        }
    }
    public func put_SecondaryAction(value : Optional<Windows.Storage.Provider.IStorageProviderErrorCommand>) throws -> Void {
        try self._n_put_SecondaryAction(RawPointer(value));
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderErrorCommand get_InformationalLink()
    private func _n_get_InformationalLink(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InformationalLink(pThis, __presult))
        }
    }
    public func get_InformationalLink() throws -> Optional<Windows.Storage.Provider.IStorageProviderErrorCommand> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>> = nil;
        try self._n_get_InformationalLink(&__result);
        return Windows.Storage.Provider.IStorageProviderErrorCommand(consuming: __result);
    }
    // [IsSpecialName] void put_InformationalLink(Windows.Storage.Provider.StorageProviderErrorCommand)
    private func _n_put_InformationalLink(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderError.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InformationalLink(pThis, value))
        }
    }
    public func put_InformationalLink(value : Optional<Windows.Storage.Provider.IStorageProviderErrorCommand>) throws -> Void {
        try self._n_put_InformationalLink(RawPointer(value));
    }
    public var FilePath : Swift.String {
        get throws {
            return try get_FilePath();
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var InformationalLink : Optional<Windows.Storage.Provider.IStorageProviderErrorCommand> {
        get throws {
            return try get_InformationalLink();
        }
    }
    public var Message : Swift.String {
        get throws {
            return try get_Message();
        }
    }
    public var PrimaryAction : Optional<Windows.Storage.Provider.IStorageProviderErrorCommand> {
        get throws {
            return try get_PrimaryAction();
        }
    }
    public var SecondaryAction : Optional<Windows.Storage.Provider.IStorageProviderErrorCommand> {
        get throws {
            return try get_SecondaryAction();
        }
    }
    public var Title : Swift.String {
        get throws {
            return try get_Title();
        }
    }
} // IStorageProviderError


// type: Windows.Storage.Provider.IStorageProviderErrorCommand
// interface type
open class IStorageProviderErrorCommand
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6b18aed, Data2: 0xbb65, Data3 : 0x5f26, Data4 : (0x86, 0xe4, 0x1d, 0x3e, 0x34, 0xd5, 0x44, 0x77)) }
    // [IsSpecialName] System.String get_Label()
    private func _n_get_Label(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Label(pThis, __presult))
        }
    }
    public func get_Label() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Label(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_ActionUri()
    private func _n_get_ActionUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActionUri(pThis, __presult))
        }
    }
    public func get_ActionUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_ActionUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    public var ActionUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_ActionUri();
        }
    }
    public var Label : Swift.String {
        get throws {
            return try get_Label();
        }
    }
} // IStorageProviderErrorCommand


// type: Windows.Storage.Provider.IStorageProviderErrorCommandFactory
// interface type
// ACTIVATION INTERFACE
open class IStorageProviderErrorCommandFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xecc1f555, Data2: 0x3ab4, Data3 : 0x556f, Data4 : (0x8b, 0xb2, 0x7e, 0x55, 0x15, 0xee, 0xd8, 0xdc)) }
    // Windows.Storage.Provider.StorageProviderErrorCommand CreateInstance(System.String, Windows.Foundation.Uri)
    private func _n_CreateInstance(_ label : Optional<HSTRING>, _ actionUri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommandFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, label, actionUri, __presult))
        }
    }
    public func CreateInstance(label : Swift.String, actionUri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Windows.Storage.Provider.IStorageProviderErrorCommand> {
        let __hstr_label = try HString(label);
        return try withExtendedLifetime(__hstr_label) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderErrorCommand>> = nil;
        try self._n_CreateInstance(__hstr_label.Raw(), RawPointer(actionUri), &__result);
        return Windows.Storage.Provider.IStorageProviderErrorCommand(consuming: __result);
        }
    }
} // IStorageProviderErrorCommandFactory


// type: Windows.Storage.Provider.IStorageProviderErrorFactory
// interface type
// ACTIVATION INTERFACE
open class IStorageProviderErrorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x97d6f240, Data2: 0x61ab, Data3 : 0x51dc, Data4 : (0x99, 0x21, 0x18, 0xbd, 0x0d, 0xbe, 0xf7, 0x9e)) }
    // Windows.Storage.Provider.StorageProviderError CreateInstance(System.String, System.String, System.String)
    private func _n_CreateInstance(_ id : Optional<HSTRING>, _ title : Optional<HSTRING>, _ message : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderError>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderErrorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, id, title, message, __presult))
        }
    }
    public func CreateInstance(id : Swift.String, title : Swift.String, message : Swift.String) throws -> Optional<Windows.Storage.Provider.IStorageProviderError> {
        let __hstr_id = try HString(id);
        return try withExtendedLifetime(__hstr_id) {
        let __hstr_title = try HString(title);
        return try withExtendedLifetime(__hstr_title) {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderError>> = nil;
        try self._n_CreateInstance(__hstr_id.Raw(), __hstr_title.Raw(), __hstr_message.Raw(), &__result);
        return Windows.Storage.Provider.IStorageProviderError(consuming: __result);
        }
        }
        }
    }
} // IStorageProviderErrorFactory


// type: Windows.Storage.Provider.IStorageProviderFileTypeInfo
// interface type
open class IStorageProviderFileTypeInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1955b9c1, Data2: 0x0184, Data3 : 0x5a88, Data4 : (0x87, 0xdf, 0x45, 0x44, 0xf4, 0x64, 0x36, 0x5d)) }
    // [IsSpecialName] System.String get_FileExtension()
    private func _n_get_FileExtension(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderFileTypeInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileExtension(pThis, __presult))
        }
    }
    public func get_FileExtension() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FileExtension(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_IconResource()
    private func _n_get_IconResource(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderFileTypeInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconResource(pThis, __presult))
        }
    }
    public func get_IconResource() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_IconResource(&__result);
        return Swift.String(from: __result);
    }
    public var FileExtension : Swift.String {
        get throws {
            return try get_FileExtension();
        }
    }
    public var IconResource : Swift.String {
        get throws {
            return try get_IconResource();
        }
    }
} // IStorageProviderFileTypeInfo


// type: Windows.Storage.Provider.IStorageProviderFileTypeInfoFactory
// interface type
// ACTIVATION INTERFACE
open class IStorageProviderFileTypeInfoFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3fa12c6f, Data2: 0xcce6, Data3 : 0x5d5d, Data4 : (0x80, 0xb1, 0x38, 0x9e, 0x7c, 0xf9, 0x2d, 0xbf)) }
    // Windows.Storage.Provider.StorageProviderFileTypeInfo CreateInstance(System.String, System.String)
    private func _n_CreateInstance(_ fileExtension : Optional<HSTRING>, _ iconResource : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderFileTypeInfo>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderFileTypeInfoFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, fileExtension, iconResource, __presult))
        }
    }
    public func CreateInstance(fileExtension : Swift.String, iconResource : Swift.String) throws -> Optional<Windows.Storage.Provider.IStorageProviderFileTypeInfo> {
        let __hstr_fileExtension = try HString(fileExtension);
        return try withExtendedLifetime(__hstr_fileExtension) {
        let __hstr_iconResource = try HString(iconResource);
        return try withExtendedLifetime(__hstr_iconResource) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderFileTypeInfo>> = nil;
        try self._n_CreateInstance(__hstr_fileExtension.Raw(), __hstr_iconResource.Raw(), &__result);
        return Windows.Storage.Provider.IStorageProviderFileTypeInfo(consuming: __result);
        }
        }
    }
} // IStorageProviderFileTypeInfoFactory


// type: Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult
// interface type
open class IStorageProviderGetContentInfoForPathResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2564711d, Data2: 0xaa89, Data3 : 0x4d12, Data4 : (0x82, 0xe3, 0xf7, 0x2a, 0x92, 0xe3, 0x39, 0x66)) }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderUriSourceStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetContentInfoForPathResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Storage.Provider.StorageProviderUriSourceStatus {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus = _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Status(Windows.Storage.Provider.StorageProviderUriSourceStatus)
    private func _n_put_Status(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetContentInfoForPathResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Status(pThis, value))
        }
    }
    public func put_Status(value : Windows.Storage.Provider.StorageProviderUriSourceStatus) throws -> Void {
        try self._n_put_Status(value);
    }
    // [IsSpecialName] System.String get_ContentUri()
    private func _n_get_ContentUri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetContentInfoForPathResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentUri(pThis, __presult))
        }
    }
    public func get_ContentUri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ContentUri(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_ContentUri(System.String)
    private func _n_put_ContentUri(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetContentInfoForPathResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentUri(pThis, value))
        }
    }
    public func put_ContentUri(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_ContentUri(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_ContentId()
    private func _n_get_ContentId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetContentInfoForPathResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentId(pThis, __presult))
        }
    }
    public func get_ContentId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ContentId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_ContentId(System.String)
    private func _n_put_ContentId(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetContentInfoForPathResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentId(pThis, value))
        }
    }
    public func put_ContentId(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_ContentId(__hstr_value.Raw());
        }
    }
    public var ContentId : Swift.String {
        get throws {
            return try get_ContentId();
        }
    }
    public var ContentUri : Swift.String {
        get throws {
            return try get_ContentUri();
        }
    }
    public var Status : Windows.Storage.Provider.StorageProviderUriSourceStatus {
        get throws {
            return try get_Status();
        }
    }
} // IStorageProviderGetContentInfoForPathResult


// type: Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult
// interface type
open class IStorageProviderGetPathForContentUriResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x63711a9d, Data2: 0x4118, Data3 : 0x45a6, Data4 : (0xac, 0xb6, 0x22, 0xc4, 0x9d, 0x01, 0x9f, 0x40)) }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderUriSourceStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetPathForContentUriResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Storage.Provider.StorageProviderUriSourceStatus {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus = _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus_Success;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Status(Windows.Storage.Provider.StorageProviderUriSourceStatus)
    private func _n_put_Status(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetPathForContentUriResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Status(pThis, value))
        }
    }
    public func put_Status(value : Windows.Storage.Provider.StorageProviderUriSourceStatus) throws -> Void {
        try self._n_put_Status(value);
    }
    // [IsSpecialName] System.String get_Path()
    private func _n_get_Path(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetPathForContentUriResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Path(pThis, __presult))
        }
    }
    public func get_Path() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Path(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Path(System.String)
    private func _n_put_Path(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderGetPathForContentUriResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Path(pThis, value))
        }
    }
    public func put_Path(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Path(__hstr_value.Raw());
        }
    }
    public var Path : Swift.String {
        get throws {
            return try get_Path();
        }
    }
    public var Status : Windows.Storage.Provider.StorageProviderUriSourceStatus {
        get throws {
            return try get_Status();
        }
    }
} // IStorageProviderGetPathForContentUriResult


// type: Windows.Storage.Provider.IStorageProviderItemPropertiesStatics
// interface type
open class IStorageProviderItemPropertiesStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2d2c1c97, Data2: 0x2704, Data3 : 0x4729, Data4 : (0x8f, 0xa9, 0x7e, 0x6b, 0x8e, 0x15, 0x8c, 0x2f)) }
    // Windows.Foundation.IAsyncAction SetAsync(Windows.Storage.IStorageItem, Windows.Foundation.Collections.IIterable<Windows.Storage.Provider.StorageProviderItemProperty>)
    private func _n_SetAsync(_ item : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageItem>>, _ itemProperties : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderItemProperty>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemPropertiesStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAsync(pThis, item, itemProperties, __presult))
        }
    }
    public func SetAsync(item : Optional<Windows.Storage.IStorageItem>, itemProperties : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderItemProperty>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_SetAsync(RawPointer(item), RawPointer(itemProperties), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Set(item : Optional<Windows.Storage.IStorageItem>, itemProperties : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderItemProperty>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetAsync(item: item, itemProperties: itemProperties)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IStorageProviderItemPropertiesStatics


// type: Windows.Storage.Provider.IStorageProviderItemProperty
// interface type
open class IStorageProviderItemProperty
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x476cb558, Data2: 0x730b, Data3 : 0x4188, Data4 : (0xb7, 0xb5, 0x63, 0xb7, 0x16, 0xed, 0x47, 0x6d)) }
    // [IsSpecialName] void put_Id(System.Int32)
    private func _n_put_Id(_ value : INT32) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemProperty.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
        }
    }
    public func put_Id(value : Swift.Int32) throws -> Void {
        try self._n_put_Id(value);
    }
    // [IsSpecialName] System.Int32 get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemProperty.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Id(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Value(System.String)
    private func _n_put_Value(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemProperty.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
        }
    }
    public func put_Value(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Value(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemProperty.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Value(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_IconResource(System.String)
    private func _n_put_IconResource(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemProperty.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconResource(pThis, value))
        }
    }
    public func put_IconResource(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_IconResource(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_IconResource()
    private func _n_get_IconResource(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemProperty.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconResource(pThis, __presult))
        }
    }
    public func get_IconResource() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_IconResource(&__result);
        return Swift.String(from: __result);
    }
    public var IconResource : Swift.String {
        get throws {
            return try get_IconResource();
        }
    }
    public var Id : Swift.Int32 {
        get throws {
            return try get_Id();
        }
    }
    public var Value : Swift.String {
        get throws {
            return try get_Value();
        }
    }
} // IStorageProviderItemProperty


// type: Windows.Storage.Provider.IStorageProviderItemPropertyDefinition
// interface type
open class IStorageProviderItemPropertyDefinition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc5b383bb, Data2: 0xff1f, Data3 : 0x4298, Data4 : (0x83, 0x1e, 0xff, 0x1c, 0x08, 0x08, 0x96, 0x90)) }
    // [IsSpecialName] System.Int32 get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemPropertyDefinition.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_Id(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Id(System.Int32)
    private func _n_put_Id(_ value : INT32) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemPropertyDefinition.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
        }
    }
    public func put_Id(value : Swift.Int32) throws -> Void {
        try self._n_put_Id(value);
    }
    // [IsSpecialName] System.String get_DisplayNameResource()
    private func _n_get_DisplayNameResource(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemPropertyDefinition.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayNameResource(pThis, __presult))
        }
    }
    public func get_DisplayNameResource() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayNameResource(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_DisplayNameResource(System.String)
    private func _n_put_DisplayNameResource(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderItemPropertyDefinition.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayNameResource(pThis, value))
        }
    }
    public func put_DisplayNameResource(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DisplayNameResource(__hstr_value.Raw());
        }
    }
    public var DisplayNameResource : Swift.String {
        get throws {
            return try get_DisplayNameResource();
        }
    }
    public var Id : Swift.Int32 {
        get throws {
            return try get_Id();
        }
    }
} // IStorageProviderItemPropertyDefinition


// type: Windows.Storage.Provider.IStorageProviderStatus
// interface type
open class IStorageProviderStatus
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xff6e761d, Data2: 0xfb8b, Data3 : 0x56c3, Data4 : (0x9e, 0x7a, 0x05, 0x30, 0x9d, 0x19, 0x1f, 0xb4)) }
    // [IsSpecialName] System.String get_Message()
    private func _n_get_Message(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Message(pThis, __presult))
        }
    }
    public func get_Message() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Message(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderState get_State()
    private func _n_get_State(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderState>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, __presult))
        }
    }
    public func get_State() throws -> Windows.Storage.Provider.StorageProviderState {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderState = _q_CWindows_CStorage_CProvider_CStorageProviderState_InSync;
        try self._n_get_State(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Storage.Provider.StorageProviderError> get_ErrorMessages()
    private func _n_get_ErrorMessages(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderError>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ErrorMessages(pThis, __presult))
        }
    }
    public func get_ErrorMessages() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderError> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderError>> = nil;
        try self._n_get_ErrorMessages(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderError(consuming: __result);
    }
    public var ErrorMessages : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderError> {
        get throws {
            return try get_ErrorMessages();
        }
    }
    public var Message : Swift.String {
        get throws {
            return try get_Message();
        }
    }
    public var State : Windows.Storage.Provider.StorageProviderState {
        get throws {
            return try get_State();
        }
    }
} // IStorageProviderStatus


// type: Windows.Storage.Provider.IStorageProviderStatusFactory
// interface type
// ACTIVATION INTERFACE
open class IStorageProviderStatusFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd64828c5, Data2: 0x9b7a, Data3 : 0x5fa4, Data4 : (0xb1, 0x26, 0x90, 0xbd, 0x18, 0x93, 0x6c, 0x7f)) }
    // Windows.Storage.Provider.StorageProviderStatus CreateInstance(Windows.Storage.Provider.StorageProviderState, System.String)
    private func _n_CreateInstance(_ state : _q_CWindows_CStorage_CProvider_CStorageProviderState, _ message : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderStatus>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderStatusFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, state, message, __presult))
        }
    }
    public func CreateInstance(state : Windows.Storage.Provider.StorageProviderState, message : Swift.String) throws -> Optional<Windows.Storage.Provider.IStorageProviderStatus> {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderStatus>> = nil;
        try self._n_CreateInstance(state, __hstr_message.Raw(), &__result);
        return Windows.Storage.Provider.IStorageProviderStatus(consuming: __result);
        }
    }
    // Windows.Storage.Provider.StorageProviderStatus CreateInstance2(Windows.Storage.Provider.StorageProviderState, System.String, Windows.Foundation.Collections.IIterable<Windows.Storage.Provider.StorageProviderError>)
    private func _n_CreateInstance2(_ state : _q_CWindows_CStorage_CProvider_CStorageProviderState, _ message : Optional<HSTRING>, _ errorMessages : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderError>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderStatus>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderStatusFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance2(pThis, state, message, errorMessages, __presult))
        }
    }
    public func CreateInstance2(state : Windows.Storage.Provider.StorageProviderState, message : Swift.String, errorMessages : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderError>) throws -> Optional<Windows.Storage.Provider.IStorageProviderStatus> {
        let __hstr_message = try HString(message);
        return try withExtendedLifetime(__hstr_message) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderStatus>> = nil;
        try self._n_CreateInstance2(state, __hstr_message.Raw(), RawPointer(errorMessages), &__result);
        return Windows.Storage.Provider.IStorageProviderStatus(consuming: __result);
        }
    }
} // IStorageProviderStatusFactory


// type: Windows.Storage.Provider.IStorageProviderSyncRootInfo
// interface type
open class IStorageProviderSyncRootInfo
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7c1305c4, Data2: 0x99f9, Data3 : 0x41ac, Data4 : (0x89, 0x04, 0xab, 0x05, 0x5d, 0x65, 0x49, 0x26)) }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Id(System.String)
    private func _n_put_Id(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Id(pThis, value))
        }
    }
    public func put_Id(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Id(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_Context()
    private func _n_get_Context(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Context(pThis, __presult))
        }
    }
    public func get_Context() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Context(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // [IsSpecialName] void put_Context(Windows.Storage.Streams.IBuffer)
    private func _n_put_Context(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Context(pThis, value))
        }
    }
    public func put_Context(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        try self._n_put_Context(RawPointer(value));
    }
    // [IsSpecialName] Windows.Storage.IStorageFolder get_Path()
    private func _n_get_Path(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Path(pThis, __presult))
        }
    }
    public func get_Path() throws -> Optional<Windows.Storage.IStorageFolder> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>> = nil;
        try self._n_get_Path(&__result);
        return Windows.Storage.IStorageFolder(consuming: __result);
    }
    // [IsSpecialName] void put_Path(Windows.Storage.IStorageFolder)
    private func _n_put_Path(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Path(pThis, value))
        }
    }
    public func put_Path(value : Optional<Windows.Storage.IStorageFolder>) throws -> Void {
        try self._n_put_Path(RawPointer(value));
    }
    // [IsSpecialName] System.String get_DisplayNameResource()
    private func _n_get_DisplayNameResource(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayNameResource(pThis, __presult))
        }
    }
    public func get_DisplayNameResource() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DisplayNameResource(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_DisplayNameResource(System.String)
    private func _n_put_DisplayNameResource(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DisplayNameResource(pThis, value))
        }
    }
    public func put_DisplayNameResource(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DisplayNameResource(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_IconResource()
    private func _n_get_IconResource(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IconResource(pThis, __presult))
        }
    }
    public func get_IconResource() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_IconResource(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_IconResource(System.String)
    private func _n_put_IconResource(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IconResource(pThis, value))
        }
    }
    public func put_IconResource(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_IconResource(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderHydrationPolicy get_HydrationPolicy()
    private func _n_get_HydrationPolicy(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HydrationPolicy(pThis, __presult))
        }
    }
    public func get_HydrationPolicy() throws -> Windows.Storage.Provider.StorageProviderHydrationPolicy {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy_Partial;
        try self._n_get_HydrationPolicy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HydrationPolicy(Windows.Storage.Provider.StorageProviderHydrationPolicy)
    private func _n_put_HydrationPolicy(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HydrationPolicy(pThis, value))
        }
    }
    public func put_HydrationPolicy(value : Windows.Storage.Provider.StorageProviderHydrationPolicy) throws -> Void {
        try self._n_put_HydrationPolicy(value);
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderHydrationPolicyModifier get_HydrationPolicyModifier()
    private func _n_get_HydrationPolicyModifier(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HydrationPolicyModifier(pThis, __presult))
        }
    }
    public func get_HydrationPolicyModifier() throws -> Windows.Storage.Provider.StorageProviderHydrationPolicyModifier {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier = _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier_None;
        try self._n_get_HydrationPolicyModifier(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HydrationPolicyModifier(Windows.Storage.Provider.StorageProviderHydrationPolicyModifier)
    private func _n_put_HydrationPolicyModifier(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HydrationPolicyModifier(pThis, value))
        }
    }
    public func put_HydrationPolicyModifier(value : Windows.Storage.Provider.StorageProviderHydrationPolicyModifier) throws -> Void {
        try self._n_put_HydrationPolicyModifier(value);
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderPopulationPolicy get_PopulationPolicy()
    private func _n_get_PopulationPolicy(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderPopulationPolicy>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PopulationPolicy(pThis, __presult))
        }
    }
    public func get_PopulationPolicy() throws -> Windows.Storage.Provider.StorageProviderPopulationPolicy {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderPopulationPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderPopulationPolicy_Full;
        try self._n_get_PopulationPolicy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_PopulationPolicy(Windows.Storage.Provider.StorageProviderPopulationPolicy)
    private func _n_put_PopulationPolicy(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderPopulationPolicy) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PopulationPolicy(pThis, value))
        }
    }
    public func put_PopulationPolicy(value : Windows.Storage.Provider.StorageProviderPopulationPolicy) throws -> Void {
        try self._n_put_PopulationPolicy(value);
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderInSyncPolicy get_InSyncPolicy()
    private func _n_get_InSyncPolicy(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InSyncPolicy(pThis, __presult))
        }
    }
    public func get_InSyncPolicy() throws -> Windows.Storage.Provider.StorageProviderInSyncPolicy {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_Default;
        try self._n_get_InSyncPolicy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InSyncPolicy(Windows.Storage.Provider.StorageProviderInSyncPolicy)
    private func _n_put_InSyncPolicy(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InSyncPolicy(pThis, value))
        }
    }
    public func put_InSyncPolicy(value : Windows.Storage.Provider.StorageProviderInSyncPolicy) throws -> Void {
        try self._n_put_InSyncPolicy(value);
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderHardlinkPolicy get_HardlinkPolicy()
    private func _n_get_HardlinkPolicy(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderHardlinkPolicy>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HardlinkPolicy(pThis, __presult))
        }
    }
    public func get_HardlinkPolicy() throws -> Windows.Storage.Provider.StorageProviderHardlinkPolicy {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderHardlinkPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderHardlinkPolicy_None;
        try self._n_get_HardlinkPolicy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HardlinkPolicy(Windows.Storage.Provider.StorageProviderHardlinkPolicy)
    private func _n_put_HardlinkPolicy(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderHardlinkPolicy) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HardlinkPolicy(pThis, value))
        }
    }
    public func put_HardlinkPolicy(value : Windows.Storage.Provider.StorageProviderHardlinkPolicy) throws -> Void {
        try self._n_put_HardlinkPolicy(value);
    }
    // [IsSpecialName] bool get_ShowSiblingsAsGroup()
    private func _n_get_ShowSiblingsAsGroup(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShowSiblingsAsGroup(pThis, __presult))
        }
    }
    public func get_ShowSiblingsAsGroup() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ShowSiblingsAsGroup(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ShowSiblingsAsGroup(bool)
    private func _n_put_ShowSiblingsAsGroup(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShowSiblingsAsGroup(pThis, value))
        }
    }
    public func put_ShowSiblingsAsGroup(value : boolean) throws -> Void {
        try self._n_put_ShowSiblingsAsGroup(value);
    }
    // [IsSpecialName] System.String get_Version()
    private func _n_get_Version(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Version(pThis, __presult))
        }
    }
    public func get_Version() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Version(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Version(System.String)
    private func _n_put_Version(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Version(pThis, value))
        }
    }
    public func put_Version(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Version(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Storage.Provider.StorageProviderProtectionMode get_ProtectionMode()
    private func _n_get_ProtectionMode(_ __presult: UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CStorageProviderProtectionMode>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProtectionMode(pThis, __presult))
        }
    }
    public func get_ProtectionMode() throws -> Windows.Storage.Provider.StorageProviderProtectionMode {
        var __result : _q_CWindows_CStorage_CProvider_CStorageProviderProtectionMode = _q_CWindows_CStorage_CProvider_CStorageProviderProtectionMode_Unknown;
        try self._n_get_ProtectionMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ProtectionMode(Windows.Storage.Provider.StorageProviderProtectionMode)
    private func _n_put_ProtectionMode(_ value : _q_CWindows_CStorage_CProvider_CStorageProviderProtectionMode) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProtectionMode(pThis, value))
        }
    }
    public func put_ProtectionMode(value : Windows.Storage.Provider.StorageProviderProtectionMode) throws -> Void {
        try self._n_put_ProtectionMode(value);
    }
    // [IsSpecialName] bool get_AllowPinning()
    private func _n_get_AllowPinning(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowPinning(pThis, __presult))
        }
    }
    public func get_AllowPinning() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AllowPinning(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AllowPinning(bool)
    private func _n_put_AllowPinning(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowPinning(pThis, value))
        }
    }
    public func put_AllowPinning(value : boolean) throws -> Void {
        try self._n_put_AllowPinning(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Storage.Provider.StorageProviderItemPropertyDefinition> get_StorageProviderItemPropertyDefinitions()
    private func _n_get_StorageProviderItemPropertyDefinitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderItemPropertyDefinition>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StorageProviderItemPropertyDefinitions(pThis, __presult))
        }
    }
    public func get_StorageProviderItemPropertyDefinitions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderItemPropertyDefinition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderItemPropertyDefinition>> = nil;
        try self._n_get_StorageProviderItemPropertyDefinitions(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderItemPropertyDefinition(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_RecycleBinUri()
    private func _n_get_RecycleBinUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RecycleBinUri(pThis, __presult))
        }
    }
    public func get_RecycleBinUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_RecycleBinUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_RecycleBinUri(Windows.Foundation.Uri)
    private func _n_put_RecycleBinUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RecycleBinUri(pThis, value))
        }
    }
    public func put_RecycleBinUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_RecycleBinUri(RawPointer(value));
    }
    public var AllowPinning : boolean {
        get throws {
            return try get_AllowPinning();
        }
    }
    public var Context : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Context();
        }
    }
    public var DisplayNameResource : Swift.String {
        get throws {
            return try get_DisplayNameResource();
        }
    }
    public var HardlinkPolicy : Windows.Storage.Provider.StorageProviderHardlinkPolicy {
        get throws {
            return try get_HardlinkPolicy();
        }
    }
    public var HydrationPolicy : Windows.Storage.Provider.StorageProviderHydrationPolicy {
        get throws {
            return try get_HydrationPolicy();
        }
    }
    public var HydrationPolicyModifier : Windows.Storage.Provider.StorageProviderHydrationPolicyModifier {
        get throws {
            return try get_HydrationPolicyModifier();
        }
    }
    public var IconResource : Swift.String {
        get throws {
            return try get_IconResource();
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var InSyncPolicy : Windows.Storage.Provider.StorageProviderInSyncPolicy {
        get throws {
            return try get_InSyncPolicy();
        }
    }
    public var Path : Optional<Windows.Storage.IStorageFolder> {
        get throws {
            return try get_Path();
        }
    }
    public var PopulationPolicy : Windows.Storage.Provider.StorageProviderPopulationPolicy {
        get throws {
            return try get_PopulationPolicy();
        }
    }
    public var ProtectionMode : Windows.Storage.Provider.StorageProviderProtectionMode {
        get throws {
            return try get_ProtectionMode();
        }
    }
    public var RecycleBinUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_RecycleBinUri();
        }
    }
    public var ShowSiblingsAsGroup : boolean {
        get throws {
            return try get_ShowSiblingsAsGroup();
        }
    }
    public var StorageProviderItemPropertyDefinitions : Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderItemPropertyDefinition> {
        get throws {
            return try get_StorageProviderItemPropertyDefinitions();
        }
    }
    public var Version : Swift.String {
        get throws {
            return try get_Version();
        }
    }
} // IStorageProviderSyncRootInfo


// type: Windows.Storage.Provider.IStorageProviderSyncRootInfo2
// interface type
open class IStorageProviderSyncRootInfo2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcf51b023, Data2: 0x7cf1, Data3 : 0x5166, Data4 : (0xbd, 0xba, 0xef, 0xd9, 0x5f, 0x52, 0x9e, 0x31)) }
    // [IsSpecialName] System.Guid get_ProviderId()
    private func _n_get_ProviderId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProviderId(pThis, __presult))
        }
    }
    public func get_ProviderId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_ProviderId(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ProviderId(System.Guid)
    private func _n_put_ProviderId(_ value : GUID) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProviderId(pThis, value))
        }
    }
    public func put_ProviderId(value : GUID) throws -> Void {
        try self._n_put_ProviderId(value);
    }
    public var ProviderId : GUID {
        get throws {
            return try get_ProviderId();
        }
    }
} // IStorageProviderSyncRootInfo2


// type: Windows.Storage.Provider.IStorageProviderSyncRootInfo3
// interface type
open class IStorageProviderSyncRootInfo3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x507a6617, Data2: 0xbef6, Data3 : 0x56fd, Data4 : (0x85, 0x5e, 0x75, 0xac, 0xe2, 0xe4, 0x5c, 0xf5)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Storage.Provider.StorageProviderFileTypeInfo> get_FallbackFileTypeInfo()
    private func _n_get_FallbackFileTypeInfo(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderFileTypeInfo>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FallbackFileTypeInfo(pThis, __presult))
        }
    }
    public func get_FallbackFileTypeInfo() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderFileTypeInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderFileTypeInfo>> = nil;
        try self._n_get_FallbackFileTypeInfo(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderFileTypeInfo(consuming: __result);
    }
    public var FallbackFileTypeInfo : Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderFileTypeInfo> {
        get throws {
            return try get_FallbackFileTypeInfo();
        }
    }
} // IStorageProviderSyncRootInfo3


// type: Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics
// interface type
open class IStorageProviderSyncRootManagerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3e99fbbf, Data2: 0x8fe3, Data3 : 0x4b40, Data4 : (0xab, 0xc7, 0xf6, 0xfc, 0x3d, 0x74, 0xc9, 0x8e)) }
    // void Register(Windows.Storage.Provider.StorageProviderSyncRootInfo)
    private func _n_Register(_ syncRootInformation : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo>>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Register(pThis, syncRootInformation))
        }
    }
    public func Register(syncRootInformation : Optional<Windows.Storage.Provider.IStorageProviderSyncRootInfo>) throws -> Void {
        try self._n_Register(RawPointer(syncRootInformation));
    }
    // void Unregister(System.String)
    private func _n_Unregister(_ id : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Unregister(pThis, id))
        }
    }
    public func Unregister(id : Swift.String) throws -> Void {
        let __hstr_id = try HString(id);
        return try withExtendedLifetime(__hstr_id) {
        try self._n_Unregister(__hstr_id.Raw());
        }
    }
    // Windows.Storage.Provider.StorageProviderSyncRootInfo GetSyncRootInformationForFolder(Windows.Storage.IStorageFolder)
    private func _n_GetSyncRootInformationForFolder(_ folder : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CIStorageFolder>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSyncRootInformationForFolder(pThis, folder, __presult))
        }
    }
    public func GetSyncRootInformationForFolder(folder : Optional<Windows.Storage.IStorageFolder>) throws -> Optional<Windows.Storage.Provider.IStorageProviderSyncRootInfo> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo>> = nil;
        try self._n_GetSyncRootInformationForFolder(RawPointer(folder), &__result);
        return Windows.Storage.Provider.IStorageProviderSyncRootInfo(consuming: __result);
    }
    // Windows.Storage.Provider.StorageProviderSyncRootInfo GetSyncRootInformationForId(System.String)
    private func _n_GetSyncRootInformationForId(_ id : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSyncRootInformationForId(pThis, id, __presult))
        }
    }
    public func GetSyncRootInformationForId(id : Swift.String) throws -> Optional<Windows.Storage.Provider.IStorageProviderSyncRootInfo> {
        let __hstr_id = try HString(id);
        return try withExtendedLifetime(__hstr_id) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootInfo>> = nil;
        try self._n_GetSyncRootInformationForId(__hstr_id.Raw(), &__result);
        return Windows.Storage.Provider.IStorageProviderSyncRootInfo(consuming: __result);
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Storage.Provider.StorageProviderSyncRootInfo> GetCurrentSyncRoots()
    private func _n_GetCurrentSyncRoots(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderSyncRootInfo>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCurrentSyncRoots(pThis, __presult))
        }
    }
    public func GetCurrentSyncRoots() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderSyncRootInfo> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderSyncRootInfo>> = nil;
        try self._n_GetCurrentSyncRoots(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderSyncRootInfo(consuming: __result);
    }
} // IStorageProviderSyncRootManagerStatics


// type: Windows.Storage.Provider.IStorageProviderSyncRootManagerStatics2
// interface type
open class IStorageProviderSyncRootManagerStatics2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefb6cfee, Data2: 0x1374, Data3 : 0x544e, Data4 : (0x9d, 0xf1, 0x55, 0x98, 0xd2, 0xe9, 0xcf, 0xdd)) }
    // bool IsSupported()
    private func _n_IsSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CStorage_CProvider_CIStorageProviderSyncRootManagerStatics2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, __presult))
        }
    }
    public func IsSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsSupported(&__result);
        return __result;
    }
} // IStorageProviderSyncRootManagerStatics2


// type: Windows.Storage.Provider.ReadActivationMode
// enum type
public typealias ReadActivationMode = _q_CWindows_CStorage_CProvider_CReadActivationMode;

// type: Windows.Storage.Provider.StorageProviderError
// runtime class
public class StorageProviderError
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderError;
    public init(plok: Windows.Storage.Provider.IStorageProviderError?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderError { return _self; }
    public init(id : Swift.String, title : Swift.String, message : Swift.String) throws {
        let _af : IStorageProviderErrorFactory = try RoGetActivationFactory("Windows.Storage.Provider.StorageProviderError");
        _self = try _af.CreateInstance(id: id, title: title, message: message)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_Title() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func get_Message() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.get_Message();
    }
    public func get_FilePath() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.get_FilePath();
    }
    public func put_FilePath(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.put_FilePath(value: value);
    }
    public func get_PrimaryAction() throws -> Optional<Windows.Storage.Provider.StorageProviderErrorCommand> {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try Windows.Storage.Provider.StorageProviderErrorCommand(plok: _ifc.get_PrimaryAction());
    }
    public func put_PrimaryAction(value : Optional<Windows.Storage.Provider.StorageProviderErrorCommand>) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.put_PrimaryAction(value: value!.Interface());
    }
    public func get_SecondaryAction() throws -> Optional<Windows.Storage.Provider.StorageProviderErrorCommand> {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try Windows.Storage.Provider.StorageProviderErrorCommand(plok: _ifc.get_SecondaryAction());
    }
    public func put_SecondaryAction(value : Optional<Windows.Storage.Provider.StorageProviderErrorCommand>) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.put_SecondaryAction(value: value!.Interface());
    }
    public func get_InformationalLink() throws -> Optional<Windows.Storage.Provider.StorageProviderErrorCommand> {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try Windows.Storage.Provider.StorageProviderErrorCommand(plok: _ifc.get_InformationalLink());
    }
    public func put_InformationalLink(value : Optional<Windows.Storage.Provider.StorageProviderErrorCommand>) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.put_InformationalLink(value: value!.Interface());
    }
    public var FilePath : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.FilePath;
        }
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var InformationalLink : Optional<Windows.Storage.Provider.StorageProviderErrorCommand> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try Windows.Storage.Provider.StorageProviderErrorCommand(plok: _ifc.InformationalLink);
        }
    }
    public var Message : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.Message;
        }
    }
    public var PrimaryAction : Optional<Windows.Storage.Provider.StorageProviderErrorCommand> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try Windows.Storage.Provider.StorageProviderErrorCommand(plok: _ifc.PrimaryAction);
        }
    }
    public var SecondaryAction : Optional<Windows.Storage.Provider.StorageProviderErrorCommand> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try Windows.Storage.Provider.StorageProviderErrorCommand(plok: _ifc.SecondaryAction);
        }
    }
    public var Title : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderError = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderErrorCommand
// runtime class
public class StorageProviderErrorCommand
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderErrorCommand;
    public init(plok: Windows.Storage.Provider.IStorageProviderErrorCommand?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderErrorCommand { return _self; }
    public init(label : Swift.String, actionUri : Optional<Windows.Foundation.Uri>) throws {
        let _af : IStorageProviderErrorCommandFactory = try RoGetActivationFactory("Windows.Storage.Provider.StorageProviderErrorCommand");
        _self = try _af.CreateInstance(label: label, actionUri: actionUri!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Label() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderErrorCommand = try _self.QueryInterface();
        return try _ifc.get_Label();
    }
    public func get_ActionUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Storage.Provider.IStorageProviderErrorCommand = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_ActionUri());
    }
    public var ActionUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderErrorCommand = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.ActionUri);
        }
    }
    public var Label : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderErrorCommand = try _self.QueryInterface();
        return try _ifc.Label;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderFileTypeInfo
// runtime class
public class StorageProviderFileTypeInfo
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderFileTypeInfo;
    public init(plok: Windows.Storage.Provider.IStorageProviderFileTypeInfo?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderFileTypeInfo { return _self; }
    public init(fileExtension : Swift.String, iconResource : Swift.String) throws {
        let _af : IStorageProviderFileTypeInfoFactory = try RoGetActivationFactory("Windows.Storage.Provider.StorageProviderFileTypeInfo");
        _self = try _af.CreateInstance(fileExtension: fileExtension, iconResource: iconResource)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_FileExtension() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderFileTypeInfo = try _self.QueryInterface();
        return try _ifc.get_FileExtension();
    }
    public func get_IconResource() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderFileTypeInfo = try _self.QueryInterface();
        return try _ifc.get_IconResource();
    }
    public var FileExtension : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderFileTypeInfo = try _self.QueryInterface();
        return try _ifc.FileExtension;
        }
    }
    public var IconResource : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderFileTypeInfo = try _self.QueryInterface();
        return try _ifc.IconResource;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderGetContentInfoForPathResult
// runtime class
public class StorageProviderGetContentInfoForPathResult
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult;
    public init(plok: Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Provider.StorageProviderGetContentInfoForPathResult")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Status() throws -> Windows.Storage.Provider.StorageProviderUriSourceStatus {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func put_Status(value : Windows.Storage.Provider.StorageProviderUriSourceStatus) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.put_Status(value: value);
    }
    public func get_ContentUri() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.get_ContentUri();
    }
    public func put_ContentUri(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.put_ContentUri(value: value);
    }
    public func get_ContentId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.get_ContentId();
    }
    public func put_ContentId(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.put_ContentId(value: value);
    }
    public var ContentId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.ContentId;
        }
    }
    public var ContentUri : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.ContentUri;
        }
    }
    public var Status : Windows.Storage.Provider.StorageProviderUriSourceStatus {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetContentInfoForPathResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderGetPathForContentUriResult
// runtime class
public class StorageProviderGetPathForContentUriResult
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult;
    public init(plok: Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Provider.StorageProviderGetPathForContentUriResult")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Status() throws -> Windows.Storage.Provider.StorageProviderUriSourceStatus {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func put_Status(value : Windows.Storage.Provider.StorageProviderUriSourceStatus) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult = try _self.QueryInterface();
        return try _ifc.put_Status(value: value);
    }
    public func get_Path() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult = try _self.QueryInterface();
        return try _ifc.get_Path();
    }
    public func put_Path(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult = try _self.QueryInterface();
        return try _ifc.put_Path(value: value);
    }
    public var Path : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult = try _self.QueryInterface();
        return try _ifc.Path;
        }
    }
    public var Status : Windows.Storage.Provider.StorageProviderUriSourceStatus {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderGetPathForContentUriResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderHardlinkPolicy
// enum type
public typealias StorageProviderHardlinkPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderHardlinkPolicy;

// type: Windows.Storage.Provider.StorageProviderHydrationPolicy
// enum type
public typealias StorageProviderHydrationPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy;

// type: Windows.Storage.Provider.StorageProviderHydrationPolicyModifier
// enum type
public typealias StorageProviderHydrationPolicyModifier = _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier;

// type: Windows.Storage.Provider.StorageProviderInSyncPolicy
// enum type
public typealias StorageProviderInSyncPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy;

// type: Windows.Storage.Provider.StorageProviderItemProperties
// static class
public class StorageProviderItemProperties
{
    private struct _IStorageProviderItemPropertiesStatics {
        static var x : IStorageProviderItemPropertiesStatics =
            try! RoGetActivationFactory("Windows.Storage.Provider.StorageProviderItemProperties")
    }
    public static var StorageProviderItemPropertiesStatics : IStorageProviderItemPropertiesStatics {
        _IStorageProviderItemPropertiesStatics.x
    }
    public static func SetAsync(item : Optional<Windows.Storage.IStorageItem>, itemProperties : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderItemProperty>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        return try StorageProviderItemPropertiesStatics.SetAsync(item: item, itemProperties: itemProperties);
    }
    public static func Set(item : Optional<Windows.Storage.IStorageItem>, itemProperties : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderItemProperty>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.SetAsync(item: item, itemProperties: itemProperties)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderItemProperty
// runtime class
public class StorageProviderItemProperty
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderItemProperty;
    public init(plok: Windows.Storage.Provider.IStorageProviderItemProperty?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderItemProperty { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Provider.StorageProviderItemProperty")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_Id(value : Swift.Int32) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.put_Id(value: value);
    }
    public func get_Id() throws -> Swift.Int32 {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func put_Value(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.put_Value(value: value);
    }
    public func get_Value() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public func put_IconResource(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.put_IconResource(value: value);
    }
    public func get_IconResource() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.get_IconResource();
    }
    public var IconResource : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.IconResource;
        }
    }
    public var Id : Swift.Int32 {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var Value : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemProperty = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderItemPropertyDefinition
// runtime class
public class StorageProviderItemPropertyDefinition
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderItemPropertyDefinition;
    public init(plok: Windows.Storage.Provider.IStorageProviderItemPropertyDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderItemPropertyDefinition { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Provider.StorageProviderItemPropertyDefinition")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Id() throws -> Swift.Int32 {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemPropertyDefinition = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func put_Id(value : Swift.Int32) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemPropertyDefinition = try _self.QueryInterface();
        return try _ifc.put_Id(value: value);
    }
    public func get_DisplayNameResource() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemPropertyDefinition = try _self.QueryInterface();
        return try _ifc.get_DisplayNameResource();
    }
    public func put_DisplayNameResource(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemPropertyDefinition = try _self.QueryInterface();
        return try _ifc.put_DisplayNameResource(value: value);
    }
    public var DisplayNameResource : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemPropertyDefinition = try _self.QueryInterface();
        return try _ifc.DisplayNameResource;
        }
    }
    public var Id : Swift.Int32 {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderItemPropertyDefinition = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderPopulationPolicy
// enum type
public typealias StorageProviderPopulationPolicy = _q_CWindows_CStorage_CProvider_CStorageProviderPopulationPolicy;

// type: Windows.Storage.Provider.StorageProviderProtectionMode
// enum type
public typealias StorageProviderProtectionMode = _q_CWindows_CStorage_CProvider_CStorageProviderProtectionMode;

// type: Windows.Storage.Provider.StorageProviderState
// enum type
public typealias StorageProviderState = _q_CWindows_CStorage_CProvider_CStorageProviderState;

// type: Windows.Storage.Provider.StorageProviderStatus
// runtime class
public class StorageProviderStatus
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderStatus;
    public init(plok: Windows.Storage.Provider.IStorageProviderStatus?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderStatus { return _self; }
    public init(state : Windows.Storage.Provider.StorageProviderState, message : Swift.String) throws {
        let _af : IStorageProviderStatusFactory = try RoGetActivationFactory("Windows.Storage.Provider.StorageProviderStatus");
        _self = try _af.CreateInstance(state: state, message: message)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(state : Windows.Storage.Provider.StorageProviderState, message : Swift.String, errorMessages : Optional<ClosedGenerics.IIterable_1__q_CWindows_CStorage_CProvider_CStorageProviderError>) throws {
        let _af : IStorageProviderStatusFactory = try RoGetActivationFactory("Windows.Storage.Provider.StorageProviderStatus");
        _self = try _af.CreateInstance2(state: state, message: message, errorMessages: errorMessages)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Message() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderStatus = try _self.QueryInterface();
        return try _ifc.get_Message();
    }
    public func get_State() throws -> Windows.Storage.Provider.StorageProviderState {
        let _ifc : Windows.Storage.Provider.IStorageProviderStatus = try _self.QueryInterface();
        return try _ifc.get_State();
    }
    public func get_ErrorMessages() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderError> {
        let _ifc : Windows.Storage.Provider.IStorageProviderStatus = try _self.QueryInterface();
        return try _ifc.get_ErrorMessages();
    }
    public var ErrorMessages : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderError> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderStatus = try _self.QueryInterface();
        return try _ifc.ErrorMessages;
        }
    }
    public var Message : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderStatus = try _self.QueryInterface();
        return try _ifc.Message;
        }
    }
    public var State : Windows.Storage.Provider.StorageProviderState {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderStatus = try _self.QueryInterface();
        return try _ifc.State;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderSyncRootInfo
// runtime class
public class StorageProviderSyncRootInfo
    :
    WinRT.Object
{
    private var _self : Windows.Storage.Provider.IStorageProviderSyncRootInfo;
    public init(plok: Windows.Storage.Provider.IStorageProviderSyncRootInfo?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.Provider.IStorageProviderSyncRootInfo { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Storage.Provider.StorageProviderSyncRootInfo")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func put_Id(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_Id(value: value);
    }
    public func get_Context() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_Context();
    }
    public func put_Context(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_Context(value: value);
    }
    public func get_Path() throws -> Optional<Windows.Storage.IStorageFolder> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_Path();
    }
    public func put_Path(value : Optional<Windows.Storage.IStorageFolder>) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_Path(value: value);
    }
    public func get_DisplayNameResource() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_DisplayNameResource();
    }
    public func put_DisplayNameResource(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_DisplayNameResource(value: value);
    }
    public func get_IconResource() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_IconResource();
    }
    public func put_IconResource(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_IconResource(value: value);
    }
    public func get_HydrationPolicy() throws -> Windows.Storage.Provider.StorageProviderHydrationPolicy {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_HydrationPolicy();
    }
    public func put_HydrationPolicy(value : Windows.Storage.Provider.StorageProviderHydrationPolicy) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_HydrationPolicy(value: value);
    }
    public func get_HydrationPolicyModifier() throws -> Windows.Storage.Provider.StorageProviderHydrationPolicyModifier {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_HydrationPolicyModifier();
    }
    public func put_HydrationPolicyModifier(value : Windows.Storage.Provider.StorageProviderHydrationPolicyModifier) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_HydrationPolicyModifier(value: value);
    }
    public func get_PopulationPolicy() throws -> Windows.Storage.Provider.StorageProviderPopulationPolicy {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_PopulationPolicy();
    }
    public func put_PopulationPolicy(value : Windows.Storage.Provider.StorageProviderPopulationPolicy) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_PopulationPolicy(value: value);
    }
    public func get_InSyncPolicy() throws -> Windows.Storage.Provider.StorageProviderInSyncPolicy {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_InSyncPolicy();
    }
    public func put_InSyncPolicy(value : Windows.Storage.Provider.StorageProviderInSyncPolicy) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_InSyncPolicy(value: value);
    }
    public func get_HardlinkPolicy() throws -> Windows.Storage.Provider.StorageProviderHardlinkPolicy {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_HardlinkPolicy();
    }
    public func put_HardlinkPolicy(value : Windows.Storage.Provider.StorageProviderHardlinkPolicy) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_HardlinkPolicy(value: value);
    }
    public func get_ShowSiblingsAsGroup() throws -> boolean {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_ShowSiblingsAsGroup();
    }
    public func put_ShowSiblingsAsGroup(value : boolean) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_ShowSiblingsAsGroup(value: value);
    }
    public func get_Version() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_Version();
    }
    public func put_Version(value : Swift.String) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_Version(value: value);
    }
    public func get_ProtectionMode() throws -> Windows.Storage.Provider.StorageProviderProtectionMode {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_ProtectionMode();
    }
    public func put_ProtectionMode(value : Windows.Storage.Provider.StorageProviderProtectionMode) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_ProtectionMode(value: value);
    }
    public func get_AllowPinning() throws -> boolean {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_AllowPinning();
    }
    public func put_AllowPinning(value : boolean) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_AllowPinning(value: value);
    }
    public func get_StorageProviderItemPropertyDefinitions() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderItemPropertyDefinition> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.get_StorageProviderItemPropertyDefinitions();
    }
    public func get_RecycleBinUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_RecycleBinUri());
    }
    public func put_RecycleBinUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.put_RecycleBinUri(value: value!.Interface());
    }
    public var AllowPinning : boolean {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.AllowPinning;
        }
    }
    public var Context : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.Context;
        }
    }
    public var DisplayNameResource : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.DisplayNameResource;
        }
    }
    public var HardlinkPolicy : Windows.Storage.Provider.StorageProviderHardlinkPolicy {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.HardlinkPolicy;
        }
    }
    public var HydrationPolicy : Windows.Storage.Provider.StorageProviderHydrationPolicy {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.HydrationPolicy;
        }
    }
    public var HydrationPolicyModifier : Windows.Storage.Provider.StorageProviderHydrationPolicyModifier {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.HydrationPolicyModifier;
        }
    }
    public var IconResource : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.IconResource;
        }
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var InSyncPolicy : Windows.Storage.Provider.StorageProviderInSyncPolicy {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.InSyncPolicy;
        }
    }
    public var Path : Optional<Windows.Storage.IStorageFolder> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.Path;
        }
    }
    public var PopulationPolicy : Windows.Storage.Provider.StorageProviderPopulationPolicy {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.PopulationPolicy;
        }
    }
    public var ProtectionMode : Windows.Storage.Provider.StorageProviderProtectionMode {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.ProtectionMode;
        }
    }
    public var RecycleBinUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.RecycleBinUri);
        }
    }
    public var ShowSiblingsAsGroup : boolean {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.ShowSiblingsAsGroup;
        }
    }
    public var StorageProviderItemPropertyDefinitions : Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderItemPropertyDefinition> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.StorageProviderItemPropertyDefinitions;
        }
    }
    public var Version : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo = try _self.QueryInterface();
        return try _ifc.Version;
        }
    }
    public func get_ProviderId() throws -> GUID {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo2 = try _self.QueryInterface();
        return try _ifc.get_ProviderId();
    }
    public func put_ProviderId(value : GUID) throws -> Void {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo2 = try _self.QueryInterface();
        return try _ifc.put_ProviderId(value: value);
    }
    public var ProviderId : GUID {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo2 = try _self.QueryInterface();
        return try _ifc.ProviderId;
        }
    }
    public func get_FallbackFileTypeInfo() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderFileTypeInfo> {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo3 = try _self.QueryInterface();
        return try _ifc.get_FallbackFileTypeInfo();
    }
    public var FallbackFileTypeInfo : Optional<ClosedGenerics.IVector_1__q_CWindows_CStorage_CProvider_CStorageProviderFileTypeInfo> {
        get throws {
        let _ifc : Windows.Storage.Provider.IStorageProviderSyncRootInfo3 = try _self.QueryInterface();
        return try _ifc.FallbackFileTypeInfo;
        }
    }
}

// type: Windows.Storage.Provider.StorageProviderSyncRootManager
// static class
public class StorageProviderSyncRootManager
{
    private struct _IStorageProviderSyncRootManagerStatics2 {
        static var x : IStorageProviderSyncRootManagerStatics2 =
            try! RoGetActivationFactory("Windows.Storage.Provider.StorageProviderSyncRootManager")
    }
    public static var StorageProviderSyncRootManagerStatics2 : IStorageProviderSyncRootManagerStatics2 {
        _IStorageProviderSyncRootManagerStatics2.x
    }
    public static func IsSupported() throws -> boolean {
        return try StorageProviderSyncRootManagerStatics2.IsSupported();
    }
    private struct _IStorageProviderSyncRootManagerStatics {
        static var x : IStorageProviderSyncRootManagerStatics =
            try! RoGetActivationFactory("Windows.Storage.Provider.StorageProviderSyncRootManager")
    }
    public static var StorageProviderSyncRootManagerStatics : IStorageProviderSyncRootManagerStatics {
        _IStorageProviderSyncRootManagerStatics.x
    }
    public static func Register(syncRootInformation : Optional<Windows.Storage.Provider.StorageProviderSyncRootInfo>) throws -> Void {
        return try StorageProviderSyncRootManagerStatics.Register(syncRootInformation: syncRootInformation!.Interface());
    }
    public static func Unregister(id : Swift.String) throws -> Void {
        return try StorageProviderSyncRootManagerStatics.Unregister(id: id);
    }
    public static func GetSyncRootInformationForFolder(folder : Optional<Windows.Storage.IStorageFolder>) throws -> Optional<Windows.Storage.Provider.StorageProviderSyncRootInfo> {
        return try Windows.Storage.Provider.StorageProviderSyncRootInfo(plok: StorageProviderSyncRootManagerStatics.GetSyncRootInformationForFolder(folder: folder));
    }
    public static func GetSyncRootInformationForId(id : Swift.String) throws -> Optional<Windows.Storage.Provider.StorageProviderSyncRootInfo> {
        return try Windows.Storage.Provider.StorageProviderSyncRootInfo(plok: StorageProviderSyncRootManagerStatics.GetSyncRootInformationForId(id: id));
    }
    public static func GetCurrentSyncRoots() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CProvider_CStorageProviderSyncRootInfo> {
        return try StorageProviderSyncRootManagerStatics.GetCurrentSyncRoots();
    }
}

// type: Windows.Storage.Provider.StorageProviderUriSourceStatus
// enum type
public typealias StorageProviderUriSourceStatus = _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus;

// type: Windows.Storage.Provider.UIStatus
// enum type
public typealias UIStatus = _q_CWindows_CStorage_CProvider_CUIStatus;

// type: Windows.Storage.Provider.WriteActivationMode
// enum type
public typealias WriteActivationMode = _q_CWindows_CStorage_CProvider_CWriteActivationMode;

}
extension Windows.Storage.Provider.CachedFileOptions {
    public static var None : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CCachedFileOptions_None;
        }
    }
    public static var RequireUpdateOnAccess : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CCachedFileOptions_RequireUpdateOnAccess;
        }
    }
    public static var UseCachedFileWhenOffline : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CCachedFileOptions_UseCachedFileWhenOffline;
        }
    }
    public static var DenyAccessWhenOffline : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CCachedFileOptions_DenyAccessWhenOffline;
        }
    }
}
extension Windows.Storage.Provider.CachedFileTarget {
    public static var Local : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CCachedFileTarget_Local;
        }
    }
    public static var Remote : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CCachedFileTarget_Remote;
        }
    }
}
extension Windows.Storage.Provider.FileUpdateStatus {
    public static var Incomplete : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CFileUpdateStatus_Incomplete;
        }
    }
    public static var Complete : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CFileUpdateStatus_Complete;
        }
    }
    public static var UserInputNeeded : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CFileUpdateStatus_UserInputNeeded;
        }
    }
    public static var CurrentlyUnavailable : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CFileUpdateStatus_CurrentlyUnavailable;
        }
    }
    public static var Failed : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CFileUpdateStatus_Failed;
        }
    }
    public static var CompleteAndRenamed : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CFileUpdateStatus_CompleteAndRenamed;
        }
    }
}
extension Windows.Storage.Provider.ReadActivationMode {
    public static var NotNeeded : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CReadActivationMode_NotNeeded;
        }
    }
    public static var BeforeAccess : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CReadActivationMode_BeforeAccess;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderHardlinkPolicy {
    public static var None : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHardlinkPolicy_None;
        }
    }
    public static var Allowed : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHardlinkPolicy_Allowed;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderHydrationPolicy {
    public static var Partial : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy_Partial;
        }
    }
    public static var Progressive : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy_Progressive;
        }
    }
    public static var Full : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy_Full;
        }
    }
    public static var AlwaysFull : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicy_AlwaysFull;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderHydrationPolicyModifier {
    public static var None : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier_None;
        }
    }
    public static var ValidationRequired : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier_ValidationRequired;
        }
    }
    public static var StreamingAllowed : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier_StreamingAllowed;
        }
    }
    public static var AutoDehydrationAllowed : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier_AutoDehydrationAllowed;
        }
    }
    public static var AllowFullRestartHydration : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderHydrationPolicyModifier_AllowFullRestartHydration;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderInSyncPolicy {
    public static var Default : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_Default;
        }
    }
    public static var FileCreationTime : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_FileCreationTime;
        }
    }
    public static var FileReadOnlyAttribute : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_FileReadOnlyAttribute;
        }
    }
    public static var FileHiddenAttribute : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_FileHiddenAttribute;
        }
    }
    public static var FileSystemAttribute : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_FileSystemAttribute;
        }
    }
    public static var DirectoryCreationTime : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_DirectoryCreationTime;
        }
    }
    public static var DirectoryReadOnlyAttribute : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_DirectoryReadOnlyAttribute;
        }
    }
    public static var DirectoryHiddenAttribute : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_DirectoryHiddenAttribute;
        }
    }
    public static var DirectorySystemAttribute : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_DirectorySystemAttribute;
        }
    }
    public static var FileLastWriteTime : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_FileLastWriteTime;
        }
    }
    public static var DirectoryLastWriteTime : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_DirectoryLastWriteTime;
        }
    }
    public static var PreserveInsyncForSyncEngine : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderInSyncPolicy_PreserveInsyncForSyncEngine;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderPopulationPolicy {
    public static var Full : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderPopulationPolicy_Full;
        }
    }
    public static var AlwaysFull : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderPopulationPolicy_AlwaysFull;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderProtectionMode {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderProtectionMode_Unknown;
        }
    }
    public static var Personal : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderProtectionMode_Personal;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderState {
    public static var InSync : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderState_InSync;
        }
    }
    public static var Syncing : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderState_Syncing;
        }
    }
    public static var Paused : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderState_Paused;
        }
    }
    public static var Error : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderState_Error;
        }
    }
    public static var Warning : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderState_Warning;
        }
    }
    public static var Offline : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderState_Offline;
        }
    }
}
extension Windows.Storage.Provider.StorageProviderUriSourceStatus {
    public static var Success : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus_Success;
        }
    }
    public static var NoSyncRoot : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus_NoSyncRoot;
        }
    }
    public static var FileNotFound : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CStorageProviderUriSourceStatus_FileNotFound;
        }
    }
}
extension Windows.Storage.Provider.UIStatus {
    public static var Unavailable : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CUIStatus_Unavailable;
        }
    }
    public static var Hidden : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CUIStatus_Hidden;
        }
    }
    public static var Visible : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CUIStatus_Visible;
        }
    }
    public static var Complete : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CUIStatus_Complete;
        }
    }
}
extension Windows.Storage.Provider.WriteActivationMode {
    public static var ReadOnly : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CWriteActivationMode_ReadOnly;
        }
    }
    public static var NotNeeded : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CWriteActivationMode_NotNeeded;
        }
    }
    public static var AfterWrite : Self {
        get {
            return _q_CWindows_CStorage_CProvider_CWriteActivationMode_AfterWrite;
        }
    }
}
