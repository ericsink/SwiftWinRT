// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.PushNotifications {
// type: Windows.Networking.PushNotifications.IPushNotificationChannel
// interface type
open class IPushNotificationChannel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2b28102e, Data2: 0xef0b, Data3 : 0x4f39, Data4 : (0x9b, 0x8a, 0xa3, 0xc1, 0x94, 0xde, 0x70, 0x81)) }
    // [IsSpecialName] System.String get_Uri()
    private func _n_get_Uri(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Uri(pThis, __presult))
        }
    }
    public func get_Uri() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Uri(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.DateTime get_ExpirationTime()
    private func _n_get_ExpirationTime(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CDateTime>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExpirationTime(pThis, __presult))
        }
    }
    public func get_ExpirationTime() throws -> Windows.Foundation.DateTime {
        var __result : _q_CWindows_CFoundation_CDateTime = _q_CWindows_CFoundation_CDateTime(UniversalTime: 0);
        try self._n_get_ExpirationTime(&__result);
        return __result;
    }
    // void Close()
    private func _n_Close() throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
        }
    }
    public func Close() throws -> Void {
        try self._n_Close();
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PushNotificationReceived(Windows.Foundation.TypedEventHandler<Windows.Networking.PushNotifications.PushNotificationChannel,Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs>)
    private func _n_add_PushNotificationReceived(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel__q_CWindows_CNetworking_CPushNotifications_CPushNotificationReceivedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PushNotificationReceived(pThis, handler, __presult))
        }
    }
    public func add_PushNotificationReceived(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel__q_CWindows_CNetworking_CPushNotifications_CPushNotificationReceivedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PushNotificationReceived(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PushNotificationReceived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PushNotificationReceived(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PushNotificationReceived(pThis, token))
        }
    }
    public func remove_PushNotificationReceived(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PushNotificationReceived(token);
    }
    public var ExpirationTime : Windows.Foundation.DateTime {
        get throws {
            return try get_ExpirationTime();
        }
    }
    public var Uri : Swift.String {
        get throws {
            return try get_Uri();
        }
    }
} // IPushNotificationChannel


// type: Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser
// interface type
open class IPushNotificationChannelManagerForUser
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa4c45704, Data2: 0x1182, Data3 : 0x42c7, Data4 : (0x88, 0x90, 0xf5, 0x63, 0xc4, 0x89, 0x0d, 0xc4)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync()
    private func _n_CreatePushNotificationChannelForApplicationAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePushNotificationChannelForApplicationAsync(pThis, __presult))
        }
    }
    public func CreatePushNotificationChannelForApplicationAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreatePushNotificationChannelForApplicationAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
    }
    public func CreatePushNotificationChannelForApplication() async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreatePushNotificationChannelForApplicationAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(System.String)
    private func _n_CreatePushNotificationChannelForApplicationAsyncWithId(_ applicationId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePushNotificationChannelForApplicationAsyncWithId(pThis, applicationId, __presult))
        }
    }
    public func CreatePushNotificationChannelForApplicationAsyncWithId(applicationId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let __hstr_applicationId = try HString(applicationId);
        return try withExtendedLifetime(__hstr_applicationId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreatePushNotificationChannelForApplicationAsyncWithId(__hstr_applicationId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
        }
    }
    public func CreatePushNotificationChannelForApplicationAsyncWithId(applicationId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreatePushNotificationChannelForApplicationAsyncWithId(applicationId: applicationId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(System.String)
    private func _n_CreatePushNotificationChannelForSecondaryTileAsync(_ tileId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePushNotificationChannelForSecondaryTileAsync(pThis, tileId, __presult))
        }
    }
    public func CreatePushNotificationChannelForSecondaryTileAsync(tileId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let __hstr_tileId = try HString(tileId);
        return try withExtendedLifetime(__hstr_tileId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreatePushNotificationChannelForSecondaryTileAsync(__hstr_tileId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
        }
    }
    public func CreatePushNotificationChannelForSecondaryTile(tileId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreatePushNotificationChannelForSecondaryTileAsync(tileId: tileId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.System.User get_User()
    private func _n_get_User(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_User(pThis, __presult))
        }
    }
    public func get_User() throws -> Optional<Windows.System.IUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>> = nil;
        try self._n_get_User(&__result);
        return Windows.System.IUser(consuming: __result);
    }
    public var User : Optional<Windows.System.IUser> {
        get throws {
            return try get_User();
        }
    }
} // IPushNotificationChannelManagerForUser


// type: Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2
// interface type
open class IPushNotificationChannelManagerForUser2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc38b066a, Data2: 0x7cc1, Data3 : 0x4dac, Data4 : (0x87, 0xfd, 0xbe, 0x6e, 0x92, 0x04, 0x14, 0xa4)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(Windows.Storage.Streams.IBuffer, System.String)
    private func _n_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(_ appServerKey : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ channelId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(pThis, appServerKey, channelId, __presult))
        }
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let __hstr_channelId = try HString(channelId);
        return try withExtendedLifetime(__hstr_channelId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(RawPointer(appServerKey), __hstr_channelId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
        }
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplication(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey: appServerKey, channelId: channelId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(Windows.Storage.Streams.IBuffer, System.String, System.String)
    private func _n_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(_ appServerKey : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ channelId : Optional<HSTRING>, _ appId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(pThis, appServerKey, channelId, appId, __presult))
        }
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String, appId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let __hstr_channelId = try HString(channelId);
        return try withExtendedLifetime(__hstr_channelId) {
        let __hstr_appId = try HString(appId);
        return try withExtendedLifetime(__hstr_appId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(RawPointer(appServerKey), __hstr_channelId.Raw(), __hstr_appId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
        }
        }
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String, appId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(appServerKey: appServerKey, channelId: channelId, appId: appId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IPushNotificationChannelManagerForUser2


// type: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics
// interface type
open class IPushNotificationChannelManagerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8baf9b65, Data2: 0x77a1, Data3 : 0x4588, Data4 : (0xbd, 0x19, 0x86, 0x15, 0x29, 0xa9, 0xdc, 0xf0)) }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync()
    private func _n_CreatePushNotificationChannelForApplicationAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePushNotificationChannelForApplicationAsync(pThis, __presult))
        }
    }
    public func CreatePushNotificationChannelForApplicationAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreatePushNotificationChannelForApplicationAsync(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
    }
    public func CreatePushNotificationChannelForApplication() async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreatePushNotificationChannelForApplicationAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(System.String)
    private func _n_CreatePushNotificationChannelForApplicationAsyncWithId(_ applicationId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePushNotificationChannelForApplicationAsyncWithId(pThis, applicationId, __presult))
        }
    }
    public func CreatePushNotificationChannelForApplicationAsyncWithId(applicationId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let __hstr_applicationId = try HString(applicationId);
        return try withExtendedLifetime(__hstr_applicationId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreatePushNotificationChannelForApplicationAsyncWithId(__hstr_applicationId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
        }
    }
    public func CreatePushNotificationChannelForApplicationAsyncWithId(applicationId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreatePushNotificationChannelForApplicationAsyncWithId(applicationId: applicationId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.PushNotifications.PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(System.String)
    private func _n_CreatePushNotificationChannelForSecondaryTileAsync(_ tileId : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePushNotificationChannelForSecondaryTileAsync(pThis, tileId, __presult))
        }
    }
    public func CreatePushNotificationChannelForSecondaryTileAsync(tileId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let __hstr_tileId = try HString(tileId);
        return try withExtendedLifetime(__hstr_tileId) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel>> = nil;
        try self._n_CreatePushNotificationChannelForSecondaryTileAsync(__hstr_tileId.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel(consuming: __result);
        }
    }
    public func CreatePushNotificationChannelForSecondaryTile(tileId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreatePushNotificationChannelForSecondaryTileAsync(tileId: tileId)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IPushNotificationChannelManagerStatics


// type: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics2
// interface type
open class IPushNotificationChannelManagerStatics2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb444a65d, Data2: 0xa7e9, Data3 : 0x4b28, Data4 : (0x95, 0x0e, 0xf3, 0x75, 0xa9, 0x07, 0xf9, 0xdf)) }
    // Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser GetForUser(Windows.System.User)
    private func _n_GetForUser(_ user : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIUser>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerStatics2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetForUser(pThis, user, __presult))
        }
    }
    public func GetForUser(user : Optional<Windows.System.IUser>) throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser>> = nil;
        try self._n_GetForUser(RawPointer(user), &__result);
        return Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser(consuming: __result);
    }
} // IPushNotificationChannelManagerStatics2


// type: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics3
// interface type
open class IPushNotificationChannelManagerStatics3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4701fefe, Data2: 0x0ede, Data3 : 0x4a3f, Data4 : (0xae, 0x78, 0xbf, 0xa4, 0x71, 0x49, 0x69, 0x25)) }
    // Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser GetDefault()
    private func _n_GetDefault(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerStatics3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDefault(pThis, __presult))
        }
    }
    public func GetDefault() throws -> Optional<Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerForUser>> = nil;
        try self._n_GetDefault(&__result);
        return Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser(consuming: __result);
    }
} // IPushNotificationChannelManagerStatics3


// type: Windows.Networking.PushNotifications.IPushNotificationChannelManagerStatics4
// interface type
open class IPushNotificationChannelManagerStatics4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbc540efb, Data2: 0x7820, Data3 : 0x5a5b, Data4 : (0x9c, 0x01, 0xb4, 0x75, 0x7f, 0x77, 0x40, 0x25)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ChannelsRevoked(Windows.Foundation.EventHandler<Windows.Networking.PushNotifications.PushNotificationChannelsRevokedEventArgs>)
    private func _n_add_ChannelsRevoked(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannelsRevokedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ChannelsRevoked(pThis, handler, __presult))
        }
    }
    public func add_ChannelsRevoked(handler : Optional<ClosedGenerics.IEventHandler_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannelsRevokedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ChannelsRevoked(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ChannelsRevoked(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ChannelsRevoked(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationChannelManagerStatics4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ChannelsRevoked(pThis, token))
        }
    }
    public func remove_ChannelsRevoked(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ChannelsRevoked(token);
    }
} // IPushNotificationChannelManagerStatics4


// type: Windows.Networking.PushNotifications.IPushNotificationChannelsRevokedEventArgs
// interface type
open class IPushNotificationChannelsRevokedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x20e1a24c, Data2: 0x1a34, Data3 : 0x5beb, Data4 : (0xaa, 0xe2, 0x40, 0xc2, 0x32, 0xc8, 0xc1, 0x40)) }
} // IPushNotificationChannelsRevokedEventArgs


// type: Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs
// interface type
open class IPushNotificationReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd1065e0c, Data2: 0x36cd, Data3 : 0x484c, Data4 : (0xb9, 0x35, 0x0a, 0x99, 0xb7, 0x53, 0xcf, 0x00)) }
    // [IsSpecialName] void put_Cancel(bool)
    private func _n_put_Cancel(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Cancel(pThis, value))
        }
    }
    public func put_Cancel(value : boolean) throws -> Void {
        try self._n_put_Cancel(value);
    }
    // [IsSpecialName] bool get_Cancel()
    private func _n_get_Cancel(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cancel(pThis, __presult))
        }
    }
    public func get_Cancel() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Cancel(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.PushNotifications.PushNotificationType get_NotificationType()
    private func _n_get_NotificationType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CPushNotifications_CPushNotificationType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NotificationType(pThis, __presult))
        }
    }
    public func get_NotificationType() throws -> Windows.Networking.PushNotifications.PushNotificationType {
        var __result : _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType = _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType_Toast;
        try self._n_get_NotificationType(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Notifications.ToastNotification get_ToastNotification()
    private func _n_get_ToastNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ToastNotification(pThis, __presult))
        }
    }
    public func get_ToastNotification() throws -> Optional<Windows.UI.Notifications.IToastNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIToastNotification>> = nil;
        try self._n_get_ToastNotification(&__result);
        return Windows.UI.Notifications.IToastNotification(consuming: __result);
    }
    // [IsSpecialName] Windows.UI.Notifications.TileNotification get_TileNotification()
    private func _n_get_TileNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TileNotification(pThis, __presult))
        }
    }
    public func get_TileNotification() throws -> Optional<Windows.UI.Notifications.ITileNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CITileNotification>> = nil;
        try self._n_get_TileNotification(&__result);
        return Windows.UI.Notifications.ITileNotification(consuming: __result);
    }
    // [IsSpecialName] Windows.UI.Notifications.BadgeNotification get_BadgeNotification()
    private func _n_get_BadgeNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIBadgeNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BadgeNotification(pThis, __presult))
        }
    }
    public func get_BadgeNotification() throws -> Optional<Windows.UI.Notifications.IBadgeNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CNotifications_CIBadgeNotification>> = nil;
        try self._n_get_BadgeNotification(&__result);
        return Windows.UI.Notifications.IBadgeNotification(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.PushNotifications.RawNotification get_RawNotification()
    private func _n_get_RawNotification(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CPushNotifications_CIRawNotification>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIPushNotificationReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RawNotification(pThis, __presult))
        }
    }
    public func get_RawNotification() throws -> Optional<Windows.Networking.PushNotifications.IRawNotification> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CPushNotifications_CIRawNotification>> = nil;
        try self._n_get_RawNotification(&__result);
        return Windows.Networking.PushNotifications.IRawNotification(consuming: __result);
    }
    public var BadgeNotification : Optional<Windows.UI.Notifications.IBadgeNotification> {
        get throws {
            return try get_BadgeNotification();
        }
    }
    public var Cancel : boolean {
        get throws {
            return try get_Cancel();
        }
    }
    public var NotificationType : Windows.Networking.PushNotifications.PushNotificationType {
        get throws {
            return try get_NotificationType();
        }
    }
    public var RawNotification : Optional<Windows.Networking.PushNotifications.IRawNotification> {
        get throws {
            return try get_RawNotification();
        }
    }
    public var TileNotification : Optional<Windows.UI.Notifications.ITileNotification> {
        get throws {
            return try get_TileNotification();
        }
    }
    public var ToastNotification : Optional<Windows.UI.Notifications.IToastNotification> {
        get throws {
            return try get_ToastNotification();
        }
    }
} // IPushNotificationReceivedEventArgs


// type: Windows.Networking.PushNotifications.IRawNotification
// interface type
open class IRawNotification
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1a227281, Data2: 0x3b79, Data3 : 0x42ac, Data4 : (0x99, 0x63, 0x22, 0xab, 0x00, 0xd4, 0xf0, 0xb7)) }
    // [IsSpecialName] System.String get_Content()
    private func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIRawNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Content(&__result);
        return Swift.String(from: __result);
    }
    public var Content : Swift.String {
        get throws {
            return try get_Content();
        }
    }
} // IRawNotification


// type: Windows.Networking.PushNotifications.IRawNotification2
// interface type
open class IRawNotification2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe6d0cf19, Data2: 0x0c6f, Data3 : 0x4cdd, Data4 : (0x94, 0x24, 0xee, 0xc5, 0xbe, 0x01, 0x4d, 0x26)) }
    // [IsSpecialName] Windows.Foundation.Collections.IMapView<System.String,System.String> get_Headers()
    private func _n_get_Headers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIRawNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Headers(pThis, __presult))
        }
    }
    public func get_Headers() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>> = nil;
        try self._n_get_Headers(&__result);
        return ClosedGenerics.IMapView_2_HSTRING_HSTRING(consuming: __result);
    }
    // [IsSpecialName] System.String get_ChannelId()
    private func _n_get_ChannelId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIRawNotification2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChannelId(pThis, __presult))
        }
    }
    public func get_ChannelId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ChannelId(&__result);
        return Swift.String(from: __result);
    }
    public var ChannelId : Swift.String {
        get throws {
            return try get_ChannelId();
        }
    }
    public var Headers : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
            return try get_Headers();
        }
    }
} // IRawNotification2


// type: Windows.Networking.PushNotifications.IRawNotification3
// interface type
open class IRawNotification3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x62737dde, Data2: 0x8a73, Data3 : 0x424c, Data4 : (0xab, 0x44, 0x56, 0x35, 0xf4, 0x0a, 0x96, 0xe5)) }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_ContentBytes()
    private func _n_get_ContentBytes(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CPushNotifications_CIRawNotification3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentBytes(pThis, __presult))
        }
    }
    public func get_ContentBytes() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_ContentBytes(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var ContentBytes : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_ContentBytes();
        }
    }
} // IRawNotification3


// type: Windows.Networking.PushNotifications.PushNotificationChannel
// runtime class
public class PushNotificationChannel
    :
    WinRT.Object
{
    private var _self : Windows.Networking.PushNotifications.IPushNotificationChannel;
    public init(plok: Windows.Networking.PushNotifications.IPushNotificationChannel?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.PushNotifications.IPushNotificationChannel { return _self; }
    public func get_Uri() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannel = try _self.QueryInterface();
        return try _ifc.get_Uri();
    }
    public func get_ExpirationTime() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannel = try _self.QueryInterface();
        return try _ifc.get_ExpirationTime();
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannel = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func add_PushNotificationReceived(handler : @escaping (Optional<Windows.Networking.PushNotifications.PushNotificationChannel>, Optional<Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannel = try _self.QueryInterface();
        return try _ifc.add_PushNotificationReceived(handler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel__q_CWindows_CNetworking_CPushNotifications_CPushNotificationReceivedEventArgs(cb: handler).Interface());
    }
    public func remove_PushNotificationReceived(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannel = try _self.QueryInterface();
        return try _ifc.remove_PushNotificationReceived(token: token);
    }
    public var ExpirationTime : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannel = try _self.QueryInterface();
        return try _ifc.ExpirationTime;
        }
    }
    public var Uri : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannel = try _self.QueryInterface();
        return try _ifc.Uri;
        }
    }
}

// type: Windows.Networking.PushNotifications.PushNotificationChannelManager
// static class
public class PushNotificationChannelManager
{
    private struct _IPushNotificationChannelManagerStatics3 {
        static var x : IPushNotificationChannelManagerStatics3 =
            try! RoGetActivationFactory("Windows.Networking.PushNotifications.PushNotificationChannelManager")
    }
    public static var PushNotificationChannelManagerStatics3 : IPushNotificationChannelManagerStatics3 {
        _IPushNotificationChannelManagerStatics3.x
    }
    public static func GetDefault() throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser> {
        return try Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser(plok: PushNotificationChannelManagerStatics3.GetDefault());
    }
    private struct _IPushNotificationChannelManagerStatics4 {
        static var x : IPushNotificationChannelManagerStatics4 =
            try! RoGetActivationFactory("Windows.Networking.PushNotifications.PushNotificationChannelManager")
    }
    public static var PushNotificationChannelManagerStatics4 : IPushNotificationChannelManagerStatics4 {
        _IPushNotificationChannelManagerStatics4.x
    }
    public static func add_ChannelsRevoked(handler : @escaping (Optional<WinRT.Object>, Optional<Windows.Networking.PushNotifications.PushNotificationChannelsRevokedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PushNotificationChannelManagerStatics4.add_ChannelsRevoked(handler: ClosedGenerics.EventHandler_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannelsRevokedEventArgs(cb: handler).Interface());
    }
    public static func remove_ChannelsRevoked(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PushNotificationChannelManagerStatics4.remove_ChannelsRevoked(token: token);
    }
    private struct _IPushNotificationChannelManagerStatics {
        static var x : IPushNotificationChannelManagerStatics =
            try! RoGetActivationFactory("Windows.Networking.PushNotifications.PushNotificationChannelManager")
    }
    public static var PushNotificationChannelManagerStatics : IPushNotificationChannelManagerStatics {
        _IPushNotificationChannelManagerStatics.x
    }
    public static func CreatePushNotificationChannelForApplicationAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        return try PushNotificationChannelManagerStatics.CreatePushNotificationChannelForApplicationAsync();
    }
    public static func CreatePushNotificationChannelForApplication() async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: Self.CreatePushNotificationChannelForApplicationAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func CreatePushNotificationChannelForApplicationAsync(applicationId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        return try PushNotificationChannelManagerStatics.CreatePushNotificationChannelForApplicationAsyncWithId(applicationId: applicationId);
    }
    public static func CreatePushNotificationChannelForApplication(applicationId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: Self.CreatePushNotificationChannelForApplicationAsync(applicationId: applicationId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func CreatePushNotificationChannelForSecondaryTileAsync(tileId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        return try PushNotificationChannelManagerStatics.CreatePushNotificationChannelForSecondaryTileAsync(tileId: tileId);
    }
    public static func CreatePushNotificationChannelForSecondaryTile(tileId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: Self.CreatePushNotificationChannelForSecondaryTileAsync(tileId: tileId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    private struct _IPushNotificationChannelManagerStatics2 {
        static var x : IPushNotificationChannelManagerStatics2 =
            try! RoGetActivationFactory("Windows.Networking.PushNotifications.PushNotificationChannelManager")
    }
    public static var PushNotificationChannelManagerStatics2 : IPushNotificationChannelManagerStatics2 {
        _IPushNotificationChannelManagerStatics2.x
    }
    public static func GetForUser(user : Optional<Windows.System.User>) throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser> {
        return try Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser(plok: PushNotificationChannelManagerStatics2.GetForUser(user: user!.Interface()));
    }
}

// type: Windows.Networking.PushNotifications.PushNotificationChannelManagerForUser
// runtime class
public class PushNotificationChannelManagerForUser
    :
    WinRT.Object
{
    private var _self : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser;
    public init(plok: Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser { return _self; }
    public func CreatePushNotificationChannelForApplicationAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser = try _self.QueryInterface();
        return try _ifc.CreatePushNotificationChannelForApplicationAsync();
    }
    public func CreatePushNotificationChannelForApplication() async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: self.CreatePushNotificationChannelForApplicationAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreatePushNotificationChannelForApplicationAsync(applicationId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser = try _self.QueryInterface();
        return try _ifc.CreatePushNotificationChannelForApplicationAsyncWithId(applicationId: applicationId);
    }
    public func CreatePushNotificationChannelForApplication(applicationId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: self.CreatePushNotificationChannelForApplicationAsync(applicationId: applicationId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreatePushNotificationChannelForSecondaryTileAsync(tileId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser = try _self.QueryInterface();
        return try _ifc.CreatePushNotificationChannelForSecondaryTileAsync(tileId: tileId);
    }
    public func CreatePushNotificationChannelForSecondaryTile(tileId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: self.CreatePushNotificationChannelForSecondaryTileAsync(tileId: tileId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_User() throws -> Optional<Windows.System.User> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.get_User());
    }
    public var User : Optional<Windows.System.User> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser = try _self.QueryInterface();
        return try Windows.System.User(plok: _ifc.User);
        }
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2 = try _self.QueryInterface();
        return try _ifc.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey: appServerKey, channelId: channelId);
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplication(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: self.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey: appServerKey, channelId: channelId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String, appId : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CPushNotifications_CPushNotificationChannel> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationChannelManagerForUser2 = try _self.QueryInterface();
        return try _ifc.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsyncWithId(appServerKey: appServerKey, channelId: channelId, appId: appId);
    }
    public func CreateRawPushNotificationChannelWithAlternateKeyForApplication(appServerKey : Optional<Windows.Storage.Streams.IBuffer>, channelId : Swift.String, appId : Swift.String) async throws -> Optional<Windows.Networking.PushNotifications.PushNotificationChannel> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.PushNotifications.PushNotificationChannel(plok: self.CreateRawPushNotificationChannelWithAlternateKeyForApplicationAsync(appServerKey: appServerKey, channelId: channelId, appId: appId)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Networking.PushNotifications.PushNotificationChannelsRevokedEventArgs
// runtime class
public class PushNotificationChannelsRevokedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.PushNotifications.IPushNotificationChannelsRevokedEventArgs;
    public init(plok: Windows.Networking.PushNotifications.IPushNotificationChannelsRevokedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.PushNotifications.IPushNotificationChannelsRevokedEventArgs { return _self; }
}

// type: Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs
// runtime class
public class PushNotificationReceivedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs;
    public init(plok: Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs { return _self; }
    public func put_Cancel(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.put_Cancel(value: value);
    }
    public func get_Cancel() throws -> boolean {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Cancel();
    }
    public func get_NotificationType() throws -> Windows.Networking.PushNotifications.PushNotificationType {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.get_NotificationType();
    }
    public func get_ToastNotification() throws -> Optional<Windows.UI.Notifications.ToastNotification> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.get_ToastNotification());
    }
    public func get_TileNotification() throws -> Optional<Windows.UI.Notifications.TileNotification> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.get_TileNotification());
    }
    public func get_BadgeNotification() throws -> Optional<Windows.UI.Notifications.BadgeNotification> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.UI.Notifications.BadgeNotification(plok: _ifc.get_BadgeNotification());
    }
    public func get_RawNotification() throws -> Optional<Windows.Networking.PushNotifications.RawNotification> {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.PushNotifications.RawNotification(plok: _ifc.get_RawNotification());
    }
    public var BadgeNotification : Optional<Windows.UI.Notifications.BadgeNotification> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.UI.Notifications.BadgeNotification(plok: _ifc.BadgeNotification);
        }
    }
    public var Cancel : boolean {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.Cancel;
        }
    }
    public var NotificationType : Windows.Networking.PushNotifications.PushNotificationType {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.NotificationType;
        }
    }
    public var RawNotification : Optional<Windows.Networking.PushNotifications.RawNotification> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.PushNotifications.RawNotification(plok: _ifc.RawNotification);
        }
    }
    public var TileNotification : Optional<Windows.UI.Notifications.TileNotification> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.UI.Notifications.TileNotification(plok: _ifc.TileNotification);
        }
    }
    public var ToastNotification : Optional<Windows.UI.Notifications.ToastNotification> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IPushNotificationReceivedEventArgs = try _self.QueryInterface();
        return try Windows.UI.Notifications.ToastNotification(plok: _ifc.ToastNotification);
        }
    }
}

// type: Windows.Networking.PushNotifications.PushNotificationType
// enum type
public typealias PushNotificationType = _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType;

// type: Windows.Networking.PushNotifications.RawNotification
// runtime class
public class RawNotification
    :
    WinRT.Object
{
    private var _self : Windows.Networking.PushNotifications.IRawNotification;
    public init(plok: Windows.Networking.PushNotifications.IRawNotification?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.PushNotifications.IRawNotification { return _self; }
    public func get_Content() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification = try _self.QueryInterface();
        return try _ifc.get_Content();
    }
    public var Content : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification = try _self.QueryInterface();
        return try _ifc.Content;
        }
    }
    public func get_Headers() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification2 = try _self.QueryInterface();
        return try _ifc.get_Headers();
    }
    public func get_ChannelId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification2 = try _self.QueryInterface();
        return try _ifc.get_ChannelId();
    }
    public var ChannelId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification2 = try _self.QueryInterface();
        return try _ifc.ChannelId;
        }
    }
    public var Headers : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification2 = try _self.QueryInterface();
        return try _ifc.Headers;
        }
    }
    public func get_ContentBytes() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification3 = try _self.QueryInterface();
        return try _ifc.get_ContentBytes();
    }
    public var ContentBytes : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.PushNotifications.IRawNotification3 = try _self.QueryInterface();
        return try _ifc.ContentBytes;
        }
    }
}

}
extension Windows.Networking.PushNotifications.PushNotificationType {
    public static var Toast : Self {
        get {
            return _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType_Toast;
        }
    }
    public static var Tile : Self {
        get {
            return _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType_Tile;
        }
    }
    public static var Badge : Self {
        get {
            return _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType_Badge;
        }
    }
    public static var Raw : Self {
        get {
            return _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType_Raw;
        }
    }
    public static var TileFlyout : Self {
        get {
            return _q_CWindows_CNetworking_CPushNotifications_CPushNotificationType_TileFlyout;
        }
    }
}
