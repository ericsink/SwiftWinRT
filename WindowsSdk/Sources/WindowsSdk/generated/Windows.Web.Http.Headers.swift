// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Web.Http.Headers {
// type: Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection
// runtime class
public class HttpCacheDirectiveHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection { return _self; }
    public func get_MaxAge() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.get_MaxAge();
    }
    public func put_MaxAge(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.put_MaxAge(value: value);
    }
    public func get_MaxStale() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.get_MaxStale();
    }
    public func put_MaxStale(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.put_MaxStale(value: value);
    }
    public func get_MinFresh() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.get_MinFresh();
    }
    public func put_MinFresh(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.put_MinFresh(value: value);
    }
    public func get_SharedMaxAge() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.get_SharedMaxAge();
    }
    public func put_SharedMaxAge(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.put_SharedMaxAge(value: value);
    }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public var MaxAge : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.MaxAge;
        }
    }
    public var MaxStale : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.MaxStale;
        }
    }
    public var MinFresh : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.MinFresh;
        }
    }
    public var SharedMaxAge : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.SharedMaxAge;
        }
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpNameValueHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpNameValueHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpNameValueHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpNameValueHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpNameValueHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpNameValueHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpChallengeHeaderValue
// runtime class
public class HttpChallengeHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpChallengeHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpChallengeHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpChallengeHeaderValue { return _self; }
    public init(scheme : Swift.String) throws {
        let _af : IHttpChallengeHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpChallengeHeaderValue");
        _self = try _af.CreateFromScheme(scheme: scheme)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(scheme : Swift.String, token : Swift.String) throws {
        let _af : IHttpChallengeHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpChallengeHeaderValue");
        _self = try _af.CreateFromSchemeWithToken(scheme: scheme, token: token)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpChallengeHeaderValueStatics {
        static var x : IHttpChallengeHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpChallengeHeaderValue")
    }
    public static var HttpChallengeHeaderValueStatics : IHttpChallengeHeaderValueStatics {
        _IHttpChallengeHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValue> {
        return try Windows.Web.Http.Headers.HttpChallengeHeaderValue(plok: HttpChallengeHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, challengeHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValue>) throws -> boolean {
            var _tmp_out_challengeHeaderValue: Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue> = nil;
        return try HttpChallengeHeaderValueStatics.TryParse(input: input, challengeHeaderValue: &_tmp_out_challengeHeaderValue);
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Parameters();
    }
    public func get_Scheme() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Scheme();
    }
    public func get_Token() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Token();
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.Parameters;
        }
    }
    public var Scheme : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.Scheme;
        }
    }
    public var Token : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.Token;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection
// runtime class
public class HttpChallengeHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpChallengeHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpChallengeHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue
// runtime class
public class HttpConnectionOptionHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue { return _self; }
    public init(token : Swift.String) throws {
        let _af : IHttpConnectionOptionHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue");
        _self = try _af.Create(token: token)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpConnectionOptionHeaderValueStatics {
        static var x : IHttpConnectionOptionHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue")
    }
    public static var HttpConnectionOptionHeaderValueStatics : IHttpConnectionOptionHeaderValueStatics {
        _IHttpConnectionOptionHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue> {
        return try Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue(plok: HttpConnectionOptionHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, connectionOptionHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>) throws -> boolean {
            var _tmp_out_connectionOptionHeaderValue: Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue> = nil;
        return try HttpConnectionOptionHeaderValueStatics.TryParse(input: input, connectionOptionHeaderValue: &_tmp_out_connectionOptionHeaderValue);
    }
    public func get_Token() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Token();
    }
    public var Token : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.Token;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection
// runtime class
public class HttpConnectionOptionHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpConnectionOptionHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpContentCodingHeaderValue
// runtime class
public class HttpContentCodingHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpContentCodingHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpContentCodingHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpContentCodingHeaderValue { return _self; }
    public init(contentCoding : Swift.String) throws {
        let _af : IHttpContentCodingHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentCodingHeaderValue");
        _self = try _af.Create(contentCoding: contentCoding)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpContentCodingHeaderValueStatics {
        static var x : IHttpContentCodingHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentCodingHeaderValue")
    }
    public static var HttpContentCodingHeaderValueStatics : IHttpContentCodingHeaderValueStatics {
        _IHttpContentCodingHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValue> {
        return try Windows.Web.Http.Headers.HttpContentCodingHeaderValue(plok: HttpContentCodingHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, contentCodingHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>) throws -> boolean {
            var _tmp_out_contentCodingHeaderValue: Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue> = nil;
        return try HttpContentCodingHeaderValueStatics.TryParse(input: input, contentCodingHeaderValue: &_tmp_out_contentCodingHeaderValue);
    }
    public func get_ContentCoding() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.get_ContentCoding();
    }
    public var ContentCoding : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.ContentCoding;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection
// runtime class
public class HttpContentCodingHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentCodingHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue
// runtime class
public class HttpContentCodingWithQualityHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue { return _self; }
    public init(contentCoding : Swift.String) throws {
        let _af : IHttpContentCodingWithQualityHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue");
        _self = try _af.CreateFromValue(contentCoding: contentCoding)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(contentCoding : Swift.String, quality : Swift.Double) throws {
        let _af : IHttpContentCodingWithQualityHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue");
        _self = try _af.CreateFromValueWithQuality(contentCoding: contentCoding, quality: quality)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpContentCodingWithQualityHeaderValueStatics {
        static var x : IHttpContentCodingWithQualityHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue")
    }
    public static var HttpContentCodingWithQualityHeaderValueStatics : IHttpContentCodingWithQualityHeaderValueStatics {
        _IHttpContentCodingWithQualityHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue> {
        return try Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue(plok: HttpContentCodingWithQualityHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, contentCodingWithQualityHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>) throws -> boolean {
            var _tmp_out_contentCodingWithQualityHeaderValue: Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue> = nil;
        return try HttpContentCodingWithQualityHeaderValueStatics.TryParse(input: input, contentCodingWithQualityHeaderValue: &_tmp_out_contentCodingWithQualityHeaderValue);
    }
    public func get_ContentCoding() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_ContentCoding();
    }
    public func get_Quality() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Quality();
    }
    public var ContentCoding : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.ContentCoding;
        }
    }
    public var Quality : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Quality;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection
// runtime class
public class HttpContentCodingWithQualityHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpContentCodingWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpContentDispositionHeaderValue
// runtime class
public class HttpContentDispositionHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue { return _self; }
    public init(dispositionType : Swift.String) throws {
        let _af : IHttpContentDispositionHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentDispositionHeaderValue");
        _self = try _af.Create(dispositionType: dispositionType)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpContentDispositionHeaderValueStatics {
        static var x : IHttpContentDispositionHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentDispositionHeaderValue")
    }
    public static var HttpContentDispositionHeaderValueStatics : IHttpContentDispositionHeaderValueStatics {
        _IHttpContentDispositionHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpContentDispositionHeaderValue> {
        return try Windows.Web.Http.Headers.HttpContentDispositionHeaderValue(plok: HttpContentDispositionHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, contentDispositionHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpContentDispositionHeaderValue>) throws -> boolean {
            var _tmp_out_contentDispositionHeaderValue: Optional<Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue> = nil;
        return try HttpContentDispositionHeaderValueStatics.TryParse(input: input, contentDispositionHeaderValue: &_tmp_out_contentDispositionHeaderValue);
    }
    public func get_DispositionType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_DispositionType();
    }
    public func put_DispositionType(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.put_DispositionType(value: value);
    }
    public func get_FileName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_FileName();
    }
    public func put_FileName(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.put_FileName(value: value);
    }
    public func get_FileNameStar() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_FileNameStar();
    }
    public func put_FileNameStar(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.put_FileNameStar(value: value);
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.put_Name(value: value);
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Parameters();
    }
    public func get_Size() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func put_Size(value : Optional<ClosedGenerics.IReference_1_UINT64>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.put_Size(value: value);
    }
    public var DispositionType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.DispositionType;
        }
    }
    public var FileName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.FileName;
        }
    }
    public var FileNameStar : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.FileNameStar;
        }
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.Parameters;
        }
    }
    public var Size : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpContentHeaderCollection
// runtime class
public class HttpContentHeaderCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpContentHeaderCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpContentHeaderCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpContentHeaderCollection { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.Http.Headers.HttpContentHeaderCollection")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ContentDisposition() throws -> Optional<Windows.Web.Http.Headers.HttpContentDispositionHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentDispositionHeaderValue(plok: _ifc.get_ContentDisposition());
    }
    public func put_ContentDisposition(value : Optional<Windows.Web.Http.Headers.HttpContentDispositionHeaderValue>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_ContentDisposition(value: value!.Interface());
    }
    public func get_ContentEncoding() throws -> Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection(plok: _ifc.get_ContentEncoding());
    }
    public func get_ContentLanguage() throws -> Optional<Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection(plok: _ifc.get_ContentLanguage());
    }
    public func get_ContentLength() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_ContentLength();
    }
    public func put_ContentLength(value : Optional<ClosedGenerics.IReference_1_UINT64>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_ContentLength(value: value);
    }
    public func get_ContentLocation() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_ContentLocation());
    }
    public func put_ContentLocation(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_ContentLocation(value: value!.Interface());
    }
    public func get_ContentMD5() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_ContentMD5();
    }
    public func put_ContentMD5(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_ContentMD5(value: value);
    }
    public func get_ContentRange() throws -> Optional<Windows.Web.Http.Headers.HttpContentRangeHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentRangeHeaderValue(plok: _ifc.get_ContentRange());
    }
    public func put_ContentRange(value : Optional<Windows.Web.Http.Headers.HttpContentRangeHeaderValue>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_ContentRange(value: value!.Interface());
    }
    public func get_ContentType() throws -> Optional<Windows.Web.Http.Headers.HttpMediaTypeHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpMediaTypeHeaderValue(plok: _ifc.get_ContentType());
    }
    public func put_ContentType(value : Optional<Windows.Web.Http.Headers.HttpMediaTypeHeaderValue>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_ContentType(value: value!.Interface());
    }
    public func get_Expires() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_Expires();
    }
    public func put_Expires(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Expires(value: value);
    }
    public func get_LastModified() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_LastModified();
    }
    public func put_LastModified(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_LastModified(value: value);
    }
    public func Append(name : Swift.String, value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.Append(name: name, value: value);
    }
    public func TryAppendWithoutValidation(name : Swift.String, value : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.TryAppendWithoutValidation(name: name, value: value);
    }
    public var ContentDisposition : Optional<Windows.Web.Http.Headers.HttpContentDispositionHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentDispositionHeaderValue(plok: _ifc.ContentDisposition);
        }
    }
    public var ContentEncoding : Optional<Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection(plok: _ifc.ContentEncoding);
        }
    }
    public var ContentLanguage : Optional<Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection(plok: _ifc.ContentLanguage);
        }
    }
    public var ContentLength : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.ContentLength;
        }
    }
    public var ContentLocation : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.ContentLocation);
        }
    }
    public var ContentMD5 : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.ContentMD5;
        }
    }
    public var ContentRange : Optional<Windows.Web.Http.Headers.HttpContentRangeHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentRangeHeaderValue(plok: _ifc.ContentRange);
        }
    }
    public var ContentType : Optional<Windows.Web.Http.Headers.HttpMediaTypeHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpMediaTypeHeaderValue(plok: _ifc.ContentType);
        }
    }
    public var Expires : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.Expires;
        }
    }
    public var LastModified : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentHeaderCollection = try _self.QueryInterface();
        return try _ifc.LastModified;
        }
    }
    // method not needed: Lookup
    // method not needed: get_Size
    // method not needed: HasKey
    // method not needed: GetView
    // method not needed: Insert
    // method not needed: Remove
    // method not needed: Clear
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpContentRangeHeaderValue
// runtime class
public class HttpContentRangeHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpContentRangeHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpContentRangeHeaderValue { return _self; }
    public init(length : Swift.UInt64) throws {
        let _af : IHttpContentRangeHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
        _self = try _af.CreateFromLength(length: length)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(from : Swift.UInt64, to : Swift.UInt64) throws {
        let _af : IHttpContentRangeHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
        _self = try _af.CreateFromRange(from: from, to: to)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(from : Swift.UInt64, to : Swift.UInt64, length : Swift.UInt64) throws {
        let _af : IHttpContentRangeHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentRangeHeaderValue");
        _self = try _af.CreateFromRangeWithLength(from: from, to: to, length: length)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpContentRangeHeaderValueStatics {
        static var x : IHttpContentRangeHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpContentRangeHeaderValue")
    }
    public static var HttpContentRangeHeaderValueStatics : IHttpContentRangeHeaderValueStatics {
        _IHttpContentRangeHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpContentRangeHeaderValue> {
        return try Windows.Web.Http.Headers.HttpContentRangeHeaderValue(plok: HttpContentRangeHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, contentRangeHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpContentRangeHeaderValue>) throws -> boolean {
            var _tmp_out_contentRangeHeaderValue: Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue> = nil;
        return try HttpContentRangeHeaderValueStatics.TryParse(input: input, contentRangeHeaderValue: &_tmp_out_contentRangeHeaderValue);
    }
    public func get_FirstBytePosition() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_FirstBytePosition();
    }
    public func get_LastBytePosition() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_LastBytePosition();
    }
    public func get_Length() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Length();
    }
    public func get_Unit() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Unit();
    }
    public func put_Unit(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.put_Unit(value: value);
    }
    public var FirstBytePosition : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.FirstBytePosition;
        }
    }
    public var LastBytePosition : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.LastBytePosition;
        }
    }
    public var Length : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.Length;
        }
    }
    public var Unit : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpContentRangeHeaderValue = try _self.QueryInterface();
        return try _ifc.Unit;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpCookiePairHeaderValue
// runtime class
public class HttpCookiePairHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpCookiePairHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpCookiePairHeaderValue { return _self; }
    public init(name : Swift.String) throws {
        let _af : IHttpCookiePairHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpCookiePairHeaderValue");
        _self = try _af.CreateFromName(name: name)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(name : Swift.String, value : Swift.String) throws {
        let _af : IHttpCookiePairHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpCookiePairHeaderValue");
        _self = try _af.CreateFromNameWithValue(name: name, value: value)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpCookiePairHeaderValueStatics {
        static var x : IHttpCookiePairHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpCookiePairHeaderValue")
    }
    public static var HttpCookiePairHeaderValueStatics : IHttpCookiePairHeaderValueStatics {
        _IHttpCookiePairHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValue> {
        return try Windows.Web.Http.Headers.HttpCookiePairHeaderValue(plok: HttpCookiePairHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, cookiePairHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>) throws -> boolean {
            var _tmp_out_cookiePairHeaderValue: Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue> = nil;
        return try HttpCookiePairHeaderValueStatics.TryParse(input: input, cookiePairHeaderValue: &_tmp_out_cookiePairHeaderValue);
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_Value() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public func put_Value(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.put_Value(value: value);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Value : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection
// runtime class
public class HttpCookiePairHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCookiePairHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpCookiePairHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpCredentialsHeaderValue
// runtime class
public class HttpCredentialsHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpCredentialsHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpCredentialsHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpCredentialsHeaderValue { return _self; }
    public init(scheme : Swift.String) throws {
        let _af : IHttpCredentialsHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpCredentialsHeaderValue");
        _self = try _af.CreateFromScheme(scheme: scheme)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(scheme : Swift.String, token : Swift.String) throws {
        let _af : IHttpCredentialsHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpCredentialsHeaderValue");
        _self = try _af.CreateFromSchemeWithToken(scheme: scheme, token: token)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpCredentialsHeaderValueStatics {
        static var x : IHttpCredentialsHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpCredentialsHeaderValue")
    }
    public static var HttpCredentialsHeaderValueStatics : IHttpCredentialsHeaderValueStatics {
        _IHttpCredentialsHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue> {
        return try Windows.Web.Http.Headers.HttpCredentialsHeaderValue(plok: HttpCredentialsHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, credentialsHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue>) throws -> boolean {
            var _tmp_out_credentialsHeaderValue: Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> = nil;
        return try HttpCredentialsHeaderValueStatics.TryParse(input: input, credentialsHeaderValue: &_tmp_out_credentialsHeaderValue);
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpCredentialsHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Parameters();
    }
    public func get_Scheme() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpCredentialsHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Scheme();
    }
    public func get_Token() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpCredentialsHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Token();
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCredentialsHeaderValue = try _self.QueryInterface();
        return try _ifc.Parameters;
        }
    }
    public var Scheme : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCredentialsHeaderValue = try _self.QueryInterface();
        return try _ifc.Scheme;
        }
    }
    public var Token : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpCredentialsHeaderValue = try _self.QueryInterface();
        return try _ifc.Token;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue
// runtime class
public class HttpDateOrDeltaHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue { return _self; }
    private struct _IHttpDateOrDeltaHeaderValueStatics {
        static var x : IHttpDateOrDeltaHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue")
    }
    public static var HttpDateOrDeltaHeaderValueStatics : IHttpDateOrDeltaHeaderValueStatics {
        _IHttpDateOrDeltaHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue> {
        return try Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue(plok: HttpDateOrDeltaHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, dateOrDeltaHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue>) throws -> boolean {
            var _tmp_out_dateOrDeltaHeaderValue: Optional<Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue> = nil;
        return try HttpDateOrDeltaHeaderValueStatics.TryParse(input: input, dateOrDeltaHeaderValue: &_tmp_out_dateOrDeltaHeaderValue);
    }
    public func get_Date() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Date();
    }
    public func get_Delta() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        let _ifc : Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Delta();
    }
    public var Date : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue = try _self.QueryInterface();
        return try _ifc.Date;
        }
    }
    public var Delta : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue = try _self.QueryInterface();
        return try _ifc.Delta;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpExpectationHeaderValue
// runtime class
public class HttpExpectationHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpExpectationHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpExpectationHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpExpectationHeaderValue { return _self; }
    public init(name : Swift.String) throws {
        let _af : IHttpExpectationHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpExpectationHeaderValue");
        _self = try _af.CreateFromName(name: name)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(name : Swift.String, value : Swift.String) throws {
        let _af : IHttpExpectationHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpExpectationHeaderValue");
        _self = try _af.CreateFromNameWithValue(name: name, value: value)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpExpectationHeaderValueStatics {
        static var x : IHttpExpectationHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpExpectationHeaderValue")
    }
    public static var HttpExpectationHeaderValueStatics : IHttpExpectationHeaderValueStatics {
        _IHttpExpectationHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValue> {
        return try Windows.Web.Http.Headers.HttpExpectationHeaderValue(plok: HttpExpectationHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, expectationHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValue>) throws -> boolean {
            var _tmp_out_expectationHeaderValue: Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue> = nil;
        return try HttpExpectationHeaderValueStatics.TryParse(input: input, expectationHeaderValue: &_tmp_out_expectationHeaderValue);
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_Value() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public func put_Value(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.put_Value(value: value);
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Parameters();
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.Parameters;
        }
    }
    public var Value : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection
// runtime class
public class HttpExpectationHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpExpectationHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpExpectationHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection
// runtime class
public class HttpLanguageHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Globalization.Language> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try Windows.Globalization.Language(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CGlobalization_CLanguage> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Globalization.Language>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Globalization.Language>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Globalization.Language>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Globalization.Language>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGlobalization_CILanguage>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CGlobalization_CILanguage>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CGlobalization_CLanguage = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue
// runtime class
public class HttpLanguageRangeWithQualityHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue { return _self; }
    public init(languageRange : Swift.String) throws {
        let _af : IHttpLanguageRangeWithQualityHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue");
        _self = try _af.CreateFromLanguageRange(languageRange: languageRange)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(languageRange : Swift.String, quality : Swift.Double) throws {
        let _af : IHttpLanguageRangeWithQualityHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue");
        _self = try _af.CreateFromLanguageRangeWithQuality(languageRange: languageRange, quality: quality)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpLanguageRangeWithQualityHeaderValueStatics {
        static var x : IHttpLanguageRangeWithQualityHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue")
    }
    public static var HttpLanguageRangeWithQualityHeaderValueStatics : IHttpLanguageRangeWithQualityHeaderValueStatics {
        _IHttpLanguageRangeWithQualityHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue> {
        return try Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue(plok: HttpLanguageRangeWithQualityHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, languageRangeWithQualityHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>) throws -> boolean {
            var _tmp_out_languageRangeWithQualityHeaderValue: Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue> = nil;
        return try HttpLanguageRangeWithQualityHeaderValueStatics.TryParse(input: input, languageRangeWithQualityHeaderValue: &_tmp_out_languageRangeWithQualityHeaderValue);
    }
    public func get_LanguageRange() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_LanguageRange();
    }
    public func get_Quality() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Quality();
    }
    public var LanguageRange : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.LanguageRange;
        }
    }
    public var Quality : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Quality;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection
// runtime class
public class HttpLanguageRangeWithQualityHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpLanguageRangeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpMediaTypeHeaderValue
// runtime class
public class HttpMediaTypeHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue { return _self; }
    public init(mediaType : Swift.String) throws {
        let _af : IHttpMediaTypeHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpMediaTypeHeaderValue");
        _self = try _af.Create(mediaType: mediaType)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpMediaTypeHeaderValueStatics {
        static var x : IHttpMediaTypeHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpMediaTypeHeaderValue")
    }
    public static var HttpMediaTypeHeaderValueStatics : IHttpMediaTypeHeaderValueStatics {
        _IHttpMediaTypeHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpMediaTypeHeaderValue> {
        return try Windows.Web.Http.Headers.HttpMediaTypeHeaderValue(plok: HttpMediaTypeHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, mediaTypeHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpMediaTypeHeaderValue>) throws -> boolean {
            var _tmp_out_mediaTypeHeaderValue: Optional<Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue> = nil;
        return try HttpMediaTypeHeaderValueStatics.TryParse(input: input, mediaTypeHeaderValue: &_tmp_out_mediaTypeHeaderValue);
    }
    public func get_CharSet() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_CharSet();
    }
    public func put_CharSet(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.put_CharSet(value: value);
    }
    public func get_MediaType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_MediaType();
    }
    public func put_MediaType(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.put_MediaType(value: value);
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Parameters();
    }
    public var CharSet : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.CharSet;
        }
    }
    public var MediaType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.MediaType;
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue = try _self.QueryInterface();
        return try _ifc.Parameters;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue
// runtime class
public class HttpMediaTypeWithQualityHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue { return _self; }
    public init(mediaType : Swift.String) throws {
        let _af : IHttpMediaTypeWithQualityHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue");
        _self = try _af.CreateFromMediaType(mediaType: mediaType)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(mediaType : Swift.String, quality : Swift.Double) throws {
        let _af : IHttpMediaTypeWithQualityHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue");
        _self = try _af.CreateFromMediaTypeWithQuality(mediaType: mediaType, quality: quality)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpMediaTypeWithQualityHeaderValueStatics {
        static var x : IHttpMediaTypeWithQualityHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue")
    }
    public static var HttpMediaTypeWithQualityHeaderValueStatics : IHttpMediaTypeWithQualityHeaderValueStatics {
        _IHttpMediaTypeWithQualityHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue> {
        return try Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue(plok: HttpMediaTypeWithQualityHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, mediaTypeWithQualityHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>) throws -> boolean {
            var _tmp_out_mediaTypeWithQualityHeaderValue: Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue> = nil;
        return try HttpMediaTypeWithQualityHeaderValueStatics.TryParse(input: input, mediaTypeWithQualityHeaderValue: &_tmp_out_mediaTypeWithQualityHeaderValue);
    }
    public func get_CharSet() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_CharSet();
    }
    public func put_CharSet(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.put_CharSet(value: value);
    }
    public func get_MediaType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_MediaType();
    }
    public func put_MediaType(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.put_MediaType(value: value);
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Parameters();
    }
    public func get_Quality() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Quality();
    }
    public func put_Quality(value : Optional<ClosedGenerics.IReference_1_DOUBLE>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.put_Quality(value: value);
    }
    public var CharSet : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.CharSet;
        }
    }
    public var MediaType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.MediaType;
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Parameters;
        }
    }
    public var Quality : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Quality;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection
// runtime class
public class HttpMediaTypeWithQualityHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpMediaTypeWithQualityHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpMethodHeaderValueCollection
// runtime class
public class HttpMethodHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.HttpMethod> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try Windows.Web.Http.HttpMethod(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHttpMethod> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.HttpMethod>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.HttpMethod>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.HttpMethod>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.HttpMethod>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CIHttpMethod>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CIHttpMethod>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHttpMethod = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpNameValueHeaderValue
// runtime class
public class HttpNameValueHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpNameValueHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpNameValueHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpNameValueHeaderValue { return _self; }
    public init(name : Swift.String) throws {
        let _af : IHttpNameValueHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpNameValueHeaderValue");
        _self = try _af.CreateFromName(name: name)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(name : Swift.String, value : Swift.String) throws {
        let _af : IHttpNameValueHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpNameValueHeaderValue");
        _self = try _af.CreateFromNameWithValue(name: name, value: value)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpNameValueHeaderValueStatics {
        static var x : IHttpNameValueHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpNameValueHeaderValue")
    }
    public static var HttpNameValueHeaderValueStatics : IHttpNameValueHeaderValueStatics {
        _IHttpNameValueHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpNameValueHeaderValue> {
        return try Windows.Web.Http.Headers.HttpNameValueHeaderValue(plok: HttpNameValueHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, nameValueHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpNameValueHeaderValue>) throws -> boolean {
            var _tmp_out_nameValueHeaderValue: Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue> = nil;
        return try HttpNameValueHeaderValueStatics.TryParse(input: input, nameValueHeaderValue: &_tmp_out_nameValueHeaderValue);
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_Value() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public func put_Value(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.put_Value(value: value);
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Value : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpNameValueHeaderValue = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpProductHeaderValue
// runtime class
public class HttpProductHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpProductHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpProductHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpProductHeaderValue { return _self; }
    public init(productName : Swift.String) throws {
        let _af : IHttpProductHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpProductHeaderValue");
        _self = try _af.CreateFromName(productName: productName)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(productName : Swift.String, productVersion : Swift.String) throws {
        let _af : IHttpProductHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpProductHeaderValue");
        _self = try _af.CreateFromNameWithVersion(productName: productName, productVersion: productVersion)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpProductHeaderValueStatics {
        static var x : IHttpProductHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpProductHeaderValue")
    }
    public static var HttpProductHeaderValueStatics : IHttpProductHeaderValueStatics {
        _IHttpProductHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpProductHeaderValue> {
        return try Windows.Web.Http.Headers.HttpProductHeaderValue(plok: HttpProductHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, productHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpProductHeaderValue>) throws -> boolean {
            var _tmp_out_productHeaderValue: Optional<Windows.Web.Http.Headers.IHttpProductHeaderValue> = nil;
        return try HttpProductHeaderValueStatics.TryParse(input: input, productHeaderValue: &_tmp_out_productHeaderValue);
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpProductHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_Version() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpProductHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Version();
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpProductHeaderValue = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Version : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpProductHeaderValue = try _self.QueryInterface();
        return try _ifc.Version;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpProductInfoHeaderValue
// runtime class
public class HttpProductInfoHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpProductInfoHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpProductInfoHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpProductInfoHeaderValue { return _self; }
    public init(productComment : Swift.String) throws {
        let _af : IHttpProductInfoHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpProductInfoHeaderValue");
        _self = try _af.CreateFromComment(productComment: productComment)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(productName : Swift.String, productVersion : Swift.String) throws {
        let _af : IHttpProductInfoHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpProductInfoHeaderValue");
        _self = try _af.CreateFromNameWithVersion(productName: productName, productVersion: productVersion)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpProductInfoHeaderValueStatics {
        static var x : IHttpProductInfoHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpProductInfoHeaderValue")
    }
    public static var HttpProductInfoHeaderValueStatics : IHttpProductInfoHeaderValueStatics {
        _IHttpProductInfoHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValue> {
        return try Windows.Web.Http.Headers.HttpProductInfoHeaderValue(plok: HttpProductInfoHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, productInfoHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>) throws -> boolean {
            var _tmp_out_productInfoHeaderValue: Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue> = nil;
        return try HttpProductInfoHeaderValueStatics.TryParse(input: input, productInfoHeaderValue: &_tmp_out_productInfoHeaderValue);
    }
    public func get_Product() throws -> Optional<Windows.Web.Http.Headers.HttpProductHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpProductHeaderValue(plok: _ifc.get_Product());
    }
    public func get_Comment() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Comment();
    }
    public var Comment : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.Comment;
        }
    }
    public var Product : Optional<Windows.Web.Http.Headers.HttpProductHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpProductHeaderValue(plok: _ifc.Product);
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection
// runtime class
public class HttpProductInfoHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpProductInfoHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpProductInfoHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpRequestHeaderCollection
// runtime class
public class HttpRequestHeaderCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpRequestHeaderCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpRequestHeaderCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpRequestHeaderCollection { return _self; }
    public func get_Accept() throws -> Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection(plok: _ifc.get_Accept());
    }
    public func get_AcceptEncoding() throws -> Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection(plok: _ifc.get_AcceptEncoding());
    }
    public func get_AcceptLanguage() throws -> Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection(plok: _ifc.get_AcceptLanguage());
    }
    public func get_Authorization() throws -> Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCredentialsHeaderValue(plok: _ifc.get_Authorization());
    }
    public func put_Authorization(value : Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Authorization(value: value!.Interface());
    }
    public func get_CacheControl() throws -> Optional<Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection(plok: _ifc.get_CacheControl());
    }
    public func get_Connection() throws -> Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection(plok: _ifc.get_Connection());
    }
    public func get_Cookie() throws -> Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection(plok: _ifc.get_Cookie());
    }
    public func get_Date() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_Date();
    }
    public func put_Date(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Date(value: value);
    }
    public func get_Expect() throws -> Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection(plok: _ifc.get_Expect());
    }
    public func get_From() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_From();
    }
    public func put_From(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_From(value: value);
    }
    public func get_Host() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_Host());
    }
    public func put_Host(value : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Host(value: value!.Interface());
    }
    public func get_IfModifiedSince() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_IfModifiedSince();
    }
    public func put_IfModifiedSince(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_IfModifiedSince(value: value);
    }
    public func get_IfUnmodifiedSince() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_IfUnmodifiedSince();
    }
    public func put_IfUnmodifiedSince(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_IfUnmodifiedSince(value: value);
    }
    public func get_MaxForwards() throws -> Optional<ClosedGenerics.IReference_1_UINT32> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_MaxForwards();
    }
    public func put_MaxForwards(value : Optional<ClosedGenerics.IReference_1_UINT32>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_MaxForwards(value: value);
    }
    public func get_ProxyAuthorization() throws -> Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCredentialsHeaderValue(plok: _ifc.get_ProxyAuthorization());
    }
    public func put_ProxyAuthorization(value : Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_ProxyAuthorization(value: value!.Interface());
    }
    public func get_Referer() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_Referer());
    }
    public func put_Referer(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Referer(value: value!.Interface());
    }
    public func get_TransferEncoding() throws -> Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection(plok: _ifc.get_TransferEncoding());
    }
    public func get_UserAgent() throws -> Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection(plok: _ifc.get_UserAgent());
    }
    public func Append(name : Swift.String, value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.Append(name: name, value: value);
    }
    public func TryAppendWithoutValidation(name : Swift.String, value : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.TryAppendWithoutValidation(name: name, value: value);
    }
    public var Accept : Optional<Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection(plok: _ifc.Accept);
        }
    }
    public var AcceptEncoding : Optional<Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection(plok: _ifc.AcceptEncoding);
        }
    }
    public var AcceptLanguage : Optional<Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection(plok: _ifc.AcceptLanguage);
        }
    }
    public var Authorization : Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCredentialsHeaderValue(plok: _ifc.Authorization);
        }
    }
    public var CacheControl : Optional<Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection(plok: _ifc.CacheControl);
        }
    }
    public var Connection : Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection(plok: _ifc.Connection);
        }
    }
    public var Cookie : Optional<Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection(plok: _ifc.Cookie);
        }
    }
    public var Date : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.Date;
        }
    }
    public var Expect : Optional<Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection(plok: _ifc.Expect);
        }
    }
    public var From : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.From;
        }
    }
    public var Host : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.Host);
        }
    }
    public var IfModifiedSince : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.IfModifiedSince;
        }
    }
    public var IfUnmodifiedSince : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.IfUnmodifiedSince;
        }
    }
    public var MaxForwards : Optional<ClosedGenerics.IReference_1_UINT32> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try _ifc.MaxForwards;
        }
    }
    public var ProxyAuthorization : Optional<Windows.Web.Http.Headers.HttpCredentialsHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCredentialsHeaderValue(plok: _ifc.ProxyAuthorization);
        }
    }
    public var Referer : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.Referer);
        }
    }
    public var TransferEncoding : Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection(plok: _ifc.TransferEncoding);
        }
    }
    public var UserAgent : Optional<Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpRequestHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection(plok: _ifc.UserAgent);
        }
    }
    // method not needed: Lookup
    // method not needed: get_Size
    // method not needed: HasKey
    // method not needed: GetView
    // method not needed: Insert
    // method not needed: Remove
    // method not needed: Clear
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpResponseHeaderCollection
// runtime class
public class HttpResponseHeaderCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpResponseHeaderCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpResponseHeaderCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpResponseHeaderCollection { return _self; }
    public func get_Age() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_Age();
    }
    public func put_Age(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Age(value: value);
    }
    public func get_Allow() throws -> Optional<Windows.Web.Http.Headers.HttpMethodHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpMethodHeaderValueCollection(plok: _ifc.get_Allow());
    }
    public func get_CacheControl() throws -> Optional<Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection(plok: _ifc.get_CacheControl());
    }
    public func get_Connection() throws -> Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection(plok: _ifc.get_Connection());
    }
    public func get_Date() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.get_Date();
    }
    public func put_Date(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Date(value: value);
    }
    public func get_Location() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_Location());
    }
    public func put_Location(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_Location(value: value!.Interface());
    }
    public func get_ProxyAuthenticate() throws -> Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection(plok: _ifc.get_ProxyAuthenticate());
    }
    public func get_RetryAfter() throws -> Optional<Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue(plok: _ifc.get_RetryAfter());
    }
    public func put_RetryAfter(value : Optional<Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue>) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.put_RetryAfter(value: value!.Interface());
    }
    public func get_TransferEncoding() throws -> Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection(plok: _ifc.get_TransferEncoding());
    }
    public func get_WwwAuthenticate() throws -> Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection> {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection(plok: _ifc.get_WwwAuthenticate());
    }
    public func Append(name : Swift.String, value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.Append(name: name, value: value);
    }
    public func TryAppendWithoutValidation(name : Swift.String, value : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.TryAppendWithoutValidation(name: name, value: value);
    }
    public var Age : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.Age;
        }
    }
    public var Allow : Optional<Windows.Web.Http.Headers.HttpMethodHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpMethodHeaderValueCollection(plok: _ifc.Allow);
        }
    }
    public var CacheControl : Optional<Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection(plok: _ifc.CacheControl);
        }
    }
    public var Connection : Optional<Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection(plok: _ifc.Connection);
        }
    }
    public var Date : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try _ifc.Date;
        }
    }
    public var Location : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.Location);
        }
    }
    public var ProxyAuthenticate : Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection(plok: _ifc.ProxyAuthenticate);
        }
    }
    public var RetryAfter : Optional<Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue(plok: _ifc.RetryAfter);
        }
    }
    public var TransferEncoding : Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection(plok: _ifc.TransferEncoding);
        }
    }
    public var WwwAuthenticate : Optional<Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpResponseHeaderCollection = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection(plok: _ifc.WwwAuthenticate);
        }
    }
    // method not needed: Lookup
    // method not needed: get_Size
    // method not needed: HasKey
    // method not needed: GetView
    // method not needed: Insert
    // method not needed: Remove
    // method not needed: Clear
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpTransferCodingHeaderValue
// runtime class
public class HttpTransferCodingHeaderValue
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue;
    public init(plok: Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue { return _self; }
    public init(input : Swift.String) throws {
        let _af : IHttpTransferCodingHeaderValueFactory = try RoGetActivationFactory("Windows.Web.Http.Headers.HttpTransferCodingHeaderValue");
        _self = try _af.Create(input: input)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IHttpTransferCodingHeaderValueStatics {
        static var x : IHttpTransferCodingHeaderValueStatics =
            try! RoGetActivationFactory("Windows.Web.Http.Headers.HttpTransferCodingHeaderValue")
    }
    public static var HttpTransferCodingHeaderValueStatics : IHttpTransferCodingHeaderValueStatics {
        _IHttpTransferCodingHeaderValueStatics.x
    }
    public static func Parse(input : Swift.String) throws -> Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue> {
        return try Windows.Web.Http.Headers.HttpTransferCodingHeaderValue(plok: HttpTransferCodingHeaderValueStatics.Parse(input: input));
    }
    public static func TryParse(input : Swift.String, transferCodingHeaderValue : inout Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>) throws -> boolean {
            var _tmp_out_transferCodingHeaderValue: Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue> = nil;
        return try HttpTransferCodingHeaderValueStatics.TryParse(input: input, transferCodingHeaderValue: &_tmp_out_transferCodingHeaderValue);
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        let _ifc : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Parameters();
    }
    public func get_Value() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Parameters;
        }
    }
    public var Value : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection
// runtime class
public class HttpTransferCodingHeaderValueCollection
    :
    WinRT.Object
{
    private var _self : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection;
    public init(plok: Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection { return _self; }
    public func ParseAdd(input : Swift.String) throws -> Void {
        let _ifc : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.ParseAdd(input: input);
    }
    public func TryParseAdd(input : Swift.String) throws -> boolean {
        let _ifc : Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection = try _self.QueryInterface();
        return try _ifc.TryParseAdd(input: input);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try Windows.Web.Http.Headers.HttpTransferCodingHeaderValue(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue> {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Windows.Web.Http.Headers.HttpTransferCodingHeaderValue>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpTransferCodingHeaderValue = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
    public func ToString() throws -> Optional<Swift.String> {
        let _ifc : Windows.Foundation.IStringable = try _self.QueryInterface();
        return try _ifc.ToString();
    }
}

// type: Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection
// interface type
open class IHttpCacheDirectiveHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9a586b89, Data2: 0xd5d0, Data3 : 0x4fbe, Data4 : (0xbd, 0x9d, 0xb5, 0xb3, 0x63, 0x68, 0x11, 0xb4)) }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> get_MaxAge()
    private func _n_get_MaxAge(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxAge(pThis, __presult))
        }
    }
    public func get_MaxAge() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>> = nil;
        try self._n_get_MaxAge(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan(consuming: __result);
    }
    // [IsSpecialName] void put_MaxAge(Windows.Foundation.IReference<Windows.Foundation.TimeSpan>)
    private func _n_put_MaxAge(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxAge(pThis, value))
        }
    }
    public func put_MaxAge(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        try self._n_put_MaxAge(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> get_MaxStale()
    private func _n_get_MaxStale(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxStale(pThis, __presult))
        }
    }
    public func get_MaxStale() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>> = nil;
        try self._n_get_MaxStale(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan(consuming: __result);
    }
    // [IsSpecialName] void put_MaxStale(Windows.Foundation.IReference<Windows.Foundation.TimeSpan>)
    private func _n_put_MaxStale(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxStale(pThis, value))
        }
    }
    public func put_MaxStale(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        try self._n_put_MaxStale(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> get_MinFresh()
    private func _n_get_MinFresh(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinFresh(pThis, __presult))
        }
    }
    public func get_MinFresh() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>> = nil;
        try self._n_get_MinFresh(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan(consuming: __result);
    }
    // [IsSpecialName] void put_MinFresh(Windows.Foundation.IReference<Windows.Foundation.TimeSpan>)
    private func _n_put_MinFresh(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinFresh(pThis, value))
        }
    }
    public func put_MinFresh(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        try self._n_put_MinFresh(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> get_SharedMaxAge()
    private func _n_get_SharedMaxAge(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SharedMaxAge(pThis, __presult))
        }
    }
    public func get_SharedMaxAge() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>> = nil;
        try self._n_get_SharedMaxAge(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan(consuming: __result);
    }
    // [IsSpecialName] void put_SharedMaxAge(Windows.Foundation.IReference<Windows.Foundation.TimeSpan>)
    private func _n_put_SharedMaxAge(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SharedMaxAge(pThis, value))
        }
    }
    public func put_SharedMaxAge(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        try self._n_put_SharedMaxAge(RawPointer(value));
    }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
    public var MaxAge : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
            return try get_MaxAge();
        }
    }
    public var MaxStale : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
            return try get_MaxStale();
        }
    }
    public var MinFresh : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
            return try get_MinFresh();
        }
    }
    public var SharedMaxAge : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
            return try get_SharedMaxAge();
        }
    }
} // IHttpCacheDirectiveHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpChallengeHeaderValue
// interface type
open class IHttpChallengeHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x393361af, Data2: 0x0f7d, Data3 : 0x4820, Data4 : (0x9f, 0xdd, 0xa2, 0xb9, 0x56, 0xee, 0xae, 0xab)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue> get_Parameters()
    private func _n_get_Parameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parameters(pThis, __presult))
        }
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_get_Parameters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.String get_Scheme()
    private func _n_get_Scheme(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scheme(pThis, __presult))
        }
    }
    public func get_Scheme() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Scheme(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Token()
    private func _n_get_Token(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Token(pThis, __presult))
        }
    }
    public func get_Token() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Token(&__result);
        return Swift.String(from: __result);
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
            return try get_Parameters();
        }
    }
    public var Scheme : Swift.String {
        get throws {
            return try get_Scheme();
        }
    }
    public var Token : Swift.String {
        get throws {
            return try get_Token();
        }
    }
} // IHttpChallengeHeaderValue


// type: Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection
// interface type
open class IHttpChallengeHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xca9e5f81, Data2: 0xaee0, Data3 : 0x4353, Data4 : (0xa1, 0x0b, 0xe6, 0x25, 0xba, 0xbd, 0x64, 0xc2)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpChallengeHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpChallengeHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpChallengeHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc452c451, Data2: 0xd99c, Data3 : 0x40aa, Data4 : (0x93, 0x99, 0x90, 0xee, 0xb9, 0x8f, 0xc6, 0x13)) }
    // Windows.Web.Http.Headers.HttpChallengeHeaderValue CreateFromScheme(System.String)
    private func _n_CreateFromScheme(_ scheme : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromScheme(pThis, scheme, __presult))
        }
    }
    public func CreateFromScheme(scheme : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue> {
        let __hstr_scheme = try HString(scheme!);
        return try withExtendedLifetime(__hstr_scheme) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>> = nil;
        try self._n_CreateFromScheme(__hstr_scheme.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpChallengeHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpChallengeHeaderValue CreateFromSchemeWithToken(System.String, System.String)
    private func _n_CreateFromSchemeWithToken(_ scheme : Optional<HSTRING>, _ token : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromSchemeWithToken(pThis, scheme, token, __presult))
        }
    }
    public func CreateFromSchemeWithToken(scheme : Optional<Swift.String>, token : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue> {
        let __hstr_scheme = try HString(scheme!);
        return try withExtendedLifetime(__hstr_scheme) {
        let __hstr_token = try HString(token!);
        return try withExtendedLifetime(__hstr_token) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>> = nil;
        try self._n_CreateFromSchemeWithToken(__hstr_scheme.Raw(), __hstr_token.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpChallengeHeaderValue(consuming: __result);
        }
        }
    }
} // IHttpChallengeHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpChallengeHeaderValueStatics
// interface type
open class IHttpChallengeHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf3d38a72, Data2: 0xfc01, Data3 : 0x4d01, Data4 : (0xa0, 0x08, 0xfc, 0xb7, 0xc4, 0x59, 0xd6, 0x35)) }
    // Windows.Web.Http.Headers.HttpChallengeHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpChallengeHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpChallengeHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ challengeHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, challengeHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, challengeHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_challengeHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_challengeHeaderValue, &__result);
            challengeHeaderValue = Windows.Web.Http.Headers.IHttpChallengeHeaderValue(consuming: _tmp_out_challengeHeaderValue);
        return __result;
        }
    }
} // IHttpChallengeHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue
// interface type
open class IHttpConnectionOptionHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcb4af27a, Data2: 0x4e90, Data3 : 0x45eb, Data4 : (0x8d, 0xcd, 0xfd, 0x14, 0x08, 0xf4, 0xc4, 0x4f)) }
    // [IsSpecialName] System.String get_Token()
    private func _n_get_Token(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Token(pThis, __presult))
        }
    }
    public func get_Token() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Token(&__result);
        return Swift.String(from: __result);
    }
    public var Token : Swift.String {
        get throws {
            return try get_Token();
        }
    }
} // IHttpConnectionOptionHeaderValue


// type: Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection
// interface type
open class IHttpConnectionOptionHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe4f56c1d, Data2: 0x5142, Data3 : 0x4e00, Data4 : (0x8e, 0x0f, 0x01, 0x95, 0x09, 0x33, 0x76, 0x29)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpConnectionOptionHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpConnectionOptionHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd93ccc1e, Data2: 0x0b7d, Data3 : 0x4c3f, Data4 : (0xa5, 0x8d, 0xa2, 0xa1, 0xbd, 0xea, 0xbc, 0x0a)) }
    // Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue Create(System.String)
    private func _n_Create(_ token : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, token, __presult))
        }
    }
    public func Create(token : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue> {
        let __hstr_token = try HString(token!);
        return try withExtendedLifetime(__hstr_token) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>> = nil;
        try self._n_Create(__hstr_token.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue(consuming: __result);
        }
    }
} // IHttpConnectionOptionHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueStatics
// interface type
open class IHttpConnectionOptionHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaaa75d37, Data2: 0xa946, Data3 : 0x4b1f, Data4 : (0x85, 0xaf, 0x48, 0xb6, 0x8b, 0x3c, 0x50, 0xbd)) }
    // Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ connectionOptionHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, connectionOptionHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, connectionOptionHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_connectionOptionHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_connectionOptionHeaderValue, &__result);
            connectionOptionHeaderValue = Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValue(consuming: _tmp_out_connectionOptionHeaderValue);
        return __result;
        }
    }
} // IHttpConnectionOptionHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpContentCodingHeaderValue
// interface type
open class IHttpContentCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbcf7f92a, Data2: 0x9376, Data3 : 0x4d85, Data4 : (0xbc, 0xcc, 0x9f, 0x4f, 0x9a, 0xca, 0xb4, 0x34)) }
    // [IsSpecialName] System.String get_ContentCoding()
    private func _n_get_ContentCoding(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentCoding(pThis, __presult))
        }
    }
    public func get_ContentCoding() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ContentCoding(&__result);
        return Swift.String(from: __result);
    }
    public var ContentCoding : Swift.String {
        get throws {
            return try get_ContentCoding();
        }
    }
} // IHttpContentCodingHeaderValue


// type: Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection
// interface type
open class IHttpContentCodingHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7d221721, Data2: 0xa6db, Data3 : 0x436e, Data4 : (0x8e, 0x83, 0x91, 0x59, 0x61, 0x92, 0x81, 0x9c)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpContentCodingHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpContentCodingHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpContentCodingHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc53d2bd7, Data2: 0x332b, Data3 : 0x4350, Data4 : (0x85, 0x10, 0x2e, 0x67, 0xa2, 0x28, 0x9a, 0x5a)) }
    // Windows.Web.Http.Headers.HttpContentCodingHeaderValue Create(System.String)
    private func _n_Create(_ contentCoding : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, contentCoding, __presult))
        }
    }
    public func Create(contentCoding : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue> {
        let __hstr_contentCoding = try HString(contentCoding!);
        return try withExtendedLifetime(__hstr_contentCoding) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>> = nil;
        try self._n_Create(__hstr_contentCoding.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpContentCodingHeaderValue(consuming: __result);
        }
    }
} // IHttpContentCodingHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpContentCodingHeaderValueStatics
// interface type
open class IHttpContentCodingHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x94d8602e, Data2: 0xf9bf, Data3 : 0x42f7, Data4 : (0xaa, 0x46, 0xed, 0x27, 0x2a, 0x41, 0xe2, 0x12)) }
    // Windows.Web.Http.Headers.HttpContentCodingHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpContentCodingHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpContentCodingHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ contentCodingHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, contentCodingHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, contentCodingHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_contentCodingHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_contentCodingHeaderValue, &__result);
            contentCodingHeaderValue = Windows.Web.Http.Headers.IHttpContentCodingHeaderValue(consuming: _tmp_out_contentCodingHeaderValue);
        return __result;
        }
    }
} // IHttpContentCodingHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue
// interface type
open class IHttpContentCodingWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x94531cd5, Data2: 0x8b13, Data3 : 0x4d73, Data4 : (0x86, 0x51, 0xf7, 0x6b, 0x38, 0xf8, 0x84, 0x95)) }
    // [IsSpecialName] System.String get_ContentCoding()
    private func _n_get_ContentCoding(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentCoding(pThis, __presult))
        }
    }
    public func get_ContentCoding() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ContentCoding(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_Quality()
    private func _n_get_Quality(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Quality(pThis, __presult))
        }
    }
    public func get_Quality() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_Quality(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    public var ContentCoding : Swift.String {
        get throws {
            return try get_ContentCoding();
        }
    }
    public var Quality : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_Quality();
        }
    }
} // IHttpContentCodingWithQualityHeaderValue


// type: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection
// interface type
open class IHttpContentCodingWithQualityHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7c0d753e, Data2: 0xe899, Data3 : 0x4378, Data4 : (0xb5, 0xc8, 0x41, 0x2d, 0x82, 0x07, 0x11, 0xcc)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpContentCodingWithQualityHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpContentCodingWithQualityHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc45eee1a, Data2: 0xc553, Data3 : 0x46fc, Data4 : (0xad, 0xe2, 0xd7, 0x5c, 0x1d, 0x53, 0xdf, 0x7b)) }
    // Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue CreateFromValue(System.String)
    private func _n_CreateFromValue(_ contentCoding : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromValue(pThis, contentCoding, __presult))
        }
    }
    public func CreateFromValue(contentCoding : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue> {
        let __hstr_contentCoding = try HString(contentCoding!);
        return try withExtendedLifetime(__hstr_contentCoding) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>> = nil;
        try self._n_CreateFromValue(__hstr_contentCoding.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue CreateFromValueWithQuality(System.String, System.Double)
    private func _n_CreateFromValueWithQuality(_ contentCoding : Optional<HSTRING>, _ quality : DOUBLE, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromValueWithQuality(pThis, contentCoding, quality, __presult))
        }
    }
    public func CreateFromValueWithQuality(contentCoding : Optional<Swift.String>, quality : Swift.Double) throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue> {
        let __hstr_contentCoding = try HString(contentCoding!);
        return try withExtendedLifetime(__hstr_contentCoding) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>> = nil;
        try self._n_CreateFromValueWithQuality(__hstr_contentCoding.Raw(), quality, &__result);
        return Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue(consuming: __result);
        }
    }
} // IHttpContentCodingWithQualityHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueStatics
// interface type
open class IHttpContentCodingWithQualityHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe8c9357c, Data2: 0x8f89, Data3 : 0x4801, Data4 : (0x8e, 0x75, 0x4c, 0x9a, 0xbf, 0xc3, 0xde, 0x71)) }
    // Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ contentCodingWithQualityHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, contentCodingWithQualityHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, contentCodingWithQualityHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_contentCodingWithQualityHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_contentCodingWithQualityHeaderValue, &__result);
            contentCodingWithQualityHeaderValue = Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValue(consuming: _tmp_out_contentCodingWithQualityHeaderValue);
        return __result;
        }
    }
} // IHttpContentCodingWithQualityHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue
// interface type
open class IHttpContentDispositionHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf2a2eedc, Data2: 0x2629, Data3 : 0x4b49, Data4 : (0x99, 0x08, 0x96, 0xa1, 0x68, 0xe9, 0x36, 0x5e)) }
    // [IsSpecialName] System.String get_DispositionType()
    private func _n_get_DispositionType(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispositionType(pThis, __presult))
        }
    }
    public func get_DispositionType() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DispositionType(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_DispositionType(System.String)
    private func _n_put_DispositionType(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DispositionType(pThis, value))
        }
    }
    public func put_DispositionType(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_DispositionType(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_FileName()
    private func _n_get_FileName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileName(pThis, __presult))
        }
    }
    public func get_FileName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FileName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_FileName(System.String)
    private func _n_put_FileName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FileName(pThis, value))
        }
    }
    public func put_FileName(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_FileName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_FileNameStar()
    private func _n_get_FileNameStar(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileNameStar(pThis, __presult))
        }
    }
    public func get_FileNameStar() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FileNameStar(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_FileNameStar(System.String)
    private func _n_put_FileNameStar(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FileNameStar(pThis, value))
        }
    }
    public func put_FileNameStar(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_FileNameStar(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Name(System.String)
    private func _n_put_Name(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Name(pThis, value))
        }
    }
    public func put_Name(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Name(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue> get_Parameters()
    private func _n_get_Parameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parameters(pThis, __presult))
        }
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_get_Parameters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt64> get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>> = nil;
        try self._n_get_Size(&__result);
        return ClosedGenerics.IReference_1_UINT64(consuming: __result);
    }
    // [IsSpecialName] void put_Size(Windows.Foundation.IReference<System.UInt64>)
    private func _n_put_Size(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Size(pThis, value))
        }
    }
    public func put_Size(value : Optional<ClosedGenerics.IReference_1_UINT64>) throws -> Void {
        try self._n_put_Size(RawPointer(value));
    }
    public var DispositionType : Swift.String {
        get throws {
            return try get_DispositionType();
        }
    }
    public var FileName : Swift.String {
        get throws {
            return try get_FileName();
        }
    }
    public var FileNameStar : Swift.String {
        get throws {
            return try get_FileNameStar();
        }
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
            return try get_Parameters();
        }
    }
    public var Size : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
            return try get_Size();
        }
    }
} // IHttpContentDispositionHeaderValue


// type: Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpContentDispositionHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9915bbc4, Data2: 0x456c, Data3 : 0x4e81, Data4 : (0x82, 0x95, 0xb2, 0xab, 0x3c, 0xbc, 0xf5, 0x45)) }
    // Windows.Web.Http.Headers.HttpContentDispositionHeaderValue Create(System.String)
    private func _n_Create(_ dispositionType : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, dispositionType, __presult))
        }
    }
    public func Create(dispositionType : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue> {
        let __hstr_dispositionType = try HString(dispositionType!);
        return try withExtendedLifetime(__hstr_dispositionType) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>> = nil;
        try self._n_Create(__hstr_dispositionType.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue(consuming: __result);
        }
    }
} // IHttpContentDispositionHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpContentDispositionHeaderValueStatics
// interface type
open class IHttpContentDispositionHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x29c56067, Data2: 0x5a37, Data3 : 0x46e4, Data4 : (0xb0, 0x74, 0xc5, 0x17, 0x7d, 0x69, 0xca, 0x66)) }
    // Windows.Web.Http.Headers.HttpContentDispositionHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpContentDispositionHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ contentDispositionHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, contentDispositionHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, contentDispositionHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_contentDispositionHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_contentDispositionHeaderValue, &__result);
            contentDispositionHeaderValue = Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue(consuming: _tmp_out_contentDispositionHeaderValue);
        return __result;
        }
    }
} // IHttpContentDispositionHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpContentHeaderCollection
// interface type
open class IHttpContentHeaderCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x40612a44, Data2: 0x47ae, Data3 : 0x4b7e, Data4 : (0x91, 0x24, 0x69, 0x62, 0x8b, 0x64, 0xaa, 0x18)) }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpContentDispositionHeaderValue get_ContentDisposition()
    private func _n_get_ContentDisposition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentDisposition(pThis, __presult))
        }
    }
    public func get_ContentDisposition() throws -> Optional<Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>> = nil;
        try self._n_get_ContentDisposition(&__result);
        return Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue(consuming: __result);
    }
    // [IsSpecialName] void put_ContentDisposition(Windows.Web.Http.Headers.HttpContentDispositionHeaderValue)
    private func _n_put_ContentDisposition(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentDispositionHeaderValue>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentDisposition(pThis, value))
        }
    }
    public func put_ContentDisposition(value : Optional<Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue>) throws -> Void {
        try self._n_put_ContentDisposition(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection get_ContentEncoding()
    private func _n_get_ContentEncoding(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentEncoding(pThis, __presult))
        }
    }
    public func get_ContentEncoding() throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingHeaderValueCollection>> = nil;
        try self._n_get_ContentEncoding(&__result);
        return Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection get_ContentLanguage()
    private func _n_get_ContentLanguage(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentLanguage(pThis, __presult))
        }
    }
    public func get_ContentLanguage() throws -> Optional<Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection>> = nil;
        try self._n_get_ContentLanguage(&__result);
        return Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt64> get_ContentLength()
    private func _n_get_ContentLength(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentLength(pThis, __presult))
        }
    }
    public func get_ContentLength() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>> = nil;
        try self._n_get_ContentLength(&__result);
        return ClosedGenerics.IReference_1_UINT64(consuming: __result);
    }
    // [IsSpecialName] void put_ContentLength(Windows.Foundation.IReference<System.UInt64>)
    private func _n_put_ContentLength(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentLength(pThis, value))
        }
    }
    public func put_ContentLength(value : Optional<ClosedGenerics.IReference_1_UINT64>) throws -> Void {
        try self._n_put_ContentLength(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_ContentLocation()
    private func _n_get_ContentLocation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentLocation(pThis, __presult))
        }
    }
    public func get_ContentLocation() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_ContentLocation(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_ContentLocation(Windows.Foundation.Uri)
    private func _n_put_ContentLocation(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentLocation(pThis, value))
        }
    }
    public func put_ContentLocation(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_ContentLocation(RawPointer(value));
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_ContentMD5()
    private func _n_get_ContentMD5(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentMD5(pThis, __presult))
        }
    }
    public func get_ContentMD5() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_ContentMD5(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // [IsSpecialName] void put_ContentMD5(Windows.Storage.Streams.IBuffer)
    private func _n_put_ContentMD5(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentMD5(pThis, value))
        }
    }
    public func put_ContentMD5(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        try self._n_put_ContentMD5(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpContentRangeHeaderValue get_ContentRange()
    private func _n_get_ContentRange(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentRange(pThis, __presult))
        }
    }
    public func get_ContentRange() throws -> Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>> = nil;
        try self._n_get_ContentRange(&__result);
        return Windows.Web.Http.Headers.IHttpContentRangeHeaderValue(consuming: __result);
    }
    // [IsSpecialName] void put_ContentRange(Windows.Web.Http.Headers.HttpContentRangeHeaderValue)
    private func _n_put_ContentRange(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentRange(pThis, value))
        }
    }
    public func put_ContentRange(value : Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue>) throws -> Void {
        try self._n_put_ContentRange(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpMediaTypeHeaderValue get_ContentType()
    private func _n_get_ContentType(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentType(pThis, __presult))
        }
    }
    public func get_ContentType() throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>> = nil;
        try self._n_get_ContentType(&__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue(consuming: __result);
    }
    // [IsSpecialName] void put_ContentType(Windows.Web.Http.Headers.HttpMediaTypeHeaderValue)
    private func _n_put_ContentType(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentType(pThis, value))
        }
    }
    public func put_ContentType(value : Optional<Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue>) throws -> Void {
        try self._n_put_ContentType(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_Expires()
    private func _n_get_Expires(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Expires(pThis, __presult))
        }
    }
    public func get_Expires() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_Expires(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] void put_Expires(Windows.Foundation.IReference<Windows.Foundation.DateTime>)
    private func _n_put_Expires(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Expires(pThis, value))
        }
    }
    public func put_Expires(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        try self._n_put_Expires(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_LastModified()
    private func _n_get_LastModified(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastModified(pThis, __presult))
        }
    }
    public func get_LastModified() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_LastModified(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] void put_LastModified(Windows.Foundation.IReference<Windows.Foundation.DateTime>)
    private func _n_put_LastModified(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastModified(pThis, value))
        }
    }
    public func put_LastModified(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        try self._n_put_LastModified(RawPointer(value));
    }
    // void Append(System.String, System.String)
    private func _n_Append(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, name, value))
        }
    }
    public func Append(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> Void {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_Append(__hstr_name.Raw(), __hstr_value.Raw());
        }
        }
    }
    // bool TryAppendWithoutValidation(System.String, System.String)
    private func _n_TryAppendWithoutValidation(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryAppendWithoutValidation(pThis, name, value, __presult))
        }
    }
    public func TryAppendWithoutValidation(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> boolean {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        var __result : boolean = 0;
        try self._n_TryAppendWithoutValidation(__hstr_name.Raw(), __hstr_value.Raw(), &__result);
        return __result;
        }
        }
    }
    public var ContentDisposition : Optional<Windows.Web.Http.Headers.IHttpContentDispositionHeaderValue> {
        get throws {
            return try get_ContentDisposition();
        }
    }
    public var ContentEncoding : Optional<Windows.Web.Http.Headers.IHttpContentCodingHeaderValueCollection> {
        get throws {
            return try get_ContentEncoding();
        }
    }
    public var ContentLanguage : Optional<Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection> {
        get throws {
            return try get_ContentLanguage();
        }
    }
    public var ContentLength : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
            return try get_ContentLength();
        }
    }
    public var ContentLocation : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_ContentLocation();
        }
    }
    public var ContentMD5 : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_ContentMD5();
        }
    }
    public var ContentRange : Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue> {
        get throws {
            return try get_ContentRange();
        }
    }
    public var ContentType : Optional<Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue> {
        get throws {
            return try get_ContentType();
        }
    }
    public var Expires : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_Expires();
        }
    }
    public var LastModified : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_LastModified();
        }
    }
} // IHttpContentHeaderCollection


// type: Windows.Web.Http.Headers.IHttpContentRangeHeaderValue
// interface type
open class IHttpContentRangeHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x04d967d3, Data2: 0xa4f6, Data3 : 0x495c, Data4 : (0x95, 0x30, 0x85, 0x79, 0xfc, 0xba, 0x8a, 0xa9)) }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt64> get_FirstBytePosition()
    private func _n_get_FirstBytePosition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstBytePosition(pThis, __presult))
        }
    }
    public func get_FirstBytePosition() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>> = nil;
        try self._n_get_FirstBytePosition(&__result);
        return ClosedGenerics.IReference_1_UINT64(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt64> get_LastBytePosition()
    private func _n_get_LastBytePosition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastBytePosition(pThis, __presult))
        }
    }
    public func get_LastBytePosition() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>> = nil;
        try self._n_get_LastBytePosition(&__result);
        return ClosedGenerics.IReference_1_UINT64(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt64> get_Length()
    private func _n_get_Length(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Length(pThis, __presult))
        }
    }
    public func get_Length() throws -> Optional<ClosedGenerics.IReference_1_UINT64> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT64>> = nil;
        try self._n_get_Length(&__result);
        return ClosedGenerics.IReference_1_UINT64(consuming: __result);
    }
    // [IsSpecialName] System.String get_Unit()
    private func _n_get_Unit(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Unit(pThis, __presult))
        }
    }
    public func get_Unit() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Unit(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Unit(System.String)
    private func _n_put_Unit(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Unit(pThis, value))
        }
    }
    public func put_Unit(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Unit(__hstr_value.Raw());
        }
    }
    public var FirstBytePosition : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
            return try get_FirstBytePosition();
        }
    }
    public var LastBytePosition : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
            return try get_LastBytePosition();
        }
    }
    public var Length : Optional<ClosedGenerics.IReference_1_UINT64> {
        get throws {
            return try get_Length();
        }
    }
    public var Unit : Swift.String {
        get throws {
            return try get_Unit();
        }
    }
} // IHttpContentRangeHeaderValue


// type: Windows.Web.Http.Headers.IHttpContentRangeHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpContentRangeHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3f5bd691, Data2: 0xa03c, Data3 : 0x4456, Data4 : (0x9a, 0x6f, 0xef, 0x27, 0xec, 0xd0, 0x3c, 0xae)) }
    // Windows.Web.Http.Headers.HttpContentRangeHeaderValue CreateFromLength(System.UInt64)
    private func _n_CreateFromLength(_ length : UINT64, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromLength(pThis, length, __presult))
        }
    }
    public func CreateFromLength(length : Swift.UInt64) throws -> Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>> = nil;
        try self._n_CreateFromLength(length, &__result);
        return Windows.Web.Http.Headers.IHttpContentRangeHeaderValue(consuming: __result);
    }
    // Windows.Web.Http.Headers.HttpContentRangeHeaderValue CreateFromRange(System.UInt64, System.UInt64)
    private func _n_CreateFromRange(_ from : UINT64, _ to : UINT64, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromRange(pThis, from, to, __presult))
        }
    }
    public func CreateFromRange(from : Swift.UInt64, to : Swift.UInt64) throws -> Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>> = nil;
        try self._n_CreateFromRange(from, to, &__result);
        return Windows.Web.Http.Headers.IHttpContentRangeHeaderValue(consuming: __result);
    }
    // Windows.Web.Http.Headers.HttpContentRangeHeaderValue CreateFromRangeWithLength(System.UInt64, System.UInt64, System.UInt64)
    private func _n_CreateFromRangeWithLength(_ from : UINT64, _ to : UINT64, _ length : UINT64, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromRangeWithLength(pThis, from, to, length, __presult))
        }
    }
    public func CreateFromRangeWithLength(from : Swift.UInt64, to : Swift.UInt64, length : Swift.UInt64) throws -> Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>> = nil;
        try self._n_CreateFromRangeWithLength(from, to, length, &__result);
        return Windows.Web.Http.Headers.IHttpContentRangeHeaderValue(consuming: __result);
    }
} // IHttpContentRangeHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpContentRangeHeaderValueStatics
// interface type
open class IHttpContentRangeHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x80a346ca, Data2: 0x174c, Data3 : 0x4fae, Data4 : (0x82, 0x1c, 0x13, 0x4c, 0xd2, 0x94, 0xaa, 0x38)) }
    // Windows.Web.Http.Headers.HttpContentRangeHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpContentRangeHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpContentRangeHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ contentRangeHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, contentRangeHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, contentRangeHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpContentRangeHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_contentRangeHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentRangeHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_contentRangeHeaderValue, &__result);
            contentRangeHeaderValue = Windows.Web.Http.Headers.IHttpContentRangeHeaderValue(consuming: _tmp_out_contentRangeHeaderValue);
        return __result;
        }
    }
} // IHttpContentRangeHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpCookiePairHeaderValue
// interface type
open class IHttpCookiePairHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcbd46217, Data2: 0x4b29, Data3 : 0x412b, Data4 : (0xbd, 0x90, 0xb3, 0xd8, 0x14, 0xab, 0x8e, 0x1b)) }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Value(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Value(System.String)
    private func _n_put_Value(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
        }
    }
    public func put_Value(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Value(__hstr_value.Raw());
        }
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var Value : Swift.String {
        get throws {
            return try get_Value();
        }
    }
} // IHttpCookiePairHeaderValue


// type: Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection
// interface type
open class IHttpCookiePairHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf3f44350, Data2: 0x581e, Data3 : 0x4ecc, Data4 : (0x9f, 0x59, 0xe5, 0x07, 0xd0, 0x4f, 0x06, 0xe6)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpCookiePairHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpCookiePairHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpCookiePairHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x635e326f, Data2: 0x146f, Data3 : 0x4f56, Data4 : (0xaa, 0x21, 0x2c, 0xb7, 0xd6, 0xd5, 0x8b, 0x1e)) }
    // Windows.Web.Http.Headers.HttpCookiePairHeaderValue CreateFromName(System.String)
    private func _n_CreateFromName(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromName(pThis, name, __presult))
        }
    }
    public func CreateFromName(name : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>> = nil;
        try self._n_CreateFromName(__hstr_name.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpCookiePairHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpCookiePairHeaderValue CreateFromNameWithValue(System.String, System.String)
    private func _n_CreateFromNameWithValue(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNameWithValue(pThis, name, value, __presult))
        }
    }
    public func CreateFromNameWithValue(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>> = nil;
        try self._n_CreateFromNameWithValue(__hstr_name.Raw(), __hstr_value.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpCookiePairHeaderValue(consuming: __result);
        }
        }
    }
} // IHttpCookiePairHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpCookiePairHeaderValueStatics
// interface type
open class IHttpCookiePairHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6e866d48, Data2: 0x06af, Data3 : 0x4462, Data4 : (0x81, 0x58, 0x99, 0x38, 0x8d, 0x5d, 0xca, 0x81)) }
    // Windows.Web.Http.Headers.HttpCookiePairHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpCookiePairHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpCookiePairHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ cookiePairHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, cookiePairHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, cookiePairHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_cookiePairHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_cookiePairHeaderValue, &__result);
            cookiePairHeaderValue = Windows.Web.Http.Headers.IHttpCookiePairHeaderValue(consuming: _tmp_out_cookiePairHeaderValue);
        return __result;
        }
    }
} // IHttpCookiePairHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpCredentialsHeaderValue
// interface type
open class IHttpCredentialsHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc34cc3cb, Data2: 0x542e, Data3 : 0x4177, Data4 : (0xa6, 0xc7, 0xb6, 0x74, 0xce, 0x19, 0x3f, 0xbf)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue> get_Parameters()
    private func _n_get_Parameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parameters(pThis, __presult))
        }
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_get_Parameters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.String get_Scheme()
    private func _n_get_Scheme(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scheme(pThis, __presult))
        }
    }
    public func get_Scheme() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Scheme(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Token()
    private func _n_get_Token(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Token(pThis, __presult))
        }
    }
    public func get_Token() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Token(&__result);
        return Swift.String(from: __result);
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
            return try get_Parameters();
        }
    }
    public var Scheme : Swift.String {
        get throws {
            return try get_Scheme();
        }
    }
    public var Token : Swift.String {
        get throws {
            return try get_Token();
        }
    }
} // IHttpCredentialsHeaderValue


// type: Windows.Web.Http.Headers.IHttpCredentialsHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpCredentialsHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf21d9e91, Data2: 0x4d1c, Data3 : 0x4182, Data4 : (0xbf, 0xd1, 0x34, 0x47, 0x0a, 0x62, 0xf9, 0x50)) }
    // Windows.Web.Http.Headers.HttpCredentialsHeaderValue CreateFromScheme(System.String)
    private func _n_CreateFromScheme(_ scheme : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromScheme(pThis, scheme, __presult))
        }
    }
    public func CreateFromScheme(scheme : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> {
        let __hstr_scheme = try HString(scheme!);
        return try withExtendedLifetime(__hstr_scheme) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>> = nil;
        try self._n_CreateFromScheme(__hstr_scheme.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpCredentialsHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpCredentialsHeaderValue CreateFromSchemeWithToken(System.String, System.String)
    private func _n_CreateFromSchemeWithToken(_ scheme : Optional<HSTRING>, _ token : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromSchemeWithToken(pThis, scheme, token, __presult))
        }
    }
    public func CreateFromSchemeWithToken(scheme : Optional<Swift.String>, token : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> {
        let __hstr_scheme = try HString(scheme!);
        return try withExtendedLifetime(__hstr_scheme) {
        let __hstr_token = try HString(token!);
        return try withExtendedLifetime(__hstr_token) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>> = nil;
        try self._n_CreateFromSchemeWithToken(__hstr_scheme.Raw(), __hstr_token.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpCredentialsHeaderValue(consuming: __result);
        }
        }
    }
} // IHttpCredentialsHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpCredentialsHeaderValueStatics
// interface type
open class IHttpCredentialsHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa69b2be6, Data2: 0xce8c, Data3 : 0x4443, Data4 : (0xa3, 0x5a, 0x1b, 0x72, 0x7b, 0x13, 0x10, 0x36)) }
    // Windows.Web.Http.Headers.HttpCredentialsHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpCredentialsHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpCredentialsHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ credentialsHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, credentialsHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, credentialsHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_credentialsHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_credentialsHeaderValue, &__result);
            credentialsHeaderValue = Windows.Web.Http.Headers.IHttpCredentialsHeaderValue(consuming: _tmp_out_credentialsHeaderValue);
        return __result;
        }
    }
} // IHttpCredentialsHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue
// interface type
open class IHttpDateOrDeltaHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xeafcaa6a, Data2: 0xc4dc, Data3 : 0x49e2, Data4 : (0xa2, 0x7d, 0x04, 0x3a, 0xdf, 0x58, 0x67, 0xa3)) }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_Date()
    private func _n_get_Date(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Date(pThis, __presult))
        }
    }
    public func get_Date() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_Date(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> get_Delta()
    private func _n_get_Delta(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Delta(pThis, __presult))
        }
    }
    public func get_Delta() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>> = nil;
        try self._n_get_Delta(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan(consuming: __result);
    }
    public var Date : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_Date();
        }
    }
    public var Delta : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
            return try get_Delta();
        }
    }
} // IHttpDateOrDeltaHeaderValue


// type: Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValueStatics
// interface type
open class IHttpDateOrDeltaHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7c2659a8, Data2: 0x6672, Data3 : 0x4e90, Data4 : (0x9a, 0x9a, 0xf3, 0x97, 0x66, 0xf7, 0xf5, 0x76)) }
    // Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ dateOrDeltaHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, dateOrDeltaHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, dateOrDeltaHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_dateOrDeltaHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_dateOrDeltaHeaderValue, &__result);
            dateOrDeltaHeaderValue = Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue(consuming: _tmp_out_dateOrDeltaHeaderValue);
        return __result;
        }
    }
} // IHttpDateOrDeltaHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpExpectationHeaderValue
// interface type
open class IHttpExpectationHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4ce585cd, Data2: 0x3a99, Data3 : 0x43af, Data4 : (0xa2, 0xe6, 0xec, 0x23, 0x2f, 0xea, 0x96, 0x58)) }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Value(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Value(System.String)
    private func _n_put_Value(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
        }
    }
    public func put_Value(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Value(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue> get_Parameters()
    private func _n_get_Parameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parameters(pThis, __presult))
        }
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_get_Parameters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
            return try get_Parameters();
        }
    }
    public var Value : Swift.String {
        get throws {
            return try get_Value();
        }
    }
} // IHttpExpectationHeaderValue


// type: Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection
// interface type
open class IHttpExpectationHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe78521b3, Data2: 0xa0e2, Data3 : 0x4ac4, Data4 : (0x9e, 0x66, 0x79, 0x70, 0x6c, 0xb9, 0xfd, 0x58)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpExpectationHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpExpectationHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpExpectationHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4ea275cb, Data2: 0xd53e, Data3 : 0x4868, Data4 : (0x88, 0x56, 0x1e, 0x21, 0xa5, 0x03, 0x0d, 0xc0)) }
    // Windows.Web.Http.Headers.HttpExpectationHeaderValue CreateFromName(System.String)
    private func _n_CreateFromName(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromName(pThis, name, __presult))
        }
    }
    public func CreateFromName(name : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>> = nil;
        try self._n_CreateFromName(__hstr_name.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpExpectationHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpExpectationHeaderValue CreateFromNameWithValue(System.String, System.String)
    private func _n_CreateFromNameWithValue(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNameWithValue(pThis, name, value, __presult))
        }
    }
    public func CreateFromNameWithValue(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>> = nil;
        try self._n_CreateFromNameWithValue(__hstr_name.Raw(), __hstr_value.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpExpectationHeaderValue(consuming: __result);
        }
        }
    }
} // IHttpExpectationHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpExpectationHeaderValueStatics
// interface type
open class IHttpExpectationHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3019abe2, Data2: 0xcfe5, Data3 : 0x473b, Data4 : (0xa5, 0x7f, 0xfb, 0xa5, 0xb1, 0x4e, 0xb2, 0x57)) }
    // Windows.Web.Http.Headers.HttpExpectationHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpExpectationHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpExpectationHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ expectationHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, expectationHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, expectationHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_expectationHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_expectationHeaderValue, &__result);
            expectationHeaderValue = Windows.Web.Http.Headers.IHttpExpectationHeaderValue(consuming: _tmp_out_expectationHeaderValue);
        return __result;
        }
    }
} // IHttpExpectationHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpLanguageHeaderValueCollection
// interface type
open class IHttpLanguageHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9ebd7ca3, Data2: 0x8219, Data3 : 0x44f6, Data4 : (0x99, 0x02, 0x8c, 0x56, 0xdf, 0xd3, 0x34, 0x0c)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpLanguageHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue
// interface type
open class IHttpLanguageRangeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7256e102, Data2: 0x0080, Data3 : 0x4db4, Data4 : (0xa0, 0x83, 0x7d, 0xe7, 0xb2, 0xe5, 0xba, 0x4c)) }
    // [IsSpecialName] System.String get_LanguageRange()
    private func _n_get_LanguageRange(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageRange(pThis, __presult))
        }
    }
    public func get_LanguageRange() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LanguageRange(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_Quality()
    private func _n_get_Quality(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Quality(pThis, __presult))
        }
    }
    public func get_Quality() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_Quality(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    public var LanguageRange : Swift.String {
        get throws {
            return try get_LanguageRange();
        }
    }
    public var Quality : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_Quality();
        }
    }
} // IHttpLanguageRangeWithQualityHeaderValue


// type: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection
// interface type
open class IHttpLanguageRangeWithQualityHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x885d5abd, Data2: 0x4b4f, Data3 : 0x480a, Data4 : (0x89, 0xce, 0x8a, 0xed, 0xce, 0xe6, 0xe3, 0xa0)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpLanguageRangeWithQualityHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpLanguageRangeWithQualityHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7bb83970, Data2: 0x780f, Data3 : 0x4c83, Data4 : (0x9f, 0xe4, 0xdc, 0x30, 0x87, 0xf6, 0xbd, 0x55)) }
    // Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRange(System.String)
    private func _n_CreateFromLanguageRange(_ languageRange : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromLanguageRange(pThis, languageRange, __presult))
        }
    }
    public func CreateFromLanguageRange(languageRange : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue> {
        let __hstr_languageRange = try HString(languageRange!);
        return try withExtendedLifetime(__hstr_languageRange) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>> = nil;
        try self._n_CreateFromLanguageRange(__hstr_languageRange.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRangeWithQuality(System.String, System.Double)
    private func _n_CreateFromLanguageRangeWithQuality(_ languageRange : Optional<HSTRING>, _ quality : DOUBLE, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromLanguageRangeWithQuality(pThis, languageRange, quality, __presult))
        }
    }
    public func CreateFromLanguageRangeWithQuality(languageRange : Optional<Swift.String>, quality : Swift.Double) throws -> Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue> {
        let __hstr_languageRange = try HString(languageRange!);
        return try withExtendedLifetime(__hstr_languageRange) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>> = nil;
        try self._n_CreateFromLanguageRangeWithQuality(__hstr_languageRange.Raw(), quality, &__result);
        return Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue(consuming: __result);
        }
    }
} // IHttpLanguageRangeWithQualityHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueStatics
// interface type
open class IHttpLanguageRangeWithQualityHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2541e146, Data2: 0xf308, Data3 : 0x46f5, Data4 : (0xb6, 0x95, 0x42, 0xf5, 0x40, 0x24, 0xec, 0x68)) }
    // Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ languageRangeWithQualityHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, languageRangeWithQualityHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, languageRangeWithQualityHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_languageRangeWithQualityHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_languageRangeWithQualityHeaderValue, &__result);
            languageRangeWithQualityHeaderValue = Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValue(consuming: _tmp_out_languageRangeWithQualityHeaderValue);
        return __result;
        }
    }
} // IHttpLanguageRangeWithQualityHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue
// interface type
open class IHttpMediaTypeHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x16b28533, Data2: 0xe728, Data3 : 0x4fcb, Data4 : (0xbd, 0xb0, 0x08, 0xa4, 0x31, 0xa1, 0x48, 0x44)) }
    // [IsSpecialName] System.String get_CharSet()
    private func _n_get_CharSet(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharSet(pThis, __presult))
        }
    }
    public func get_CharSet() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CharSet(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_CharSet(System.String)
    private func _n_put_CharSet(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharSet(pThis, value))
        }
    }
    public func put_CharSet(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_CharSet(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_MediaType()
    private func _n_get_MediaType(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaType(pThis, __presult))
        }
    }
    public func get_MediaType() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MediaType(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_MediaType(System.String)
    private func _n_put_MediaType(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaType(pThis, value))
        }
    }
    public func put_MediaType(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_MediaType(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue> get_Parameters()
    private func _n_get_Parameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parameters(pThis, __presult))
        }
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_get_Parameters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    public var CharSet : Swift.String {
        get throws {
            return try get_CharSet();
        }
    }
    public var MediaType : Swift.String {
        get throws {
            return try get_MediaType();
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
            return try get_Parameters();
        }
    }
} // IHttpMediaTypeHeaderValue


// type: Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpMediaTypeHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbed747a8, Data2: 0xcd17, Data3 : 0x42dd, Data4 : (0x93, 0x67, 0xab, 0x9c, 0x5b, 0x56, 0xdd, 0x7d)) }
    // Windows.Web.Http.Headers.HttpMediaTypeHeaderValue Create(System.String)
    private func _n_Create(_ mediaType : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, mediaType, __presult))
        }
    }
    public func Create(mediaType : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue> {
        let __hstr_mediaType = try HString(mediaType!);
        return try withExtendedLifetime(__hstr_mediaType) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>> = nil;
        try self._n_Create(__hstr_mediaType.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue(consuming: __result);
        }
    }
} // IHttpMediaTypeHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpMediaTypeHeaderValueStatics
// interface type
open class IHttpMediaTypeHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe04d83df, Data2: 0x1d41, Data3 : 0x4d8c, Data4 : (0xa2, 0xde, 0x6f, 0xd2, 0xed, 0x87, 0x39, 0x9b)) }
    // Windows.Web.Http.Headers.HttpMediaTypeHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpMediaTypeHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ mediaTypeHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, mediaTypeHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, mediaTypeHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_mediaTypeHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_mediaTypeHeaderValue, &__result);
            mediaTypeHeaderValue = Windows.Web.Http.Headers.IHttpMediaTypeHeaderValue(consuming: _tmp_out_mediaTypeHeaderValue);
        return __result;
        }
    }
} // IHttpMediaTypeHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue
// interface type
open class IHttpMediaTypeWithQualityHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x188d5e32, Data2: 0x76be, Data3 : 0x44a0, Data4 : (0xb1, 0xcd, 0x20, 0x74, 0xbd, 0xed, 0x2d, 0xde)) }
    // [IsSpecialName] System.String get_CharSet()
    private func _n_get_CharSet(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharSet(pThis, __presult))
        }
    }
    public func get_CharSet() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_CharSet(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_CharSet(System.String)
    private func _n_put_CharSet(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharSet(pThis, value))
        }
    }
    public func put_CharSet(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_CharSet(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_MediaType()
    private func _n_get_MediaType(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MediaType(pThis, __presult))
        }
    }
    public func get_MediaType() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_MediaType(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_MediaType(System.String)
    private func _n_put_MediaType(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MediaType(pThis, value))
        }
    }
    public func put_MediaType(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_MediaType(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue> get_Parameters()
    private func _n_get_Parameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parameters(pThis, __presult))
        }
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_get_Parameters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.Double> get_Quality()
    private func _n_get_Quality(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Quality(pThis, __presult))
        }
    }
    public func get_Quality() throws -> Optional<ClosedGenerics.IReference_1_DOUBLE> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>> = nil;
        try self._n_get_Quality(&__result);
        return ClosedGenerics.IReference_1_DOUBLE(consuming: __result);
    }
    // [IsSpecialName] void put_Quality(Windows.Foundation.IReference<System.Double>)
    private func _n_put_Quality(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_DOUBLE>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Quality(pThis, value))
        }
    }
    public func put_Quality(value : Optional<ClosedGenerics.IReference_1_DOUBLE>) throws -> Void {
        try self._n_put_Quality(RawPointer(value));
    }
    public var CharSet : Swift.String {
        get throws {
            return try get_CharSet();
        }
    }
    public var MediaType : Swift.String {
        get throws {
            return try get_MediaType();
        }
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
            return try get_Parameters();
        }
    }
    public var Quality : Optional<ClosedGenerics.IReference_1_DOUBLE> {
        get throws {
            return try get_Quality();
        }
    }
} // IHttpMediaTypeWithQualityHeaderValue


// type: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection
// interface type
open class IHttpMediaTypeWithQualityHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3c0c6b73, Data2: 0x1342, Data3 : 0x4587, Data4 : (0xa0, 0x56, 0x18, 0xd0, 0x2f, 0xf6, 0x71, 0x65)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpMediaTypeWithQualityHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpMediaTypeWithQualityHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4c6d20f4, Data2: 0x9457, Data3 : 0x44e6, Data4 : (0xa3, 0x23, 0xd1, 0x22, 0xb9, 0x58, 0x78, 0x0b)) }
    // Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue CreateFromMediaType(System.String)
    private func _n_CreateFromMediaType(_ mediaType : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromMediaType(pThis, mediaType, __presult))
        }
    }
    public func CreateFromMediaType(mediaType : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue> {
        let __hstr_mediaType = try HString(mediaType!);
        return try withExtendedLifetime(__hstr_mediaType) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>> = nil;
        try self._n_CreateFromMediaType(__hstr_mediaType.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue CreateFromMediaTypeWithQuality(System.String, System.Double)
    private func _n_CreateFromMediaTypeWithQuality(_ mediaType : Optional<HSTRING>, _ quality : DOUBLE, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromMediaTypeWithQuality(pThis, mediaType, quality, __presult))
        }
    }
    public func CreateFromMediaTypeWithQuality(mediaType : Optional<Swift.String>, quality : Swift.Double) throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue> {
        let __hstr_mediaType = try HString(mediaType!);
        return try withExtendedLifetime(__hstr_mediaType) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>> = nil;
        try self._n_CreateFromMediaTypeWithQuality(__hstr_mediaType.Raw(), quality, &__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue(consuming: __result);
        }
    }
} // IHttpMediaTypeWithQualityHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueStatics
// interface type
open class IHttpMediaTypeWithQualityHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5b070cd9, Data2: 0xb560, Data3 : 0x4fc8, Data4 : (0x98, 0x35, 0x7e, 0x6c, 0x0a, 0x65, 0x7b, 0x24)) }
    // Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ mediaTypeWithQualityHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, mediaTypeWithQualityHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, mediaTypeWithQualityHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_mediaTypeWithQualityHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_mediaTypeWithQualityHeaderValue, &__result);
            mediaTypeWithQualityHeaderValue = Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValue(consuming: _tmp_out_mediaTypeWithQualityHeaderValue);
        return __result;
        }
    }
} // IHttpMediaTypeWithQualityHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection
// interface type
open class IHttpMethodHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43bc3ff4, Data2: 0x6119, Data3 : 0x4adf, Data4 : (0x93, 0x8c, 0x34, 0xbf, 0xff, 0xcf, 0x92, 0xed)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpMethodHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpNameValueHeaderValue
// interface type
open class IHttpNameValueHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd8ba7463, Data2: 0x5b9a, Data3 : 0x4d1b, Data4 : (0x93, 0xf9, 0xaa, 0x5b, 0x44, 0xec, 0xfd, 0xdf)) }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Value(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Value(System.String)
    private func _n_put_Value(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Value(pThis, value))
        }
    }
    public func put_Value(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Value(__hstr_value.Raw());
        }
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var Value : Swift.String {
        get throws {
            return try get_Value();
        }
    }
} // IHttpNameValueHeaderValue


// type: Windows.Web.Http.Headers.IHttpNameValueHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpNameValueHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x770e2267, Data2: 0xcbf8, Data3 : 0x4736, Data4 : (0xa9, 0x25, 0x93, 0xfb, 0xe1, 0x0c, 0x7c, 0xa8)) }
    // Windows.Web.Http.Headers.HttpNameValueHeaderValue CreateFromName(System.String)
    private func _n_CreateFromName(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromName(pThis, name, __presult))
        }
    }
    public func CreateFromName(name : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>> = nil;
        try self._n_CreateFromName(__hstr_name.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpNameValueHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpNameValueHeaderValue CreateFromNameWithValue(System.String, System.String)
    private func _n_CreateFromNameWithValue(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNameWithValue(pThis, name, value, __presult))
        }
    }
    public func CreateFromNameWithValue(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>> = nil;
        try self._n_CreateFromNameWithValue(__hstr_name.Raw(), __hstr_value.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpNameValueHeaderValue(consuming: __result);
        }
        }
    }
} // IHttpNameValueHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpNameValueHeaderValueStatics
// interface type
open class IHttpNameValueHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xffd4030f, Data2: 0x1130, Data3 : 0x4152, Data4 : (0x86, 0x59, 0x25, 0x69, 0x09, 0xa9, 0xd1, 0x15)) }
    // Windows.Web.Http.Headers.HttpNameValueHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpNameValueHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpNameValueHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ nameValueHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, nameValueHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, nameValueHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpNameValueHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_nameValueHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpNameValueHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_nameValueHeaderValue, &__result);
            nameValueHeaderValue = Windows.Web.Http.Headers.IHttpNameValueHeaderValue(consuming: _tmp_out_nameValueHeaderValue);
        return __result;
        }
    }
} // IHttpNameValueHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpProductHeaderValue
// interface type
open class IHttpProductHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf4feee03, Data2: 0xebd4, Data3 : 0x4160, Data4 : (0xb9, 0xff, 0x80, 0x7c, 0x51, 0x83, 0xb6, 0xe6)) }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_Version()
    private func _n_get_Version(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Version(pThis, __presult))
        }
    }
    public func get_Version() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Version(&__result);
        return Swift.String(from: __result);
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var Version : Swift.String {
        get throws {
            return try get_Version();
        }
    }
} // IHttpProductHeaderValue


// type: Windows.Web.Http.Headers.IHttpProductHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpProductHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x611aa4f5, Data2: 0x82bc, Data3 : 0x42fb, Data4 : (0x97, 0x7b, 0xdc, 0x00, 0x53, 0x6e, 0x5e, 0x86)) }
    // Windows.Web.Http.Headers.HttpProductHeaderValue CreateFromName(System.String)
    private func _n_CreateFromName(_ productName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromName(pThis, productName, __presult))
        }
    }
    public func CreateFromName(productName : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpProductHeaderValue> {
        let __hstr_productName = try HString(productName!);
        return try withExtendedLifetime(__hstr_productName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>> = nil;
        try self._n_CreateFromName(__hstr_productName.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpProductHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpProductHeaderValue CreateFromNameWithVersion(System.String, System.String)
    private func _n_CreateFromNameWithVersion(_ productName : Optional<HSTRING>, _ productVersion : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNameWithVersion(pThis, productName, productVersion, __presult))
        }
    }
    public func CreateFromNameWithVersion(productName : Optional<Swift.String>, productVersion : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpProductHeaderValue> {
        let __hstr_productName = try HString(productName!);
        return try withExtendedLifetime(__hstr_productName) {
        let __hstr_productVersion = try HString(productVersion!);
        return try withExtendedLifetime(__hstr_productVersion) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>> = nil;
        try self._n_CreateFromNameWithVersion(__hstr_productName.Raw(), __hstr_productVersion.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpProductHeaderValue(consuming: __result);
        }
        }
    }
} // IHttpProductHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpProductHeaderValueStatics
// interface type
open class IHttpProductHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x90c33e29, Data2: 0xbefc, Data3 : 0x4337, Data4 : (0xbe, 0x62, 0x49, 0xf0, 0x97, 0x97, 0x5f, 0x53)) }
    // Windows.Web.Http.Headers.HttpProductHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpProductHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpProductHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpProductHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ productHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, productHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, productHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpProductHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_productHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_productHeaderValue, &__result);
            productHeaderValue = Windows.Web.Http.Headers.IHttpProductHeaderValue(consuming: _tmp_out_productHeaderValue);
        return __result;
        }
    }
} // IHttpProductHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpProductInfoHeaderValue
// interface type
open class IHttpProductInfoHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1b1a8732, Data2: 0x4c35, Data3 : 0x486a, Data4 : (0x96, 0x6f, 0x64, 0x64, 0x89, 0x19, 0x8e, 0x4d)) }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpProductHeaderValue get_Product()
    private func _n_get_Product(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Product(pThis, __presult))
        }
    }
    public func get_Product() throws -> Optional<Windows.Web.Http.Headers.IHttpProductHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductHeaderValue>> = nil;
        try self._n_get_Product(&__result);
        return Windows.Web.Http.Headers.IHttpProductHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.String get_Comment()
    private func _n_get_Comment(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Comment(pThis, __presult))
        }
    }
    public func get_Comment() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Comment(&__result);
        return Swift.String(from: __result);
    }
    public var Comment : Swift.String {
        get throws {
            return try get_Comment();
        }
    }
    public var Product : Optional<Windows.Web.Http.Headers.IHttpProductHeaderValue> {
        get throws {
            return try get_Product();
        }
    }
} // IHttpProductInfoHeaderValue


// type: Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection
// interface type
open class IHttpProductInfoHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x877df74a, Data2: 0xd69b, Data3 : 0x44f8, Data4 : (0xad, 0x4f, 0x45, 0x3a, 0xf9, 0xc4, 0x2e, 0xd0)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpProductInfoHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpProductInfoHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpProductInfoHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x24220fbe, Data2: 0xeabe, Data3 : 0x4464, Data4 : (0xb4, 0x60, 0xec, 0x01, 0x0b, 0x7c, 0x41, 0xe2)) }
    // Windows.Web.Http.Headers.HttpProductInfoHeaderValue CreateFromComment(System.String)
    private func _n_CreateFromComment(_ productComment : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromComment(pThis, productComment, __presult))
        }
    }
    public func CreateFromComment(productComment : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue> {
        let __hstr_productComment = try HString(productComment!);
        return try withExtendedLifetime(__hstr_productComment) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>> = nil;
        try self._n_CreateFromComment(__hstr_productComment.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpProductInfoHeaderValue(consuming: __result);
        }
    }
    // Windows.Web.Http.Headers.HttpProductInfoHeaderValue CreateFromNameWithVersion(System.String, System.String)
    private func _n_CreateFromNameWithVersion(_ productName : Optional<HSTRING>, _ productVersion : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromNameWithVersion(pThis, productName, productVersion, __presult))
        }
    }
    public func CreateFromNameWithVersion(productName : Optional<Swift.String>, productVersion : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue> {
        let __hstr_productName = try HString(productName!);
        return try withExtendedLifetime(__hstr_productName) {
        let __hstr_productVersion = try HString(productVersion!);
        return try withExtendedLifetime(__hstr_productVersion) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>> = nil;
        try self._n_CreateFromNameWithVersion(__hstr_productName.Raw(), __hstr_productVersion.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpProductInfoHeaderValue(consuming: __result);
        }
        }
    }
} // IHttpProductInfoHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpProductInfoHeaderValueStatics
// interface type
open class IHttpProductInfoHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdb7fd857, Data2: 0x327a, Data3 : 0x4e73, Data4 : (0x81, 0xe5, 0x70, 0x59, 0xa3, 0x02, 0xb0, 0x42)) }
    // Windows.Web.Http.Headers.HttpProductInfoHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpProductInfoHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpProductInfoHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ productInfoHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, productInfoHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, productInfoHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_productInfoHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_productInfoHeaderValue, &__result);
            productInfoHeaderValue = Windows.Web.Http.Headers.IHttpProductInfoHeaderValue(consuming: _tmp_out_productInfoHeaderValue);
        return __result;
        }
    }
} // IHttpProductInfoHeaderValueStatics


// type: Windows.Web.Http.Headers.IHttpRequestHeaderCollection
// interface type
open class IHttpRequestHeaderCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaf40329b, Data2: 0xb544, Data3 : 0x469b, Data4 : (0x86, 0xb9, 0xac, 0x3d, 0x46, 0x6f, 0xea, 0x36)) }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection get_Accept()
    private func _n_get_Accept(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Accept(pThis, __presult))
        }
    }
    public func get_Accept() throws -> Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMediaTypeWithQualityHeaderValueCollection>> = nil;
        try self._n_get_Accept(&__result);
        return Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection get_AcceptEncoding()
    private func _n_get_AcceptEncoding(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptEncoding(pThis, __presult))
        }
    }
    public func get_AcceptEncoding() throws -> Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpContentCodingWithQualityHeaderValueCollection>> = nil;
        try self._n_get_AcceptEncoding(&__result);
        return Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection get_AcceptLanguage()
    private func _n_get_AcceptLanguage(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptLanguage(pThis, __presult))
        }
    }
    public func get_AcceptLanguage() throws -> Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpLanguageRangeWithQualityHeaderValueCollection>> = nil;
        try self._n_get_AcceptLanguage(&__result);
        return Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpCredentialsHeaderValue get_Authorization()
    private func _n_get_Authorization(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Authorization(pThis, __presult))
        }
    }
    public func get_Authorization() throws -> Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>> = nil;
        try self._n_get_Authorization(&__result);
        return Windows.Web.Http.Headers.IHttpCredentialsHeaderValue(consuming: __result);
    }
    // [IsSpecialName] void put_Authorization(Windows.Web.Http.Headers.HttpCredentialsHeaderValue)
    private func _n_put_Authorization(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Authorization(pThis, value))
        }
    }
    public func put_Authorization(value : Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue>) throws -> Void {
        try self._n_put_Authorization(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection get_CacheControl()
    private func _n_get_CacheControl(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheControl(pThis, __presult))
        }
    }
    public func get_CacheControl() throws -> Optional<Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection>> = nil;
        try self._n_get_CacheControl(&__result);
        return Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection get_Connection()
    private func _n_get_Connection(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Connection(pThis, __presult))
        }
    }
    public func get_Connection() throws -> Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection>> = nil;
        try self._n_get_Connection(&__result);
        return Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection get_Cookie()
    private func _n_get_Cookie(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Cookie(pThis, __presult))
        }
    }
    public func get_Cookie() throws -> Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCookiePairHeaderValueCollection>> = nil;
        try self._n_get_Cookie(&__result);
        return Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_Date()
    private func _n_get_Date(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Date(pThis, __presult))
        }
    }
    public func get_Date() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_Date(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] void put_Date(Windows.Foundation.IReference<Windows.Foundation.DateTime>)
    private func _n_put_Date(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Date(pThis, value))
        }
    }
    public func put_Date(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        try self._n_put_Date(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection get_Expect()
    private func _n_get_Expect(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Expect(pThis, __presult))
        }
    }
    public func get_Expect() throws -> Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpExpectationHeaderValueCollection>> = nil;
        try self._n_get_Expect(&__result);
        return Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] System.String get_From()
    private func _n_get_From(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_From(pThis, __presult))
        }
    }
    public func get_From() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_From(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_From(System.String)
    private func _n_put_From(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_From(pThis, value))
        }
    }
    public func put_From(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_From(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Networking.HostName get_Host()
    private func _n_get_Host(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Host(pThis, __presult))
        }
    }
    public func get_Host() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_Host(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] void put_Host(Windows.Networking.HostName)
    private func _n_put_Host(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Host(pThis, value))
        }
    }
    public func put_Host(value : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_put_Host(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_IfModifiedSince()
    private func _n_get_IfModifiedSince(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IfModifiedSince(pThis, __presult))
        }
    }
    public func get_IfModifiedSince() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_IfModifiedSince(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] void put_IfModifiedSince(Windows.Foundation.IReference<Windows.Foundation.DateTime>)
    private func _n_put_IfModifiedSince(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IfModifiedSince(pThis, value))
        }
    }
    public func put_IfModifiedSince(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        try self._n_put_IfModifiedSince(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_IfUnmodifiedSince()
    private func _n_get_IfUnmodifiedSince(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IfUnmodifiedSince(pThis, __presult))
        }
    }
    public func get_IfUnmodifiedSince() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_IfUnmodifiedSince(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] void put_IfUnmodifiedSince(Windows.Foundation.IReference<Windows.Foundation.DateTime>)
    private func _n_put_IfUnmodifiedSince(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IfUnmodifiedSince(pThis, value))
        }
    }
    public func put_IfUnmodifiedSince(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        try self._n_put_IfUnmodifiedSince(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.IReference<System.UInt32> get_MaxForwards()
    private func _n_get_MaxForwards(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxForwards(pThis, __presult))
        }
    }
    public func get_MaxForwards() throws -> Optional<ClosedGenerics.IReference_1_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT32>> = nil;
        try self._n_get_MaxForwards(&__result);
        return ClosedGenerics.IReference_1_UINT32(consuming: __result);
    }
    // [IsSpecialName] void put_MaxForwards(Windows.Foundation.IReference<System.UInt32>)
    private func _n_put_MaxForwards(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1_UINT32>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxForwards(pThis, value))
        }
    }
    public func put_MaxForwards(value : Optional<ClosedGenerics.IReference_1_UINT32>) throws -> Void {
        try self._n_put_MaxForwards(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpCredentialsHeaderValue get_ProxyAuthorization()
    private func _n_get_ProxyAuthorization(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyAuthorization(pThis, __presult))
        }
    }
    public func get_ProxyAuthorization() throws -> Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>> = nil;
        try self._n_get_ProxyAuthorization(&__result);
        return Windows.Web.Http.Headers.IHttpCredentialsHeaderValue(consuming: __result);
    }
    // [IsSpecialName] void put_ProxyAuthorization(Windows.Web.Http.Headers.HttpCredentialsHeaderValue)
    private func _n_put_ProxyAuthorization(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCredentialsHeaderValue>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProxyAuthorization(pThis, value))
        }
    }
    public func put_ProxyAuthorization(value : Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue>) throws -> Void {
        try self._n_put_ProxyAuthorization(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_Referer()
    private func _n_get_Referer(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Referer(pThis, __presult))
        }
    }
    public func get_Referer() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_Referer(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_Referer(Windows.Foundation.Uri)
    private func _n_put_Referer(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Referer(pThis, value))
        }
    }
    public func put_Referer(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_Referer(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection get_TransferEncoding()
    private func _n_get_TransferEncoding(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransferEncoding(pThis, __presult))
        }
    }
    public func get_TransferEncoding() throws -> Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection>> = nil;
        try self._n_get_TransferEncoding(&__result);
        return Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection get_UserAgent()
    private func _n_get_UserAgent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserAgent(pThis, __presult))
        }
    }
    public func get_UserAgent() throws -> Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpProductInfoHeaderValueCollection>> = nil;
        try self._n_get_UserAgent(&__result);
        return Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection(consuming: __result);
    }
    // void Append(System.String, System.String)
    private func _n_Append(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, name, value))
        }
    }
    public func Append(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> Void {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_Append(__hstr_name.Raw(), __hstr_value.Raw());
        }
        }
    }
    // bool TryAppendWithoutValidation(System.String, System.String)
    private func _n_TryAppendWithoutValidation(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpRequestHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryAppendWithoutValidation(pThis, name, value, __presult))
        }
    }
    public func TryAppendWithoutValidation(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> boolean {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        var __result : boolean = 0;
        try self._n_TryAppendWithoutValidation(__hstr_name.Raw(), __hstr_value.Raw(), &__result);
        return __result;
        }
        }
    }
    public var Accept : Optional<Windows.Web.Http.Headers.IHttpMediaTypeWithQualityHeaderValueCollection> {
        get throws {
            return try get_Accept();
        }
    }
    public var AcceptEncoding : Optional<Windows.Web.Http.Headers.IHttpContentCodingWithQualityHeaderValueCollection> {
        get throws {
            return try get_AcceptEncoding();
        }
    }
    public var AcceptLanguage : Optional<Windows.Web.Http.Headers.IHttpLanguageRangeWithQualityHeaderValueCollection> {
        get throws {
            return try get_AcceptLanguage();
        }
    }
    public var Authorization : Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> {
        get throws {
            return try get_Authorization();
        }
    }
    public var CacheControl : Optional<Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection> {
        get throws {
            return try get_CacheControl();
        }
    }
    public var Connection : Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection> {
        get throws {
            return try get_Connection();
        }
    }
    public var Cookie : Optional<Windows.Web.Http.Headers.IHttpCookiePairHeaderValueCollection> {
        get throws {
            return try get_Cookie();
        }
    }
    public var Date : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_Date();
        }
    }
    public var Expect : Optional<Windows.Web.Http.Headers.IHttpExpectationHeaderValueCollection> {
        get throws {
            return try get_Expect();
        }
    }
    public var From : Swift.String {
        get throws {
            return try get_From();
        }
    }
    public var Host : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_Host();
        }
    }
    public var IfModifiedSince : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_IfModifiedSince();
        }
    }
    public var IfUnmodifiedSince : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_IfUnmodifiedSince();
        }
    }
    public var MaxForwards : Optional<ClosedGenerics.IReference_1_UINT32> {
        get throws {
            return try get_MaxForwards();
        }
    }
    public var ProxyAuthorization : Optional<Windows.Web.Http.Headers.IHttpCredentialsHeaderValue> {
        get throws {
            return try get_ProxyAuthorization();
        }
    }
    public var Referer : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_Referer();
        }
    }
    public var TransferEncoding : Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection> {
        get throws {
            return try get_TransferEncoding();
        }
    }
    public var UserAgent : Optional<Windows.Web.Http.Headers.IHttpProductInfoHeaderValueCollection> {
        get throws {
            return try get_UserAgent();
        }
    }
} // IHttpRequestHeaderCollection


// type: Windows.Web.Http.Headers.IHttpResponseHeaderCollection
// interface type
open class IHttpResponseHeaderCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7a990969, Data2: 0xfa3f, Data3 : 0x41ed, Data4 : (0xaa, 0xc6, 0xbf, 0x95, 0x79, 0x75, 0xc1, 0x6b)) }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> get_Age()
    private func _n_get_Age(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Age(pThis, __presult))
        }
    }
    public func get_Age() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>> = nil;
        try self._n_get_Age(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan(consuming: __result);
    }
    // [IsSpecialName] void put_Age(Windows.Foundation.IReference<Windows.Foundation.TimeSpan>)
    private func _n_put_Age(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CTimeSpan>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Age(pThis, value))
        }
    }
    public func put_Age(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan>) throws -> Void {
        try self._n_put_Age(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpMethodHeaderValueCollection get_Allow()
    private func _n_get_Allow(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Allow(pThis, __presult))
        }
    }
    public func get_Allow() throws -> Optional<Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpMethodHeaderValueCollection>> = nil;
        try self._n_get_Allow(&__result);
        return Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection get_CacheControl()
    private func _n_get_CacheControl(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheControl(pThis, __presult))
        }
    }
    public func get_CacheControl() throws -> Optional<Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpCacheDirectiveHeaderValueCollection>> = nil;
        try self._n_get_CacheControl(&__result);
        return Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection get_Connection()
    private func _n_get_Connection(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Connection(pThis, __presult))
        }
    }
    public func get_Connection() throws -> Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpConnectionOptionHeaderValueCollection>> = nil;
        try self._n_get_Connection(&__result);
        return Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.IReference<Windows.Foundation.DateTime> get_Date()
    private func _n_get_Date(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Date(pThis, __presult))
        }
    }
    public func get_Date() throws -> Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>> = nil;
        try self._n_get_Date(&__result);
        return ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime(consuming: __result);
    }
    // [IsSpecialName] void put_Date(Windows.Foundation.IReference<Windows.Foundation.DateTime>)
    private func _n_put_Date(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IReference_1__q_CWindows_CFoundation_CDateTime>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Date(pThis, value))
        }
    }
    public func put_Date(value : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime>) throws -> Void {
        try self._n_put_Date(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_Location()
    private func _n_get_Location(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Location(pThis, __presult))
        }
    }
    public func get_Location() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_Location(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_Location(Windows.Foundation.Uri)
    private func _n_put_Location(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Location(pThis, value))
        }
    }
    public func put_Location(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_Location(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection get_ProxyAuthenticate()
    private func _n_get_ProxyAuthenticate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyAuthenticate(pThis, __presult))
        }
    }
    public func get_ProxyAuthenticate() throws -> Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection>> = nil;
        try self._n_get_ProxyAuthenticate(&__result);
        return Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue get_RetryAfter()
    private func _n_get_RetryAfter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RetryAfter(pThis, __presult))
        }
    }
    public func get_RetryAfter() throws -> Optional<Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue>> = nil;
        try self._n_get_RetryAfter(&__result);
        return Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue(consuming: __result);
    }
    // [IsSpecialName] void put_RetryAfter(Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue)
    private func _n_put_RetryAfter(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpDateOrDeltaHeaderValue>>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RetryAfter(pThis, value))
        }
    }
    public func put_RetryAfter(value : Optional<Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue>) throws -> Void {
        try self._n_put_RetryAfter(RawPointer(value));
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection get_TransferEncoding()
    private func _n_get_TransferEncoding(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransferEncoding(pThis, __presult))
        }
    }
    public func get_TransferEncoding() throws -> Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection>> = nil;
        try self._n_get_TransferEncoding(&__result);
        return Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection(consuming: __result);
    }
    // [IsSpecialName] Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection get_WwwAuthenticate()
    private func _n_get_WwwAuthenticate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WwwAuthenticate(pThis, __presult))
        }
    }
    public func get_WwwAuthenticate() throws -> Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpChallengeHeaderValueCollection>> = nil;
        try self._n_get_WwwAuthenticate(&__result);
        return Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection(consuming: __result);
    }
    // void Append(System.String, System.String)
    private func _n_Append(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, name, value))
        }
    }
    public func Append(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> Void {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_Append(__hstr_name.Raw(), __hstr_value.Raw());
        }
        }
    }
    // bool TryAppendWithoutValidation(System.String, System.String)
    private func _n_TryAppendWithoutValidation(_ name : Optional<HSTRING>, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpResponseHeaderCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryAppendWithoutValidation(pThis, name, value, __presult))
        }
    }
    public func TryAppendWithoutValidation(name : Optional<Swift.String>, value : Optional<Swift.String>) throws -> boolean {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        var __result : boolean = 0;
        try self._n_TryAppendWithoutValidation(__hstr_name.Raw(), __hstr_value.Raw(), &__result);
        return __result;
        }
        }
    }
    public var Age : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CTimeSpan> {
        get throws {
            return try get_Age();
        }
    }
    public var Allow : Optional<Windows.Web.Http.Headers.IHttpMethodHeaderValueCollection> {
        get throws {
            return try get_Allow();
        }
    }
    public var CacheControl : Optional<Windows.Web.Http.Headers.IHttpCacheDirectiveHeaderValueCollection> {
        get throws {
            return try get_CacheControl();
        }
    }
    public var Connection : Optional<Windows.Web.Http.Headers.IHttpConnectionOptionHeaderValueCollection> {
        get throws {
            return try get_Connection();
        }
    }
    public var Date : Optional<ClosedGenerics.IReference_1__q_CWindows_CFoundation_CDateTime> {
        get throws {
            return try get_Date();
        }
    }
    public var Location : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_Location();
        }
    }
    public var ProxyAuthenticate : Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection> {
        get throws {
            return try get_ProxyAuthenticate();
        }
    }
    public var RetryAfter : Optional<Windows.Web.Http.Headers.IHttpDateOrDeltaHeaderValue> {
        get throws {
            return try get_RetryAfter();
        }
    }
    public var TransferEncoding : Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection> {
        get throws {
            return try get_TransferEncoding();
        }
    }
    public var WwwAuthenticate : Optional<Windows.Web.Http.Headers.IHttpChallengeHeaderValueCollection> {
        get throws {
            return try get_WwwAuthenticate();
        }
    }
} // IHttpResponseHeaderCollection


// type: Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue
// interface type
open class IHttpTransferCodingHeaderValue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x436f32f9, Data2: 0x3ded, Data3 : 0x42bd, Data4 : (0xb3, 0x8a, 0x54, 0x96, 0xa2, 0x51, 0x1c, 0xe6)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Web.Http.Headers.HttpNameValueHeaderValue> get_Parameters()
    private func _n_get_Parameters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parameters(pThis, __presult))
        }
    }
    public func get_Parameters() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue>> = nil;
        try self._n_get_Parameters(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue(consuming: __result);
    }
    // [IsSpecialName] System.String get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Value(&__result);
        return Swift.String(from: __result);
    }
    public var Parameters : Optional<ClosedGenerics.IVector_1__q_CWindows_CWeb_CHttp_CHeaders_CHttpNameValueHeaderValue> {
        get throws {
            return try get_Parameters();
        }
    }
    public var Value : Swift.String {
        get throws {
            return try get_Value();
        }
    }
} // IHttpTransferCodingHeaderValue


// type: Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueCollection
// interface type
open class IHttpTransferCodingHeaderValueCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x202c8c34, Data2: 0x2c03, Data3 : 0x49b8, Data4 : (0x96, 0x65, 0x73, 0xe2, 0x7c, 0xb2, 0xfc, 0x79)) }
    // void ParseAdd(System.String)
    private func _n_ParseAdd(_ input : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ParseAdd(pThis, input))
        }
    }
    public func ParseAdd(input : Optional<Swift.String>) throws -> Void {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        try self._n_ParseAdd(__hstr_input.Raw());
        }
    }
    // bool TryParseAdd(System.String)
    private func _n_TryParseAdd(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParseAdd(pThis, input, __presult))
        }
    }
    public func TryParseAdd(input : Optional<Swift.String>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
        try self._n_TryParseAdd(__hstr_input.Raw(), &__result);
        return __result;
        }
    }
} // IHttpTransferCodingHeaderValueCollection


// type: Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueFactory
// interface type
// ACTIVATION INTERFACE
open class IHttpTransferCodingHeaderValueFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbb62dffc, Data2: 0xe361, Data3 : 0x4f08, Data4 : (0x8e, 0x4f, 0xc9, 0xe7, 0x23, 0xde, 0x70, 0x3b)) }
    // Windows.Web.Http.Headers.HttpTransferCodingHeaderValue Create(System.String)
    private func _n_Create(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, input, __presult))
        }
    }
    public func Create(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>> = nil;
        try self._n_Create(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue(consuming: __result);
        }
    }
} // IHttpTransferCodingHeaderValueFactory


// type: Windows.Web.Http.Headers.IHttpTransferCodingHeaderValueStatics
// interface type
open class IHttpTransferCodingHeaderValueStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6ab8892a, Data2: 0x1a98, Data3 : 0x4d32, Data4 : (0xa9, 0x06, 0x74, 0x70, 0xa9, 0x87, 0x5c, 0xe5)) }
    // Windows.Web.Http.Headers.HttpTransferCodingHeaderValue Parse(System.String)
    private func _n_Parse(_ input : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Parse(pThis, input, __presult))
        }
    }
    public func Parse(input : Optional<Swift.String>) throws -> Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue> {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>> = nil;
        try self._n_Parse(__hstr_input.Raw(), &__result);
        return Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue(consuming: __result);
        }
    }
    // bool TryParse(System.String, ref Windows.Web.Http.Headers.HttpTransferCodingHeaderValue)
    private func _n_TryParse(_ input : Optional<HSTRING>, _ transferCodingHeaderValue : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValueStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryParse(pThis, input, transferCodingHeaderValue, __presult))
        }
    }
    public func TryParse(input : Optional<Swift.String>, transferCodingHeaderValue : inout Optional<Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue>) throws -> boolean {
        let __hstr_input = try HString(input!);
        return try withExtendedLifetime(__hstr_input) {
        var __result : boolean = 0;
            var _tmp_out_transferCodingHeaderValue: Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CHttp_CHeaders_CIHttpTransferCodingHeaderValue>> = nil;
        try self._n_TryParse(__hstr_input.Raw(), &_tmp_out_transferCodingHeaderValue, &__result);
            transferCodingHeaderValue = Windows.Web.Http.Headers.IHttpTransferCodingHeaderValue(consuming: _tmp_out_transferCodingHeaderValue);
        return __result;
        }
    }
} // IHttpTransferCodingHeaderValueStatics


}
