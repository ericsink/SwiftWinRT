// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.XboxLive {
// type: Windows.Networking.XboxLive.IXboxLiveDeviceAddress
// interface type
open class IXboxLiveDeviceAddress
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf5bbd279, Data2: 0x3c86, Data3 : 0x4b57, Data4 : (0xa3, 0x1a, 0xb9, 0x46, 0x24, 0x08, 0xfd, 0x01)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SnapshotChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.XboxLive.XboxLiveDeviceAddress,System.Object>)
    private func _n_add_SnapshotChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SnapshotChanged(pThis, handler, __presult))
        }
    }
    public func add_SnapshotChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SnapshotChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SnapshotChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_SnapshotChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SnapshotChanged(pThis, token))
        }
    }
    public func remove_SnapshotChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SnapshotChanged(token);
    }
    // System.String GetSnapshotAsBase64()
    private func _n_GetSnapshotAsBase64(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSnapshotAsBase64(pThis, __presult))
        }
    }
    public func GetSnapshotAsBase64() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetSnapshotAsBase64(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Storage.Streams.IBuffer GetSnapshotAsBuffer()
    private func _n_GetSnapshotAsBuffer(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSnapshotAsBuffer(pThis, __presult))
        }
    }
    public func GetSnapshotAsBuffer() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_GetSnapshotAsBuffer(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // void GetSnapshotAsBytes(System.Byte[], ref System.UInt32)
    private func _n_GetSnapshotAsBytes(_ bufferLength : UINT32, _ buffer : Optional<UnsafeMutablePointer<UINT8>>, _ bytesWritten : UnsafeMutablePointer<UINT32>) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSnapshotAsBytes(pThis, bufferLength, buffer, bytesWritten))
        }
    }
    public func GetSnapshotAsBytes(bufferLength : UINT32, buffer : Optional<UnsafeMutablePointer<UINT8>>, bytesWritten : inout Swift.UInt32) throws -> Void {
            var _tmp_out_bytesWritten: UINT32 = 0;
        try self._n_GetSnapshotAsBytes(bufferLength, buffer, &_tmp_out_bytesWritten);
            bytesWritten = _tmp_out_bytesWritten;
    }
    // System.Int32 Compare(Windows.Networking.XboxLive.XboxLiveDeviceAddress)
    private func _n_Compare(_ otherDeviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Compare(pThis, otherDeviceAddress, __presult))
        }
    }
    public func Compare(otherDeviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_Compare(RawPointer(otherDeviceAddress), &__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsValid()
    private func _n_get_IsValid(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsValid(pThis, __presult))
        }
    }
    public func get_IsValid() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsValid(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsLocal()
    private func _n_get_IsLocal(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLocal(pThis, __presult))
        }
    }
    public func get_IsLocal() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsLocal(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveNetworkAccessKind get_NetworkAccessKind()
    private func _n_get_NetworkAccessKind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NetworkAccessKind(pThis, __presult))
        }
    }
    public func get_NetworkAccessKind() throws -> Windows.Networking.XboxLive.XboxLiveNetworkAccessKind {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind = _q_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind_Open;
        try self._n_get_NetworkAccessKind(&__result);
        return __result;
    }
    public var IsLocal : boolean {
        get throws {
            return try get_IsLocal();
        }
    }
    public var IsValid : boolean {
        get throws {
            return try get_IsValid();
        }
    }
    public var NetworkAccessKind : Windows.Networking.XboxLive.XboxLiveNetworkAccessKind {
        get throws {
            return try get_NetworkAccessKind();
        }
    }
} // IXboxLiveDeviceAddress


// type: Windows.Networking.XboxLive.IXboxLiveDeviceAddressStatics
// interface type
open class IXboxLiveDeviceAddressStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5954a819, Data2: 0x4a79, Data3 : 0x4931, Data4 : (0x82, 0x7c, 0x7f, 0x50, 0x3e, 0x96, 0x32, 0x63)) }
    // Windows.Networking.XboxLive.XboxLiveDeviceAddress CreateFromSnapshotBase64(System.String)
    private func _n_CreateFromSnapshotBase64(_ base64 : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromSnapshotBase64(pThis, base64, __presult))
        }
    }
    public func CreateFromSnapshotBase64(base64 : Optional<Swift.String>) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        let __hstr_base64 = try HString(base64!);
        return try withExtendedLifetime(__hstr_base64) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_CreateFromSnapshotBase64(__hstr_base64.Raw(), &__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
        }
    }
    // Windows.Networking.XboxLive.XboxLiveDeviceAddress CreateFromSnapshotBuffer(Windows.Storage.Streams.IBuffer)
    private func _n_CreateFromSnapshotBuffer(_ buffer : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromSnapshotBuffer(pThis, buffer, __presult))
        }
    }
    public func CreateFromSnapshotBuffer(buffer : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_CreateFromSnapshotBuffer(RawPointer(buffer), &__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // Windows.Networking.XboxLive.XboxLiveDeviceAddress CreateFromSnapshotBytes(System.Byte[])
    private func _n_CreateFromSnapshotBytes(_ bufferLength : UINT32, _ buffer : Optional<UnsafeMutablePointer<UINT8>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromSnapshotBytes(pThis, bufferLength, buffer, __presult))
        }
    }
    public func CreateFromSnapshotBytes(bufferLength : UINT32, buffer : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_CreateFromSnapshotBytes(bufferLength, buffer, &__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // Windows.Networking.XboxLive.XboxLiveDeviceAddress GetLocal()
    private func _n_GetLocal(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocal(pThis, __presult))
        }
    }
    public func GetLocal() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_GetLocal(&__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // [IsSpecialName] System.UInt32 get_MaxSnapshotBytesSize()
    private func _n_get_MaxSnapshotBytesSize(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddressStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSnapshotBytesSize(pThis, __presult))
        }
    }
    public func get_MaxSnapshotBytesSize() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxSnapshotBytesSize(&__result);
        return __result;
    }
    public var MaxSnapshotBytesSize : Swift.UInt32 {
        get throws {
            return try get_MaxSnapshotBytesSize();
        }
    }
} // IXboxLiveDeviceAddressStatics


// type: Windows.Networking.XboxLive.IXboxLiveEndpointPair
// interface type
open class IXboxLiveEndpointPair
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1e9a839b, Data2: 0x813e, Data3 : 0x44e0, Data4 : (0xb8, 0x7f, 0xc8, 0x7a, 0x09, 0x34, 0x75, 0xe4)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_StateChanged(Windows.Foundation.TypedEventHandler<Windows.Networking.XboxLive.XboxLiveEndpointPair,Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs>)
    private func _n_add_StateChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_StateChanged(pThis, handler, __presult))
        }
    }
    public func add_StateChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_StateChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_StateChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_StateChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_StateChanged(pThis, token))
        }
    }
    public func remove_StateChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_StateChanged(token);
    }
    // Windows.Foundation.IAsyncAction DeleteAsync()
    private func _n_DeleteAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeleteAsync(pThis, __presult))
        }
    }
    public func DeleteAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_DeleteAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Delete() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void GetRemoteSocketAddressBytes(System.Byte[])
    private func _n_GetRemoteSocketAddressBytes(_ socketAddressLength : UINT32, _ socketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRemoteSocketAddressBytes(pThis, socketAddressLength, socketAddress))
        }
    }
    public func GetRemoteSocketAddressBytes(socketAddressLength : UINT32, socketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        try self._n_GetRemoteSocketAddressBytes(socketAddressLength, socketAddress);
    }
    // void GetLocalSocketAddressBytes(System.Byte[])
    private func _n_GetLocalSocketAddressBytes(_ socketAddressLength : UINT32, _ socketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocalSocketAddressBytes(pThis, socketAddressLength, socketAddress))
        }
    }
    public func GetLocalSocketAddressBytes(socketAddressLength : UINT32, socketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        try self._n_GetLocalSocketAddressBytes(socketAddressLength, socketAddress);
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveEndpointPairState get_State()
    private func _n_get_State(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_State(pThis, __presult))
        }
    }
    public func get_State() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState = _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Invalid;
        try self._n_get_State(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate get_Template()
    private func _n_get_Template(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Template(pThis, __presult))
        }
    }
    public func get_Template() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate>> = nil;
        try self._n_get_Template(&__result);
        return Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveDeviceAddress get_RemoteDeviceAddress()
    private func _n_get_RemoteDeviceAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteDeviceAddress(pThis, __presult))
        }
    }
    public func get_RemoteDeviceAddress() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_get_RemoteDeviceAddress(&__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_RemoteHostName()
    private func _n_get_RemoteHostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteHostName(pThis, __presult))
        }
    }
    public func get_RemoteHostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_RemoteHostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_RemotePort()
    private func _n_get_RemotePort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemotePort(pThis, __presult))
        }
    }
    public func get_RemotePort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RemotePort(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_LocalHostName()
    private func _n_get_LocalHostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalHostName(pThis, __presult))
        }
    }
    public func get_LocalHostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalHostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_LocalPort()
    private func _n_get_LocalPort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalPort(pThis, __presult))
        }
    }
    public func get_LocalPort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LocalPort(&__result);
        return Swift.String(from: __result);
    }
    public var LocalHostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalHostName();
        }
    }
    public var LocalPort : Swift.String {
        get throws {
            return try get_LocalPort();
        }
    }
    public var RemoteDeviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        get throws {
            return try get_RemoteDeviceAddress();
        }
    }
    public var RemoteHostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_RemoteHostName();
        }
    }
    public var RemotePort : Swift.String {
        get throws {
            return try get_RemotePort();
        }
    }
    public var State : Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        get throws {
            return try get_State();
        }
    }
    public var Template : Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate> {
        get throws {
            return try get_Template();
        }
    }
} // IXboxLiveEndpointPair


// type: Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult
// interface type
open class IXboxLiveEndpointPairCreationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd9a8bb95, Data2: 0x2aab, Data3 : 0x4d1e, Data4 : (0x97, 0x94, 0x33, 0xec, 0xc0, 0xdc, 0xf0, 0xfe)) }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveDeviceAddress get_DeviceAddress()
    private func _n_get_DeviceAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceAddress(pThis, __presult))
        }
    }
    public func get_DeviceAddress() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_get_DeviceAddress(&__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus = _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_Succeeded;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsExistingPathEvaluation()
    private func _n_get_IsExistingPathEvaluation(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsExistingPathEvaluation(pThis, __presult))
        }
    }
    public func get_IsExistingPathEvaluation() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsExistingPathEvaluation(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveEndpointPair get_EndpointPair()
    private func _n_get_EndpointPair(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairCreationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndpointPair(pThis, __presult))
        }
    }
    public func get_EndpointPair() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPair> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>> = nil;
        try self._n_get_EndpointPair(&__result);
        return Windows.Networking.XboxLive.IXboxLiveEndpointPair(consuming: __result);
    }
    public var DeviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        get throws {
            return try get_DeviceAddress();
        }
    }
    public var EndpointPair : Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPair> {
        get throws {
            return try get_EndpointPair();
        }
    }
    public var IsExistingPathEvaluation : boolean {
        get throws {
            return try get_IsExistingPathEvaluation();
        }
    }
    public var Status : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus {
        get throws {
            return try get_Status();
        }
    }
} // IXboxLiveEndpointPairCreationResult


// type: Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs
// interface type
open class IXboxLiveEndpointPairStateChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x592e3b55, Data2: 0xde08, Data3 : 0x44e7, Data4 : (0xac, 0x3b, 0xb9, 0xb9, 0xa1, 0x69, 0x58, 0x3a)) }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveEndpointPairState get_OldState()
    private func _n_get_OldState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OldState(pThis, __presult))
        }
    }
    public func get_OldState() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState = _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Invalid;
        try self._n_get_OldState(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveEndpointPairState get_NewState()
    private func _n_get_NewState(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStateChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NewState(pThis, __presult))
        }
    }
    public func get_NewState() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState = _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Invalid;
        try self._n_get_NewState(&__result);
        return __result;
    }
    public var NewState : Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        get throws {
            return try get_NewState();
        }
    }
    public var OldState : Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        get throws {
            return try get_OldState();
        }
    }
} // IXboxLiveEndpointPairStateChangedEventArgs


// type: Windows.Networking.XboxLive.IXboxLiveEndpointPairStatics
// interface type
open class IXboxLiveEndpointPairStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x64316b30, Data2: 0x217a, Data3 : 0x4243, Data4 : (0x8e, 0xe1, 0x67, 0x29, 0x28, 0x1d, 0x27, 0xdb)) }
    // Windows.Networking.XboxLive.XboxLiveEndpointPair FindEndpointPairBySocketAddressBytes(System.Byte[], System.Byte[])
    private func _n_FindEndpointPairBySocketAddressBytes(_ localSocketAddressLength : UINT32, _ localSocketAddress : Optional<UnsafeMutablePointer<UINT8>>, _ remoteSocketAddressLength : UINT32, _ remoteSocketAddress : Optional<UnsafeMutablePointer<UINT8>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FindEndpointPairBySocketAddressBytes(pThis, localSocketAddressLength, localSocketAddress, remoteSocketAddressLength, remoteSocketAddress, __presult))
        }
    }
    public func FindEndpointPairBySocketAddressBytes(localSocketAddressLength : UINT32, localSocketAddress : Optional<UnsafeMutablePointer<UINT8>>, remoteSocketAddressLength : UINT32, remoteSocketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPair> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>> = nil;
        try self._n_FindEndpointPairBySocketAddressBytes(localSocketAddressLength, localSocketAddress, remoteSocketAddressLength, remoteSocketAddress, &__result);
        return Windows.Networking.XboxLive.IXboxLiveEndpointPair(consuming: __result);
    }
    // Windows.Networking.XboxLive.XboxLiveEndpointPair FindEndpointPairByHostNamesAndPorts(Windows.Networking.HostName, System.String, Windows.Networking.HostName, System.String)
    private func _n_FindEndpointPairByHostNamesAndPorts(_ localHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ localPort : Optional<HSTRING>, _ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remotePort : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FindEndpointPairByHostNamesAndPorts(pThis, localHostName, localPort, remoteHostName, remotePort, __presult))
        }
    }
    public func FindEndpointPairByHostNamesAndPorts(localHostName : Optional<Windows.Networking.IHostName>, localPort : Optional<Swift.String>, remoteHostName : Optional<Windows.Networking.IHostName>, remotePort : Optional<Swift.String>) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPair> {
        let __hstr_localPort = try HString(localPort!);
        return try withExtendedLifetime(__hstr_localPort) {
        let __hstr_remotePort = try HString(remotePort!);
        return try withExtendedLifetime(__hstr_remotePort) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>> = nil;
        try self._n_FindEndpointPairByHostNamesAndPorts(RawPointer(localHostName), __hstr_localPort.Raw(), RawPointer(remoteHostName), __hstr_remotePort.Raw(), &__result);
        return Windows.Networking.XboxLive.IXboxLiveEndpointPair(consuming: __result);
        }
        }
    }
} // IXboxLiveEndpointPairStatics


// type: Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate
// interface type
open class IXboxLiveEndpointPairTemplate
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6b286ecf, Data2: 0x3457, Data3 : 0x40ce, Data4 : (0xb9, 0xa1, 0xc0, 0xcf, 0xe0, 0x21, 0x3e, 0xa7)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_InboundEndpointPairCreated(Windows.Foundation.TypedEventHandler<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate,Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs>)
    private func _n_add_InboundEndpointPairCreated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_InboundEndpointPairCreated(pThis, handler, __presult))
        }
    }
    public func add_InboundEndpointPairCreated(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_InboundEndpointPairCreated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_InboundEndpointPairCreated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_InboundEndpointPairCreated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_InboundEndpointPairCreated(pThis, token))
        }
    }
    public func remove_InboundEndpointPairCreated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_InboundEndpointPairCreated(token);
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> CreateEndpointPairAsync(Windows.Networking.XboxLive.XboxLiveDeviceAddress)
    private func _n_CreateEndpointPairDefaultAsync(_ deviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEndpointPairDefaultAsync(pThis, deviceAddress, __presult))
        }
    }
    public func CreateEndpointPairDefaultAsync(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>> = nil;
        try self._n_CreateEndpointPairDefaultAsync(RawPointer(deviceAddress), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(consuming: __result);
    }
    public func CreateEndpointPairDefault(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) async throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateEndpointPairDefaultAsync(deviceAddress: deviceAddress)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> CreateEndpointPairAsync(Windows.Networking.XboxLive.XboxLiveDeviceAddress, Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors)
    private func _n_CreateEndpointPairWithBehaviorsAsync(_ deviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ behaviors : _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEndpointPairWithBehaviorsAsync(pThis, deviceAddress, behaviors, __presult))
        }
    }
    public func CreateEndpointPairWithBehaviorsAsync(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>> = nil;
        try self._n_CreateEndpointPairWithBehaviorsAsync(RawPointer(deviceAddress), behaviors, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(consuming: __result);
    }
    public func CreateEndpointPairWithBehaviors(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) async throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateEndpointPairWithBehaviorsAsync(deviceAddress: deviceAddress, behaviors: behaviors)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> CreateEndpointPairForPortsAsync(Windows.Networking.XboxLive.XboxLiveDeviceAddress, System.String, System.String)
    private func _n_CreateEndpointPairForPortsDefaultAsync(_ deviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ initiatorPort : Optional<HSTRING>, _ acceptorPort : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEndpointPairForPortsDefaultAsync(pThis, deviceAddress, initiatorPort, acceptorPort, __presult))
        }
    }
    public func CreateEndpointPairForPortsDefaultAsync(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, initiatorPort : Optional<Swift.String>, acceptorPort : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        let __hstr_initiatorPort = try HString(initiatorPort!);
        return try withExtendedLifetime(__hstr_initiatorPort) {
        let __hstr_acceptorPort = try HString(acceptorPort!);
        return try withExtendedLifetime(__hstr_acceptorPort) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>> = nil;
        try self._n_CreateEndpointPairForPortsDefaultAsync(RawPointer(deviceAddress), __hstr_initiatorPort.Raw(), __hstr_acceptorPort.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(consuming: __result);
        }
        }
    }
    public func CreateEndpointPairForPortsDefault(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, initiatorPort : Optional<Swift.String>, acceptorPort : Optional<Swift.String>) async throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateEndpointPairForPortsDefaultAsync(deviceAddress: deviceAddress, initiatorPort: initiatorPort, acceptorPort: acceptorPort)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> CreateEndpointPairForPortsAsync(Windows.Networking.XboxLive.XboxLiveDeviceAddress, System.String, System.String, Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors)
    private func _n_CreateEndpointPairForPortsWithBehaviorsAsync(_ deviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ initiatorPort : Optional<HSTRING>, _ acceptorPort : Optional<HSTRING>, _ behaviors : _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEndpointPairForPortsWithBehaviorsAsync(pThis, deviceAddress, initiatorPort, acceptorPort, behaviors, __presult))
        }
    }
    public func CreateEndpointPairForPortsWithBehaviorsAsync(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, initiatorPort : Optional<Swift.String>, acceptorPort : Optional<Swift.String>, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        let __hstr_initiatorPort = try HString(initiatorPort!);
        return try withExtendedLifetime(__hstr_initiatorPort) {
        let __hstr_acceptorPort = try HString(acceptorPort!);
        return try withExtendedLifetime(__hstr_acceptorPort) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult>> = nil;
        try self._n_CreateEndpointPairForPortsWithBehaviorsAsync(RawPointer(deviceAddress), __hstr_initiatorPort.Raw(), __hstr_acceptorPort.Raw(), behaviors, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult(consuming: __result);
        }
        }
    }
    public func CreateEndpointPairForPortsWithBehaviors(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, initiatorPort : Optional<Swift.String>, acceptorPort : Optional<Swift.String>, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) async throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateEndpointPairForPortsWithBehaviorsAsync(deviceAddress: deviceAddress, initiatorPort: initiatorPort, acceptorPort: acceptorPort, behaviors: behaviors)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveSocketKind get_SocketKind()
    private func _n_get_SocketKind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SocketKind(pThis, __presult))
        }
    }
    public func get_SocketKind() throws -> Windows.Networking.XboxLive.XboxLiveSocketKind {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind = _q_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind_None;
        try self._n_get_SocketKind(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt16 get_InitiatorBoundPortRangeLower()
    private func _n_get_InitiatorBoundPortRangeLower(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InitiatorBoundPortRangeLower(pThis, __presult))
        }
    }
    public func get_InitiatorBoundPortRangeLower() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_InitiatorBoundPortRangeLower(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt16 get_InitiatorBoundPortRangeUpper()
    private func _n_get_InitiatorBoundPortRangeUpper(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InitiatorBoundPortRangeUpper(pThis, __presult))
        }
    }
    public func get_InitiatorBoundPortRangeUpper() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_InitiatorBoundPortRangeUpper(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt16 get_AcceptorBoundPortRangeLower()
    private func _n_get_AcceptorBoundPortRangeLower(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptorBoundPortRangeLower(pThis, __presult))
        }
    }
    public func get_AcceptorBoundPortRangeLower() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_AcceptorBoundPortRangeLower(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt16 get_AcceptorBoundPortRangeUpper()
    private func _n_get_AcceptorBoundPortRangeUpper(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AcceptorBoundPortRangeUpper(pThis, __presult))
        }
    }
    public func get_AcceptorBoundPortRangeUpper() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_AcceptorBoundPortRangeUpper(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveEndpointPair> get_EndpointPairs()
    private func _n_get_EndpointPairs(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndpointPairs(pThis, __presult))
        }
    }
    public func get_EndpointPairs() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair>> = nil;
        try self._n_get_EndpointPairs(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair(consuming: __result);
    }
    public var AcceptorBoundPortRangeLower : Swift.UInt16 {
        get throws {
            return try get_AcceptorBoundPortRangeLower();
        }
    }
    public var AcceptorBoundPortRangeUpper : Swift.UInt16 {
        get throws {
            return try get_AcceptorBoundPortRangeUpper();
        }
    }
    public var EndpointPairs : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair> {
        get throws {
            return try get_EndpointPairs();
        }
    }
    public var InitiatorBoundPortRangeLower : Swift.UInt16 {
        get throws {
            return try get_InitiatorBoundPortRangeLower();
        }
    }
    public var InitiatorBoundPortRangeUpper : Swift.UInt16 {
        get throws {
            return try get_InitiatorBoundPortRangeUpper();
        }
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var SocketKind : Windows.Networking.XboxLive.XboxLiveSocketKind {
        get throws {
            return try get_SocketKind();
        }
    }
} // IXboxLiveEndpointPairTemplate


// type: Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplateStatics
// interface type
open class IXboxLiveEndpointPairTemplateStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1e13137b, Data2: 0x737b, Data3 : 0x4a23, Data4 : (0xbc, 0x64, 0x08, 0x70, 0xf7, 0x56, 0x55, 0xba)) }
    // Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate GetTemplateByName(System.String)
    private func _n_GetTemplateByName(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateByName(pThis, name, __presult))
        }
    }
    public func GetTemplateByName(name : Optional<Swift.String>) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate> {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplate>> = nil;
        try self._n_GetTemplateByName(__hstr_name.Raw(), &__result);
        return Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate(consuming: __result);
        }
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate> get_Templates()
    private func _n_get_Templates(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPairTemplateStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Templates(pThis, __presult))
        }
    }
    public func get_Templates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate>> = nil;
        try self._n_get_Templates(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate(consuming: __result);
    }
    public var Templates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate> {
        get throws {
            return try get_Templates();
        }
    }
} // IXboxLiveEndpointPairTemplateStatics


// type: Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs
// interface type
open class IXboxLiveInboundEndpointPairCreatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdc183b62, Data2: 0x22ba, Data3 : 0x48d2, Data4 : (0x80, 0xde, 0xc2, 0x39, 0x68, 0xbd, 0x19, 0x8b)) }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveEndpointPair get_EndpointPair()
    private func _n_get_EndpointPair(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveInboundEndpointPairCreatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndpointPair(pThis, __presult))
        }
    }
    public func get_EndpointPair() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPair> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveEndpointPair>> = nil;
        try self._n_get_EndpointPair(&__result);
        return Windows.Networking.XboxLive.IXboxLiveEndpointPair(consuming: __result);
    }
    public var EndpointPair : Optional<Windows.Networking.XboxLive.IXboxLiveEndpointPair> {
        get throws {
            return try get_EndpointPair();
        }
    }
} // IXboxLiveInboundEndpointPairCreatedEventArgs


// type: Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement
// interface type
open class IXboxLiveQualityOfServiceMeasurement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4d682bce, Data2: 0xa5d6, Data3 : 0x47e6, Data4 : (0xa2, 0x36, 0xcf, 0xde, 0x5f, 0xbd, 0xf2, 0xed)) }
    // Windows.Foundation.IAsyncAction MeasureAsync()
    private func _n_MeasureAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MeasureAsync(pThis, __presult))
        }
    }
    public func MeasureAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_MeasureAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Measure() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.MeasureAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult> GetMetricResultsForDevice(Windows.Networking.XboxLive.XboxLiveDeviceAddress)
    private func _n_GetMetricResultsForDevice(_ deviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMetricResultsForDevice(pThis, deviceAddress, __presult))
        }
    }
    public func GetMetricResultsForDevice(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult>> = nil;
        try self._n_GetMetricResultsForDevice(RawPointer(deviceAddress), &__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult> GetMetricResultsForMetric(Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric)
    private func _n_GetMetricResultsForMetric(_ metric : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMetricResultsForMetric(pThis, metric, __presult))
        }
    }
    public func GetMetricResultsForMetric(metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult>> = nil;
        try self._n_GetMetricResultsForMetric(metric, &__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult(consuming: __result);
    }
    // Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult GetMetricResult(Windows.Networking.XboxLive.XboxLiveDeviceAddress, Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric)
    private func _n_GetMetricResult(_ deviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ metric : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMetricResult(pThis, deviceAddress, metric, __presult))
        }
    }
    public func GetMetricResult(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>, metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult>> = nil;
        try self._n_GetMetricResult(RawPointer(deviceAddress), metric, &__result);
        return Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult(consuming: __result);
    }
    // Windows.Networking.XboxLive.XboxLiveQualityOfServicePrivatePayloadResult GetPrivatePayloadResult(Windows.Networking.XboxLive.XboxLiveDeviceAddress)
    private func _n_GetPrivatePayloadResult(_ deviceAddress : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPrivatePayloadResult(pThis, deviceAddress, __presult))
        }
    }
    public func GetPrivatePayloadResult(deviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress>) throws -> Optional<Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult>> = nil;
        try self._n_GetPrivatePayloadResult(RawPointer(deviceAddress), &__result);
        return Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric> get_Metrics()
    private func _n_get_Metrics(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Metrics(pThis, __presult))
        }
    }
    public func get_Metrics() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>> = nil;
        try self._n_get_Metrics(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Networking.XboxLive.XboxLiveDeviceAddress> get_DeviceAddresses()
    private func _n_get_DeviceAddresses(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceAddresses(pThis, __presult))
        }
    }
    public func get_DeviceAddresses() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress>> = nil;
        try self._n_get_DeviceAddresses(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress(consuming: __result);
    }
    // [IsSpecialName] bool get_ShouldRequestPrivatePayloads()
    private func _n_get_ShouldRequestPrivatePayloads(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShouldRequestPrivatePayloads(pThis, __presult))
        }
    }
    public func get_ShouldRequestPrivatePayloads() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ShouldRequestPrivatePayloads(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ShouldRequestPrivatePayloads(bool)
    private func _n_put_ShouldRequestPrivatePayloads(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShouldRequestPrivatePayloads(pThis, value))
        }
    }
    public func put_ShouldRequestPrivatePayloads(value : boolean) throws -> Void {
        try self._n_put_ShouldRequestPrivatePayloads(value);
    }
    // [IsSpecialName] System.UInt32 get_TimeoutInMilliseconds()
    private func _n_get_TimeoutInMilliseconds(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TimeoutInMilliseconds(pThis, __presult))
        }
    }
    public func get_TimeoutInMilliseconds() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_TimeoutInMilliseconds(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TimeoutInMilliseconds(System.UInt32)
    private func _n_put_TimeoutInMilliseconds(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TimeoutInMilliseconds(pThis, value))
        }
    }
    public func put_TimeoutInMilliseconds(value : Swift.UInt32) throws -> Void {
        try self._n_put_TimeoutInMilliseconds(value);
    }
    // [IsSpecialName] System.UInt32 get_NumberOfProbesToAttempt()
    private func _n_get_NumberOfProbesToAttempt(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NumberOfProbesToAttempt(pThis, __presult))
        }
    }
    public func get_NumberOfProbesToAttempt() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_NumberOfProbesToAttempt(&__result);
        return __result;
    }
    // [IsSpecialName] void put_NumberOfProbesToAttempt(System.UInt32)
    private func _n_put_NumberOfProbesToAttempt(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NumberOfProbesToAttempt(pThis, value))
        }
    }
    public func put_NumberOfProbesToAttempt(value : Swift.UInt32) throws -> Void {
        try self._n_put_NumberOfProbesToAttempt(value);
    }
    // [IsSpecialName] System.UInt32 get_NumberOfResultsPending()
    private func _n_get_NumberOfResultsPending(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NumberOfResultsPending(pThis, __presult))
        }
    }
    public func get_NumberOfResultsPending() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_NumberOfResultsPending(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult> get_MetricResults()
    private func _n_get_MetricResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MetricResults(pThis, __presult))
        }
    }
    public func get_MetricResults() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult>> = nil;
        try self._n_get_MetricResults(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Networking.XboxLive.XboxLiveQualityOfServicePrivatePayloadResult> get_PrivatePayloadResults()
    private func _n_get_PrivatePayloadResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrivatePayloadResults(pThis, __presult))
        }
    }
    public func get_PrivatePayloadResults() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult>> = nil;
        try self._n_get_PrivatePayloadResults(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult(consuming: __result);
    }
    public var DeviceAddresses : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress> {
        get throws {
            return try get_DeviceAddresses();
        }
    }
    public var MetricResults : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        get throws {
            return try get_MetricResults();
        }
    }
    public var Metrics : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric> {
        get throws {
            return try get_Metrics();
        }
    }
    public var NumberOfProbesToAttempt : Swift.UInt32 {
        get throws {
            return try get_NumberOfProbesToAttempt();
        }
    }
    public var NumberOfResultsPending : Swift.UInt32 {
        get throws {
            return try get_NumberOfResultsPending();
        }
    }
    public var PrivatePayloadResults : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult> {
        get throws {
            return try get_PrivatePayloadResults();
        }
    }
    public var ShouldRequestPrivatePayloads : boolean {
        get throws {
            return try get_ShouldRequestPrivatePayloads();
        }
    }
    public var TimeoutInMilliseconds : Swift.UInt32 {
        get throws {
            return try get_TimeoutInMilliseconds();
        }
    }
} // IXboxLiveQualityOfServiceMeasurement


// type: Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurementStatics
// interface type
open class IXboxLiveQualityOfServiceMeasurementStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6e352dca, Data2: 0x23cf, Data3 : 0x440a, Data4 : (0xb0, 0x77, 0x5e, 0x30, 0x85, 0x7a, 0x82, 0x34)) }
    // void PublishPrivatePayloadBytes(System.Byte[])
    private func _n_PublishPrivatePayloadBytes(_ payloadLength : UINT32, _ payload : Optional<UnsafeMutablePointer<UINT8>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PublishPrivatePayloadBytes(pThis, payloadLength, payload))
        }
    }
    public func PublishPrivatePayloadBytes(payloadLength : UINT32, payload : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        try self._n_PublishPrivatePayloadBytes(payloadLength, payload);
    }
    // void ClearPrivatePayload()
    private func _n_ClearPrivatePayload() throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ClearPrivatePayload(pThis))
        }
    }
    public func ClearPrivatePayload() throws -> Void {
        try self._n_ClearPrivatePayload();
    }
    // [IsSpecialName] System.UInt32 get_MaxSimultaneousProbeConnections()
    private func _n_get_MaxSimultaneousProbeConnections(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSimultaneousProbeConnections(pThis, __presult))
        }
    }
    public func get_MaxSimultaneousProbeConnections() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxSimultaneousProbeConnections(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxSimultaneousProbeConnections(System.UInt32)
    private func _n_put_MaxSimultaneousProbeConnections(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxSimultaneousProbeConnections(pThis, value))
        }
    }
    public func put_MaxSimultaneousProbeConnections(value : Swift.UInt32) throws -> Void {
        try self._n_put_MaxSimultaneousProbeConnections(value);
    }
    // [IsSpecialName] bool get_IsSystemOutboundBandwidthConstrained()
    private func _n_get_IsSystemOutboundBandwidthConstrained(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSystemOutboundBandwidthConstrained(pThis, __presult))
        }
    }
    public func get_IsSystemOutboundBandwidthConstrained() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSystemOutboundBandwidthConstrained(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsSystemOutboundBandwidthConstrained(bool)
    private func _n_put_IsSystemOutboundBandwidthConstrained(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSystemOutboundBandwidthConstrained(pThis, value))
        }
    }
    public func put_IsSystemOutboundBandwidthConstrained(value : boolean) throws -> Void {
        try self._n_put_IsSystemOutboundBandwidthConstrained(value);
    }
    // [IsSpecialName] bool get_IsSystemInboundBandwidthConstrained()
    private func _n_get_IsSystemInboundBandwidthConstrained(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSystemInboundBandwidthConstrained(pThis, __presult))
        }
    }
    public func get_IsSystemInboundBandwidthConstrained() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSystemInboundBandwidthConstrained(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsSystemInboundBandwidthConstrained(bool)
    private func _n_put_IsSystemInboundBandwidthConstrained(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsSystemInboundBandwidthConstrained(pThis, value))
        }
    }
    public func put_IsSystemInboundBandwidthConstrained(value : boolean) throws -> Void {
        try self._n_put_IsSystemInboundBandwidthConstrained(value);
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_PublishedPrivatePayload()
    private func _n_get_PublishedPrivatePayload(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PublishedPrivatePayload(pThis, __presult))
        }
    }
    public func get_PublishedPrivatePayload() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_PublishedPrivatePayload(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    // [IsSpecialName] void put_PublishedPrivatePayload(Windows.Storage.Streams.IBuffer)
    private func _n_put_PublishedPrivatePayload(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PublishedPrivatePayload(pThis, value))
        }
    }
    public func put_PublishedPrivatePayload(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        try self._n_put_PublishedPrivatePayload(RawPointer(value));
    }
    // [IsSpecialName] System.UInt32 get_MaxPrivatePayloadSize()
    private func _n_get_MaxPrivatePayloadSize(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMeasurementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxPrivatePayloadSize(pThis, __presult))
        }
    }
    public func get_MaxPrivatePayloadSize() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxPrivatePayloadSize(&__result);
        return __result;
    }
    public var IsSystemInboundBandwidthConstrained : boolean {
        get throws {
            return try get_IsSystemInboundBandwidthConstrained();
        }
    }
    public var IsSystemOutboundBandwidthConstrained : boolean {
        get throws {
            return try get_IsSystemOutboundBandwidthConstrained();
        }
    }
    public var MaxPrivatePayloadSize : Swift.UInt32 {
        get throws {
            return try get_MaxPrivatePayloadSize();
        }
    }
    public var MaxSimultaneousProbeConnections : Swift.UInt32 {
        get throws {
            return try get_MaxSimultaneousProbeConnections();
        }
    }
    public var PublishedPrivatePayload : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_PublishedPrivatePayload();
        }
    }
} // IXboxLiveQualityOfServiceMeasurementStatics


// type: Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult
// interface type
open class IXboxLiveQualityOfServiceMetricResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaeec53d1, Data2: 0x3561, Data3 : 0x4782, Data4 : (0xb0, 0xcf, 0xd3, 0xae, 0x29, 0xd9, 0xfa, 0x87)) }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus = _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NotStarted;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveDeviceAddress get_DeviceAddress()
    private func _n_get_DeviceAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceAddress(pThis, __presult))
        }
    }
    public func get_DeviceAddress() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_get_DeviceAddress(&__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric get_Metric()
    private func _n_get_Metric(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Metric(pThis, __presult))
        }
    }
    public func get_Metric() throws -> Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric = _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageLatencyInMilliseconds;
        try self._n_get_Metric(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt64 get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<UINT64>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServiceMetricResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Swift.UInt64 {
        var __result : UINT64 = 0;
        try self._n_get_Value(&__result);
        return __result;
    }
    public var DeviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        get throws {
            return try get_DeviceAddress();
        }
    }
    public var Metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric {
        get throws {
            return try get_Metric();
        }
    }
    public var Status : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        get throws {
            return try get_Status();
        }
    }
    public var Value : Swift.UInt64 {
        get throws {
            return try get_Value();
        }
    }
} // IXboxLiveQualityOfServiceMetricResult


// type: Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult
// interface type
open class IXboxLiveQualityOfServicePrivatePayloadResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5a6302ae, Data2: 0x6f38, Data3 : 0x41c0, Data4 : (0x9f, 0xcc, 0xea, 0x6c, 0xb9, 0x78, 0xca, 0xfc)) }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus get_Status()
    private func _n_get_Status(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Status(pThis, __presult))
        }
    }
    public func get_Status() throws -> Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        var __result : _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus = _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NotStarted;
        try self._n_get_Status(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.XboxLive.XboxLiveDeviceAddress get_DeviceAddress()
    private func _n_get_DeviceAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceAddress(pThis, __presult))
        }
    }
    public func get_DeviceAddress() throws -> Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CXboxLive_CIXboxLiveDeviceAddress>> = nil;
        try self._n_get_DeviceAddress(&__result);
        return Windows.Networking.XboxLive.IXboxLiveDeviceAddress(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_Value()
    private func _n_get_Value(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CXboxLive_CIXboxLiveQualityOfServicePrivatePayloadResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, __presult))
        }
    }
    public func get_Value() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Value(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var DeviceAddress : Optional<Windows.Networking.XboxLive.IXboxLiveDeviceAddress> {
        get throws {
            return try get_DeviceAddress();
        }
    }
    public var Status : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        get throws {
            return try get_Status();
        }
    }
    public var Value : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Value();
        }
    }
} // IXboxLiveQualityOfServicePrivatePayloadResult


// type: Windows.Networking.XboxLive.XboxLiveDeviceAddress
// runtime class
public class XboxLiveDeviceAddress
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveDeviceAddress;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveDeviceAddress?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveDeviceAddress { return _self; }
    private struct _IXboxLiveDeviceAddressStatics {
        static var x : IXboxLiveDeviceAddressStatics =
            try! RoGetActivationFactory("Windows.Networking.XboxLive.XboxLiveDeviceAddress")
    }
    public static var XboxLiveDeviceAddressStatics : IXboxLiveDeviceAddressStatics {
        _IXboxLiveDeviceAddressStatics.x
    }
    public static func CreateFromSnapshotBase64(base64 : Swift.String) throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: XboxLiveDeviceAddressStatics.CreateFromSnapshotBase64(base64: base64));
    }
    public static func CreateFromSnapshotBuffer(buffer : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: XboxLiveDeviceAddressStatics.CreateFromSnapshotBuffer(buffer: buffer));
    }
    public static func CreateFromSnapshotBytes(bufferLength : UINT32, buffer : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: XboxLiveDeviceAddressStatics.CreateFromSnapshotBytes(bufferLength: bufferLength, buffer: buffer));
    }
    public static func GetLocal() throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: XboxLiveDeviceAddressStatics.GetLocal());
    }
    public static func get_MaxSnapshotBytesSize() throws -> Swift.UInt32 {
        return try XboxLiveDeviceAddressStatics.get_MaxSnapshotBytesSize();
    }
    public static var MaxSnapshotBytesSize : Swift.UInt32 {
        get throws {
        return try XboxLiveDeviceAddressStatics.MaxSnapshotBytesSize;
        }
    }
    public func add_SnapshotChanged(handler : @escaping (Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.add_SnapshotChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress_IInspectable(cb: handler).Interface());
    }
    public func remove_SnapshotChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.remove_SnapshotChanged(token: token);
    }
    public func GetSnapshotAsBase64() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.GetSnapshotAsBase64();
    }
    public func GetSnapshotAsBuffer() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.GetSnapshotAsBuffer();
    }
    public func GetSnapshotAsBytes(bufferLength : UINT32, buffer : Optional<UnsafeMutablePointer<UINT8>>, bytesWritten : inout Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
            var _tmp_out_bytesWritten: Swift.UInt32 = 0;
        return try _ifc.GetSnapshotAsBytes(bufferLength: bufferLength, buffer: buffer, bytesWritten: &_tmp_out_bytesWritten);
    }
    public func Compare(otherDeviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>) throws -> Swift.Int32 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.Compare(otherDeviceAddress: otherDeviceAddress!.Interface());
    }
    public func get_IsValid() throws -> boolean {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.get_IsValid();
    }
    public func get_IsLocal() throws -> boolean {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.get_IsLocal();
    }
    public func get_NetworkAccessKind() throws -> Windows.Networking.XboxLive.XboxLiveNetworkAccessKind {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.get_NetworkAccessKind();
    }
    public var IsLocal : boolean {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.IsLocal;
        }
    }
    public var IsValid : boolean {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.IsValid;
        }
    }
    public var NetworkAccessKind : Windows.Networking.XboxLive.XboxLiveNetworkAccessKind {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveDeviceAddress = try _self.QueryInterface();
        return try _ifc.NetworkAccessKind;
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveEndpointPair
// runtime class
public class XboxLiveEndpointPair
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveEndpointPair;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveEndpointPair?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveEndpointPair { return _self; }
    private struct _IXboxLiveEndpointPairStatics {
        static var x : IXboxLiveEndpointPairStatics =
            try! RoGetActivationFactory("Windows.Networking.XboxLive.XboxLiveEndpointPair")
    }
    public static var XboxLiveEndpointPairStatics : IXboxLiveEndpointPairStatics {
        _IXboxLiveEndpointPairStatics.x
    }
    public static func FindEndpointPairBySocketAddressBytes(localSocketAddressLength : UINT32, localSocketAddress : Optional<UnsafeMutablePointer<UINT8>>, remoteSocketAddressLength : UINT32, remoteSocketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair> {
        return try Windows.Networking.XboxLive.XboxLiveEndpointPair(plok: XboxLiveEndpointPairStatics.FindEndpointPairBySocketAddressBytes(localSocketAddressLength: localSocketAddressLength, localSocketAddress: localSocketAddress, remoteSocketAddressLength: remoteSocketAddressLength, remoteSocketAddress: remoteSocketAddress));
    }
    public static func FindEndpointPairByHostNamesAndPorts(localHostName : Optional<Windows.Networking.HostName>, localPort : Swift.String, remoteHostName : Optional<Windows.Networking.HostName>, remotePort : Swift.String) throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair> {
        return try Windows.Networking.XboxLive.XboxLiveEndpointPair(plok: XboxLiveEndpointPairStatics.FindEndpointPairByHostNamesAndPorts(localHostName: localHostName!.Interface(), localPort: localPort, remoteHostName: remoteHostName!.Interface(), remotePort: remotePort));
    }
    public func add_StateChanged(handler : @escaping (Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair>, Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.add_StateChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairStateChangedEventArgs(cb: handler).Interface());
    }
    public func remove_StateChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.remove_StateChanged(token: token);
    }
    public func DeleteAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.DeleteAsync();
    }
    public func Delete() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetRemoteSocketAddressBytes(socketAddressLength : UINT32, socketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.GetRemoteSocketAddressBytes(socketAddressLength: socketAddressLength, socketAddress: socketAddress);
    }
    public func GetLocalSocketAddressBytes(socketAddressLength : UINT32, socketAddress : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.GetLocalSocketAddressBytes(socketAddressLength: socketAddressLength, socketAddress: socketAddress);
    }
    public func get_State() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.get_State();
    }
    public func get_Template() throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate(plok: _ifc.get_Template());
    }
    public func get_RemoteDeviceAddress() throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.get_RemoteDeviceAddress());
    }
    public func get_RemoteHostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_RemoteHostName());
    }
    public func get_RemotePort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.get_RemotePort();
    }
    public func get_LocalHostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalHostName());
    }
    public func get_LocalPort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.get_LocalPort();
    }
    public var LocalHostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalHostName);
        }
    }
    public var LocalPort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.LocalPort;
        }
    }
    public var RemoteDeviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.RemoteDeviceAddress);
        }
    }
    public var RemoteHostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.RemoteHostName);
        }
    }
    public var RemotePort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.RemotePort;
        }
    }
    public var State : Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try _ifc.State;
        }
    }
    public var Template : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPair = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate(plok: _ifc.Template);
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors
// enum type
public typealias XboxLiveEndpointPairCreationBehaviors = _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors;

// type: Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult
// runtime class
public class XboxLiveEndpointPairCreationResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult { return _self; }
    public func get_DeviceAddress() throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.get_DeviceAddress());
    }
    public func get_Status() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_IsExistingPathEvaluation() throws -> boolean {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try _ifc.get_IsExistingPathEvaluation();
    }
    public func get_EndpointPair() throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveEndpointPair(plok: _ifc.get_EndpointPair());
    }
    public var DeviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.DeviceAddress);
        }
    }
    public var EndpointPair : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveEndpointPair(plok: _ifc.EndpointPair);
        }
    }
    public var IsExistingPathEvaluation : boolean {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try _ifc.IsExistingPathEvaluation;
        }
    }
    public var Status : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairCreationResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus
// enum type
public typealias XboxLiveEndpointPairCreationStatus = _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus;

// type: Windows.Networking.XboxLive.XboxLiveEndpointPairState
// enum type
public typealias XboxLiveEndpointPairState = _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState;

// type: Windows.Networking.XboxLive.XboxLiveEndpointPairStateChangedEventArgs
// runtime class
public class XboxLiveEndpointPairStateChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs { return _self; }
    public func get_OldState() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.get_OldState();
    }
    public func get_NewState() throws -> Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.get_NewState();
    }
    public var NewState : Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.NewState;
        }
    }
    public var OldState : Windows.Networking.XboxLive.XboxLiveEndpointPairState {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairStateChangedEventArgs = try _self.QueryInterface();
        return try _ifc.OldState;
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate
// runtime class
public class XboxLiveEndpointPairTemplate
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate { return _self; }
    private struct _IXboxLiveEndpointPairTemplateStatics {
        static var x : IXboxLiveEndpointPairTemplateStatics =
            try! RoGetActivationFactory("Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate")
    }
    public static var XboxLiveEndpointPairTemplateStatics : IXboxLiveEndpointPairTemplateStatics {
        _IXboxLiveEndpointPairTemplateStatics.x
    }
    public static func GetTemplateByName(name : Swift.String) throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate> {
        return try Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate(plok: XboxLiveEndpointPairTemplateStatics.GetTemplateByName(name: name));
    }
    public static func get_Templates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate> {
        return try XboxLiveEndpointPairTemplateStatics.get_Templates();
    }
    public static var Templates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate> {
        get throws {
        return try XboxLiveEndpointPairTemplateStatics.Templates;
        }
    }
    public func add_InboundEndpointPairCreated(handler : @escaping (Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairTemplate>, Optional<Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.add_InboundEndpointPairCreated(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairTemplate__q_CWindows_CNetworking_CXboxLive_CXboxLiveInboundEndpointPairCreatedEventArgs(cb: handler).Interface());
    }
    public func remove_InboundEndpointPairCreated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.remove_InboundEndpointPairCreated(token: token);
    }
    public func CreateEndpointPairAsync(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.CreateEndpointPairDefaultAsync(deviceAddress: deviceAddress!.Interface());
    }
    public func CreateEndpointPair(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>) async throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult(plok: self.CreateEndpointPairAsync(deviceAddress: deviceAddress)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateEndpointPairAsync(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.CreateEndpointPairWithBehaviorsAsync(deviceAddress: deviceAddress!.Interface(), behaviors: behaviors);
    }
    public func CreateEndpointPair(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) async throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult(plok: self.CreateEndpointPairAsync(deviceAddress: deviceAddress, behaviors: behaviors)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateEndpointPairForPortsAsync(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, initiatorPort : Swift.String, acceptorPort : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.CreateEndpointPairForPortsDefaultAsync(deviceAddress: deviceAddress!.Interface(), initiatorPort: initiatorPort, acceptorPort: acceptorPort);
    }
    public func CreateEndpointPairForPorts(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, initiatorPort : Swift.String, acceptorPort : Swift.String) async throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult(plok: self.CreateEndpointPairForPortsAsync(deviceAddress: deviceAddress, initiatorPort: initiatorPort, acceptorPort: acceptorPort)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateEndpointPairForPortsAsync(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, initiatorPort : Swift.String, acceptorPort : Swift.String, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.CreateEndpointPairForPortsWithBehaviorsAsync(deviceAddress: deviceAddress!.Interface(), initiatorPort: initiatorPort, acceptorPort: acceptorPort, behaviors: behaviors);
    }
    public func CreateEndpointPairForPorts(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, initiatorPort : Swift.String, acceptorPort : Swift.String, behaviors : Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors) async throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Networking.XboxLive.XboxLiveEndpointPairCreationResult(plok: self.CreateEndpointPairForPortsAsync(deviceAddress: deviceAddress, initiatorPort: initiatorPort, acceptorPort: acceptorPort, behaviors: behaviors)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_SocketKind() throws -> Windows.Networking.XboxLive.XboxLiveSocketKind {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.get_SocketKind();
    }
    public func get_InitiatorBoundPortRangeLower() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.get_InitiatorBoundPortRangeLower();
    }
    public func get_InitiatorBoundPortRangeUpper() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.get_InitiatorBoundPortRangeUpper();
    }
    public func get_AcceptorBoundPortRangeLower() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.get_AcceptorBoundPortRangeLower();
    }
    public func get_AcceptorBoundPortRangeUpper() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.get_AcceptorBoundPortRangeUpper();
    }
    public func get_EndpointPairs() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.get_EndpointPairs();
    }
    public var AcceptorBoundPortRangeLower : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.AcceptorBoundPortRangeLower;
        }
    }
    public var AcceptorBoundPortRangeUpper : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.AcceptorBoundPortRangeUpper;
        }
    }
    public var EndpointPairs : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPair> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.EndpointPairs;
        }
    }
    public var InitiatorBoundPortRangeLower : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.InitiatorBoundPortRangeLower;
        }
    }
    public var InitiatorBoundPortRangeUpper : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.InitiatorBoundPortRangeUpper;
        }
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var SocketKind : Windows.Networking.XboxLive.XboxLiveSocketKind {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveEndpointPairTemplate = try _self.QueryInterface();
        return try _ifc.SocketKind;
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveInboundEndpointPairCreatedEventArgs
// runtime class
public class XboxLiveInboundEndpointPairCreatedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs { return _self; }
    public func get_EndpointPair() throws -> Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveEndpointPair(plok: _ifc.get_EndpointPair());
    }
    public var EndpointPair : Optional<Windows.Networking.XboxLive.XboxLiveEndpointPair> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveInboundEndpointPairCreatedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveEndpointPair(plok: _ifc.EndpointPair);
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveNetworkAccessKind
// enum type
public typealias XboxLiveNetworkAccessKind = _q_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind;

// type: Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement
// runtime class
public class XboxLiveQualityOfServiceMeasurement
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IXboxLiveQualityOfServiceMeasurementStatics {
        static var x : IXboxLiveQualityOfServiceMeasurementStatics =
            try! RoGetActivationFactory("Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurement")
    }
    public static var XboxLiveQualityOfServiceMeasurementStatics : IXboxLiveQualityOfServiceMeasurementStatics {
        _IXboxLiveQualityOfServiceMeasurementStatics.x
    }
    public static func PublishPrivatePayloadBytes(payloadLength : UINT32, payload : Optional<UnsafeMutablePointer<UINT8>>) throws -> Void {
        return try XboxLiveQualityOfServiceMeasurementStatics.PublishPrivatePayloadBytes(payloadLength: payloadLength, payload: payload);
    }
    public static func ClearPrivatePayload() throws -> Void {
        return try XboxLiveQualityOfServiceMeasurementStatics.ClearPrivatePayload();
    }
    public static func get_MaxSimultaneousProbeConnections() throws -> Swift.UInt32 {
        return try XboxLiveQualityOfServiceMeasurementStatics.get_MaxSimultaneousProbeConnections();
    }
    public static func put_MaxSimultaneousProbeConnections(value : Swift.UInt32) throws -> Void {
        return try XboxLiveQualityOfServiceMeasurementStatics.put_MaxSimultaneousProbeConnections(value: value);
    }
    public static func get_IsSystemOutboundBandwidthConstrained() throws -> boolean {
        return try XboxLiveQualityOfServiceMeasurementStatics.get_IsSystemOutboundBandwidthConstrained();
    }
    public static func put_IsSystemOutboundBandwidthConstrained(value : boolean) throws -> Void {
        return try XboxLiveQualityOfServiceMeasurementStatics.put_IsSystemOutboundBandwidthConstrained(value: value);
    }
    public static func get_IsSystemInboundBandwidthConstrained() throws -> boolean {
        return try XboxLiveQualityOfServiceMeasurementStatics.get_IsSystemInboundBandwidthConstrained();
    }
    public static func put_IsSystemInboundBandwidthConstrained(value : boolean) throws -> Void {
        return try XboxLiveQualityOfServiceMeasurementStatics.put_IsSystemInboundBandwidthConstrained(value: value);
    }
    public static func get_PublishedPrivatePayload() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        return try XboxLiveQualityOfServiceMeasurementStatics.get_PublishedPrivatePayload();
    }
    public static func put_PublishedPrivatePayload(value : Optional<Windows.Storage.Streams.IBuffer>) throws -> Void {
        return try XboxLiveQualityOfServiceMeasurementStatics.put_PublishedPrivatePayload(value: value);
    }
    public static func get_MaxPrivatePayloadSize() throws -> Swift.UInt32 {
        return try XboxLiveQualityOfServiceMeasurementStatics.get_MaxPrivatePayloadSize();
    }
    public static var IsSystemInboundBandwidthConstrained : boolean {
        get throws {
        return try XboxLiveQualityOfServiceMeasurementStatics.IsSystemInboundBandwidthConstrained;
        }
    }
    public static var IsSystemOutboundBandwidthConstrained : boolean {
        get throws {
        return try XboxLiveQualityOfServiceMeasurementStatics.IsSystemOutboundBandwidthConstrained;
        }
    }
    public static var MaxPrivatePayloadSize : Swift.UInt32 {
        get throws {
        return try XboxLiveQualityOfServiceMeasurementStatics.MaxPrivatePayloadSize;
        }
    }
    public static var MaxSimultaneousProbeConnections : Swift.UInt32 {
        get throws {
        return try XboxLiveQualityOfServiceMeasurementStatics.MaxSimultaneousProbeConnections;
        }
    }
    public static var PublishedPrivatePayload : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        return try XboxLiveQualityOfServiceMeasurementStatics.PublishedPrivatePayload;
        }
    }
    public func MeasureAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.MeasureAsync();
    }
    public func Measure() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.MeasureAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetMetricResultsForDevice(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.GetMetricResultsForDevice(deviceAddress: deviceAddress!.Interface());
    }
    public func GetMetricResultsForMetric(metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric) throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.GetMetricResultsForMetric(metric: metric);
    }
    public func GetMetricResult(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>, metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric) throws -> Optional<Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult(plok: _ifc.GetMetricResult(deviceAddress: deviceAddress!.Interface(), metric: metric));
    }
    public func GetPrivatePayloadResult(deviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress>) throws -> Optional<Windows.Networking.XboxLive.XboxLiveQualityOfServicePrivatePayloadResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveQualityOfServicePrivatePayloadResult(plok: _ifc.GetPrivatePayloadResult(deviceAddress: deviceAddress!.Interface()));
    }
    public func get_Metrics() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_Metrics();
    }
    public func get_DeviceAddresses() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_DeviceAddresses();
    }
    public func get_ShouldRequestPrivatePayloads() throws -> boolean {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_ShouldRequestPrivatePayloads();
    }
    public func put_ShouldRequestPrivatePayloads(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.put_ShouldRequestPrivatePayloads(value: value);
    }
    public func get_TimeoutInMilliseconds() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_TimeoutInMilliseconds();
    }
    public func put_TimeoutInMilliseconds(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.put_TimeoutInMilliseconds(value: value);
    }
    public func get_NumberOfProbesToAttempt() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_NumberOfProbesToAttempt();
    }
    public func put_NumberOfProbesToAttempt(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.put_NumberOfProbesToAttempt(value: value);
    }
    public func get_NumberOfResultsPending() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_NumberOfResultsPending();
    }
    public func get_MetricResults() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_MetricResults();
    }
    public func get_PrivatePayloadResults() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.get_PrivatePayloadResults();
    }
    public var DeviceAddresses : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveDeviceAddress> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.DeviceAddresses;
        }
    }
    public var MetricResults : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetricResult> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.MetricResults;
        }
    }
    public var Metrics : Optional<ClosedGenerics.IVector_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.Metrics;
        }
    }
    public var NumberOfProbesToAttempt : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.NumberOfProbesToAttempt;
        }
    }
    public var NumberOfResultsPending : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.NumberOfResultsPending;
        }
    }
    public var PrivatePayloadResults : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServicePrivatePayloadResult> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.PrivatePayloadResults;
        }
    }
    public var ShouldRequestPrivatePayloads : boolean {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.ShouldRequestPrivatePayloads;
        }
    }
    public var TimeoutInMilliseconds : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMeasurement = try _self.QueryInterface();
        return try _ifc.TimeoutInMilliseconds;
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus
// enum type
public typealias XboxLiveQualityOfServiceMeasurementStatus = _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus;

// type: Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric
// enum type
public typealias XboxLiveQualityOfServiceMetric = _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric;

// type: Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetricResult
// runtime class
public class XboxLiveQualityOfServiceMetricResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult { return _self; }
    public func get_Status() throws -> Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_DeviceAddress() throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.get_DeviceAddress());
    }
    public func get_Metric() throws -> Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try _ifc.get_Metric();
    }
    public func get_Value() throws -> Swift.UInt64 {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public var DeviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.DeviceAddress);
        }
    }
    public var Metric : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try _ifc.Metric;
        }
    }
    public var Status : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    public var Value : Swift.UInt64 {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServiceMetricResult = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveQualityOfServicePrivatePayloadResult
// runtime class
public class XboxLiveQualityOfServicePrivatePayloadResult
    :
    WinRT.Object
{
    private var _self : Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult;
    public init(plok: Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult { return _self; }
    public func get_Status() throws -> Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult = try _self.QueryInterface();
        return try _ifc.get_Status();
    }
    public func get_DeviceAddress() throws -> Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.get_DeviceAddress());
    }
    public func get_Value() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult = try _self.QueryInterface();
        return try _ifc.get_Value();
    }
    public var DeviceAddress : Optional<Windows.Networking.XboxLive.XboxLiveDeviceAddress> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult = try _self.QueryInterface();
        return try Windows.Networking.XboxLive.XboxLiveDeviceAddress(plok: _ifc.DeviceAddress);
        }
    }
    public var Status : Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult = try _self.QueryInterface();
        return try _ifc.Status;
        }
    }
    public var Value : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.XboxLive.IXboxLiveQualityOfServicePrivatePayloadResult = try _self.QueryInterface();
        return try _ifc.Value;
        }
    }
}

// type: Windows.Networking.XboxLive.XboxLiveSocketKind
// enum type
public typealias XboxLiveSocketKind = _q_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind;

}
extension Windows.Networking.XboxLive.XboxLiveEndpointPairCreationBehaviors {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors_None;
        }
    }
    public static var ReevaluatePath : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationBehaviors_ReevaluatePath;
        }
    }
}
extension Windows.Networking.XboxLive.XboxLiveEndpointPairCreationStatus {
    public static var Succeeded : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_Succeeded;
        }
    }
    public static var NoLocalNetworks : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_NoLocalNetworks;
        }
    }
    public static var NoCompatibleNetworkPaths : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_NoCompatibleNetworkPaths;
        }
    }
    public static var LocalSystemNotAuthorized : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_LocalSystemNotAuthorized;
        }
    }
    public static var Canceled : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_Canceled;
        }
    }
    public static var TimedOut : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_TimedOut;
        }
    }
    public static var RemoteSystemNotAuthorized : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_RemoteSystemNotAuthorized;
        }
    }
    public static var RefusedDueToConfiguration : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_RefusedDueToConfiguration;
        }
    }
    public static var UnexpectedInternalError : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairCreationStatus_UnexpectedInternalError;
        }
    }
}
extension Windows.Networking.XboxLive.XboxLiveEndpointPairState {
    public static var Invalid : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Invalid;
        }
    }
    public static var CreatingOutbound : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_CreatingOutbound;
        }
    }
    public static var CreatingInbound : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_CreatingInbound;
        }
    }
    public static var Ready : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Ready;
        }
    }
    public static var DeletingLocally : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_DeletingLocally;
        }
    }
    public static var RemoteEndpointTerminating : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_RemoteEndpointTerminating;
        }
    }
    public static var Deleted : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveEndpointPairState_Deleted;
        }
    }
}
extension Windows.Networking.XboxLive.XboxLiveNetworkAccessKind {
    public static var Open : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind_Open;
        }
    }
    public static var Moderate : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind_Moderate;
        }
    }
    public static var Strict : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveNetworkAccessKind_Strict;
        }
    }
}
extension Windows.Networking.XboxLive.XboxLiveQualityOfServiceMeasurementStatus {
    public static var NotStarted : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NotStarted;
        }
    }
    public static var InProgress : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_InProgress;
        }
    }
    public static var InProgressWithProvisionalResults : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_InProgressWithProvisionalResults;
        }
    }
    public static var Succeeded : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_Succeeded;
        }
    }
    public static var NoLocalNetworks : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NoLocalNetworks;
        }
    }
    public static var NoCompatibleNetworkPaths : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_NoCompatibleNetworkPaths;
        }
    }
    public static var LocalSystemNotAuthorized : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_LocalSystemNotAuthorized;
        }
    }
    public static var Canceled : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_Canceled;
        }
    }
    public static var TimedOut : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_TimedOut;
        }
    }
    public static var RemoteSystemNotAuthorized : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_RemoteSystemNotAuthorized;
        }
    }
    public static var RefusedDueToConfiguration : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_RefusedDueToConfiguration;
        }
    }
    public static var UnexpectedInternalError : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMeasurementStatus_UnexpectedInternalError;
        }
    }
}
extension Windows.Networking.XboxLive.XboxLiveQualityOfServiceMetric {
    public static var AverageLatencyInMilliseconds : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageLatencyInMilliseconds;
        }
    }
    public static var MinLatencyInMilliseconds : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MinLatencyInMilliseconds;
        }
    }
    public static var MaxLatencyInMilliseconds : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MaxLatencyInMilliseconds;
        }
    }
    public static var AverageOutboundBitsPerSecond : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageOutboundBitsPerSecond;
        }
    }
    public static var MinOutboundBitsPerSecond : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MinOutboundBitsPerSecond;
        }
    }
    public static var MaxOutboundBitsPerSecond : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MaxOutboundBitsPerSecond;
        }
    }
    public static var AverageInboundBitsPerSecond : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_AverageInboundBitsPerSecond;
        }
    }
    public static var MinInboundBitsPerSecond : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MinInboundBitsPerSecond;
        }
    }
    public static var MaxInboundBitsPerSecond : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveQualityOfServiceMetric_MaxInboundBitsPerSecond;
        }
    }
}
extension Windows.Networking.XboxLive.XboxLiveSocketKind {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind_None;
        }
    }
    public static var Datagram : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind_Datagram;
        }
    }
    public static var Stream : Self {
        get {
            return _q_CWindows_CNetworking_CXboxLive_CXboxLiveSocketKind_Stream;
        }
    }
}
