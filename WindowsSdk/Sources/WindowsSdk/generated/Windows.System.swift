// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
import CWindowsSdk;
@_spi(IUnknown) import WinRT;

extension Windows.System {
// type: Windows.System.DispatcherQueue
// runtime class
public class DispatcherQueue
    :
    WinRT.Object
{
    private var _self : Windows.System.IDispatcherQueue;
    public init(plok: Windows.System.IDispatcherQueue?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.System.IDispatcherQueue { return _self; }
    // static interface not needed: Windows.System.IDispatcherQueueStatics
    // method not needed: CreateTimer
    // method not needed: TryEnqueue
    // method not needed: TryEnqueue
    // method not needed: add_ShutdownStarting
    // method not needed: remove_ShutdownStarting
    // method not needed: add_ShutdownCompleted
    // method not needed: remove_ShutdownCompleted
    // instance interface not needed: Windows.System.IDispatcherQueue2
}

// type: Windows.System.DispatcherQueueController
// runtime class
public class DispatcherQueueController
    :
    WinRT.Object
{
    private var _self : Windows.System.IDispatcherQueueController;
    public init(plok: Windows.System.IDispatcherQueueController?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.System.IDispatcherQueueController { return _self; }
    private struct _IDispatcherQueueControllerStatics {
        static var x : IDispatcherQueueControllerStatics =
            try! RoGetActivationFactory("Windows.System.DispatcherQueueController")
    }
    public static var DispatcherQueueControllerStatics : IDispatcherQueueControllerStatics {
        _IDispatcherQueueControllerStatics.x
    }
    public static func CreateOnDedicatedThread() throws -> Optional<Windows.System.DispatcherQueueController> {
        return try Windows.System.DispatcherQueueController(plok: DispatcherQueueControllerStatics.CreateOnDedicatedThread());
    }
    public func get_DispatcherQueue() throws -> Optional<Windows.System.DispatcherQueue> {
        let _ifc : Windows.System.IDispatcherQueueController = try _self.QueryInterface();
        return try Windows.System.DispatcherQueue(plok: _ifc.get_DispatcherQueue());
    }
    public func ShutdownQueueAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.System.IDispatcherQueueController = try _self.QueryInterface();
        return try _ifc.ShutdownQueueAsync();
    }
    public func ShutdownQueue() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ShutdownQueueAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var DispatcherQueue : Optional<Windows.System.DispatcherQueue> {
        get throws {
        let _ifc : Windows.System.IDispatcherQueueController = try _self.QueryInterface();
        return try Windows.System.DispatcherQueue(plok: _ifc.DispatcherQueue);
        }
    }
}

// type: Windows.System.IDispatcherQueue
// interface type
open class IDispatcherQueue
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x603e88e4, Data2: 0xa338, Data3 : 0x4ffe, Data4 : (0xa4, 0x57, 0xa5, 0xcf, 0xb9, 0xce, 0xb8, 0x99)) }
// method not needed: CreateTimer
// method not needed: TryEnqueue
// method not needed: TryEnqueueWithPriority
// method not needed: add_ShutdownStarting
// method not needed: remove_ShutdownStarting
// method not needed: add_ShutdownCompleted
// method not needed: remove_ShutdownCompleted
} // IDispatcherQueue


// type: Windows.System.IDispatcherQueueController
// interface type
open class IDispatcherQueueController
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x22f34e66, Data2: 0x50db, Data3 : 0x4e36, Data4 : (0xa9, 0x8d, 0x61, 0xc0, 0x1b, 0x38, 0x4d, 0x20)) }
    // [IsSpecialName] Windows.System.DispatcherQueue get_DispatcherQueue()
    private func _n_get_DispatcherQueue(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIDispatcherQueue>>>?) throws {
        return try perform(as: _q_CWindows_CSystem_CIDispatcherQueueController.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, __presult))
        }
    }
    public func get_DispatcherQueue() throws -> Optional<Windows.System.IDispatcherQueue> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIDispatcherQueue>> = nil;
        try self._n_get_DispatcherQueue(&__result);
        return Windows.System.IDispatcherQueue(consuming: __result);
    }
    // Windows.Foundation.IAsyncAction ShutdownQueueAsync()
    private func _n_ShutdownQueueAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CSystem_CIDispatcherQueueController.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ShutdownQueueAsync(pThis, __presult))
        }
    }
    public func ShutdownQueueAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ShutdownQueueAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func ShutdownQueue() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ShutdownQueueAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var DispatcherQueue : Optional<Windows.System.IDispatcherQueue> {
        get throws {
            return try get_DispatcherQueue();
        }
    }
} // IDispatcherQueueController


// type: Windows.System.IDispatcherQueueControllerStatics
// interface type
open class IDispatcherQueueControllerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0a6c98e0, Data2: 0x5198, Data3 : 0x49a2, Data4 : (0xa3, 0x13, 0x3f, 0x70, 0xd1, 0xf1, 0x3c, 0x27)) }
    // Windows.System.DispatcherQueueController CreateOnDedicatedThread()
    private func _n_CreateOnDedicatedThread(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIDispatcherQueueController>>>?) throws {
        return try perform(as: _q_CWindows_CSystem_CIDispatcherQueueControllerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateOnDedicatedThread(pThis, __presult))
        }
    }
    public func CreateOnDedicatedThread() throws -> Optional<Windows.System.IDispatcherQueueController> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSystem_CIDispatcherQueueController>> = nil;
        try self._n_CreateOnDedicatedThread(&__result);
        return Windows.System.IDispatcherQueueController(consuming: __result);
    }
} // IDispatcherQueueControllerStatics


// type: Windows.System.IUser
// interface type
open class IUser
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdf9a26c6, Data2: 0xe746, Data3 : 0x4bcd, Data4 : (0xb5, 0xd4, 0x12, 0x01, 0x03, 0xc4, 0x20, 0x9b)) }
// method not needed: get_NonRoamableId
// method not needed: get_AuthenticationStatus
// method not needed: get_Type
// method not needed: GetPropertyAsync
// method not needed: GetPropertiesAsync
// method not needed: GetPictureAsync
} // IUser


// type: Windows.System.User
// runtime class
public class User
    :
    WinRT.Object
{
    private var _self : Windows.System.IUser;
    public init(plok: Windows.System.IUser?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.System.IUser { return _self; }
    // static interface not needed: Windows.System.IUserStatics
    // static interface not needed: Windows.System.IUserStatics2
    // method not needed: get_NonRoamableId
    // method not needed: get_AuthenticationStatus
    // method not needed: get_Type
    // method not needed: GetPropertyAsync
    // method not needed: GetPropertiesAsync
    // method not needed: GetPictureAsync
    // instance interface not needed: Windows.System.IUser2
}

// type: Windows.System.VirtualKey
// enum type
public typealias VirtualKey = _q_CWindows_CSystem_CVirtualKey;

}
extension Windows.System.VirtualKey {
    public static var None : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_None;
        }
    }
    public static var LeftButton : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_LeftButton;
        }
    }
    public static var RightButton : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_RightButton;
        }
    }
    public static var Cancel : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Cancel;
        }
    }
    public static var MiddleButton : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_MiddleButton;
        }
    }
    public static var XButton1 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_XButton1;
        }
    }
    public static var XButton2 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_XButton2;
        }
    }
    public static var Back : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Back;
        }
    }
    public static var Tab : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Tab;
        }
    }
    public static var Clear : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Clear;
        }
    }
    public static var Enter : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Enter;
        }
    }
    public static var Shift : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Shift;
        }
    }
    public static var Control : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Control;
        }
    }
    public static var Menu : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Menu;
        }
    }
    public static var Pause : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Pause;
        }
    }
    public static var CapitalLock : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_CapitalLock;
        }
    }
    public static var Kana : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Kana;
        }
    }
    public static var Hangul : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Hangul;
        }
    }
    public static var ImeOn : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_ImeOn;
        }
    }
    public static var Junja : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Junja;
        }
    }
    public static var Final : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Final;
        }
    }
    public static var Hanja : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Hanja;
        }
    }
    public static var Kanji : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Kanji;
        }
    }
    public static var ImeOff : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_ImeOff;
        }
    }
    public static var Escape : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Escape;
        }
    }
    public static var Convert : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Convert;
        }
    }
    public static var NonConvert : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NonConvert;
        }
    }
    public static var Accept : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Accept;
        }
    }
    public static var ModeChange : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_ModeChange;
        }
    }
    public static var Space : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Space;
        }
    }
    public static var PageUp : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_PageUp;
        }
    }
    public static var PageDown : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_PageDown;
        }
    }
    public static var End : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_End;
        }
    }
    public static var Home : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Home;
        }
    }
    public static var Left : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Left;
        }
    }
    public static var Up : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Up;
        }
    }
    public static var Right : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Right;
        }
    }
    public static var Down : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Down;
        }
    }
    public static var Select : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Select;
        }
    }
    public static var Print : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Print;
        }
    }
    public static var Execute : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Execute;
        }
    }
    public static var Snapshot : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Snapshot;
        }
    }
    public static var Insert : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Insert;
        }
    }
    public static var Delete : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Delete;
        }
    }
    public static var Help : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Help;
        }
    }
    public static var Number0 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number0;
        }
    }
    public static var Number1 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number1;
        }
    }
    public static var Number2 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number2;
        }
    }
    public static var Number3 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number3;
        }
    }
    public static var Number4 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number4;
        }
    }
    public static var Number5 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number5;
        }
    }
    public static var Number6 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number6;
        }
    }
    public static var Number7 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number7;
        }
    }
    public static var Number8 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number8;
        }
    }
    public static var Number9 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Number9;
        }
    }
    public static var A : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_A;
        }
    }
    public static var B : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_B;
        }
    }
    public static var C : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_C;
        }
    }
    public static var D : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_D;
        }
    }
    public static var E : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_E;
        }
    }
    public static var F : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F;
        }
    }
    public static var G : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_G;
        }
    }
    public static var H : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_H;
        }
    }
    public static var I : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_I;
        }
    }
    public static var J : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_J;
        }
    }
    public static var K : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_K;
        }
    }
    public static var L : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_L;
        }
    }
    public static var M : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_M;
        }
    }
    public static var N : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_N;
        }
    }
    public static var O : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_O;
        }
    }
    public static var P : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_P;
        }
    }
    public static var Q : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Q;
        }
    }
    public static var R : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_R;
        }
    }
    public static var S : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_S;
        }
    }
    public static var T : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_T;
        }
    }
    public static var U : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_U;
        }
    }
    public static var V : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_V;
        }
    }
    public static var W : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_W;
        }
    }
    public static var X : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_X;
        }
    }
    public static var Y : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Y;
        }
    }
    public static var Z : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Z;
        }
    }
    public static var LeftWindows : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_LeftWindows;
        }
    }
    public static var RightWindows : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_RightWindows;
        }
    }
    public static var Application : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Application;
        }
    }
    public static var Sleep : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Sleep;
        }
    }
    public static var NumberPad0 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad0;
        }
    }
    public static var NumberPad1 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad1;
        }
    }
    public static var NumberPad2 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad2;
        }
    }
    public static var NumberPad3 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad3;
        }
    }
    public static var NumberPad4 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad4;
        }
    }
    public static var NumberPad5 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad5;
        }
    }
    public static var NumberPad6 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad6;
        }
    }
    public static var NumberPad7 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad7;
        }
    }
    public static var NumberPad8 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad8;
        }
    }
    public static var NumberPad9 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberPad9;
        }
    }
    public static var Multiply : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Multiply;
        }
    }
    public static var Add : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Add;
        }
    }
    public static var Separator : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Separator;
        }
    }
    public static var Subtract : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Subtract;
        }
    }
    public static var Decimal : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Decimal;
        }
    }
    public static var Divide : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Divide;
        }
    }
    public static var F1 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F1;
        }
    }
    public static var F2 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F2;
        }
    }
    public static var F3 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F3;
        }
    }
    public static var F4 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F4;
        }
    }
    public static var F5 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F5;
        }
    }
    public static var F6 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F6;
        }
    }
    public static var F7 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F7;
        }
    }
    public static var F8 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F8;
        }
    }
    public static var F9 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F9;
        }
    }
    public static var F10 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F10;
        }
    }
    public static var F11 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F11;
        }
    }
    public static var F12 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F12;
        }
    }
    public static var F13 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F13;
        }
    }
    public static var F14 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F14;
        }
    }
    public static var F15 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F15;
        }
    }
    public static var F16 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F16;
        }
    }
    public static var F17 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F17;
        }
    }
    public static var F18 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F18;
        }
    }
    public static var F19 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F19;
        }
    }
    public static var F20 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F20;
        }
    }
    public static var F21 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F21;
        }
    }
    public static var F22 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F22;
        }
    }
    public static var F23 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F23;
        }
    }
    public static var F24 : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_F24;
        }
    }
    public static var NavigationView : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationView;
        }
    }
    public static var NavigationMenu : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationMenu;
        }
    }
    public static var NavigationUp : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationUp;
        }
    }
    public static var NavigationDown : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationDown;
        }
    }
    public static var NavigationLeft : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationLeft;
        }
    }
    public static var NavigationRight : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationRight;
        }
    }
    public static var NavigationAccept : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationAccept;
        }
    }
    public static var NavigationCancel : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NavigationCancel;
        }
    }
    public static var NumberKeyLock : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_NumberKeyLock;
        }
    }
    public static var Scroll : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Scroll;
        }
    }
    public static var LeftShift : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_LeftShift;
        }
    }
    public static var RightShift : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_RightShift;
        }
    }
    public static var LeftControl : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_LeftControl;
        }
    }
    public static var RightControl : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_RightControl;
        }
    }
    public static var LeftMenu : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_LeftMenu;
        }
    }
    public static var RightMenu : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_RightMenu;
        }
    }
    public static var GoBack : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GoBack;
        }
    }
    public static var GoForward : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GoForward;
        }
    }
    public static var Refresh : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Refresh;
        }
    }
    public static var Stop : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Stop;
        }
    }
    public static var Search : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Search;
        }
    }
    public static var Favorites : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_Favorites;
        }
    }
    public static var GoHome : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GoHome;
        }
    }
    public static var GamepadA : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadA;
        }
    }
    public static var GamepadB : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadB;
        }
    }
    public static var GamepadX : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadX;
        }
    }
    public static var GamepadY : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadY;
        }
    }
    public static var GamepadRightShoulder : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadRightShoulder;
        }
    }
    public static var GamepadLeftShoulder : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadLeftShoulder;
        }
    }
    public static var GamepadLeftTrigger : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadLeftTrigger;
        }
    }
    public static var GamepadRightTrigger : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadRightTrigger;
        }
    }
    public static var GamepadDPadUp : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadDPadUp;
        }
    }
    public static var GamepadDPadDown : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadDPadDown;
        }
    }
    public static var GamepadDPadLeft : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadDPadLeft;
        }
    }
    public static var GamepadDPadRight : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadDPadRight;
        }
    }
    public static var GamepadMenu : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadMenu;
        }
    }
    public static var GamepadView : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadView;
        }
    }
    public static var GamepadLeftThumbstickButton : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickButton;
        }
    }
    public static var GamepadRightThumbstickButton : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickButton;
        }
    }
    public static var GamepadLeftThumbstickUp : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickUp;
        }
    }
    public static var GamepadLeftThumbstickDown : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickDown;
        }
    }
    public static var GamepadLeftThumbstickRight : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickRight;
        }
    }
    public static var GamepadLeftThumbstickLeft : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadLeftThumbstickLeft;
        }
    }
    public static var GamepadRightThumbstickUp : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickUp;
        }
    }
    public static var GamepadRightThumbstickDown : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickDown;
        }
    }
    public static var GamepadRightThumbstickRight : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickRight;
        }
    }
    public static var GamepadRightThumbstickLeft : Self {
        get {
            return _q_CWindows_CSystem_CVirtualKey_GamepadRightThumbstickLeft;
        }
    }
}
