// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Networking.Sockets {
// type: Windows.Networking.Sockets.BandwidthStatistics
// struct type
public typealias BandwidthStatistics = _q_CWindows_CNetworking_CSockets_CBandwidthStatistics;

// type: Windows.Networking.Sockets.ControlChannelTrigger
// runtime class
public class ControlChannelTrigger
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IControlChannelTrigger;
    public init(plok: Windows.Networking.Sockets.IControlChannelTrigger?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IControlChannelTrigger { return _self; }
    public init(channelId : Swift.String, serverKeepAliveIntervalInMinutes : Swift.UInt32) throws {
        let _af : IControlChannelTriggerFactory = try RoGetActivationFactory("Windows.Networking.Sockets.ControlChannelTrigger");
        _self = try _af.CreateControlChannelTrigger(channelId: channelId, serverKeepAliveIntervalInMinutes: serverKeepAliveIntervalInMinutes)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(channelId : Swift.String, serverKeepAliveIntervalInMinutes : Swift.UInt32, resourceRequestType : Windows.Networking.Sockets.ControlChannelTriggerResourceType) throws {
        let _af : IControlChannelTriggerFactory = try RoGetActivationFactory("Windows.Networking.Sockets.ControlChannelTrigger");
        _self = try _af.CreateControlChannelTriggerEx(channelId: channelId, serverKeepAliveIntervalInMinutes: serverKeepAliveIntervalInMinutes, resourceRequestType: resourceRequestType)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ControlChannelTriggerId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.get_ControlChannelTriggerId();
    }
    public func get_ServerKeepAliveIntervalInMinutes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.get_ServerKeepAliveIntervalInMinutes();
    }
    public func put_ServerKeepAliveIntervalInMinutes(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.put_ServerKeepAliveIntervalInMinutes(value: value);
    }
    public func get_CurrentKeepAliveIntervalInMinutes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.get_CurrentKeepAliveIntervalInMinutes();
    }
    public func get_TransportObject() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.get_TransportObject();
    }
    public func get_KeepAliveTrigger() throws -> Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.get_KeepAliveTrigger();
    }
    public func get_PushNotificationTrigger() throws -> Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.get_PushNotificationTrigger();
    }
    public func UsingTransport(transport : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.UsingTransport(transport: transport!.GetInterface());
    }
    public func WaitForPushEnabled() throws -> Windows.Networking.Sockets.ControlChannelTriggerStatus {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.WaitForPushEnabled();
    }
    public func DecreaseNetworkKeepAliveInterval() throws -> Void {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.DecreaseNetworkKeepAliveInterval();
    }
    public func FlushTransport() throws -> Void {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.FlushTransport();
    }
    public var ControlChannelTriggerId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.ControlChannelTriggerId;
        }
    }
    public var CurrentKeepAliveIntervalInMinutes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.CurrentKeepAliveIntervalInMinutes;
        }
    }
    public var KeepAliveTrigger : Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.KeepAliveTrigger;
        }
    }
    public var PushNotificationTrigger : Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.PushNotificationTrigger;
        }
    }
    public var ServerKeepAliveIntervalInMinutes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.ServerKeepAliveIntervalInMinutes;
        }
    }
    public var TransportObject : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger = try _self.QueryInterface();
        return try _ifc.TransportObject;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_IsWakeFromLowPowerSupported() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger2 = try _self.QueryInterface();
        return try _ifc.get_IsWakeFromLowPowerSupported();
    }
    public var IsWakeFromLowPowerSupported : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IControlChannelTrigger2 = try _self.QueryInterface();
        return try _ifc.IsWakeFromLowPowerSupported;
        }
    }
}

// type: Windows.Networking.Sockets.ControlChannelTriggerResourceType
// enum type
public typealias ControlChannelTriggerResourceType = _q_CWindows_CNetworking_CSockets_CControlChannelTriggerResourceType;

// type: Windows.Networking.Sockets.ControlChannelTriggerStatus
// enum type
public typealias ControlChannelTriggerStatus = _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus;

// type: Windows.Networking.Sockets.DatagramSocket
// runtime class
public class DatagramSocket
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IDatagramSocket;
    public init(plok: Windows.Networking.Sockets.IDatagramSocket?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IDatagramSocket { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Sockets.DatagramSocket")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IDatagramSocketStatics {
        static var x : IDatagramSocketStatics =
            try! RoGetActivationFactory("Windows.Networking.Sockets.DatagramSocket")
    }
    public static var DatagramSocketStatics : IDatagramSocketStatics {
        _IDatagramSocketStatics.x
    }
    public static func GetEndpointPairsAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try DatagramSocketStatics.GetEndpointPairsAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName);
    }
    public static func GetEndpointPairs(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func GetEndpointPairsAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try DatagramSocketStatics.GetEndpointPairsWithSortOptionsAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName, sortOptions: sortOptions);
    }
    public static func GetEndpointPairs(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, sortOptions: sortOptions)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.DatagramSocketControl> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.DatagramSocketControl(plok: _ifc.get_Control());
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.DatagramSocketInformation> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.DatagramSocketInformation(plok: _ifc.get_Information());
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.get_OutputStream();
    }
    public func ConnectAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.ConnectAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName);
    }
    public func Connect(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConnectAsync(endpointPair : Optional<Windows.Networking.EndpointPair>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.ConnectWithEndpointPairAsync(endpointPair: endpointPair!.Interface());
    }
    public func Connect(endpointPair : Optional<Windows.Networking.EndpointPair>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(endpointPair: endpointPair)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func BindServiceNameAsync(localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.BindServiceNameAsync(localServiceName: localServiceName);
    }
    public func BindServiceName(localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAsync(localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func BindEndpointAsync(localHostName : Optional<Windows.Networking.HostName>, localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.BindEndpointAsync(localHostName: localHostName!.Interface(), localServiceName: localServiceName);
    }
    public func BindEndpoint(localHostName : Optional<Windows.Networking.HostName>, localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindEndpointAsync(localHostName: localHostName, localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func JoinMulticastGroup(host : Optional<Windows.Networking.HostName>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.JoinMulticastGroup(host: host!.Interface());
    }
    public func GetOutputStreamAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.GetOutputStreamAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName);
    }
    public func GetOutputStream(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) async throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetOutputStreamAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetOutputStreamAsync(endpointPair : Optional<Windows.Networking.EndpointPair>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.GetOutputStreamWithEndpointPairAsync(endpointPair: endpointPair!.Interface());
    }
    public func GetOutputStream(endpointPair : Optional<Windows.Networking.EndpointPair>) async throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetOutputStreamAsync(endpointPair: endpointPair)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func add_MessageReceived(eventHandler : @escaping (Optional<Windows.Networking.Sockets.DatagramSocket>, Optional<Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.add_MessageReceived(eventHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_MessageReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.remove_MessageReceived(eventCookie: eventCookie);
    }
    public var Control : Optional<Windows.Networking.Sockets.DatagramSocketControl> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.DatagramSocketControl(plok: _ifc.Control);
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.DatagramSocketInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.DatagramSocketInformation(plok: _ifc.Information);
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket = try _self.QueryInterface();
        return try _ifc.OutputStream;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func BindServiceNameAsync(localServiceName : Swift.String, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket2 = try _self.QueryInterface();
        return try _ifc.BindServiceNameAndAdapterAsync(localServiceName: localServiceName, adapter: adapter!.Interface());
    }
    public func BindServiceName(localServiceName : Swift.String, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAsync(localServiceName: localServiceName, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CancelIOAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket3 = try _self.QueryInterface();
        return try _ifc.CancelIOAsync();
    }
    public func CancelIO() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CancelIOAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func EnableTransferOwnership(taskId : GUID) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket3 = try _self.QueryInterface();
        return try _ifc.EnableTransferOwnership(taskId: taskId);
    }
    public func EnableTransferOwnership(taskId : GUID, connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket3 = try _self.QueryInterface();
        return try _ifc.EnableTransferOwnershipWithConnectedStandbyAction(taskId: taskId, connectedStandbyAction: connectedStandbyAction);
    }
    public func TransferOwnership(socketId : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket3 = try _self.QueryInterface();
        return try _ifc.TransferOwnership(socketId: socketId);
    }
    public func TransferOwnership(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.SocketActivityContext>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket3 = try _self.QueryInterface();
        return try _ifc.TransferOwnershipWithContext(socketId: socketId, data: data!.Interface());
    }
    public func TransferOwnership(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.SocketActivityContext>, keepAliveTime : Windows.Foundation.TimeSpan) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocket3 = try _self.QueryInterface();
        return try _ifc.TransferOwnershipWithContextAndKeepAliveTime(socketId: socketId, data: data!.Interface(), keepAliveTime: keepAliveTime);
    }
}

// type: Windows.Networking.Sockets.DatagramSocketControl
// runtime class
public class DatagramSocketControl
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IDatagramSocketControl;
    public init(plok: Windows.Networking.Sockets.IDatagramSocketControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IDatagramSocketControl { return _self; }
    public func get_QualityOfService() throws -> Windows.Networking.Sockets.SocketQualityOfService {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl = try _self.QueryInterface();
        return try _ifc.get_QualityOfService();
    }
    public func put_QualityOfService(value : Windows.Networking.Sockets.SocketQualityOfService) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl = try _self.QueryInterface();
        return try _ifc.put_QualityOfService(value: value);
    }
    public func get_OutboundUnicastHopLimit() throws -> Swift.UInt8 {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl = try _self.QueryInterface();
        return try _ifc.get_OutboundUnicastHopLimit();
    }
    public func put_OutboundUnicastHopLimit(value : Swift.UInt8) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl = try _self.QueryInterface();
        return try _ifc.put_OutboundUnicastHopLimit(value: value);
    }
    public var OutboundUnicastHopLimit : Swift.UInt8 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl = try _self.QueryInterface();
        return try _ifc.OutboundUnicastHopLimit;
        }
    }
    public var QualityOfService : Windows.Networking.Sockets.SocketQualityOfService {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl = try _self.QueryInterface();
        return try _ifc.QualityOfService;
        }
    }
    public func get_InboundBufferSizeInBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_InboundBufferSizeInBytes();
    }
    public func put_InboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl2 = try _self.QueryInterface();
        return try _ifc.put_InboundBufferSizeInBytes(value: value);
    }
    public func get_DontFragment() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_DontFragment();
    }
    public func put_DontFragment(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl2 = try _self.QueryInterface();
        return try _ifc.put_DontFragment(value: value);
    }
    public var DontFragment : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl2 = try _self.QueryInterface();
        return try _ifc.DontFragment;
        }
    }
    public var InboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl2 = try _self.QueryInterface();
        return try _ifc.InboundBufferSizeInBytes;
        }
    }
    public func get_MulticastOnly() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl3 = try _self.QueryInterface();
        return try _ifc.get_MulticastOnly();
    }
    public func put_MulticastOnly(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl3 = try _self.QueryInterface();
        return try _ifc.put_MulticastOnly(value: value);
    }
    public var MulticastOnly : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketControl3 = try _self.QueryInterface();
        return try _ifc.MulticastOnly;
        }
    }
}

// type: Windows.Networking.Sockets.DatagramSocketInformation
// runtime class
public class DatagramSocketInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IDatagramSocketInformation;
    public init(plok: Windows.Networking.Sockets.IDatagramSocketInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IDatagramSocketInformation { return _self; }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalAddress());
    }
    public func get_LocalPort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try _ifc.get_LocalPort();
    }
    public func get_RemoteAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_RemoteAddress());
    }
    public func get_RemotePort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try _ifc.get_RemotePort();
    }
    public var LocalAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalAddress);
        }
    }
    public var LocalPort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try _ifc.LocalPort;
        }
    }
    public var RemoteAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.RemoteAddress);
        }
    }
    public var RemotePort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketInformation = try _self.QueryInterface();
        return try _ifc.RemotePort;
        }
    }
}

// type: Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs
// runtime class
public class DatagramSocketMessageReceivedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs;
    public init(plok: Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs { return _self; }
    public func get_RemoteAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_RemoteAddress());
    }
    public func get_RemotePort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.get_RemotePort();
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalAddress());
    }
    public func GetDataReader() throws -> Optional<Windows.Storage.Streams.DataReader> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Streams.DataReader(plok: _ifc.GetDataReader());
    }
    public func GetDataStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.GetDataStream();
    }
    public var LocalAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalAddress);
        }
    }
    public var RemoteAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.RemoteAddress);
        }
    }
    public var RemotePort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.RemotePort;
        }
    }
}

// type: Windows.Networking.Sockets.IControlChannelTrigger
// interface type
open class IControlChannelTrigger
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7d1431a7, Data2: 0xee96, Data3 : 0x40e8, Data4 : (0xa1, 0x99, 0x87, 0x03, 0xcd, 0x96, 0x9e, 0xc3)) }
    // [IsSpecialName] System.String get_ControlChannelTriggerId()
    private func _n_get_ControlChannelTriggerId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ControlChannelTriggerId(pThis, __presult))
        }
    }
    public func get_ControlChannelTriggerId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_ControlChannelTriggerId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.UInt32 get_ServerKeepAliveIntervalInMinutes()
    private func _n_get_ServerKeepAliveIntervalInMinutes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerKeepAliveIntervalInMinutes(pThis, __presult))
        }
    }
    public func get_ServerKeepAliveIntervalInMinutes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_ServerKeepAliveIntervalInMinutes(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ServerKeepAliveIntervalInMinutes(System.UInt32)
    private func _n_put_ServerKeepAliveIntervalInMinutes(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ServerKeepAliveIntervalInMinutes(pThis, value))
        }
    }
    public func put_ServerKeepAliveIntervalInMinutes(value : Swift.UInt32) throws -> Void {
        try self._n_put_ServerKeepAliveIntervalInMinutes(value);
    }
    // [IsSpecialName] System.UInt32 get_CurrentKeepAliveIntervalInMinutes()
    private func _n_get_CurrentKeepAliveIntervalInMinutes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CurrentKeepAliveIntervalInMinutes(pThis, __presult))
        }
    }
    public func get_CurrentKeepAliveIntervalInMinutes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_CurrentKeepAliveIntervalInMinutes(&__result);
        return __result;
    }
    // [IsSpecialName] System.Object get_TransportObject()
    private func _n_get_TransportObject(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransportObject(pThis, __presult))
        }
    }
    public func get_TransportObject() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_TransportObject(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] Windows.ApplicationModel.Background.IBackgroundTrigger get_KeepAliveTrigger()
    private func _n_get_KeepAliveTrigger(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CBackground_CIBackgroundTrigger>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeepAliveTrigger(pThis, __presult))
        }
    }
    public func get_KeepAliveTrigger() throws -> Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CBackground_CIBackgroundTrigger>> = nil;
        try self._n_get_KeepAliveTrigger(&__result);
        return Windows.ApplicationModel.Background.IBackgroundTrigger(consuming: __result);
    }
    // [IsSpecialName] Windows.ApplicationModel.Background.IBackgroundTrigger get_PushNotificationTrigger()
    private func _n_get_PushNotificationTrigger(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CBackground_CIBackgroundTrigger>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PushNotificationTrigger(pThis, __presult))
        }
    }
    public func get_PushNotificationTrigger() throws -> Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CBackground_CIBackgroundTrigger>> = nil;
        try self._n_get_PushNotificationTrigger(&__result);
        return Windows.ApplicationModel.Background.IBackgroundTrigger(consuming: __result);
    }
    // void UsingTransport(System.Object)
    private func _n_UsingTransport(_ transport : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UsingTransport(pThis, transport))
        }
    }
    public func UsingTransport(transport : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_UsingTransport(RawPointer(transport));
    }
    // Windows.Networking.Sockets.ControlChannelTriggerStatus WaitForPushEnabled()
    private func _n_WaitForPushEnabled(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.WaitForPushEnabled(pThis, __presult))
        }
    }
    public func WaitForPushEnabled() throws -> Windows.Networking.Sockets.ControlChannelTriggerStatus {
        var __result : _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus = _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_HardwareSlotRequested;
        try self._n_WaitForPushEnabled(&__result);
        return __result;
    }
    // void DecreaseNetworkKeepAliveInterval()
    private func _n_DecreaseNetworkKeepAliveInterval() throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DecreaseNetworkKeepAliveInterval(pThis))
        }
    }
    public func DecreaseNetworkKeepAliveInterval() throws -> Void {
        try self._n_DecreaseNetworkKeepAliveInterval();
    }
    // void FlushTransport()
    private func _n_FlushTransport() throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FlushTransport(pThis))
        }
    }
    public func FlushTransport() throws -> Void {
        try self._n_FlushTransport();
    }
    public var ControlChannelTriggerId : Swift.String {
        get throws {
            return try get_ControlChannelTriggerId();
        }
    }
    public var CurrentKeepAliveIntervalInMinutes : Swift.UInt32 {
        get throws {
            return try get_CurrentKeepAliveIntervalInMinutes();
        }
    }
    public var KeepAliveTrigger : Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        get throws {
            return try get_KeepAliveTrigger();
        }
    }
    public var PushNotificationTrigger : Optional<Windows.ApplicationModel.Background.IBackgroundTrigger> {
        get throws {
            return try get_PushNotificationTrigger();
        }
    }
    public var ServerKeepAliveIntervalInMinutes : Swift.UInt32 {
        get throws {
            return try get_ServerKeepAliveIntervalInMinutes();
        }
    }
    public var TransportObject : Optional<WinRT.IInspectable> {
        get throws {
            return try get_TransportObject();
        }
    }
} // IControlChannelTrigger


// type: Windows.Networking.Sockets.IControlChannelTrigger2
// interface type
open class IControlChannelTrigger2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaf00d237, Data2: 0x51be, Data3 : 0x4514, Data4 : (0x97, 0x25, 0x35, 0x56, 0xe1, 0x87, 0x95, 0x80)) }
    // [IsSpecialName] bool get_IsWakeFromLowPowerSupported()
    private func _n_get_IsWakeFromLowPowerSupported(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTrigger2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsWakeFromLowPowerSupported(pThis, __presult))
        }
    }
    public func get_IsWakeFromLowPowerSupported() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsWakeFromLowPowerSupported(&__result);
        return __result;
    }
    public var IsWakeFromLowPowerSupported : boolean {
        get throws {
            return try get_IsWakeFromLowPowerSupported();
        }
    }
} // IControlChannelTrigger2


// type: Windows.Networking.Sockets.IControlChannelTriggerFactory
// interface type
// ACTIVATION INTERFACE
open class IControlChannelTriggerFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xda4b7cf0, Data2: 0x8d71, Data3 : 0x446f, Data4 : (0x88, 0xc3, 0xb9, 0x51, 0x84, 0xa2, 0xd6, 0xcd)) }
    // Windows.Networking.Sockets.ControlChannelTrigger CreateControlChannelTrigger(System.String, System.UInt32)
    private func _n_CreateControlChannelTrigger(_ channelId : Optional<HSTRING>, _ serverKeepAliveIntervalInMinutes : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIControlChannelTrigger>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTriggerFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateControlChannelTrigger(pThis, channelId, serverKeepAliveIntervalInMinutes, __presult))
        }
    }
    public func CreateControlChannelTrigger(channelId : Swift.String, serverKeepAliveIntervalInMinutes : Swift.UInt32) throws -> Optional<Windows.Networking.Sockets.IControlChannelTrigger> {
        let __hstr_channelId = try HString(channelId);
        return try withExtendedLifetime(__hstr_channelId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIControlChannelTrigger>> = nil;
        try self._n_CreateControlChannelTrigger(__hstr_channelId.Raw(), serverKeepAliveIntervalInMinutes, &__result);
        return Windows.Networking.Sockets.IControlChannelTrigger(consuming: __result);
        }
    }
    // Windows.Networking.Sockets.ControlChannelTrigger CreateControlChannelTriggerEx(System.String, System.UInt32, Windows.Networking.Sockets.ControlChannelTriggerResourceType)
    private func _n_CreateControlChannelTriggerEx(_ channelId : Optional<HSTRING>, _ serverKeepAliveIntervalInMinutes : UINT32, _ resourceRequestType : _q_CWindows_CNetworking_CSockets_CControlChannelTriggerResourceType, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIControlChannelTrigger>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIControlChannelTriggerFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateControlChannelTriggerEx(pThis, channelId, serverKeepAliveIntervalInMinutes, resourceRequestType, __presult))
        }
    }
    public func CreateControlChannelTriggerEx(channelId : Swift.String, serverKeepAliveIntervalInMinutes : Swift.UInt32, resourceRequestType : Windows.Networking.Sockets.ControlChannelTriggerResourceType) throws -> Optional<Windows.Networking.Sockets.IControlChannelTrigger> {
        let __hstr_channelId = try HString(channelId);
        return try withExtendedLifetime(__hstr_channelId) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIControlChannelTrigger>> = nil;
        try self._n_CreateControlChannelTriggerEx(__hstr_channelId.Raw(), serverKeepAliveIntervalInMinutes, resourceRequestType, &__result);
        return Windows.Networking.Sockets.IControlChannelTrigger(consuming: __result);
        }
    }
} // IControlChannelTriggerFactory


// type: Windows.Networking.Sockets.IDatagramSocket
// interface type
open class IDatagramSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7fe25bbb, Data2: 0xc3bc, Data3 : 0x4677, Data4 : (0x84, 0x46, 0xca, 0x28, 0xa4, 0x65, 0xa3, 0xaf)) }
    // [IsSpecialName] Windows.Networking.Sockets.DatagramSocketControl get_Control()
    private func _n_get_Control(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocketControl>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Control(pThis, __presult))
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.IDatagramSocketControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocketControl>> = nil;
        try self._n_get_Control(&__result);
        return Windows.Networking.Sockets.IDatagramSocketControl(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.DatagramSocketInformation get_Information()
    private func _n_get_Information(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocketInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Information(pThis, __presult))
        }
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.IDatagramSocketInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocketInformation>> = nil;
        try self._n_get_Information(&__result);
        return Windows.Networking.Sockets.IDatagramSocketInformation(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IOutputStream get_OutputStream()
    private func _n_get_OutputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputStream(pThis, __presult))
        }
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>> = nil;
        try self._n_get_OutputStream(&__result);
        return Windows.Storage.Streams.IOutputStream(consuming: __result);
    }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Networking.HostName, System.String)
    private func _n_ConnectAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectAsync(pThis, remoteHostName, remoteServiceName, __presult))
        }
    }
    public func ConnectAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func Connect(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Networking.EndpointPair)
    private func _n_ConnectWithEndpointPairAsync(_ endpointPair : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIEndpointPair>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectWithEndpointPairAsync(pThis, endpointPair, __presult))
        }
    }
    public func ConnectWithEndpointPairAsync(endpointPair : Optional<Windows.Networking.IEndpointPair>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectWithEndpointPairAsync(RawPointer(endpointPair), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func ConnectWithEndpointPair(endpointPair : Optional<Windows.Networking.IEndpointPair>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectWithEndpointPairAsync(endpointPair: endpointPair)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction BindServiceNameAsync(System.String)
    private func _n_BindServiceNameAsync(_ localServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.BindServiceNameAsync(pThis, localServiceName, __presult))
        }
    }
    public func BindServiceNameAsync(localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_BindServiceNameAsync(__hstr_localServiceName.Raw(), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func BindServiceName(localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAsync(localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction BindEndpointAsync(Windows.Networking.HostName, System.String)
    private func _n_BindEndpointAsync(_ localHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ localServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.BindEndpointAsync(pThis, localHostName, localServiceName, __presult))
        }
    }
    public func BindEndpointAsync(localHostName : Optional<Windows.Networking.IHostName>, localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_BindEndpointAsync(RawPointer(localHostName), __hstr_localServiceName.Raw(), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func BindEndpoint(localHostName : Optional<Windows.Networking.IHostName>, localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindEndpointAsync(localHostName: localHostName, localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void JoinMulticastGroup(Windows.Networking.HostName)
    private func _n_JoinMulticastGroup(_ host : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.JoinMulticastGroup(pThis, host))
        }
    }
    public func JoinMulticastGroup(host : Optional<Windows.Networking.IHostName>) throws -> Void {
        try self._n_JoinMulticastGroup(RawPointer(host));
    }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IOutputStream> GetOutputStreamAsync(Windows.Networking.HostName, System.String)
    private func _n_GetOutputStreamAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetOutputStreamAsync(pThis, remoteHostName, remoteServiceName, __presult))
        }
    }
    public func GetOutputStreamAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream>> = nil;
        try self._n_GetOutputStreamAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream(consuming: __result);
        }
    }
    public func GetOutputStream(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) async throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetOutputStreamAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IOutputStream> GetOutputStreamAsync(Windows.Networking.EndpointPair)
    private func _n_GetOutputStreamWithEndpointPairAsync(_ endpointPair : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIEndpointPair>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetOutputStreamWithEndpointPairAsync(pThis, endpointPair, __presult))
        }
    }
    public func GetOutputStreamWithEndpointPairAsync(endpointPair : Optional<Windows.Networking.IEndpointPair>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream>> = nil;
        try self._n_GetOutputStreamWithEndpointPairAsync(RawPointer(endpointPair), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIOutputStream(consuming: __result);
    }
    public func GetOutputStreamWithEndpointPair(endpointPair : Optional<Windows.Networking.IEndpointPair>) async throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetOutputStreamWithEndpointPairAsync(endpointPair: endpointPair)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_MessageReceived(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.DatagramSocket,Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs>)
    private func _n_add_MessageReceived(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_MessageReceived(pThis, eventHandler, __presult))
        }
    }
    public func add_MessageReceived(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CDatagramSocket__q_CWindows_CNetworking_CSockets_CDatagramSocketMessageReceivedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_MessageReceived(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_MessageReceived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_MessageReceived(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MessageReceived(pThis, eventCookie))
        }
    }
    public func remove_MessageReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_MessageReceived(eventCookie);
    }
    public var Control : Optional<Windows.Networking.Sockets.IDatagramSocketControl> {
        get throws {
            return try get_Control();
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.IDatagramSocketInformation> {
        get throws {
            return try get_Information();
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
            return try get_OutputStream();
        }
    }
} // IDatagramSocket


// type: Windows.Networking.Sockets.IDatagramSocket2
// interface type
open class IDatagramSocket2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd83ba354, Data2: 0x9a9d, Data3 : 0x4185, Data4 : (0xa2, 0x0a, 0x14, 0x24, 0xc9, 0xc2, 0xa7, 0xcd)) }
    // Windows.Foundation.IAsyncAction BindServiceNameAsync(System.String, Windows.Networking.Connectivity.NetworkAdapter)
    private func _n_BindServiceNameAndAdapterAsync(_ localServiceName : Optional<HSTRING>, _ adapter : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.BindServiceNameAndAdapterAsync(pThis, localServiceName, adapter, __presult))
        }
    }
    public func BindServiceNameAndAdapterAsync(localServiceName : Swift.String, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_BindServiceNameAndAdapterAsync(__hstr_localServiceName.Raw(), RawPointer(adapter), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func BindServiceNameAndAdapter(localServiceName : Swift.String, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAndAdapterAsync(localServiceName: localServiceName, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IDatagramSocket2


// type: Windows.Networking.Sockets.IDatagramSocket3
// interface type
open class IDatagramSocket3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x37544f09, Data2: 0xab92, Data3 : 0x4306, Data4 : (0x9a, 0xc1, 0x0c, 0x38, 0x12, 0x83, 0xd9, 0xc6)) }
    // Windows.Foundation.IAsyncAction CancelIOAsync()
    private func _n_CancelIOAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CancelIOAsync(pThis, __presult))
        }
    }
    public func CancelIOAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_CancelIOAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func CancelIO() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CancelIOAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void EnableTransferOwnership(System.Guid)
    private func _n_EnableTransferOwnership(_ taskId : GUID) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableTransferOwnership(pThis, taskId))
        }
    }
    public func EnableTransferOwnership(taskId : GUID) throws -> Void {
        try self._n_EnableTransferOwnership(taskId);
    }
    // void EnableTransferOwnership(System.Guid, Windows.Networking.Sockets.SocketActivityConnectedStandbyAction)
    private func _n_EnableTransferOwnershipWithConnectedStandbyAction(_ taskId : GUID, _ connectedStandbyAction : _q_CWindows_CNetworking_CSockets_CSocketActivityConnectedStandbyAction) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableTransferOwnershipWithConnectedStandbyAction(pThis, taskId, connectedStandbyAction))
        }
    }
    public func EnableTransferOwnershipWithConnectedStandbyAction(taskId : GUID, connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction) throws -> Void {
        try self._n_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction);
    }
    // void TransferOwnership(System.String)
    private func _n_TransferOwnership(_ socketId : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnership(pThis, socketId))
        }
    }
    public func TransferOwnership(socketId : Swift.String) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnership(__hstr_socketId.Raw());
        }
    }
    // void TransferOwnership(System.String, Windows.Networking.Sockets.SocketActivityContext)
    private func _n_TransferOwnershipWithContext(_ socketId : Optional<HSTRING>, _ data : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnershipWithContext(pThis, socketId, data))
        }
    }
    public func TransferOwnershipWithContext(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.ISocketActivityContext>) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnershipWithContext(__hstr_socketId.Raw(), RawPointer(data));
        }
    }
    // void TransferOwnership(System.String, Windows.Networking.Sockets.SocketActivityContext, Windows.Foundation.TimeSpan)
    private func _n_TransferOwnershipWithContextAndKeepAliveTime(_ socketId : Optional<HSTRING>, _ data : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>>, _ keepAliveTime : _q_CWindows_CFoundation_CTimeSpan) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnershipWithContextAndKeepAliveTime(pThis, socketId, data, keepAliveTime))
        }
    }
    public func TransferOwnershipWithContextAndKeepAliveTime(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.ISocketActivityContext>, keepAliveTime : Windows.Foundation.TimeSpan) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnershipWithContextAndKeepAliveTime(__hstr_socketId.Raw(), RawPointer(data), keepAliveTime);
        }
    }
} // IDatagramSocket3


// type: Windows.Networking.Sockets.IDatagramSocketControl
// interface type
open class IDatagramSocketControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x52ac3f2e, Data2: 0x349a, Data3 : 0x4135, Data4 : (0xbb, 0x58, 0xb7, 0x9b, 0x26, 0x47, 0xd3, 0x90)) }
    // [IsSpecialName] Windows.Networking.Sockets.SocketQualityOfService get_QualityOfService()
    private func _n_get_QualityOfService(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketQualityOfService>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_QualityOfService(pThis, __presult))
        }
    }
    public func get_QualityOfService() throws -> Windows.Networking.Sockets.SocketQualityOfService {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketQualityOfService = _q_CWindows_CNetworking_CSockets_CSocketQualityOfService_Normal;
        try self._n_get_QualityOfService(&__result);
        return __result;
    }
    // [IsSpecialName] void put_QualityOfService(Windows.Networking.Sockets.SocketQualityOfService)
    private func _n_put_QualityOfService(_ value : _q_CWindows_CNetworking_CSockets_CSocketQualityOfService) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_QualityOfService(pThis, value))
        }
    }
    public func put_QualityOfService(value : Windows.Networking.Sockets.SocketQualityOfService) throws -> Void {
        try self._n_put_QualityOfService(value);
    }
    // [IsSpecialName] System.Byte get_OutboundUnicastHopLimit()
    private func _n_get_OutboundUnicastHopLimit(_ __presult: UnsafeMutablePointer<UINT8>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundUnicastHopLimit(pThis, __presult))
        }
    }
    public func get_OutboundUnicastHopLimit() throws -> Swift.UInt8 {
        var __result : UINT8 = 0;
        try self._n_get_OutboundUnicastHopLimit(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutboundUnicastHopLimit(System.Byte)
    private func _n_put_OutboundUnicastHopLimit(_ value : UINT8) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutboundUnicastHopLimit(pThis, value))
        }
    }
    public func put_OutboundUnicastHopLimit(value : Swift.UInt8) throws -> Void {
        try self._n_put_OutboundUnicastHopLimit(value);
    }
    public var OutboundUnicastHopLimit : Swift.UInt8 {
        get throws {
            return try get_OutboundUnicastHopLimit();
        }
    }
    public var QualityOfService : Windows.Networking.Sockets.SocketQualityOfService {
        get throws {
            return try get_QualityOfService();
        }
    }
} // IDatagramSocketControl


// type: Windows.Networking.Sockets.IDatagramSocketControl2
// interface type
open class IDatagramSocketControl2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x33ead5c2, Data2: 0x979c, Data3 : 0x4415, Data4 : (0x82, 0xa1, 0x3c, 0xfa, 0xf6, 0x46, 0xc1, 0x92)) }
    // [IsSpecialName] System.UInt32 get_InboundBufferSizeInBytes()
    private func _n_get_InboundBufferSizeInBytes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InboundBufferSizeInBytes(pThis, __presult))
        }
    }
    public func get_InboundBufferSizeInBytes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_InboundBufferSizeInBytes(&__result);
        return __result;
    }
    // [IsSpecialName] void put_InboundBufferSizeInBytes(System.UInt32)
    private func _n_put_InboundBufferSizeInBytes(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_InboundBufferSizeInBytes(pThis, value))
        }
    }
    public func put_InboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        try self._n_put_InboundBufferSizeInBytes(value);
    }
    // [IsSpecialName] bool get_DontFragment()
    private func _n_get_DontFragment(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DontFragment(pThis, __presult))
        }
    }
    public func get_DontFragment() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_DontFragment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DontFragment(bool)
    private func _n_put_DontFragment(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DontFragment(pThis, value))
        }
    }
    public func put_DontFragment(value : boolean) throws -> Void {
        try self._n_put_DontFragment(value);
    }
    public var DontFragment : boolean {
        get throws {
            return try get_DontFragment();
        }
    }
    public var InboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
            return try get_InboundBufferSizeInBytes();
        }
    }
} // IDatagramSocketControl2


// type: Windows.Networking.Sockets.IDatagramSocketControl3
// interface type
open class IDatagramSocketControl3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd4eb8256, Data2: 0x1f6d, Data3 : 0x4598, Data4 : (0x9b, 0x57, 0xd4, 0x2a, 0x00, 0x1d, 0xf3, 0x49)) }
    // [IsSpecialName] bool get_MulticastOnly()
    private func _n_get_MulticastOnly(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MulticastOnly(pThis, __presult))
        }
    }
    public func get_MulticastOnly() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_MulticastOnly(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MulticastOnly(bool)
    private func _n_put_MulticastOnly(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketControl3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MulticastOnly(pThis, value))
        }
    }
    public func put_MulticastOnly(value : boolean) throws -> Void {
        try self._n_put_MulticastOnly(value);
    }
    public var MulticastOnly : boolean {
        get throws {
            return try get_MulticastOnly();
        }
    }
} // IDatagramSocketControl3


// type: Windows.Networking.Sockets.IDatagramSocketInformation
// interface type
open class IDatagramSocketInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5f1a569a, Data2: 0x55fb, Data3 : 0x48cd, Data4 : (0x97, 0x06, 0x7a, 0x97, 0x4f, 0x7b, 0x15, 0x85)) }
    // [IsSpecialName] Windows.Networking.HostName get_LocalAddress()
    private func _n_get_LocalAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalAddress(pThis, __presult))
        }
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_LocalPort()
    private func _n_get_LocalPort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalPort(pThis, __presult))
        }
    }
    public func get_LocalPort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LocalPort(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_RemoteAddress()
    private func _n_get_RemoteAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteAddress(pThis, __presult))
        }
    }
    public func get_RemoteAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_RemoteAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_RemotePort()
    private func _n_get_RemotePort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemotePort(pThis, __presult))
        }
    }
    public func get_RemotePort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RemotePort(&__result);
        return Swift.String(from: __result);
    }
    public var LocalAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalAddress();
        }
    }
    public var LocalPort : Swift.String {
        get throws {
            return try get_LocalPort();
        }
    }
    public var RemoteAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_RemoteAddress();
        }
    }
    public var RemotePort : Swift.String {
        get throws {
            return try get_RemotePort();
        }
    }
} // IDatagramSocketInformation


// type: Windows.Networking.Sockets.IDatagramSocketMessageReceivedEventArgs
// interface type
open class IDatagramSocketMessageReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9e2ddca2, Data2: 0x1712, Data3 : 0x4ce4, Data4 : (0xb1, 0x79, 0x8c, 0x65, 0x2c, 0x6d, 0x10, 0x7e)) }
    // [IsSpecialName] Windows.Networking.HostName get_RemoteAddress()
    private func _n_get_RemoteAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteAddress(pThis, __presult))
        }
    }
    public func get_RemoteAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_RemoteAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_RemotePort()
    private func _n_get_RemotePort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemotePort(pThis, __presult))
        }
    }
    public func get_RemotePort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RemotePort(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_LocalAddress()
    private func _n_get_LocalAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalAddress(pThis, __presult))
        }
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // Windows.Storage.Streams.DataReader GetDataReader()
    private func _n_GetDataReader(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIDataReader>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataReader(pThis, __presult))
        }
    }
    public func GetDataReader() throws -> Optional<Windows.Storage.Streams.IDataReader> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIDataReader>> = nil;
        try self._n_GetDataReader(&__result);
        return Windows.Storage.Streams.IDataReader(consuming: __result);
    }
    // Windows.Storage.Streams.IInputStream GetDataStream()
    private func _n_GetDataStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataStream(pThis, __presult))
        }
    }
    public func GetDataStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>> = nil;
        try self._n_GetDataStream(&__result);
        return Windows.Storage.Streams.IInputStream(consuming: __result);
    }
    public var LocalAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalAddress();
        }
    }
    public var RemoteAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_RemoteAddress();
        }
    }
    public var RemotePort : Swift.String {
        get throws {
            return try get_RemotePort();
        }
    }
} // IDatagramSocketMessageReceivedEventArgs


// type: Windows.Networking.Sockets.IDatagramSocketStatics
// interface type
open class IDatagramSocketStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe9c62aee, Data2: 0x1494, Data3 : 0x4a21, Data4 : (0xbb, 0x7e, 0x85, 0x89, 0xfc, 0x75, 0x1d, 0x9d)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.EndpointPair>> GetEndpointPairsAsync(Windows.Networking.HostName, System.String)
    private func _n_GetEndpointPairsAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetEndpointPairsAsync(pThis, remoteHostName, remoteServiceName, __presult))
        }
    }
    public func GetEndpointPairsAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>> = nil;
        try self._n_GetEndpointPairsAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair(consuming: __result);
        }
    }
    public func GetEndpointPairs(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.EndpointPair>> GetEndpointPairsAsync(Windows.Networking.HostName, System.String, Windows.Networking.HostNameSortOptions)
    private func _n_GetEndpointPairsWithSortOptionsAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ sortOptions : _q_CWindows_CNetworking_CHostNameSortOptions, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIDatagramSocketStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetEndpointPairsWithSortOptionsAsync(pThis, remoteHostName, remoteServiceName, sortOptions, __presult))
        }
    }
    public func GetEndpointPairsWithSortOptionsAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>> = nil;
        try self._n_GetEndpointPairsWithSortOptionsAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), sortOptions, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair(consuming: __result);
        }
    }
    public func GetEndpointPairsWithSortOptions(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetEndpointPairsWithSortOptionsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, sortOptions: sortOptions)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IDatagramSocketStatics


// type: Windows.Networking.Sockets.IMessageWebSocket
// interface type
open class IMessageWebSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x33727d08, Data2: 0x34d5, Data3 : 0x4746, Data4 : (0xad, 0x7b, 0x8d, 0xde, 0x5b, 0xc2, 0xef, 0x88)) }
    // [IsSpecialName] Windows.Networking.Sockets.MessageWebSocketControl get_Control()
    private func _n_get_Control(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Control(pThis, __presult))
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.IMessageWebSocketControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl>> = nil;
        try self._n_get_Control(&__result);
        return Windows.Networking.Sockets.IMessageWebSocketControl(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.MessageWebSocketInformation get_Information()
    private func _n_get_Information(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Information(pThis, __presult))
        }
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.IWebSocketInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketInformation>> = nil;
        try self._n_get_Information(&__result);
        return Windows.Networking.Sockets.IWebSocketInformation(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_MessageReceived(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.MessageWebSocket,Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>)
    private func _n_add_MessageReceived(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_MessageReceived(pThis, eventHandler, __presult))
        }
    }
    public func add_MessageReceived(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_MessageReceived(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_MessageReceived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_MessageReceived(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MessageReceived(pThis, eventCookie))
        }
    }
    public func remove_MessageReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_MessageReceived(eventCookie);
    }
    public var Control : Optional<Windows.Networking.Sockets.IMessageWebSocketControl> {
        get throws {
            return try get_Control();
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.IWebSocketInformation> {
        get throws {
            return try get_Information();
        }
    }
} // IMessageWebSocket


// type: Windows.Networking.Sockets.IMessageWebSocket2
// interface type
open class IMessageWebSocket2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbed0cee7, Data2: 0xf9c8, Data3 : 0x440a, Data4 : (0x9a, 0xd5, 0x73, 0x72, 0x81, 0xd9, 0x74, 0x2e)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ServerCustomValidationRequested(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.MessageWebSocket,Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>)
    private func _n_add_ServerCustomValidationRequested(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ServerCustomValidationRequested(pThis, eventHandler, __presult))
        }
    }
    public func add_ServerCustomValidationRequested(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ServerCustomValidationRequested(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ServerCustomValidationRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ServerCustomValidationRequested(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ServerCustomValidationRequested(pThis, eventCookie))
        }
    }
    public func remove_ServerCustomValidationRequested(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ServerCustomValidationRequested(eventCookie);
    }
} // IMessageWebSocket2


// type: Windows.Networking.Sockets.IMessageWebSocket3
// interface type
open class IMessageWebSocket3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x59d9defb, Data2: 0x71af, Data3 : 0x4349, Data4 : (0x84, 0x87, 0x91, 0x1f, 0xcf, 0x68, 0x15, 0x97)) }
    // Windows.Foundation.IAsyncOperationWithProgress<System.UInt32,System.UInt32> SendNonfinalFrameAsync(Windows.Storage.Streams.IBuffer)
    private func _n_SendNonfinalFrameAsync(_ data : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_UINT32_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SendNonfinalFrameAsync(pThis, data, __presult))
        }
    }
    public func SendNonfinalFrameAsync(data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2_UINT32_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_UINT32_UINT32>> = nil;
        try self._n_SendNonfinalFrameAsync(RawPointer(data), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2_UINT32_UINT32(consuming: __result);
    }
    public func SendNonfinalFrame(data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SendNonfinalFrameAsync(data: data)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperationWithProgress<System.UInt32,System.UInt32> SendFinalFrameAsync(Windows.Storage.Streams.IBuffer)
    private func _n_SendFinalFrameAsync(_ data : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_UINT32_UINT32>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SendFinalFrameAsync(pThis, data, __presult))
        }
    }
    public func SendFinalFrameAsync(data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2_UINT32_UINT32> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationWithProgress_2_UINT32_UINT32>> = nil;
        try self._n_SendFinalFrameAsync(RawPointer(data), &__result);
        return ClosedGenerics.IAsyncOperationWithProgress_2_UINT32_UINT32(consuming: __result);
    }
    public func SendFinalFrame(data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SendFinalFrameAsync(data: data)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IMessageWebSocket3


// type: Windows.Networking.Sockets.IMessageWebSocketControl
// interface type
open class IMessageWebSocketControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8118388a, Data2: 0xc629, Data3 : 0x4f0a, Data4 : (0x80, 0xfb, 0x81, 0xfc, 0x05, 0x53, 0x88, 0x62)) }
    // [IsSpecialName] System.UInt32 get_MaxMessageSize()
    private func _n_get_MaxMessageSize(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxMessageSize(pThis, __presult))
        }
    }
    public func get_MaxMessageSize() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_MaxMessageSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxMessageSize(System.UInt32)
    private func _n_put_MaxMessageSize(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxMessageSize(pThis, value))
        }
    }
    public func put_MaxMessageSize(value : Swift.UInt32) throws -> Void {
        try self._n_put_MaxMessageSize(value);
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketMessageType get_MessageType()
    private func _n_get_MessageType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketMessageType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MessageType(pThis, __presult))
        }
    }
    public func get_MessageType() throws -> Windows.Networking.Sockets.SocketMessageType {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketMessageType = _q_CWindows_CNetworking_CSockets_CSocketMessageType_Binary;
        try self._n_get_MessageType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MessageType(Windows.Networking.Sockets.SocketMessageType)
    private func _n_put_MessageType(_ value : _q_CWindows_CNetworking_CSockets_CSocketMessageType) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MessageType(pThis, value))
        }
    }
    public func put_MessageType(value : Windows.Networking.Sockets.SocketMessageType) throws -> Void {
        try self._n_put_MessageType(value);
    }
    public var MaxMessageSize : Swift.UInt32 {
        get throws {
            return try get_MaxMessageSize();
        }
    }
    public var MessageType : Windows.Networking.Sockets.SocketMessageType {
        get throws {
            return try get_MessageType();
        }
    }
} // IMessageWebSocketControl


// type: Windows.Networking.Sockets.IMessageWebSocketControl2
// interface type
open class IMessageWebSocketControl2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe30fd791, Data2: 0x080c, Data3 : 0x400a, Data4 : (0xa7, 0x12, 0x27, 0xdf, 0xa9, 0xe7, 0x44, 0xd8)) }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_DesiredUnsolicitedPongInterval()
    private func _n_get_DesiredUnsolicitedPongInterval(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredUnsolicitedPongInterval(pThis, __presult))
        }
    }
    public func get_DesiredUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_DesiredUnsolicitedPongInterval(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DesiredUnsolicitedPongInterval(Windows.Foundation.TimeSpan)
    private func _n_put_DesiredUnsolicitedPongInterval(_ value : _q_CWindows_CFoundation_CTimeSpan) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredUnsolicitedPongInterval(pThis, value))
        }
    }
    public func put_DesiredUnsolicitedPongInterval(value : Windows.Foundation.TimeSpan) throws -> Void {
        try self._n_put_DesiredUnsolicitedPongInterval(value);
    }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_ActualUnsolicitedPongInterval()
    private func _n_get_ActualUnsolicitedPongInterval(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualUnsolicitedPongInterval(pThis, __presult))
        }
    }
    public func get_ActualUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_ActualUnsolicitedPongInterval(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Sockets.MessageWebSocketReceiveMode get_ReceiveMode()
    private func _n_get_ReceiveMode(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CMessageWebSocketReceiveMode>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReceiveMode(pThis, __presult))
        }
    }
    public func get_ReceiveMode() throws -> Windows.Networking.Sockets.MessageWebSocketReceiveMode {
        var __result : _q_CWindows_CNetworking_CSockets_CMessageWebSocketReceiveMode = _q_CWindows_CNetworking_CSockets_CMessageWebSocketReceiveMode_FullMessage;
        try self._n_get_ReceiveMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ReceiveMode(Windows.Networking.Sockets.MessageWebSocketReceiveMode)
    private func _n_put_ReceiveMode(_ value : _q_CWindows_CNetworking_CSockets_CMessageWebSocketReceiveMode) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ReceiveMode(pThis, value))
        }
    }
    public func put_ReceiveMode(value : Windows.Networking.Sockets.MessageWebSocketReceiveMode) throws -> Void {
        try self._n_put_ReceiveMode(value);
    }
    // [IsSpecialName] Windows.Security.Cryptography.Certificates.Certificate get_ClientCertificate()
    private func _n_get_ClientCertificate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClientCertificate(pThis, __presult))
        }
    }
    public func get_ClientCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>> = nil;
        try self._n_get_ClientCertificate(&__result);
        return Windows.Security.Cryptography.Certificates.ICertificate(consuming: __result);
    }
    // [IsSpecialName] void put_ClientCertificate(Windows.Security.Cryptography.Certificates.Certificate)
    private func _n_put_ClientCertificate(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClientCertificate(pThis, value))
        }
    }
    public func put_ClientCertificate(value : Optional<Windows.Security.Cryptography.Certificates.ICertificate>) throws -> Void {
        try self._n_put_ClientCertificate(RawPointer(value));
    }
    public var ActualUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
            return try get_ActualUnsolicitedPongInterval();
        }
    }
    public var ClientCertificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        get throws {
            return try get_ClientCertificate();
        }
    }
    public var DesiredUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
            return try get_DesiredUnsolicitedPongInterval();
        }
    }
    public var ReceiveMode : Windows.Networking.Sockets.MessageWebSocketReceiveMode {
        get throws {
            return try get_ReceiveMode();
        }
    }
} // IMessageWebSocketControl2


// type: Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs
// interface type
open class IMessageWebSocketMessageReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x478c22ac, Data2: 0x4c4b, Data3 : 0x42ed, Data4 : (0x9e, 0xd7, 0x1e, 0xf9, 0xf9, 0x4f, 0xa3, 0xd5)) }
    // [IsSpecialName] Windows.Networking.Sockets.SocketMessageType get_MessageType()
    private func _n_get_MessageType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketMessageType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MessageType(pThis, __presult))
        }
    }
    public func get_MessageType() throws -> Windows.Networking.Sockets.SocketMessageType {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketMessageType = _q_CWindows_CNetworking_CSockets_CSocketMessageType_Binary;
        try self._n_get_MessageType(&__result);
        return __result;
    }
    // Windows.Storage.Streams.DataReader GetDataReader()
    private func _n_GetDataReader(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIDataReader>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataReader(pThis, __presult))
        }
    }
    public func GetDataReader() throws -> Optional<Windows.Storage.Streams.IDataReader> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIDataReader>> = nil;
        try self._n_GetDataReader(&__result);
        return Windows.Storage.Streams.IDataReader(consuming: __result);
    }
    // Windows.Storage.Streams.IInputStream GetDataStream()
    private func _n_GetDataStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDataStream(pThis, __presult))
        }
    }
    public func GetDataStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>> = nil;
        try self._n_GetDataStream(&__result);
        return Windows.Storage.Streams.IInputStream(consuming: __result);
    }
    public var MessageType : Windows.Networking.Sockets.SocketMessageType {
        get throws {
            return try get_MessageType();
        }
    }
} // IMessageWebSocketMessageReceivedEventArgs


// type: Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs2
// interface type
open class IMessageWebSocketMessageReceivedEventArgs2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x89ce06fd, Data2: 0xdd6f, Data3 : 0x4a07, Data4 : (0x87, 0xf9, 0xf9, 0xeb, 0x4d, 0x89, 0xd8, 0x3d)) }
    // [IsSpecialName] bool get_IsMessageComplete()
    private func _n_get_IsMessageComplete(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIMessageWebSocketMessageReceivedEventArgs2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMessageComplete(pThis, __presult))
        }
    }
    public func get_IsMessageComplete() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsMessageComplete(&__result);
        return __result;
    }
    public var IsMessageComplete : boolean {
        get throws {
            return try get_IsMessageComplete();
        }
    }
} // IMessageWebSocketMessageReceivedEventArgs2


// type: Windows.Networking.Sockets.IServerMessageWebSocket
// interface type
open class IServerMessageWebSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe3ac9240, Data2: 0x813b, Data3 : 0x5efd, Data4 : (0x7e, 0x11, 0xae, 0x23, 0x05, 0xfc, 0x77, 0xf1)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_MessageReceived(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.ServerMessageWebSocket,Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>)
    private func _n_add_MessageReceived(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_MessageReceived(pThis, value, __presult))
        }
    }
    public func add_MessageReceived(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_MessageReceived(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_MessageReceived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_MessageReceived(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MessageReceived(pThis, token))
        }
    }
    public func remove_MessageReceived(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_MessageReceived(token);
    }
    // [IsSpecialName] Windows.Networking.Sockets.ServerMessageWebSocketControl get_Control()
    private func _n_get_Control(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketControl>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Control(pThis, __presult))
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.IServerMessageWebSocketControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketControl>> = nil;
        try self._n_get_Control(&__result);
        return Windows.Networking.Sockets.IServerMessageWebSocketControl(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.ServerMessageWebSocketInformation get_Information()
    private func _n_get_Information(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Information(pThis, __presult))
        }
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.IServerMessageWebSocketInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketInformation>> = nil;
        try self._n_get_Information(&__result);
        return Windows.Networking.Sockets.IServerMessageWebSocketInformation(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IOutputStream get_OutputStream()
    private func _n_get_OutputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputStream(pThis, __presult))
        }
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>> = nil;
        try self._n_get_OutputStream(&__result);
        return Windows.Storage.Streams.IOutputStream(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Closed(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.ServerMessageWebSocket,Windows.Networking.Sockets.WebSocketClosedEventArgs>)
    private func _n_add_Closed(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, value, __presult))
        }
    }
    public func add_Closed(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Closed(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Closed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Closed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
        }
    }
    public func remove_Closed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Closed(token);
    }
    // void Close(System.UInt16, System.String)
    private func _n_CloseWithStatus(_ code : UINT16, _ reason : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CloseWithStatus(pThis, code, reason))
        }
    }
    public func CloseWithStatus(code : Swift.UInt16, reason : Swift.String) throws -> Void {
        let __hstr_reason = try HString(reason);
        return try withExtendedLifetime(__hstr_reason) {
        try self._n_CloseWithStatus(code, __hstr_reason.Raw());
        }
    }
    public var Control : Optional<Windows.Networking.Sockets.IServerMessageWebSocketControl> {
        get throws {
            return try get_Control();
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.IServerMessageWebSocketInformation> {
        get throws {
            return try get_Information();
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
            return try get_OutputStream();
        }
    }
} // IServerMessageWebSocket


// type: Windows.Networking.Sockets.IServerMessageWebSocketControl
// interface type
open class IServerMessageWebSocketControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x69c2f051, Data2: 0x1c1f, Data3 : 0x587a, Data4 : (0x45, 0x19, 0x21, 0x81, 0x61, 0x01, 0x92, 0xb7)) }
    // [IsSpecialName] Windows.Networking.Sockets.SocketMessageType get_MessageType()
    private func _n_get_MessageType(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketMessageType>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MessageType(pThis, __presult))
        }
    }
    public func get_MessageType() throws -> Windows.Networking.Sockets.SocketMessageType {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketMessageType = _q_CWindows_CNetworking_CSockets_CSocketMessageType_Binary;
        try self._n_get_MessageType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MessageType(Windows.Networking.Sockets.SocketMessageType)
    private func _n_put_MessageType(_ value : _q_CWindows_CNetworking_CSockets_CSocketMessageType) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MessageType(pThis, value))
        }
    }
    public func put_MessageType(value : Windows.Networking.Sockets.SocketMessageType) throws -> Void {
        try self._n_put_MessageType(value);
    }
    public var MessageType : Windows.Networking.Sockets.SocketMessageType {
        get throws {
            return try get_MessageType();
        }
    }
} // IServerMessageWebSocketControl


// type: Windows.Networking.Sockets.IServerMessageWebSocketInformation
// interface type
open class IServerMessageWebSocketInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfc32b45f, Data2: 0x4448, Data3 : 0x5505, Data4 : (0x6c, 0xc9, 0x09, 0xaf, 0xa8, 0x91, 0x5f, 0x5d)) }
    // [IsSpecialName] Windows.Networking.Sockets.BandwidthStatistics get_BandwidthStatistics()
    private func _n_get_BandwidthStatistics(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CBandwidthStatistics>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BandwidthStatistics(pThis, __presult))
        }
    }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        var __result : _q_CWindows_CNetworking_CSockets_CBandwidthStatistics = _q_CWindows_CNetworking_CSockets_CBandwidthStatistics(OutboundBitsPerSecond: 0, InboundBitsPerSecond: 0, OutboundBitsPerSecondInstability: 0, InboundBitsPerSecondInstability: 0, OutboundBandwidthPeaked: 0, InboundBandwidthPeaked: 0);
        try self._n_get_BandwidthStatistics(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Protocol()
    private func _n_get_Protocol(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Protocol(pThis, __presult))
        }
    }
    public func get_Protocol() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Protocol(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_LocalAddress()
    private func _n_get_LocalAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerMessageWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalAddress(pThis, __presult))
        }
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
            return try get_BandwidthStatistics();
        }
    }
    public var LocalAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalAddress();
        }
    }
    public var Protocol_ : Swift.String {
        get throws {
            return try get_Protocol();
        }
    }
} // IServerMessageWebSocketInformation


// type: Windows.Networking.Sockets.IServerStreamWebSocket
// interface type
open class IServerStreamWebSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2ced5bbf, Data2: 0x74f6, Data3 : 0x55e4, Data4 : (0x79, 0xdf, 0x91, 0x32, 0x68, 0x0d, 0xfe, 0xe8)) }
    // [IsSpecialName] Windows.Networking.Sockets.ServerStreamWebSocketInformation get_Information()
    private func _n_get_Information(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerStreamWebSocketInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Information(pThis, __presult))
        }
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.IServerStreamWebSocketInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIServerStreamWebSocketInformation>> = nil;
        try self._n_get_Information(&__result);
        return Windows.Networking.Sockets.IServerStreamWebSocketInformation(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IInputStream get_InputStream()
    private func _n_get_InputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputStream(pThis, __presult))
        }
    }
    public func get_InputStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>> = nil;
        try self._n_get_InputStream(&__result);
        return Windows.Storage.Streams.IInputStream(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IOutputStream get_OutputStream()
    private func _n_get_OutputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputStream(pThis, __presult))
        }
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>> = nil;
        try self._n_get_OutputStream(&__result);
        return Windows.Storage.Streams.IOutputStream(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Closed(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.ServerStreamWebSocket,Windows.Networking.Sockets.WebSocketClosedEventArgs>)
    private func _n_add_Closed(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, value, __presult))
        }
    }
    public func add_Closed(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Closed(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Closed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Closed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
        }
    }
    public func remove_Closed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Closed(token);
    }
    // void Close(System.UInt16, System.String)
    private func _n_CloseWithStatus(_ code : UINT16, _ reason : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CloseWithStatus(pThis, code, reason))
        }
    }
    public func CloseWithStatus(code : Swift.UInt16, reason : Swift.String) throws -> Void {
        let __hstr_reason = try HString(reason);
        return try withExtendedLifetime(__hstr_reason) {
        try self._n_CloseWithStatus(code, __hstr_reason.Raw());
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.IServerStreamWebSocketInformation> {
        get throws {
            return try get_Information();
        }
    }
    public var InputStream : Optional<Windows.Storage.Streams.IInputStream> {
        get throws {
            return try get_InputStream();
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
            return try get_OutputStream();
        }
    }
} // IServerStreamWebSocket


// type: Windows.Networking.Sockets.IServerStreamWebSocketInformation
// interface type
open class IServerStreamWebSocketInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfc32b45f, Data2: 0x4448, Data3 : 0x5505, Data4 : (0x6c, 0xc9, 0x09, 0xab, 0xa8, 0x91, 0x5f, 0x5d)) }
    // [IsSpecialName] Windows.Networking.Sockets.BandwidthStatistics get_BandwidthStatistics()
    private func _n_get_BandwidthStatistics(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CBandwidthStatistics>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BandwidthStatistics(pThis, __presult))
        }
    }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        var __result : _q_CWindows_CNetworking_CSockets_CBandwidthStatistics = _q_CWindows_CNetworking_CSockets_CBandwidthStatistics(OutboundBitsPerSecond: 0, InboundBitsPerSecond: 0, OutboundBitsPerSecondInstability: 0, InboundBitsPerSecondInstability: 0, OutboundBandwidthPeaked: 0, InboundBandwidthPeaked: 0);
        try self._n_get_BandwidthStatistics(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Protocol()
    private func _n_get_Protocol(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Protocol(pThis, __presult))
        }
    }
    public func get_Protocol() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Protocol(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_LocalAddress()
    private func _n_get_LocalAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIServerStreamWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalAddress(pThis, __presult))
        }
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
            return try get_BandwidthStatistics();
        }
    }
    public var LocalAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalAddress();
        }
    }
    public var Protocol_ : Swift.String {
        get throws {
            return try get_Protocol();
        }
    }
} // IServerStreamWebSocketInformation


// type: Windows.Networking.Sockets.ISocketActivityContext
// interface type
open class ISocketActivityContext
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43b04d64, Data2: 0x4c85, Data3 : 0x4396, Data4 : (0xa6, 0x37, 0x1d, 0x97, 0x3f, 0x6e, 0xbd, 0x49)) }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_Data()
    private func _n_get_Data(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityContext.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Data(pThis, __presult))
        }
    }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_Data(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_Data();
        }
    }
} // ISocketActivityContext


// type: Windows.Networking.Sockets.ISocketActivityContextFactory
// interface type
// ACTIVATION INTERFACE
open class ISocketActivityContextFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb99fc3c3, Data2: 0x088c, Data3 : 0x4388, Data4 : (0x83, 0xae, 0x25, 0x25, 0x13, 0x8e, 0x04, 0x9a)) }
    // Windows.Networking.Sockets.SocketActivityContext Create(Windows.Storage.Streams.IBuffer)
    private func _n_Create(_ data : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityContextFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, data, __presult))
        }
    }
    public func Create(data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<Windows.Networking.Sockets.ISocketActivityContext> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>> = nil;
        try self._n_Create(RawPointer(data), &__result);
        return Windows.Networking.Sockets.ISocketActivityContext(consuming: __result);
    }
} // ISocketActivityContextFactory


// type: Windows.Networking.Sockets.ISocketActivityInformation
// interface type
open class ISocketActivityInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8d8a42e4, Data2: 0xa87e, Data3 : 0x4b74, Data4 : (0x99, 0x68, 0x18, 0x5b, 0x25, 0x11, 0xde, 0xfe)) }
    // [IsSpecialName] System.Guid get_TaskId()
    private func _n_get_TaskId(_ __presult: UnsafeMutablePointer<GUID>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TaskId(pThis, __presult))
        }
    }
    public func get_TaskId() throws -> GUID {
        var __result : GUID = CWinRT.GUID(Data1: 0x00000000, Data2: 0x0000, Data3 : 0x0000, Data4 : (0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00));
        try self._n_get_TaskId(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Id()
    private func _n_get_Id(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, __presult))
        }
    }
    public func get_Id() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Id(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketActivityKind get_SocketKind()
    private func _n_get_SocketKind(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketActivityKind>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SocketKind(pThis, __presult))
        }
    }
    public func get_SocketKind() throws -> Windows.Networking.Sockets.SocketActivityKind {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketActivityKind = _q_CWindows_CNetworking_CSockets_CSocketActivityKind_None;
        try self._n_get_SocketKind(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketActivityContext get_Context()
    private func _n_get_Context(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Context(pThis, __presult))
        }
    }
    public func get_Context() throws -> Optional<Windows.Networking.Sockets.ISocketActivityContext> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>> = nil;
        try self._n_get_Context(&__result);
        return Windows.Networking.Sockets.ISocketActivityContext(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.DatagramSocket get_DatagramSocket()
    private func _n_get_DatagramSocket(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocket>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DatagramSocket(pThis, __presult))
        }
    }
    public func get_DatagramSocket() throws -> Optional<Windows.Networking.Sockets.IDatagramSocket> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIDatagramSocket>> = nil;
        try self._n_get_DatagramSocket(&__result);
        return Windows.Networking.Sockets.IDatagramSocket(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocket get_StreamSocket()
    private func _n_get_StreamSocket(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StreamSocket(pThis, __presult))
        }
    }
    public func get_StreamSocket() throws -> Optional<Windows.Networking.Sockets.IStreamSocket> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>> = nil;
        try self._n_get_StreamSocket(&__result);
        return Windows.Networking.Sockets.IStreamSocket(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocketListener get_StreamSocketListener()
    private func _n_get_StreamSocketListener(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListener>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StreamSocketListener(pThis, __presult))
        }
    }
    public func get_StreamSocketListener() throws -> Optional<Windows.Networking.Sockets.IStreamSocketListener> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListener>> = nil;
        try self._n_get_StreamSocketListener(&__result);
        return Windows.Networking.Sockets.IStreamSocketListener(consuming: __result);
    }
    public var Context : Optional<Windows.Networking.Sockets.ISocketActivityContext> {
        get throws {
            return try get_Context();
        }
    }
    public var DatagramSocket : Optional<Windows.Networking.Sockets.IDatagramSocket> {
        get throws {
            return try get_DatagramSocket();
        }
    }
    public var Id : Swift.String {
        get throws {
            return try get_Id();
        }
    }
    public var SocketKind : Windows.Networking.Sockets.SocketActivityKind {
        get throws {
            return try get_SocketKind();
        }
    }
    public var StreamSocket : Optional<Windows.Networking.Sockets.IStreamSocket> {
        get throws {
            return try get_StreamSocket();
        }
    }
    public var StreamSocketListener : Optional<Windows.Networking.Sockets.IStreamSocketListener> {
        get throws {
            return try get_StreamSocketListener();
        }
    }
    public var TaskId : GUID {
        get throws {
            return try get_TaskId();
        }
    }
} // ISocketActivityInformation


// type: Windows.Networking.Sockets.ISocketActivityInformationStatics
// interface type
open class ISocketActivityInformationStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8570b47a, Data2: 0x7e7d, Data3 : 0x4736, Data4 : (0x80, 0x41, 0x13, 0x27, 0xa6, 0x54, 0x3c, 0x56)) }
    // [IsSpecialName] Windows.Foundation.Collections.IMapView<System.String,Windows.Networking.Sockets.SocketActivityInformation> get_AllSockets()
    private func _n_get_AllSockets(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityInformationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllSockets(pThis, __presult))
        }
    }
    public func get_AllSockets() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation>> = nil;
        try self._n_get_AllSockets(&__result);
        return ClosedGenerics.IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation(consuming: __result);
    }
    public var AllSockets : Optional<ClosedGenerics.IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation> {
        get throws {
            return try get_AllSockets();
        }
    }
} // ISocketActivityInformationStatics


// type: Windows.Networking.Sockets.ISocketActivityTriggerDetails
// interface type
open class ISocketActivityTriggerDetails
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x45f406a7, Data2: 0xfc9f, Data3 : 0x4f81, Data4 : (0xac, 0xad, 0x35, 0x5f, 0xef, 0x51, 0xe6, 0x7b)) }
    // [IsSpecialName] Windows.Networking.Sockets.SocketActivityTriggerReason get_Reason()
    private func _n_get_Reason(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, __presult))
        }
    }
    public func get_Reason() throws -> Windows.Networking.Sockets.SocketActivityTriggerReason {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason = _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason_None;
        try self._n_get_Reason(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketActivityInformation get_SocketInformation()
    private func _n_get_SocketInformation(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketActivityTriggerDetails.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SocketInformation(pThis, __presult))
        }
    }
    public func get_SocketInformation() throws -> Optional<Windows.Networking.Sockets.ISocketActivityInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityInformation>> = nil;
        try self._n_get_SocketInformation(&__result);
        return Windows.Networking.Sockets.ISocketActivityInformation(consuming: __result);
    }
    public var Reason : Windows.Networking.Sockets.SocketActivityTriggerReason {
        get throws {
            return try get_Reason();
        }
    }
    public var SocketInformation : Optional<Windows.Networking.Sockets.ISocketActivityInformation> {
        get throws {
            return try get_SocketInformation();
        }
    }
} // ISocketActivityTriggerDetails


// type: Windows.Networking.Sockets.ISocketErrorStatics
// interface type
open class ISocketErrorStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x828337f4, Data2: 0x7d56, Data3 : 0x4d8e, Data4 : (0xb7, 0xb4, 0xa0, 0x7d, 0xd7, 0xc1, 0xbc, 0xa9)) }
    // Windows.Networking.Sockets.SocketErrorStatus GetStatus(System.Int32)
    private func _n_GetStatus(_ hresult : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketErrorStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CISocketErrorStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetStatus(pThis, hresult, __presult))
        }
    }
    public func GetStatus(hresult : Swift.Int32) throws -> Windows.Networking.Sockets.SocketErrorStatus {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketErrorStatus = _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_Unknown;
        try self._n_GetStatus(hresult, &__result);
        return __result;
    }
} // ISocketErrorStatics


// type: Windows.Networking.Sockets.IStreamSocket
// interface type
open class IStreamSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x69a22cf3, Data2: 0xfc7b, Data3 : 0x4857, Data4 : (0xaf, 0x38, 0xf6, 0xe7, 0xde, 0x6a, 0x5b, 0x49)) }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocketControl get_Control()
    private func _n_get_Control(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketControl>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Control(pThis, __presult))
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.IStreamSocketControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketControl>> = nil;
        try self._n_get_Control(&__result);
        return Windows.Networking.Sockets.IStreamSocketControl(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocketInformation get_Information()
    private func _n_get_Information(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Information(pThis, __presult))
        }
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.IStreamSocketInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketInformation>> = nil;
        try self._n_get_Information(&__result);
        return Windows.Networking.Sockets.IStreamSocketInformation(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IInputStream get_InputStream()
    private func _n_get_InputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputStream(pThis, __presult))
        }
    }
    public func get_InputStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>> = nil;
        try self._n_get_InputStream(&__result);
        return Windows.Storage.Streams.IInputStream(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IOutputStream get_OutputStream()
    private func _n_get_OutputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputStream(pThis, __presult))
        }
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>> = nil;
        try self._n_get_OutputStream(&__result);
        return Windows.Storage.Streams.IOutputStream(consuming: __result);
    }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Networking.EndpointPair)
    private func _n_ConnectWithEndpointPairAsync(_ endpointPair : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIEndpointPair>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectWithEndpointPairAsync(pThis, endpointPair, __presult))
        }
    }
    public func ConnectWithEndpointPairAsync(endpointPair : Optional<Windows.Networking.IEndpointPair>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectWithEndpointPairAsync(RawPointer(endpointPair), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func ConnectWithEndpointPair(endpointPair : Optional<Windows.Networking.IEndpointPair>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectWithEndpointPairAsync(endpointPair: endpointPair)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Networking.HostName, System.String)
    private func _n_ConnectAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectAsync(pThis, remoteHostName, remoteServiceName, __presult))
        }
    }
    public func ConnectAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func Connect(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Networking.EndpointPair, Windows.Networking.Sockets.SocketProtectionLevel)
    private func _n_ConnectWithEndpointPairAndProtectionLevelAsync(_ endpointPair : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIEndpointPair>>, _ protectionLevel : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectWithEndpointPairAndProtectionLevelAsync(pThis, endpointPair, protectionLevel, __presult))
        }
    }
    public func ConnectWithEndpointPairAndProtectionLevelAsync(endpointPair : Optional<Windows.Networking.IEndpointPair>, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectWithEndpointPairAndProtectionLevelAsync(RawPointer(endpointPair), protectionLevel, &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func ConnectWithEndpointPairAndProtectionLevel(endpointPair : Optional<Windows.Networking.IEndpointPair>, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectWithEndpointPairAndProtectionLevelAsync(endpointPair: endpointPair, protectionLevel: protectionLevel)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Networking.HostName, System.String, Windows.Networking.Sockets.SocketProtectionLevel)
    private func _n_ConnectWithProtectionLevelAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ protectionLevel : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectWithProtectionLevelAsync(pThis, remoteHostName, remoteServiceName, protectionLevel, __presult))
        }
    }
    public func ConnectWithProtectionLevelAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectWithProtectionLevelAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), protectionLevel, &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func ConnectWithProtectionLevel(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectWithProtectionLevelAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, protectionLevel: protectionLevel)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction UpgradeToSslAsync(Windows.Networking.Sockets.SocketProtectionLevel, Windows.Networking.HostName)
    private func _n_UpgradeToSslAsync(_ protectionLevel : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel, _ validationHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpgradeToSslAsync(pThis, protectionLevel, validationHostName, __presult))
        }
    }
    public func UpgradeToSslAsync(protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, validationHostName : Optional<Windows.Networking.IHostName>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_UpgradeToSslAsync(protectionLevel, RawPointer(validationHostName), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func UpgradeToSsl(protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, validationHostName : Optional<Windows.Networking.IHostName>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpgradeToSslAsync(protectionLevel: protectionLevel, validationHostName: validationHostName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Control : Optional<Windows.Networking.Sockets.IStreamSocketControl> {
        get throws {
            return try get_Control();
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.IStreamSocketInformation> {
        get throws {
            return try get_Information();
        }
    }
    public var InputStream : Optional<Windows.Storage.Streams.IInputStream> {
        get throws {
            return try get_InputStream();
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
            return try get_OutputStream();
        }
    }
} // IStreamSocket


// type: Windows.Networking.Sockets.IStreamSocket2
// interface type
open class IStreamSocket2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x29d0e575, Data2: 0xf314, Data3 : 0x4d09, Data4 : (0xad, 0xf0, 0x0f, 0xbd, 0x96, 0x7f, 0xbd, 0x9f)) }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Networking.HostName, System.String, Windows.Networking.Sockets.SocketProtectionLevel, Windows.Networking.Connectivity.NetworkAdapter)
    private func _n_ConnectWithProtectionLevelAndAdapterAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ protectionLevel : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel, _ adapter : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectWithProtectionLevelAndAdapterAsync(pThis, remoteHostName, remoteServiceName, protectionLevel, adapter, __presult))
        }
    }
    public func ConnectWithProtectionLevelAndAdapterAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectWithProtectionLevelAndAdapterAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), protectionLevel, RawPointer(adapter), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func ConnectWithProtectionLevelAndAdapter(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectWithProtectionLevelAndAdapterAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, protectionLevel: protectionLevel, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IStreamSocket2


// type: Windows.Networking.Sockets.IStreamSocket3
// interface type
open class IStreamSocket3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3f430b00, Data2: 0x9d28, Data3 : 0x4854, Data4 : (0xba, 0xc3, 0x23, 0x01, 0x94, 0x1e, 0xc2, 0x23)) }
    // Windows.Foundation.IAsyncAction CancelIOAsync()
    private func _n_CancelIOAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CancelIOAsync(pThis, __presult))
        }
    }
    public func CancelIOAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_CancelIOAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func CancelIO() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CancelIOAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void EnableTransferOwnership(System.Guid)
    private func _n_EnableTransferOwnership(_ taskId : GUID) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableTransferOwnership(pThis, taskId))
        }
    }
    public func EnableTransferOwnership(taskId : GUID) throws -> Void {
        try self._n_EnableTransferOwnership(taskId);
    }
    // void EnableTransferOwnership(System.Guid, Windows.Networking.Sockets.SocketActivityConnectedStandbyAction)
    private func _n_EnableTransferOwnershipWithConnectedStandbyAction(_ taskId : GUID, _ connectedStandbyAction : _q_CWindows_CNetworking_CSockets_CSocketActivityConnectedStandbyAction) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableTransferOwnershipWithConnectedStandbyAction(pThis, taskId, connectedStandbyAction))
        }
    }
    public func EnableTransferOwnershipWithConnectedStandbyAction(taskId : GUID, connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction) throws -> Void {
        try self._n_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction);
    }
    // void TransferOwnership(System.String)
    private func _n_TransferOwnership(_ socketId : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnership(pThis, socketId))
        }
    }
    public func TransferOwnership(socketId : Swift.String) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnership(__hstr_socketId.Raw());
        }
    }
    // void TransferOwnership(System.String, Windows.Networking.Sockets.SocketActivityContext)
    private func _n_TransferOwnershipWithContext(_ socketId : Optional<HSTRING>, _ data : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnershipWithContext(pThis, socketId, data))
        }
    }
    public func TransferOwnershipWithContext(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.ISocketActivityContext>) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnershipWithContext(__hstr_socketId.Raw(), RawPointer(data));
        }
    }
    // void TransferOwnership(System.String, Windows.Networking.Sockets.SocketActivityContext, Windows.Foundation.TimeSpan)
    private func _n_TransferOwnershipWithContextAndKeepAliveTime(_ socketId : Optional<HSTRING>, _ data : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>>, _ keepAliveTime : _q_CWindows_CFoundation_CTimeSpan) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocket3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnershipWithContextAndKeepAliveTime(pThis, socketId, data, keepAliveTime))
        }
    }
    public func TransferOwnershipWithContextAndKeepAliveTime(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.ISocketActivityContext>, keepAliveTime : Windows.Foundation.TimeSpan) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnershipWithContextAndKeepAliveTime(__hstr_socketId.Raw(), RawPointer(data), keepAliveTime);
        }
    }
} // IStreamSocket3


// type: Windows.Networking.Sockets.IStreamSocketControl
// interface type
open class IStreamSocketControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe25adf1, Data2: 0x92ab, Data3 : 0x4af3, Data4 : (0x99, 0x92, 0x0f, 0x4c, 0x85, 0xe3, 0x6c, 0xc4)) }
    // [IsSpecialName] bool get_NoDelay()
    private func _n_get_NoDelay(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NoDelay(pThis, __presult))
        }
    }
    public func get_NoDelay() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_NoDelay(&__result);
        return __result;
    }
    // [IsSpecialName] void put_NoDelay(bool)
    private func _n_put_NoDelay(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NoDelay(pThis, value))
        }
    }
    public func put_NoDelay(value : boolean) throws -> Void {
        try self._n_put_NoDelay(value);
    }
    // [IsSpecialName] bool get_KeepAlive()
    private func _n_get_KeepAlive(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeepAlive(pThis, __presult))
        }
    }
    public func get_KeepAlive() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_KeepAlive(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KeepAlive(bool)
    private func _n_put_KeepAlive(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeepAlive(pThis, value))
        }
    }
    public func put_KeepAlive(value : boolean) throws -> Void {
        try self._n_put_KeepAlive(value);
    }
    // [IsSpecialName] System.UInt32 get_OutboundBufferSizeInBytes()
    private func _n_get_OutboundBufferSizeInBytes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundBufferSizeInBytes(pThis, __presult))
        }
    }
    public func get_OutboundBufferSizeInBytes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_OutboundBufferSizeInBytes(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutboundBufferSizeInBytes(System.UInt32)
    private func _n_put_OutboundBufferSizeInBytes(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutboundBufferSizeInBytes(pThis, value))
        }
    }
    public func put_OutboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        try self._n_put_OutboundBufferSizeInBytes(value);
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketQualityOfService get_QualityOfService()
    private func _n_get_QualityOfService(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketQualityOfService>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_QualityOfService(pThis, __presult))
        }
    }
    public func get_QualityOfService() throws -> Windows.Networking.Sockets.SocketQualityOfService {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketQualityOfService = _q_CWindows_CNetworking_CSockets_CSocketQualityOfService_Normal;
        try self._n_get_QualityOfService(&__result);
        return __result;
    }
    // [IsSpecialName] void put_QualityOfService(Windows.Networking.Sockets.SocketQualityOfService)
    private func _n_put_QualityOfService(_ value : _q_CWindows_CNetworking_CSockets_CSocketQualityOfService) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_QualityOfService(pThis, value))
        }
    }
    public func put_QualityOfService(value : Windows.Networking.Sockets.SocketQualityOfService) throws -> Void {
        try self._n_put_QualityOfService(value);
    }
    // [IsSpecialName] System.Byte get_OutboundUnicastHopLimit()
    private func _n_get_OutboundUnicastHopLimit(_ __presult: UnsafeMutablePointer<UINT8>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundUnicastHopLimit(pThis, __presult))
        }
    }
    public func get_OutboundUnicastHopLimit() throws -> Swift.UInt8 {
        var __result : UINT8 = 0;
        try self._n_get_OutboundUnicastHopLimit(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutboundUnicastHopLimit(System.Byte)
    private func _n_put_OutboundUnicastHopLimit(_ value : UINT8) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutboundUnicastHopLimit(pThis, value))
        }
    }
    public func put_OutboundUnicastHopLimit(value : Swift.UInt8) throws -> Void {
        try self._n_put_OutboundUnicastHopLimit(value);
    }
    public var KeepAlive : boolean {
        get throws {
            return try get_KeepAlive();
        }
    }
    public var NoDelay : boolean {
        get throws {
            return try get_NoDelay();
        }
    }
    public var OutboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
            return try get_OutboundBufferSizeInBytes();
        }
    }
    public var OutboundUnicastHopLimit : Swift.UInt8 {
        get throws {
            return try get_OutboundUnicastHopLimit();
        }
    }
    public var QualityOfService : Windows.Networking.Sockets.SocketQualityOfService {
        get throws {
            return try get_QualityOfService();
        }
    }
} // IStreamSocketControl


// type: Windows.Networking.Sockets.IStreamSocketControl2
// interface type
open class IStreamSocketControl2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc2d09a56, Data2: 0x060f, Data3 : 0x44c1, Data4 : (0xb8, 0xe2, 0x1f, 0xbf, 0x60, 0xbd, 0x62, 0xc5)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Security.Cryptography.Certificates.ChainValidationResult> get_IgnorableServerCertificateErrors()
    private func _n_get_IgnorableServerCertificateErrors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnorableServerCertificateErrors(pThis, __presult))
        }
    }
    public func get_IgnorableServerCertificateErrors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>> = nil;
        try self._n_get_IgnorableServerCertificateErrors(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult(consuming: __result);
    }
    public var IgnorableServerCertificateErrors : Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
            return try get_IgnorableServerCertificateErrors();
        }
    }
} // IStreamSocketControl2


// type: Windows.Networking.Sockets.IStreamSocketControl3
// interface type
open class IStreamSocketControl3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc56a444c, Data2: 0x4e74, Data3 : 0x403e, Data4 : (0x89, 0x4c, 0xb3, 0x1c, 0xae, 0x5c, 0x73, 0x42)) }
    // [IsSpecialName] bool get_SerializeConnectionAttempts()
    private func _n_get_SerializeConnectionAttempts(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SerializeConnectionAttempts(pThis, __presult))
        }
    }
    public func get_SerializeConnectionAttempts() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_SerializeConnectionAttempts(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SerializeConnectionAttempts(bool)
    private func _n_put_SerializeConnectionAttempts(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SerializeConnectionAttempts(pThis, value))
        }
    }
    public func put_SerializeConnectionAttempts(value : boolean) throws -> Void {
        try self._n_put_SerializeConnectionAttempts(value);
    }
    // [IsSpecialName] Windows.Security.Cryptography.Certificates.Certificate get_ClientCertificate()
    private func _n_get_ClientCertificate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClientCertificate(pThis, __presult))
        }
    }
    public func get_ClientCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>> = nil;
        try self._n_get_ClientCertificate(&__result);
        return Windows.Security.Cryptography.Certificates.ICertificate(consuming: __result);
    }
    // [IsSpecialName] void put_ClientCertificate(Windows.Security.Cryptography.Certificates.Certificate)
    private func _n_put_ClientCertificate(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClientCertificate(pThis, value))
        }
    }
    public func put_ClientCertificate(value : Optional<Windows.Security.Cryptography.Certificates.ICertificate>) throws -> Void {
        try self._n_put_ClientCertificate(RawPointer(value));
    }
    public var ClientCertificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        get throws {
            return try get_ClientCertificate();
        }
    }
    public var SerializeConnectionAttempts : boolean {
        get throws {
            return try get_SerializeConnectionAttempts();
        }
    }
} // IStreamSocketControl3


// type: Windows.Networking.Sockets.IStreamSocketControl4
// interface type
open class IStreamSocketControl4
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x964e2b3d, Data2: 0xec27, Data3 : 0x4888, Data4 : (0xb3, 0xce, 0xc7, 0x4b, 0x41, 0x84, 0x23, 0xad)) }
    // [IsSpecialName] Windows.Networking.Sockets.SocketProtectionLevel get_MinProtectionLevel()
    private func _n_get_MinProtectionLevel(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketProtectionLevel>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinProtectionLevel(pThis, __presult))
        }
    }
    public func get_MinProtectionLevel() throws -> Windows.Networking.Sockets.SocketProtectionLevel {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel = _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_PlainSocket;
        try self._n_get_MinProtectionLevel(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MinProtectionLevel(Windows.Networking.Sockets.SocketProtectionLevel)
    private func _n_put_MinProtectionLevel(_ value : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketControl4.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinProtectionLevel(pThis, value))
        }
    }
    public func put_MinProtectionLevel(value : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Void {
        try self._n_put_MinProtectionLevel(value);
    }
    public var MinProtectionLevel : Windows.Networking.Sockets.SocketProtectionLevel {
        get throws {
            return try get_MinProtectionLevel();
        }
    }
} // IStreamSocketControl4


// type: Windows.Networking.Sockets.IStreamSocketInformation
// interface type
open class IStreamSocketInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3b80ae30, Data2: 0x5e68, Data3 : 0x4205, Data4 : (0x88, 0xf0, 0xdc, 0x85, 0xd2, 0xe2, 0x5d, 0xed)) }
    // [IsSpecialName] Windows.Networking.HostName get_LocalAddress()
    private func _n_get_LocalAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalAddress(pThis, __presult))
        }
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_LocalPort()
    private func _n_get_LocalPort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalPort(pThis, __presult))
        }
    }
    public func get_LocalPort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LocalPort(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_RemoteHostName()
    private func _n_get_RemoteHostName(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteHostName(pThis, __presult))
        }
    }
    public func get_RemoteHostName() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_RemoteHostName(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.HostName get_RemoteAddress()
    private func _n_get_RemoteAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteAddress(pThis, __presult))
        }
    }
    public func get_RemoteAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_RemoteAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] System.String get_RemoteServiceName()
    private func _n_get_RemoteServiceName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemoteServiceName(pThis, __presult))
        }
    }
    public func get_RemoteServiceName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RemoteServiceName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.String get_RemotePort()
    private func _n_get_RemotePort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemotePort(pThis, __presult))
        }
    }
    public func get_RemotePort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_RemotePort(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.RoundTripTimeStatistics get_RoundTripTimeStatistics()
    private func _n_get_RoundTripTimeStatistics(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CRoundTripTimeStatistics>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoundTripTimeStatistics(pThis, __presult))
        }
    }
    public func get_RoundTripTimeStatistics() throws -> Windows.Networking.Sockets.RoundTripTimeStatistics {
        var __result : _q_CWindows_CNetworking_CSockets_CRoundTripTimeStatistics = _q_CWindows_CNetworking_CSockets_CRoundTripTimeStatistics(Variance: 0, Max: 0, Min: 0, Sum: 0);
        try self._n_get_RoundTripTimeStatistics(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Sockets.BandwidthStatistics get_BandwidthStatistics()
    private func _n_get_BandwidthStatistics(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CBandwidthStatistics>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BandwidthStatistics(pThis, __presult))
        }
    }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        var __result : _q_CWindows_CNetworking_CSockets_CBandwidthStatistics = _q_CWindows_CNetworking_CSockets_CBandwidthStatistics(OutboundBitsPerSecond: 0, InboundBitsPerSecond: 0, OutboundBitsPerSecondInstability: 0, InboundBitsPerSecondInstability: 0, OutboundBandwidthPeaked: 0, InboundBandwidthPeaked: 0);
        try self._n_get_BandwidthStatistics(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketProtectionLevel get_ProtectionLevel()
    private func _n_get_ProtectionLevel(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketProtectionLevel>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProtectionLevel(pThis, __presult))
        }
    }
    public func get_ProtectionLevel() throws -> Windows.Networking.Sockets.SocketProtectionLevel {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel = _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_PlainSocket;
        try self._n_get_ProtectionLevel(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Storage.Streams.IBuffer get_SessionKey()
    private func _n_get_SessionKey(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SessionKey(pThis, __presult))
        }
    }
    public func get_SessionKey() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIBuffer>> = nil;
        try self._n_get_SessionKey(&__result);
        return Windows.Storage.Streams.IBuffer(consuming: __result);
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
            return try get_BandwidthStatistics();
        }
    }
    public var LocalAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalAddress();
        }
    }
    public var LocalPort : Swift.String {
        get throws {
            return try get_LocalPort();
        }
    }
    public var ProtectionLevel : Windows.Networking.Sockets.SocketProtectionLevel {
        get throws {
            return try get_ProtectionLevel();
        }
    }
    public var RemoteAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_RemoteAddress();
        }
    }
    public var RemoteHostName : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_RemoteHostName();
        }
    }
    public var RemotePort : Swift.String {
        get throws {
            return try get_RemotePort();
        }
    }
    public var RemoteServiceName : Swift.String {
        get throws {
            return try get_RemoteServiceName();
        }
    }
    public var RoundTripTimeStatistics : Windows.Networking.Sockets.RoundTripTimeStatistics {
        get throws {
            return try get_RoundTripTimeStatistics();
        }
    }
    public var SessionKey : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
            return try get_SessionKey();
        }
    }
} // IStreamSocketInformation


// type: Windows.Networking.Sockets.IStreamSocketInformation2
// interface type
open class IStreamSocketInformation2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x12c28452, Data2: 0x4bdc, Data3 : 0x4ee4, Data4 : (0x97, 0x6a, 0xcf, 0x13, 0x0e, 0x9d, 0x92, 0xe3)) }
    // [IsSpecialName] Windows.Networking.Sockets.SocketSslErrorSeverity get_ServerCertificateErrorSeverity()
    private func _n_get_ServerCertificateErrorSeverity(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificateErrorSeverity(pThis, __presult))
        }
    }
    public func get_ServerCertificateErrorSeverity() throws -> Windows.Networking.Sockets.SocketSslErrorSeverity {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity = _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity_None;
        try self._n_get_ServerCertificateErrorSeverity(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Security.Cryptography.Certificates.ChainValidationResult> get_ServerCertificateErrors()
    private func _n_get_ServerCertificateErrors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificateErrors(pThis, __presult))
        }
    }
    public func get_ServerCertificateErrors() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>> = nil;
        try self._n_get_ServerCertificateErrors(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult(consuming: __result);
    }
    // [IsSpecialName] Windows.Security.Cryptography.Certificates.Certificate get_ServerCertificate()
    private func _n_get_ServerCertificate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificate(pThis, __presult))
        }
    }
    public func get_ServerCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>> = nil;
        try self._n_get_ServerCertificate(&__result);
        return Windows.Security.Cryptography.Certificates.ICertificate(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Security.Cryptography.Certificates.Certificate> get_ServerIntermediateCertificates()
    private func _n_get_ServerIntermediateCertificates(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerIntermediateCertificates(pThis, __presult))
        }
    }
    public func get_ServerIntermediateCertificates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate>> = nil;
        try self._n_get_ServerIntermediateCertificates(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate(consuming: __result);
    }
    public var ServerCertificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        get throws {
            return try get_ServerCertificate();
        }
    }
    public var ServerCertificateErrorSeverity : Windows.Networking.Sockets.SocketSslErrorSeverity {
        get throws {
            return try get_ServerCertificateErrorSeverity();
        }
    }
    public var ServerCertificateErrors : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
            return try get_ServerCertificateErrors();
        }
    }
    public var ServerIntermediateCertificates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        get throws {
            return try get_ServerIntermediateCertificates();
        }
    }
} // IStreamSocketInformation2


// type: Windows.Networking.Sockets.IStreamSocketListener
// interface type
open class IStreamSocketListener
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xff513437, Data2: 0xdf9f, Data3 : 0x4df0, Data4 : (0xbf, 0x82, 0x0e, 0xc5, 0xd7, 0xb3, 0x5a, 0xae)) }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocketListenerControl get_Control()
    private func _n_get_Control(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Control(pThis, __presult))
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.IStreamSocketListenerControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl>> = nil;
        try self._n_get_Control(&__result);
        return Windows.Networking.Sockets.IStreamSocketListenerControl(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocketListenerInformation get_Information()
    private func _n_get_Information(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListenerInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Information(pThis, __presult))
        }
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.IStreamSocketListenerInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocketListenerInformation>> = nil;
        try self._n_get_Information(&__result);
        return Windows.Networking.Sockets.IStreamSocketListenerInformation(consuming: __result);
    }
    // Windows.Foundation.IAsyncAction BindServiceNameAsync(System.String)
    private func _n_BindServiceNameAsync(_ localServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.BindServiceNameAsync(pThis, localServiceName, __presult))
        }
    }
    public func BindServiceNameAsync(localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_BindServiceNameAsync(__hstr_localServiceName.Raw(), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func BindServiceName(localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAsync(localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction BindEndpointAsync(Windows.Networking.HostName, System.String)
    private func _n_BindEndpointAsync(_ localHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ localServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.BindEndpointAsync(pThis, localHostName, localServiceName, __presult))
        }
    }
    public func BindEndpointAsync(localHostName : Optional<Windows.Networking.IHostName>, localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_BindEndpointAsync(RawPointer(localHostName), __hstr_localServiceName.Raw(), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func BindEndpoint(localHostName : Optional<Windows.Networking.IHostName>, localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindEndpointAsync(localHostName: localHostName, localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ConnectionReceived(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.StreamSocketListener,Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs>)
    private func _n_add_ConnectionReceived(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ConnectionReceived(pThis, eventHandler, __presult))
        }
    }
    public func add_ConnectionReceived(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ConnectionReceived(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ConnectionReceived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ConnectionReceived(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ConnectionReceived(pThis, eventCookie))
        }
    }
    public func remove_ConnectionReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ConnectionReceived(eventCookie);
    }
    public var Control : Optional<Windows.Networking.Sockets.IStreamSocketListenerControl> {
        get throws {
            return try get_Control();
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.IStreamSocketListenerInformation> {
        get throws {
            return try get_Information();
        }
    }
} // IStreamSocketListener


// type: Windows.Networking.Sockets.IStreamSocketListener2
// interface type
open class IStreamSocketListener2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x658dc13e, Data2: 0xbb3e, Data3 : 0x4458, Data4 : (0xb2, 0x32, 0xed, 0x10, 0x88, 0x69, 0x4b, 0x98)) }
    // Windows.Foundation.IAsyncAction BindServiceNameAsync(System.String, Windows.Networking.Sockets.SocketProtectionLevel)
    private func _n_BindServiceNameWithProtectionLevelAsync(_ localServiceName : Optional<HSTRING>, _ protectionLevel : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.BindServiceNameWithProtectionLevelAsync(pThis, localServiceName, protectionLevel, __presult))
        }
    }
    public func BindServiceNameWithProtectionLevelAsync(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_BindServiceNameWithProtectionLevelAsync(__hstr_localServiceName.Raw(), protectionLevel, &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func BindServiceNameWithProtectionLevel(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameWithProtectionLevelAsync(localServiceName: localServiceName, protectionLevel: protectionLevel)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncAction BindServiceNameAsync(System.String, Windows.Networking.Sockets.SocketProtectionLevel, Windows.Networking.Connectivity.NetworkAdapter)
    private func _n_BindServiceNameWithProtectionLevelAndAdapterAsync(_ localServiceName : Optional<HSTRING>, _ protectionLevel : _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel, _ adapter : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CConnectivity_CINetworkAdapter>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.BindServiceNameWithProtectionLevelAndAdapterAsync(pThis, localServiceName, protectionLevel, adapter, __presult))
        }
    }
    public func BindServiceNameWithProtectionLevelAndAdapterAsync(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let __hstr_localServiceName = try HString(localServiceName);
        return try withExtendedLifetime(__hstr_localServiceName) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_BindServiceNameWithProtectionLevelAndAdapterAsync(__hstr_localServiceName.Raw(), protectionLevel, RawPointer(adapter), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
        }
    }
    public func BindServiceNameWithProtectionLevelAndAdapter(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.INetworkAdapter>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameWithProtectionLevelAndAdapterAsync(localServiceName: localServiceName, protectionLevel: protectionLevel, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IStreamSocketListener2


// type: Windows.Networking.Sockets.IStreamSocketListener3
// interface type
open class IStreamSocketListener3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4798201c, Data2: 0xbdf8, Data3 : 0x4919, Data4 : (0x85, 0x42, 0x28, 0xd4, 0x50, 0xe7, 0x45, 0x07)) }
    // Windows.Foundation.IAsyncAction CancelIOAsync()
    private func _n_CancelIOAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CancelIOAsync(pThis, __presult))
        }
    }
    public func CancelIOAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_CancelIOAsync(&__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func CancelIO() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CancelIOAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void EnableTransferOwnership(System.Guid)
    private func _n_EnableTransferOwnership(_ taskId : GUID) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableTransferOwnership(pThis, taskId))
        }
    }
    public func EnableTransferOwnership(taskId : GUID) throws -> Void {
        try self._n_EnableTransferOwnership(taskId);
    }
    // void EnableTransferOwnership(System.Guid, Windows.Networking.Sockets.SocketActivityConnectedStandbyAction)
    private func _n_EnableTransferOwnershipWithConnectedStandbyAction(_ taskId : GUID, _ connectedStandbyAction : _q_CWindows_CNetworking_CSockets_CSocketActivityConnectedStandbyAction) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.EnableTransferOwnershipWithConnectedStandbyAction(pThis, taskId, connectedStandbyAction))
        }
    }
    public func EnableTransferOwnershipWithConnectedStandbyAction(taskId : GUID, connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction) throws -> Void {
        try self._n_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction);
    }
    // void TransferOwnership(System.String)
    private func _n_TransferOwnership(_ socketId : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnership(pThis, socketId))
        }
    }
    public func TransferOwnership(socketId : Swift.String) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnership(__hstr_socketId.Raw());
        }
    }
    // void TransferOwnership(System.String, Windows.Networking.Sockets.SocketActivityContext)
    private func _n_TransferOwnershipWithContext(_ socketId : Optional<HSTRING>, _ data : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CISocketActivityContext>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListener3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransferOwnershipWithContext(pThis, socketId, data))
        }
    }
    public func TransferOwnershipWithContext(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.ISocketActivityContext>) throws -> Void {
        let __hstr_socketId = try HString(socketId);
        return try withExtendedLifetime(__hstr_socketId) {
        try self._n_TransferOwnershipWithContext(__hstr_socketId.Raw(), RawPointer(data));
        }
    }
} // IStreamSocketListener3


// type: Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs
// interface type
open class IStreamSocketListenerConnectionReceivedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0c472ea9, Data2: 0x373f, Data3 : 0x447b, Data4 : (0x85, 0xb1, 0xdd, 0xd4, 0x54, 0x88, 0x03, 0xba)) }
    // [IsSpecialName] Windows.Networking.Sockets.StreamSocket get_Socket()
    private func _n_get_Socket(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerConnectionReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Socket(pThis, __presult))
        }
    }
    public func get_Socket() throws -> Optional<Windows.Networking.Sockets.IStreamSocket> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamSocket>> = nil;
        try self._n_get_Socket(&__result);
        return Windows.Networking.Sockets.IStreamSocket(consuming: __result);
    }
    public var Socket : Optional<Windows.Networking.Sockets.IStreamSocket> {
        get throws {
            return try get_Socket();
        }
    }
} // IStreamSocketListenerConnectionReceivedEventArgs


// type: Windows.Networking.Sockets.IStreamSocketListenerControl
// interface type
open class IStreamSocketListenerControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x20d8c576, Data2: 0x8d8a, Data3 : 0x4dba, Data4 : (0x97, 0x22, 0xa1, 0x6c, 0x4d, 0x98, 0x49, 0x80)) }
    // [IsSpecialName] Windows.Networking.Sockets.SocketQualityOfService get_QualityOfService()
    private func _n_get_QualityOfService(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketQualityOfService>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_QualityOfService(pThis, __presult))
        }
    }
    public func get_QualityOfService() throws -> Windows.Networking.Sockets.SocketQualityOfService {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketQualityOfService = _q_CWindows_CNetworking_CSockets_CSocketQualityOfService_Normal;
        try self._n_get_QualityOfService(&__result);
        return __result;
    }
    // [IsSpecialName] void put_QualityOfService(Windows.Networking.Sockets.SocketQualityOfService)
    private func _n_put_QualityOfService(_ value : _q_CWindows_CNetworking_CSockets_CSocketQualityOfService) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_QualityOfService(pThis, value))
        }
    }
    public func put_QualityOfService(value : Windows.Networking.Sockets.SocketQualityOfService) throws -> Void {
        try self._n_put_QualityOfService(value);
    }
    public var QualityOfService : Windows.Networking.Sockets.SocketQualityOfService {
        get throws {
            return try get_QualityOfService();
        }
    }
} // IStreamSocketListenerControl


// type: Windows.Networking.Sockets.IStreamSocketListenerControl2
// interface type
open class IStreamSocketListenerControl2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x948bb665, Data2: 0x2c3e, Data3 : 0x404b, Data4 : (0xb8, 0xb0, 0x8e, 0xb2, 0x49, 0xa2, 0xb0, 0xa1)) }
    // [IsSpecialName] bool get_NoDelay()
    private func _n_get_NoDelay(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NoDelay(pThis, __presult))
        }
    }
    public func get_NoDelay() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_NoDelay(&__result);
        return __result;
    }
    // [IsSpecialName] void put_NoDelay(bool)
    private func _n_put_NoDelay(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NoDelay(pThis, value))
        }
    }
    public func put_NoDelay(value : boolean) throws -> Void {
        try self._n_put_NoDelay(value);
    }
    // [IsSpecialName] bool get_KeepAlive()
    private func _n_get_KeepAlive(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeepAlive(pThis, __presult))
        }
    }
    public func get_KeepAlive() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_KeepAlive(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KeepAlive(bool)
    private func _n_put_KeepAlive(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeepAlive(pThis, value))
        }
    }
    public func put_KeepAlive(value : boolean) throws -> Void {
        try self._n_put_KeepAlive(value);
    }
    // [IsSpecialName] System.UInt32 get_OutboundBufferSizeInBytes()
    private func _n_get_OutboundBufferSizeInBytes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundBufferSizeInBytes(pThis, __presult))
        }
    }
    public func get_OutboundBufferSizeInBytes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_OutboundBufferSizeInBytes(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutboundBufferSizeInBytes(System.UInt32)
    private func _n_put_OutboundBufferSizeInBytes(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutboundBufferSizeInBytes(pThis, value))
        }
    }
    public func put_OutboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        try self._n_put_OutboundBufferSizeInBytes(value);
    }
    // [IsSpecialName] System.Byte get_OutboundUnicastHopLimit()
    private func _n_get_OutboundUnicastHopLimit(_ __presult: UnsafeMutablePointer<UINT8>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundUnicastHopLimit(pThis, __presult))
        }
    }
    public func get_OutboundUnicastHopLimit() throws -> Swift.UInt8 {
        var __result : UINT8 = 0;
        try self._n_get_OutboundUnicastHopLimit(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutboundUnicastHopLimit(System.Byte)
    private func _n_put_OutboundUnicastHopLimit(_ value : UINT8) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutboundUnicastHopLimit(pThis, value))
        }
    }
    public func put_OutboundUnicastHopLimit(value : Swift.UInt8) throws -> Void {
        try self._n_put_OutboundUnicastHopLimit(value);
    }
    public var KeepAlive : boolean {
        get throws {
            return try get_KeepAlive();
        }
    }
    public var NoDelay : boolean {
        get throws {
            return try get_NoDelay();
        }
    }
    public var OutboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
            return try get_OutboundBufferSizeInBytes();
        }
    }
    public var OutboundUnicastHopLimit : Swift.UInt8 {
        get throws {
            return try get_OutboundUnicastHopLimit();
        }
    }
} // IStreamSocketListenerControl2


// type: Windows.Networking.Sockets.IStreamSocketListenerInformation
// interface type
open class IStreamSocketListenerInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe62ba82f, Data2: 0xa63a, Data3 : 0x430b, Data4 : (0xbf, 0x62, 0x29, 0xe9, 0x3e, 0x56, 0x33, 0xb4)) }
    // [IsSpecialName] System.String get_LocalPort()
    private func _n_get_LocalPort(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketListenerInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalPort(pThis, __presult))
        }
    }
    public func get_LocalPort() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LocalPort(&__result);
        return Swift.String(from: __result);
    }
    public var LocalPort : Swift.String {
        get throws {
            return try get_LocalPort();
        }
    }
} // IStreamSocketListenerInformation


// type: Windows.Networking.Sockets.IStreamSocketStatics
// interface type
open class IStreamSocketStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa420bc4a, Data2: 0x6e2e, Data3 : 0x4af5, Data4 : (0xb5, 0x56, 0x35, 0x5a, 0xe0, 0xcd, 0x4f, 0x29)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.EndpointPair>> GetEndpointPairsAsync(Windows.Networking.HostName, System.String)
    private func _n_GetEndpointPairsAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetEndpointPairsAsync(pThis, remoteHostName, remoteServiceName, __presult))
        }
    }
    public func GetEndpointPairsAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>> = nil;
        try self._n_GetEndpointPairsAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair(consuming: __result);
        }
    }
    public func GetEndpointPairs(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Networking.EndpointPair>> GetEndpointPairsAsync(Windows.Networking.HostName, System.String, Windows.Networking.HostNameSortOptions)
    private func _n_GetEndpointPairsWithSortOptionsAsync(_ remoteHostName : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>, _ remoteServiceName : Optional<HSTRING>, _ sortOptions : _q_CWindows_CNetworking_CHostNameSortOptions, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamSocketStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetEndpointPairsWithSortOptionsAsync(pThis, remoteHostName, remoteServiceName, sortOptions, __presult))
        }
    }
    public func GetEndpointPairsWithSortOptionsAsync(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        let __hstr_remoteServiceName = try HString(remoteServiceName);
        return try withExtendedLifetime(__hstr_remoteServiceName) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair>> = nil;
        try self._n_GetEndpointPairsWithSortOptionsAsync(RawPointer(remoteHostName), __hstr_remoteServiceName.Raw(), sortOptions, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair(consuming: __result);
        }
    }
    public func GetEndpointPairsWithSortOptions(remoteHostName : Optional<Windows.Networking.IHostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetEndpointPairsWithSortOptionsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, sortOptions: sortOptions)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IStreamSocketStatics


// type: Windows.Networking.Sockets.IStreamWebSocket
// interface type
open class IStreamWebSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbd4a49d8, Data2: 0xb289, Data3 : 0x45bb, Data4 : (0x97, 0xeb, 0xc7, 0x52, 0x52, 0x05, 0xa8, 0x43)) }
    // [IsSpecialName] Windows.Networking.Sockets.StreamWebSocketControl get_Control()
    private func _n_get_Control(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Control(pThis, __presult))
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.IStreamWebSocketControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl>> = nil;
        try self._n_get_Control(&__result);
        return Windows.Networking.Sockets.IStreamWebSocketControl(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.StreamWebSocketInformation get_Information()
    private func _n_get_Information(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketInformation>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Information(pThis, __presult))
        }
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.IWebSocketInformation> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CIWebSocketInformation>> = nil;
        try self._n_get_Information(&__result);
        return Windows.Networking.Sockets.IWebSocketInformation(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.Streams.IInputStream get_InputStream()
    private func _n_get_InputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_InputStream(pThis, __presult))
        }
    }
    public func get_InputStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIInputStream>> = nil;
        try self._n_get_InputStream(&__result);
        return Windows.Storage.Streams.IInputStream(consuming: __result);
    }
    public var Control : Optional<Windows.Networking.Sockets.IStreamWebSocketControl> {
        get throws {
            return try get_Control();
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.IWebSocketInformation> {
        get throws {
            return try get_Information();
        }
    }
    public var InputStream : Optional<Windows.Storage.Streams.IInputStream> {
        get throws {
            return try get_InputStream();
        }
    }
} // IStreamWebSocket


// type: Windows.Networking.Sockets.IStreamWebSocket2
// interface type
open class IStreamWebSocket2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaa4d08cb, Data2: 0x93f5, Data3 : 0x4678, Data4 : (0x82, 0x36, 0x57, 0xcc, 0xe5, 0x41, 0x7e, 0xd5)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ServerCustomValidationRequested(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.StreamWebSocket,Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>)
    private func _n_add_ServerCustomValidationRequested(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocket2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ServerCustomValidationRequested(pThis, eventHandler, __presult))
        }
    }
    public func add_ServerCustomValidationRequested(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ServerCustomValidationRequested(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ServerCustomValidationRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ServerCustomValidationRequested(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocket2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ServerCustomValidationRequested(pThis, eventCookie))
        }
    }
    public func remove_ServerCustomValidationRequested(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ServerCustomValidationRequested(eventCookie);
    }
} // IStreamWebSocket2


// type: Windows.Networking.Sockets.IStreamWebSocketControl
// interface type
open class IStreamWebSocketControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb4f478b1, Data2: 0xa45a, Data3 : 0x48db, Data4 : (0x95, 0x3a, 0x64, 0x5b, 0x7d, 0x96, 0x4c, 0x07)) }
    // [IsSpecialName] bool get_NoDelay()
    private func _n_get_NoDelay(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NoDelay(pThis, __presult))
        }
    }
    public func get_NoDelay() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_NoDelay(&__result);
        return __result;
    }
    // [IsSpecialName] void put_NoDelay(bool)
    private func _n_put_NoDelay(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_NoDelay(pThis, value))
        }
    }
    public func put_NoDelay(value : boolean) throws -> Void {
        try self._n_put_NoDelay(value);
    }
    public var NoDelay : boolean {
        get throws {
            return try get_NoDelay();
        }
    }
} // IStreamWebSocketControl


// type: Windows.Networking.Sockets.IStreamWebSocketControl2
// interface type
open class IStreamWebSocketControl2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x215d9f7e, Data2: 0xfa58, Data3 : 0x40da, Data4 : (0x9f, 0x11, 0xa4, 0x8d, 0xaf, 0xe9, 0x50, 0x37)) }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_DesiredUnsolicitedPongInterval()
    private func _n_get_DesiredUnsolicitedPongInterval(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredUnsolicitedPongInterval(pThis, __presult))
        }
    }
    public func get_DesiredUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_DesiredUnsolicitedPongInterval(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DesiredUnsolicitedPongInterval(Windows.Foundation.TimeSpan)
    private func _n_put_DesiredUnsolicitedPongInterval(_ value : _q_CWindows_CFoundation_CTimeSpan) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DesiredUnsolicitedPongInterval(pThis, value))
        }
    }
    public func put_DesiredUnsolicitedPongInterval(value : Windows.Foundation.TimeSpan) throws -> Void {
        try self._n_put_DesiredUnsolicitedPongInterval(value);
    }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_ActualUnsolicitedPongInterval()
    private func _n_get_ActualUnsolicitedPongInterval(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualUnsolicitedPongInterval(pThis, __presult))
        }
    }
    public func get_ActualUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_ActualUnsolicitedPongInterval(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Security.Cryptography.Certificates.Certificate get_ClientCertificate()
    private func _n_get_ClientCertificate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClientCertificate(pThis, __presult))
        }
    }
    public func get_ClientCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>> = nil;
        try self._n_get_ClientCertificate(&__result);
        return Windows.Security.Cryptography.Certificates.ICertificate(consuming: __result);
    }
    // [IsSpecialName] void put_ClientCertificate(Windows.Security.Cryptography.Certificates.Certificate)
    private func _n_put_ClientCertificate(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIStreamWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClientCertificate(pThis, value))
        }
    }
    public func put_ClientCertificate(value : Optional<Windows.Security.Cryptography.Certificates.ICertificate>) throws -> Void {
        try self._n_put_ClientCertificate(RawPointer(value));
    }
    public var ActualUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
            return try get_ActualUnsolicitedPongInterval();
        }
    }
    public var ClientCertificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        get throws {
            return try get_ClientCertificate();
        }
    }
    public var DesiredUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
            return try get_DesiredUnsolicitedPongInterval();
        }
    }
} // IStreamWebSocketControl2


// type: Windows.Networking.Sockets.IWebSocket
// interface type
open class IWebSocket
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf877396f, Data2: 0x99b1, Data3 : 0x4e18, Data4 : (0xbc, 0x08, 0x85, 0x0c, 0x9a, 0xdf, 0x15, 0x6e)) }
    // [IsSpecialName] Windows.Storage.Streams.IOutputStream get_OutputStream()
    private func _n_get_OutputStream(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputStream(pThis, __presult))
        }
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIOutputStream>> = nil;
        try self._n_get_OutputStream(&__result);
        return Windows.Storage.Streams.IOutputStream(consuming: __result);
    }
    // Windows.Foundation.IAsyncAction ConnectAsync(Windows.Foundation.Uri)
    private func _n_ConnectAsync(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ConnectAsync(pThis, uri, __presult))
        }
    }
    public func ConnectAsync(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_ConnectAsync(RawPointer(uri), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Connect(uri : Optional<Windows.Foundation.IUriRuntimeClass>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void SetRequestHeader(System.String, System.String)
    private func _n_SetRequestHeader(_ headerName : Optional<HSTRING>, _ headerValue : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRequestHeader(pThis, headerName, headerValue))
        }
    }
    public func SetRequestHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let __hstr_headerName = try HString(headerName);
        return try withExtendedLifetime(__hstr_headerName) {
        let __hstr_headerValue = try HString(headerValue);
        return try withExtendedLifetime(__hstr_headerValue) {
        try self._n_SetRequestHeader(__hstr_headerName.Raw(), __hstr_headerValue.Raw());
        }
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Closed(Windows.Foundation.TypedEventHandler<Windows.Networking.Sockets.IWebSocket,Windows.Networking.Sockets.WebSocketClosedEventArgs>)
    private func _n_add_Closed(_ eventHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, eventHandler, __presult))
        }
    }
    public func add_Closed(eventHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Closed(RawPointer(eventHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Closed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Closed(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, eventCookie))
        }
    }
    public func remove_Closed(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Closed(eventCookie);
    }
    // void Close(System.UInt16, System.String)
    private func _n_CloseWithStatus(_ code : UINT16, _ reason : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocket.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CloseWithStatus(pThis, code, reason))
        }
    }
    public func CloseWithStatus(code : Swift.UInt16, reason : Swift.String) throws -> Void {
        let __hstr_reason = try HString(reason);
        return try withExtendedLifetime(__hstr_reason) {
        try self._n_CloseWithStatus(code, __hstr_reason.Raw());
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
            return try get_OutputStream();
        }
    }
} // IWebSocket


// type: Windows.Networking.Sockets.IWebSocketClosedEventArgs
// interface type
open class IWebSocketClosedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xceb78d07, Data2: 0xd0a8, Data3 : 0x4703, Data4 : (0xa0, 0x91, 0xc8, 0xc2, 0xc0, 0x91, 0x5b, 0xc3)) }
    // [IsSpecialName] System.UInt16 get_Code()
    private func _n_get_Code(_ __presult: UnsafeMutablePointer<UINT16>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Code(pThis, __presult))
        }
    }
    public func get_Code() throws -> Swift.UInt16 {
        var __result : UINT16 = 0;
        try self._n_get_Code(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Reason()
    private func _n_get_Reason(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketClosedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, __presult))
        }
    }
    public func get_Reason() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Reason(&__result);
        return Swift.String(from: __result);
    }
    public var Code : Swift.UInt16 {
        get throws {
            return try get_Code();
        }
    }
    public var Reason : Swift.String {
        get throws {
            return try get_Reason();
        }
    }
} // IWebSocketClosedEventArgs


// type: Windows.Networking.Sockets.IWebSocketControl
// interface type
open class IWebSocketControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2ec4bdc3, Data2: 0xd9a5, Data3 : 0x455a, Data4 : (0x98, 0x11, 0xde, 0x24, 0xd4, 0x53, 0x37, 0xe9)) }
    // [IsSpecialName] System.UInt32 get_OutboundBufferSizeInBytes()
    private func _n_get_OutboundBufferSizeInBytes(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutboundBufferSizeInBytes(pThis, __presult))
        }
    }
    public func get_OutboundBufferSizeInBytes() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_OutboundBufferSizeInBytes(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OutboundBufferSizeInBytes(System.UInt32)
    private func _n_put_OutboundBufferSizeInBytes(_ value : UINT32) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutboundBufferSizeInBytes(pThis, value))
        }
    }
    public func put_OutboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        try self._n_put_OutboundBufferSizeInBytes(value);
    }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_ServerCredential()
    private func _n_get_ServerCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCredential(pThis, __presult))
        }
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_ServerCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] void put_ServerCredential(Windows.Security.Credentials.PasswordCredential)
    private func _n_put_ServerCredential(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ServerCredential(pThis, value))
        }
    }
    public func put_ServerCredential(value : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Void {
        try self._n_put_ServerCredential(RawPointer(value));
    }
    // [IsSpecialName] Windows.Security.Credentials.PasswordCredential get_ProxyCredential()
    private func _n_get_ProxyCredential(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProxyCredential(pThis, __presult))
        }
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_get_ProxyCredential(&__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
    }
    // [IsSpecialName] void put_ProxyCredential(Windows.Security.Credentials.PasswordCredential)
    private func _n_put_ProxyCredential(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProxyCredential(pThis, value))
        }
    }
    public func put_ProxyCredential(value : Optional<Windows.Security.Credentials.IPasswordCredential>) throws -> Void {
        try self._n_put_ProxyCredential(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<System.String> get_SupportedProtocols()
    private func _n_get_SupportedProtocols(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportedProtocols(pThis, __presult))
        }
    }
    public func get_SupportedProtocols() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1_HSTRING>> = nil;
        try self._n_get_SupportedProtocols(&__result);
        return ClosedGenerics.IVector_1_HSTRING(consuming: __result);
    }
    public var OutboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
            return try get_OutboundBufferSizeInBytes();
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_ProxyCredential();
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.IPasswordCredential> {
        get throws {
            return try get_ServerCredential();
        }
    }
    public var SupportedProtocols : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
            return try get_SupportedProtocols();
        }
    }
} // IWebSocketControl


// type: Windows.Networking.Sockets.IWebSocketControl2
// interface type
open class IWebSocketControl2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x79c3be03, Data2: 0xf2ca, Data3 : 0x461e, Data4 : (0xaf, 0x4e, 0x96, 0x65, 0xbc, 0x2d, 0x06, 0x20)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Windows.Security.Cryptography.Certificates.ChainValidationResult> get_IgnorableServerCertificateErrors()
    private func _n_get_IgnorableServerCertificateErrors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketControl2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IgnorableServerCertificateErrors(pThis, __presult))
        }
    }
    public func get_IgnorableServerCertificateErrors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>> = nil;
        try self._n_get_IgnorableServerCertificateErrors(&__result);
        return ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult(consuming: __result);
    }
    public var IgnorableServerCertificateErrors : Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
            return try get_IgnorableServerCertificateErrors();
        }
    }
} // IWebSocketControl2


// type: Windows.Networking.Sockets.IWebSocketErrorStatics
// interface type
open class IWebSocketErrorStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x27cdf35b, Data2: 0x1f61, Data3 : 0x4709, Data4 : (0x8e, 0x02, 0x61, 0x28, 0x3a, 0xda, 0x4e, 0x9d)) }
    // Windows.Web.WebErrorStatus GetStatus(System.Int32)
    private func _n_GetStatus(_ hresult : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CWeb_CWebErrorStatus>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketErrorStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetStatus(pThis, hresult, __presult))
        }
    }
    public func GetStatus(hresult : Swift.Int32) throws -> Windows.Web.WebErrorStatus {
        var __result : _q_CWindows_CWeb_CWebErrorStatus = _q_CWindows_CWeb_CWebErrorStatus_Unknown;
        try self._n_GetStatus(hresult, &__result);
        return __result;
    }
} // IWebSocketErrorStatics


// type: Windows.Networking.Sockets.IWebSocketInformation
// interface type
open class IWebSocketInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5e01e316, Data2: 0xc92a, Data3 : 0x47a5, Data4 : (0xb2, 0x5f, 0x07, 0x84, 0x76, 0x39, 0xd1, 0x81)) }
    // [IsSpecialName] Windows.Networking.HostName get_LocalAddress()
    private func _n_get_LocalAddress(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocalAddress(pThis, __presult))
        }
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.IHostName> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CIHostName>> = nil;
        try self._n_get_LocalAddress(&__result);
        return Windows.Networking.IHostName(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.BandwidthStatistics get_BandwidthStatistics()
    private func _n_get_BandwidthStatistics(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CBandwidthStatistics>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BandwidthStatistics(pThis, __presult))
        }
    }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        var __result : _q_CWindows_CNetworking_CSockets_CBandwidthStatistics = _q_CWindows_CNetworking_CSockets_CBandwidthStatistics(OutboundBitsPerSecond: 0, InboundBitsPerSecond: 0, OutboundBitsPerSecondInstability: 0, InboundBitsPerSecondInstability: 0, OutboundBandwidthPeaked: 0, InboundBandwidthPeaked: 0);
        try self._n_get_BandwidthStatistics(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Protocol()
    private func _n_get_Protocol(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Protocol(pThis, __presult))
        }
    }
    public func get_Protocol() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Protocol(&__result);
        return Swift.String(from: __result);
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
            return try get_BandwidthStatistics();
        }
    }
    public var LocalAddress : Optional<Windows.Networking.IHostName> {
        get throws {
            return try get_LocalAddress();
        }
    }
    public var Protocol_ : Swift.String {
        get throws {
            return try get_Protocol();
        }
    }
} // IWebSocketInformation


// type: Windows.Networking.Sockets.IWebSocketInformation2
// interface type
open class IWebSocketInformation2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xce1d39ce, Data2: 0xa1b7, Data3 : 0x4d43, Data4 : (0x82, 0x69, 0x8d, 0x5b, 0x98, 0x1b, 0xd4, 0x7a)) }
    // [IsSpecialName] Windows.Security.Cryptography.Certificates.Certificate get_ServerCertificate()
    private func _n_get_ServerCertificate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificate(pThis, __presult))
        }
    }
    public func get_ServerCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>> = nil;
        try self._n_get_ServerCertificate(&__result);
        return Windows.Security.Cryptography.Certificates.ICertificate(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketSslErrorSeverity get_ServerCertificateErrorSeverity()
    private func _n_get_ServerCertificateErrorSeverity(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificateErrorSeverity(pThis, __presult))
        }
    }
    public func get_ServerCertificateErrorSeverity() throws -> Windows.Networking.Sockets.SocketSslErrorSeverity {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity = _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity_None;
        try self._n_get_ServerCertificateErrorSeverity(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Security.Cryptography.Certificates.ChainValidationResult> get_ServerCertificateErrors()
    private func _n_get_ServerCertificateErrors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificateErrors(pThis, __presult))
        }
    }
    public func get_ServerCertificateErrors() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>> = nil;
        try self._n_get_ServerCertificateErrors(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Security.Cryptography.Certificates.Certificate> get_ServerIntermediateCertificates()
    private func _n_get_ServerIntermediateCertificates(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketInformation2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerIntermediateCertificates(pThis, __presult))
        }
    }
    public func get_ServerIntermediateCertificates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate>> = nil;
        try self._n_get_ServerIntermediateCertificates(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate(consuming: __result);
    }
    public var ServerCertificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        get throws {
            return try get_ServerCertificate();
        }
    }
    public var ServerCertificateErrorSeverity : Windows.Networking.Sockets.SocketSslErrorSeverity {
        get throws {
            return try get_ServerCertificateErrorSeverity();
        }
    }
    public var ServerCertificateErrors : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
            return try get_ServerCertificateErrors();
        }
    }
    public var ServerIntermediateCertificates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        get throws {
            return try get_ServerIntermediateCertificates();
        }
    }
} // IWebSocketInformation2


// type: Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs
// interface type
open class IWebSocketServerCustomValidationRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xffeffe48, Data2: 0x022a, Data3 : 0x4ab7, Data4 : (0x8b, 0x36, 0xe1, 0x0a, 0xf4, 0x64, 0x0e, 0x6b)) }
    // [IsSpecialName] Windows.Security.Cryptography.Certificates.Certificate get_ServerCertificate()
    private func _n_get_ServerCertificate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificate(pThis, __presult))
        }
    }
    public func get_ServerCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCryptography_CCertificates_CICertificate>> = nil;
        try self._n_get_ServerCertificate(&__result);
        return Windows.Security.Cryptography.Certificates.ICertificate(consuming: __result);
    }
    // [IsSpecialName] Windows.Networking.Sockets.SocketSslErrorSeverity get_ServerCertificateErrorSeverity()
    private func _n_get_ServerCertificateErrorSeverity(_ __presult: UnsafeMutablePointer<_q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificateErrorSeverity(pThis, __presult))
        }
    }
    public func get_ServerCertificateErrorSeverity() throws -> Windows.Networking.Sockets.SocketSslErrorSeverity {
        var __result : _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity = _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity_None;
        try self._n_get_ServerCertificateErrorSeverity(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Security.Cryptography.Certificates.ChainValidationResult> get_ServerCertificateErrors()
    private func _n_get_ServerCertificateErrors(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerCertificateErrors(pThis, __presult))
        }
    }
    public func get_ServerCertificateErrors() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult>> = nil;
        try self._n_get_ServerCertificateErrors(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Windows.Security.Cryptography.Certificates.Certificate> get_ServerIntermediateCertificates()
    private func _n_get_ServerIntermediateCertificates(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ServerIntermediateCertificates(pThis, __presult))
        }
    }
    public func get_ServerIntermediateCertificates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate>> = nil;
        try self._n_get_ServerIntermediateCertificates(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate(consuming: __result);
    }
    // void Reject()
    private func _n_Reject() throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Reject(pThis))
        }
    }
    public func Reject() throws -> Void {
        try self._n_Reject();
    }
    // Windows.Foundation.Deferral GetDeferral()
    private func _n_GetDeferral(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIDeferral>>>?) throws {
        return try perform(as: _q_CWindows_CNetworking_CSockets_CIWebSocketServerCustomValidationRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, __presult))
        }
    }
    public func GetDeferral() throws -> Optional<Windows.Foundation.IDeferral> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIDeferral>> = nil;
        try self._n_GetDeferral(&__result);
        return Windows.Foundation.IDeferral(consuming: __result);
    }
    public var ServerCertificate : Optional<Windows.Security.Cryptography.Certificates.ICertificate> {
        get throws {
            return try get_ServerCertificate();
        }
    }
    public var ServerCertificateErrorSeverity : Windows.Networking.Sockets.SocketSslErrorSeverity {
        get throws {
            return try get_ServerCertificateErrorSeverity();
        }
    }
    public var ServerCertificateErrors : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
            return try get_ServerCertificateErrors();
        }
    }
    public var ServerIntermediateCertificates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        get throws {
            return try get_ServerIntermediateCertificates();
        }
    }
} // IWebSocketServerCustomValidationRequestedEventArgs


// type: Windows.Networking.Sockets.MessageWebSocket
// runtime class
public class MessageWebSocket
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IMessageWebSocket;
    public init(plok: Windows.Networking.Sockets.IMessageWebSocket?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IMessageWebSocket { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Sockets.MessageWebSocket")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.MessageWebSocketControl> {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.MessageWebSocketControl(plok: _ifc.get_Control());
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.MessageWebSocketInformation> {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.MessageWebSocketInformation(plok: _ifc.get_Information());
    }
    public func add_MessageReceived(eventHandler : @escaping (Optional<Windows.Networking.Sockets.MessageWebSocket>, Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket = try _self.QueryInterface();
        return try _ifc.add_MessageReceived(eventHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_MessageReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket = try _self.QueryInterface();
        return try _ifc.remove_MessageReceived(eventCookie: eventCookie);
    }
    public var Control : Optional<Windows.Networking.Sockets.MessageWebSocketControl> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.MessageWebSocketControl(plok: _ifc.Control);
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.MessageWebSocketInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.MessageWebSocketInformation(plok: _ifc.Information);
        }
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.get_OutputStream();
    }
    public func ConnectAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.ConnectAsync(uri: uri!.Interface());
    }
    public func Connect(uri : Optional<Windows.Foundation.Uri>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetRequestHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(headerName: headerName, headerValue: headerValue);
    }
    public func add_Closed(eventHandler : @escaping (Optional<Windows.Networking.Sockets.IWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.add_Closed(eventHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_Closed(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.remove_Closed(eventCookie: eventCookie);
    }
    public func Close(code : Swift.UInt16, reason : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.CloseWithStatus(code: code, reason: reason);
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.OutputStream;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func add_ServerCustomValidationRequested(eventHandler : @escaping (Optional<Windows.Networking.Sockets.MessageWebSocket>, Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket2 = try _self.QueryInterface();
        return try _ifc.add_ServerCustomValidationRequested(eventHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_ServerCustomValidationRequested(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket2 = try _self.QueryInterface();
        return try _ifc.remove_ServerCustomValidationRequested(eventCookie: eventCookie);
    }
    public func SendNonfinalFrameAsync(data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2_UINT32_UINT32> {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket3 = try _self.QueryInterface();
        return try _ifc.SendNonfinalFrameAsync(data: data);
    }
    public func SendNonfinalFrame(data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SendNonfinalFrameAsync(data: data)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SendFinalFrameAsync(data : Optional<Windows.Storage.Streams.IBuffer>) throws -> Optional<ClosedGenerics.IAsyncOperationWithProgress_2_UINT32_UINT32> {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocket3 = try _self.QueryInterface();
        return try _ifc.SendFinalFrameAsync(data: data);
    }
    public func SendFinalFrame(data : Optional<Windows.Storage.Streams.IBuffer>) async throws -> Swift.UInt32 {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SendFinalFrameAsync(data: data)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Networking.Sockets.MessageWebSocketControl
// runtime class
public class MessageWebSocketControl
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IMessageWebSocketControl;
    public init(plok: Windows.Networking.Sockets.IMessageWebSocketControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IMessageWebSocketControl { return _self; }
    public func get_MaxMessageSize() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_MaxMessageSize();
    }
    public func put_MaxMessageSize(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_MaxMessageSize(value: value);
    }
    public func get_MessageType() throws -> Windows.Networking.Sockets.SocketMessageType {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_MessageType();
    }
    public func put_MessageType(value : Windows.Networking.Sockets.SocketMessageType) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_MessageType(value: value);
    }
    public var MaxMessageSize : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.MaxMessageSize;
        }
    }
    public var MessageType : Windows.Networking.Sockets.SocketMessageType {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.MessageType;
        }
    }
    public func get_OutboundBufferSizeInBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_OutboundBufferSizeInBytes();
    }
    public func put_OutboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_OutboundBufferSizeInBytes(value: value);
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ServerCredential());
    }
    public func put_ServerCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_ServerCredential(value: value!.Interface());
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ProxyCredential());
    }
    public func put_ProxyCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_ProxyCredential(value: value!.Interface());
    }
    public func get_SupportedProtocols() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_SupportedProtocols();
    }
    public var OutboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.OutboundBufferSizeInBytes;
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ProxyCredential);
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ServerCredential);
        }
    }
    public var SupportedProtocols : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.SupportedProtocols;
        }
    }
    public func get_IgnorableServerCertificateErrors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_IgnorableServerCertificateErrors();
    }
    public var IgnorableServerCertificateErrors : Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.IgnorableServerCertificateErrors;
        }
    }
    public func get_DesiredUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_DesiredUnsolicitedPongInterval();
    }
    public func put_DesiredUnsolicitedPongInterval(value : Windows.Foundation.TimeSpan) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.put_DesiredUnsolicitedPongInterval(value: value);
    }
    public func get_ActualUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_ActualUnsolicitedPongInterval();
    }
    public func get_ReceiveMode() throws -> Windows.Networking.Sockets.MessageWebSocketReceiveMode {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_ReceiveMode();
    }
    public func put_ReceiveMode(value : Windows.Networking.Sockets.MessageWebSocketReceiveMode) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.put_ReceiveMode(value: value);
    }
    public func get_ClientCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_ClientCertificate());
    }
    public func put_ClientCertificate(value : Optional<Windows.Security.Cryptography.Certificates.Certificate>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.put_ClientCertificate(value: value!.Interface());
    }
    public var ActualUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.ActualUnsolicitedPongInterval;
        }
    }
    public var ClientCertificate : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.ClientCertificate);
        }
    }
    public var DesiredUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.DesiredUnsolicitedPongInterval;
        }
    }
    public var ReceiveMode : Windows.Networking.Sockets.MessageWebSocketReceiveMode {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.ReceiveMode;
        }
    }
}

// type: Windows.Networking.Sockets.MessageWebSocketInformation
// runtime class
public class MessageWebSocketInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IWebSocketInformation;
    public init(plok: Windows.Networking.Sockets.IWebSocketInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IWebSocketInformation { return _self; }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalAddress());
    }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_BandwidthStatistics();
    }
    public func get_Protocol() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_Protocol();
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.BandwidthStatistics;
        }
    }
    public var LocalAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalAddress);
        }
    }
    public var Protocol_ : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.Protocol_;
        }
    }
    public func get_ServerCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_ServerCertificate());
    }
    public func get_ServerCertificateErrorSeverity() throws -> Windows.Networking.Sockets.SocketSslErrorSeverity {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrorSeverity();
    }
    public func get_ServerCertificateErrors() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrors();
    }
    public func get_ServerIntermediateCertificates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerIntermediateCertificates();
    }
    public var ServerCertificate : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.ServerCertificate);
        }
    }
    public var ServerCertificateErrorSeverity : Windows.Networking.Sockets.SocketSslErrorSeverity {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrorSeverity;
        }
    }
    public var ServerCertificateErrors : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrors;
        }
    }
    public var ServerIntermediateCertificates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerIntermediateCertificates;
        }
    }
}

// type: Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs
// runtime class
public class MessageWebSocketMessageReceivedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs;
    public init(plok: Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs { return _self; }
    public func get_MessageType() throws -> Windows.Networking.Sockets.SocketMessageType {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.get_MessageType();
    }
    public func GetDataReader() throws -> Optional<Windows.Storage.Streams.DataReader> {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Storage.Streams.DataReader(plok: _ifc.GetDataReader());
    }
    public func GetDataStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.GetDataStream();
    }
    public var MessageType : Windows.Networking.Sockets.SocketMessageType {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs = try _self.QueryInterface();
        return try _ifc.MessageType;
        }
    }
    public func get_IsMessageComplete() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs2 = try _self.QueryInterface();
        return try _ifc.get_IsMessageComplete();
    }
    public var IsMessageComplete : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IMessageWebSocketMessageReceivedEventArgs2 = try _self.QueryInterface();
        return try _ifc.IsMessageComplete;
        }
    }
}

// type: Windows.Networking.Sockets.MessageWebSocketReceiveMode
// enum type
public typealias MessageWebSocketReceiveMode = _q_CWindows_CNetworking_CSockets_CMessageWebSocketReceiveMode;

// type: Windows.Networking.Sockets.RoundTripTimeStatistics
// struct type
public typealias RoundTripTimeStatistics = _q_CWindows_CNetworking_CSockets_CRoundTripTimeStatistics;

// type: Windows.Networking.Sockets.ServerMessageWebSocket
// runtime class
public class ServerMessageWebSocket
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IServerMessageWebSocket;
    public init(plok: Windows.Networking.Sockets.IServerMessageWebSocket?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IServerMessageWebSocket { return _self; }
    public func add_MessageReceived(value : @escaping (Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, Optional<Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try _ifc.add_MessageReceived(value: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CMessageWebSocketMessageReceivedEventArgs(cb: value).Interface());
    }
    public func remove_MessageReceived(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try _ifc.remove_MessageReceived(token: token);
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.ServerMessageWebSocketControl> {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.ServerMessageWebSocketControl(plok: _ifc.get_Control());
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.ServerMessageWebSocketInformation> {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.ServerMessageWebSocketInformation(plok: _ifc.get_Information());
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try _ifc.get_OutputStream();
    }
    public func add_Closed(value : @escaping (Optional<Windows.Networking.Sockets.ServerMessageWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try _ifc.add_Closed(value: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerMessageWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(cb: value).Interface());
    }
    public func remove_Closed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try _ifc.remove_Closed(token: token);
    }
    public func Close(code : Swift.UInt16, reason : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try _ifc.CloseWithStatus(code: code, reason: reason);
    }
    public var Control : Optional<Windows.Networking.Sockets.ServerMessageWebSocketControl> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.ServerMessageWebSocketControl(plok: _ifc.Control);
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.ServerMessageWebSocketInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.ServerMessageWebSocketInformation(plok: _ifc.Information);
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocket = try _self.QueryInterface();
        return try _ifc.OutputStream;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Windows.Networking.Sockets.ServerMessageWebSocketControl
// runtime class
public class ServerMessageWebSocketControl
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IServerMessageWebSocketControl;
    public init(plok: Windows.Networking.Sockets.IServerMessageWebSocketControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IServerMessageWebSocketControl { return _self; }
    public func get_MessageType() throws -> Windows.Networking.Sockets.SocketMessageType {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_MessageType();
    }
    public func put_MessageType(value : Windows.Networking.Sockets.SocketMessageType) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_MessageType(value: value);
    }
    public var MessageType : Windows.Networking.Sockets.SocketMessageType {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketControl = try _self.QueryInterface();
        return try _ifc.MessageType;
        }
    }
}

// type: Windows.Networking.Sockets.ServerMessageWebSocketInformation
// runtime class
public class ServerMessageWebSocketInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IServerMessageWebSocketInformation;
    public init(plok: Windows.Networking.Sockets.IServerMessageWebSocketInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IServerMessageWebSocketInformation { return _self; }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_BandwidthStatistics();
    }
    public func get_Protocol() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_Protocol();
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalAddress());
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketInformation = try _self.QueryInterface();
        return try _ifc.BandwidthStatistics;
        }
    }
    public var LocalAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalAddress);
        }
    }
    public var Protocol_ : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerMessageWebSocketInformation = try _self.QueryInterface();
        return try _ifc.Protocol_;
        }
    }
}

// type: Windows.Networking.Sockets.ServerStreamWebSocket
// runtime class
public class ServerStreamWebSocket
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IServerStreamWebSocket;
    public init(plok: Windows.Networking.Sockets.IServerStreamWebSocket?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IServerStreamWebSocket { return _self; }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.ServerStreamWebSocketInformation> {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.ServerStreamWebSocketInformation(plok: _ifc.get_Information());
    }
    public func get_InputStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try _ifc.get_InputStream();
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try _ifc.get_OutputStream();
    }
    public func add_Closed(value : @escaping (Optional<Windows.Networking.Sockets.ServerStreamWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try _ifc.add_Closed(value: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CServerStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(cb: value).Interface());
    }
    public func remove_Closed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try _ifc.remove_Closed(token: token);
    }
    public func Close(code : Swift.UInt16, reason : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try _ifc.CloseWithStatus(code: code, reason: reason);
    }
    public var Information : Optional<Windows.Networking.Sockets.ServerStreamWebSocketInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.ServerStreamWebSocketInformation(plok: _ifc.Information);
        }
    }
    public var InputStream : Optional<Windows.Storage.Streams.IInputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try _ifc.InputStream;
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocket = try _self.QueryInterface();
        return try _ifc.OutputStream;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Windows.Networking.Sockets.ServerStreamWebSocketInformation
// runtime class
public class ServerStreamWebSocketInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IServerStreamWebSocketInformation;
    public init(plok: Windows.Networking.Sockets.IServerStreamWebSocketInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IServerStreamWebSocketInformation { return _self; }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_BandwidthStatistics();
    }
    public func get_Protocol() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_Protocol();
    }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalAddress());
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocketInformation = try _self.QueryInterface();
        return try _ifc.BandwidthStatistics;
        }
    }
    public var LocalAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalAddress);
        }
    }
    public var Protocol_ : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IServerStreamWebSocketInformation = try _self.QueryInterface();
        return try _ifc.Protocol_;
        }
    }
}

// type: Windows.Networking.Sockets.SocketActivityConnectedStandbyAction
// enum type
public typealias SocketActivityConnectedStandbyAction = _q_CWindows_CNetworking_CSockets_CSocketActivityConnectedStandbyAction;

// type: Windows.Networking.Sockets.SocketActivityContext
// runtime class
public class SocketActivityContext
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.ISocketActivityContext;
    public init(plok: Windows.Networking.Sockets.ISocketActivityContext?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.ISocketActivityContext { return _self; }
    public init(data : Optional<Windows.Storage.Streams.IBuffer>) throws {
        let _af : ISocketActivityContextFactory = try RoGetActivationFactory("Windows.Networking.Sockets.SocketActivityContext");
        _self = try _af.Create(data: data)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Data() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.Sockets.ISocketActivityContext = try _self.QueryInterface();
        return try _ifc.get_Data();
    }
    public var Data : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityContext = try _self.QueryInterface();
        return try _ifc.Data;
        }
    }
}

// type: Windows.Networking.Sockets.SocketActivityInformation
// runtime class
public class SocketActivityInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.ISocketActivityInformation;
    public init(plok: Windows.Networking.Sockets.ISocketActivityInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.ISocketActivityInformation { return _self; }
    private struct _ISocketActivityInformationStatics {
        static var x : ISocketActivityInformationStatics =
            try! RoGetActivationFactory("Windows.Networking.Sockets.SocketActivityInformation")
    }
    public static var SocketActivityInformationStatics : ISocketActivityInformationStatics {
        _ISocketActivityInformationStatics.x
    }
    public static func get_AllSockets() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation> {
        return try SocketActivityInformationStatics.get_AllSockets();
    }
    public static var AllSockets : Optional<ClosedGenerics.IMapView_2_HSTRING__q_CWindows_CNetworking_CSockets_CSocketActivityInformation> {
        get throws {
        return try SocketActivityInformationStatics.AllSockets;
        }
    }
    public func get_TaskId() throws -> GUID {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try _ifc.get_TaskId();
    }
    public func get_Id() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try _ifc.get_Id();
    }
    public func get_SocketKind() throws -> Windows.Networking.Sockets.SocketActivityKind {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try _ifc.get_SocketKind();
    }
    public func get_Context() throws -> Optional<Windows.Networking.Sockets.SocketActivityContext> {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.SocketActivityContext(plok: _ifc.get_Context());
    }
    public func get_DatagramSocket() throws -> Optional<Windows.Networking.Sockets.DatagramSocket> {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.DatagramSocket(plok: _ifc.get_DatagramSocket());
    }
    public func get_StreamSocket() throws -> Optional<Windows.Networking.Sockets.StreamSocket> {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocket(plok: _ifc.get_StreamSocket());
    }
    public func get_StreamSocketListener() throws -> Optional<Windows.Networking.Sockets.StreamSocketListener> {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketListener(plok: _ifc.get_StreamSocketListener());
    }
    public var Context : Optional<Windows.Networking.Sockets.SocketActivityContext> {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.SocketActivityContext(plok: _ifc.Context);
        }
    }
    public var DatagramSocket : Optional<Windows.Networking.Sockets.DatagramSocket> {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.DatagramSocket(plok: _ifc.DatagramSocket);
        }
    }
    public var Id : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try _ifc.Id;
        }
    }
    public var SocketKind : Windows.Networking.Sockets.SocketActivityKind {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try _ifc.SocketKind;
        }
    }
    public var StreamSocket : Optional<Windows.Networking.Sockets.StreamSocket> {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocket(plok: _ifc.StreamSocket);
        }
    }
    public var StreamSocketListener : Optional<Windows.Networking.Sockets.StreamSocketListener> {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketListener(plok: _ifc.StreamSocketListener);
        }
    }
    public var TaskId : GUID {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityInformation = try _self.QueryInterface();
        return try _ifc.TaskId;
        }
    }
}

// type: Windows.Networking.Sockets.SocketActivityKind
// enum type
public typealias SocketActivityKind = _q_CWindows_CNetworking_CSockets_CSocketActivityKind;

// type: Windows.Networking.Sockets.SocketActivityTriggerDetails
// runtime class
public class SocketActivityTriggerDetails
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.ISocketActivityTriggerDetails;
    public init(plok: Windows.Networking.Sockets.ISocketActivityTriggerDetails?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.ISocketActivityTriggerDetails { return _self; }
    public func get_Reason() throws -> Windows.Networking.Sockets.SocketActivityTriggerReason {
        let _ifc : Windows.Networking.Sockets.ISocketActivityTriggerDetails = try _self.QueryInterface();
        return try _ifc.get_Reason();
    }
    public func get_SocketInformation() throws -> Optional<Windows.Networking.Sockets.SocketActivityInformation> {
        let _ifc : Windows.Networking.Sockets.ISocketActivityTriggerDetails = try _self.QueryInterface();
        return try Windows.Networking.Sockets.SocketActivityInformation(plok: _ifc.get_SocketInformation());
    }
    public var Reason : Windows.Networking.Sockets.SocketActivityTriggerReason {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityTriggerDetails = try _self.QueryInterface();
        return try _ifc.Reason;
        }
    }
    public var SocketInformation : Optional<Windows.Networking.Sockets.SocketActivityInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.ISocketActivityTriggerDetails = try _self.QueryInterface();
        return try Windows.Networking.Sockets.SocketActivityInformation(plok: _ifc.SocketInformation);
        }
    }
}

// type: Windows.Networking.Sockets.SocketActivityTriggerReason
// enum type
public typealias SocketActivityTriggerReason = _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason;

// type: Windows.Networking.Sockets.SocketError
// static class
public class SocketError
{
    private struct _ISocketErrorStatics {
        static var x : ISocketErrorStatics =
            try! RoGetActivationFactory("Windows.Networking.Sockets.SocketError")
    }
    public static var SocketErrorStatics : ISocketErrorStatics {
        _ISocketErrorStatics.x
    }
    public static func GetStatus(hresult : Swift.Int32) throws -> Windows.Networking.Sockets.SocketErrorStatus {
        return try SocketErrorStatics.GetStatus(hresult: hresult);
    }
}

// type: Windows.Networking.Sockets.SocketErrorStatus
// enum type
public typealias SocketErrorStatus = _q_CWindows_CNetworking_CSockets_CSocketErrorStatus;

// type: Windows.Networking.Sockets.SocketMessageType
// enum type
public typealias SocketMessageType = _q_CWindows_CNetworking_CSockets_CSocketMessageType;

// type: Windows.Networking.Sockets.SocketProtectionLevel
// enum type
public typealias SocketProtectionLevel = _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel;

// type: Windows.Networking.Sockets.SocketQualityOfService
// enum type
public typealias SocketQualityOfService = _q_CWindows_CNetworking_CSockets_CSocketQualityOfService;

// type: Windows.Networking.Sockets.SocketSslErrorSeverity
// enum type
public typealias SocketSslErrorSeverity = _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity;

// type: Windows.Networking.Sockets.StreamSocket
// runtime class
public class StreamSocket
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamSocket;
    public init(plok: Windows.Networking.Sockets.IStreamSocket?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamSocket { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Sockets.StreamSocket")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IStreamSocketStatics {
        static var x : IStreamSocketStatics =
            try! RoGetActivationFactory("Windows.Networking.Sockets.StreamSocket")
    }
    public static var StreamSocketStatics : IStreamSocketStatics {
        _IStreamSocketStatics.x
    }
    public static func GetEndpointPairsAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try StreamSocketStatics.GetEndpointPairsAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName);
    }
    public static func GetEndpointPairs(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func GetEndpointPairsAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try StreamSocketStatics.GetEndpointPairsWithSortOptionsAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName, sortOptions: sortOptions);
    }
    public static func GetEndpointPairs(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, sortOptions : Windows.Networking.HostNameSortOptions) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CNetworking_CEndpointPair> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.GetEndpointPairsAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, sortOptions: sortOptions)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.StreamSocketControl> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketControl(plok: _ifc.get_Control());
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.StreamSocketInformation> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketInformation(plok: _ifc.get_Information());
    }
    public func get_InputStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.get_InputStream();
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.get_OutputStream();
    }
    public func ConnectAsync(endpointPair : Optional<Windows.Networking.EndpointPair>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.ConnectWithEndpointPairAsync(endpointPair: endpointPair!.Interface());
    }
    public func Connect(endpointPair : Optional<Windows.Networking.EndpointPair>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(endpointPair: endpointPair)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConnectAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.ConnectAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName);
    }
    public func Connect(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConnectAsync(endpointPair : Optional<Windows.Networking.EndpointPair>, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.ConnectWithEndpointPairAndProtectionLevelAsync(endpointPair: endpointPair!.Interface(), protectionLevel: protectionLevel);
    }
    public func Connect(endpointPair : Optional<Windows.Networking.EndpointPair>, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(endpointPair: endpointPair, protectionLevel: protectionLevel)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func ConnectAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.ConnectWithProtectionLevelAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName, protectionLevel: protectionLevel);
    }
    public func Connect(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, protectionLevel: protectionLevel)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func UpgradeToSslAsync(protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, validationHostName : Optional<Windows.Networking.HostName>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.UpgradeToSslAsync(protectionLevel: protectionLevel, validationHostName: validationHostName!.Interface());
    }
    public func UpgradeToSsl(protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, validationHostName : Optional<Windows.Networking.HostName>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.UpgradeToSslAsync(protectionLevel: protectionLevel, validationHostName: validationHostName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Control : Optional<Windows.Networking.Sockets.StreamSocketControl> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketControl(plok: _ifc.Control);
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.StreamSocketInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketInformation(plok: _ifc.Information);
        }
    }
    public var InputStream : Optional<Windows.Storage.Streams.IInputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.InputStream;
        }
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocket = try _self.QueryInterface();
        return try _ifc.OutputStream;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func ConnectAsync(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket2 = try _self.QueryInterface();
        return try _ifc.ConnectWithProtectionLevelAndAdapterAsync(remoteHostName: remoteHostName!.Interface(), remoteServiceName: remoteServiceName, protectionLevel: protectionLevel, adapter: adapter!.Interface());
    }
    public func Connect(remoteHostName : Optional<Windows.Networking.HostName>, remoteServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(remoteHostName: remoteHostName, remoteServiceName: remoteServiceName, protectionLevel: protectionLevel, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CancelIOAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocket3 = try _self.QueryInterface();
        return try _ifc.CancelIOAsync();
    }
    public func CancelIO() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CancelIOAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func EnableTransferOwnership(taskId : GUID) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocket3 = try _self.QueryInterface();
        return try _ifc.EnableTransferOwnership(taskId: taskId);
    }
    public func EnableTransferOwnership(taskId : GUID, connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocket3 = try _self.QueryInterface();
        return try _ifc.EnableTransferOwnershipWithConnectedStandbyAction(taskId: taskId, connectedStandbyAction: connectedStandbyAction);
    }
    public func TransferOwnership(socketId : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocket3 = try _self.QueryInterface();
        return try _ifc.TransferOwnership(socketId: socketId);
    }
    public func TransferOwnership(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.SocketActivityContext>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocket3 = try _self.QueryInterface();
        return try _ifc.TransferOwnershipWithContext(socketId: socketId, data: data!.Interface());
    }
    public func TransferOwnership(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.SocketActivityContext>, keepAliveTime : Windows.Foundation.TimeSpan) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocket3 = try _self.QueryInterface();
        return try _ifc.TransferOwnershipWithContextAndKeepAliveTime(socketId: socketId, data: data!.Interface(), keepAliveTime: keepAliveTime);
    }
}

// type: Windows.Networking.Sockets.StreamSocketControl
// runtime class
public class StreamSocketControl
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamSocketControl;
    public init(plok: Windows.Networking.Sockets.IStreamSocketControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamSocketControl { return _self; }
    public func get_NoDelay() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.get_NoDelay();
    }
    public func put_NoDelay(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.put_NoDelay(value: value);
    }
    public func get_KeepAlive() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.get_KeepAlive();
    }
    public func put_KeepAlive(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.put_KeepAlive(value: value);
    }
    public func get_OutboundBufferSizeInBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.get_OutboundBufferSizeInBytes();
    }
    public func put_OutboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.put_OutboundBufferSizeInBytes(value: value);
    }
    public func get_QualityOfService() throws -> Windows.Networking.Sockets.SocketQualityOfService {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.get_QualityOfService();
    }
    public func put_QualityOfService(value : Windows.Networking.Sockets.SocketQualityOfService) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.put_QualityOfService(value: value);
    }
    public func get_OutboundUnicastHopLimit() throws -> Swift.UInt8 {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.get_OutboundUnicastHopLimit();
    }
    public func put_OutboundUnicastHopLimit(value : Swift.UInt8) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.put_OutboundUnicastHopLimit(value: value);
    }
    public var KeepAlive : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.KeepAlive;
        }
    }
    public var NoDelay : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.NoDelay;
        }
    }
    public var OutboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.OutboundBufferSizeInBytes;
        }
    }
    public var OutboundUnicastHopLimit : Swift.UInt8 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.OutboundUnicastHopLimit;
        }
    }
    public var QualityOfService : Windows.Networking.Sockets.SocketQualityOfService {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl = try _self.QueryInterface();
        return try _ifc.QualityOfService;
        }
    }
    public func get_IgnorableServerCertificateErrors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_IgnorableServerCertificateErrors();
    }
    public var IgnorableServerCertificateErrors : Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl2 = try _self.QueryInterface();
        return try _ifc.IgnorableServerCertificateErrors;
        }
    }
    public func get_SerializeConnectionAttempts() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl3 = try _self.QueryInterface();
        return try _ifc.get_SerializeConnectionAttempts();
    }
    public func put_SerializeConnectionAttempts(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl3 = try _self.QueryInterface();
        return try _ifc.put_SerializeConnectionAttempts(value: value);
    }
    public func get_ClientCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl3 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_ClientCertificate());
    }
    public func put_ClientCertificate(value : Optional<Windows.Security.Cryptography.Certificates.Certificate>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl3 = try _self.QueryInterface();
        return try _ifc.put_ClientCertificate(value: value!.Interface());
    }
    public var ClientCertificate : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl3 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.ClientCertificate);
        }
    }
    public var SerializeConnectionAttempts : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl3 = try _self.QueryInterface();
        return try _ifc.SerializeConnectionAttempts;
        }
    }
    public func get_MinProtectionLevel() throws -> Windows.Networking.Sockets.SocketProtectionLevel {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl4 = try _self.QueryInterface();
        return try _ifc.get_MinProtectionLevel();
    }
    public func put_MinProtectionLevel(value : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl4 = try _self.QueryInterface();
        return try _ifc.put_MinProtectionLevel(value: value);
    }
    public var MinProtectionLevel : Windows.Networking.Sockets.SocketProtectionLevel {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketControl4 = try _self.QueryInterface();
        return try _ifc.MinProtectionLevel;
        }
    }
}

// type: Windows.Networking.Sockets.StreamSocketInformation
// runtime class
public class StreamSocketInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamSocketInformation;
    public init(plok: Windows.Networking.Sockets.IStreamSocketInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamSocketInformation { return _self; }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalAddress());
    }
    public func get_LocalPort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.get_LocalPort();
    }
    public func get_RemoteHostName() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_RemoteHostName());
    }
    public func get_RemoteAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_RemoteAddress());
    }
    public func get_RemoteServiceName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.get_RemoteServiceName();
    }
    public func get_RemotePort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.get_RemotePort();
    }
    public func get_RoundTripTimeStatistics() throws -> Windows.Networking.Sockets.RoundTripTimeStatistics {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.get_RoundTripTimeStatistics();
    }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.get_BandwidthStatistics();
    }
    public func get_ProtectionLevel() throws -> Windows.Networking.Sockets.SocketProtectionLevel {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.get_ProtectionLevel();
    }
    public func get_SessionKey() throws -> Optional<Windows.Storage.Streams.IBuffer> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.get_SessionKey();
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.BandwidthStatistics;
        }
    }
    public var LocalAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalAddress);
        }
    }
    public var LocalPort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.LocalPort;
        }
    }
    public var ProtectionLevel : Windows.Networking.Sockets.SocketProtectionLevel {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.ProtectionLevel;
        }
    }
    public var RemoteAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.RemoteAddress);
        }
    }
    public var RemoteHostName : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.RemoteHostName);
        }
    }
    public var RemotePort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.RemotePort;
        }
    }
    public var RemoteServiceName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.RemoteServiceName;
        }
    }
    public var RoundTripTimeStatistics : Windows.Networking.Sockets.RoundTripTimeStatistics {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.RoundTripTimeStatistics;
        }
    }
    public var SessionKey : Optional<Windows.Storage.Streams.IBuffer> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation = try _self.QueryInterface();
        return try _ifc.SessionKey;
        }
    }
    public func get_ServerCertificateErrorSeverity() throws -> Windows.Networking.Sockets.SocketSslErrorSeverity {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrorSeverity();
    }
    public func get_ServerCertificateErrors() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrors();
    }
    public func get_ServerCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_ServerCertificate());
    }
    public func get_ServerIntermediateCertificates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerIntermediateCertificates();
    }
    public var ServerCertificate : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.ServerCertificate);
        }
    }
    public var ServerCertificateErrorSeverity : Windows.Networking.Sockets.SocketSslErrorSeverity {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrorSeverity;
        }
    }
    public var ServerCertificateErrors : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrors;
        }
    }
    public var ServerIntermediateCertificates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerIntermediateCertificates;
        }
    }
}

// type: Windows.Networking.Sockets.StreamSocketListener
// runtime class
public class StreamSocketListener
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamSocketListener;
    public init(plok: Windows.Networking.Sockets.IStreamSocketListener?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamSocketListener { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Sockets.StreamSocketListener")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.StreamSocketListenerControl> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketListenerControl(plok: _ifc.get_Control());
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.StreamSocketListenerInformation> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketListenerInformation(plok: _ifc.get_Information());
    }
    public func BindServiceNameAsync(localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try _ifc.BindServiceNameAsync(localServiceName: localServiceName);
    }
    public func BindServiceName(localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAsync(localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func BindEndpointAsync(localHostName : Optional<Windows.Networking.HostName>, localServiceName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try _ifc.BindEndpointAsync(localHostName: localHostName!.Interface(), localServiceName: localServiceName);
    }
    public func BindEndpoint(localHostName : Optional<Windows.Networking.HostName>, localServiceName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindEndpointAsync(localHostName: localHostName, localServiceName: localServiceName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func add_ConnectionReceived(eventHandler : @escaping (Optional<Windows.Networking.Sockets.StreamSocketListener>, Optional<Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try _ifc.add_ConnectionReceived(eventHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamSocketListener__q_CWindows_CNetworking_CSockets_CStreamSocketListenerConnectionReceivedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_ConnectionReceived(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try _ifc.remove_ConnectionReceived(eventCookie: eventCookie);
    }
    public var Control : Optional<Windows.Networking.Sockets.StreamSocketListenerControl> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketListenerControl(plok: _ifc.Control);
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.StreamSocketListenerInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocketListenerInformation(plok: _ifc.Information);
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func BindServiceNameAsync(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener2 = try _self.QueryInterface();
        return try _ifc.BindServiceNameWithProtectionLevelAsync(localServiceName: localServiceName, protectionLevel: protectionLevel);
    }
    public func BindServiceName(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAsync(localServiceName: localServiceName, protectionLevel: protectionLevel)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func BindServiceNameAsync(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener2 = try _self.QueryInterface();
        return try _ifc.BindServiceNameWithProtectionLevelAndAdapterAsync(localServiceName: localServiceName, protectionLevel: protectionLevel, adapter: adapter!.Interface());
    }
    public func BindServiceName(localServiceName : Swift.String, protectionLevel : Windows.Networking.Sockets.SocketProtectionLevel, adapter : Optional<Windows.Networking.Connectivity.NetworkAdapter>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.BindServiceNameAsync(localServiceName: localServiceName, protectionLevel: protectionLevel, adapter: adapter)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CancelIOAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener3 = try _self.QueryInterface();
        return try _ifc.CancelIOAsync();
    }
    public func CancelIO() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CancelIOAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func EnableTransferOwnership(taskId : GUID) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener3 = try _self.QueryInterface();
        return try _ifc.EnableTransferOwnership(taskId: taskId);
    }
    public func EnableTransferOwnership(taskId : GUID, connectedStandbyAction : Windows.Networking.Sockets.SocketActivityConnectedStandbyAction) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener3 = try _self.QueryInterface();
        return try _ifc.EnableTransferOwnershipWithConnectedStandbyAction(taskId: taskId, connectedStandbyAction: connectedStandbyAction);
    }
    public func TransferOwnership(socketId : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener3 = try _self.QueryInterface();
        return try _ifc.TransferOwnership(socketId: socketId);
    }
    public func TransferOwnership(socketId : Swift.String, data : Optional<Windows.Networking.Sockets.SocketActivityContext>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListener3 = try _self.QueryInterface();
        return try _ifc.TransferOwnershipWithContext(socketId: socketId, data: data!.Interface());
    }
}

// type: Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs
// runtime class
public class StreamSocketListenerConnectionReceivedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs;
    public init(plok: Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs { return _self; }
    public func get_Socket() throws -> Optional<Windows.Networking.Sockets.StreamSocket> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocket(plok: _ifc.get_Socket());
    }
    public var Socket : Optional<Windows.Networking.Sockets.StreamSocket> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerConnectionReceivedEventArgs = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamSocket(plok: _ifc.Socket);
        }
    }
}

// type: Windows.Networking.Sockets.StreamSocketListenerControl
// runtime class
public class StreamSocketListenerControl
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamSocketListenerControl;
    public init(plok: Windows.Networking.Sockets.IStreamSocketListenerControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamSocketListenerControl { return _self; }
    public func get_QualityOfService() throws -> Windows.Networking.Sockets.SocketQualityOfService {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl = try _self.QueryInterface();
        return try _ifc.get_QualityOfService();
    }
    public func put_QualityOfService(value : Windows.Networking.Sockets.SocketQualityOfService) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl = try _self.QueryInterface();
        return try _ifc.put_QualityOfService(value: value);
    }
    public var QualityOfService : Windows.Networking.Sockets.SocketQualityOfService {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl = try _self.QueryInterface();
        return try _ifc.QualityOfService;
        }
    }
    public func get_NoDelay() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.get_NoDelay();
    }
    public func put_NoDelay(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.put_NoDelay(value: value);
    }
    public func get_KeepAlive() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.get_KeepAlive();
    }
    public func put_KeepAlive(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.put_KeepAlive(value: value);
    }
    public func get_OutboundBufferSizeInBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.get_OutboundBufferSizeInBytes();
    }
    public func put_OutboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.put_OutboundBufferSizeInBytes(value: value);
    }
    public func get_OutboundUnicastHopLimit() throws -> Swift.UInt8 {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.get_OutboundUnicastHopLimit();
    }
    public func put_OutboundUnicastHopLimit(value : Swift.UInt8) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.put_OutboundUnicastHopLimit(value: value);
    }
    public var KeepAlive : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.KeepAlive;
        }
    }
    public var NoDelay : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.NoDelay;
        }
    }
    public var OutboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.OutboundBufferSizeInBytes;
        }
    }
    public var OutboundUnicastHopLimit : Swift.UInt8 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerControl2 = try _self.QueryInterface();
        return try _ifc.OutboundUnicastHopLimit;
        }
    }
}

// type: Windows.Networking.Sockets.StreamSocketListenerInformation
// runtime class
public class StreamSocketListenerInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamSocketListenerInformation;
    public init(plok: Windows.Networking.Sockets.IStreamSocketListenerInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamSocketListenerInformation { return _self; }
    public func get_LocalPort() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerInformation = try _self.QueryInterface();
        return try _ifc.get_LocalPort();
    }
    public var LocalPort : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamSocketListenerInformation = try _self.QueryInterface();
        return try _ifc.LocalPort;
        }
    }
}

// type: Windows.Networking.Sockets.StreamWebSocket
// runtime class
public class StreamWebSocket
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamWebSocket;
    public init(plok: Windows.Networking.Sockets.IStreamWebSocket?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamWebSocket { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Sockets.StreamWebSocket")
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Control() throws -> Optional<Windows.Networking.Sockets.StreamWebSocketControl> {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamWebSocketControl(plok: _ifc.get_Control());
    }
    public func get_Information() throws -> Optional<Windows.Networking.Sockets.StreamWebSocketInformation> {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamWebSocketInformation(plok: _ifc.get_Information());
    }
    public func get_InputStream() throws -> Optional<Windows.Storage.Streams.IInputStream> {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket = try _self.QueryInterface();
        return try _ifc.get_InputStream();
    }
    public var Control : Optional<Windows.Networking.Sockets.StreamWebSocketControl> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamWebSocketControl(plok: _ifc.Control);
        }
    }
    public var Information : Optional<Windows.Networking.Sockets.StreamWebSocketInformation> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket = try _self.QueryInterface();
        return try Windows.Networking.Sockets.StreamWebSocketInformation(plok: _ifc.Information);
        }
    }
    public var InputStream : Optional<Windows.Storage.Streams.IInputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket = try _self.QueryInterface();
        return try _ifc.InputStream;
        }
    }
    public func get_OutputStream() throws -> Optional<Windows.Storage.Streams.IOutputStream> {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.get_OutputStream();
    }
    public func ConnectAsync(uri : Optional<Windows.Foundation.Uri>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.ConnectAsync(uri: uri!.Interface());
    }
    public func Connect(uri : Optional<Windows.Foundation.Uri>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.ConnectAsync(uri: uri)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func SetRequestHeader(headerName : Swift.String, headerValue : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.SetRequestHeader(headerName: headerName, headerValue: headerValue);
    }
    public func add_Closed(eventHandler : @escaping (Optional<Windows.Networking.Sockets.IWebSocket>, Optional<Windows.Networking.Sockets.WebSocketClosedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.add_Closed(eventHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CIWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketClosedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_Closed(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.remove_Closed(eventCookie: eventCookie);
    }
    public func Close(code : Swift.UInt16, reason : Swift.String) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.CloseWithStatus(code: code, reason: reason);
    }
    public var OutputStream : Optional<Windows.Storage.Streams.IOutputStream> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocket = try _self.QueryInterface();
        return try _ifc.OutputStream;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func add_ServerCustomValidationRequested(eventHandler : @escaping (Optional<Windows.Networking.Sockets.StreamWebSocket>, Optional<Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket2 = try _self.QueryInterface();
        return try _ifc.add_ServerCustomValidationRequested(eventHandler: ClosedGenerics.TypedEventHandler_2__q_CWindows_CNetworking_CSockets_CStreamWebSocket__q_CWindows_CNetworking_CSockets_CWebSocketServerCustomValidationRequestedEventArgs(cb: eventHandler).Interface());
    }
    public func remove_ServerCustomValidationRequested(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocket2 = try _self.QueryInterface();
        return try _ifc.remove_ServerCustomValidationRequested(eventCookie: eventCookie);
    }
}

// type: Windows.Networking.Sockets.StreamWebSocketControl
// runtime class
public class StreamWebSocketControl
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IStreamWebSocketControl;
    public init(plok: Windows.Networking.Sockets.IStreamWebSocketControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IStreamWebSocketControl { return _self; }
    public func get_NoDelay() throws -> boolean {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_NoDelay();
    }
    public func put_NoDelay(value : boolean) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_NoDelay(value: value);
    }
    public var NoDelay : boolean {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl = try _self.QueryInterface();
        return try _ifc.NoDelay;
        }
    }
    public func get_OutboundBufferSizeInBytes() throws -> Swift.UInt32 {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_OutboundBufferSizeInBytes();
    }
    public func put_OutboundBufferSizeInBytes(value : Swift.UInt32) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_OutboundBufferSizeInBytes(value: value);
    }
    public func get_ServerCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ServerCredential());
    }
    public func put_ServerCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_ServerCredential(value: value!.Interface());
    }
    public func get_ProxyCredential() throws -> Optional<Windows.Security.Credentials.PasswordCredential> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.get_ProxyCredential());
    }
    public func put_ProxyCredential(value : Optional<Windows.Security.Credentials.PasswordCredential>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.put_ProxyCredential(value: value!.Interface());
    }
    public func get_SupportedProtocols() throws -> Optional<ClosedGenerics.IVector_1_HSTRING> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.get_SupportedProtocols();
    }
    public var OutboundBufferSizeInBytes : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.OutboundBufferSizeInBytes;
        }
    }
    public var ProxyCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ProxyCredential);
        }
    }
    public var ServerCredential : Optional<Windows.Security.Credentials.PasswordCredential> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try Windows.Security.Credentials.PasswordCredential(plok: _ifc.ServerCredential);
        }
    }
    public var SupportedProtocols : Optional<ClosedGenerics.IVector_1_HSTRING> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl = try _self.QueryInterface();
        return try _ifc.SupportedProtocols;
        }
    }
    public func get_IgnorableServerCertificateErrors() throws -> Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_IgnorableServerCertificateErrors();
    }
    public var IgnorableServerCertificateErrors : Optional<ClosedGenerics.IVector_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.IgnorableServerCertificateErrors;
        }
    }
    public func get_DesiredUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_DesiredUnsolicitedPongInterval();
    }
    public func put_DesiredUnsolicitedPongInterval(value : Windows.Foundation.TimeSpan) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.put_DesiredUnsolicitedPongInterval(value: value);
    }
    public func get_ActualUnsolicitedPongInterval() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.get_ActualUnsolicitedPongInterval();
    }
    public func get_ClientCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_ClientCertificate());
    }
    public func put_ClientCertificate(value : Optional<Windows.Security.Cryptography.Certificates.Certificate>) throws -> Void {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.put_ClientCertificate(value: value!.Interface());
    }
    public var ActualUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.ActualUnsolicitedPongInterval;
        }
    }
    public var ClientCertificate : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.ClientCertificate);
        }
    }
    public var DesiredUnsolicitedPongInterval : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Windows.Networking.Sockets.IStreamWebSocketControl2 = try _self.QueryInterface();
        return try _ifc.DesiredUnsolicitedPongInterval;
        }
    }
}

// type: Windows.Networking.Sockets.StreamWebSocketInformation
// runtime class
public class StreamWebSocketInformation
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IWebSocketInformation;
    public init(plok: Windows.Networking.Sockets.IWebSocketInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IWebSocketInformation { return _self; }
    public func get_LocalAddress() throws -> Optional<Windows.Networking.HostName> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.get_LocalAddress());
    }
    public func get_BandwidthStatistics() throws -> Windows.Networking.Sockets.BandwidthStatistics {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_BandwidthStatistics();
    }
    public func get_Protocol() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.get_Protocol();
    }
    public var BandwidthStatistics : Windows.Networking.Sockets.BandwidthStatistics {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.BandwidthStatistics;
        }
    }
    public var LocalAddress : Optional<Windows.Networking.HostName> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try Windows.Networking.HostName(plok: _ifc.LocalAddress);
        }
    }
    public var Protocol_ : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation = try _self.QueryInterface();
        return try _ifc.Protocol_;
        }
    }
    public func get_ServerCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_ServerCertificate());
    }
    public func get_ServerCertificateErrorSeverity() throws -> Windows.Networking.Sockets.SocketSslErrorSeverity {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrorSeverity();
    }
    public func get_ServerCertificateErrors() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrors();
    }
    public func get_ServerIntermediateCertificates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.get_ServerIntermediateCertificates();
    }
    public var ServerCertificate : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.ServerCertificate);
        }
    }
    public var ServerCertificateErrorSeverity : Windows.Networking.Sockets.SocketSslErrorSeverity {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrorSeverity;
        }
    }
    public var ServerCertificateErrors : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrors;
        }
    }
    public var ServerIntermediateCertificates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketInformation2 = try _self.QueryInterface();
        return try _ifc.ServerIntermediateCertificates;
        }
    }
}

// type: Windows.Networking.Sockets.WebSocketClosedEventArgs
// runtime class
public class WebSocketClosedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IWebSocketClosedEventArgs;
    public init(plok: Windows.Networking.Sockets.IWebSocketClosedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IWebSocketClosedEventArgs { return _self; }
    public func get_Code() throws -> Swift.UInt16 {
        let _ifc : Windows.Networking.Sockets.IWebSocketClosedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Code();
    }
    public func get_Reason() throws -> Optional<Swift.String> {
        let _ifc : Windows.Networking.Sockets.IWebSocketClosedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Reason();
    }
    public var Code : Swift.UInt16 {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketClosedEventArgs = try _self.QueryInterface();
        return try _ifc.Code;
        }
    }
    public var Reason : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketClosedEventArgs = try _self.QueryInterface();
        return try _ifc.Reason;
        }
    }
}

// type: Windows.Networking.Sockets.WebSocketError
// static class
public class WebSocketError
{
    private struct _IWebSocketErrorStatics {
        static var x : IWebSocketErrorStatics =
            try! RoGetActivationFactory("Windows.Networking.Sockets.WebSocketError")
    }
    public static var WebSocketErrorStatics : IWebSocketErrorStatics {
        _IWebSocketErrorStatics.x
    }
    public static func GetStatus(hresult : Swift.Int32) throws -> Windows.Web.WebErrorStatus {
        return try WebSocketErrorStatics.GetStatus(hresult: hresult);
    }
}

// type: Windows.Networking.Sockets.WebSocketKeepAlive
// runtime class
public class WebSocketKeepAlive
    :
    WinRT.Object
{
    private var _self : Windows.ApplicationModel.Background.IBackgroundTask;
    public init(plok: Windows.ApplicationModel.Background.IBackgroundTask?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.ApplicationModel.Background.IBackgroundTask { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Networking.Sockets.WebSocketKeepAlive")
        try super.init(plok: _self.QueryInterface())
    }
    public func Run(taskInstance : Optional<Windows.ApplicationModel.Background.IBackgroundTaskInstance>) throws -> Void {
        let _ifc : Windows.ApplicationModel.Background.IBackgroundTask = try _self.QueryInterface();
        return try _ifc.Run(taskInstance: taskInstance);
    }
}

// type: Windows.Networking.Sockets.WebSocketServerCustomValidationRequestedEventArgs
// runtime class
public class WebSocketServerCustomValidationRequestedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs;
    public init(plok: Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs { return _self; }
    public func get_ServerCertificate() throws -> Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.get_ServerCertificate());
    }
    public func get_ServerCertificateErrorSeverity() throws -> Windows.Networking.Sockets.SocketSslErrorSeverity {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrorSeverity();
    }
    public func get_ServerCertificateErrors() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.get_ServerCertificateErrors();
    }
    public func get_ServerIntermediateCertificates() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.get_ServerIntermediateCertificates();
    }
    public func Reject() throws -> Void {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.Reject();
    }
    public func GetDeferral() throws -> Optional<Windows.Foundation.Deferral> {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Foundation.Deferral(plok: _ifc.GetDeferral());
    }
    public var ServerCertificate : Optional<Windows.Security.Cryptography.Certificates.Certificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try Windows.Security.Cryptography.Certificates.Certificate(plok: _ifc.ServerCertificate);
        }
    }
    public var ServerCertificateErrorSeverity : Windows.Networking.Sockets.SocketSslErrorSeverity {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrorSeverity;
        }
    }
    public var ServerCertificateErrors : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CChainValidationResult> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.ServerCertificateErrors;
        }
    }
    public var ServerIntermediateCertificates : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CSecurity_CCryptography_CCertificates_CCertificate> {
        get throws {
        let _ifc : Windows.Networking.Sockets.IWebSocketServerCustomValidationRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.ServerIntermediateCertificates;
        }
    }
}

}
extension Windows.Networking.Sockets.ControlChannelTriggerResourceType {
    public static var RequestSoftwareSlot : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerResourceType_RequestSoftwareSlot;
        }
    }
    public static var RequestHardwareSlot : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerResourceType_RequestHardwareSlot;
        }
    }
}
extension Windows.Networking.Sockets.ControlChannelTriggerStatus {
    public static var HardwareSlotRequested : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_HardwareSlotRequested;
        }
    }
    public static var SoftwareSlotAllocated : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_SoftwareSlotAllocated;
        }
    }
    public static var HardwareSlotAllocated : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_HardwareSlotAllocated;
        }
    }
    public static var PolicyError : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_PolicyError;
        }
    }
    public static var SystemError : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_SystemError;
        }
    }
    public static var TransportDisconnected : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_TransportDisconnected;
        }
    }
    public static var ServiceUnavailable : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CControlChannelTriggerStatus_ServiceUnavailable;
        }
    }
}
extension Windows.Networking.Sockets.MessageWebSocketReceiveMode {
    public static var FullMessage : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CMessageWebSocketReceiveMode_FullMessage;
        }
    }
    public static var PartialMessage : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CMessageWebSocketReceiveMode_PartialMessage;
        }
    }
}
extension Windows.Networking.Sockets.SocketActivityConnectedStandbyAction {
    public static var DoNotWake : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityConnectedStandbyAction_DoNotWake;
        }
    }
    public static var Wake : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityConnectedStandbyAction_Wake;
        }
    }
}
extension Windows.Networking.Sockets.SocketActivityKind {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityKind_None;
        }
    }
    public static var StreamSocketListener : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityKind_StreamSocketListener;
        }
    }
    public static var DatagramSocket : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityKind_DatagramSocket;
        }
    }
    public static var StreamSocket : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityKind_StreamSocket;
        }
    }
}
extension Windows.Networking.Sockets.SocketActivityTriggerReason {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason_None;
        }
    }
    public static var SocketActivity : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason_SocketActivity;
        }
    }
    public static var ConnectionAccepted : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason_ConnectionAccepted;
        }
    }
    public static var KeepAliveTimerExpired : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason_KeepAliveTimerExpired;
        }
    }
    public static var SocketClosed : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketActivityTriggerReason_SocketClosed;
        }
    }
}
extension Windows.Networking.Sockets.SocketErrorStatus {
    public static var Unknown : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_Unknown;
        }
    }
    public static var OperationAborted : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_OperationAborted;
        }
    }
    public static var HttpInvalidServerResponse : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_HttpInvalidServerResponse;
        }
    }
    public static var ConnectionTimedOut : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_ConnectionTimedOut;
        }
    }
    public static var AddressFamilyNotSupported : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_AddressFamilyNotSupported;
        }
    }
    public static var SocketTypeNotSupported : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_SocketTypeNotSupported;
        }
    }
    public static var HostNotFound : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_HostNotFound;
        }
    }
    public static var NoDataRecordOfRequestedType : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_NoDataRecordOfRequestedType;
        }
    }
    public static var NonAuthoritativeHostNotFound : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_NonAuthoritativeHostNotFound;
        }
    }
    public static var ClassTypeNotFound : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_ClassTypeNotFound;
        }
    }
    public static var AddressAlreadyInUse : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_AddressAlreadyInUse;
        }
    }
    public static var CannotAssignRequestedAddress : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CannotAssignRequestedAddress;
        }
    }
    public static var ConnectionRefused : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_ConnectionRefused;
        }
    }
    public static var NetworkIsUnreachable : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_NetworkIsUnreachable;
        }
    }
    public static var UnreachableHost : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_UnreachableHost;
        }
    }
    public static var NetworkIsDown : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_NetworkIsDown;
        }
    }
    public static var NetworkDroppedConnectionOnReset : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_NetworkDroppedConnectionOnReset;
        }
    }
    public static var SoftwareCausedConnectionAbort : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_SoftwareCausedConnectionAbort;
        }
    }
    public static var ConnectionResetByPeer : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_ConnectionResetByPeer;
        }
    }
    public static var HostIsDown : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_HostIsDown;
        }
    }
    public static var NoAddressesFound : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_NoAddressesFound;
        }
    }
    public static var TooManyOpenFiles : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_TooManyOpenFiles;
        }
    }
    public static var MessageTooLong : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_MessageTooLong;
        }
    }
    public static var CertificateExpired : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateExpired;
        }
    }
    public static var CertificateUntrustedRoot : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateUntrustedRoot;
        }
    }
    public static var CertificateCommonNameIsIncorrect : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateCommonNameIsIncorrect;
        }
    }
    public static var CertificateWrongUsage : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateWrongUsage;
        }
    }
    public static var CertificateRevoked : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateRevoked;
        }
    }
    public static var CertificateNoRevocationCheck : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateNoRevocationCheck;
        }
    }
    public static var CertificateRevocationServerOffline : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateRevocationServerOffline;
        }
    }
    public static var CertificateIsInvalid : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketErrorStatus_CertificateIsInvalid;
        }
    }
}
extension Windows.Networking.Sockets.SocketMessageType {
    public static var Binary : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketMessageType_Binary;
        }
    }
    public static var Utf8 : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketMessageType_Utf8;
        }
    }
}
extension Windows.Networking.Sockets.SocketProtectionLevel {
    public static var PlainSocket : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_PlainSocket;
        }
    }
    public static var Ssl : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_Ssl;
        }
    }
    public static var SslAllowNullEncryption : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_SslAllowNullEncryption;
        }
    }
    public static var BluetoothEncryptionAllowNullAuthentication : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_BluetoothEncryptionAllowNullAuthentication;
        }
    }
    public static var BluetoothEncryptionWithAuthentication : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_BluetoothEncryptionWithAuthentication;
        }
    }
    public static var Ssl3AllowWeakEncryption : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_Ssl3AllowWeakEncryption;
        }
    }
    public static var Tls10 : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_Tls10;
        }
    }
    public static var Tls11 : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_Tls11;
        }
    }
    public static var Tls12 : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_Tls12;
        }
    }
    public static var Unspecified : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketProtectionLevel_Unspecified;
        }
    }
}
extension Windows.Networking.Sockets.SocketQualityOfService {
    public static var Normal : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketQualityOfService_Normal;
        }
    }
    public static var LowLatency : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketQualityOfService_LowLatency;
        }
    }
}
extension Windows.Networking.Sockets.SocketSslErrorSeverity {
    public static var None : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity_None;
        }
    }
    public static var Ignorable : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity_Ignorable;
        }
    }
    public static var Fatal : Self {
        get {
            return _q_CWindows_CNetworking_CSockets_CSocketSslErrorSeverity_Fatal;
        }
    }
}
