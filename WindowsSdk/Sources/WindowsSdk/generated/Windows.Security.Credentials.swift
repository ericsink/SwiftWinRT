// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Security.Credentials {
// type: Windows.Security.Credentials.ICredentialFactory
// interface type
// ACTIVATION INTERFACE
open class ICredentialFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x54ef13a1, Data2: 0xbf26, Data3 : 0x47b5, Data4 : (0x97, 0xdd, 0xde, 0x77, 0x9b, 0x7c, 0xad, 0x58)) }
    // Windows.Security.Credentials.PasswordCredential CreatePasswordCredential(System.String, System.String, System.String)
    private func _n_CreatePasswordCredential(_ resource : Optional<HSTRING>, _ userName : Optional<HSTRING>, _ password : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>>>?) throws {
        return try perform(as: _q_CWindows_CSecurity_CCredentials_CICredentialFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePasswordCredential(pThis, resource, userName, password, __presult))
        }
    }
    public func CreatePasswordCredential(resource : Swift.String, userName : Swift.String, password : Swift.String) throws -> Optional<Windows.Security.Credentials.IPasswordCredential> {
        let __hstr_resource = try HString(resource);
        return try withExtendedLifetime(__hstr_resource) {
        let __hstr_userName = try HString(userName);
        return try withExtendedLifetime(__hstr_userName) {
        let __hstr_password = try HString(password);
        return try withExtendedLifetime(__hstr_password) {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CSecurity_CCredentials_CIPasswordCredential>> = nil;
        try self._n_CreatePasswordCredential(__hstr_resource.Raw(), __hstr_userName.Raw(), __hstr_password.Raw(), &__result);
        return Windows.Security.Credentials.IPasswordCredential(consuming: __result);
        }
        }
        }
    }
} // ICredentialFactory


// type: Windows.Security.Credentials.IPasswordCredential
// interface type
open class IPasswordCredential
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6ab18989, Data2: 0xc720, Data3 : 0x41a7, Data4 : (0xa6, 0xc1, 0xfe, 0xad, 0xb3, 0x63, 0x29, 0xa0)) }
// method not needed: get_Resource
// method not needed: put_Resource
// method not needed: get_UserName
// method not needed: put_UserName
// method not needed: get_Password
// method not needed: put_Password
// method not needed: RetrievePassword
// method not needed: get_Properties
} // IPasswordCredential


// type: Windows.Security.Credentials.PasswordCredential
// runtime class
public class PasswordCredential
    :
    WinRT.Object
{
    private var _self : Windows.Security.Credentials.IPasswordCredential;
    public init(plok: Windows.Security.Credentials.IPasswordCredential?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Security.Credentials.IPasswordCredential { return _self; }
    public init(resource : Swift.String, userName : Swift.String, password : Swift.String) throws {
        let _af : ICredentialFactory = try RoGetActivationFactory("Windows.Security.Credentials.PasswordCredential");
        _self = try _af.CreatePasswordCredential(resource: resource, userName: userName, password: password)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        _self = try RoActivateInstance("Windows.Security.Credentials.PasswordCredential")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Resource
    // method not needed: put_Resource
    // method not needed: get_UserName
    // method not needed: put_UserName
    // method not needed: get_Password
    // method not needed: put_Password
    // method not needed: RetrievePassword
    // method not needed: get_Properties
}

}
