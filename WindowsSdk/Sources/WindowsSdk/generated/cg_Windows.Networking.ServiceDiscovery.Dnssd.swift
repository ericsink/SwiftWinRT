// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed interface type
public class IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0c251e73, Data2: 0x52c9, Data3 : 0x5026, Data4 : (0xa8, 0x75, 0xf6, 0x85, 0xa5, 0x0c, 0xbf, 0xfd)) }
    // [IsSpecialName] void put_Completed(Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult>)
    private func _n_put_Completed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, handler))
        }
    }
    public func put_Completed(handler : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>) throws -> Void {
        try self._n_put_Completed(RawPointer(handler));
    }
    // [IsSpecialName] Windows.Foundation.AsyncOperationCompletedHandler<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult> get_Completed()
    private func _n_get_Completed(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, __presult))
        }
    }
    public func get_Completed() throws -> Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>> = nil;
        try self._n_get_Completed(&__result);
        return ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(consuming: __result);
    }
    // Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult GetResults()
    private func _n_GetResults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdRegistrationResult>>>?) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, __presult))
        }
    }
    public func GetResults() throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdRegistrationResult>> = nil;
        try self._n_GetResults(&__result);
        return Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult(consuming: __result);
    }
    public var Completed : Optional<ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult> {
        get throws {
            return try get_Completed();
        }
    }
} // IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult
// closed generic delegate type
public class IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf3632f52, Data2: 0x894a, Data3 : 0x5345, Data4 : (0x9b, 0xe6, 0x83, 0x89, 0x75, 0x1c, 0x51, 0x89)) }
    // [IsSpecialName] void Invoke(Windows.Foundation.IAsyncOperation<Windows.Networking.ServiceDiscovery.Dnssd.DnssdRegistrationResult>, Windows.Foundation.AsyncStatus)
    private func _n_Invoke(_ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) throws {
        return try perform(as: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, asyncInfo, asyncStatus))
        }
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        try self._n_Invoke(RawPointer(asyncInfo), asyncStatus);
    }
} // IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult
// impl delegate type
open class AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult
{
    private static var vtable: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResultVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ asyncInfo : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>>, _ asyncStatus : _q_CWindows_CFoundation_CAsyncStatus) in
        guard let self = AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(asyncInfo), asyncStatus: asyncStatus)
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>, Windows.Foundation.AsyncStatus) throws -> Void>
    public init(cb : Optional<(Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>, Windows.Foundation.AsyncStatus) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(_ pUnk: UnsafeMutableRawPointer?) -> AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult? {
        return pUnk?.bindMemory(to: AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        if let cb = _cb {
            return try cb(asyncInfo, asyncStatus)
        }
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult
{
    private var _self : ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult;
    public init(plok: ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult?) throws {
        _self = plok!
    }
    public func Invoke(asyncInfo : Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult>, asyncStatus : Windows.Foundation.AsyncStatus) throws -> Void {
        return try _self.Invoke(asyncInfo: asyncInfo, asyncStatus: asyncStatus);
    }
    public func Interface() -> ClosedGenerics.IAsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult {
        return _self
    }
}
// closed interface type
public class IVectorView_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf75ff82a, Data2: 0x7e10, Data3 : 0x5cf6, Data4 : (0x80, 0x64, 0x6a, 0xe5, 0x85, 0xe0, 0xbd, 0x8d)) }
// method not needed: GetAt
// method not needed: get_Size
// method not needed: IndexOf
// method not needed: GetMany
} // IVectorView_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
// closed interface type
public class IIterable_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1de3a3e5, Data2: 0x387e, Data3 : 0x5328, Data4 : (0xb8, 0x64, 0x3f, 0x0e, 0x34, 0x75, 0xd3, 0x43)) }
// method not needed: First
} // IIterable_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
// closed interface type
public class IIterator_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbc0cca83, Data2: 0x44e5, Data3 : 0x5544, Data4 : (0xab, 0x5b, 0xe0, 0x9d, 0x66, 0xf5, 0xfd, 0x5f)) }
// method not needed: get_Current
// method not needed: get_HasCurrent
// method not needed: MoveNext
// method not needed: GetMany
} // IIterator_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe617711e, Data2: 0xcdd5, Data3 : 0x5975, Data4 : (0x8f, 0xb3, 0x8e, 0xaa, 0xae, 0xd2, 0x4e, 0x7b)) }
    // [IsSpecialName] void Invoke(Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher, Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher>, args : Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstanceVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceInstance>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance.from_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher(plok: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher(sender)), args: Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance(plok: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceInstance(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, args : Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, args : Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceInstance>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceInstance {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6a6cc5d5, Data2: 0x9f43, Data3 : 0x545a, Data4 : (0x91, 0xd7, 0x3a, 0x40, 0x05, 0x54, 0x75, 0xda)) }
    // [IsSpecialName] void Invoke(Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher, System.Object)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher>, args : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CIDnssdServiceWatcher>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable.from_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher(plok: Windows.Networking.ServiceDiscovery.Dnssd.IDnssdServiceWatcher(sender)), args: WinRT.Object(plok: WinRT.IInspectable(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, Optional<WinRT.Object>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, Optional<WinRT.Object>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, args : Optional<WinRT.Object>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_TypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.ServiceDiscovery.Dnssd.DnssdServiceWatcher>, args : Optional<WinRT.Object>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.GetInterface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdServiceWatcher_IInspectable {
        return _self
    }
}
}
extension ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult : WinRT.Future {
    private final class MyCompletedHandler: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult {
        private var hEvent: HANDLE
        public init(signal event: HANDLE) {
            self.hEvent = event
            super.init()
        }
        override func Invoke(asyncInfo: ClosedGenerics.IAsyncOperation_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult?,
            asyncStatus: Windows.Foundation.AsyncStatus) throws {
            _ = SetEvent(self.hEvent)
        }
}
        public func get() throws -> Optional<Windows.Networking.ServiceDiscovery.Dnssd.IDnssdRegistrationResult> {
            let info: Windows.Foundation.IAsyncInfo = try QueryInterface()
            if try info.get_Status() == Windows.Foundation.AsyncStatus.Started {
            let event: HANDLE =
            CreateEventW(nil, /*bManualReset=*/true, /*DefaultValue=*/false, nil)
            // TODO(compnerd) validate event
            defer { _ = CloseHandle(event) }
            let completion: ClosedGenerics.AsyncOperationCompletedHandler_1__q_CWindows_CNetworking_CServiceDiscovery_CDnssd_CDnssdRegistrationResult =
            MyCompletedHandler(signal: event)
            try withExtendedLifetime(completion) {
            try self.put_Completed(handler: completion.Interface())
            _ = WaitForSingleObject(event, INFINITE)
            }
        }
        return try self.GetResults();
        }
}
