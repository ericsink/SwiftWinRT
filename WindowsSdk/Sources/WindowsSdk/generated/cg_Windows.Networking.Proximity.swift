// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension ClosedGenerics {
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xad674bbf, Data2: 0x6281, Data3 : 0x5943, Data4 : (0x97, 0x72, 0xe0, 0xfd, 0x76, 0x64, 0xd4, 0xe1)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Proximity.PeerWatcher, Windows.Networking.Proximity.PeerInformation)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerWatcher>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerInformation>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.IPeerWatcher>, args : Optional<Windows.Networking.Proximity.IPeerInformation>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformationVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerWatcher>>, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerInformation>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation.from_TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Proximity.PeerWatcher(plok: Windows.Networking.Proximity.IPeerWatcher(sender)), args: Windows.Networking.Proximity.PeerInformation(plok: Windows.Networking.Proximity.IPeerInformation(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<Windows.Networking.Proximity.PeerInformation>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<Windows.Networking.Proximity.PeerInformation>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Proximity.PeerWatcher>, args : Optional<Windows.Networking.Proximity.PeerInformation>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.PeerWatcher>, args : Optional<Windows.Networking.Proximity.PeerInformation>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.Interface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher__q_CWindows_CNetworking_CProximity_CPeerInformation {
        return _self
    }
}
// closed generic delegate type
public class ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf4979ea1, Data2: 0x7e06, Data3 : 0x50a8, Data4 : (0x88, 0xdc, 0x3f, 0x29, 0x52, 0x4e, 0x4f, 0xdb)) }
    // [IsSpecialName] void Invoke(Windows.Networking.Proximity.PeerWatcher, System.Object)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerWatcher>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, args))
        }
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.IPeerWatcher>, args : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(args));
    }
} // ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable
// impl delegate type
open class TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable
{
    private static var vtable: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectableVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CWindows_CNetworking_CProximity_CIPeerWatcher>>, _ args : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable.from_TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Windows.Networking.Proximity.PeerWatcher(plok: Windows.Networking.Proximity.IPeerWatcher(sender)), args: WinRT.Object(plok: WinRT.IInspectable(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<WinRT.Object>) throws -> Void>
    public init(cb : Optional<(Optional<Windows.Networking.Proximity.PeerWatcher>, Optional<WinRT.Object>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable(_ pUnk: UnsafeMutableRawPointer?) -> TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable? {
        return pUnk?.bindMemory(to: TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Windows.Networking.Proximity.PeerWatcher>, args : Optional<WinRT.Object>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, args)
        }
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_TypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable
{
    private var _self : ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable;
    public init(plok: ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Windows.Networking.Proximity.PeerWatcher>, args : Optional<WinRT.Object>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), args: args!.GetInterface());
    }
    public func Interface() -> ClosedGenerics.ITypedEventHandler_2__q_CWindows_CNetworking_CProximity_CPeerWatcher_IInspectable {
        return _self
    }
}
}
