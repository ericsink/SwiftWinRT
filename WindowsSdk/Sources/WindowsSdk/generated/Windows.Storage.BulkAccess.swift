// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Storage.BulkAccess {
// type: Windows.Storage.BulkAccess.FileInformation
// runtime class
public class FileInformation
    :
    WinRT.Object
{
    private var _self : Windows.Storage.BulkAccess.IStorageItemInformation;
    public init(plok: Windows.Storage.BulkAccess.IStorageItemInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.BulkAccess.IStorageItemInformation { return _self; }
    public func get_MusicProperties() throws -> Optional<Windows.Storage.FileProperties.MusicProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.MusicProperties(plok: _ifc.get_MusicProperties());
    }
    public func get_VideoProperties() throws -> Optional<Windows.Storage.FileProperties.VideoProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.VideoProperties(plok: _ifc.get_VideoProperties());
    }
    public func get_ImageProperties() throws -> Optional<Windows.Storage.FileProperties.ImageProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.ImageProperties(plok: _ifc.get_ImageProperties());
    }
    public func get_DocumentProperties() throws -> Optional<Windows.Storage.FileProperties.DocumentProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.DocumentProperties(plok: _ifc.get_DocumentProperties());
    }
    public func get_BasicProperties() throws -> Optional<Windows.Storage.FileProperties.BasicProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.BasicProperties(plok: _ifc.get_BasicProperties());
    }
    public func get_Thumbnail() throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemThumbnail(plok: _ifc.get_Thumbnail());
    }
    public func add_ThumbnailUpdated(changedHandler : @escaping (Optional<Windows.Storage.BulkAccess.IStorageItemInformation>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.add_ThumbnailUpdated(changedHandler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable(cb: changedHandler).Interface());
    }
    public func remove_ThumbnailUpdated(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.remove_ThumbnailUpdated(eventCookie: eventCookie);
    }
    public func add_PropertiesUpdated(changedHandler : @escaping (Optional<Windows.Storage.BulkAccess.IStorageItemInformation>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.add_PropertiesUpdated(changedHandler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable(cb: changedHandler).Interface());
    }
    public func remove_PropertiesUpdated(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.remove_PropertiesUpdated(eventCookie: eventCookie);
    }
    public var BasicProperties : Optional<Windows.Storage.FileProperties.BasicProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.BasicProperties(plok: _ifc.BasicProperties);
        }
    }
    public var DocumentProperties : Optional<Windows.Storage.FileProperties.DocumentProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.DocumentProperties(plok: _ifc.DocumentProperties);
        }
    }
    public var ImageProperties : Optional<Windows.Storage.FileProperties.ImageProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.ImageProperties(plok: _ifc.ImageProperties);
        }
    }
    public var MusicProperties : Optional<Windows.Storage.FileProperties.MusicProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.MusicProperties(plok: _ifc.MusicProperties);
        }
    }
    public var Thumbnail : Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemThumbnail(plok: _ifc.Thumbnail);
        }
    }
    public var VideoProperties : Optional<Windows.Storage.FileProperties.VideoProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.VideoProperties(plok: _ifc.VideoProperties);
        }
    }
    public func get_FileType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.get_FileType();
    }
    public func get_ContentType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.get_ContentType();
    }
    public func OpenAsync(accessMode : Windows.Storage.FileAccessMode) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIRandomAccessStream> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.OpenAsync(accessMode: accessMode);
    }
    public func Open(accessMode : Windows.Storage.FileAccessMode) async throws -> Optional<Windows.Storage.Streams.IRandomAccessStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.OpenAsync(accessMode: accessMode)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func OpenTransactedWriteAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageStreamTransaction> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.OpenTransactedWriteAsync();
    }
    public func OpenTransactedWrite() async throws -> Optional<Windows.Storage.StorageStreamTransaction> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageStreamTransaction(plok: self.OpenTransactedWriteAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CopyAsync(destinationFolder : Optional<Windows.Storage.IStorageFolder>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.CopyOverloadDefaultNameAndOptions(destinationFolder: destinationFolder);
    }
    public func Copy(destinationFolder : Optional<Windows.Storage.IStorageFolder>) async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.CopyAsync(destinationFolder: destinationFolder)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CopyAsync(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.CopyOverloadDefaultOptions(destinationFolder: destinationFolder, desiredNewName: desiredNewName);
    }
    public func Copy(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String) async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.CopyAsync(destinationFolder: destinationFolder, desiredNewName: desiredNewName)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CopyAsync(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String, option : Windows.Storage.NameCollisionOption) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.CopyOverload(destinationFolder: destinationFolder, desiredNewName: desiredNewName, option: option);
    }
    public func Copy(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String, option : Windows.Storage.NameCollisionOption) async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.CopyAsync(destinationFolder: destinationFolder, desiredNewName: desiredNewName, option: option)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CopyAndReplaceAsync(fileToReplace : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.CopyAndReplaceAsync(fileToReplace: fileToReplace);
    }
    public func CopyAndReplace(fileToReplace : Optional<Windows.Storage.IStorageFile>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CopyAndReplaceAsync(fileToReplace: fileToReplace)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func MoveAsync(destinationFolder : Optional<Windows.Storage.IStorageFolder>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.MoveOverloadDefaultNameAndOptions(destinationFolder: destinationFolder);
    }
    public func Move(destinationFolder : Optional<Windows.Storage.IStorageFolder>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.MoveAsync(destinationFolder: destinationFolder)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func MoveAsync(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.MoveOverloadDefaultOptions(destinationFolder: destinationFolder, desiredNewName: desiredNewName);
    }
    public func Move(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.MoveAsync(destinationFolder: destinationFolder, desiredNewName: desiredNewName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func MoveAsync(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String, option : Windows.Storage.NameCollisionOption) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.MoveOverload(destinationFolder: destinationFolder, desiredNewName: desiredNewName, option: option);
    }
    public func Move(destinationFolder : Optional<Windows.Storage.IStorageFolder>, desiredNewName : Swift.String, option : Windows.Storage.NameCollisionOption) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.MoveAsync(destinationFolder: destinationFolder, desiredNewName: desiredNewName, option: option)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func MoveAndReplaceAsync(fileToReplace : Optional<Windows.Storage.IStorageFile>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.MoveAndReplaceAsync(fileToReplace: fileToReplace);
    }
    public func MoveAndReplace(fileToReplace : Optional<Windows.Storage.IStorageFile>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.MoveAndReplaceAsync(fileToReplace: fileToReplace)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var ContentType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.ContentType;
        }
    }
    public var FileType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageFile = try _self.QueryInterface();
        return try _ifc.FileType;
        }
    }
    public func OpenSequentialReadAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIInputStream> {
        let _ifc : Windows.Storage.Streams.IInputStreamReference = try _self.QueryInterface();
        return try _ifc.OpenSequentialReadAsync();
    }
    public func OpenSequentialRead() async throws -> Optional<Windows.Storage.Streams.IInputStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.OpenSequentialReadAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func OpenReadAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType> {
        let _ifc : Windows.Storage.Streams.IRandomAccessStreamReference = try _self.QueryInterface();
        return try _ifc.OpenReadAsync();
    }
    public func OpenRead() async throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamWithContentType> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.OpenReadAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RenameAsync(desiredName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.RenameAsyncOverloadDefaultOptions(desiredName: desiredName);
    }
    public func Rename(desiredName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenameAsync(desiredName: desiredName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RenameAsync(desiredName : Swift.String, option : Windows.Storage.NameCollisionOption) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.RenameAsync(desiredName: desiredName, option: option);
    }
    public func Rename(desiredName : Swift.String, option : Windows.Storage.NameCollisionOption) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenameAsync(desiredName: desiredName, option: option)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.DeleteAsyncOverloadDefaultOptions();
    }
    public func Delete() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteAsync(option : Windows.Storage.StorageDeleteOption) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.DeleteAsync(option: option);
    }
    public func Delete(option : Windows.Storage.StorageDeleteOption) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync(option: option)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetBasicPropertiesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CBasicProperties> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.GetBasicPropertiesAsync();
    }
    public func GetBasicProperties() async throws -> Optional<Windows.Storage.FileProperties.BasicProperties> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.BasicProperties(plok: self.GetBasicPropertiesAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_Path() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_Path();
    }
    public func get_Attributes() throws -> Windows.Storage.FileAttributes {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_Attributes();
    }
    public func get_DateCreated() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_DateCreated();
    }
    public func IsOfType(type : Windows.Storage.StorageItemTypes) throws -> boolean {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.IsOfType(type: type);
    }
    public var Attributes : Windows.Storage.FileAttributes {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.Attributes;
        }
    }
    public var DateCreated : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.DateCreated;
        }
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Path : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.Path;
        }
    }
    public func GetThumbnailAsync(mode : Windows.Storage.FileProperties.ThumbnailMode) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CStorageItemThumbnail> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode: mode);
    }
    public func GetThumbnail(mode : Windows.Storage.FileProperties.ThumbnailMode) async throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.StorageItemThumbnail(plok: self.GetThumbnailAsync(mode: mode)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetThumbnailAsync(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CStorageItemThumbnail> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.GetThumbnailAsyncOverloadDefaultOptions(mode: mode, requestedSize: requestedSize);
    }
    public func GetThumbnail(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32) async throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.StorageItemThumbnail(plok: self.GetThumbnailAsync(mode: mode, requestedSize: requestedSize)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetThumbnailAsync(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32, options : Windows.Storage.FileProperties.ThumbnailOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CStorageItemThumbnail> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.GetThumbnailAsync(mode: mode, requestedSize: requestedSize, options: options);
    }
    public func GetThumbnail(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32, options : Windows.Storage.FileProperties.ThumbnailOptions) async throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.StorageItemThumbnail(plok: self.GetThumbnailAsync(mode: mode, requestedSize: requestedSize, options: options)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public func get_DisplayType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.get_DisplayType();
    }
    public func get_FolderRelativeId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.get_FolderRelativeId();
    }
    public func get_Properties() throws -> Optional<Windows.Storage.FileProperties.StorageItemContentProperties> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemContentProperties(plok: _ifc.get_Properties());
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public var DisplayType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.DisplayType;
        }
    }
    public var FolderRelativeId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.FolderRelativeId;
        }
    }
    public var Properties : Optional<Windows.Storage.FileProperties.StorageItemContentProperties> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemContentProperties(plok: _ifc.Properties);
        }
    }
    public func GetParentAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.IStorageItem2 = try _self.QueryInterface();
        return try _ifc.GetParentAsync();
    }
    public func GetParent() async throws -> Optional<Windows.Storage.StorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFolder(plok: self.GetParentAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func IsEqual(item : Optional<Windows.Storage.IStorageItem>) throws -> boolean {
        let _ifc : Windows.Storage.IStorageItem2 = try _self.QueryInterface();
        return try _ifc.IsEqual(item: item);
    }
    public func get_Provider() throws -> Optional<Windows.Storage.StorageProvider> {
        let _ifc : Windows.Storage.IStorageItemPropertiesWithProvider = try _self.QueryInterface();
        return try Windows.Storage.StorageProvider(plok: _ifc.get_Provider());
    }
    public var Provider : Optional<Windows.Storage.StorageProvider> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemPropertiesWithProvider = try _self.QueryInterface();
        return try Windows.Storage.StorageProvider(plok: _ifc.Provider);
        }
    }
    public func get_IsAvailable() throws -> boolean {
        let _ifc : Windows.Storage.IStorageFilePropertiesWithAvailability = try _self.QueryInterface();
        return try _ifc.get_IsAvailable();
    }
    public var IsAvailable : boolean {
        get throws {
        let _ifc : Windows.Storage.IStorageFilePropertiesWithAvailability = try _self.QueryInterface();
        return try _ifc.IsAvailable;
        }
    }
    public func OpenAsync(accessMode : Windows.Storage.FileAccessMode, options : Windows.Storage.StorageOpenOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStreams_CIRandomAccessStream> {
        let _ifc : Windows.Storage.IStorageFile2 = try _self.QueryInterface();
        return try _ifc.OpenWithOptionsAsync(accessMode: accessMode, options: options);
    }
    public func Open(accessMode : Windows.Storage.FileAccessMode, options : Windows.Storage.StorageOpenOptions) async throws -> Optional<Windows.Storage.Streams.IRandomAccessStream> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.OpenAsync(accessMode: accessMode, options: options)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func OpenTransactedWriteAsync(options : Windows.Storage.StorageOpenOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageStreamTransaction> {
        let _ifc : Windows.Storage.IStorageFile2 = try _self.QueryInterface();
        return try _ifc.OpenTransactedWriteWithOptionsAsync(options: options);
    }
    public func OpenTransactedWrite(options : Windows.Storage.StorageOpenOptions) async throws -> Optional<Windows.Storage.StorageStreamTransaction> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageStreamTransaction(plok: self.OpenTransactedWriteAsync(options: options)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
}

// type: Windows.Storage.BulkAccess.FileInformationFactory
// runtime class
public class FileInformationFactory
    :
    WinRT.Object
{
    private var _self : Windows.Storage.BulkAccess.IFileInformationFactory;
    public init(plok: Windows.Storage.BulkAccess.IFileInformationFactory?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.BulkAccess.IFileInformationFactory { return _self; }
    public init(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode) throws {
        let _af : IFileInformationFactoryFactory = try RoGetActivationFactory("Windows.Storage.BulkAccess.FileInformationFactory");
        _self = try _af.CreateWithMode(queryResult: queryResult, mode: mode)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode, requestedThumbnailSize : Swift.UInt32) throws {
        let _af : IFileInformationFactoryFactory = try RoGetActivationFactory("Windows.Storage.BulkAccess.FileInformationFactory");
        _self = try _af.CreateWithModeAndSize(queryResult: queryResult, mode: mode, requestedThumbnailSize: requestedThumbnailSize)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode, requestedThumbnailSize : Swift.UInt32, thumbnailOptions : Windows.Storage.FileProperties.ThumbnailOptions) throws {
        let _af : IFileInformationFactoryFactory = try RoGetActivationFactory("Windows.Storage.BulkAccess.FileInformationFactory");
        _self = try _af.CreateWithModeAndSizeAndOptions(queryResult: queryResult, mode: mode, requestedThumbnailSize: requestedThumbnailSize, thumbnailOptions: thumbnailOptions)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode, requestedThumbnailSize : Swift.UInt32, thumbnailOptions : Windows.Storage.FileProperties.ThumbnailOptions, delayLoad : boolean) throws {
        let _af : IFileInformationFactoryFactory = try RoGetActivationFactory("Windows.Storage.BulkAccess.FileInformationFactory");
        _self = try _af.CreateWithModeAndSizeAndOptionsAndFlags(queryResult: queryResult, mode: mode, requestedThumbnailSize: requestedThumbnailSize, thumbnailOptions: thumbnailOptions, delayLoad: delayLoad)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func GetItemsAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetItemsAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve);
    }
    public func GetItems(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetItemsAsyncDefaultStartAndCount();
    }
    public func GetItems() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFilesAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetFilesAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve);
    }
    public func GetFiles(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFilesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetFilesAsyncDefaultStartAndCount();
    }
    public func GetFiles() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFoldersAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetFoldersAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve);
    }
    public func GetFolders(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFoldersAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetFoldersAsyncDefaultStartAndCount();
    }
    public func GetFolders() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetVirtualizedItemsVector() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetVirtualizedItemsVector();
    }
    public func GetVirtualizedFilesVector() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetVirtualizedFilesVector();
    }
    public func GetVirtualizedFoldersVector() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Windows.Storage.BulkAccess.IFileInformationFactory = try _self.QueryInterface();
        return try _ifc.GetVirtualizedFoldersVector();
    }
}

// type: Windows.Storage.BulkAccess.FolderInformation
// runtime class
public class FolderInformation
    :
    WinRT.Object
{
    private var _self : Windows.Storage.BulkAccess.IStorageItemInformation;
    public init(plok: Windows.Storage.BulkAccess.IStorageItemInformation?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Storage.BulkAccess.IStorageItemInformation { return _self; }
    public func get_MusicProperties() throws -> Optional<Windows.Storage.FileProperties.MusicProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.MusicProperties(plok: _ifc.get_MusicProperties());
    }
    public func get_VideoProperties() throws -> Optional<Windows.Storage.FileProperties.VideoProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.VideoProperties(plok: _ifc.get_VideoProperties());
    }
    public func get_ImageProperties() throws -> Optional<Windows.Storage.FileProperties.ImageProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.ImageProperties(plok: _ifc.get_ImageProperties());
    }
    public func get_DocumentProperties() throws -> Optional<Windows.Storage.FileProperties.DocumentProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.DocumentProperties(plok: _ifc.get_DocumentProperties());
    }
    public func get_BasicProperties() throws -> Optional<Windows.Storage.FileProperties.BasicProperties> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.BasicProperties(plok: _ifc.get_BasicProperties());
    }
    public func get_Thumbnail() throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemThumbnail(plok: _ifc.get_Thumbnail());
    }
    public func add_ThumbnailUpdated(changedHandler : @escaping (Optional<Windows.Storage.BulkAccess.IStorageItemInformation>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.add_ThumbnailUpdated(changedHandler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable(cb: changedHandler).Interface());
    }
    public func remove_ThumbnailUpdated(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.remove_ThumbnailUpdated(eventCookie: eventCookie);
    }
    public func add_PropertiesUpdated(changedHandler : @escaping (Optional<Windows.Storage.BulkAccess.IStorageItemInformation>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.add_PropertiesUpdated(changedHandler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable(cb: changedHandler).Interface());
    }
    public func remove_PropertiesUpdated(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try _ifc.remove_PropertiesUpdated(eventCookie: eventCookie);
    }
    public var BasicProperties : Optional<Windows.Storage.FileProperties.BasicProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.BasicProperties(plok: _ifc.BasicProperties);
        }
    }
    public var DocumentProperties : Optional<Windows.Storage.FileProperties.DocumentProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.DocumentProperties(plok: _ifc.DocumentProperties);
        }
    }
    public var ImageProperties : Optional<Windows.Storage.FileProperties.ImageProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.ImageProperties(plok: _ifc.ImageProperties);
        }
    }
    public var MusicProperties : Optional<Windows.Storage.FileProperties.MusicProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.MusicProperties(plok: _ifc.MusicProperties);
        }
    }
    public var Thumbnail : Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemThumbnail(plok: _ifc.Thumbnail);
        }
    }
    public var VideoProperties : Optional<Windows.Storage.FileProperties.VideoProperties> {
        get throws {
        let _ifc : Windows.Storage.BulkAccess.IStorageItemInformation = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.VideoProperties(plok: _ifc.VideoProperties);
        }
    }
    public func CreateFileAsync(desiredName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.CreateFileAsyncOverloadDefaultOptions(desiredName: desiredName);
    }
    public func CreateFile(desiredName : Swift.String) async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.CreateFileAsync(desiredName: desiredName)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateFileAsync(desiredName : Swift.String, options : Windows.Storage.CreationCollisionOption) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.CreateFileAsync(desiredName: desiredName, options: options);
    }
    public func CreateFile(desiredName : Swift.String, options : Windows.Storage.CreationCollisionOption) async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.CreateFileAsync(desiredName: desiredName, options: options)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateFolderAsync(desiredName : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.CreateFolderAsyncOverloadDefaultOptions(desiredName: desiredName);
    }
    public func CreateFolder(desiredName : Swift.String) async throws -> Optional<Windows.Storage.StorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFolder(plok: self.CreateFolderAsync(desiredName: desiredName)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateFolderAsync(desiredName : Swift.String, options : Windows.Storage.CreationCollisionOption) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.CreateFolderAsync(desiredName: desiredName, options: options);
    }
    public func CreateFolder(desiredName : Swift.String, options : Windows.Storage.CreationCollisionOption) async throws -> Optional<Windows.Storage.StorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFolder(plok: self.CreateFolderAsync(desiredName: desiredName, options: options)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFileAsync(name : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.GetFileAsync(name: name);
    }
    public func GetFile(name : Swift.String) async throws -> Optional<Windows.Storage.StorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFile(plok: self.GetFileAsync(name: name)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFolderAsync(name : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.GetFolderAsync(name: name);
    }
    public func GetFolder(name : Swift.String) async throws -> Optional<Windows.Storage.StorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFolder(plok: self.GetFolderAsync(name: name)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemAsync(name : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CIStorageItem> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.GetItemAsync(name: name);
    }
    public func GetItem(name : Swift.String) async throws -> Optional<Windows.Storage.IStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemAsync(name: name)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFilesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.GetFilesAsyncOverloadDefaultOptionsStartAndCount();
    }
    public func GetFiles() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFoldersAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.GetFoldersAsyncOverloadDefaultOptionsStartAndCount();
    }
    public func GetFolders() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemsAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        let _ifc : Windows.Storage.IStorageFolder = try _self.QueryInterface();
        return try _ifc.GetItemsAsyncOverloadDefaultStartAndCount();
    }
    public func GetItems() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RenameAsync(desiredName : Swift.String) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.RenameAsyncOverloadDefaultOptions(desiredName: desiredName);
    }
    public func Rename(desiredName : Swift.String) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenameAsync(desiredName: desiredName)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func RenameAsync(desiredName : Swift.String, option : Windows.Storage.NameCollisionOption) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.RenameAsync(desiredName: desiredName, option: option);
    }
    public func Rename(desiredName : Swift.String, option : Windows.Storage.NameCollisionOption) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.RenameAsync(desiredName: desiredName, option: option)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteAsync() throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.DeleteAsyncOverloadDefaultOptions();
    }
    public func Delete() async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func DeleteAsync(option : Windows.Storage.StorageDeleteOption) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.DeleteAsync(option: option);
    }
    public func Delete(option : Windows.Storage.StorageDeleteOption) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.DeleteAsync(option: option)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetBasicPropertiesAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CBasicProperties> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.GetBasicPropertiesAsync();
    }
    public func GetBasicProperties() async throws -> Optional<Windows.Storage.FileProperties.BasicProperties> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.BasicProperties(plok: self.GetBasicPropertiesAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Name() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func get_Path() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_Path();
    }
    public func get_Attributes() throws -> Windows.Storage.FileAttributes {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_Attributes();
    }
    public func get_DateCreated() throws -> Windows.Foundation.DateTime {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.get_DateCreated();
    }
    public func IsOfType(type : Windows.Storage.StorageItemTypes) throws -> boolean {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.IsOfType(type: type);
    }
    public var Attributes : Windows.Storage.FileAttributes {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.Attributes;
        }
    }
    public var DateCreated : Windows.Foundation.DateTime {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.DateCreated;
        }
    }
    public var Name : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Path : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItem = try _self.QueryInterface();
        return try _ifc.Path;
        }
    }
    public func GetThumbnailAsync(mode : Windows.Storage.FileProperties.ThumbnailMode) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CStorageItemThumbnail> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode: mode);
    }
    public func GetThumbnail(mode : Windows.Storage.FileProperties.ThumbnailMode) async throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.StorageItemThumbnail(plok: self.GetThumbnailAsync(mode: mode)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetThumbnailAsync(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CStorageItemThumbnail> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.GetThumbnailAsyncOverloadDefaultOptions(mode: mode, requestedSize: requestedSize);
    }
    public func GetThumbnail(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32) async throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.StorageItemThumbnail(plok: self.GetThumbnailAsync(mode: mode, requestedSize: requestedSize)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetThumbnailAsync(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32, options : Windows.Storage.FileProperties.ThumbnailOptions) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CFileProperties_CStorageItemThumbnail> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.GetThumbnailAsync(mode: mode, requestedSize: requestedSize, options: options);
    }
    public func GetThumbnail(mode : Windows.Storage.FileProperties.ThumbnailMode, requestedSize : Swift.UInt32, options : Windows.Storage.FileProperties.ThumbnailOptions) async throws -> Optional<Windows.Storage.FileProperties.StorageItemThumbnail> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.FileProperties.StorageItemThumbnail(plok: self.GetThumbnailAsync(mode: mode, requestedSize: requestedSize, options: options)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_DisplayName() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.get_DisplayName();
    }
    public func get_DisplayType() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.get_DisplayType();
    }
    public func get_FolderRelativeId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.get_FolderRelativeId();
    }
    public func get_Properties() throws -> Optional<Windows.Storage.FileProperties.StorageItemContentProperties> {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemContentProperties(plok: _ifc.get_Properties());
    }
    public var DisplayName : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.DisplayName;
        }
    }
    public var DisplayType : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.DisplayType;
        }
    }
    public var FolderRelativeId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try _ifc.FolderRelativeId;
        }
    }
    public var Properties : Optional<Windows.Storage.FileProperties.StorageItemContentProperties> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemProperties = try _self.QueryInterface();
        return try Windows.Storage.FileProperties.StorageItemContentProperties(plok: _ifc.Properties);
        }
    }
    public func GetIndexedStateAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CSearch_CIndexedState> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.GetIndexedStateAsync();
    }
    public func GetIndexedState() async throws -> Windows.Storage.Search.IndexedState {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetIndexedStateAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CreateFileQuery() throws -> Optional<Windows.Storage.Search.StorageFileQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageFileQueryResult(plok: _ifc.CreateFileQueryOverloadDefault());
    }
    public func CreateFileQuery(query : Windows.Storage.Search.CommonFileQuery) throws -> Optional<Windows.Storage.Search.StorageFileQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageFileQueryResult(plok: _ifc.CreateFileQuery(query: query));
    }
    public func CreateFileQueryWithOptions(queryOptions : Optional<Windows.Storage.Search.QueryOptions>) throws -> Optional<Windows.Storage.Search.StorageFileQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageFileQueryResult(plok: _ifc.CreateFileQueryWithOptions(queryOptions: queryOptions!.Interface()));
    }
    public func CreateFolderQuery() throws -> Optional<Windows.Storage.Search.StorageFolderQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageFolderQueryResult(plok: _ifc.CreateFolderQueryOverloadDefault());
    }
    public func CreateFolderQuery(query : Windows.Storage.Search.CommonFolderQuery) throws -> Optional<Windows.Storage.Search.StorageFolderQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageFolderQueryResult(plok: _ifc.CreateFolderQuery(query: query));
    }
    public func CreateFolderQueryWithOptions(queryOptions : Optional<Windows.Storage.Search.QueryOptions>) throws -> Optional<Windows.Storage.Search.StorageFolderQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageFolderQueryResult(plok: _ifc.CreateFolderQueryWithOptions(queryOptions: queryOptions!.Interface()));
    }
    public func CreateItemQuery() throws -> Optional<Windows.Storage.Search.StorageItemQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageItemQueryResult(plok: _ifc.CreateItemQuery());
    }
    public func CreateItemQueryWithOptions(queryOptions : Optional<Windows.Storage.Search.QueryOptions>) throws -> Optional<Windows.Storage.Search.StorageItemQueryResult> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try Windows.Storage.Search.StorageItemQueryResult(plok: _ifc.CreateItemQueryWithOptions(queryOptions: queryOptions!.Interface()));
    }
    public func GetFilesAsync(query : Windows.Storage.Search.CommonFileQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.GetFilesAsync(query: query, startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve);
    }
    public func GetFiles(query : Windows.Storage.Search.CommonFileQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync(query: query, startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFilesAsync(query : Windows.Storage.Search.CommonFileQuery) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.GetFilesAsyncOverloadDefaultStartAndCount(query: query);
    }
    public func GetFiles(query : Windows.Storage.Search.CommonFileQuery) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFile> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync(query: query)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFoldersAsync(query : Windows.Storage.Search.CommonFolderQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.GetFoldersAsync(query: query, startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve);
    }
    public func GetFolders(query : Windows.Storage.Search.CommonFolderQuery, startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync(query: query, startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetFoldersAsync(query : Windows.Storage.Search.CommonFolderQuery) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.GetFoldersAsyncOverloadDefaultStartAndCount(query: query);
    }
    public func GetFolders(query : Windows.Storage.Search.CommonFolderQuery) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CStorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync(query: query)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetItemsAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.GetItemsAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve);
    }
    public func GetItems(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CIStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func AreQueryOptionsSupported(queryOptions : Optional<Windows.Storage.Search.QueryOptions>) throws -> boolean {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.AreQueryOptionsSupported(queryOptions: queryOptions!.Interface());
    }
    public func IsCommonFolderQuerySupported(query : Windows.Storage.Search.CommonFolderQuery) throws -> boolean {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.IsCommonFolderQuerySupported(query: query);
    }
    public func IsCommonFileQuerySupported(query : Windows.Storage.Search.CommonFileQuery) throws -> boolean {
        let _ifc : Windows.Storage.Search.IStorageFolderQueryOperations = try _self.QueryInterface();
        return try _ifc.IsCommonFileQuerySupported(query: query);
    }
    public func GetParentAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CStorageFolder> {
        let _ifc : Windows.Storage.IStorageItem2 = try _self.QueryInterface();
        return try _ifc.GetParentAsync();
    }
    public func GetParent() async throws -> Optional<Windows.Storage.StorageFolder> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Storage.StorageFolder(plok: self.GetParentAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func IsEqual(item : Optional<Windows.Storage.IStorageItem>) throws -> boolean {
        let _ifc : Windows.Storage.IStorageItem2 = try _self.QueryInterface();
        return try _ifc.IsEqual(item: item);
    }
    public func TryGetItemAsync(name : Swift.String) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CStorage_CIStorageItem> {
        let _ifc : Windows.Storage.IStorageFolder2 = try _self.QueryInterface();
        return try _ifc.TryGetItemAsync(name: name);
    }
    public func TryGetItem(name : Swift.String) async throws -> Optional<Windows.Storage.IStorageItem> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.TryGetItemAsync(name: name)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func get_Provider() throws -> Optional<Windows.Storage.StorageProvider> {
        let _ifc : Windows.Storage.IStorageItemPropertiesWithProvider = try _self.QueryInterface();
        return try Windows.Storage.StorageProvider(plok: _ifc.get_Provider());
    }
    public var Provider : Optional<Windows.Storage.StorageProvider> {
        get throws {
        let _ifc : Windows.Storage.IStorageItemPropertiesWithProvider = try _self.QueryInterface();
        return try Windows.Storage.StorageProvider(plok: _ifc.Provider);
        }
    }
}

// type: Windows.Storage.BulkAccess.IFileInformationFactory
// interface type
open class IFileInformationFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x401d88be, Data2: 0x960f, Data3 : 0x4d6d, Data4 : (0xa7, 0xd0, 0x1a, 0x38, 0x61, 0xe7, 0x6c, 0x83)) }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.IStorageItemInformation>> GetItemsAsync(System.UInt32, System.UInt32)
    private func _n_GetItemsAsync(_ startIndex : UINT32, _ maxItemsToRetrieve : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsync(pThis, startIndex, maxItemsToRetrieve, __presult))
        }
    }
    public func GetItemsAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation>> = nil;
        try self._n_GetItemsAsync(startIndex, maxItemsToRetrieve, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation(consuming: __result);
    }
    public func GetItems(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.IStorageItemInformation>> GetItemsAsync()
    private func _n_GetItemsAsyncDefaultStartAndCount(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetItemsAsyncDefaultStartAndCount(pThis, __presult))
        }
    }
    public func GetItemsAsyncDefaultStartAndCount() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation>> = nil;
        try self._n_GetItemsAsyncDefaultStartAndCount(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation(consuming: __result);
    }
    public func GetItemsAsyncDefaultStartAndCount() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetItemsAsyncDefaultStartAndCount()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FileInformation>> GetFilesAsync(System.UInt32, System.UInt32)
    private func _n_GetFilesAsync(_ startIndex : UINT32, _ maxItemsToRetrieve : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsync(pThis, startIndex, maxItemsToRetrieve, __presult))
        }
    }
    public func GetFilesAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation>> = nil;
        try self._n_GetFilesAsync(startIndex, maxItemsToRetrieve, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation(consuming: __result);
    }
    public func GetFiles(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FileInformation>> GetFilesAsync()
    private func _n_GetFilesAsyncDefaultStartAndCount(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilesAsyncDefaultStartAndCount(pThis, __presult))
        }
    }
    public func GetFilesAsyncDefaultStartAndCount() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation>> = nil;
        try self._n_GetFilesAsyncDefaultStartAndCount(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation(consuming: __result);
    }
    public func GetFilesAsyncDefaultStartAndCount() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFileInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFilesAsyncDefaultStartAndCount()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FolderInformation>> GetFoldersAsync(System.UInt32, System.UInt32)
    private func _n_GetFoldersAsync(_ startIndex : UINT32, _ maxItemsToRetrieve : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsync(pThis, startIndex, maxItemsToRetrieve, __presult))
        }
    }
    public func GetFoldersAsync(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation>> = nil;
        try self._n_GetFoldersAsync(startIndex, maxItemsToRetrieve, &__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation(consuming: __result);
    }
    public func GetFolders(startIndex : Swift.UInt32, maxItemsToRetrieve : Swift.UInt32) async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsync(startIndex: startIndex, maxItemsToRetrieve: maxItemsToRetrieve)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Windows.Storage.BulkAccess.FolderInformation>> GetFoldersAsync()
    private func _n_GetFoldersAsyncDefaultStartAndCount(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFoldersAsyncDefaultStartAndCount(pThis, __presult))
        }
    }
    public func GetFoldersAsyncDefaultStartAndCount() throws -> Optional<ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation>> = nil;
        try self._n_GetFoldersAsyncDefaultStartAndCount(&__result);
        return ClosedGenerics.IAsyncOperation_1__cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation(consuming: __result);
    }
    public func GetFoldersAsyncDefaultStartAndCount() async throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CStorage_CBulkAccess_CFolderInformation> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.GetFoldersAsyncDefaultStartAndCount()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // System.Object GetVirtualizedItemsVector()
    private func _n_GetVirtualizedItemsVector(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVirtualizedItemsVector(pThis, __presult))
        }
    }
    public func GetVirtualizedItemsVector() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_GetVirtualizedItemsVector(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // System.Object GetVirtualizedFilesVector()
    private func _n_GetVirtualizedFilesVector(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVirtualizedFilesVector(pThis, __presult))
        }
    }
    public func GetVirtualizedFilesVector() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_GetVirtualizedFilesVector(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // System.Object GetVirtualizedFoldersVector()
    private func _n_GetVirtualizedFoldersVector(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVirtualizedFoldersVector(pThis, __presult))
        }
    }
    public func GetVirtualizedFoldersVector() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_GetVirtualizedFoldersVector(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
} // IFileInformationFactory


// type: Windows.Storage.BulkAccess.IFileInformationFactoryFactory
// interface type
// ACTIVATION INTERFACE
open class IFileInformationFactoryFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x84ea0e7d, Data2: 0xe4a2, Data3 : 0x4f00, Data4 : (0x8a, 0xfa, 0xaf, 0x5e, 0x0f, 0x82, 0x6b, 0xd5)) }
    // Windows.Storage.BulkAccess.FileInformationFactory CreateWithMode(Windows.Storage.Search.IStorageQueryResultBase, Windows.Storage.FileProperties.ThumbnailMode)
    private func _n_CreateWithMode(_ queryResult : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageQueryResultBase>>, _ mode : _q_CWindows_CStorage_CFileProperties_CThumbnailMode, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactoryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithMode(pThis, queryResult, mode, __presult))
        }
    }
    public func CreateWithMode(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode) throws -> Optional<Windows.Storage.BulkAccess.IFileInformationFactory> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>> = nil;
        try self._n_CreateWithMode(RawPointer(queryResult), mode, &__result);
        return Windows.Storage.BulkAccess.IFileInformationFactory(consuming: __result);
    }
    // Windows.Storage.BulkAccess.FileInformationFactory CreateWithModeAndSize(Windows.Storage.Search.IStorageQueryResultBase, Windows.Storage.FileProperties.ThumbnailMode, System.UInt32)
    private func _n_CreateWithModeAndSize(_ queryResult : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageQueryResultBase>>, _ mode : _q_CWindows_CStorage_CFileProperties_CThumbnailMode, _ requestedThumbnailSize : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactoryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithModeAndSize(pThis, queryResult, mode, requestedThumbnailSize, __presult))
        }
    }
    public func CreateWithModeAndSize(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode, requestedThumbnailSize : Swift.UInt32) throws -> Optional<Windows.Storage.BulkAccess.IFileInformationFactory> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>> = nil;
        try self._n_CreateWithModeAndSize(RawPointer(queryResult), mode, requestedThumbnailSize, &__result);
        return Windows.Storage.BulkAccess.IFileInformationFactory(consuming: __result);
    }
    // Windows.Storage.BulkAccess.FileInformationFactory CreateWithModeAndSizeAndOptions(Windows.Storage.Search.IStorageQueryResultBase, Windows.Storage.FileProperties.ThumbnailMode, System.UInt32, Windows.Storage.FileProperties.ThumbnailOptions)
    private func _n_CreateWithModeAndSizeAndOptions(_ queryResult : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageQueryResultBase>>, _ mode : _q_CWindows_CStorage_CFileProperties_CThumbnailMode, _ requestedThumbnailSize : UINT32, _ thumbnailOptions : _q_CWindows_CStorage_CFileProperties_CThumbnailOptions, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactoryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithModeAndSizeAndOptions(pThis, queryResult, mode, requestedThumbnailSize, thumbnailOptions, __presult))
        }
    }
    public func CreateWithModeAndSizeAndOptions(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode, requestedThumbnailSize : Swift.UInt32, thumbnailOptions : Windows.Storage.FileProperties.ThumbnailOptions) throws -> Optional<Windows.Storage.BulkAccess.IFileInformationFactory> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>> = nil;
        try self._n_CreateWithModeAndSizeAndOptions(RawPointer(queryResult), mode, requestedThumbnailSize, thumbnailOptions, &__result);
        return Windows.Storage.BulkAccess.IFileInformationFactory(consuming: __result);
    }
    // Windows.Storage.BulkAccess.FileInformationFactory CreateWithModeAndSizeAndOptionsAndFlags(Windows.Storage.Search.IStorageQueryResultBase, Windows.Storage.FileProperties.ThumbnailMode, System.UInt32, Windows.Storage.FileProperties.ThumbnailOptions, bool)
    private func _n_CreateWithModeAndSizeAndOptionsAndFlags(_ queryResult : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CSearch_CIStorageQueryResultBase>>, _ mode : _q_CWindows_CStorage_CFileProperties_CThumbnailMode, _ requestedThumbnailSize : UINT32, _ thumbnailOptions : _q_CWindows_CStorage_CFileProperties_CThumbnailOptions, _ delayLoad : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIFileInformationFactoryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithModeAndSizeAndOptionsAndFlags(pThis, queryResult, mode, requestedThumbnailSize, thumbnailOptions, delayLoad, __presult))
        }
    }
    public func CreateWithModeAndSizeAndOptionsAndFlags(queryResult : Optional<Windows.Storage.Search.IStorageQueryResultBase>, mode : Windows.Storage.FileProperties.ThumbnailMode, requestedThumbnailSize : Swift.UInt32, thumbnailOptions : Windows.Storage.FileProperties.ThumbnailOptions, delayLoad : boolean) throws -> Optional<Windows.Storage.BulkAccess.IFileInformationFactory> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CBulkAccess_CIFileInformationFactory>> = nil;
        try self._n_CreateWithModeAndSizeAndOptionsAndFlags(RawPointer(queryResult), mode, requestedThumbnailSize, thumbnailOptions, delayLoad, &__result);
        return Windows.Storage.BulkAccess.IFileInformationFactory(consuming: __result);
    }
} // IFileInformationFactoryFactory


// type: Windows.Storage.BulkAccess.IStorageItemInformation
// interface type
open class IStorageItemInformation
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x87a5cb8b, Data2: 0x8972, Data3 : 0x4f40, Data4 : (0x8d, 0xe0, 0xd8, 0x6f, 0xb1, 0x79, 0xd8, 0xfa)) }
    // [IsSpecialName] Windows.Storage.FileProperties.MusicProperties get_MusicProperties()
    private func _n_get_MusicProperties(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIMusicProperties>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MusicProperties(pThis, __presult))
        }
    }
    public func get_MusicProperties() throws -> Optional<Windows.Storage.FileProperties.IMusicProperties> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIMusicProperties>> = nil;
        try self._n_get_MusicProperties(&__result);
        return Windows.Storage.FileProperties.IMusicProperties(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.FileProperties.VideoProperties get_VideoProperties()
    private func _n_get_VideoProperties(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIVideoProperties>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VideoProperties(pThis, __presult))
        }
    }
    public func get_VideoProperties() throws -> Optional<Windows.Storage.FileProperties.IVideoProperties> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIVideoProperties>> = nil;
        try self._n_get_VideoProperties(&__result);
        return Windows.Storage.FileProperties.IVideoProperties(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.FileProperties.ImageProperties get_ImageProperties()
    private func _n_get_ImageProperties(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIImageProperties>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ImageProperties(pThis, __presult))
        }
    }
    public func get_ImageProperties() throws -> Optional<Windows.Storage.FileProperties.IImageProperties> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIImageProperties>> = nil;
        try self._n_get_ImageProperties(&__result);
        return Windows.Storage.FileProperties.IImageProperties(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.FileProperties.DocumentProperties get_DocumentProperties()
    private func _n_get_DocumentProperties(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIDocumentProperties>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DocumentProperties(pThis, __presult))
        }
    }
    public func get_DocumentProperties() throws -> Optional<Windows.Storage.FileProperties.IDocumentProperties> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIDocumentProperties>> = nil;
        try self._n_get_DocumentProperties(&__result);
        return Windows.Storage.FileProperties.IDocumentProperties(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.FileProperties.BasicProperties get_BasicProperties()
    private func _n_get_BasicProperties(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIBasicProperties>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BasicProperties(pThis, __presult))
        }
    }
    public func get_BasicProperties() throws -> Optional<Windows.Storage.FileProperties.IBasicProperties> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CFileProperties_CIBasicProperties>> = nil;
        try self._n_get_BasicProperties(&__result);
        return Windows.Storage.FileProperties.IBasicProperties(consuming: __result);
    }
    // [IsSpecialName] Windows.Storage.FileProperties.StorageItemThumbnail get_Thumbnail()
    private func _n_get_Thumbnail(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Thumbnail(pThis, __presult))
        }
    }
    public func get_Thumbnail() throws -> Optional<Windows.Storage.Streams.IRandomAccessStreamWithContentType> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType>> = nil;
        try self._n_get_Thumbnail(&__result);
        return Windows.Storage.Streams.IRandomAccessStreamWithContentType(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ThumbnailUpdated(Windows.Foundation.TypedEventHandler<Windows.Storage.BulkAccess.IStorageItemInformation,System.Object>)
    private func _n_add_ThumbnailUpdated(_ changedHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ThumbnailUpdated(pThis, changedHandler, __presult))
        }
    }
    public func add_ThumbnailUpdated(changedHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ThumbnailUpdated(RawPointer(changedHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ThumbnailUpdated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ThumbnailUpdated(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ThumbnailUpdated(pThis, eventCookie))
        }
    }
    public func remove_ThumbnailUpdated(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ThumbnailUpdated(eventCookie);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PropertiesUpdated(Windows.Foundation.TypedEventHandler<Windows.Storage.BulkAccess.IStorageItemInformation,System.Object>)
    private func _n_add_PropertiesUpdated(_ changedHandler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PropertiesUpdated(pThis, changedHandler, __presult))
        }
    }
    public func add_PropertiesUpdated(changedHandler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PropertiesUpdated(RawPointer(changedHandler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PropertiesUpdated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PropertiesUpdated(_ eventCookie : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CStorage_CBulkAccess_CIStorageItemInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PropertiesUpdated(pThis, eventCookie))
        }
    }
    public func remove_PropertiesUpdated(eventCookie : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PropertiesUpdated(eventCookie);
    }
    public var BasicProperties : Optional<Windows.Storage.FileProperties.IBasicProperties> {
        get throws {
            return try get_BasicProperties();
        }
    }
    public var DocumentProperties : Optional<Windows.Storage.FileProperties.IDocumentProperties> {
        get throws {
            return try get_DocumentProperties();
        }
    }
    public var ImageProperties : Optional<Windows.Storage.FileProperties.IImageProperties> {
        get throws {
            return try get_ImageProperties();
        }
    }
    public var MusicProperties : Optional<Windows.Storage.FileProperties.IMusicProperties> {
        get throws {
            return try get_MusicProperties();
        }
    }
    public var Thumbnail : Optional<Windows.Storage.Streams.IRandomAccessStreamWithContentType> {
        get throws {
            return try get_Thumbnail();
        }
    }
    public var VideoProperties : Optional<Windows.Storage.FileProperties.IVideoProperties> {
        get throws {
            return try get_VideoProperties();
        }
    }
} // IStorageItemInformation


}
