// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsSdk;

extension Windows.Web.UI.Interop {
// type: Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs
// interface type
open class IWebViewControlAcceleratorKeyPressedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x77a2a53e, Data2: 0x7c74, Data3 : 0x437d, Data4 : (0xa2, 0x90, 0x3a, 0xc0, 0xd8, 0xcd, 0x56, 0x55)) }
    // [IsSpecialName] Windows.UI.Core.CoreAcceleratorKeyEventType get_EventType()
    private func _n_get_EventType(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EventType(pThis, __presult))
        }
    }
    public func get_EventType() throws -> Windows.UI.Core.CoreAcceleratorKeyEventType {
        var __result : _q_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType = _q_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_Character;
        try self._n_get_EventType(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.System.VirtualKey get_VirtualKey()
    private func _n_get_VirtualKey(_ __presult: UnsafeMutablePointer<_q_CWindows_CSystem_CVirtualKey>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VirtualKey(pThis, __presult))
        }
    }
    public func get_VirtualKey() throws -> Windows.System.VirtualKey {
        var __result : _q_CWindows_CSystem_CVirtualKey = _q_CWindows_CSystem_CVirtualKey_None;
        try self._n_get_VirtualKey(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Core.CorePhysicalKeyStatus get_KeyStatus()
    private func _n_get_KeyStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CCore_CCorePhysicalKeyStatus>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStatus(pThis, __presult))
        }
    }
    public func get_KeyStatus() throws -> Windows.UI.Core.CorePhysicalKeyStatus {
        var __result : _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus = _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus(RepeatCount: 0, ScanCode: 0, IsExtendedKey: 0, IsMenuKeyDown: 0, WasKeyDown: 0, IsKeyReleased: 0);
        try self._n_get_KeyStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage get_RoutingStage()
    private func _n_get_RoutingStage(_ __presult: UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RoutingStage(pThis, __presult))
        }
    }
    public func get_RoutingStage() throws -> Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage {
        var __result : _q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage = _q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage_Tunneling;
        try self._n_get_RoutingStage(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Handled()
    private func _n_get_Handled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, __presult))
        }
    }
    public func get_Handled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Handled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Handled(bool)
    private func _n_put_Handled(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlAcceleratorKeyPressedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, value))
        }
    }
    public func put_Handled(value : boolean) throws -> Void {
        try self._n_put_Handled(value);
    }
    public var EventType : Windows.UI.Core.CoreAcceleratorKeyEventType {
        get throws {
            return try get_EventType();
        }
    }
    public var Handled : boolean {
        get throws {
            return try get_Handled();
        }
    }
    public var KeyStatus : Windows.UI.Core.CorePhysicalKeyStatus {
        get throws {
            return try get_KeyStatus();
        }
    }
    public var RoutingStage : Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage {
        get throws {
            return try get_RoutingStage();
        }
    }
    public var VirtualKey : Windows.System.VirtualKey {
        get throws {
            return try get_VirtualKey();
        }
    }
} // IWebViewControlAcceleratorKeyPressedEventArgs


// type: Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs
// interface type
open class IWebViewControlMoveFocusRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6b2a340d, Data2: 0x4bd0, Data3 : 0x405e, Data4 : (0xb7, 0xc1, 0x1e, 0x72, 0xa4, 0x92, 0xf4, 0x46)) }
    // [IsSpecialName] Windows.Web.UI.Interop.WebViewControlMoveFocusReason get_Reason()
    private func _n_get_Reason(_ __presult: UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlMoveFocusRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Reason(pThis, __presult))
        }
    }
    public func get_Reason() throws -> Windows.Web.UI.Interop.WebViewControlMoveFocusReason {
        var __result : _q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason = _q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason_Programmatic;
        try self._n_get_Reason(&__result);
        return __result;
    }
    public var Reason : Windows.Web.UI.Interop.WebViewControlMoveFocusReason {
        get throws {
            return try get_Reason();
        }
    }
} // IWebViewControlMoveFocusRequestedEventArgs


// type: Windows.Web.UI.Interop.IWebViewControlProcess
// interface type
open class IWebViewControlProcess
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x02c723ec, Data2: 0x98d6, Data3 : 0x424a, Data4 : (0xb6, 0x3e, 0xc6, 0x13, 0x6c, 0x36, 0xa0, 0xf2)) }
    // [IsSpecialName] System.UInt32 get_ProcessId()
    private func _n_get_ProcessId(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProcessId(pThis, __presult))
        }
    }
    public func get_ProcessId() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_ProcessId(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_EnterpriseId()
    private func _n_get_EnterpriseId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnterpriseId(pThis, __presult))
        }
    }
    public func get_EnterpriseId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_EnterpriseId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] bool get_IsPrivateNetworkClientServerCapabilityEnabled()
    private func _n_get_IsPrivateNetworkClientServerCapabilityEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPrivateNetworkClientServerCapabilityEnabled(pThis, __presult))
        }
    }
    public func get_IsPrivateNetworkClientServerCapabilityEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsPrivateNetworkClientServerCapabilityEnabled(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.Web.UI.Interop.WebViewControl> CreateWebViewControlAsync(System.Int64, Windows.Foundation.Rect)
    private func _n_CreateWebViewControlAsync(_ hostWindowHandle : INT64, _ bounds : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWebViewControlAsync(pThis, hostWindowHandle, bounds, __presult))
        }
    }
    public func CreateWebViewControlAsync(hostWindowHandle : Swift.Int64, bounds : Windows.Foundation.Rect) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>> = nil;
        try self._n_CreateWebViewControlAsync(hostWindowHandle, bounds, &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(consuming: __result);
    }
    public func CreateWebViewControl(hostWindowHandle : Swift.Int64, bounds : Windows.Foundation.Rect) async throws -> Optional<Windows.Web.UI.IWebViewControl> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CreateWebViewControlAsync(hostWindowHandle: hostWindowHandle, bounds: bounds)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Web.UI.Interop.WebViewControl> GetWebViewControls()
    private func _n_GetWebViewControls(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetWebViewControls(pThis, __presult))
        }
    }
    public func GetWebViewControls() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl>> = nil;
        try self._n_GetWebViewControls(&__result);
        return ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl(consuming: __result);
    }
    // void Terminate()
    private func _n_Terminate() throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Terminate(pThis))
        }
    }
    public func Terminate() throws -> Void {
        try self._n_Terminate();
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ProcessExited(Windows.Foundation.TypedEventHandler<Windows.Web.UI.Interop.WebViewControlProcess,System.Object>)
    private func _n_add_ProcessExited(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ProcessExited(pThis, handler, __presult))
        }
    }
    public func add_ProcessExited(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ProcessExited(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ProcessExited(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ProcessExited(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ProcessExited(pThis, token))
        }
    }
    public func remove_ProcessExited(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ProcessExited(token);
    }
    public var EnterpriseId : Swift.String {
        get throws {
            return try get_EnterpriseId();
        }
    }
    public var IsPrivateNetworkClientServerCapabilityEnabled : boolean {
        get throws {
            return try get_IsPrivateNetworkClientServerCapabilityEnabled();
        }
    }
    public var ProcessId : Swift.UInt32 {
        get throws {
            return try get_ProcessId();
        }
    }
} // IWebViewControlProcess


// type: Windows.Web.UI.Interop.IWebViewControlProcessFactory
// interface type
// ACTIVATION INTERFACE
open class IWebViewControlProcessFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x47b65cf9, Data2: 0xa2d2, Data3 : 0x453c, Data4 : (0xb0, 0x97, 0xf6, 0x77, 0x9d, 0x4b, 0x8e, 0x02)) }
    // Windows.Web.UI.Interop.WebViewControlProcess CreateWithOptions(Windows.Web.UI.Interop.WebViewControlProcessOptions)
    private func _n_CreateWithOptions(_ processOptions : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithOptions(pThis, processOptions, __presult))
        }
    }
    public func CreateWithOptions(processOptions : Optional<Windows.Web.UI.Interop.IWebViewControlProcessOptions>) throws -> Optional<Windows.Web.UI.Interop.IWebViewControlProcess> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess>> = nil;
        try self._n_CreateWithOptions(RawPointer(processOptions), &__result);
        return Windows.Web.UI.Interop.IWebViewControlProcess(consuming: __result);
    }
} // IWebViewControlProcessFactory


// type: Windows.Web.UI.Interop.IWebViewControlProcessOptions
// interface type
open class IWebViewControlProcessOptions
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1cca72a7, Data2: 0x3bd6, Data3 : 0x4826, Data4 : (0x82, 0x61, 0x6c, 0x81, 0x89, 0x50, 0x5d, 0x89)) }
    // [IsSpecialName] void put_EnterpriseId(System.String)
    private func _n_put_EnterpriseId(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_EnterpriseId(pThis, value))
        }
    }
    public func put_EnterpriseId(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_EnterpriseId(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_EnterpriseId()
    private func _n_get_EnterpriseId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnterpriseId(pThis, __presult))
        }
    }
    public func get_EnterpriseId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_EnterpriseId(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_PrivateNetworkClientServerCapability(Windows.Web.UI.Interop.WebViewControlProcessCapabilityState)
    private func _n_put_PrivateNetworkClientServerCapability(_ value : _q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_PrivateNetworkClientServerCapability(pThis, value))
        }
    }
    public func put_PrivateNetworkClientServerCapability(value : Windows.Web.UI.Interop.WebViewControlProcessCapabilityState) throws -> Void {
        try self._n_put_PrivateNetworkClientServerCapability(value);
    }
    // [IsSpecialName] Windows.Web.UI.Interop.WebViewControlProcessCapabilityState get_PrivateNetworkClientServerCapability()
    private func _n_get_PrivateNetworkClientServerCapability(_ __presult: UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcessOptions.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PrivateNetworkClientServerCapability(pThis, __presult))
        }
    }
    public func get_PrivateNetworkClientServerCapability() throws -> Windows.Web.UI.Interop.WebViewControlProcessCapabilityState {
        var __result : _q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState = _q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState_Default;
        try self._n_get_PrivateNetworkClientServerCapability(&__result);
        return __result;
    }
    public var EnterpriseId : Swift.String {
        get throws {
            return try get_EnterpriseId();
        }
    }
    public var PrivateNetworkClientServerCapability : Windows.Web.UI.Interop.WebViewControlProcessCapabilityState {
        get throws {
            return try get_PrivateNetworkClientServerCapability();
        }
    }
} // IWebViewControlProcessOptions


// type: Windows.Web.UI.Interop.IWebViewControlSite
// interface type
open class IWebViewControlSite
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x133f47c6, Data2: 0x12dc, Data3 : 0x4898, Data4 : (0xbd, 0x47, 0x04, 0x96, 0x7d, 0xe6, 0x48, 0xba)) }
    // [IsSpecialName] Windows.Web.UI.Interop.WebViewControlProcess get_Process()
    private func _n_get_Process(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess>>>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Process(pThis, __presult))
        }
    }
    public func get_Process() throws -> Optional<Windows.Web.UI.Interop.IWebViewControlProcess> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CWeb_CUI_CInterop_CIWebViewControlProcess>> = nil;
        try self._n_get_Process(&__result);
        return Windows.Web.UI.Interop.IWebViewControlProcess(consuming: __result);
    }
    // [IsSpecialName] void put_Scale(System.Double)
    private func _n_put_Scale(_ value : DOUBLE) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Scale(pThis, value))
        }
    }
    public func put_Scale(value : Swift.Double) throws -> Void {
        try self._n_put_Scale(value);
    }
    // [IsSpecialName] System.Double get_Scale()
    private func _n_get_Scale(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scale(pThis, __presult))
        }
    }
    public func get_Scale() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Scale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Bounds(Windows.Foundation.Rect)
    private func _n_put_Bounds(_ value : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bounds(pThis, value))
        }
    }
    public func put_Bounds(value : Windows.Foundation.Rect) throws -> Void {
        try self._n_put_Bounds(value);
    }
    // [IsSpecialName] Windows.Foundation.Rect get_Bounds()
    private func _n_get_Bounds(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, __presult))
        }
    }
    public func get_Bounds() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_Bounds(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsVisible(bool)
    private func _n_put_IsVisible(_ value : boolean) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsVisible(pThis, value))
        }
    }
    public func put_IsVisible(value : boolean) throws -> Void {
        try self._n_put_IsVisible(value);
    }
    // [IsSpecialName] bool get_IsVisible()
    private func _n_get_IsVisible(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsVisible(pThis, __presult))
        }
    }
    public func get_IsVisible() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsVisible(&__result);
        return __result;
    }
    // void Close()
    private func _n_Close() throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
        }
    }
    public func Close() throws -> Void {
        try self._n_Close();
    }
    // void MoveFocus(Windows.Web.UI.Interop.WebViewControlMoveFocusReason)
    private func _n_MoveFocus(_ reason : _q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveFocus(pThis, reason))
        }
    }
    public func MoveFocus(reason : Windows.Web.UI.Interop.WebViewControlMoveFocusReason) throws -> Void {
        try self._n_MoveFocus(reason);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_MoveFocusRequested(Windows.Foundation.TypedEventHandler<Windows.Web.UI.Interop.WebViewControl,Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs>)
    private func _n_add_MoveFocusRequested(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_MoveFocusRequested(pThis, handler, __presult))
        }
    }
    public func add_MoveFocusRequested(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_MoveFocusRequested(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_MoveFocusRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_MoveFocusRequested(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MoveFocusRequested(pThis, token))
        }
    }
    public func remove_MoveFocusRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_MoveFocusRequested(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_AcceleratorKeyPressed(Windows.Foundation.TypedEventHandler<Windows.Web.UI.Interop.WebViewControl,Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs>)
    private func _n_add_AcceleratorKeyPressed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_AcceleratorKeyPressed(pThis, handler, __presult))
        }
    }
    public func add_AcceleratorKeyPressed(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_AcceleratorKeyPressed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_AcceleratorKeyPressed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_AcceleratorKeyPressed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AcceleratorKeyPressed(pThis, token))
        }
    }
    public func remove_AcceleratorKeyPressed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_AcceleratorKeyPressed(token);
    }
    public var Bounds : Windows.Foundation.Rect {
        get throws {
            return try get_Bounds();
        }
    }
    public var IsVisible : boolean {
        get throws {
            return try get_IsVisible();
        }
    }
    public var Process : Optional<Windows.Web.UI.Interop.IWebViewControlProcess> {
        get throws {
            return try get_Process();
        }
    }
    public var Scale : Swift.Double {
        get throws {
            return try get_Scale();
        }
    }
} // IWebViewControlSite


// type: Windows.Web.UI.Interop.IWebViewControlSite2
// interface type
open class IWebViewControlSite2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd13b2e3f, Data2: 0x48ee, Data3 : 0x4730, Data4 : (0x82, 0x43, 0xd2, 0xed, 0x0c, 0x05, 0x60, 0x6a)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_GotFocus(Windows.Foundation.TypedEventHandler<Windows.Web.UI.Interop.WebViewControl,System.Object>)
    private func _n_add_GotFocus(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_GotFocus(pThis, handler, __presult))
        }
    }
    public func add_GotFocus(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_GotFocus(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_GotFocus(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_GotFocus(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GotFocus(pThis, token))
        }
    }
    public func remove_GotFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_GotFocus(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_LostFocus(Windows.Foundation.TypedEventHandler<Windows.Web.UI.Interop.WebViewControl,System.Object>)
    private func _n_add_LostFocus(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_LostFocus(pThis, handler, __presult))
        }
    }
    public func add_LostFocus(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_LostFocus(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_LostFocus(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_LostFocus(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CWeb_CUI_CInterop_CIWebViewControlSite2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LostFocus(pThis, token))
        }
    }
    public func remove_LostFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_LostFocus(token);
    }
} // IWebViewControlSite2


// type: Windows.Web.UI.Interop.WebViewControl
// runtime class
public class WebViewControl
    :
    WinRT.Object
{
    private var _self : Windows.Web.UI.IWebViewControl;
    public init(plok: Windows.Web.UI.IWebViewControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.UI.IWebViewControl { return _self; }
    public func get_Source() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_Source());
    }
    public func put_Source(source : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.put_Source(source: source!.Interface());
    }
    public func get_DocumentTitle() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.get_DocumentTitle();
    }
    public func get_CanGoBack() throws -> boolean {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.get_CanGoBack();
    }
    public func get_CanGoForward() throws -> boolean {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.get_CanGoForward();
    }
    public func put_DefaultBackgroundColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.put_DefaultBackgroundColor(value: value);
    }
    public func get_DefaultBackgroundColor() throws -> Windows.UI.Color {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.get_DefaultBackgroundColor();
    }
    public func get_ContainsFullScreenElement() throws -> boolean {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.get_ContainsFullScreenElement();
    }
    public func get_Settings() throws -> Optional<Windows.Web.UI.WebViewControlSettings> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try Windows.Web.UI.WebViewControlSettings(plok: _ifc.get_Settings());
    }
    public func get_DeferredPermissionRequests() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CUI_CWebViewControlDeferredPermissionRequest> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.get_DeferredPermissionRequests();
    }
    public func GoForward() throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.GoForward();
    }
    public func GoBack() throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.GoBack();
    }
    public func Refresh() throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.Refresh();
    }
    public func Stop() throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public func Navigate(source : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.Navigate(source: source!.Interface());
    }
    public func NavigateToString(text : Swift.String) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.NavigateToString(text: text);
    }
    public func NavigateToLocalStreamUri(source : Optional<Windows.Foundation.Uri>, streamResolver : Optional<Windows.Web.IUriToStreamResolver>) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.NavigateToLocalStreamUri(source: source!.Interface(), streamResolver: streamResolver);
    }
    public func NavigateWithHttpRequestMessage(requestMessage : Optional<Windows.Web.Http.HttpRequestMessage>) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.NavigateWithHttpRequestMessage(requestMessage: requestMessage!.Interface());
    }
    public func InvokeScriptAsync(scriptName : Swift.String, arguments : Optional<ClosedGenerics.IIterable_1_HSTRING>) throws -> Optional<ClosedGenerics.IAsyncOperation_1_HSTRING> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.InvokeScriptAsync(scriptName: scriptName, arguments: arguments);
    }
    public func InvokeScript(scriptName : Swift.String, arguments : Optional<ClosedGenerics.IIterable_1_HSTRING>) async throws -> Optional<Swift.String> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.InvokeScriptAsync(scriptName: scriptName, arguments: arguments)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CapturePreviewToStreamAsync(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.CapturePreviewToStreamAsync(stream: stream);
    }
    public func CapturePreviewToStream(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.CapturePreviewToStreamAsync(stream: stream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func CaptureSelectedContentToDataPackageAsync() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackage> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.CaptureSelectedContentToDataPackageAsync();
    }
    public func CaptureSelectedContentToDataPackage() async throws -> Optional<Windows.ApplicationModel.DataTransfer.DataPackage> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.ApplicationModel.DataTransfer.DataPackage(plok: self.CaptureSelectedContentToDataPackageAsync()!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func BuildLocalStreamUri(contentIdentifier : Swift.String, relativePath : Swift.String) throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BuildLocalStreamUri(contentIdentifier: contentIdentifier, relativePath: relativePath));
    }
    public func GetDeferredPermissionRequestById(id : Swift.UInt32, result : inout Optional<Windows.Web.UI.WebViewControlDeferredPermissionRequest>) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
            var _tmp_out_result: Optional<Windows.Web.UI.IWebViewControlDeferredPermissionRequest> = nil;
        return try _ifc.GetDeferredPermissionRequestById(id: id, result: &_tmp_out_result);
    }
    public func add_NavigationStarting(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlNavigationStartingEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_NavigationStarting(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlNavigationStartingEventArgs(cb: handler).Interface());
    }
    public func remove_NavigationStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_NavigationStarting(token: token);
    }
    public func add_ContentLoading(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlContentLoadingEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_ContentLoading(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlContentLoadingEventArgs(cb: handler).Interface());
    }
    public func remove_ContentLoading(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_ContentLoading(token: token);
    }
    public func add_DOMContentLoaded(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_DOMContentLoaded(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlDOMContentLoadedEventArgs(cb: handler).Interface());
    }
    public func remove_DOMContentLoaded(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_DOMContentLoaded(token: token);
    }
    public func add_NavigationCompleted(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_NavigationCompleted(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlNavigationCompletedEventArgs(cb: handler).Interface());
    }
    public func remove_NavigationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_NavigationCompleted(token: token);
    }
    public func add_FrameNavigationStarting(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlNavigationStartingEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_FrameNavigationStarting(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlNavigationStartingEventArgs(cb: handler).Interface());
    }
    public func remove_FrameNavigationStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_FrameNavigationStarting(token: token);
    }
    public func add_FrameContentLoading(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlContentLoadingEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_FrameContentLoading(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlContentLoadingEventArgs(cb: handler).Interface());
    }
    public func remove_FrameContentLoading(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_FrameContentLoading(token: token);
    }
    public func add_FrameDOMContentLoaded(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlDOMContentLoadedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_FrameDOMContentLoaded(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlDOMContentLoadedEventArgs(cb: handler).Interface());
    }
    public func remove_FrameDOMContentLoaded(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_FrameDOMContentLoaded(token: token);
    }
    public func add_FrameNavigationCompleted(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlNavigationCompletedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_FrameNavigationCompleted(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlNavigationCompletedEventArgs(cb: handler).Interface());
    }
    public func remove_FrameNavigationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_FrameNavigationCompleted(token: token);
    }
    public func add_ScriptNotify(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlScriptNotifyEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_ScriptNotify(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlScriptNotifyEventArgs(cb: handler).Interface());
    }
    public func remove_ScriptNotify(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_ScriptNotify(token: token);
    }
    public func add_LongRunningScriptDetected(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlLongRunningScriptDetectedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_LongRunningScriptDetected(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlLongRunningScriptDetectedEventArgs(cb: handler).Interface());
    }
    public func remove_LongRunningScriptDetected(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_LongRunningScriptDetected(token: token);
    }
    public func add_UnsafeContentWarningDisplaying(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_UnsafeContentWarningDisplaying(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl_IInspectable(cb: handler).Interface());
    }
    public func remove_UnsafeContentWarningDisplaying(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_UnsafeContentWarningDisplaying(token: token);
    }
    public func add_UnviewableContentIdentified(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlUnviewableContentIdentifiedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_UnviewableContentIdentified(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlUnviewableContentIdentifiedEventArgs(cb: handler).Interface());
    }
    public func remove_UnviewableContentIdentified(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_UnviewableContentIdentified(token: token);
    }
    public func add_PermissionRequested(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlPermissionRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_PermissionRequested(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlPermissionRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_PermissionRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_PermissionRequested(token: token);
    }
    public func add_UnsupportedUriSchemeIdentified(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlUnsupportedUriSchemeIdentifiedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_UnsupportedUriSchemeIdentified(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlUnsupportedUriSchemeIdentifiedEventArgs(cb: handler).Interface());
    }
    public func remove_UnsupportedUriSchemeIdentified(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_UnsupportedUriSchemeIdentified(token: token);
    }
    public func add_NewWindowRequested(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlNewWindowRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_NewWindowRequested(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlNewWindowRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_NewWindowRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_NewWindowRequested(token: token);
    }
    public func add_ContainsFullScreenElementChanged(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_ContainsFullScreenElementChanged(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl_IInspectable(cb: handler).Interface());
    }
    public func remove_ContainsFullScreenElementChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_ContainsFullScreenElementChanged(token: token);
    }
    public func add_WebResourceRequested(handler : @escaping (Optional<Windows.Web.UI.IWebViewControl>, Optional<Windows.Web.UI.WebViewControlWebResourceRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.add_WebResourceRequested(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CIWebViewControl__q_CWindows_CWeb_CUI_CWebViewControlWebResourceRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_WebResourceRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.remove_WebResourceRequested(token: token);
    }
    public var CanGoBack : boolean {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.CanGoBack;
        }
    }
    public var CanGoForward : boolean {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.CanGoForward;
        }
    }
    public var ContainsFullScreenElement : boolean {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.ContainsFullScreenElement;
        }
    }
    public var DefaultBackgroundColor : Windows.UI.Color {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.DefaultBackgroundColor;
        }
    }
    public var DeferredPermissionRequests : Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CUI_CWebViewControlDeferredPermissionRequest> {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.DeferredPermissionRequests;
        }
    }
    public var DocumentTitle : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try _ifc.DocumentTitle;
        }
    }
    public var Settings : Optional<Windows.Web.UI.WebViewControlSettings> {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try Windows.Web.UI.WebViewControlSettings(plok: _ifc.Settings);
        }
    }
    public var Source : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Windows.Web.UI.IWebViewControl = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.Source);
        }
    }
    public func get_Process() throws -> Optional<Windows.Web.UI.Interop.WebViewControlProcess> {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try Windows.Web.UI.Interop.WebViewControlProcess(plok: _ifc.get_Process());
    }
    public func put_Scale(value : Swift.Double) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.put_Scale(value: value);
    }
    public func get_Scale() throws -> Swift.Double {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.get_Scale();
    }
    public func put_Bounds(value : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.put_Bounds(value: value);
    }
    public func get_Bounds() throws -> Windows.Foundation.Rect {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.get_Bounds();
    }
    public func put_IsVisible(value : boolean) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.put_IsVisible(value: value);
    }
    public func get_IsVisible() throws -> boolean {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.get_IsVisible();
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func MoveFocus(reason : Windows.Web.UI.Interop.WebViewControlMoveFocusReason) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.MoveFocus(reason: reason);
    }
    public func add_MoveFocusRequested(handler : @escaping (Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.add_MoveFocusRequested(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_MoveFocusRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.remove_MoveFocusRequested(token: token);
    }
    public func add_AcceleratorKeyPressed(handler : @escaping (Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.add_AcceleratorKeyPressed(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl__q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyPressedEventArgs(cb: handler).Interface());
    }
    public func remove_AcceleratorKeyPressed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.remove_AcceleratorKeyPressed(token: token);
    }
    public var Bounds : Windows.Foundation.Rect {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.Bounds;
        }
    }
    public var IsVisible : boolean {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.IsVisible;
        }
    }
    public var Process : Optional<Windows.Web.UI.Interop.WebViewControlProcess> {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try Windows.Web.UI.Interop.WebViewControlProcess(plok: _ifc.Process);
        }
    }
    public var Scale : Swift.Double {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite = try _self.QueryInterface();
        return try _ifc.Scale;
        }
    }
    public func AddInitializeScript(script : Swift.String) throws -> Void {
        let _ifc : Windows.Web.UI.IWebViewControl2 = try _self.QueryInterface();
        return try _ifc.AddInitializeScript(script: script);
    }
    public func add_GotFocus(handler : @escaping (Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite2 = try _self.QueryInterface();
        return try _ifc.add_GotFocus(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable(cb: handler).Interface());
    }
    public func remove_GotFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite2 = try _self.QueryInterface();
        return try _ifc.remove_GotFocus(token: token);
    }
    public func add_LostFocus(handler : @escaping (Optional<Windows.Web.UI.Interop.WebViewControl>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite2 = try _self.QueryInterface();
        return try _ifc.add_LostFocus(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControl_IInspectable(cb: handler).Interface());
    }
    public func remove_LostFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlSite2 = try _self.QueryInterface();
        return try _ifc.remove_LostFocus(token: token);
    }
}

// type: Windows.Web.UI.Interop.WebViewControlAcceleratorKeyPressedEventArgs
// runtime class
public class WebViewControlAcceleratorKeyPressedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs;
    public init(plok: Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs { return _self; }
    public func get_EventType() throws -> Windows.UI.Core.CoreAcceleratorKeyEventType {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.get_EventType();
    }
    public func get_VirtualKey() throws -> Windows.System.VirtualKey {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.get_VirtualKey();
    }
    public func get_KeyStatus() throws -> Windows.UI.Core.CorePhysicalKeyStatus {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.get_KeyStatus();
    }
    public func get_RoutingStage() throws -> Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.get_RoutingStage();
    }
    public func get_Handled() throws -> boolean {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Handled();
    }
    public func put_Handled(value : boolean) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.put_Handled(value: value);
    }
    public var EventType : Windows.UI.Core.CoreAcceleratorKeyEventType {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.EventType;
        }
    }
    public var Handled : boolean {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.Handled;
        }
    }
    public var KeyStatus : Windows.UI.Core.CorePhysicalKeyStatus {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.KeyStatus;
        }
    }
    public var RoutingStage : Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.RoutingStage;
        }
    }
    public var VirtualKey : Windows.System.VirtualKey {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlAcceleratorKeyPressedEventArgs = try _self.QueryInterface();
        return try _ifc.VirtualKey;
        }
    }
}

// type: Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage
// enum type
public typealias WebViewControlAcceleratorKeyRoutingStage = _q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage;

// type: Windows.Web.UI.Interop.WebViewControlMoveFocusReason
// enum type
public typealias WebViewControlMoveFocusReason = _q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason;

// type: Windows.Web.UI.Interop.WebViewControlMoveFocusRequestedEventArgs
// runtime class
public class WebViewControlMoveFocusRequestedEventArgs
    :
    WinRT.Object
{
    private var _self : Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs;
    public init(plok: Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs { return _self; }
    public func get_Reason() throws -> Windows.Web.UI.Interop.WebViewControlMoveFocusReason {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Reason();
    }
    public var Reason : Windows.Web.UI.Interop.WebViewControlMoveFocusReason {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlMoveFocusRequestedEventArgs = try _self.QueryInterface();
        return try _ifc.Reason;
        }
    }
}

// type: Windows.Web.UI.Interop.WebViewControlProcess
// runtime class
public class WebViewControlProcess
    :
    WinRT.Object
{
    private var _self : Windows.Web.UI.Interop.IWebViewControlProcess;
    public init(plok: Windows.Web.UI.Interop.IWebViewControlProcess?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.UI.Interop.IWebViewControlProcess { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.UI.Interop.WebViewControlProcess")
        try super.init(plok: _self.QueryInterface())
    }
    public init(processOptions : Optional<Windows.Web.UI.Interop.WebViewControlProcessOptions>) throws {
        let _af : IWebViewControlProcessFactory = try RoGetActivationFactory("Windows.Web.UI.Interop.WebViewControlProcess");
        _self = try _af.CreateWithOptions(processOptions: processOptions!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_ProcessId() throws -> Swift.UInt32 {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.get_ProcessId();
    }
    public func get_EnterpriseId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.get_EnterpriseId();
    }
    public func get_IsPrivateNetworkClientServerCapabilityEnabled() throws -> boolean {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.get_IsPrivateNetworkClientServerCapabilityEnabled();
    }
    public func CreateWebViewControlAsync(hostWindowHandle : Swift.Int64, bounds : Windows.Foundation.Rect) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl> {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.CreateWebViewControlAsync(hostWindowHandle: hostWindowHandle, bounds: bounds);
    }
    public func CreateWebViewControl(hostWindowHandle : Swift.Int64, bounds : Windows.Foundation.Rect) async throws -> Optional<Windows.Web.UI.Interop.WebViewControl> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Windows.Web.UI.Interop.WebViewControl(plok: self.CreateWebViewControlAsync(hostWindowHandle: hostWindowHandle, bounds: bounds)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func GetWebViewControls() throws -> Optional<ClosedGenerics.IVectorView_1__q_CWindows_CWeb_CUI_CInterop_CWebViewControl> {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.GetWebViewControls();
    }
    public func Terminate() throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.Terminate();
    }
    public func add_ProcessExited(handler : @escaping (Optional<Windows.Web.UI.Interop.WebViewControlProcess>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.add_ProcessExited(handler: ClosedGenerics.impl_TypedEventHandler_2__q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcess_IInspectable(cb: handler).Interface());
    }
    public func remove_ProcessExited(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.remove_ProcessExited(token: token);
    }
    public var EnterpriseId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.EnterpriseId;
        }
    }
    public var IsPrivateNetworkClientServerCapabilityEnabled : boolean {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.IsPrivateNetworkClientServerCapabilityEnabled;
        }
    }
    public var ProcessId : Swift.UInt32 {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcess = try _self.QueryInterface();
        return try _ifc.ProcessId;
        }
    }
}

// type: Windows.Web.UI.Interop.WebViewControlProcessCapabilityState
// enum type
public typealias WebViewControlProcessCapabilityState = _q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState;

// type: Windows.Web.UI.Interop.WebViewControlProcessOptions
// runtime class
public class WebViewControlProcessOptions
    :
    WinRT.Object
{
    private var _self : Windows.Web.UI.Interop.IWebViewControlProcessOptions;
    public init(plok: Windows.Web.UI.Interop.IWebViewControlProcessOptions?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Windows.Web.UI.Interop.IWebViewControlProcessOptions { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Windows.Web.UI.Interop.WebViewControlProcessOptions")
        try super.init(plok: _self.QueryInterface())
    }
    public func put_EnterpriseId(value : Swift.String) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcessOptions = try _self.QueryInterface();
        return try _ifc.put_EnterpriseId(value: value);
    }
    public func get_EnterpriseId() throws -> Optional<Swift.String> {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcessOptions = try _self.QueryInterface();
        return try _ifc.get_EnterpriseId();
    }
    public func put_PrivateNetworkClientServerCapability(value : Windows.Web.UI.Interop.WebViewControlProcessCapabilityState) throws -> Void {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcessOptions = try _self.QueryInterface();
        return try _ifc.put_PrivateNetworkClientServerCapability(value: value);
    }
    public func get_PrivateNetworkClientServerCapability() throws -> Windows.Web.UI.Interop.WebViewControlProcessCapabilityState {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcessOptions = try _self.QueryInterface();
        return try _ifc.get_PrivateNetworkClientServerCapability();
    }
    public var EnterpriseId : Optional<Swift.String> {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcessOptions = try _self.QueryInterface();
        return try _ifc.EnterpriseId;
        }
    }
    public var PrivateNetworkClientServerCapability : Windows.Web.UI.Interop.WebViewControlProcessCapabilityState {
        get throws {
        let _ifc : Windows.Web.UI.Interop.IWebViewControlProcessOptions = try _self.QueryInterface();
        return try _ifc.PrivateNetworkClientServerCapability;
        }
    }
}

}
extension Windows.Web.UI.Interop.WebViewControlAcceleratorKeyRoutingStage {
    public static var Tunneling : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage_Tunneling;
        }
    }
    public static var Bubbling : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlAcceleratorKeyRoutingStage_Bubbling;
        }
    }
}
extension Windows.Web.UI.Interop.WebViewControlMoveFocusReason {
    public static var Programmatic : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason_Programmatic;
        }
    }
    public static var Next : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason_Next;
        }
    }
    public static var Previous : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlMoveFocusReason_Previous;
        }
    }
}
extension Windows.Web.UI.Interop.WebViewControlProcessCapabilityState {
    public static var Default : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState_Default;
        }
    }
    public static var Disabled : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState_Disabled;
        }
    }
    public static var Enabled : Self {
        get {
            return _q_CWindows_CWeb_CUI_CInterop_CWebViewControlProcessCapabilityState_Enabled;
        }
    }
}
