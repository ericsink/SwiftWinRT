// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.

// forward decls for delegates
// enums
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Straight = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Ignore = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Antialiased = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Aliased = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Auto = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Bmp = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Png = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Jpeg = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Tiff = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Gif = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_JpegXR = 6,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_SourceOver = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Copy = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Min = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Add = 3,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalized = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalizedSrgb = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16UIntNormalized = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16Float = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision32Float = 4,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOver = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOver = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceIn = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationIn = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOut = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOut = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceAtop = 6,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationAtop = 7,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Xor = 8,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Add = 9,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Copy = 10,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_BoundedCopy = 11,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_MaskInvert = 12,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Floor = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Round = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Ceiling = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Linear = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Cubic = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_MultiSampleLinear = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Anisotropic = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_HighQualityCubic = 5,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_InitializeFromBackground = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_IgnoreAlpha = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_ClampToSourceRect = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_Bitmap = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits
{
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Dips = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Pixels = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_Aliased = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_Antialiased = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_AliasedAndInflated = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_NoPixelSnap = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Clip = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_EnableColorFont = 4,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Right = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Center = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Justified = 3,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Uniform = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Proportional = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_NoSideBearings = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Auto = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_ClearType = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Grayscale = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Aliased = 3,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenTopToBottom = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenBottomToTop = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenBottomToTop = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenLeftToRight = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenLeftToRight = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenRightToLeft = 6,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenRightToLeft = 7,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Disable = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Enable = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_Natural = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiClassic = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiNatural = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Aliased = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiClassic = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiNatural = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Natural = 4,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetric = 5,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Outline = 6,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetricDownsampled = 7,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Character = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Word = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_Ellipsis = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Bottom = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Center = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Stacked = 1,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_NoWrap = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_EmergencyBreak = 2,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_WholeWord = 3,
    _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Character = 4,
} _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping;
typedef enum _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason_FirstTime = 0,
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason_NewDevice = 1,
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason_DpiChanged = 2,
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason;
// forward decls for value types
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;
// forward decls for interfaces
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs;
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory;
// forward decls for parameterized interfaces
typedef struct _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision;
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap;
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs;
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs;
// definition of structs for value types
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch
{
    _q_CWindows_CFoundation_CNumerics_CVector2 Point00;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point01;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point02;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point03;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point10;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point11;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point12;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point13;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point20;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point21;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point22;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point23;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point30;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point31;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point32;
    _q_CWindows_CFoundation_CNumerics_CVector2 Point33;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color00;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color03;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color30;
    _q_CWindows_CFoundation_CNumerics_CVector4 Color33;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge00To03;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge03To33;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge33To30;
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge Edge30To00;
};
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph
{
    INT32 Index;
    FLOAT Advance;
    FLOAT AdvanceOffset;
    FLOAT AscenderOffset;
};
// definitions for delegates
// definitions for interface types
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* This, TrustLevel* trustLevel);
    void* unneeded_get_Opacity;
    void* unneeded_put_Opacity;
    void* unneeded_get_Transform;
    void* unneeded_put_Transform;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush
{
    _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* This, TrustLevel* trustLevel);
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* This, TrustLevel* trustLevel);
    void* unneeded_CombineWith;
    void* unneeded_CombineWithUsingFlatteningTolerance;
    void* unneeded_Stroke;
    void* unneeded_StrokeWithStrokeStyle;
    void* unneeded_StrokeWithAllOptions;
    void* unneeded_Outline;
    void* unneeded_OutlineWithTransformAndFlatteningTolerance;
    void* unneeded_Simplify;
    void* unneeded_SimplifyWithTransformAndFlatteningTolerance;
    void* unneeded_Transform;
    void* unneeded_CompareWith;
    void* unneeded_CompareWithUsingTransformAndFlatteningTolerance;
    void* unneeded_ComputeArea;
    void* unneeded_ComputeAreaWithTransformAndFlatteningTolerance;
    void* unneeded_ComputePathLength;
    void* unneeded_ComputePathLengthWithTransformAndFlatteningTolerance;
    void* unneeded_ComputePointOnPath;
    void* unneeded_ComputePointOnPathWithTangent;
    void* unneeded_ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent;
    void* unneeded_FillContainsPoint;
    void* unneeded_FillContainsPointWithTransformAndFlatteningTolerance;
    void* unneeded_ComputeBounds;
    void* unneeded_ComputeBoundsWithTransform;
    void* unneeded_ComputeStrokeBounds;
    void* unneeded_ComputeStrokeBoundsWithStrokeStyle;
    void* unneeded_ComputeStrokeBoundsWithAllOptions;
    void* unneeded_StrokeContainsPoint;
    void* unneeded_StrokeContainsPointWithStrokeStyle;
    void* unneeded_StrokeContainsPointWithAllOptions;
    void* unneeded_Tessellate;
    void* unneeded_TessellateWithTransformAndFlatteningTolerance;
    void* unneeded_SendPathTo;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* This, TrustLevel* trustLevel);
    void* unneeded_get_Patches;
    void* unneeded_GetBounds;
    void* unneeded_GetBoundsWithTransform;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 patchElementsLength, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch* patchElements, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMeshFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* This, TrustLevel* trustLevel);
    void* unneeded_get_StartCap;
    void* unneeded_put_StartCap;
    void* unneeded_get_EndCap;
    void* unneeded_put_EndCap;
    void* unneeded_get_DashCap;
    void* unneeded_put_DashCap;
    void* unneeded_get_LineJoin;
    void* unneeded_put_LineJoin;
    void* unneeded_get_MiterLimit;
    void* unneeded_put_MiterLimit;
    void* unneeded_get_DashStyle;
    void* unneeded_put_DashStyle;
    void* unneeded_get_DashOffset;
    void* unneeded_put_DashOffset;
    void* unneeded_get_CustomDashStyle;
    void* unneeded_put_CustomDashStyle;
    void* unneeded_get_TransformBehavior;
    void* unneeded_put_TransformBehavior;
} _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle
{
    _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyleVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer* This, TrustLevel* trustLevel);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayerVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_SizeInPixels)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CGraphics_CImaging_CBitmapSize* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Bounds)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CFoundation_CRect* __pret);
    HRESULT (STDMETHODCALLTYPE* get_Format)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat* __pret);
    HRESULT (STDMETHODCALLTYPE* get_AlphaMode)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode* __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToFileAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, HSTRING fileName, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToFileWithBitmapFileFormatAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, HSTRING fileName, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToFileWithBitmapFileFormatAndQualityAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, HSTRING fileName, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, FLOAT quality, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToStreamAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* SaveToStreamWithQualityAsync)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat fileFormat, FLOAT quality, _q_CWindows_CFoundation_CIAsyncAction** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytes)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32* __pretLength, UINT8** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, INT32 left, INT32 top, INT32 width, INT32 height, UINT32* __pretLength, UINT8** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithBuffer)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* GetPixelBytesWithBufferAndSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* GetPixelColors)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32* __pretLength, _q_CWindows_CUI_CColor** __pret);
    HRESULT (STDMETHODCALLTYPE* GetPixelColorsWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, INT32 left, INT32 top, INT32 width, INT32 height, UINT32* __pretLength, _q_CWindows_CUI_CColor** __pret);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytes)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, UINT8* valueElements);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, UINT8* valueElements, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithBuffer)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer);
    HRESULT (STDMETHODCALLTYPE* SetPixelBytesWithBufferAndSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* SetPixelColors)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, _q_CWindows_CUI_CColor* valueElements);
    HRESULT (STDMETHODCALLTYPE* SetPixelColorsWithSubrectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, UINT32 valueElementsLength, _q_CWindows_CUI_CColor* valueElements, INT32 left, INT32 top, INT32 width, INT32 height);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmap)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmapWithDestPoint)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap, INT32 destX, INT32 destY);
    HRESULT (STDMETHODCALLTYPE* CopyPixelsFromBitmapWithDestPointAndSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* otherBitmap, INT32 destX, INT32 destY, INT32 sourceRectLeft, INT32 sourceRectTop, INT32 sourceRectWidth, INT32 sourceRectHeight);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11Surface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromDirect3D11SurfaceWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CDirectX_CDirect3D11_CIDirect3DSurface* surface, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytes)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 bytesLength, UINT8* bytes, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 bytesLength, UINT8* bytes, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 bytesLength, UINT8* bytes, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBuffer)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBufferAndDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromBytesWithBufferAndDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIBuffer* buffer, INT32 widthInPixels, INT32 heightInPixels, _q_CWindows_CGraphics_CDirectX_CDirectXPixelFormat format, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromColors)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 colorsLength, _q_CWindows_CUI_CColor* colors, INT32 widthInPixels, INT32 heightInPixels, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromColorsWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 colorsLength, _q_CWindows_CUI_CColor* colors, INT32 widthInPixels, INT32 heightInPixels, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromColorsWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, UINT32 colorsLength, _q_CWindows_CUI_CColor* colors, INT32 widthInPixels, INT32 heightInPixels, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateFromSoftwareBitmap)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CGraphics_CImaging_CISoftwareBitmap* sourceBitmap, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstring)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING fileName, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstringWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING fileName, FLOAT dpi, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromHstringWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING fileName, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUri)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, FLOAT dpi, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromUriWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CIUriRuntimeClass* uri, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStream)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithDpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, FLOAT dpi, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* LoadAsyncFromStreamWithDpiAndAlpha)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CStorage_CStreams_CIRandomAccessStream* stream, FLOAT dpi, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode alpha, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStatics
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmapStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* This, TrustLevel* trustLevel);
    void* unneeded_get_ForceSoftwareRenderer;
    void* unneeded_get_MaximumBitmapSizeInPixels;
    void* unneeded_IsPixelFormatSupported;
    void* unneeded_IsBufferPrecisionSupported;
    void* unneeded_get_MaximumCacheSize;
    void* unneeded_put_MaximumCacheSize;
    void* unneeded_get_LowPriority;
    void* unneeded_put_LowPriority;
    void* unneeded_add_DeviceLost;
    void* unneeded_remove_DeviceLost;
    void* unneeded_IsDeviceLost;
    void* unneeded_RaiseDeviceLost;
    void* unneeded_Lock;
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateWithForceSoftwareRendererOption)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory* pThis, boolean forceSoftwareRenderer, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasDeviceFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Clear)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* ClearHdr)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector4 color);
    HRESULT (STDMETHODCALLTYPE* Flush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOrigin)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffset)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoords)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, _q_CWindows_CFoundation_CRect destinationRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRect)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* image, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasComposite composite);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, FLOAT x, FLOAT y, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap* bitmap, _q_CWindows_CFoundation_CRect destinationRectangle, _q_CWindows_CFoundation_CRect sourceRectangle, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CWindows_CFoundation_CNumerics_CMatrix4x4 perspective);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point0, _q_CWindows_CFoundation_CNumerics_CVector2 point1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x0, FLOAT y0, FLOAT x1, FLOAT y1, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRectangleWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillRectangleAtCoordsWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CRect rect, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillRoundedRectangleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT w, FLOAT h, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillEllipseWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillEllipseAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillEllipseWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillEllipseAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radiusX, FLOAT radiusY, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillCircleWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillCircleAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillCircleWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 centerPoint, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillCircleAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT x, FLOAT y, FLOAT radius, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CRect rectangle, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectCoordsWithBrushAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, _q_CWindows_CFoundation_CRect rectangle, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtPointCoordsWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawTextAtRectCoordsWithColorAndFormat)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, HSTRING text, FLOAT x, FLOAT y, FLOAT w, FLOAT h, _q_CWindows_CUI_CColor color, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* format);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrushAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColorAndStrokeWidth)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color, FLOAT strokeWidth);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color, FLOAT strokeWidth, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle* strokeStyle);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithBrushAndOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush);
    HRESULT (STDMETHODCALLTYPE* FillGeometryAtOriginWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* geometry, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CWindows_CFoundation_CNumerics_CVector2 offset, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtOriginWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawCachedGeometryAtOriginWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry* geometry, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutAtCoordsWithBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, FLOAT x, FLOAT y, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawTextLayoutAtCoordsWithColor)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* textLayout, FLOAT x, FLOAT y, _q_CWindows_CUI_CColor color);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMeshAtOrigin)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMesh)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh, _q_CWindows_CFoundation_CNumerics_CVector2 point);
    HRESULT (STDMETHODCALLTYPE* DrawGradientMeshAtCoords)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh* gradientMesh, FLOAT x, FLOAT y);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtOrigin)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument, _q_CWindows_CFoundation_CSize viewportSize);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtPoint)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument, _q_CWindows_CFoundation_CSize viewportSize, _q_CWindows_CFoundation_CNumerics_CVector2 point);
    HRESULT (STDMETHODCALLTYPE* DrawSvgAtCoords)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* svgDocument, _q_CWindows_CFoundation_CSize viewportSize, FLOAT x, FLOAT y);
    HRESULT (STDMETHODCALLTYPE* get_Antialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Antialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing value);
    HRESULT (STDMETHODCALLTYPE* get_Blend)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Blend)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasBlend value);
    HRESULT (STDMETHODCALLTYPE* get_TextAntialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextAntialiasing)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing value);
    HRESULT (STDMETHODCALLTYPE* get_TextRenderingParameters)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters** __pret);
    HRESULT (STDMETHODCALLTYPE* put_TextRenderingParameters)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* value);
    HRESULT (STDMETHODCALLTYPE* get_Transform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CMatrix3x2* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Transform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 value);
    HRESULT (STDMETHODCALLTYPE* get_Units)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Units)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasUnits value);
    HRESULT (STDMETHODCALLTYPE* get_EffectBufferPrecision)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision** __pret);
    HRESULT (STDMETHODCALLTYPE* put_EffectBufferPrecision)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* value);
    HRESULT (STDMETHODCALLTYPE* get_EffectTileSize)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CGraphics_CImaging_CBitmapSize* __pret);
    HRESULT (STDMETHODCALLTYPE* put_EffectTileSize)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CGraphics_CImaging_CBitmapSize value);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacity)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrush)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipRectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CWindows_CFoundation_CRect clipRectangle, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipRectangle)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CWindows_CFoundation_CRect clipRectangle, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipGeometry)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipGeometry)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityAndClipGeometryAndTransform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithOpacityBrushAndClipGeometryAndTransform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateLayerWithAllOptions)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, FLOAT opacity, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* opacityBrush, _q_CWindows_CFoundation_CRect clipRectangle, _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry* clipGeometry, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 geometryTransform, _q_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions options, _q_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer** __pret);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRun)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace, FLOAT fontSize, UINT32 glyphsLength, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs, boolean isSideways, UINT32 bidiLevel, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRunWithMeasuringMode)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace, FLOAT fontSize, UINT32 glyphsLength, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs, boolean isSideways, UINT32 bidiLevel, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode);
    HRESULT (STDMETHODCALLTYPE* DrawGlyphRunWithMeasuringModeAndDescription)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CWindows_CFoundation_CNumerics_CVector2 point, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* fontFace, FLOAT fontSize, UINT32 glyphsLength, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph* glyphs, boolean isSideways, UINT32 bidiLevel, _q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush* brush, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode measuringMode, HSTRING localeName, HSTRING textString, UINT32 clusterMapIndicesLength, INT32* clusterMapIndices, UINT32 textPosition);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatch)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortMode)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortModeAndInterpolation)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
    HRESULT (STDMETHODCALLTYPE* CreateSpriteBatchWithSortModeAndInterpolationAndOptions)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* pThis, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode sortMode, _q_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation interpolation, _q_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions options, _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSessionVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetBounds)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CRect* __pret);
    HRESULT (STDMETHODCALLTYPE* GetBoundsWithTransform)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasImage* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CWindows_CFoundation_CNumerics_CMatrix3x2 transform, _q_CWindows_CFoundation_CRect* __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasImage
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasImageVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Device)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Dpi)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* ConvertPixelsToDips)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* pThis, INT32 pixels, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* ConvertDipsToPixels)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi* pThis, FLOAT dips, _q_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding dpiRounding, INT32* __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpi
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreatorWithDpiVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch* This, TrustLevel* trustLevel);
    void* unneeded_DrawToRect;
    void* unneeded_DrawAtOffset;
    void* unneeded_DrawWithTransform;
    void* unneeded_DrawToRectWithTint;
    void* unneeded_DrawAtOffsetWithTint;
    void* unneeded_DrawWithTransformAndTint;
    void* unneeded_DrawToRectWithTintAndFlip;
    void* unneeded_DrawWithTransformAndTintAndFlip;
    void* unneeded_DrawAtOffsetWithTintAndTransform;
    void* unneeded_DrawFromSpriteSheetToRect;
    void* unneeded_DrawFromSpriteSheetAtOffset;
    void* unneeded_DrawFromSpriteSheetWithTransform;
    void* unneeded_DrawFromSpriteSheetToRectWithTint;
    void* unneeded_DrawFromSpriteSheetAtOffsetWithTint;
    void* unneeded_DrawFromSpriteSheetWithTransformAndTint;
    void* unneeded_DrawFromSpriteSheetToRectWithTintAndFlip;
    void* unneeded_DrawFromSpriteSheetWithTransformAndTintAndFlip;
    void* unneeded_DrawFromSpriteSheetAtOffsetWithTintAndTransform;
} _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch
{
    _q_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatchVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument* This, TrustLevel* trustLevel);
    void* unneeded_get_Device;
    void* unneeded_GetXml;
    void* unneeded_SaveAsync;
    void* unneeded_put_Root;
    void* unneeded_get_Root;
    void* unneeded_FindElementById;
    void* unneeded_CreatePaintAttributeWithDefaults;
    void* unneeded_CreatePaintAttribute;
    void* unneeded_CreatePathAttributeWithDefaults;
    void* unneeded_CreatePathAttribute;
    void* unneeded_CreatePointsAttributeWithDefaults;
    void* unneeded_CreatePointsAttribute;
    void* unneeded_CreateStrokeDashArrayAttributeWithDefaults;
    void* unneeded_CreateStrokeDashArrayAttribute;
    void* unneeded_LoadElementFromXml;
    void* unneeded_LoadElementAsync;
} _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument
{
    _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* CreateEmpty)(_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace* This, TrustLevel* trustLevel);
    void* unneeded_GetRecommendedRenderingMode;
    void* unneeded_GetRecommendedRenderingModeWithAllOptions;
    void* unneeded_GetRecommendedGridFit;
    void* unneeded_get_GlyphBox;
    void* unneeded_get_SubscriptPosition;
    void* unneeded_get_SubscriptSize;
    void* unneeded_get_SuperscriptPosition;
    void* unneeded_get_SuperscriptSize;
    void* unneeded_get_HasTypographicMetrics;
    void* unneeded_get_Ascent;
    void* unneeded_get_Descent;
    void* unneeded_get_LineGap;
    void* unneeded_get_CapHeight;
    void* unneeded_get_LowercaseLetterHeight;
    void* unneeded_get_UnderlinePosition;
    void* unneeded_get_UnderlineThickness;
    void* unneeded_get_StrikethroughPosition;
    void* unneeded_get_StrikethroughThickness;
    void* unneeded_get_CaretSlopeRise;
    void* unneeded_get_CaretSlopeRun;
    void* unneeded_get_CaretOffset;
    void* unneeded_get_UnicodeRanges;
    void* unneeded_get_IsMonospaced;
    void* unneeded_GetVerticalGlyphVariants;
    void* unneeded_get_HasVerticalGlyphVariants;
    void* unneeded_get_FileFormatType;
    void* unneeded_get_Simulations;
    void* unneeded_get_IsSymbolFont;
    void* unneeded_get_GlyphCount;
    void* unneeded_GetGlyphIndices;
    void* unneeded_GetGlyphMetrics;
    void* unneeded_GetGdiCompatibleGlyphMetrics;
    void* unneeded_get_Weight;
    void* unneeded_get_Stretch;
    void* unneeded_get_Style;
    void* unneeded_get_FamilyNames;
    void* unneeded_get_FaceNames;
    void* unneeded_GetInformationalStrings;
    void* unneeded_HasCharacter;
    void* unneeded_GetGlyphRunBounds;
    void* unneeded_GetGlyphRunBoundsWithMeasuringMode;
    void* unneeded_get_Panose;
    void* unneeded_GetSupportedTypographicFeatureNames;
    void* unneeded_GetSupportedTypographicFeatureNamesWithLocale;
    void* unneeded_GetTypographicFeatureGlyphSupport;
    void* unneeded_GetTypographicFeatureGlyphSupportWithLocale;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFaceVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Direction)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Direction)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection value);
    HRESULT (STDMETHODCALLTYPE* get_FontFamily)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontFamily)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_FontSize)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontSize)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_FontStretch)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStretch* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStretch)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStretch value);
    HRESULT (STDMETHODCALLTYPE* get_FontStyle)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStyle* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontStyle)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontStyle value);
    HRESULT (STDMETHODCALLTYPE* get_FontWeight)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontWeight* __pret);
    HRESULT (STDMETHODCALLTYPE* put_FontWeight)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CWindows_CUI_CText_CFontWeight value);
    HRESULT (STDMETHODCALLTYPE* get_IncrementalTabStop)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_IncrementalTabStop)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacing)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineSpacing)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacingBaseline)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineSpacingBaseline)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, FLOAT value);
    HRESULT (STDMETHODCALLTYPE* get_LocaleName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LocaleName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_VerticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_HorizontalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_HorizontalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingGranularity)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingGranularity)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingDelimiter)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingDelimiter)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingDelimiterCount)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, INT32* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingDelimiterCount)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, INT32 value);
    HRESULT (STDMETHODCALLTYPE* get_WordWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping* __pret);
    HRESULT (STDMETHODCALLTYPE* put_WordWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping value);
    HRESULT (STDMETHODCALLTYPE* get_Options)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions* __pret);
    HRESULT (STDMETHODCALLTYPE* put_Options)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions value);
    HRESULT (STDMETHODCALLTYPE* get_VerticalGlyphOrientation)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation* __pret);
    HRESULT (STDMETHODCALLTYPE* put_VerticalGlyphOrientation)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation value);
    HRESULT (STDMETHODCALLTYPE* get_OpticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment* __pret);
    HRESULT (STDMETHODCALLTYPE* put_OpticalAlignment)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment value);
    HRESULT (STDMETHODCALLTYPE* get_LastLineWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LastLineWrapping)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_LineSpacingMode)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode* __pret);
    HRESULT (STDMETHODCALLTYPE* put_LineSpacingMode)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode value);
    HRESULT (STDMETHODCALLTYPE* get_TrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign* __pret);
    HRESULT (STDMETHODCALLTYPE* put_TrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign value);
    HRESULT (STDMETHODCALLTYPE* get_CustomTrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject** __pret);
    HRESULT (STDMETHODCALLTYPE* put_CustomTrimmingSign)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* value);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* GetSystemFontFamilies)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* pThis, UINT32* __pretLength, HSTRING** __pret);
    HRESULT (STDMETHODCALLTYPE* GetSystemFontFamiliesFromLocaleList)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics* pThis, _cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING* localeList, UINT32* __pretLength, HSTRING** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStaticsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject* This, TrustLevel* trustLevel);
    void* unneeded_Draw;
    void* unneeded_get_Size;
    void* unneeded_get_Baseline;
    void* unneeded_get_SupportsSideways;
    void* unneeded_get_DrawBounds;
    void* unneeded_get_BreakBefore;
    void* unneeded_get_BreakAfter;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout* This, TrustLevel* trustLevel);
    void* unneeded_GetFormatChangeIndices;
    void* unneeded_get_Direction;
    void* unneeded_put_Direction;
    void* unneeded_get_DefaultFontFamily;
    void* unneeded_get_DefaultFontSize;
    void* unneeded_get_DefaultFontStretch;
    void* unneeded_get_DefaultFontStyle;
    void* unneeded_get_DefaultFontWeight;
    void* unneeded_get_IncrementalTabStop;
    void* unneeded_put_IncrementalTabStop;
    void* unneeded_get_LineSpacing;
    void* unneeded_put_LineSpacing;
    void* unneeded_get_LineSpacingBaseline;
    void* unneeded_put_LineSpacingBaseline;
    void* unneeded_get_DefaultLocaleName;
    void* unneeded_get_VerticalAlignment;
    void* unneeded_put_VerticalAlignment;
    void* unneeded_get_HorizontalAlignment;
    void* unneeded_put_HorizontalAlignment;
    void* unneeded_get_TrimmingGranularity;
    void* unneeded_put_TrimmingGranularity;
    void* unneeded_get_TrimmingDelimiter;
    void* unneeded_put_TrimmingDelimiter;
    void* unneeded_get_TrimmingDelimiterCount;
    void* unneeded_put_TrimmingDelimiterCount;
    void* unneeded_get_WordWrapping;
    void* unneeded_put_WordWrapping;
    void* unneeded_get_Options;
    void* unneeded_put_Options;
    void* unneeded_get_LineSpacingMode;
    void* unneeded_put_LineSpacingMode;
    void* unneeded_get_TrimmingSign;
    void* unneeded_put_TrimmingSign;
    void* unneeded_get_CustomTrimmingSign;
    void* unneeded_put_CustomTrimmingSign;
    void* unneeded_get_RequestedSize;
    void* unneeded_put_RequestedSize;
    void* unneeded_GetMinimumLineLength;
    void* unneeded_GetBrush;
    void* unneeded_GetCustomBrush;
    void* unneeded_GetFontFamily;
    void* unneeded_GetFontSize;
    void* unneeded_GetFontStretch;
    void* unneeded_GetFontStyle;
    void* unneeded_GetFontWeight;
    void* unneeded_GetLocaleName;
    void* unneeded_GetStrikethrough;
    void* unneeded_GetUnderline;
    void* unneeded_GetInlineObject;
    void* unneeded_SetColor;
    void* unneeded_SetBrush;
    void* unneeded_SetCustomBrush;
    void* unneeded_SetFontFamily;
    void* unneeded_SetFontSize;
    void* unneeded_SetFontStretch;
    void* unneeded_SetFontStyle;
    void* unneeded_SetFontWeight;
    void* unneeded_SetLocaleName;
    void* unneeded_SetStrikethrough;
    void* unneeded_SetUnderline;
    void* unneeded_SetInlineObject;
    void* unneeded_DrawToTextRenderer;
    void* unneeded_DrawToTextRendererWithCoords;
    void* unneeded_get_LineMetrics;
    void* unneeded_get_ClusterMetrics;
    void* unneeded_SetTypography;
    void* unneeded_GetTypography;
    void* unneeded_get_LayoutBounds;
    void* unneeded_get_LayoutBoundsIncludingTrailingWhitespace;
    void* unneeded_get_LineCount;
    void* unneeded_get_MaximumBidiReorderingDepth;
    void* unneeded_get_DrawBounds;
    void* unneeded_HitTest;
    void* unneeded_HitTestWithCoords;
    void* unneeded_HitTestWithDescription;
    void* unneeded_HitTestWithDescriptionAndCoords;
    void* unneeded_HitTestWithDescriptionAndTrailingSide;
    void* unneeded_HitTestWithDescriptionAndCoordsAndTrailingSide;
    void* unneeded_GetCaretPosition;
    void* unneeded_GetCaretPositionWithDescription;
    void* unneeded_GetCharacterRegions;
    void* unneeded_GetPairKerning;
    void* unneeded_SetPairKerning;
    void* unneeded_GetLeadingCharacterSpacing;
    void* unneeded_GetTrailingCharacterSpacing;
    void* unneeded_GetMinimumCharacterAdvance;
    void* unneeded_SetCharacterSpacing;
    void* unneeded_get_VerticalGlyphOrientation;
    void* unneeded_put_VerticalGlyphOrientation;
    void* unneeded_get_OpticalAlignment;
    void* unneeded_put_OpticalAlignment;
    void* unneeded_get_LastLineWrapping;
    void* unneeded_put_LastLineWrapping;
    void* unneeded_get_Device;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator* resourceCreator, HSTRING textString, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat* textFormat, FLOAT requestedWidth, FLOAT requestedHeight, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters* This, TrustLevel* trustLevel);
    void* unneeded_get_RenderingMode;
    void* unneeded_get_GridFit;
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode textRenderingMode, _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit gridFit, _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_Reason)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason* __pret);
    HRESULT (STDMETHODCALLTYPE* TrackAsyncAction)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* pThis, _q_CWindows_CFoundation_CIAsyncAction* action);
    HRESULT (STDMETHODCALLTYPE* GetTrackedAction)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* pThis, _q_CWindows_CFoundation_CIAsyncAction** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesReason createResourcesReason, _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgsFactoryVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* add_CreateResources)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* value, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_CreateResources)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* get_ReadyToDraw)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* add_Draw)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* value, _q_CWindows_CFoundation_CEventRegistrationToken* __pret);
    HRESULT (STDMETHODCALLTYPE* remove_Draw)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CFoundation_CEventRegistrationToken token);
    HRESULT (STDMETHODCALLTYPE* put_ClearColor)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CUI_CColor value);
    HRESULT (STDMETHODCALLTYPE* get_ClearColor)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CUI_CColor* __pret);
    HRESULT (STDMETHODCALLTYPE* Invalidate)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis);
    HRESULT (STDMETHODCALLTYPE* get_Size)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CWindows_CFoundation_CSize* __pret);
    HRESULT (STDMETHODCALLTYPE* RemoveFromVisualTree)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis);
    HRESULT (STDMETHODCALLTYPE* get_UseSharedDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_UseSharedDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_ForceSoftwareRenderer)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean* __pret);
    HRESULT (STDMETHODCALLTYPE* put_ForceSoftwareRenderer)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, boolean value);
    HRESULT (STDMETHODCALLTYPE* get_CustomDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice** __pret);
    HRESULT (STDMETHODCALLTYPE* put_CustomDevice)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice* value);
    HRESULT (STDMETHODCALLTYPE* get_DpiScale)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, FLOAT* __pret);
    HRESULT (STDMETHODCALLTYPE* put_DpiScale)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* pThis, FLOAT ratio);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControlVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* get_DrawingSession)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsVtbl* lpVtbl;
};
typedef struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This);
    ULONG (STDMETHODCALLTYPE* Release)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* Create)(_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession* canvasDrawingSession, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs** __pret);
} _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl;
struct _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory
{
    _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactoryVtbl* lpVtbl;
};
// definitions for parameterized interfaces
typedef struct _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecisionVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision* This, TrustLevel* trustLevel);
    void* unneeded_get_Value;
} _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecisionVtbl;
struct _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
{
    _cg_CWindows_CFoundation_IReference_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecisionVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    HRESULT (STDMETHODCALLTYPE* GetIids)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, ULONG* iidCount, IID** iids);
    HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, HSTRING* className);
    HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, TrustLevel* trustLevel);
    HRESULT (STDMETHODCALLTYPE* put_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap** __pret);
    HRESULT (STDMETHODCALLTYPE* GetResults)(_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _q_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap** __pret);
} _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap
{
    _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* pThis, _cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap* asyncInfo, _q_CWindows_CFoundation_CAsyncStatus asyncStatus);
} _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl;
struct _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmap
{
    _cg_CWindows_CFoundation_IAsyncOperationCompletedHandler_1__q_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* sender, _q_CMicrosoft_CGraphics_CCanvas_CUI_CICanvasCreateResourcesEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgsVtbl* lpVtbl;
};
typedef struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgsVtbl
{
    HRESULT (STDMETHODCALLTYPE* QueryInterface)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* This, REFIID riid, void** ppvObject);
    ULONG (STDMETHODCALLTYPE* AddRef)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* This);
    ULONG (STDMETHODCALLTYPE* Release)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* This);
    HRESULT (STDMETHODCALLTYPE* Invoke)(_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs* pThis, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl* sender, _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs* args);
} _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgsVtbl;
struct _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs
{
    _cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgsVtbl* lpVtbl;
};
