// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
import CWindowsApp;
@_spi(IUnknown) import WinRT;

import WindowsApp;
extension Microsoft.Graphics.Canvas.UI.Xaml {
// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl
// runtime class
public class CanvasControl
    :
    Microsoft.UI.Xaml.Controls.UserControl
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl")
        try super.init(plok: _self.QueryInterface())
    }
    public func add_CreateResources(value : @escaping (Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl>, Optional<Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.add_CreateResources(value: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs(cb: value).Interface());
    }
    public func remove_CreateResources(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.remove_CreateResources(token: token);
    }
    public func get_ReadyToDraw() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_ReadyToDraw();
    }
    public func add_Draw(value : @escaping (Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl>, Optional<Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.add_Draw(value: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs(cb: value).Interface());
    }
    public func remove_Draw(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.remove_Draw(token: token);
    }
    public func put_ClearColor(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_ClearColor(value: value);
    }
    public func get_ClearColor() throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_ClearColor();
    }
    public func Invalidate() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.Invalidate();
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func RemoveFromVisualTree() throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.RemoveFromVisualTree();
    }
    public func get_UseSharedDevice() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_UseSharedDevice();
    }
    public func put_UseSharedDevice(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_UseSharedDevice(value: value);
    }
    public func get_ForceSoftwareRenderer() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_ForceSoftwareRenderer();
    }
    public func put_ForceSoftwareRenderer(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_ForceSoftwareRenderer(value: value);
    }
    public func get_CustomDevice() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_CustomDevice());
    }
    public func put_CustomDevice(value : Optional<Microsoft.Graphics.Canvas.CanvasDevice>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_CustomDevice(value: value!.Interface());
    }
    public func get_DpiScale() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.get_DpiScale();
    }
    public func put_DpiScale(ratio : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
        return try _ifc.put_DpiScale(ratio: ratio);
    }
    public var ClearColor : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
            return try _ifc.ClearColor;
        }
    }
    public var CustomDevice : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
            return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.CustomDevice);
        }
    }
    public var DpiScale : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
            return try _ifc.DpiScale;
        }
    }
    public var ForceSoftwareRenderer : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
            return try _ifc.ForceSoftwareRenderer;
        }
    }
    public var ReadyToDraw : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
            return try _ifc.ReadyToDraw;
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
            return try _ifc.Size;
        }
    }
    public var UseSharedDevice : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl = try _self.QueryInterface();
            return try _ifc.UseSharedDevice;
        }
    }
    public func get_Dpi() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.get_Dpi();
    }
    public func ConvertPixelsToDips(pixels : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertPixelsToDips(pixels: pixels);
    }
    public func ConvertDipsToPixels(dips : Swift.Float, dpiRounding : Microsoft.Graphics.Canvas.CanvasDpiRounding) throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
        return try _ifc.ConvertDipsToPixels(dips: dips, dpiRounding: dpiRounding);
    }
    public var Dpi : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreatorWithDpi = try _self.QueryInterface();
            return try _ifc.Dpi;
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.ICanvasResourceCreator = try _self.QueryInterface();
            return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs
// runtime class
public class CanvasDrawEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs;
    public init(plok: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs { return _self; }
    public init(canvasDrawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>) throws {
        let _af : ICanvasDrawEventArgsFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs");
        _self = try _af.Create(canvasDrawingSession: canvasDrawingSession!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_DrawingSession() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.get_DrawingSession());
    }
    public var DrawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs = try _self.QueryInterface();
            return try Microsoft.Graphics.Canvas.CanvasDrawingSession(plok: _ifc.DrawingSession);
        }
    }
}

// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasControl
// interface type
open class ICanvasControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf006e06d, Data2: 0x79db, Data3 : 0x484f, Data4 : (0xb8, 0x98, 0x47, 0x9c, 0xf0, 0x69, 0xc0, 0xf5)) }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_CreateResources(Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl,Microsoft.Graphics.Canvas.UI.CanvasCreateResourcesEventArgs>)
    private func _n_add_CreateResources(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_CreateResources(pThis, value, __presult))
        }
    }
    public func add_CreateResources(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasCreateResourcesEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_CreateResources(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_CreateResources(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_CreateResources(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CreateResources(pThis, token))
        }
    }
    public func remove_CreateResources(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_CreateResources(token);
    }
    // [IsSpecialName] bool get_ReadyToDraw()
    private func _n_get_ReadyToDraw(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadyToDraw(pThis, __presult))
        }
    }
    public func get_ReadyToDraw() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ReadyToDraw(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Draw(Windows.Foundation.TypedEventHandler<Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl,Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs>)
    private func _n_add_Draw(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Draw(pThis, value, __presult))
        }
    }
    public func add_Draw(value : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasControl__q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CCanvasDrawEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Draw(RawPointer(value), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Draw(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Draw(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Draw(pThis, token))
        }
    }
    public func remove_Draw(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Draw(token);
    }
    // [IsSpecialName] void put_ClearColor(Windows.UI.Color)
    private func _n_put_ClearColor(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClearColor(pThis, value))
        }
    }
    public func put_ClearColor(value : Windows.UI.Color) throws -> Void {
        try self._n_put_ClearColor(value);
    }
    // [IsSpecialName] Windows.UI.Color get_ClearColor()
    private func _n_get_ClearColor(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClearColor(pThis, __presult))
        }
    }
    public func get_ClearColor() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_ClearColor(&__result);
        return __result;
    }
    // void Invalidate()
    private func _n_Invalidate() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
        }
    }
    public func Invalidate() throws -> Void {
        try self._n_Invalidate();
    }
    // [IsSpecialName] Windows.Foundation.Size get_Size()
    private func _n_get_Size(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, __presult))
        }
    }
    public func get_Size() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_Size(&__result);
        return __result;
    }
    // void RemoveFromVisualTree()
    private func _n_RemoveFromVisualTree() throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
        }
    }
    public func RemoveFromVisualTree() throws -> Void {
        try self._n_RemoveFromVisualTree();
    }
    // [IsSpecialName] bool get_UseSharedDevice()
    private func _n_get_UseSharedDevice(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSharedDevice(pThis, __presult))
        }
    }
    public func get_UseSharedDevice() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_UseSharedDevice(&__result);
        return __result;
    }
    // [IsSpecialName] void put_UseSharedDevice(bool)
    private func _n_put_UseSharedDevice(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseSharedDevice(pThis, value))
        }
    }
    public func put_UseSharedDevice(value : boolean) throws -> Void {
        try self._n_put_UseSharedDevice(value);
    }
    // [IsSpecialName] bool get_ForceSoftwareRenderer()
    private func _n_get_ForceSoftwareRenderer(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForceSoftwareRenderer(pThis, __presult))
        }
    }
    public func get_ForceSoftwareRenderer() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ForceSoftwareRenderer(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ForceSoftwareRenderer(bool)
    private func _n_put_ForceSoftwareRenderer(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForceSoftwareRenderer(pThis, value))
        }
    }
    public func put_ForceSoftwareRenderer(value : boolean) throws -> Void {
        try self._n_put_ForceSoftwareRenderer(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_CustomDevice()
    private func _n_get_CustomDevice(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomDevice(pThis, __presult))
        }
    }
    public func get_CustomDevice() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_CustomDevice(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    // [IsSpecialName] void put_CustomDevice(Microsoft.Graphics.Canvas.CanvasDevice)
    private func _n_put_CustomDevice(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomDevice(pThis, value))
        }
    }
    public func put_CustomDevice(value : Optional<Microsoft.Graphics.Canvas.ICanvasDevice>) throws -> Void {
        try self._n_put_CustomDevice(RawPointer(value));
    }
    // [IsSpecialName] System.Single get_DpiScale()
    private func _n_get_DpiScale(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiScale(pThis, __presult))
        }
    }
    public func get_DpiScale() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_DpiScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DpiScale(System.Single)
    private func _n_put_DpiScale(_ ratio : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiScale(pThis, ratio))
        }
    }
    public func put_DpiScale(ratio : Swift.Float) throws -> Void {
        try self._n_put_DpiScale(ratio);
    }
    public var ClearColor : Windows.UI.Color {
        get throws {
            return try get_ClearColor();
        }
    }
    public var CustomDevice : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_CustomDevice();
        }
    }
    public var DpiScale : Swift.Float {
        get throws {
            return try get_DpiScale();
        }
    }
    public var ForceSoftwareRenderer : boolean {
        get throws {
            return try get_ForceSoftwareRenderer();
        }
    }
    public var ReadyToDraw : boolean {
        get throws {
            return try get_ReadyToDraw();
        }
    }
    public var Size : Windows.Foundation.Size {
        get throws {
            return try get_Size();
        }
    }
    public var UseSharedDevice : boolean {
        get throws {
            return try get_UseSharedDevice();
        }
    }
} // ICanvasControl


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs
// interface type
open class ICanvasDrawEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfb86169f, Data2: 0x25d4, Data3 : 0x4551, Data4 : (0xbd, 0x8f, 0x21, 0x4b, 0xea, 0xf0, 0xac, 0x24)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDrawingSession get_DrawingSession()
    private func _n_get_DrawingSession(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawingSession(pThis, __presult))
        }
    }
    public func get_DrawingSession() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>> = nil;
        try self._n_get_DrawingSession(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDrawingSession(consuming: __result);
    }
    public var DrawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession> {
        get throws {
            return try get_DrawingSession();
        }
    }
} // ICanvasDrawEventArgs


// type: Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgsFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasDrawEventArgsFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7299d72c, Data2: 0xf8e4, Data3 : 0x4a2f, Data4 : (0x9e, 0x30, 0x7c, 0xdf, 0xcc, 0xf3, 0x1c, 0x44)) }
    // Microsoft.Graphics.Canvas.UI.Xaml.CanvasDrawEventArgs Create(Microsoft.Graphics.Canvas.CanvasDrawingSession)
    private func _n_Create(_ canvasDrawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, canvasDrawingSession, __presult))
        }
    }
    public func Create(canvasDrawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>) throws -> Optional<Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs>> = nil;
        try self._n_Create(RawPointer(canvasDrawingSession), &__result);
        return Microsoft.Graphics.Canvas.UI.Xaml.ICanvasDrawEventArgs(consuming: __result);
    }
} // ICanvasDrawEventArgsFactory


}
