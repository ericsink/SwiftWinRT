// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWin2D;
import WindowsSdk;
import CWindowsSdk;
import WindowsApp;
import CWindowsApp;

extension Microsoft.Graphics.Canvas.Svg {
// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment
// enum type
public typealias CanvasSvgAspectAlignment = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling
// enum type
public typealias CanvasSvgAspectScaling = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay
// enum type
public typealias CanvasSvgDisplay = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument
// runtime class
public class CanvasSvgDocument
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument;
    public init(plok: Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws {
        let _af : ICanvasSvgDocumentFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument");
        _self = try _af.CreateEmpty(resourceCreator: resourceCreator)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasSvgDocumentStatics {
        static var x : ICanvasSvgDocumentStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument")
    }
    public static var CanvasSvgDocumentStatics : ICanvasSvgDocumentStatics {
        _ICanvasSvgDocumentStatics.x
    }
    public static func LoadFromXml(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, xmlString : Swift.String) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument> {
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument(plok: CanvasSvgDocumentStatics.LoadFromXml(resourceCreator: resourceCreator, xmlString: xmlString));
    }
    public static func LoadAsync(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDocument> {
        return try CanvasSvgDocumentStatics.LoadAsync(resourceCreator: resourceCreator, stream: stream);
    }
    public static func Load(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument(plok: Self.LoadAsync(resourceCreator: resourceCreator, stream: stream)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func IsSupported(device : Optional<Microsoft.Graphics.Canvas.CanvasDevice>) throws -> boolean {
        return try CanvasSvgDocumentStatics.IsSupported(device: device!.Interface());
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public func GetXml() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try _ifc.GetXml();
    }
    public func SaveAsync(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try _ifc.SaveAsync(stream: stream);
    }
    public func Save(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SaveAsync(stream: stream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func put_Root(value : Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try _ifc.put_Root(value: value!.Interface());
    }
    public func get_Root() throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: _ifc.get_Root());
    }
    public func FindElementById(id : Swift.String) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: _ifc.FindElementById(id: id));
    }
    public func CreatePaintAttribute() throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute(plok: _ifc.CreatePaintAttributeWithDefaults());
    }
    public func CreatePaintAttribute(paintType : Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType, color : Windows.UI.Color, id : Swift.String) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute(plok: _ifc.CreatePaintAttribute(paintType: paintType, color: color, id: id));
    }
    public func CreatePathAttribute() throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute(plok: _ifc.CreatePathAttributeWithDefaults());
    }
    public func CreatePathAttribute(segmentDataLength : UINT32, segmentData : Optional<UnsafeMutablePointer<FLOAT>>, commandsLength : UINT32, commands : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand>>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute(plok: _ifc.CreatePathAttribute(segmentDataLength: segmentDataLength, segmentData: segmentData, commandsLength: commandsLength, commands: commands));
    }
    public func CreatePointsAttribute() throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute(plok: _ifc.CreatePointsAttributeWithDefaults());
    }
    public func CreatePointsAttribute(pointsLength : UINT32, points : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute(plok: _ifc.CreatePointsAttribute(pointsLength: pointsLength, points: points));
    }
    public func CreateStrokeDashArrayAttribute() throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute(plok: _ifc.CreateStrokeDashArrayAttributeWithDefaults());
    }
    public func CreateStrokeDashArrayAttribute(dashValuesLength : UINT32, dashValues : Optional<UnsafeMutablePointer<FLOAT>>, unitValuesLength : UINT32, unitValues : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits>>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute(plok: _ifc.CreateStrokeDashArrayAttribute(dashValuesLength: dashValuesLength, dashValues: dashValues, unitValuesLength: unitValuesLength, unitValues: unitValues));
    }
    public func LoadElementFromXml(xmlString : Swift.String) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: _ifc.LoadElementFromXml(xmlString: xmlString));
    }
    public func LoadElementAsync(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgNamedElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try _ifc.LoadElementAsync(stream: stream);
    }
    public func LoadElement(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: self.LoadElementAsync(stream: stream)!.get()))
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public var Root : Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: _ifc.Root);
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits
// enum type
public typealias CanvasSvgLengthUnits = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement
// runtime class
public class CanvasSvgNamedElement
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement;
    public init(plok: Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement { return _self; }
    public func AppendChild(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.AppendChild(child: child);
    }
    public func CreateAndAppendNamedChildElement(childName : Swift.String) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: _ifc.CreateAndAppendNamedChildElement(childName: childName));
    }
    public func CreateAndAppendTextChildElement(textContent : Swift.String) throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement(plok: _ifc.CreateAndAppendTextChildElement(textContent: textContent));
    }
    public func get_FirstChild() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.get_FirstChild();
    }
    public func get_LastChild() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.get_LastChild();
    }
    public func GetPreviousSibling(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetPreviousSibling(child: child);
    }
    public func GetNextSibling(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetNextSibling(child: child);
    }
    public func get_SpecifiedAttributes() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.get_SpecifiedAttributes();
    }
    public func get_Tag() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.get_Tag();
    }
    public func get_HasChildren() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.get_HasChildren();
    }
    public func InsertChildBefore(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>, referenceChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.InsertChildBefore(child: child, referenceChild: referenceChild);
    }
    public func IsAttributeSpecified(attributeName : Swift.String) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.IsAttributeSpecified(attributeName: attributeName);
    }
    public func IsAttributeSpecified(attributeName : Swift.String, inherited : boolean) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.IsAttributeSpecifiedWithInherhited(attributeName: attributeName, inherited: inherited);
    }
    public func RemoveAttribute(attributeName : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.RemoveAttribute(attributeName: attributeName);
    }
    public func RemoveChild(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.RemoveChild(child: child);
    }
    public func ReplaceChild(newChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>, oldChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.ReplaceChild(newChild: newChild, oldChild: oldChild);
    }
    public func SetStringAttribute(attributeName : Swift.String, attributeValue : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetStringAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetStringAttribute(attributeName : Swift.String) throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetStringAttribute(attributeName: attributeName);
    }
    public func SetAttribute(attributeName : Swift.String, attributeValue : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetAttribute(attributeName : Swift.String) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetAttribute(attributeName: attributeName);
    }
    public func SetIdAttribute(attributeName : Swift.String, attributeValue : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetIdAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetIdAttribute(attributeName : Swift.String) throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetIdAttribute(attributeName: attributeName);
    }
    public func SetFloatAttribute(attributeName : Swift.String, attributeValue : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetFloatAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetFloatAttribute(attributeName : Swift.String) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetFloatAttribute(attributeName: attributeName);
    }
    public func SetColorAttribute(attributeName : Swift.String, attributeValue : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetColorAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetColorAttribute(attributeName : Swift.String) throws -> Windows.UI.Color {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetColorAttribute(attributeName: attributeName);
    }
    public func SetFilledRegionDeterminationAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetFilledRegionDeterminationAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetFilledRegionDeterminationAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetFilledRegionDeterminationAttribute(attributeName: attributeName);
    }
    public func SetDisplayAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetDisplayAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetDisplayAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetDisplayAttribute(attributeName: attributeName);
    }
    public func SetOverflowAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetOverflowAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetOverflowAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetOverflowAttribute(attributeName: attributeName);
    }
    public func SetCapStyleAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetCapStyleAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetCapStyleAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetCapStyleAttribute(attributeName: attributeName);
    }
    public func SetLineJoinAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetLineJoinAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetLineJoinAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetLineJoinAttribute(attributeName: attributeName);
    }
    public func SetVisibilityAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetVisibilityAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetVisibilityAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetVisibilityAttribute(attributeName: attributeName);
    }
    public func SetTransformAttribute(attributeName : Swift.String, attributeValue : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetTransformAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetTransformAttribute(attributeName : Swift.String) throws -> Windows.Foundation.Numerics.Matrix3x2 {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetTransformAttribute(attributeName: attributeName);
    }
    public func SetUnitsAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetUnitsAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetUnitsAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetUnitsAttribute(attributeName: attributeName);
    }
    public func SetEdgeBehaviorAttribute(attributeName : Swift.String, attributeValue : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetEdgeBehaviorAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetEdgeBehaviorAttribute(attributeName : Swift.String) throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetEdgeBehaviorAttribute(attributeName: attributeName);
    }
    public func SetRectangleAttribute(attributeName : Swift.String, attributeValue : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetRectangleAttribute(attributeName: attributeName, attributeValue: attributeValue);
    }
    public func GetRectangleAttribute(attributeName : Swift.String) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.GetRectangleAttribute(attributeName: attributeName);
    }
    public func SetLengthAttribute(attributeName : Swift.String, value : Swift.Float, units : Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetLengthAttribute(attributeName: attributeName, value: value, units: units);
    }
    public func GetLengthAttribute(attributeName : Swift.String, units : inout Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
            var _tmp_out_units: Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits_Number;
        return try _ifc.GetLengthAttribute(attributeName: attributeName, units: &_tmp_out_units);
    }
    public func SetAspectRatioAttribute(attributeName : Swift.String, alignment : Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment, meetOrSlice : Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SetAspectRatioAttribute(attributeName: attributeName, alignment: alignment, meetOrSlice: meetOrSlice);
    }
    public func GetAspectRatioAttribute(attributeName : Swift.String, meetOrSlice : inout Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
            var _tmp_out_meetOrSlice: Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling_Meet;
        return try _ifc.GetAspectRatioAttribute(attributeName: attributeName, meetOrSlice: &_tmp_out_meetOrSlice);
    }
    public var FirstChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.FirstChild;
        }
    }
    public var HasChildren : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.HasChildren;
        }
    }
    public var LastChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.LastChild;
        }
    }
    public var SpecifiedAttributes : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.SpecifiedAttributes;
        }
    }
    public var Tag : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement = try _self.QueryInterface();
        return try _ifc.Tag;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func get_ContainingDocument() throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument(plok: _ifc.get_ContainingDocument());
    }
    public func get_Parent() throws -> Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: _ifc.get_Parent());
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var ContainingDocument : Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument(plok: _ifc.ContainingDocument);
        }
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public var Parent : Optional<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement(plok: _ifc.Parent);
        }
    }
}

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow
// enum type
public typealias CanvasSvgOverflow = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute
// runtime class
public class CanvasSvgPaintAttribute
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute;
    public init(plok: Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute { return _self; }
    // method not needed: put_PaintType
    // method not needed: get_PaintType
    // method not needed: put_Color
    // method not needed: get_Color
    // method not needed: put_Id
    // method not needed: get_Id
    // method not needed: Clone
    // method not needed: GetElement
    // method not needed: get_Device
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType
// enum type
public typealias CanvasSvgPaintType = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute
// runtime class
public class CanvasSvgPathAttribute
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute;
    public init(plok: Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute { return _self; }
    // method not needed: CreatePathGeometry
    // method not needed: CreatePathGeometry
    // method not needed: get_Commands
    // method not needed: GetCommands
    // method not needed: get_SegmentData
    // method not needed: GetSegmentData
    // method not needed: RemoveCommandsAtEnd
    // method not needed: RemoveSegmentDataAtEnd
    // method not needed: SetCommands
    // method not needed: SetSegmentData
    // method not needed: Clone
    // method not needed: GetElement
    // method not needed: get_Device
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand
// enum type
public typealias CanvasSvgPathCommand = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute
// runtime class
public class CanvasSvgPointsAttribute
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute;
    public init(plok: Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute { return _self; }
    // method not needed: get_Points
    // method not needed: GetPoints
    // method not needed: RemovePointsAtEnd
    // method not needed: SetPoints
    // method not needed: Clone
    // method not needed: GetElement
    // method not needed: get_Device
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute
// runtime class
public class CanvasSvgStrokeDashArrayAttribute
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute;
    public init(plok: Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute { return _self; }
    // method not needed: GetDashes
    // method not needed: GetDashes
    // method not needed: RemoveDashesAtEnd
    // method not needed: SetDashes
    // method not needed: SetDashes
    // method not needed: SetDashes
    // method not needed: Clone
    // method not needed: GetElement
    // method not needed: get_Device
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement
// runtime class
public class CanvasSvgTextElement
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement;
    public init(plok: Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement { return _self; }
    public func put_Text(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement = try _self.QueryInterface();
        return try _ifc.put_Text(value: value);
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits
// enum type
public typealias CanvasSvgUnits = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits;

// type: Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility
// enum type
public typealias CanvasSvgVisibility = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility;

// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute
// interface type
open class ICanvasSvgAttribute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x652786a8, Data2: 0xf3ab, Data3 : 0x4083, Data4 : (0x99, 0x1d, 0x97, 0x48, 0xaa, 0x86, 0xbd, 0x6e)) }
// method not needed: Clone
// method not needed: GetElement
// method not needed: get_Device
} // ICanvasSvgAttribute


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument
// interface type
open class ICanvasSvgDocument
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa0e34929, Data2: 0x3551, Data3 : 0x44fe, Data4 : (0xa6, 0x70, 0xd9, 0xb3, 0xfd, 0x80, 0x05, 0x16)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_Device()
    private func _n_get_Device(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, __presult))
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_Device(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    // System.String GetXml()
    private func _n_GetXml(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetXml(pThis, __presult))
        }
    }
    public func GetXml() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetXml(&__result);
        return Swift.String(from: __result);
    }
    // Windows.Foundation.IAsyncAction SaveAsync(Windows.Storage.Streams.IRandomAccessStream)
    private func _n_SaveAsync(_ stream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SaveAsync(pThis, stream, __presult))
        }
    }
    public func SaveAsync(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_SaveAsync(RawPointer(stream), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func Save(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SaveAsync(stream: stream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] void put_Root(Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement)
    private func _n_put_Root(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Root(pThis, value))
        }
    }
    public func put_Root(value : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement>) throws -> Void {
        try self._n_put_Root(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement get_Root()
    private func _n_get_Root(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Root(pThis, __presult))
        }
    }
    public func get_Root() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>> = nil;
        try self._n_get_Root(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement FindElementById(System.String)
    private func _n_FindElementById(_ id : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FindElementById(pThis, id, __presult))
        }
    }
    public func FindElementById(id : Optional<Swift.String>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        let __hstr_id = try HString(id!);
        return try withExtendedLifetime(__hstr_id) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>> = nil;
        try self._n_FindElementById(__hstr_id.Raw(), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement(consuming: __result);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute CreatePaintAttribute()
    private func _n_CreatePaintAttributeWithDefaults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePaintAttributeWithDefaults(pThis, __presult))
        }
    }
    public func CreatePaintAttributeWithDefaults() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute>> = nil;
        try self._n_CreatePaintAttributeWithDefaults(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintAttribute CreatePaintAttribute(Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType, Windows.UI.Color, System.String)
    private func _n_CreatePaintAttribute(_ paintType : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType, _ color : _q_CWindows_CUI_CColor, _ id : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePaintAttribute(pThis, paintType, color, id, __presult))
        }
    }
    public func CreatePaintAttribute(paintType : Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType, color : Windows.UI.Color, id : Optional<Swift.String>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute> {
        let __hstr_id = try HString(id!);
        return try withExtendedLifetime(__hstr_id) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPaintAttribute>> = nil;
        try self._n_CreatePaintAttribute(paintType, color, __hstr_id.Raw(), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute(consuming: __result);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute CreatePathAttribute()
    private func _n_CreatePathAttributeWithDefaults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePathAttributeWithDefaults(pThis, __presult))
        }
    }
    public func CreatePathAttributeWithDefaults() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute>> = nil;
        try self._n_CreatePathAttributeWithDefaults(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgPathAttribute CreatePathAttribute(System.Single[], Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand[])
    private func _n_CreatePathAttribute(_ segmentDataLength : UINT32, _ segmentData : Optional<UnsafeMutablePointer<FLOAT>>, _ commandsLength : UINT32, _ commands : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePathAttribute(pThis, segmentDataLength, segmentData, commandsLength, commands, __presult))
        }
    }
    public func CreatePathAttribute(segmentDataLength : UINT32, segmentData : Optional<UnsafeMutablePointer<FLOAT>>, commandsLength : UINT32, commands : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand>>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPathAttribute>> = nil;
        try self._n_CreatePathAttribute(segmentDataLength, segmentData, commandsLength, commands, &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute CreatePointsAttribute()
    private func _n_CreatePointsAttributeWithDefaults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePointsAttributeWithDefaults(pThis, __presult))
        }
    }
    public func CreatePointsAttributeWithDefaults() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute>> = nil;
        try self._n_CreatePointsAttributeWithDefaults(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgPointsAttribute CreatePointsAttribute(Windows.Foundation.Numerics.Vector2[])
    private func _n_CreatePointsAttribute(_ pointsLength : UINT32, _ points : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreatePointsAttribute(pThis, pointsLength, points, __presult))
        }
    }
    public func CreatePointsAttribute(pointsLength : UINT32, points : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgPointsAttribute>> = nil;
        try self._n_CreatePointsAttribute(pointsLength, points, &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute()
    private func _n_CreateStrokeDashArrayAttributeWithDefaults(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStrokeDashArrayAttributeWithDefaults(pThis, __presult))
        }
    }
    public func CreateStrokeDashArrayAttributeWithDefaults() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute>> = nil;
        try self._n_CreateStrokeDashArrayAttributeWithDefaults(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgStrokeDashArrayAttribute CreateStrokeDashArrayAttribute(System.Single[], Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits[])
    private func _n_CreateStrokeDashArrayAttribute(_ dashValuesLength : UINT32, _ dashValues : Optional<UnsafeMutablePointer<FLOAT>>, _ unitValuesLength : UINT32, _ unitValues : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateStrokeDashArrayAttribute(pThis, dashValuesLength, dashValues, unitValuesLength, unitValues, __presult))
        }
    }
    public func CreateStrokeDashArrayAttribute(dashValuesLength : UINT32, dashValues : Optional<UnsafeMutablePointer<FLOAT>>, unitValuesLength : UINT32, unitValues : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits>>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgStrokeDashArrayAttribute>> = nil;
        try self._n_CreateStrokeDashArrayAttribute(dashValuesLength, dashValues, unitValuesLength, unitValues, &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement LoadElementFromXml(System.String)
    private func _n_LoadElementFromXml(_ xmlString : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadElementFromXml(pThis, xmlString, __presult))
        }
    }
    public func LoadElementFromXml(xmlString : Optional<Swift.String>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        let __hstr_xmlString = try HString(xmlString!);
        return try withExtendedLifetime(__hstr_xmlString) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>> = nil;
        try self._n_LoadElementFromXml(__hstr_xmlString.Raw(), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement(consuming: __result);
        }
    }
    // Windows.Foundation.IAsyncOperation<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement> LoadElementAsync(Windows.Storage.Streams.IRandomAccessStream)
    private func _n_LoadElementAsync(_ stream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgNamedElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadElementAsync(pThis, stream, __presult))
        }
    }
    public func LoadElementAsync(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgNamedElement> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgNamedElement>> = nil;
        try self._n_LoadElementAsync(RawPointer(stream), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgNamedElement(consuming: __result);
    }
    public func LoadElement(stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadElementAsync(stream: stream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_Device();
        }
    }
    public var Root : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        get throws {
            return try get_Root();
        }
    }
} // ICanvasSvgDocument


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasSvgDocumentFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbab0f16d, Data2: 0x4050, Data3 : 0x4ef6, Data4 : (0x80, 0x22, 0x8a, 0x07, 0xe9, 0xe7, 0x4a, 0x9d)) }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument CreateEmpty(Microsoft.Graphics.Canvas.ICanvasResourceCreator)
    private func _n_CreateEmpty(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateEmpty(pThis, resourceCreator, __presult))
        }
    }
    public func CreateEmpty(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>> = nil;
        try self._n_CreateEmpty(RawPointer(resourceCreator), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument(consuming: __result);
    }
} // ICanvasSvgDocumentFactory


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocumentStatics
// interface type
open class ICanvasSvgDocumentStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7740e748, Data2: 0xcb9a, Data3 : 0x453f, Data4 : (0xa6, 0x78, 0x8b, 0x3b, 0x3a, 0x72, 0x54, 0xd3)) }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument LoadFromXml(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.String)
    private func _n_LoadFromXml(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ xmlString : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadFromXml(pThis, resourceCreator, xmlString, __presult))
        }
    }
    public func LoadFromXml(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, xmlString : Optional<Swift.String>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument> {
        let __hstr_xmlString = try HString(xmlString!);
        return try withExtendedLifetime(__hstr_xmlString) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>> = nil;
        try self._n_LoadFromXml(RawPointer(resourceCreator), __hstr_xmlString.Raw(), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument(consuming: __result);
        }
    }
    // Windows.Foundation.IAsyncOperation<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument> LoadAsync(Microsoft.Graphics.Canvas.ICanvasResourceCreator, Windows.Storage.Streams.IRandomAccessStream)
    private func _n_LoadAsync(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ stream : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDocument>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadAsync(pThis, resourceCreator, stream, __presult))
        }
    }
    public func LoadAsync(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDocument> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDocument>> = nil;
        try self._n_LoadAsync(RawPointer(resourceCreator), RawPointer(stream), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDocument(consuming: __result);
    }
    public func Load(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, stream : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument> {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.LoadAsync(resourceCreator: resourceCreator, stream: stream)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // bool IsSupported(Microsoft.Graphics.Canvas.CanvasDevice)
    private func _n_IsSupported(_ device : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocumentStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, device, __presult))
        }
    }
    public func IsSupported(device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_IsSupported(RawPointer(device), &__result);
        return __result;
    }
} // ICanvasSvgDocumentStatics


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement
// interface type
open class ICanvasSvgElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0775cb81, Data2: 0xc555, Data3 : 0x45bf, Data4 : (0x97, 0x95, 0x0f, 0xf5, 0x91, 0x51, 0xc3, 0xbe)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument get_ContainingDocument()
    private func _n_get_ContainingDocument(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContainingDocument(pThis, __presult))
        }
    }
    public func get_ContainingDocument() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgDocument>> = nil;
        try self._n_get_ContainingDocument(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument(consuming: __result);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement get_Parent()
    private func _n_get_Parent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parent(pThis, __presult))
        }
    }
    public func get_Parent() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>> = nil;
        try self._n_get_Parent(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement(consuming: __result);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_Device()
    private func _n_get_Device(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, __presult))
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_Device(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    public var ContainingDocument : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgDocument> {
        get throws {
            return try get_ContainingDocument();
        }
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_Device();
        }
    }
    public var Parent : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        get throws {
            return try get_Parent();
        }
    }
} // ICanvasSvgElement


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement
// interface type
open class ICanvasSvgNamedElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd8b7cb94, Data2: 0x8167, Data3 : 0x495d, Data4 : (0x9c, 0x71, 0x5e, 0x97, 0xe5, 0xd0, 0x8d, 0x2b)) }
    // void AppendChild(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)
    private func _n_AppendChild(_ child : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AppendChild(pThis, child))
        }
    }
    public func AppendChild(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        try self._n_AppendChild(RawPointer(child));
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement CreateAndAppendNamedChildElement(System.String)
    private func _n_CreateAndAppendNamedChildElement(_ childName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAndAppendNamedChildElement(pThis, childName, __presult))
        }
    }
    public func CreateAndAppendNamedChildElement(childName : Optional<Swift.String>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement> {
        let __hstr_childName = try HString(childName!);
        return try withExtendedLifetime(__hstr_childName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement>> = nil;
        try self._n_CreateAndAppendNamedChildElement(__hstr_childName.Raw(), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgNamedElement(consuming: __result);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgTextElement CreateAndAppendTextChildElement(System.String)
    private func _n_CreateAndAppendTextChildElement(_ textContent : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAndAppendTextChildElement(pThis, textContent, __presult))
        }
    }
    public func CreateAndAppendTextChildElement(textContent : Optional<Swift.String>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement> {
        let __hstr_textContent = try HString(textContent!);
        return try withExtendedLifetime(__hstr_textContent) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement>> = nil;
        try self._n_CreateAndAppendTextChildElement(__hstr_textContent.Raw(), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement(consuming: __result);
        }
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement get_FirstChild()
    private func _n_get_FirstChild(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FirstChild(pThis, __presult))
        }
    }
    public func get_FirstChild() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>> = nil;
        try self._n_get_FirstChild(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement(consuming: __result);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement get_LastChild()
    private func _n_get_LastChild(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastChild(pThis, __presult))
        }
    }
    public func get_LastChild() throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>> = nil;
        try self._n_get_LastChild(&__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement GetPreviousSibling(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)
    private func _n_GetPreviousSibling(_ child : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPreviousSibling(pThis, child, __presult))
        }
    }
    public func GetPreviousSibling(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>> = nil;
        try self._n_GetPreviousSibling(RawPointer(child), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement GetNextSibling(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)
    private func _n_GetNextSibling(_ child : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNextSibling(pThis, child, __presult))
        }
    }
    public func GetNextSibling(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>> = nil;
        try self._n_GetNextSibling(RawPointer(child), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement(consuming: __result);
    }
    // [IsSpecialName] System.String[] get_SpecifiedAttributes()
    private func _n_get_SpecifiedAttributes(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<Optional<HSTRING>>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecifiedAttributes(pThis, __presultLength, __presult))
        }
    }
    public func get_SpecifiedAttributes() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<Optional<HSTRING>>> = nil;
        try self._n_get_SpecifiedAttributes(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] System.String get_Tag()
    private func _n_get_Tag(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, __presult))
        }
    }
    public func get_Tag() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Tag(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] bool get_HasChildren()
    private func _n_get_HasChildren(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasChildren(pThis, __presult))
        }
    }
    public func get_HasChildren() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasChildren(&__result);
        return __result;
    }
    // void InsertChildBefore(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement, Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)
    private func _n_InsertChildBefore(_ child : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>, _ referenceChild : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertChildBefore(pThis, child, referenceChild))
        }
    }
    public func InsertChildBefore(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>, referenceChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        try self._n_InsertChildBefore(RawPointer(child), RawPointer(referenceChild));
    }
    // bool IsAttributeSpecified(System.String)
    private func _n_IsAttributeSpecified(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsAttributeSpecified(pThis, attributeName, __presult))
        }
    }
    public func IsAttributeSpecified(attributeName : Optional<Swift.String>) throws -> boolean {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : boolean = 0;
        try self._n_IsAttributeSpecified(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // bool IsAttributeSpecified(System.String, bool)
    private func _n_IsAttributeSpecifiedWithInherhited(_ attributeName : Optional<HSTRING>, _ inherited : boolean, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IsAttributeSpecifiedWithInherhited(pThis, attributeName, inherited, __presult))
        }
    }
    public func IsAttributeSpecifiedWithInherhited(attributeName : Optional<Swift.String>, inherited : boolean) throws -> boolean {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : boolean = 0;
        try self._n_IsAttributeSpecifiedWithInherhited(__hstr_attributeName.Raw(), inherited, &__result);
        return __result;
        }
    }
    // void RemoveAttribute(System.String)
    private func _n_RemoveAttribute(_ attributeName : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAttribute(pThis, attributeName))
        }
    }
    public func RemoveAttribute(attributeName : Optional<Swift.String>) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_RemoveAttribute(__hstr_attributeName.Raw());
        }
    }
    // void RemoveChild(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)
    private func _n_RemoveChild(_ child : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveChild(pThis, child))
        }
    }
    public func RemoveChild(child : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        try self._n_RemoveChild(RawPointer(child));
    }
    // void ReplaceChild(Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement, Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement)
    private func _n_ReplaceChild(_ newChild : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>, _ oldChild : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgElement>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceChild(pThis, newChild, oldChild))
        }
    }
    public func ReplaceChild(newChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>, oldChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement>) throws -> Void {
        try self._n_ReplaceChild(RawPointer(newChild), RawPointer(oldChild));
    }
    // void SetStringAttribute(System.String, System.String)
    private func _n_SetStringAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetStringAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetStringAttribute(attributeName : Optional<Swift.String>, attributeValue : Optional<Swift.String>) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        let __hstr_attributeValue = try HString(attributeValue!);
        return try withExtendedLifetime(__hstr_attributeValue) {
        try self._n_SetStringAttribute(__hstr_attributeName.Raw(), __hstr_attributeValue.Raw());
        }
        }
    }
    // System.String GetStringAttribute(System.String)
    private func _n_GetStringAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetStringAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetStringAttribute(attributeName : Optional<Swift.String>) throws -> Swift.String {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetStringAttribute(__hstr_attributeName.Raw(), &__result);
        return Swift.String(from: __result);
        }
    }
    // void SetAttribute(System.String, Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute)
    private func _n_SetAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetAttribute(attributeName : Optional<Swift.String>, attributeValue : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute>) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetAttribute(__hstr_attributeName.Raw(), RawPointer(attributeValue));
        }
    }
    // Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute GetAttribute(System.String)
    private func _n_GetAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetAttribute(attributeName : Optional<Swift.String>) throws -> Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute> {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgAttribute>> = nil;
        try self._n_GetAttribute(__hstr_attributeName.Raw(), &__result);
        return Microsoft.Graphics.Canvas.Svg.ICanvasSvgAttribute(consuming: __result);
        }
    }
    // void SetIdAttribute(System.String, System.String)
    private func _n_SetIdAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetIdAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetIdAttribute(attributeName : Optional<Swift.String>, attributeValue : Optional<Swift.String>) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        let __hstr_attributeValue = try HString(attributeValue!);
        return try withExtendedLifetime(__hstr_attributeValue) {
        try self._n_SetIdAttribute(__hstr_attributeName.Raw(), __hstr_attributeValue.Raw());
        }
        }
    }
    // System.String GetIdAttribute(System.String)
    private func _n_GetIdAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIdAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetIdAttribute(attributeName : Optional<Swift.String>) throws -> Swift.String {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetIdAttribute(__hstr_attributeName.Raw(), &__result);
        return Swift.String(from: __result);
        }
    }
    // void SetFloatAttribute(System.String, System.Single)
    private func _n_SetFloatAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFloatAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetFloatAttribute(attributeName : Optional<Swift.String>, attributeValue : Swift.Float) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetFloatAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // System.Single GetFloatAttribute(System.String)
    private func _n_GetFloatAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFloatAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetFloatAttribute(attributeName : Optional<Swift.String>) throws -> Swift.Float {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : FLOAT = 0;
        try self._n_GetFloatAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetColorAttribute(System.String, Windows.UI.Color)
    private func _n_SetColorAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetColorAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetColorAttribute(attributeName : Optional<Swift.String>, attributeValue : Windows.UI.Color) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetColorAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Windows.UI.Color GetColorAttribute(System.String)
    private func _n_GetColorAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetColorAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetColorAttribute(attributeName : Optional<Swift.String>) throws -> Windows.UI.Color {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_GetColorAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetFilledRegionDeterminationAttribute(System.String, Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination)
    private func _n_SetFilledRegionDeterminationAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFilledRegionDeterminationAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetFilledRegionDeterminationAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetFilledRegionDeterminationAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination GetFilledRegionDeterminationAttribute(System.String)
    private func _n_GetFilledRegionDeterminationAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFilledRegionDeterminationAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetFilledRegionDeterminationAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination = _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination_Alternate;
        try self._n_GetFilledRegionDeterminationAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetDisplayAttribute(System.String, Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay)
    private func _n_SetDisplayAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetDisplayAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetDisplayAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetDisplayAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay GetDisplayAttribute(System.String)
    private func _n_GetDisplayAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetDisplayAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetDisplayAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay_Inline;
        try self._n_GetDisplayAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetOverflowAttribute(System.String, Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow)
    private func _n_SetOverflowAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetOverflowAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetOverflowAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetOverflowAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow GetOverflowAttribute(System.String)
    private func _n_GetOverflowAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetOverflowAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetOverflowAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow_DoNotClipToViewport;
        try self._n_GetOverflowAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetCapStyleAttribute(System.String, Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle)
    private func _n_SetCapStyleAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetCapStyleAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetCapStyleAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetCapStyleAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle GetCapStyleAttribute(System.String)
    private func _n_GetCapStyleAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCapStyleAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetCapStyleAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle = _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle_Flat;
        try self._n_GetCapStyleAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetLineJoinAttribute(System.String, Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin)
    private func _n_SetLineJoinAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetLineJoinAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetLineJoinAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetLineJoinAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin GetLineJoinAttribute(System.String)
    private func _n_GetLineJoinAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLineJoinAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetLineJoinAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin = _q_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin_Miter;
        try self._n_GetLineJoinAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetVisibilityAttribute(System.String, Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility)
    private func _n_SetVisibilityAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetVisibilityAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetVisibilityAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetVisibilityAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility GetVisibilityAttribute(System.String)
    private func _n_GetVisibilityAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVisibilityAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetVisibilityAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility_Visible;
        try self._n_GetVisibilityAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetTransformAttribute(System.String, Windows.Foundation.Numerics.Matrix3x2)
    private func _n_SetTransformAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CWindows_CFoundation_CNumerics_CMatrix3x2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetTransformAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetTransformAttribute(attributeName : Optional<Swift.String>, attributeValue : Windows.Foundation.Numerics.Matrix3x2) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetTransformAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Windows.Foundation.Numerics.Matrix3x2 GetTransformAttribute(System.String)
    private func _n_GetTransformAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CMatrix3x2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTransformAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetTransformAttribute(attributeName : Optional<Swift.String>) throws -> Windows.Foundation.Numerics.Matrix3x2 {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CWindows_CFoundation_CNumerics_CMatrix3x2 = _q_CWindows_CFoundation_CNumerics_CMatrix3x2(M11: 0, M12: 0, M21: 0, M22: 0, M31: 0, M32: 0);
        try self._n_GetTransformAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetUnitsAttribute(System.String, Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits)
    private func _n_SetUnitsAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetUnitsAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetUnitsAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetUnitsAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits GetUnitsAttribute(System.String)
    private func _n_GetUnitsAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetUnitsAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetUnitsAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits_UserSpaceOnUse;
        try self._n_GetUnitsAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetEdgeBehaviorAttribute(System.String, Microsoft.Graphics.Canvas.CanvasEdgeBehavior)
    private func _n_SetEdgeBehaviorAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetEdgeBehaviorAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetEdgeBehaviorAttribute(attributeName : Optional<Swift.String>, attributeValue : Microsoft.Graphics.Canvas.CanvasEdgeBehavior) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetEdgeBehaviorAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Microsoft.Graphics.Canvas.CanvasEdgeBehavior GetEdgeBehaviorAttribute(System.String)
    private func _n_GetEdgeBehaviorAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetEdgeBehaviorAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetEdgeBehaviorAttribute(attributeName : Optional<Swift.String>) throws -> Microsoft.Graphics.Canvas.CanvasEdgeBehavior {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = _q_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp;
        try self._n_GetEdgeBehaviorAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetRectangleAttribute(System.String, Windows.Foundation.Rect)
    private func _n_SetRectangleAttribute(_ attributeName : Optional<HSTRING>, _ attributeValue : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRectangleAttribute(pThis, attributeName, attributeValue))
        }
    }
    public func SetRectangleAttribute(attributeName : Optional<Swift.String>, attributeValue : Windows.Foundation.Rect) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetRectangleAttribute(__hstr_attributeName.Raw(), attributeValue);
        }
    }
    // Windows.Foundation.Rect GetRectangleAttribute(System.String)
    private func _n_GetRectangleAttribute(_ attributeName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRectangleAttribute(pThis, attributeName, __presult))
        }
    }
    public func GetRectangleAttribute(attributeName : Optional<Swift.String>) throws -> Windows.Foundation.Rect {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_GetRectangleAttribute(__hstr_attributeName.Raw(), &__result);
        return __result;
        }
    }
    // void SetLengthAttribute(System.String, System.Single, Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits)
    private func _n_SetLengthAttribute(_ attributeName : Optional<HSTRING>, _ value : FLOAT, _ units : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetLengthAttribute(pThis, attributeName, value, units))
        }
    }
    public func SetLengthAttribute(attributeName : Optional<Swift.String>, value : Swift.Float, units : Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetLengthAttribute(__hstr_attributeName.Raw(), value, units);
        }
    }
    // System.Single GetLengthAttribute(System.String, ref Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits)
    private func _n_GetLengthAttribute(_ attributeName : Optional<HSTRING>, _ units : UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits>, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLengthAttribute(pThis, attributeName, units, __presult))
        }
    }
    public func GetLengthAttribute(attributeName : Optional<Swift.String>, units : inout Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits) throws -> Swift.Float {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : FLOAT = 0;
            var _tmp_out_units: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits_Number;
        try self._n_GetLengthAttribute(__hstr_attributeName.Raw(), &_tmp_out_units, &__result);
            units = _tmp_out_units;
        return __result;
        }
    }
    // void SetAspectRatioAttribute(System.String, Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment, Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling)
    private func _n_SetAspectRatioAttribute(_ attributeName : Optional<HSTRING>, _ alignment : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment, _ meetOrSlice : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAspectRatioAttribute(pThis, attributeName, alignment, meetOrSlice))
        }
    }
    public func SetAspectRatioAttribute(attributeName : Optional<Swift.String>, alignment : Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment, meetOrSlice : Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling) throws -> Void {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        try self._n_SetAspectRatioAttribute(__hstr_attributeName.Raw(), alignment, meetOrSlice);
        }
    }
    // Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment GetAspectRatioAttribute(System.String, ref Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling)
    private func _n_GetAspectRatioAttribute(_ attributeName : Optional<HSTRING>, _ meetOrSlice : UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAspectRatioAttribute(pThis, attributeName, meetOrSlice, __presult))
        }
    }
    public func GetAspectRatioAttribute(attributeName : Optional<Swift.String>, meetOrSlice : inout Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling) throws -> Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment {
        let __hstr_attributeName = try HString(attributeName!);
        return try withExtendedLifetime(__hstr_attributeName) {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_None;
            var _tmp_out_meetOrSlice: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling = _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling_Meet;
        try self._n_GetAspectRatioAttribute(__hstr_attributeName.Raw(), &_tmp_out_meetOrSlice, &__result);
            meetOrSlice = _tmp_out_meetOrSlice;
        return __result;
        }
    }
    public var FirstChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        get throws {
            return try get_FirstChild();
        }
    }
    public var HasChildren : boolean {
        get throws {
            return try get_HasChildren();
        }
    }
    public var LastChild : Optional<Microsoft.Graphics.Canvas.Svg.ICanvasSvgElement> {
        get throws {
            return try get_LastChild();
        }
    }
    public var SpecifiedAttributes : UINT32 {
        get throws {
            return try get_SpecifiedAttributes();
        }
    }
    public var Tag : Swift.String {
        get throws {
            return try get_Tag();
        }
    }
} // ICanvasSvgNamedElement


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgPaintAttribute
// interface type
open class ICanvasSvgPaintAttribute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x653786a8, Data2: 0xf3ab, Data3 : 0x4083, Data4 : (0x99, 0x1d, 0x97, 0x48, 0xaa, 0x86, 0xbd, 0x6e)) }
// method not needed: put_PaintType
// method not needed: get_PaintType
// method not needed: put_Color
// method not needed: get_Color
// method not needed: put_Id
// method not needed: get_Id
} // ICanvasSvgPaintAttribute


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgPathAttribute
// interface type
open class ICanvasSvgPathAttribute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x652786a8, Data2: 0xf3ab, Data3 : 0x4083, Data4 : (0x99, 0x1d, 0x97, 0x48, 0xab, 0x86, 0xbd, 0x6e)) }
// method not needed: CreatePathGeometry
// method not needed: CreatePathGeometryWithFill
// method not needed: get_Commands
// method not needed: GetCommands
// method not needed: get_SegmentData
// method not needed: GetSegmentData
// method not needed: RemoveCommandsAtEnd
// method not needed: RemoveSegmentDataAtEnd
// method not needed: SetCommands
// method not needed: SetSegmentData
} // ICanvasSvgPathAttribute


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgPointsAttribute
// interface type
open class ICanvasSvgPointsAttribute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x652786a8, Data2: 0xf3ab, Data3 : 0x4083, Data4 : (0x99, 0x1d, 0x97, 0x48, 0xaa, 0x86, 0xbd, 0x6f)) }
// method not needed: get_Points
// method not needed: GetPoints
// method not needed: RemovePointsAtEnd
// method not needed: SetPoints
} // ICanvasSvgPointsAttribute


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgStrokeDashArrayAttribute
// interface type
open class ICanvasSvgStrokeDashArrayAttribute
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x652786a8, Data2: 0xf3ab, Data3 : 0x4083, Data4 : (0x99, 0x1d, 0x97, 0x48, 0xaa, 0x86, 0xbd, 0x70)) }
// method not needed: GetDashes
// method not needed: GetDashesWithUnits
// method not needed: RemoveDashesAtEnd
// method not needed: SetDashes
// method not needed: SetDashesWithUnit
// method not needed: SetDashesWithUnits
} // ICanvasSvgStrokeDashArrayAttribute


// type: Microsoft.Graphics.Canvas.Svg.ICanvasSvgTextElement
// interface type
open class ICanvasSvgTextElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x652786a8, Data2: 0xf3ab, Data3 : 0x4083, Data4 : (0x99, 0x1d, 0x97, 0x48, 0xaa, 0x86, 0xbd, 0x6d)) }
    // [IsSpecialName] void put_Text(System.String)
    private func _n_put_Text(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, value))
        }
    }
    public func put_Text(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Text(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CSvg_CICanvasSvgTextElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
} // ICanvasSvgTextElement


}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectAlignment {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_None;
        }
    }
    public static var XMinYMin : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMinYMin;
        }
    }
    public static var XMidYMin : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMidYMin;
        }
    }
    public static var XMaxYMin : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMaxYMin;
        }
    }
    public static var XMinYMid : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMinYMid;
        }
    }
    public static var XMidYMid : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMidYMid;
        }
    }
    public static var XMaxYMid : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMaxYMid;
        }
    }
    public static var XMinYMax : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMinYMax;
        }
    }
    public static var XMidYMax : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMidYMax;
        }
    }
    public static var XMaxYMax : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectAlignment_XMaxYMax;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgAspectScaling {
    public static var Meet : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling_Meet;
        }
    }
    public static var Slice : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgAspectScaling_Slice;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgDisplay {
    public static var Inline : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay_Inline;
        }
    }
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgDisplay_None;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgLengthUnits {
    public static var Number : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits_Number;
        }
    }
    public static var Percentage : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgLengthUnits_Percentage;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgOverflow {
    public static var DoNotClipToViewport : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow_DoNotClipToViewport;
        }
    }
    public static var ClipToViewport : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgOverflow_ClipToViewport;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgPaintType {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_None;
        }
    }
    public static var Color : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_Color;
        }
    }
    public static var CurrentColor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_CurrentColor;
        }
    }
    public static var Uri : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_Uri;
        }
    }
    public static var UriThenNone : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_UriThenNone;
        }
    }
    public static var UriThenColor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_UriThenColor;
        }
    }
    public static var UriThenCurrentColor : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPaintType_UriThenCurrentColor;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgPathCommand {
    public static var ClosePath : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_ClosePath;
        }
    }
    public static var MoveAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_MoveAbsolute;
        }
    }
    public static var MoveRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_MoveRelative;
        }
    }
    public static var LineAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_LineAbsolute;
        }
    }
    public static var LineRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_LineRelative;
        }
    }
    public static var CubicAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicAbsolute;
        }
    }
    public static var CubicRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicRelative;
        }
    }
    public static var QuadraticAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticAbsolute;
        }
    }
    public static var QuadraticRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticRelative;
        }
    }
    public static var ArcAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_ArcAbsolute;
        }
    }
    public static var ArcRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_ArcRelative;
        }
    }
    public static var HorizontalAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_HorizontalAbsolute;
        }
    }
    public static var HorizontalRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_HorizontalRelative;
        }
    }
    public static var VerticalAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_VerticalAbsolute;
        }
    }
    public static var VerticalRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_VerticalRelative;
        }
    }
    public static var CubicSmoothAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicSmoothAbsolute;
        }
    }
    public static var CubicSmoothRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_CubicSmoothRelative;
        }
    }
    public static var QuadraticSmoothAbsolute : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticSmoothAbsolute;
        }
    }
    public static var QuadraticSmoothRelative : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgPathCommand_QuadraticSmoothRelative;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgUnits {
    public static var UserSpaceOnUse : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits_UserSpaceOnUse;
        }
    }
    public static var ObjectBoundingBox : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgUnits_ObjectBoundingBox;
        }
    }
}
extension Microsoft.Graphics.Canvas.Svg.CanvasSvgVisibility {
    public static var Visible : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility_Visible;
        }
    }
    public static var Hidden : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CSvg_CCanvasSvgVisibility_Hidden;
        }
    }
}
