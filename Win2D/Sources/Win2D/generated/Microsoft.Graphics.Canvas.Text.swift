// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWin2D;
import WindowsSdk;
import CWindowsSdk;
import WindowsApp;
import CWindowsApp;

extension Microsoft.Graphics.Canvas.Text {
// type: Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi
// struct type
public typealias CanvasAnalyzedBidi = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi;

// type: Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint
// struct type
public typealias CanvasAnalyzedBreakpoint = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint;

// type: Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation
// struct type
public typealias CanvasAnalyzedGlyphOrientation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation;

// type: Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript
// struct type
public typealias CanvasAnalyzedScript = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript;

// type: Microsoft.Graphics.Canvas.Text.CanvasCharacterRange
// struct type
public typealias CanvasCharacterRange = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange;

// type: Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics
// struct type
public typealias CanvasClusterMetrics = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics;

// type: Microsoft.Graphics.Canvas.Text.CanvasClusterProperties
// enum type
public typealias CanvasClusterProperties = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties;

// type: Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions
// enum type
public typealias CanvasDrawTextOptions = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions;

// type: Microsoft.Graphics.Canvas.Text.CanvasFontFace
// runtime class
public class CanvasFontFace
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasFontFace;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasFontFace?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasFontFace { return _self; }
    public func GetRecommendedRenderingMode(fontSize : Swift.Float, dpi : Swift.Float, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, renderingParameters : Optional<Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters>) throws -> Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetRecommendedRenderingMode(fontSize: fontSize, dpi: dpi, measuringMode: measuringMode, renderingParameters: renderingParameters!.Interface());
    }
    public func GetRecommendedRenderingMode(fontSize : Swift.Float, dpi : Swift.Float, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, renderingParameters : Optional<Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters>, transform : Windows.Foundation.Numerics.Matrix3x2, isSideways : boolean, outlineThreshold : Microsoft.Graphics.Canvas.CanvasAntialiasing) throws -> Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetRecommendedRenderingModeWithAllOptions(fontSize: fontSize, dpi: dpi, measuringMode: measuringMode, renderingParameters: renderingParameters!.Interface(), transform: transform, isSideways: isSideways, outlineThreshold: outlineThreshold);
    }
    public func GetRecommendedGridFit(fontSize : Swift.Float, dpi : Swift.Float, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, renderingParameters : Optional<Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters>, transform : Windows.Foundation.Numerics.Matrix3x2, isSideways : boolean, outlineThreshold : Microsoft.Graphics.Canvas.CanvasAntialiasing) throws -> Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetRecommendedGridFit(fontSize: fontSize, dpi: dpi, measuringMode: measuringMode, renderingParameters: renderingParameters!.Interface(), transform: transform, isSideways: isSideways, outlineThreshold: outlineThreshold);
    }
    public func get_GlyphBox() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_GlyphBox();
    }
    public func get_SubscriptPosition() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_SubscriptPosition();
    }
    public func get_SubscriptSize() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_SubscriptSize();
    }
    public func get_SuperscriptPosition() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_SuperscriptPosition();
    }
    public func get_SuperscriptSize() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_SuperscriptSize();
    }
    public func get_HasTypographicMetrics() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_HasTypographicMetrics();
    }
    public func get_Ascent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_Ascent();
    }
    public func get_Descent() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_Descent();
    }
    public func get_LineGap() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_LineGap();
    }
    public func get_CapHeight() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_CapHeight();
    }
    public func get_LowercaseLetterHeight() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_LowercaseLetterHeight();
    }
    public func get_UnderlinePosition() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_UnderlinePosition();
    }
    public func get_UnderlineThickness() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_UnderlineThickness();
    }
    public func get_StrikethroughPosition() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_StrikethroughPosition();
    }
    public func get_StrikethroughThickness() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_StrikethroughThickness();
    }
    public func get_CaretSlopeRise() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_CaretSlopeRise();
    }
    public func get_CaretSlopeRun() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_CaretSlopeRun();
    }
    public func get_CaretOffset() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_CaretOffset();
    }
    public func get_UnicodeRanges() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_UnicodeRanges();
    }
    public func get_IsMonospaced() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_IsMonospaced();
    }
    public func GetVerticalGlyphVariants(inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<INT32>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetVerticalGlyphVariants(inputElementsLength: inputElementsLength, inputElements: inputElements);
    }
    public func get_HasVerticalGlyphVariants() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_HasVerticalGlyphVariants();
    }
    public func get_FileFormatType() throws -> Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_FileFormatType();
    }
    public func get_Simulations() throws -> Microsoft.Graphics.Canvas.Text.CanvasFontSimulations {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_Simulations();
    }
    public func get_IsSymbolFont() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_IsSymbolFont();
    }
    public func get_GlyphCount() throws -> Swift.UInt32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_GlyphCount();
    }
    public func GetGlyphIndices(inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<UINT32>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetGlyphIndices_(inputElementsLength: inputElementsLength, inputElements: inputElements);
    }
    public func GetGlyphMetrics(inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<INT32>>, isSideways : boolean) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetGlyphMetrics(inputElementsLength: inputElementsLength, inputElements: inputElements, isSideways: isSideways);
    }
    public func GetGdiCompatibleGlyphMetrics(fontSize : Swift.Float, dpi : Swift.Float, transform : Windows.Foundation.Numerics.Matrix3x2, useGdiNatural : boolean, inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<INT32>>, isSideways : boolean) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetGdiCompatibleGlyphMetrics(fontSize: fontSize, dpi: dpi, transform: transform, useGdiNatural: useGdiNatural, inputElementsLength: inputElementsLength, inputElements: inputElements, isSideways: isSideways);
    }
    public func get_Weight() throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_Weight();
    }
    public func get_Stretch() throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_Stretch();
    }
    public func get_Style() throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_Style();
    }
    public func get_FamilyNames() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_FamilyNames();
    }
    public func get_FaceNames() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_FaceNames();
    }
    public func GetInformationalStrings(fontInformation : Microsoft.Graphics.Canvas.Text.CanvasFontInformation) throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetInformationalStrings(fontInformation: fontInformation);
    }
    public func HasCharacter(unicodeValue : Swift.UInt32) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.HasCharacter(unicodeValue: unicodeValue);
    }
    public func GetGlyphRunBounds(drawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>, point : Windows.Foundation.Numerics.Vector2, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetGlyphRunBounds(drawingSession: drawingSession!.Interface(), point: point, fontSize: fontSize, glyphsLength: glyphsLength, glyphs: glyphs, isSideways: isSideways, bidiLevel: bidiLevel);
    }
    public func GetGlyphRunBounds(drawingSession : Optional<Microsoft.Graphics.Canvas.CanvasDrawingSession>, point : Windows.Foundation.Numerics.Vector2, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode) throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetGlyphRunBoundsWithMeasuringMode(drawingSession: drawingSession!.Interface(), point: point, fontSize: fontSize, glyphsLength: glyphsLength, glyphs: glyphs, isSideways: isSideways, bidiLevel: bidiLevel, measuringMode: measuringMode);
    }
    public func get_Panose() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.get_Panose();
    }
    public func GetSupportedTypographicFeatureNames(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetSupportedTypographicFeatureNames(script: script);
    }
    public func GetSupportedTypographicFeatureNames(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, locale : Swift.String) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetSupportedTypographicFeatureNamesWithLocale(script: script, locale: locale);
    }
    public func GetTypographicFeatureGlyphSupport(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, typographicFeatureName : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, glyphsElementsLength : UINT32, glyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetTypographicFeatureGlyphSupport(script: script, typographicFeatureName: typographicFeatureName, glyphsElementsLength: glyphsElementsLength, glyphsElements: glyphsElements);
    }
    public func GetTypographicFeatureGlyphSupport(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, typographicFeatureName : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, glyphsElementsLength : UINT32, glyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, locale : Swift.String) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GetTypographicFeatureGlyphSupportWithLocale(script: script, typographicFeatureName: typographicFeatureName, glyphsElementsLength: glyphsElementsLength, glyphsElements: glyphsElements, locale: locale);
    }
    public var Ascent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.Ascent;
        }
    }
    public var CapHeight : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.CapHeight;
        }
    }
    public var CaretOffset : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.CaretOffset;
        }
    }
    public var CaretSlopeRise : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.CaretSlopeRise;
        }
    }
    public var CaretSlopeRun : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.CaretSlopeRun;
        }
    }
    public var Descent : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.Descent;
        }
    }
    public var FaceNames : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.FaceNames;
        }
    }
    public var FamilyNames : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.FamilyNames;
        }
    }
    public var FileFormatType : Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.FileFormatType;
        }
    }
    public var GlyphBox : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GlyphBox;
        }
    }
    public var GlyphCount : Swift.UInt32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.GlyphCount;
        }
    }
    public var HasTypographicMetrics : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.HasTypographicMetrics;
        }
    }
    public var HasVerticalGlyphVariants : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.HasVerticalGlyphVariants;
        }
    }
    public var IsMonospaced : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.IsMonospaced;
        }
    }
    public var IsSymbolFont : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.IsSymbolFont;
        }
    }
    public var LineGap : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.LineGap;
        }
    }
    public var LowercaseLetterHeight : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.LowercaseLetterHeight;
        }
    }
    public var Panose : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.Panose;
        }
    }
    public var Simulations : Microsoft.Graphics.Canvas.Text.CanvasFontSimulations {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.Simulations;
        }
    }
    public var Stretch : Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.Stretch;
        }
    }
    public var StrikethroughPosition : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.StrikethroughPosition;
        }
    }
    public var StrikethroughThickness : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.StrikethroughThickness;
        }
    }
    public var Style : Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.Style;
        }
    }
    public var SubscriptPosition : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.SubscriptPosition;
        }
    }
    public var SubscriptSize : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.SubscriptSize;
        }
    }
    public var SuperscriptPosition : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.SuperscriptPosition;
        }
    }
    public var SuperscriptSize : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.SuperscriptSize;
        }
    }
    public var UnderlinePosition : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.UnderlinePosition;
        }
    }
    public var UnderlineThickness : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.UnderlineThickness;
        }
    }
    public var UnicodeRanges : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.UnicodeRanges;
        }
    }
    public var Weight : Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontFace = try _self.QueryInterface();
        return try _ifc.Weight;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType
// enum type
public typealias CanvasFontFileFormatType = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType;

// type: Microsoft.Graphics.Canvas.Text.CanvasFontInformation
// enum type
public typealias CanvasFontInformation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation;

// type: Microsoft.Graphics.Canvas.Text.CanvasFontProperty
// struct type
public typealias CanvasFontProperty = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty;

// type: Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier
// enum type
public typealias CanvasFontPropertyIdentifier = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier;

// type: Microsoft.Graphics.Canvas.Text.CanvasFontSet
// runtime class
public class CanvasFontSet
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasFontSet;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasFontSet?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasFontSet { return _self; }
    public init(uri : Optional<Windows.Foundation.Uri>) throws {
        let _af : ICanvasFontSetFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasFontSet");
        _self = try _af.Create(uri: uri!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasFontSetStatics {
        static var x : ICanvasFontSetStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasFontSet")
    }
    public static var CanvasFontSetStatics : ICanvasFontSetStatics {
        _ICanvasFontSetStatics.x
    }
    public static func GetSystemFontSet() throws -> Optional<Microsoft.Graphics.Canvas.Text.CanvasFontSet> {
        return try Microsoft.Graphics.Canvas.Text.CanvasFontSet(plok: CanvasFontSetStatics.GetSystemFontSet());
    }
    public func get_Fonts() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFace> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try _ifc.get_Fonts();
    }
    public func TryFindFontFace(fontFace : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace>, index : inout Swift.Int32) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
            var _tmp_out_index: Swift.Int32 = 0;
        return try _ifc.TryFindFontFace(fontFace: fontFace!.Interface(), index: &_tmp_out_index);
    }
    public func GetMatchingFonts(propertyElementsLength : UINT32, propertyElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty>>) throws -> Optional<Microsoft.Graphics.Canvas.Text.CanvasFontSet> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Text.CanvasFontSet(plok: _ifc.GetMatchingFontsFromProperties(propertyElementsLength: propertyElementsLength, propertyElements: propertyElements));
    }
    public func GetMatchingFonts(familyName : Swift.String, weight : Windows.UI.Text.FontWeight, stretch : Windows.UI.Text.FontStretch, style : Windows.UI.Text.FontStyle) throws -> Optional<Microsoft.Graphics.Canvas.Text.CanvasFontSet> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Text.CanvasFontSet(plok: _ifc.GetMatchingFontsFromWwsFamily(familyName: familyName, weight: weight, stretch: stretch, style: style));
    }
    public func CountFontsMatchingProperty(property : Microsoft.Graphics.Canvas.Text.CanvasFontProperty) throws -> Swift.UInt32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try _ifc.CountFontsMatchingProperty(property: property);
    }
    public func GetPropertyValues(fontIndex : Swift.UInt32, propertyIdentifier : Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier) throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try _ifc.GetPropertyValuesFromIndex(fontIndex: fontIndex, propertyIdentifier: propertyIdentifier);
    }
    public func GetPropertyValues(propertyIdentifier : Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier, preferredLocaleNames : Swift.String) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try _ifc.GetPropertyValuesFromIdentifier(propertyIdentifier: propertyIdentifier, preferredLocaleNames: preferredLocaleNames);
    }
    public func GetPropertyValues(propertyIdentifier : Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try _ifc.GetPropertyValues(propertyIdentifier: propertyIdentifier);
    }
    public var Fonts : Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFace> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasFontSet = try _self.QueryInterface();
        return try _ifc.Fonts;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasFontSimulations
// enum type
public typealias CanvasFontSimulations = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations;

// type: Microsoft.Graphics.Canvas.Text.CanvasGlyph
// struct type
public typealias CanvasGlyph = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;

// type: Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification
// enum type
public typealias CanvasGlyphJustification = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification;

// type: Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics
// struct type
public typealias CanvasGlyphMetrics = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics;

// type: Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation
// enum type
public typealias CanvasGlyphOrientation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation;

// type: Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping
// struct type
public typealias CanvasGlyphShaping = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping;

// type: Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment
// enum type
public typealias CanvasHorizontalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment;

// type: Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity
// struct type
public typealias CanvasJustificationOpportunity = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity;

// type: Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition
// enum type
public typealias CanvasLineBreakCondition = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition;

// type: Microsoft.Graphics.Canvas.Text.CanvasLineMetrics
// struct type
public typealias CanvasLineMetrics = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics;

// type: Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode
// enum type
public typealias CanvasLineSpacingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution
// runtime class
public class CanvasNumberSubstitution
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution { return _self; }
    public init(method : Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod) throws {
        let _af : ICanvasNumberSubstitutionFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution");
        _self = try _af.Create(method: method)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(method : Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod, localeName : Swift.String, ignoreEnvironmentOverrides : boolean) throws {
        let _af : ICanvasNumberSubstitutionFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution");
        _self = try _af.CreateWithLocaleAndIgnoreOverrides(method: method, localeName: localeName, ignoreEnvironmentOverrides: ignoreEnvironmentOverrides)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod
// enum type
public typealias CanvasNumberSubstitutionMethod = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod;

// type: Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment
// enum type
public typealias CanvasOpticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment;

// type: Microsoft.Graphics.Canvas.Text.CanvasScaledFont
// runtime class
public class CanvasScaledFont
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasScaledFont;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasScaledFont?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasScaledFont { return _self; }
    public func get_FontFace() throws -> Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasScaledFont = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Text.CanvasFontFace(plok: _ifc.get_FontFace());
    }
    public func get_ScaleFactor() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasScaledFont = try _self.QueryInterface();
        return try _ifc.get_ScaleFactor();
    }
    public var FontFace : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasScaledFont = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Text.CanvasFontFace(plok: _ifc.FontFace);
        }
    }
    public var ScaleFactor : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasScaledFont = try _self.QueryInterface();
        return try _ifc.ScaleFactor;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasScriptProperties
// struct type
public typealias CanvasScriptProperties = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties;

// type: Microsoft.Graphics.Canvas.Text.CanvasScriptShape
// enum type
public typealias CanvasScriptShape = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer
// runtime class
public class CanvasTextAnalyzer
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer { return _self; }
    public init(text : Swift.String, textDirection : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws {
        let _af : ICanvasTextAnalyzerFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer");
        _self = try _af.Create(text: text, textDirection: textDirection)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(text : Swift.String, textDirection : Microsoft.Graphics.Canvas.Text.CanvasTextDirection, numberSubstitution : Optional<Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>, verticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation, bidiLevel : Swift.UInt32) throws {
        let _af : ICanvasTextAnalyzerFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer");
        _self = try _af.CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(text: text, textDirection: textDirection, numberSubstitution: numberSubstitution!.Interface(), verticalGlyphOrientation: verticalGlyphOrientation, bidiLevel: bidiLevel)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(text : Swift.String, textDirection : Microsoft.Graphics.Canvas.Text.CanvasTextDirection, options : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions>) throws {
        let _af : ICanvasTextAnalyzerFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer");
        _self = try _af.CreateWithOptions(text: text, textDirection: textDirection, options: options)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func GetFonts(textFormat : Optional<Microsoft.Graphics.Canvas.Text.CanvasTextFormat>) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetFontsUsingSystemFontSet(textFormat: textFormat!.Interface());
    }
    public func GetFonts(textFormat : Optional<Microsoft.Graphics.Canvas.Text.CanvasTextFormat>, fontSet : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontSet>) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetFonts(textFormat: textFormat!.Interface(), fontSet: fontSet!.Interface());
    }
    public func GetBidi() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetBidi();
    }
    public func GetBidi(locale : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetBidiWithLocale(locale: locale);
    }
    public func GetBreakpoints() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetBreakpoints();
    }
    public func GetBreakpoints(locale : Swift.String) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetBreakpointsWithLocale(locale: locale);
    }
    public func GetNumberSubstitutions() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitution> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetNumberSubstitutions();
    }
    public func GetScript() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetScript();
    }
    public func GetScript(locale : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetScriptWithLocale(locale: locale);
    }
    public func GetGlyphOrientations() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetGlyphOrientations();
    }
    public func GetGlyphOrientations(locale : Swift.String) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetGlyphOrientationsWithLocale(locale: locale);
    }
    public func GetScriptProperties(analyzedScript : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript) throws -> Microsoft.Graphics.Canvas.Text.CanvasScriptProperties {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetScriptProperties(analyzedScript: analyzedScript);
    }
    public func GetGlyphs(characterRange : Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, fontFace : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, isSideways : boolean, isRightToLeft : boolean, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetGlyphs(characterRange: characterRange, fontFace: fontFace!.Interface(), fontSize: fontSize, isSideways: isSideways, isRightToLeft: isRightToLeft, script: script);
    }
    public func GetGlyphs(characterRange : Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, fontFace : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, isSideways : boolean, isRightToLeft : boolean, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, locale : Swift.String, numberSubstitution : Optional<Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>, typographyRanges : Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypography>, clusterMapIndicesElementsLength : inout UINT32, clusterMapIndicesElements : inout Optional<UnsafeMutablePointer<INT32>>, isShapedAloneGlyphsElementsLength : inout UINT32, isShapedAloneGlyphsElements : inout Optional<UnsafeMutablePointer<boolean>>, glyphShapingResultsElementsLength : inout UINT32, glyphShapingResultsElements : inout Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
            var _tmp_out_clusterMapIndicesElementsLength: UINT32 = 0;
            var _tmp_out_clusterMapIndicesElements: Optional<UnsafeMutablePointer<INT32>> = nil;
            var _tmp_out_isShapedAloneGlyphsElementsLength: UINT32 = 0;
            var _tmp_out_isShapedAloneGlyphsElements: Optional<UnsafeMutablePointer<boolean>> = nil;
            var _tmp_out_glyphShapingResultsElementsLength: UINT32 = 0;
            var _tmp_out_glyphShapingResultsElements: Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>> = nil;
        return try _ifc.GetGlyphsWithAllOptions(characterRange: characterRange, fontFace: fontFace!.Interface(), fontSize: fontSize, isSideways: isSideways, isRightToLeft: isRightToLeft, script: script, locale: locale, numberSubstitution: numberSubstitution!.Interface(), typographyRanges: typographyRanges, clusterMapIndicesElementsLength: &_tmp_out_clusterMapIndicesElementsLength, clusterMapIndicesElements: &_tmp_out_clusterMapIndicesElements, isShapedAloneGlyphsElementsLength: &_tmp_out_isShapedAloneGlyphsElementsLength, isShapedAloneGlyphsElements: &_tmp_out_isShapedAloneGlyphsElements, glyphShapingResultsElementsLength: &_tmp_out_glyphShapingResultsElementsLength, glyphShapingResultsElements: &_tmp_out_glyphShapingResultsElements);
    }
    public func GetJustificationOpportunities(characterRange : Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, fontFace : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, clusterMapIndicesElementsLength : UINT32, clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, glyphShapingResultsElementsLength : UINT32, glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.GetJustificationOpportunities(characterRange: characterRange, fontFace: fontFace!.Interface(), fontSize: fontSize, script: script, clusterMapIndicesElementsLength: clusterMapIndicesElementsLength, clusterMapIndicesElements: clusterMapIndicesElements, glyphShapingResultsElementsLength: glyphShapingResultsElementsLength, glyphShapingResultsElements: glyphShapingResultsElements);
    }
    public func ApplyJustificationOpportunities(lineWidth : Swift.Float, justificationOpportunitiesElementsLength : UINT32, justificationOpportunitiesElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity>>, sourceGlyphsElementsLength : UINT32, sourceGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.ApplyJustificationOpportunities(lineWidth: lineWidth, justificationOpportunitiesElementsLength: justificationOpportunitiesElementsLength, justificationOpportunitiesElements: justificationOpportunitiesElements, sourceGlyphsElementsLength: sourceGlyphsElementsLength, sourceGlyphsElements: sourceGlyphsElements);
    }
    public func AddGlyphsAfterJustification(fontFace : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, clusterMapIndicesElementsLength : UINT32, clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, originalGlyphsElementsLength : UINT32, originalGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, justifiedGlyphsElementsLength : UINT32, justifiedGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, glyphShapingResultsElementsLength : UINT32, glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
        return try _ifc.AddGlyphsAfterJustification(fontFace: fontFace!.Interface(), fontSize: fontSize, script: script, clusterMapIndicesElementsLength: clusterMapIndicesElementsLength, clusterMapIndicesElements: clusterMapIndicesElements, originalGlyphsElementsLength: originalGlyphsElementsLength, originalGlyphsElements: originalGlyphsElements, justifiedGlyphsElementsLength: justifiedGlyphsElementsLength, justifiedGlyphsElements: justifiedGlyphsElements, glyphShapingResultsElementsLength: glyphShapingResultsElementsLength, glyphShapingResultsElements: glyphShapingResultsElements);
    }
    public func AddGlyphsAfterJustification(fontFace : Optional<Microsoft.Graphics.Canvas.Text.CanvasFontFace>, fontSize : Swift.Float, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, clusterMapIndicesElementsLength : UINT32, clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, originalGlyphsElementsLength : UINT32, originalGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, justifiedGlyphsElementsLength : UINT32, justifiedGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, glyphShapingResultsElementsLength : UINT32, glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>, outputClusterMapIndicesElementsLength : inout UINT32, outputClusterMapIndicesElements : inout Optional<UnsafeMutablePointer<INT32>>) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer = try _self.QueryInterface();
            var _tmp_out_outputClusterMapIndicesElementsLength: UINT32 = 0;
            var _tmp_out_outputClusterMapIndicesElements: Optional<UnsafeMutablePointer<INT32>> = nil;
        return try _ifc.AddGlyphsAfterJustificationWithClusterMap(fontFace: fontFace!.Interface(), fontSize: fontSize, script: script, clusterMapIndicesElementsLength: clusterMapIndicesElementsLength, clusterMapIndicesElements: clusterMapIndicesElements, originalGlyphsElementsLength: originalGlyphsElementsLength, originalGlyphsElements: originalGlyphsElements, justifiedGlyphsElementsLength: justifiedGlyphsElementsLength, justifiedGlyphsElements: justifiedGlyphsElements, glyphShapingResultsElementsLength: glyphShapingResultsElementsLength, glyphShapingResultsElements: glyphShapingResultsElements, outputClusterMapIndicesElementsLength: &_tmp_out_outputClusterMapIndicesElementsLength, outputClusterMapIndicesElements: &_tmp_out_outputClusterMapIndicesElements);
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing
// enum type
public typealias CanvasTextAntialiasing = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextDirection
// enum type
public typealias CanvasTextDirection = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextFormat
// runtime class
public class CanvasTextFormat
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTextFormat?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTextFormat { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Text.CanvasTextFormat")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasTextFormatStatics {
        static var x : ICanvasTextFormatStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextFormat")
    }
    public static var CanvasTextFormatStatics : ICanvasTextFormatStatics {
        _ICanvasTextFormatStatics.x
    }
    public static func GetSystemFontFamilies() throws -> UINT32 {
        return try CanvasTextFormatStatics.GetSystemFontFamilies();
    }
    public static func GetSystemFontFamilies(localeList : Optional<ClosedGenerics.IVectorView_1_HSTRING>) throws -> UINT32 {
        return try CanvasTextFormatStatics.GetSystemFontFamiliesFromLocaleList(localeList: localeList);
    }
    public func get_Direction() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_Direction();
    }
    public func put_Direction(value : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_Direction(value: value);
    }
    public func get_FontFamily() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontFamily();
    }
    public func put_FontFamily(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontFamily(value: value);
    }
    public func get_FontSize() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontSize();
    }
    public func put_FontSize(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontSize(value: value);
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontStretch();
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontStretch(value: value);
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontStyle();
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontStyle(value: value);
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontWeight();
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontWeight(value: value);
    }
    public func get_IncrementalTabStop() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_IncrementalTabStop();
    }
    public func put_IncrementalTabStop(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_IncrementalTabStop(value: value);
    }
    public func get_LineSpacing() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LineSpacing();
    }
    public func put_LineSpacing(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LineSpacing(value: value);
    }
    public func get_LineSpacingBaseline() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LineSpacingBaseline();
    }
    public func put_LineSpacingBaseline(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LineSpacingBaseline(value: value);
    }
    public func get_LocaleName() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LocaleName();
    }
    public func put_LocaleName(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LocaleName(value: value);
    }
    public func get_VerticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_VerticalAlignment();
    }
    public func put_VerticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_VerticalAlignment(value: value);
    }
    public func get_HorizontalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_HorizontalAlignment();
    }
    public func put_HorizontalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_HorizontalAlignment(value: value);
    }
    public func get_TrimmingGranularity() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingGranularity();
    }
    public func put_TrimmingGranularity(value : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingGranularity(value: value);
    }
    public func get_TrimmingDelimiter() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingDelimiter();
    }
    public func put_TrimmingDelimiter(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingDelimiter(value: value);
    }
    public func get_TrimmingDelimiterCount() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingDelimiterCount();
    }
    public func put_TrimmingDelimiterCount(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingDelimiterCount(value: value);
    }
    public func get_WordWrapping() throws -> Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_WordWrapping();
    }
    public func put_WordWrapping(value : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_WordWrapping(value: value);
    }
    public func get_Options() throws -> Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_Options();
    }
    public func put_Options(value : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_Options(value: value);
    }
    public func get_VerticalGlyphOrientation() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_VerticalGlyphOrientation();
    }
    public func put_VerticalGlyphOrientation(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_VerticalGlyphOrientation(value: value);
    }
    public func get_OpticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_OpticalAlignment();
    }
    public func put_OpticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_OpticalAlignment(value: value);
    }
    public func get_LastLineWrapping() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LastLineWrapping();
    }
    public func put_LastLineWrapping(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LastLineWrapping(value: value);
    }
    public func get_LineSpacingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LineSpacingMode();
    }
    public func put_LineSpacingMode(value : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LineSpacingMode(value: value);
    }
    public func get_TrimmingSign() throws -> Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingSign();
    }
    public func put_TrimmingSign(value : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingSign(value: value);
    }
    public func get_CustomTrimmingSign() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_CustomTrimmingSign();
    }
    public func put_CustomTrimmingSign(value : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_CustomTrimmingSign(value: value);
    }
    public var CustomTrimmingSign : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.CustomTrimmingSign;
        }
    }
    public var Direction : Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.Direction;
        }
    }
    public var FontFamily : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.FontFamily;
        }
    }
    public var FontSize : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.FontSize;
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.FontStretch;
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.FontStyle;
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.FontWeight;
        }
    }
    public var HorizontalAlignment : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.HorizontalAlignment;
        }
    }
    public var IncrementalTabStop : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.IncrementalTabStop;
        }
    }
    public var LastLineWrapping : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.LastLineWrapping;
        }
    }
    public var LineSpacing : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.LineSpacing;
        }
    }
    public var LineSpacingBaseline : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.LineSpacingBaseline;
        }
    }
    public var LineSpacingMode : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.LineSpacingMode;
        }
    }
    public var LocaleName : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.LocaleName;
        }
    }
    public var OpticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.OpticalAlignment;
        }
    }
    public var Options : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.Options;
        }
    }
    public var TrimmingDelimiter : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.TrimmingDelimiter;
        }
    }
    public var TrimmingDelimiterCount : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.TrimmingDelimiterCount;
        }
    }
    public var TrimmingGranularity : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.TrimmingGranularity;
        }
    }
    public var TrimmingSign : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.TrimmingSign;
        }
    }
    public var VerticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.VerticalAlignment;
        }
    }
    public var VerticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.VerticalGlyphOrientation;
        }
    }
    public var WordWrapping : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.WordWrapping;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextGridFit
// enum type
public typealias CanvasTextGridFit = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextLayout
// runtime class
public class CanvasTextLayout
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTextLayout?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTextLayout { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, textString : Swift.String, textFormat : Optional<Microsoft.Graphics.Canvas.Text.CanvasTextFormat>, requestedWidth : Swift.Float, requestedHeight : Swift.Float) throws {
        let _af : ICanvasTextLayoutFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextLayout");
        _self = try _af.Create(resourceCreator: resourceCreator, textString: textString, textFormat: textFormat!.Interface(), requestedWidth: requestedWidth, requestedHeight: requestedHeight)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasTextLayoutStatics {
        static var x : ICanvasTextLayoutStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextLayout")
    }
    public static var CanvasTextLayoutStatics : ICanvasTextLayoutStatics {
        _ICanvasTextLayoutStatics.x
    }
    public static func GetGlyphOrientationTransform(glyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation, isSideways : boolean, position : Windows.Foundation.Numerics.Vector2) throws -> Windows.Foundation.Numerics.Matrix3x2 {
        return try CanvasTextLayoutStatics.GetGlyphOrientationTransform(glyphOrientation: glyphOrientation, isSideways: isSideways, position: position);
    }
    public func GetFormatChangeIndices() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetFormatChangeIndices();
    }
    public func get_Direction() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_Direction();
    }
    public func put_Direction(value : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_Direction(value: value);
    }
    public func get_DefaultFontFamily() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_DefaultFontFamily();
    }
    public func get_DefaultFontSize() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_DefaultFontSize();
    }
    public func get_DefaultFontStretch() throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_DefaultFontStretch();
    }
    public func get_DefaultFontStyle() throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_DefaultFontStyle();
    }
    public func get_DefaultFontWeight() throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_DefaultFontWeight();
    }
    public func get_IncrementalTabStop() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_IncrementalTabStop();
    }
    public func put_IncrementalTabStop(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_IncrementalTabStop(value: value);
    }
    public func get_LineSpacing() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LineSpacing();
    }
    public func put_LineSpacing(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_LineSpacing(value: value);
    }
    public func get_LineSpacingBaseline() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LineSpacingBaseline();
    }
    public func put_LineSpacingBaseline(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_LineSpacingBaseline(value: value);
    }
    public func get_DefaultLocaleName() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_DefaultLocaleName();
    }
    public func get_VerticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_VerticalAlignment();
    }
    public func put_VerticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_VerticalAlignment(value: value);
    }
    public func get_HorizontalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_HorizontalAlignment();
    }
    public func put_HorizontalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_HorizontalAlignment(value: value);
    }
    public func get_TrimmingGranularity() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_TrimmingGranularity();
    }
    public func put_TrimmingGranularity(value : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_TrimmingGranularity(value: value);
    }
    public func get_TrimmingDelimiter() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_TrimmingDelimiter();
    }
    public func put_TrimmingDelimiter(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_TrimmingDelimiter(value: value);
    }
    public func get_TrimmingDelimiterCount() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_TrimmingDelimiterCount();
    }
    public func put_TrimmingDelimiterCount(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_TrimmingDelimiterCount(value: value);
    }
    public func get_WordWrapping() throws -> Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_WordWrapping();
    }
    public func put_WordWrapping(value : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_WordWrapping(value: value);
    }
    public func get_Options() throws -> Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_Options();
    }
    public func put_Options(value : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_Options(value: value);
    }
    public func get_LineSpacingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LineSpacingMode();
    }
    public func put_LineSpacingMode(value : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_LineSpacingMode(value: value);
    }
    public func get_TrimmingSign() throws -> Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_TrimmingSign();
    }
    public func put_TrimmingSign(value : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_TrimmingSign(value: value);
    }
    public func get_CustomTrimmingSign() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_CustomTrimmingSign();
    }
    public func put_CustomTrimmingSign(value : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_CustomTrimmingSign(value: value);
    }
    public func get_RequestedSize() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_RequestedSize();
    }
    public func put_RequestedSize(value : Windows.Foundation.Size) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_RequestedSize(value: value);
    }
    public func GetMinimumLineLength() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetMinimumLineLength();
    }
    public func GetBrush(characterIndex : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasBrush> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetBrush(characterIndex: characterIndex);
    }
    public func GetCustomBrush(characterIndex : Swift.Int32) throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetCustomBrush(characterIndex: characterIndex);
    }
    public func GetFontFamily(characterIndex : Swift.Int32) throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetFontFamily(characterIndex: characterIndex);
    }
    public func GetFontSize(characterIndex : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetFontSize(characterIndex: characterIndex);
    }
    public func GetFontStretch(characterIndex : Swift.Int32) throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetFontStretch(characterIndex: characterIndex);
    }
    public func GetFontStyle(characterIndex : Swift.Int32) throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetFontStyle(characterIndex: characterIndex);
    }
    public func GetFontWeight(characterIndex : Swift.Int32) throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetFontWeight(characterIndex: characterIndex);
    }
    public func GetLocaleName(characterIndex : Swift.Int32) throws -> Optional<Swift.String> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetLocaleName(characterIndex: characterIndex);
    }
    public func GetStrikethrough(characterIndex : Swift.Int32) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetStrikethrough(characterIndex: characterIndex);
    }
    public func GetUnderline(characterIndex : Swift.Int32) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetUnderline(characterIndex: characterIndex);
    }
    public func GetInlineObject(characterIndex : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetInlineObject(characterIndex: characterIndex);
    }
    public func SetColor(characterIndex : Swift.Int32, characterCount : Swift.Int32, color : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetColor(characterIndex: characterIndex, characterCount: characterCount, color: color);
    }
    public func SetBrush(characterIndex : Swift.Int32, characterCount : Swift.Int32, brush : Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetBrush(characterIndex: characterIndex, characterCount: characterCount, brush: brush);
    }
    public func SetCustomBrush(characterIndex : Swift.Int32, characterCount : Swift.Int32, brush : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetCustomBrush(characterIndex: characterIndex, characterCount: characterCount, brush: brush!.GetInterface());
    }
    public func SetFontFamily(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontFamily : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetFontFamily(characterIndex: characterIndex, characterCount: characterCount, fontFamily: fontFamily);
    }
    public func SetFontSize(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontSize : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetFontSize(characterIndex: characterIndex, characterCount: characterCount, fontSize: fontSize);
    }
    public func SetFontStretch(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontStretch : Windows.UI.Text.FontStretch) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetFontStretch(characterIndex: characterIndex, characterCount: characterCount, fontStretch: fontStretch);
    }
    public func SetFontStyle(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontStyle : Windows.UI.Text.FontStyle) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetFontStyle(characterIndex: characterIndex, characterCount: characterCount, fontStyle: fontStyle);
    }
    public func SetFontWeight(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontWeight : Windows.UI.Text.FontWeight) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetFontWeight(characterIndex: characterIndex, characterCount: characterCount, fontWeight: fontWeight);
    }
    public func SetLocaleName(characterIndex : Swift.Int32, characterCount : Swift.Int32, name : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetLocaleName(characterIndex: characterIndex, characterCount: characterCount, name: name);
    }
    public func SetStrikethrough(characterIndex : Swift.Int32, characterCount : Swift.Int32, hasStrikethrough : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetStrikethrough(characterIndex: characterIndex, characterCount: characterCount, hasStrikethrough: hasStrikethrough);
    }
    public func SetUnderline(characterIndex : Swift.Int32, characterCount : Swift.Int32, hasUnderline : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetUnderline(characterIndex: characterIndex, characterCount: characterCount, hasUnderline: hasUnderline);
    }
    public func SetInlineObject(characterIndex : Swift.Int32, characterCount : Swift.Int32, inlineObject : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetInlineObject(characterIndex: characterIndex, characterCount: characterCount, inlineObject: inlineObject);
    }
    public func DrawToTextRenderer(textRenderer : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer>, position : Windows.Foundation.Numerics.Vector2) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DrawToTextRenderer(textRenderer: textRenderer, position: position);
    }
    public func DrawToTextRenderer(textRenderer : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer>, x : Swift.Float, y : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DrawToTextRendererWithCoords(textRenderer: textRenderer, x: x, y: y);
    }
    public func get_LineMetrics() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LineMetrics();
    }
    public func get_ClusterMetrics() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_ClusterMetrics();
    }
    public func SetTypography(characterIndex : Swift.Int32, characterCount : Swift.Int32, typography : Optional<Microsoft.Graphics.Canvas.Text.CanvasTypography>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetTypography(characterIndex: characterIndex, characterCount: characterCount, typography: typography!.Interface());
    }
    public func GetTypography(characterIndex : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Text.CanvasTypography> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.Text.CanvasTypography(plok: _ifc.GetTypography(characterIndex: characterIndex));
    }
    public func get_LayoutBounds() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LayoutBounds();
    }
    public func get_LayoutBoundsIncludingTrailingWhitespace() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LayoutBoundsIncludingTrailingWhitespace();
    }
    public func get_LineCount() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LineCount();
    }
    public func get_MaximumBidiReorderingDepth() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_MaximumBidiReorderingDepth();
    }
    public func get_DrawBounds() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_DrawBounds();
    }
    public func HitTest(point : Windows.Foundation.Numerics.Vector2) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.HitTest(point: point);
    }
    public func HitTest(x : Swift.Float, y : Swift.Float) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.HitTestWithCoords(x: x, y: y);
    }
    public func HitTest(point : Windows.Foundation.Numerics.Vector2, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
            var _tmp_out_textLayoutRegion: Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
        return try _ifc.HitTestWithDescription(point: point, textLayoutRegion: &_tmp_out_textLayoutRegion);
    }
    public func HitTest(x : Swift.Float, y : Swift.Float, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
            var _tmp_out_textLayoutRegion: Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
        return try _ifc.HitTestWithDescriptionAndCoords(x: x, y: y, textLayoutRegion: &_tmp_out_textLayoutRegion);
    }
    public func HitTest(point : Windows.Foundation.Numerics.Vector2, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion, trailingSideOfCharacter : inout boolean) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
            var _tmp_out_textLayoutRegion: Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
            var _tmp_out_trailingSideOfCharacter: boolean = 0;
        return try _ifc.HitTestWithDescriptionAndTrailingSide(point: point, textLayoutRegion: &_tmp_out_textLayoutRegion, trailingSideOfCharacter: &_tmp_out_trailingSideOfCharacter);
    }
    public func HitTest(x : Swift.Float, y : Swift.Float, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion, trailingSideOfCharacter : inout boolean) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
            var _tmp_out_textLayoutRegion: Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
            var _tmp_out_trailingSideOfCharacter: boolean = 0;
        return try _ifc.HitTestWithDescriptionAndCoordsAndTrailingSide(x: x, y: y, textLayoutRegion: &_tmp_out_textLayoutRegion, trailingSideOfCharacter: &_tmp_out_trailingSideOfCharacter);
    }
    public func GetCaretPosition(characterIndex : Swift.Int32, trailingSideOfCharacter : boolean) throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetCaretPosition(characterIndex: characterIndex, trailingSideOfCharacter: trailingSideOfCharacter);
    }
    public func GetCaretPosition(characterIndex : Swift.Int32, trailingSideOfCharacter : boolean, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion) throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
            var _tmp_out_textLayoutRegion: Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
        return try _ifc.GetCaretPositionWithDescription(characterIndex: characterIndex, trailingSideOfCharacter: trailingSideOfCharacter, textLayoutRegion: &_tmp_out_textLayoutRegion);
    }
    public func GetCharacterRegions(characterIndex : Swift.Int32, characterCount : Swift.Int32) throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetCharacterRegions(characterIndex: characterIndex, characterCount: characterCount);
    }
    public func GetPairKerning(characterIndex : Swift.Int32) throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetPairKerning(characterIndex: characterIndex);
    }
    public func SetPairKerning(characterIndex : Swift.Int32, characterCount : Swift.Int32, hasPairKerning : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetPairKerning(characterIndex: characterIndex, characterCount: characterCount, hasPairKerning: hasPairKerning);
    }
    public func GetLeadingCharacterSpacing(characterIndex : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetLeadingCharacterSpacing(characterIndex: characterIndex);
    }
    public func GetTrailingCharacterSpacing(characterIndex : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetTrailingCharacterSpacing(characterIndex: characterIndex);
    }
    public func GetMinimumCharacterAdvance(characterIndex : Swift.Int32) throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.GetMinimumCharacterAdvance(characterIndex: characterIndex);
    }
    public func SetCharacterSpacing(characterIndex : Swift.Int32, characterCount : Swift.Int32, leadingSpacing : Swift.Float, trailingSpacing : Swift.Float, minimumAdvance : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.SetCharacterSpacing(characterIndex: characterIndex, characterCount: characterCount, leadingSpacing: leadingSpacing, trailingSpacing: trailingSpacing, minimumAdvance: minimumAdvance);
    }
    public func get_VerticalGlyphOrientation() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_VerticalGlyphOrientation();
    }
    public func put_VerticalGlyphOrientation(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_VerticalGlyphOrientation(value: value);
    }
    public func get_OpticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_OpticalAlignment();
    }
    public func put_OpticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_OpticalAlignment(value: value);
    }
    public func get_LastLineWrapping() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.get_LastLineWrapping();
    }
    public func put_LastLineWrapping(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.put_LastLineWrapping(value: value);
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.get_Device());
    }
    public var ClusterMetrics : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.ClusterMetrics;
        }
    }
    public var CustomTrimmingSign : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.CustomTrimmingSign;
        }
    }
    public var DefaultFontFamily : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DefaultFontFamily;
        }
    }
    public var DefaultFontSize : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DefaultFontSize;
        }
    }
    public var DefaultFontStretch : Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DefaultFontStretch;
        }
    }
    public var DefaultFontStyle : Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DefaultFontStyle;
        }
    }
    public var DefaultFontWeight : Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DefaultFontWeight;
        }
    }
    public var DefaultLocaleName : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DefaultLocaleName;
        }
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.CanvasDevice> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try Microsoft.Graphics.Canvas.CanvasDevice(plok: _ifc.Device);
        }
    }
    public var Direction : Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.Direction;
        }
    }
    public var DrawBounds : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.DrawBounds;
        }
    }
    public var HorizontalAlignment : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.HorizontalAlignment;
        }
    }
    public var IncrementalTabStop : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.IncrementalTabStop;
        }
    }
    public var LastLineWrapping : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LastLineWrapping;
        }
    }
    public var LayoutBounds : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LayoutBounds;
        }
    }
    public var LayoutBoundsIncludingTrailingWhitespace : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LayoutBoundsIncludingTrailingWhitespace;
        }
    }
    public var LineCount : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LineCount;
        }
    }
    public var LineMetrics : UINT32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LineMetrics;
        }
    }
    public var LineSpacing : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LineSpacing;
        }
    }
    public var LineSpacingBaseline : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LineSpacingBaseline;
        }
    }
    public var LineSpacingMode : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.LineSpacingMode;
        }
    }
    public var MaximumBidiReorderingDepth : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.MaximumBidiReorderingDepth;
        }
    }
    public var OpticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.OpticalAlignment;
        }
    }
    public var Options : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.Options;
        }
    }
    public var RequestedSize : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.RequestedSize;
        }
    }
    public var TrimmingDelimiter : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.TrimmingDelimiter;
        }
    }
    public var TrimmingDelimiterCount : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.TrimmingDelimiterCount;
        }
    }
    public var TrimmingGranularity : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.TrimmingGranularity;
        }
    }
    public var TrimmingSign : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.TrimmingSign;
        }
    }
    public var VerticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.VerticalAlignment;
        }
    }
    public var VerticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.VerticalGlyphOrientation;
        }
    }
    public var WordWrapping : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout = try _self.QueryInterface();
        return try _ifc.WordWrapping;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion
// struct type
public typealias CanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode
// enum type
public typealias CanvasTextMeasuringMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode
// enum type
public typealias CanvasTextRenderingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
// runtime class
public class CanvasTextRenderingParameters
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters { return _self; }
    public init(textRenderingMode : Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, gridFit : Microsoft.Graphics.Canvas.Text.CanvasTextGridFit) throws {
        let _af : ICanvasTextRenderingParametersFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters");
        _self = try _af.Create(textRenderingMode: textRenderingMode, gridFit: gridFit)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_RenderingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters = try _self.QueryInterface();
        return try _ifc.get_RenderingMode();
    }
    public func get_GridFit() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters = try _self.QueryInterface();
        return try _ifc.get_GridFit();
    }
    public var GridFit : Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters = try _self.QueryInterface();
        return try _ifc.GridFit;
        }
    }
    public var RenderingMode : Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters = try _self.QueryInterface();
        return try _ifc.RenderingMode;
        }
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity
// enum type
public typealias CanvasTextTrimmingGranularity = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity;

// type: Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign
// enum type
public typealias CanvasTrimmingSign = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign;

// type: Microsoft.Graphics.Canvas.Text.CanvasTypography
// runtime class
public class CanvasTypography
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTypography;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTypography?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTypography { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Text.CanvasTypography")
        try super.init(plok: _self.QueryInterface())
    }
    public func AddFeature(feature : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTypography = try _self.QueryInterface();
        return try _ifc.AddFeature(feature: feature);
    }
    public func AddFeature(name : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, parameter : Swift.UInt32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTypography = try _self.QueryInterface();
        return try _ifc.AddFeatureWithNameAndParameter(name: name, parameter: parameter);
    }
    public func GetFeatures() throws -> UINT32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTypography = try _self.QueryInterface();
        return try _ifc.GetFeatures();
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature
// struct type
public typealias CanvasTypographyFeature = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature;

// type: Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName
// enum type
public typealias CanvasTypographyFeatureName = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName;

// type: Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange
// struct type
public typealias CanvasUnicodeRange = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange;

// type: Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment
// enum type
public typealias CanvasVerticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment;

// type: Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation
// enum type
public typealias CanvasVerticalGlyphOrientation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation;

// type: Microsoft.Graphics.Canvas.Text.CanvasWordWrapping
// enum type
public typealias CanvasWordWrapping = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping;

// type: Microsoft.Graphics.Canvas.Text.ICanvasFontFace
// interface type
open class ICanvasFontFace
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5199d129, Data2: 0x4ef9, Data3 : 0x4dee, Data4 : (0xb7, 0x4c, 0x4d, 0xc9, 0x10, 0x20, 0x1a, 0x7f)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode GetRecommendedRenderingMode(System.Single, System.Single, Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters)
    private func _n_GetRecommendedRenderingMode(_ fontSize : FLOAT, _ dpi : FLOAT, _ measuringMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode, _ renderingParameters : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedRenderingMode(pThis, fontSize, dpi, measuringMode, renderingParameters, __presult))
        }
    }
    public func GetRecommendedRenderingMode(fontSize : Swift.Float, dpi : Swift.Float, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, renderingParameters : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters>) throws -> Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default;
        try self._n_GetRecommendedRenderingMode(fontSize, dpi, measuringMode, RawPointer(renderingParameters), &__result);
        return __result;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode GetRecommendedRenderingMode(System.Single, System.Single, Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters, Windows.Foundation.Numerics.Matrix3x2, bool, Microsoft.Graphics.Canvas.CanvasAntialiasing)
    private func _n_GetRecommendedRenderingModeWithAllOptions(_ fontSize : FLOAT, _ dpi : FLOAT, _ measuringMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode, _ renderingParameters : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>, _ transform : _q_CWindows_CFoundation_CNumerics_CMatrix3x2, _ isSideways : boolean, _ outlineThreshold : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedRenderingModeWithAllOptions(pThis, fontSize, dpi, measuringMode, renderingParameters, transform, isSideways, outlineThreshold, __presult))
        }
    }
    public func GetRecommendedRenderingModeWithAllOptions(fontSize : Swift.Float, dpi : Swift.Float, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, renderingParameters : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters>, transform : Windows.Foundation.Numerics.Matrix3x2, isSideways : boolean, outlineThreshold : Microsoft.Graphics.Canvas.CanvasAntialiasing) throws -> Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default;
        try self._n_GetRecommendedRenderingModeWithAllOptions(fontSize, dpi, measuringMode, RawPointer(renderingParameters), transform, isSideways, outlineThreshold, &__result);
        return __result;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTextGridFit GetRecommendedGridFit(System.Single, System.Single, Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters, Windows.Foundation.Numerics.Matrix3x2, bool, Microsoft.Graphics.Canvas.CanvasAntialiasing)
    private func _n_GetRecommendedGridFit(_ fontSize : FLOAT, _ dpi : FLOAT, _ measuringMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode, _ renderingParameters : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>, _ transform : _q_CWindows_CFoundation_CNumerics_CMatrix3x2, _ isSideways : boolean, _ outlineThreshold : _q_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedGridFit(pThis, fontSize, dpi, measuringMode, renderingParameters, transform, isSideways, outlineThreshold, __presult))
        }
    }
    public func GetRecommendedGridFit(fontSize : Swift.Float, dpi : Swift.Float, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode, renderingParameters : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters>, transform : Windows.Foundation.Numerics.Matrix3x2, isSideways : boolean, outlineThreshold : Microsoft.Graphics.Canvas.CanvasAntialiasing) throws -> Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default;
        try self._n_GetRecommendedGridFit(fontSize, dpi, measuringMode, RawPointer(renderingParameters), transform, isSideways, outlineThreshold, &__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_GlyphBox()
    private func _n_get_GlyphBox(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphBox(pThis, __presult))
        }
    }
    public func get_GlyphBox() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_GlyphBox(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_SubscriptPosition()
    private func _n_get_SubscriptPosition(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriptPosition(pThis, __presult))
        }
    }
    public func get_SubscriptPosition() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_SubscriptPosition(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Size get_SubscriptSize()
    private func _n_get_SubscriptSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriptSize(pThis, __presult))
        }
    }
    public func get_SubscriptSize() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_SubscriptSize(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_SuperscriptPosition()
    private func _n_get_SuperscriptPosition(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuperscriptPosition(pThis, __presult))
        }
    }
    public func get_SuperscriptPosition() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_SuperscriptPosition(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Size get_SuperscriptSize()
    private func _n_get_SuperscriptSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuperscriptSize(pThis, __presult))
        }
    }
    public func get_SuperscriptSize() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_SuperscriptSize(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_HasTypographicMetrics()
    private func _n_get_HasTypographicMetrics(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasTypographicMetrics(pThis, __presult))
        }
    }
    public func get_HasTypographicMetrics() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasTypographicMetrics(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_Ascent()
    private func _n_get_Ascent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ascent(pThis, __presult))
        }
    }
    public func get_Ascent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Ascent(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_Descent()
    private func _n_get_Descent(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Descent(pThis, __presult))
        }
    }
    public func get_Descent() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Descent(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_LineGap()
    private func _n_get_LineGap(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineGap(pThis, __presult))
        }
    }
    public func get_LineGap() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LineGap(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_CapHeight()
    private func _n_get_CapHeight(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CapHeight(pThis, __presult))
        }
    }
    public func get_CapHeight() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_CapHeight(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_LowercaseLetterHeight()
    private func _n_get_LowercaseLetterHeight(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowercaseLetterHeight(pThis, __presult))
        }
    }
    public func get_LowercaseLetterHeight() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LowercaseLetterHeight(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_UnderlinePosition()
    private func _n_get_UnderlinePosition(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlinePosition(pThis, __presult))
        }
    }
    public func get_UnderlinePosition() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_UnderlinePosition(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_UnderlineThickness()
    private func _n_get_UnderlineThickness(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlineThickness(pThis, __presult))
        }
    }
    public func get_UnderlineThickness() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_UnderlineThickness(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_StrikethroughPosition()
    private func _n_get_StrikethroughPosition(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StrikethroughPosition(pThis, __presult))
        }
    }
    public func get_StrikethroughPosition() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_StrikethroughPosition(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_StrikethroughThickness()
    private func _n_get_StrikethroughThickness(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StrikethroughThickness(pThis, __presult))
        }
    }
    public func get_StrikethroughThickness() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_StrikethroughThickness(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_CaretSlopeRise()
    private func _n_get_CaretSlopeRise(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretSlopeRise(pThis, __presult))
        }
    }
    public func get_CaretSlopeRise() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_CaretSlopeRise(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_CaretSlopeRun()
    private func _n_get_CaretSlopeRun(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretSlopeRun(pThis, __presult))
        }
    }
    public func get_CaretSlopeRun() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_CaretSlopeRun(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_CaretOffset()
    private func _n_get_CaretOffset(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretOffset(pThis, __presult))
        }
    }
    public func get_CaretOffset() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_CaretOffset(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasUnicodeRange[] get_UnicodeRanges()
    private func _n_get_UnicodeRanges(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnicodeRanges(pThis, __presultLength, __presult))
        }
    }
    public func get_UnicodeRanges() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange>> = nil;
        try self._n_get_UnicodeRanges(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] bool get_IsMonospaced()
    private func _n_get_IsMonospaced(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMonospaced(pThis, __presult))
        }
    }
    public func get_IsMonospaced() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsMonospaced(&__result);
        return __result;
    }
    // System.Int32[] GetVerticalGlyphVariants(System.Int32[])
    private func _n_GetVerticalGlyphVariants(_ inputElementsLength : UINT32, _ inputElements : Optional<UnsafeMutablePointer<INT32>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<INT32>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetVerticalGlyphVariants(pThis, inputElementsLength, inputElements, __presultLength, __presult))
        }
    }
    public func GetVerticalGlyphVariants(inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<INT32>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<INT32>> = nil;
        try self._n_GetVerticalGlyphVariants(inputElementsLength, inputElements, &__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] bool get_HasVerticalGlyphVariants()
    private func _n_get_HasVerticalGlyphVariants(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasVerticalGlyphVariants(pThis, __presult))
        }
    }
    public func get_HasVerticalGlyphVariants() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_HasVerticalGlyphVariants(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType get_FileFormatType()
    private func _n_get_FileFormatType(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileFormatType(pThis, __presult))
        }
    }
    public func get_FileFormatType() throws -> Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Cff;
        try self._n_get_FileFormatType(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasFontSimulations get_Simulations()
    private func _n_get_Simulations(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Simulations(pThis, __presult))
        }
    }
    public func get_Simulations() throws -> Microsoft.Graphics.Canvas.Text.CanvasFontSimulations {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations_None;
        try self._n_get_Simulations(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsSymbolFont()
    private func _n_get_IsSymbolFont(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSymbolFont(pThis, __presult))
        }
    }
    public func get_IsSymbolFont() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsSymbolFont(&__result);
        return __result;
    }
    // [IsSpecialName] System.UInt32 get_GlyphCount()
    private func _n_get_GlyphCount(_ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphCount(pThis, __presult))
        }
    }
    public func get_GlyphCount() throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_get_GlyphCount(&__result);
        return __result;
    }
    // System.Int32[] GetGlyphIndices(System.UInt32[])
    private func _n_GetGlyphIndices_(_ inputElementsLength : UINT32, _ inputElements : Optional<UnsafeMutablePointer<UINT32>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<INT32>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphIndices_(pThis, inputElementsLength, inputElements, __presultLength, __presult))
        }
    }
    public func GetGlyphIndices_(inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<UINT32>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<INT32>> = nil;
        try self._n_GetGlyphIndices_(inputElementsLength, inputElements, &__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics[] GetGlyphMetrics(System.Int32[], bool)
    private func _n_GetGlyphMetrics(_ inputElementsLength : UINT32, _ inputElements : Optional<UnsafeMutablePointer<INT32>>, _ isSideways : boolean, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphMetrics(pThis, inputElementsLength, inputElements, isSideways, __presultLength, __presult))
        }
    }
    public func GetGlyphMetrics(inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<INT32>>, isSideways : boolean) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics>> = nil;
        try self._n_GetGlyphMetrics(inputElementsLength, inputElements, isSideways, &__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasGlyphMetrics[] GetGdiCompatibleGlyphMetrics(System.Single, System.Single, Windows.Foundation.Numerics.Matrix3x2, bool, System.Int32[], bool)
    private func _n_GetGdiCompatibleGlyphMetrics(_ fontSize : FLOAT, _ dpi : FLOAT, _ transform : _q_CWindows_CFoundation_CNumerics_CMatrix3x2, _ useGdiNatural : boolean, _ inputElementsLength : UINT32, _ inputElements : Optional<UnsafeMutablePointer<INT32>>, _ isSideways : boolean, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGdiCompatibleGlyphMetrics(pThis, fontSize, dpi, transform, useGdiNatural, inputElementsLength, inputElements, isSideways, __presultLength, __presult))
        }
    }
    public func GetGdiCompatibleGlyphMetrics(fontSize : Swift.Float, dpi : Swift.Float, transform : Windows.Foundation.Numerics.Matrix3x2, useGdiNatural : boolean, inputElementsLength : UINT32, inputElements : Optional<UnsafeMutablePointer<INT32>>, isSideways : boolean) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics>> = nil;
        try self._n_GetGdiCompatibleGlyphMetrics(fontSize, dpi, transform, useGdiNatural, inputElementsLength, inputElements, isSideways, &__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_Weight()
    private func _n_get_Weight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Weight(pThis, __presult))
        }
    }
    public func get_Weight() throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_Weight(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_Stretch()
    private func _n_get_Stretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stretch(pThis, __presult))
        }
    }
    public func get_Stretch() throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_Stretch(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_Style()
    private func _n_get_Style(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Style(pThis, __presult))
        }
    }
    public func get_Style() throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_Style(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Collections.IMapView<System.String,System.String> get_FamilyNames()
    private func _n_get_FamilyNames(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FamilyNames(pThis, __presult))
        }
    }
    public func get_FamilyNames() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>> = nil;
        try self._n_get_FamilyNames(&__result);
        return ClosedGenerics.IMapView_2_HSTRING_HSTRING(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IMapView<System.String,System.String> get_FaceNames()
    private func _n_get_FaceNames(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FaceNames(pThis, __presult))
        }
    }
    public func get_FaceNames() throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>> = nil;
        try self._n_get_FaceNames(&__result);
        return ClosedGenerics.IMapView_2_HSTRING_HSTRING(consuming: __result);
    }
    // Windows.Foundation.Collections.IMapView<System.String,System.String> GetInformationalStrings(Microsoft.Graphics.Canvas.Text.CanvasFontInformation)
    private func _n_GetInformationalStrings(_ fontInformation : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetInformationalStrings(pThis, fontInformation, __presult))
        }
    }
    public func GetInformationalStrings(fontInformation : Microsoft.Graphics.Canvas.Text.CanvasFontInformation) throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>> = nil;
        try self._n_GetInformationalStrings(fontInformation, &__result);
        return ClosedGenerics.IMapView_2_HSTRING_HSTRING(consuming: __result);
    }
    // bool HasCharacter(System.UInt32)
    private func _n_HasCharacter(_ unicodeValue : UINT32, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasCharacter(pThis, unicodeValue, __presult))
        }
    }
    public func HasCharacter(unicodeValue : Swift.UInt32) throws -> boolean {
        var __result : boolean = 0;
        try self._n_HasCharacter(unicodeValue, &__result);
        return __result;
    }
    // Windows.Foundation.Rect GetGlyphRunBounds(Microsoft.Graphics.Canvas.CanvasDrawingSession, Windows.Foundation.Numerics.Vector2, System.Single, Microsoft.Graphics.Canvas.Text.CanvasGlyph[], bool, System.UInt32)
    private func _n_GetGlyphRunBounds(_ drawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ fontSize : FLOAT, _ glyphsLength : UINT32, _ glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ isSideways : boolean, _ bidiLevel : UINT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphRunBounds(pThis, drawingSession, point, fontSize, glyphsLength, glyphs, isSideways, bidiLevel, __presult))
        }
    }
    public func GetGlyphRunBounds(drawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>, point : Windows.Foundation.Numerics.Vector2, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32) throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_GetGlyphRunBounds(RawPointer(drawingSession), point, fontSize, glyphsLength, glyphs, isSideways, bidiLevel, &__result);
        return __result;
    }
    // Windows.Foundation.Rect GetGlyphRunBounds(Microsoft.Graphics.Canvas.CanvasDrawingSession, Windows.Foundation.Numerics.Vector2, System.Single, Microsoft.Graphics.Canvas.Text.CanvasGlyph[], bool, System.UInt32, Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode)
    private func _n_GetGlyphRunBoundsWithMeasuringMode(_ drawingSession : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession>>, _ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ fontSize : FLOAT, _ glyphsLength : UINT32, _ glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ isSideways : boolean, _ bidiLevel : UINT32, _ measuringMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphRunBoundsWithMeasuringMode(pThis, drawingSession, point, fontSize, glyphsLength, glyphs, isSideways, bidiLevel, measuringMode, __presult))
        }
    }
    public func GetGlyphRunBoundsWithMeasuringMode(drawingSession : Optional<Microsoft.Graphics.Canvas.ICanvasDrawingSession>, point : Windows.Foundation.Numerics.Vector2, fontSize : Swift.Float, glyphsLength : UINT32, glyphs : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, isSideways : boolean, bidiLevel : Swift.UInt32, measuringMode : Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode) throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_GetGlyphRunBoundsWithMeasuringMode(RawPointer(drawingSession), point, fontSize, glyphsLength, glyphs, isSideways, bidiLevel, measuringMode, &__result);
        return __result;
    }
    // [IsSpecialName] System.Byte[] get_Panose()
    private func _n_get_Panose(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<UINT8>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Panose(pThis, __presultLength, __presult))
        }
    }
    public func get_Panose() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<UINT8>> = nil;
        try self._n_get_Panose(&__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript)
    private func _n_GetSupportedTypographicFeatureNames(_ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSupportedTypographicFeatureNames(pThis, script, __presultLength, __presult))
        }
    }
    public func GetSupportedTypographicFeatureNames(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName>> = nil;
        try self._n_GetSupportedTypographicFeatureNames(script, &__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName[] GetSupportedTypographicFeatureNames(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, System.String)
    private func _n_GetSupportedTypographicFeatureNamesWithLocale(_ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ locale : Optional<HSTRING>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSupportedTypographicFeatureNamesWithLocale(pThis, script, locale, __presultLength, __presult))
        }
    }
    public func GetSupportedTypographicFeatureNamesWithLocale(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, locale : Optional<Swift.String>) throws -> UINT32 {
        let __hstr_locale = try HString(locale!);
        return try withExtendedLifetime(__hstr_locale) {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName>> = nil;
        try self._n_GetSupportedTypographicFeatureNamesWithLocale(script, __hstr_locale.Raw(), &__resultLength, &__result);
        return __resultLength;
        }
    }
    // bool[] GetTypographicFeatureGlyphSupport(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, Microsoft.Graphics.Canvas.Text.CanvasGlyph[])
    private func _n_GetTypographicFeatureGlyphSupport(_ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ typographicFeatureName : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName, _ glyphsElementsLength : UINT32, _ glyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<boolean>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTypographicFeatureGlyphSupport(pThis, script, typographicFeatureName, glyphsElementsLength, glyphsElements, __presultLength, __presult))
        }
    }
    public func GetTypographicFeatureGlyphSupport(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, typographicFeatureName : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, glyphsElementsLength : UINT32, glyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<boolean>> = nil;
        try self._n_GetTypographicFeatureGlyphSupport(script, typographicFeatureName, glyphsElementsLength, glyphsElements, &__resultLength, &__result);
        return __resultLength;
    }
    // bool[] GetTypographicFeatureGlyphSupport(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, Microsoft.Graphics.Canvas.Text.CanvasGlyph[], System.String)
    private func _n_GetTypographicFeatureGlyphSupportWithLocale(_ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ typographicFeatureName : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName, _ glyphsElementsLength : UINT32, _ glyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ locale : Optional<HSTRING>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<boolean>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTypographicFeatureGlyphSupportWithLocale(pThis, script, typographicFeatureName, glyphsElementsLength, glyphsElements, locale, __presultLength, __presult))
        }
    }
    public func GetTypographicFeatureGlyphSupportWithLocale(script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, typographicFeatureName : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, glyphsElementsLength : UINT32, glyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, locale : Optional<Swift.String>) throws -> UINT32 {
        let __hstr_locale = try HString(locale!);
        return try withExtendedLifetime(__hstr_locale) {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<boolean>> = nil;
        try self._n_GetTypographicFeatureGlyphSupportWithLocale(script, typographicFeatureName, glyphsElementsLength, glyphsElements, __hstr_locale.Raw(), &__resultLength, &__result);
        return __resultLength;
        }
    }
    public var Ascent : Swift.Float {
        get throws {
            return try get_Ascent();
        }
    }
    public var CapHeight : Swift.Float {
        get throws {
            return try get_CapHeight();
        }
    }
    public var CaretOffset : Swift.Float {
        get throws {
            return try get_CaretOffset();
        }
    }
    public var CaretSlopeRise : Swift.Float {
        get throws {
            return try get_CaretSlopeRise();
        }
    }
    public var CaretSlopeRun : Swift.Float {
        get throws {
            return try get_CaretSlopeRun();
        }
    }
    public var Descent : Swift.Float {
        get throws {
            return try get_Descent();
        }
    }
    public var FaceNames : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
            return try get_FaceNames();
        }
    }
    public var FamilyNames : Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        get throws {
            return try get_FamilyNames();
        }
    }
    public var FileFormatType : Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType {
        get throws {
            return try get_FileFormatType();
        }
    }
    public var GlyphBox : Windows.Foundation.Rect {
        get throws {
            return try get_GlyphBox();
        }
    }
    public var GlyphCount : Swift.UInt32 {
        get throws {
            return try get_GlyphCount();
        }
    }
    public var HasTypographicMetrics : boolean {
        get throws {
            return try get_HasTypographicMetrics();
        }
    }
    public var HasVerticalGlyphVariants : boolean {
        get throws {
            return try get_HasVerticalGlyphVariants();
        }
    }
    public var IsMonospaced : boolean {
        get throws {
            return try get_IsMonospaced();
        }
    }
    public var IsSymbolFont : boolean {
        get throws {
            return try get_IsSymbolFont();
        }
    }
    public var LineGap : Swift.Float {
        get throws {
            return try get_LineGap();
        }
    }
    public var LowercaseLetterHeight : Swift.Float {
        get throws {
            return try get_LowercaseLetterHeight();
        }
    }
    public var Panose : UINT32 {
        get throws {
            return try get_Panose();
        }
    }
    public var Simulations : Microsoft.Graphics.Canvas.Text.CanvasFontSimulations {
        get throws {
            return try get_Simulations();
        }
    }
    public var Stretch : Windows.UI.Text.FontStretch {
        get throws {
            return try get_Stretch();
        }
    }
    public var StrikethroughPosition : Swift.Float {
        get throws {
            return try get_StrikethroughPosition();
        }
    }
    public var StrikethroughThickness : Swift.Float {
        get throws {
            return try get_StrikethroughThickness();
        }
    }
    public var Style : Windows.UI.Text.FontStyle {
        get throws {
            return try get_Style();
        }
    }
    public var SubscriptPosition : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_SubscriptPosition();
        }
    }
    public var SubscriptSize : Windows.Foundation.Size {
        get throws {
            return try get_SubscriptSize();
        }
    }
    public var SuperscriptPosition : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_SuperscriptPosition();
        }
    }
    public var SuperscriptSize : Windows.Foundation.Size {
        get throws {
            return try get_SuperscriptSize();
        }
    }
    public var UnderlinePosition : Swift.Float {
        get throws {
            return try get_UnderlinePosition();
        }
    }
    public var UnderlineThickness : Swift.Float {
        get throws {
            return try get_UnderlineThickness();
        }
    }
    public var UnicodeRanges : UINT32 {
        get throws {
            return try get_UnicodeRanges();
        }
    }
    public var Weight : Windows.UI.Text.FontWeight {
        get throws {
            return try get_Weight();
        }
    }
} // ICanvasFontFace


// type: Microsoft.Graphics.Canvas.Text.ICanvasFontSet
// interface type
open class ICanvasFontSet
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0a5bfb92, Data2: 0x1f3c, Data3 : 0x459f, Data4 : (0x9d, 0x7e, 0xa6, 0x28, 0x9d, 0xd0, 0x93, 0xc0)) }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Microsoft.Graphics.Canvas.Text.CanvasFontFace> get_Fonts()
    private func _n_get_Fonts(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFace>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Fonts(pThis, __presult))
        }
    }
    public func get_Fonts() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFace> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFace>> = nil;
        try self._n_get_Fonts(&__result);
        return ClosedGenerics.IVectorView_1__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFace(consuming: __result);
    }
    // bool TryFindFontFace(Microsoft.Graphics.Canvas.Text.CanvasFontFace, ref System.Int32)
    private func _n_TryFindFontFace(_ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ index : UnsafeMutablePointer<INT32>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryFindFontFace(pThis, fontFace, index, __presult))
        }
    }
    public func TryFindFontFace(fontFace : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, index : inout Swift.Int32) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_index: INT32 = 0;
        try self._n_TryFindFontFace(RawPointer(fontFace), &_tmp_out_index, &__result);
            index = _tmp_out_index;
        return __result;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasFontSet GetMatchingFonts(Microsoft.Graphics.Canvas.Text.CanvasFontProperty[])
    private func _n_GetMatchingFontsFromProperties(_ propertyElementsLength : UINT32, _ propertyElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMatchingFontsFromProperties(pThis, propertyElementsLength, propertyElements, __presult))
        }
    }
    public func GetMatchingFontsFromProperties(propertyElementsLength : UINT32, propertyElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty>>) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontSet> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>> = nil;
        try self._n_GetMatchingFontsFromProperties(propertyElementsLength, propertyElements, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasFontSet(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Text.CanvasFontSet GetMatchingFonts(System.String, Windows.UI.Text.FontWeight, Windows.UI.Text.FontStretch, Windows.UI.Text.FontStyle)
    private func _n_GetMatchingFontsFromWwsFamily(_ familyName : Optional<HSTRING>, _ weight : _q_CWindows_CUI_CText_CFontWeight, _ stretch : _q_CWindows_CUI_CText_CFontStretch, _ style : _q_CWindows_CUI_CText_CFontStyle, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMatchingFontsFromWwsFamily(pThis, familyName, weight, stretch, style, __presult))
        }
    }
    public func GetMatchingFontsFromWwsFamily(familyName : Optional<Swift.String>, weight : Windows.UI.Text.FontWeight, stretch : Windows.UI.Text.FontStretch, style : Windows.UI.Text.FontStyle) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontSet> {
        let __hstr_familyName = try HString(familyName!);
        return try withExtendedLifetime(__hstr_familyName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>> = nil;
        try self._n_GetMatchingFontsFromWwsFamily(__hstr_familyName.Raw(), weight, stretch, style, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasFontSet(consuming: __result);
        }
    }
    // System.UInt32 CountFontsMatchingProperty(Microsoft.Graphics.Canvas.Text.CanvasFontProperty)
    private func _n_CountFontsMatchingProperty(_ property : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty, _ __presult: UnsafeMutablePointer<UINT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CountFontsMatchingProperty(pThis, property, __presult))
        }
    }
    public func CountFontsMatchingProperty(property : Microsoft.Graphics.Canvas.Text.CanvasFontProperty) throws -> Swift.UInt32 {
        var __result : UINT32 = 0;
        try self._n_CountFontsMatchingProperty(property, &__result);
        return __result;
    }
    // Windows.Foundation.Collections.IMapView<System.String,System.String> GetPropertyValues(System.UInt32, Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier)
    private func _n_GetPropertyValuesFromIndex(_ fontIndex : UINT32, _ propertyIdentifier : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyValuesFromIndex(pThis, fontIndex, propertyIdentifier, __presult))
        }
    }
    public func GetPropertyValuesFromIndex(fontIndex : Swift.UInt32, propertyIdentifier : Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier) throws -> Optional<ClosedGenerics.IMapView_2_HSTRING_HSTRING> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IMapView_2_HSTRING_HSTRING>> = nil;
        try self._n_GetPropertyValuesFromIndex(fontIndex, propertyIdentifier, &__result);
        return ClosedGenerics.IMapView_2_HSTRING_HSTRING(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] GetPropertyValues(Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier, System.String)
    private func _n_GetPropertyValuesFromIdentifier(_ propertyIdentifier : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier, _ preferredLocaleNames : Optional<HSTRING>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyValuesFromIdentifier(pThis, propertyIdentifier, preferredLocaleNames, __presultLength, __presult))
        }
    }
    public func GetPropertyValuesFromIdentifier(propertyIdentifier : Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier, preferredLocaleNames : Optional<Swift.String>) throws -> UINT32 {
        let __hstr_preferredLocaleNames = try HString(preferredLocaleNames!);
        return try withExtendedLifetime(__hstr_preferredLocaleNames) {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty>> = nil;
        try self._n_GetPropertyValuesFromIdentifier(propertyIdentifier, __hstr_preferredLocaleNames.Raw(), &__resultLength, &__result);
        return __resultLength;
        }
    }
    // Microsoft.Graphics.Canvas.Text.CanvasFontProperty[] GetPropertyValues(Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier)
    private func _n_GetPropertyValues(_ propertyIdentifier : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyValues(pThis, propertyIdentifier, __presultLength, __presult))
        }
    }
    public func GetPropertyValues(propertyIdentifier : Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty>> = nil;
        try self._n_GetPropertyValues(propertyIdentifier, &__resultLength, &__result);
        return __resultLength;
    }
    public var Fonts : Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFace> {
        get throws {
            return try get_Fonts();
        }
    }
} // ICanvasFontSet


// type: Microsoft.Graphics.Canvas.Text.ICanvasFontSetFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasFontSetFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3c9c9bda, Data2: 0x70f9, Data3 : 0x4ff9, Data4 : (0xaa, 0xb2, 0x3b, 0x42, 0x92, 0x32, 0x86, 0xee)) }
    // Microsoft.Graphics.Canvas.Text.CanvasFontSet Create(Windows.Foundation.Uri)
    private func _n_Create(_ uri : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, uri, __presult))
        }
    }
    public func Create(uri : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontSet> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>> = nil;
        try self._n_Create(RawPointer(uri), &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasFontSet(consuming: __result);
    }
} // ICanvasFontSetFactory


// type: Microsoft.Graphics.Canvas.Text.ICanvasFontSetStatics
// interface type
open class ICanvasFontSetStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5f4275ce, Data2: 0xbcfa, Data3 : 0x48c5, Data4 : (0x9e, 0x67, 0xfb, 0xe9, 0x86, 0x6d, 0x49, 0x24)) }
    // Microsoft.Graphics.Canvas.Text.CanvasFontSet GetSystemFontSet()
    private func _n_GetSystemFontSet(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontSet(pThis, __presult))
        }
    }
    public func GetSystemFontSet() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontSet> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>> = nil;
        try self._n_GetSystemFontSet(&__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasFontSet(consuming: __result);
    }
} // ICanvasFontSetStatics


// type: Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution
// interface type
open class ICanvasNumberSubstitution
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc81a67ad, Data2: 0x0639, Data3 : 0x4f8f, Data4 : (0x87, 0x8b, 0xd9, 0x37, 0xf8, 0xa1, 0x42, 0x93)) }
} // ICanvasNumberSubstitution


// type: Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitutionFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasNumberSubstitutionFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7496a822, Data2: 0xc781, Data3 : 0x4eb0, Data4 : (0xaa, 0xfb, 0xc0, 0x78, 0xe7, 0xfa, 0x8e, 0x24)) }
    // Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution Create(Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod)
    private func _n_Create(_ method : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, method, __presult))
        }
    }
    public func Create(method : Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution>> = nil;
        try self._n_Create(method, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution(consuming: __result);
    }
    // Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution CreateWithLocaleAndIgnoreOverrides(Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod, System.String, bool)
    private func _n_CreateWithLocaleAndIgnoreOverrides(_ method : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod, _ localeName : Optional<HSTRING>, _ ignoreEnvironmentOverrides : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithLocaleAndIgnoreOverrides(pThis, method, localeName, ignoreEnvironmentOverrides, __presult))
        }
    }
    public func CreateWithLocaleAndIgnoreOverrides(method : Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod, localeName : Optional<Swift.String>, ignoreEnvironmentOverrides : boolean) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution> {
        let __hstr_localeName = try HString(localeName!);
        return try withExtendedLifetime(__hstr_localeName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution>> = nil;
        try self._n_CreateWithLocaleAndIgnoreOverrides(method, __hstr_localeName.Raw(), ignoreEnvironmentOverrides, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution(consuming: __result);
        }
    }
} // ICanvasNumberSubstitutionFactory


// type: Microsoft.Graphics.Canvas.Text.ICanvasScaledFont
// interface type
open class ICanvasScaledFont
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbbc4f8d2, Data2: 0xeb2b, Data3 : 0x45f1, Data4 : (0xac, 0x2a, 0xcf, 0xc1, 0xf5, 0x98, 0xba, 0xe3)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasFontFace get_FontFace()
    private func _n_get_FontFace(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFace(pThis, __presult))
        }
    }
    public func get_FontFace() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>> = nil;
        try self._n_get_FontFace(&__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasFontFace(consuming: __result);
    }
    // [IsSpecialName] System.Single get_ScaleFactor()
    private func _n_get_ScaleFactor(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScaleFactor(pThis, __presult))
        }
    }
    public func get_ScaleFactor() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_ScaleFactor(&__result);
        return __result;
    }
    public var FontFace : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace> {
        get throws {
            return try get_FontFace();
        }
    }
    public var ScaleFactor : Swift.Float {
        get throws {
            return try get_ScaleFactor();
        }
    }
} // ICanvasScaledFont


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer
// interface type
open class ICanvasTextAnalyzer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4298f3d1, Data2: 0x645b, Data3 : 0x40e3, Data4 : (0xb9, 0x1b, 0x81, 0x98, 0x6d, 0x76, 0x7f, 0xc0)) }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasScaledFont>> GetFonts(Microsoft.Graphics.Canvas.Text.CanvasTextFormat)
    private func _n_GetFontsUsingSystemFontSet(_ textFormat : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontsUsingSystemFontSet(pThis, textFormat, __presult))
        }
    }
    public func GetFontsUsingSystemFontSet(textFormat : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont>> = nil;
        try self._n_GetFontsUsingSystemFontSet(RawPointer(textFormat), &__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasScaledFont>> GetFonts(Microsoft.Graphics.Canvas.Text.CanvasTextFormat, Microsoft.Graphics.Canvas.Text.CanvasFontSet)
    private func _n_GetFonts(_ textFormat : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>, _ fontSet : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFonts(pThis, textFormat, fontSet, __presult))
        }
    }
    public func GetFonts(textFormat : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>, fontSet : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontSet>) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont>> = nil;
        try self._n_GetFonts(RawPointer(textFormat), RawPointer(fontSet), &__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScaledFont(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>> GetBidi()
    private func _n_GetBidi(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetBidi(pThis, __presult))
        }
    }
    public func GetBidi() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi>> = nil;
        try self._n_GetBidi(&__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>> GetBidi(System.String)
    private func _n_GetBidiWithLocale(_ locale : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetBidiWithLocale(pThis, locale, __presult))
        }
    }
    public func GetBidiWithLocale(locale : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi> {
        let __hstr_locale = try HString(locale!);
        return try withExtendedLifetime(__hstr_locale) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi>> = nil;
        try self._n_GetBidiWithLocale(__hstr_locale.Raw(), &__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi(consuming: __result);
        }
    }
    // Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint[] GetBreakpoints()
    private func _n_GetBreakpoints(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetBreakpoints(pThis, __presultLength, __presult))
        }
    }
    public func GetBreakpoints() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint>> = nil;
        try self._n_GetBreakpoints(&__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBreakpoint[] GetBreakpoints(System.String)
    private func _n_GetBreakpointsWithLocale(_ locale : Optional<HSTRING>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetBreakpointsWithLocale(pThis, locale, __presultLength, __presult))
        }
    }
    public func GetBreakpointsWithLocale(locale : Optional<Swift.String>) throws -> UINT32 {
        let __hstr_locale = try HString(locale!);
        return try withExtendedLifetime(__hstr_locale) {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint>> = nil;
        try self._n_GetBreakpointsWithLocale(__hstr_locale.Raw(), &__resultLength, &__result);
        return __resultLength;
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>> GetNumberSubstitutions()
    private func _n_GetNumberSubstitutions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitution>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetNumberSubstitutions(pThis, __presult))
        }
    }
    public func GetNumberSubstitutions() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitution> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitution>> = nil;
        try self._n_GetNumberSubstitutions(&__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitution(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>> GetScript()
    private func _n_GetScript(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetScript(pThis, __presult))
        }
    }
    public func GetScript() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript>> = nil;
        try self._n_GetScript(&__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>> GetScript(System.String)
    private func _n_GetScriptWithLocale(_ locale : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetScriptWithLocale(pThis, locale, __presult))
        }
    }
    public func GetScriptWithLocale(locale : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript> {
        let __hstr_locale = try HString(locale!);
        return try withExtendedLifetime(__hstr_locale) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript>> = nil;
        try self._n_GetScriptWithLocale(__hstr_locale.Raw(), &__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript(consuming: __result);
        }
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations()
    private func _n_GetGlyphOrientations(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphOrientations(pThis, __presult))
        }
    }
    public func GetGlyphOrientations() throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation>> = nil;
        try self._n_GetGlyphOrientations(&__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation(consuming: __result);
    }
    // Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>> GetGlyphOrientations(System.String)
    private func _n_GetGlyphOrientationsWithLocale(_ locale : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphOrientationsWithLocale(pThis, locale, __presult))
        }
    }
    public func GetGlyphOrientationsWithLocale(locale : Optional<Swift.String>) throws -> Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation> {
        let __hstr_locale = try HString(locale!);
        return try withExtendedLifetime(__hstr_locale) {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation>> = nil;
        try self._n_GetGlyphOrientationsWithLocale(__hstr_locale.Raw(), &__result);
        return ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation(consuming: __result);
        }
    }
    // Microsoft.Graphics.Canvas.Text.CanvasScriptProperties GetScriptProperties(Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript)
    private func _n_GetScriptProperties(_ analyzedScript : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetScriptProperties(pThis, analyzedScript, __presult))
        }
    }
    public func GetScriptProperties(analyzedScript : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript) throws -> Microsoft.Graphics.Canvas.Text.CanvasScriptProperties {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties(IsoScriptCode: nil, IsoScriptNumber: 0, ClusterLookahead: 0, JustificationCharacter: nil, RestrictCaretToClusters: 0, UsesWordDividers: 0, IsDiscreteWriting: 0, IsBlockWriting: 0, IsDistributedWithinCluster: 0, IsConnectedWriting: 0, IsCursiveWriting: 0);
        try self._n_GetScriptProperties(analyzedScript, &__result);
        return __result;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasGlyph[] GetGlyphs(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, bool, bool, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript)
    private func _n_GetGlyphs(_ characterRange : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange, _ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ isSideways : boolean, _ isRightToLeft : boolean, _ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphs(pThis, characterRange, fontFace, fontSize, isSideways, isRightToLeft, script, __presultLength, __presult))
        }
    }
    public func GetGlyphs(characterRange : Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, fontFace : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, isSideways : boolean, isRightToLeft : boolean, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>> = nil;
        try self._n_GetGlyphs(characterRange, RawPointer(fontFace), fontSize, isSideways, isRightToLeft, script, &__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasGlyph[] GetGlyphs(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, bool, bool, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, System.String, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution, Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IKeyValuePair<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange,Microsoft.Graphics.Canvas.Text.CanvasTypography>>, ref System.Int32[], ref bool[], ref Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[])
    private func _n_GetGlyphsWithAllOptions(_ characterRange : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange, _ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ isSideways : boolean, _ isRightToLeft : boolean, _ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ locale : Optional<HSTRING>, _ numberSubstitution : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution>>, _ typographyRanges : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypography>>, _ clusterMapIndicesElementsLength : UnsafeMutablePointer<UINT32>, _ clusterMapIndicesElements : UnsafeMutablePointer<Optional<UnsafeMutablePointer<INT32>>>, _ isShapedAloneGlyphsElementsLength : UnsafeMutablePointer<UINT32>, _ isShapedAloneGlyphsElements : UnsafeMutablePointer<Optional<UnsafeMutablePointer<boolean>>>, _ glyphShapingResultsElementsLength : UnsafeMutablePointer<UINT32>, _ glyphShapingResultsElements : UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphsWithAllOptions(pThis, characterRange, fontFace, fontSize, isSideways, isRightToLeft, script, locale, numberSubstitution, typographyRanges, clusterMapIndicesElementsLength, clusterMapIndicesElements, isShapedAloneGlyphsElementsLength, isShapedAloneGlyphsElements, glyphShapingResultsElementsLength, glyphShapingResultsElements, __presultLength, __presult))
        }
    }
    public func GetGlyphsWithAllOptions(characterRange : Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, fontFace : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, isSideways : boolean, isRightToLeft : boolean, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, locale : Optional<Swift.String>, numberSubstitution : Optional<Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution>, typographyRanges : Optional<ClosedGenerics.IVectorView_1__cg_CWindows_CFoundation_CCollections_IKeyValuePair_2__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange__q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypography>, clusterMapIndicesElementsLength : inout UINT32, clusterMapIndicesElements : inout Optional<UnsafeMutablePointer<INT32>>, isShapedAloneGlyphsElementsLength : inout UINT32, isShapedAloneGlyphsElements : inout Optional<UnsafeMutablePointer<boolean>>, glyphShapingResultsElementsLength : inout UINT32, glyphShapingResultsElements : inout Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>) throws -> UINT32 {
        let __hstr_locale = try HString(locale!);
        return try withExtendedLifetime(__hstr_locale) {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>> = nil;
            var _tmp_out_clusterMapIndicesElementsLength: UINT32 = 0;
            var _tmp_out_clusterMapIndicesElements: Optional<UnsafeMutablePointer<INT32>> = nil;
            var _tmp_out_isShapedAloneGlyphsElementsLength: UINT32 = 0;
            var _tmp_out_isShapedAloneGlyphsElements: Optional<UnsafeMutablePointer<boolean>> = nil;
            var _tmp_out_glyphShapingResultsElementsLength: UINT32 = 0;
            var _tmp_out_glyphShapingResultsElements: Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>> = nil;
        try self._n_GetGlyphsWithAllOptions(characterRange, RawPointer(fontFace), fontSize, isSideways, isRightToLeft, script, __hstr_locale.Raw(), RawPointer(numberSubstitution), RawPointer(typographyRanges), &_tmp_out_clusterMapIndicesElementsLength, &_tmp_out_clusterMapIndicesElements, &_tmp_out_isShapedAloneGlyphsElementsLength, &_tmp_out_isShapedAloneGlyphsElements, &_tmp_out_glyphShapingResultsElementsLength, &_tmp_out_glyphShapingResultsElements, &__resultLength, &__result);
            clusterMapIndicesElements = _tmp_out_clusterMapIndicesElements;
            isShapedAloneGlyphsElements = _tmp_out_isShapedAloneGlyphsElements;
            glyphShapingResultsElements = _tmp_out_glyphShapingResultsElements;
        return __resultLength;
        }
    }
    // Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity[] GetJustificationOpportunities(Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, System.Int32[], Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[])
    private func _n_GetJustificationOpportunities(_ characterRange : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange, _ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ clusterMapIndicesElementsLength : UINT32, _ clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, _ glyphShapingResultsElementsLength : UINT32, _ glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetJustificationOpportunities(pThis, characterRange, fontFace, fontSize, script, clusterMapIndicesElementsLength, clusterMapIndicesElements, glyphShapingResultsElementsLength, glyphShapingResultsElements, __presultLength, __presult))
        }
    }
    public func GetJustificationOpportunities(characterRange : Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, fontFace : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, clusterMapIndicesElementsLength : UINT32, clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, glyphShapingResultsElementsLength : UINT32, glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity>> = nil;
        try self._n_GetJustificationOpportunities(characterRange, RawPointer(fontFace), fontSize, script, clusterMapIndicesElementsLength, clusterMapIndicesElements, glyphShapingResultsElementsLength, glyphShapingResultsElements, &__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasGlyph[] ApplyJustificationOpportunities(System.Single, Microsoft.Graphics.Canvas.Text.CanvasJustificationOpportunity[], Microsoft.Graphics.Canvas.Text.CanvasGlyph[])
    private func _n_ApplyJustificationOpportunities(_ lineWidth : FLOAT, _ justificationOpportunitiesElementsLength : UINT32, _ justificationOpportunitiesElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity>>, _ sourceGlyphsElementsLength : UINT32, _ sourceGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyJustificationOpportunities(pThis, lineWidth, justificationOpportunitiesElementsLength, justificationOpportunitiesElements, sourceGlyphsElementsLength, sourceGlyphsElements, __presultLength, __presult))
        }
    }
    public func ApplyJustificationOpportunities(lineWidth : Swift.Float, justificationOpportunitiesElementsLength : UINT32, justificationOpportunitiesElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity>>, sourceGlyphsElementsLength : UINT32, sourceGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>> = nil;
        try self._n_ApplyJustificationOpportunities(lineWidth, justificationOpportunitiesElementsLength, justificationOpportunitiesElements, sourceGlyphsElementsLength, sourceGlyphsElements, &__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasGlyph[] AddGlyphsAfterJustification(Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, System.Int32[], Microsoft.Graphics.Canvas.Text.CanvasGlyph[], Microsoft.Graphics.Canvas.Text.CanvasGlyph[], Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[])
    private func _n_AddGlyphsAfterJustification(_ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ clusterMapIndicesElementsLength : UINT32, _ clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, _ originalGlyphsElementsLength : UINT32, _ originalGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ justifiedGlyphsElementsLength : UINT32, _ justifiedGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ glyphShapingResultsElementsLength : UINT32, _ glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddGlyphsAfterJustification(pThis, fontFace, fontSize, script, clusterMapIndicesElementsLength, clusterMapIndicesElements, originalGlyphsElementsLength, originalGlyphsElements, justifiedGlyphsElementsLength, justifiedGlyphsElements, glyphShapingResultsElementsLength, glyphShapingResultsElements, __presultLength, __presult))
        }
    }
    public func AddGlyphsAfterJustification(fontFace : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, clusterMapIndicesElementsLength : UINT32, clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, originalGlyphsElementsLength : UINT32, originalGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, justifiedGlyphsElementsLength : UINT32, justifiedGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, glyphShapingResultsElementsLength : UINT32, glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>> = nil;
        try self._n_AddGlyphsAfterJustification(RawPointer(fontFace), fontSize, script, clusterMapIndicesElementsLength, clusterMapIndicesElements, originalGlyphsElementsLength, originalGlyphsElements, justifiedGlyphsElementsLength, justifiedGlyphsElements, glyphShapingResultsElementsLength, glyphShapingResultsElements, &__resultLength, &__result);
        return __resultLength;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasGlyph[] AddGlyphsAfterJustification(Microsoft.Graphics.Canvas.Text.CanvasFontFace, System.Single, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, System.Int32[], Microsoft.Graphics.Canvas.Text.CanvasGlyph[], Microsoft.Graphics.Canvas.Text.CanvasGlyph[], Microsoft.Graphics.Canvas.Text.CanvasGlyphShaping[], ref System.Int32[])
    private func _n_AddGlyphsAfterJustificationWithClusterMap(_ fontFace : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace>>, _ fontSize : FLOAT, _ script : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript, _ clusterMapIndicesElementsLength : UINT32, _ clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, _ originalGlyphsElementsLength : UINT32, _ originalGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ justifiedGlyphsElementsLength : UINT32, _ justifiedGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, _ glyphShapingResultsElementsLength : UINT32, _ glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>, _ outputClusterMapIndicesElementsLength : UnsafeMutablePointer<UINT32>, _ outputClusterMapIndicesElements : UnsafeMutablePointer<Optional<UnsafeMutablePointer<INT32>>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddGlyphsAfterJustificationWithClusterMap(pThis, fontFace, fontSize, script, clusterMapIndicesElementsLength, clusterMapIndicesElements, originalGlyphsElementsLength, originalGlyphsElements, justifiedGlyphsElementsLength, justifiedGlyphsElements, glyphShapingResultsElementsLength, glyphShapingResultsElements, outputClusterMapIndicesElementsLength, outputClusterMapIndicesElements, __presultLength, __presult))
        }
    }
    public func AddGlyphsAfterJustificationWithClusterMap(fontFace : Optional<Microsoft.Graphics.Canvas.Text.ICanvasFontFace>, fontSize : Swift.Float, script : Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript, clusterMapIndicesElementsLength : UINT32, clusterMapIndicesElements : Optional<UnsafeMutablePointer<INT32>>, originalGlyphsElementsLength : UINT32, originalGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, justifiedGlyphsElementsLength : UINT32, justifiedGlyphsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>>, glyphShapingResultsElementsLength : UINT32, glyphShapingResultsElements : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping>>, outputClusterMapIndicesElementsLength : inout UINT32, outputClusterMapIndicesElements : inout Optional<UnsafeMutablePointer<INT32>>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph>> = nil;
            var _tmp_out_outputClusterMapIndicesElementsLength: UINT32 = 0;
            var _tmp_out_outputClusterMapIndicesElements: Optional<UnsafeMutablePointer<INT32>> = nil;
        try self._n_AddGlyphsAfterJustificationWithClusterMap(RawPointer(fontFace), fontSize, script, clusterMapIndicesElementsLength, clusterMapIndicesElements, originalGlyphsElementsLength, originalGlyphsElements, justifiedGlyphsElementsLength, justifiedGlyphsElements, glyphShapingResultsElementsLength, glyphShapingResultsElements, &_tmp_out_outputClusterMapIndicesElementsLength, &_tmp_out_outputClusterMapIndicesElements, &__resultLength, &__result);
            outputClusterMapIndicesElements = _tmp_out_outputClusterMapIndicesElements;
        return __resultLength;
    }
} // ICanvasTextAnalyzer


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasTextAnalyzerFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x521e433f, Data2: 0xf698, Data3 : 0x44c0, Data4 : (0x8d, 0x7f, 0xfe, 0x37, 0x4f, 0xe5, 0x39, 0xe1)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer Create(System.String, Microsoft.Graphics.Canvas.Text.CanvasTextDirection)
    private func _n_Create(_ text : Optional<HSTRING>, _ textDirection : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, text, textDirection, __presult))
        }
    }
    public func Create(text : Optional<Swift.String>, textDirection : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer> {
        let __hstr_text = try HString(text!);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer>> = nil;
        try self._n_Create(__hstr_text.Raw(), textDirection, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer(consuming: __result);
        }
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(System.String, Microsoft.Graphics.Canvas.Text.CanvasTextDirection, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution, Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation, System.UInt32)
    private func _n_CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(_ text : Optional<HSTRING>, _ textDirection : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection, _ numberSubstitution : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution>>, _ verticalGlyphOrientation : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation, _ bidiLevel : UINT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(pThis, text, textDirection, numberSubstitution, verticalGlyphOrientation, bidiLevel, __presult))
        }
    }
    public func CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(text : Optional<Swift.String>, textDirection : Microsoft.Graphics.Canvas.Text.CanvasTextDirection, numberSubstitution : Optional<Microsoft.Graphics.Canvas.Text.ICanvasNumberSubstitution>, verticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation, bidiLevel : Swift.UInt32) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer> {
        let __hstr_text = try HString(text!);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer>> = nil;
        try self._n_CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(__hstr_text.Raw(), textDirection, RawPointer(numberSubstitution), verticalGlyphOrientation, bidiLevel, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer(consuming: __result);
        }
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTextAnalyzer CreateWithOptions(System.String, Microsoft.Graphics.Canvas.Text.CanvasTextDirection, Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions)
    private func _n_CreateWithOptions(_ text : Optional<HSTRING>, _ textDirection : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection, _ options : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithOptions(pThis, text, textDirection, options, __presult))
        }
    }
    public func CreateWithOptions(text : Optional<Swift.String>, textDirection : Microsoft.Graphics.Canvas.Text.CanvasTextDirection, options : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions>) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer> {
        let __hstr_text = try HString(text!);
        return try withExtendedLifetime(__hstr_text) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer>> = nil;
        try self._n_CreateWithOptions(__hstr_text.Raw(), textDirection, RawPointer(options), &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzer(consuming: __result);
        }
    }
} // ICanvasTextAnalyzerFactory


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions
// interface type
open class ICanvasTextAnalyzerOptions
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x31f2406a, Data2: 0x8c5f, Data3 : 0x4e12, Data4 : (0x8b, 0xd6, 0xcf, 0xbb, 0xc7, 0x21, 0x4d, 0x02)) }
// method not needed: GetLocaleName
// method not needed: GetNumberSubstitution
// method not needed: GetVerticalGlyphOrientation
// method not needed: GetBidiLevel
} // ICanvasTextAnalyzerOptions


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextFormat
// interface type
open class ICanvasTextFormat
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaf61bfdc, Data2: 0xeabb, Data3 : 0x4d38, Data4 : (0xba, 0x1b, 0xaf, 0xb3, 0x40, 0x61, 0x2d, 0x33)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextDirection get_Direction()
    private func _n_get_Direction(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, __presult))
        }
    }
    public func get_Direction() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom;
        try self._n_get_Direction(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Direction(Microsoft.Graphics.Canvas.Text.CanvasTextDirection)
    private func _n_put_Direction(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, value))
        }
    }
    public func put_Direction(value : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws -> Void {
        try self._n_put_Direction(value);
    }
    // [IsSpecialName] System.String get_FontFamily()
    private func _n_get_FontFamily(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, __presult))
        }
    }
    public func get_FontFamily() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FontFamily(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_FontFamily(System.String)
    private func _n_put_FontFamily(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, value))
        }
    }
    public func put_FontFamily(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_FontFamily(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.Single get_FontSize()
    private func _n_get_FontSize(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, __presult))
        }
    }
    public func get_FontSize() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_FontSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontSize(System.Single)
    private func _n_put_FontSize(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
        }
    }
    public func put_FontSize(value : Swift.Float) throws -> Void {
        try self._n_put_FontSize(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_FontStretch()
    private func _n_get_FontStretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, __presult))
        }
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_FontStretch(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStretch(Windows.UI.Text.FontStretch)
    private func _n_put_FontStretch(_ value : _q_CWindows_CUI_CText_CFontStretch) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
        }
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        try self._n_put_FontStretch(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_FontStyle()
    private func _n_get_FontStyle(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, __presult))
        }
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_FontStyle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStyle(Windows.UI.Text.FontStyle)
    private func _n_put_FontStyle(_ value : _q_CWindows_CUI_CText_CFontStyle) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
        }
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        try self._n_put_FontStyle(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_FontWeight()
    private func _n_get_FontWeight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, __presult))
        }
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_FontWeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontWeight(Windows.UI.Text.FontWeight)
    private func _n_put_FontWeight(_ value : _q_CWindows_CUI_CText_CFontWeight) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, value))
        }
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        try self._n_put_FontWeight(value);
    }
    // [IsSpecialName] System.Single get_IncrementalTabStop()
    private func _n_get_IncrementalTabStop(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalTabStop(pThis, __presult))
        }
    }
    public func get_IncrementalTabStop() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_IncrementalTabStop(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IncrementalTabStop(System.Single)
    private func _n_put_IncrementalTabStop(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalTabStop(pThis, value))
        }
    }
    public func put_IncrementalTabStop(value : Swift.Float) throws -> Void {
        try self._n_put_IncrementalTabStop(value);
    }
    // [IsSpecialName] System.Single get_LineSpacing()
    private func _n_get_LineSpacing(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, __presult))
        }
    }
    public func get_LineSpacing() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LineSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacing(System.Single)
    private func _n_put_LineSpacing(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacing(pThis, value))
        }
    }
    public func put_LineSpacing(value : Swift.Float) throws -> Void {
        try self._n_put_LineSpacing(value);
    }
    // [IsSpecialName] System.Single get_LineSpacingBaseline()
    private func _n_get_LineSpacingBaseline(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingBaseline(pThis, __presult))
        }
    }
    public func get_LineSpacingBaseline() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LineSpacingBaseline(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacingBaseline(System.Single)
    private func _n_put_LineSpacingBaseline(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingBaseline(pThis, value))
        }
    }
    public func put_LineSpacingBaseline(value : Swift.Float) throws -> Void {
        try self._n_put_LineSpacingBaseline(value);
    }
    // [IsSpecialName] System.String get_LocaleName()
    private func _n_get_LocaleName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocaleName(pThis, __presult))
        }
    }
    public func get_LocaleName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LocaleName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_LocaleName(System.String)
    private func _n_put_LocaleName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LocaleName(pThis, value))
        }
    }
    public func put_LocaleName(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_LocaleName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment get_VerticalAlignment()
    private func _n_get_VerticalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, __presult))
        }
    }
    public func get_VerticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top;
        try self._n_get_VerticalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalAlignment(Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment)
    private func _n_put_VerticalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
        }
    }
    public func put_VerticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment) throws -> Void {
        try self._n_put_VerticalAlignment(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment get_HorizontalAlignment()
    private func _n_get_HorizontalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left;
        try self._n_get_HorizontalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalAlignment(Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment)
    private func _n_put_HorizontalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
        }
    }
    public func put_HorizontalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment) throws -> Void {
        try self._n_put_HorizontalAlignment(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity get_TrimmingGranularity()
    private func _n_get_TrimmingGranularity(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingGranularity(pThis, __presult))
        }
    }
    public func get_TrimmingGranularity() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None;
        try self._n_get_TrimmingGranularity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingGranularity(Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity)
    private func _n_put_TrimmingGranularity(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingGranularity(pThis, value))
        }
    }
    public func put_TrimmingGranularity(value : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity) throws -> Void {
        try self._n_put_TrimmingGranularity(value);
    }
    // [IsSpecialName] System.String get_TrimmingDelimiter()
    private func _n_get_TrimmingDelimiter(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiter(pThis, __presult))
        }
    }
    public func get_TrimmingDelimiter() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_TrimmingDelimiter(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_TrimmingDelimiter(System.String)
    private func _n_put_TrimmingDelimiter(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiter(pThis, value))
        }
    }
    public func put_TrimmingDelimiter(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_TrimmingDelimiter(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.Int32 get_TrimmingDelimiterCount()
    private func _n_get_TrimmingDelimiterCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiterCount(pThis, __presult))
        }
    }
    public func get_TrimmingDelimiterCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_TrimmingDelimiterCount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingDelimiterCount(System.Int32)
    private func _n_put_TrimmingDelimiterCount(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiterCount(pThis, value))
        }
    }
    public func put_TrimmingDelimiterCount(value : Swift.Int32) throws -> Void {
        try self._n_put_TrimmingDelimiterCount(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasWordWrapping get_WordWrapping()
    private func _n_get_WordWrapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WordWrapping(pThis, __presult))
        }
    }
    public func get_WordWrapping() throws -> Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap;
        try self._n_get_WordWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_WordWrapping(Microsoft.Graphics.Canvas.Text.CanvasWordWrapping)
    private func _n_put_WordWrapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_WordWrapping(pThis, value))
        }
    }
    public func put_WordWrapping(value : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping) throws -> Void {
        try self._n_put_WordWrapping(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions get_Options()
    private func _n_get_Options(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, __presult))
        }
    }
    public func get_Options() throws -> Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default;
        try self._n_get_Options(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Options(Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions)
    private func _n_put_Options(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
        }
    }
    public func put_Options(value : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions) throws -> Void {
        try self._n_put_Options(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation()
    private func _n_get_VerticalGlyphOrientation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalGlyphOrientation(pThis, __presult))
        }
    }
    public func get_VerticalGlyphOrientation() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default;
        try self._n_get_VerticalGlyphOrientation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalGlyphOrientation(Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation)
    private func _n_put_VerticalGlyphOrientation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalGlyphOrientation(pThis, value))
        }
    }
    public func put_VerticalGlyphOrientation(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation) throws -> Void {
        try self._n_put_VerticalGlyphOrientation(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment get_OpticalAlignment()
    private func _n_get_OpticalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalAlignment(pThis, __presult))
        }
    }
    public func get_OpticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default;
        try self._n_get_OpticalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OpticalAlignment(Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment)
    private func _n_put_OpticalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalAlignment(pThis, value))
        }
    }
    public func put_OpticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment) throws -> Void {
        try self._n_put_OpticalAlignment(value);
    }
    // [IsSpecialName] bool get_LastLineWrapping()
    private func _n_get_LastLineWrapping(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastLineWrapping(pThis, __presult))
        }
    }
    public func get_LastLineWrapping() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_LastLineWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LastLineWrapping(bool)
    private func _n_put_LastLineWrapping(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastLineWrapping(pThis, value))
        }
    }
    public func put_LastLineWrapping(value : boolean) throws -> Void {
        try self._n_put_LastLineWrapping(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode get_LineSpacingMode()
    private func _n_get_LineSpacingMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingMode(pThis, __presult))
        }
    }
    public func get_LineSpacingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default;
        try self._n_get_LineSpacingMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacingMode(Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode)
    private func _n_put_LineSpacingMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingMode(pThis, value))
        }
    }
    public func put_LineSpacingMode(value : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode) throws -> Void {
        try self._n_put_LineSpacingMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign get_TrimmingSign()
    private func _n_get_TrimmingSign(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingSign(pThis, __presult))
        }
    }
    public func get_TrimmingSign() throws -> Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None;
        try self._n_get_TrimmingSign(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingSign(Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign)
    private func _n_put_TrimmingSign(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingSign(pThis, value))
        }
    }
    public func put_TrimmingSign(value : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign) throws -> Void {
        try self._n_put_TrimmingSign(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject get_CustomTrimmingSign()
    private func _n_get_CustomTrimmingSign(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomTrimmingSign(pThis, __presult))
        }
    }
    public func get_CustomTrimmingSign() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>> = nil;
        try self._n_get_CustomTrimmingSign(&__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject(consuming: __result);
    }
    // [IsSpecialName] void put_CustomTrimmingSign(Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject)
    private func _n_put_CustomTrimmingSign(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomTrimmingSign(pThis, value))
        }
    }
    public func put_CustomTrimmingSign(value : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        try self._n_put_CustomTrimmingSign(RawPointer(value));
    }
    public var CustomTrimmingSign : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        get throws {
            return try get_CustomTrimmingSign();
        }
    }
    public var Direction : Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        get throws {
            return try get_Direction();
        }
    }
    public var FontFamily : Swift.String {
        get throws {
            return try get_FontFamily();
        }
    }
    public var FontSize : Swift.Float {
        get throws {
            return try get_FontSize();
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
            return try get_FontStretch();
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
            return try get_FontStyle();
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
            return try get_FontWeight();
        }
    }
    public var HorizontalAlignment : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        get throws {
            return try get_HorizontalAlignment();
        }
    }
    public var IncrementalTabStop : Swift.Float {
        get throws {
            return try get_IncrementalTabStop();
        }
    }
    public var LastLineWrapping : boolean {
        get throws {
            return try get_LastLineWrapping();
        }
    }
    public var LineSpacing : Swift.Float {
        get throws {
            return try get_LineSpacing();
        }
    }
    public var LineSpacingBaseline : Swift.Float {
        get throws {
            return try get_LineSpacingBaseline();
        }
    }
    public var LineSpacingMode : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        get throws {
            return try get_LineSpacingMode();
        }
    }
    public var LocaleName : Swift.String {
        get throws {
            return try get_LocaleName();
        }
    }
    public var OpticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        get throws {
            return try get_OpticalAlignment();
        }
    }
    public var Options : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        get throws {
            return try get_Options();
        }
    }
    public var TrimmingDelimiter : Swift.String {
        get throws {
            return try get_TrimmingDelimiter();
        }
    }
    public var TrimmingDelimiterCount : Swift.Int32 {
        get throws {
            return try get_TrimmingDelimiterCount();
        }
    }
    public var TrimmingGranularity : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        get throws {
            return try get_TrimmingGranularity();
        }
    }
    public var TrimmingSign : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        get throws {
            return try get_TrimmingSign();
        }
    }
    public var VerticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        get throws {
            return try get_VerticalAlignment();
        }
    }
    public var VerticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        get throws {
            return try get_VerticalGlyphOrientation();
        }
    }
    public var WordWrapping : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        get throws {
            return try get_WordWrapping();
        }
    }
} // ICanvasTextFormat


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics
// interface type
open class ICanvasTextFormatStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8a927515, Data2: 0x33fc, Data3 : 0x4c92, Data4 : (0xa6, 0xaa, 0x94, 0xa8, 0xf2, 0x9c, 0x14, 0x0b)) }
    // System.String[] GetSystemFontFamilies()
    private func _n_GetSystemFontFamilies(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<Optional<HSTRING>>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontFamilies(pThis, __presultLength, __presult))
        }
    }
    public func GetSystemFontFamilies() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<Optional<HSTRING>>> = nil;
        try self._n_GetSystemFontFamilies(&__resultLength, &__result);
        return __resultLength;
    }
    // System.String[] GetSystemFontFamilies(Windows.Foundation.Collections.IVectorView<System.String>)
    private func _n_GetSystemFontFamiliesFromLocaleList(_ localeList : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<Optional<HSTRING>>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontFamiliesFromLocaleList(pThis, localeList, __presultLength, __presult))
        }
    }
    public func GetSystemFontFamiliesFromLocaleList(localeList : Optional<ClosedGenerics.IVectorView_1_HSTRING>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<Optional<HSTRING>>> = nil;
        try self._n_GetSystemFontFamiliesFromLocaleList(RawPointer(localeList), &__resultLength, &__result);
        return __resultLength;
    }
} // ICanvasTextFormatStatics


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject
// interface type
open class ICanvasTextInlineObject
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7a89ee99, Data2: 0xce2a, Data3 : 0x47fa, Data4 : (0x9d, 0xd2, 0x0a, 0x68, 0x25, 0xf6, 0x05, 0x3f)) }
// method not needed: Draw
// method not needed: get_Size
// method not needed: get_Baseline
// method not needed: get_SupportsSideways
// method not needed: get_DrawBounds
// method not needed: get_BreakBefore
// method not needed: get_BreakAfter
} // ICanvasTextInlineObject


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextLayout
// interface type
open class ICanvasTextLayout
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbae63e54, Data2: 0x48ae, Data3 : 0x4446, Data4 : (0xa2, 0xc7, 0xb6, 0xef, 0x93, 0x80, 0x6c, 0x20)) }
    // System.Int32[] GetFormatChangeIndices()
    private func _n_GetFormatChangeIndices(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<INT32>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFormatChangeIndices(pThis, __presultLength, __presult))
        }
    }
    public func GetFormatChangeIndices() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<INT32>> = nil;
        try self._n_GetFormatChangeIndices(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextDirection get_Direction()
    private func _n_get_Direction(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, __presult))
        }
    }
    public func get_Direction() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom;
        try self._n_get_Direction(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Direction(Microsoft.Graphics.Canvas.Text.CanvasTextDirection)
    private func _n_put_Direction(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, value))
        }
    }
    public func put_Direction(value : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws -> Void {
        try self._n_put_Direction(value);
    }
    // [IsSpecialName] System.String get_DefaultFontFamily()
    private func _n_get_DefaultFontFamily(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontFamily(pThis, __presult))
        }
    }
    public func get_DefaultFontFamily() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DefaultFontFamily(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] System.Single get_DefaultFontSize()
    private func _n_get_DefaultFontSize(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontSize(pThis, __presult))
        }
    }
    public func get_DefaultFontSize() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_DefaultFontSize(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_DefaultFontStretch()
    private func _n_get_DefaultFontStretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontStretch(pThis, __presult))
        }
    }
    public func get_DefaultFontStretch() throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_DefaultFontStretch(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_DefaultFontStyle()
    private func _n_get_DefaultFontStyle(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontStyle(pThis, __presult))
        }
    }
    public func get_DefaultFontStyle() throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_DefaultFontStyle(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_DefaultFontWeight()
    private func _n_get_DefaultFontWeight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontWeight(pThis, __presult))
        }
    }
    public func get_DefaultFontWeight() throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_DefaultFontWeight(&__result);
        return __result;
    }
    // [IsSpecialName] System.Single get_IncrementalTabStop()
    private func _n_get_IncrementalTabStop(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalTabStop(pThis, __presult))
        }
    }
    public func get_IncrementalTabStop() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_IncrementalTabStop(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IncrementalTabStop(System.Single)
    private func _n_put_IncrementalTabStop(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalTabStop(pThis, value))
        }
    }
    public func put_IncrementalTabStop(value : Swift.Float) throws -> Void {
        try self._n_put_IncrementalTabStop(value);
    }
    // [IsSpecialName] System.Single get_LineSpacing()
    private func _n_get_LineSpacing(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, __presult))
        }
    }
    public func get_LineSpacing() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LineSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacing(System.Single)
    private func _n_put_LineSpacing(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacing(pThis, value))
        }
    }
    public func put_LineSpacing(value : Swift.Float) throws -> Void {
        try self._n_put_LineSpacing(value);
    }
    // [IsSpecialName] System.Single get_LineSpacingBaseline()
    private func _n_get_LineSpacingBaseline(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingBaseline(pThis, __presult))
        }
    }
    public func get_LineSpacingBaseline() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LineSpacingBaseline(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacingBaseline(System.Single)
    private func _n_put_LineSpacingBaseline(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingBaseline(pThis, value))
        }
    }
    public func put_LineSpacingBaseline(value : Swift.Float) throws -> Void {
        try self._n_put_LineSpacingBaseline(value);
    }
    // [IsSpecialName] System.String get_DefaultLocaleName()
    private func _n_get_DefaultLocaleName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultLocaleName(pThis, __presult))
        }
    }
    public func get_DefaultLocaleName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DefaultLocaleName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment get_VerticalAlignment()
    private func _n_get_VerticalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, __presult))
        }
    }
    public func get_VerticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top;
        try self._n_get_VerticalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalAlignment(Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment)
    private func _n_put_VerticalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
        }
    }
    public func put_VerticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment) throws -> Void {
        try self._n_put_VerticalAlignment(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment get_HorizontalAlignment()
    private func _n_get_HorizontalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left;
        try self._n_get_HorizontalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalAlignment(Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment)
    private func _n_put_HorizontalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
        }
    }
    public func put_HorizontalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment) throws -> Void {
        try self._n_put_HorizontalAlignment(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity get_TrimmingGranularity()
    private func _n_get_TrimmingGranularity(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingGranularity(pThis, __presult))
        }
    }
    public func get_TrimmingGranularity() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None;
        try self._n_get_TrimmingGranularity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingGranularity(Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity)
    private func _n_put_TrimmingGranularity(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingGranularity(pThis, value))
        }
    }
    public func put_TrimmingGranularity(value : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity) throws -> Void {
        try self._n_put_TrimmingGranularity(value);
    }
    // [IsSpecialName] System.String get_TrimmingDelimiter()
    private func _n_get_TrimmingDelimiter(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiter(pThis, __presult))
        }
    }
    public func get_TrimmingDelimiter() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_TrimmingDelimiter(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_TrimmingDelimiter(System.String)
    private func _n_put_TrimmingDelimiter(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiter(pThis, value))
        }
    }
    public func put_TrimmingDelimiter(value : Optional<Swift.String>) throws -> Void {
        let __hstr_value = try HString(value!);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_TrimmingDelimiter(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.Int32 get_TrimmingDelimiterCount()
    private func _n_get_TrimmingDelimiterCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiterCount(pThis, __presult))
        }
    }
    public func get_TrimmingDelimiterCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_TrimmingDelimiterCount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingDelimiterCount(System.Int32)
    private func _n_put_TrimmingDelimiterCount(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiterCount(pThis, value))
        }
    }
    public func put_TrimmingDelimiterCount(value : Swift.Int32) throws -> Void {
        try self._n_put_TrimmingDelimiterCount(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasWordWrapping get_WordWrapping()
    private func _n_get_WordWrapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WordWrapping(pThis, __presult))
        }
    }
    public func get_WordWrapping() throws -> Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap;
        try self._n_get_WordWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_WordWrapping(Microsoft.Graphics.Canvas.Text.CanvasWordWrapping)
    private func _n_put_WordWrapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_WordWrapping(pThis, value))
        }
    }
    public func put_WordWrapping(value : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping) throws -> Void {
        try self._n_put_WordWrapping(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions get_Options()
    private func _n_get_Options(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, __presult))
        }
    }
    public func get_Options() throws -> Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default;
        try self._n_get_Options(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Options(Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions)
    private func _n_put_Options(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
        }
    }
    public func put_Options(value : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions) throws -> Void {
        try self._n_put_Options(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode get_LineSpacingMode()
    private func _n_get_LineSpacingMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingMode(pThis, __presult))
        }
    }
    public func get_LineSpacingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default;
        try self._n_get_LineSpacingMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacingMode(Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode)
    private func _n_put_LineSpacingMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingMode(pThis, value))
        }
    }
    public func put_LineSpacingMode(value : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode) throws -> Void {
        try self._n_put_LineSpacingMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign get_TrimmingSign()
    private func _n_get_TrimmingSign(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingSign(pThis, __presult))
        }
    }
    public func get_TrimmingSign() throws -> Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None;
        try self._n_get_TrimmingSign(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingSign(Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign)
    private func _n_put_TrimmingSign(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingSign(pThis, value))
        }
    }
    public func put_TrimmingSign(value : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign) throws -> Void {
        try self._n_put_TrimmingSign(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject get_CustomTrimmingSign()
    private func _n_get_CustomTrimmingSign(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomTrimmingSign(pThis, __presult))
        }
    }
    public func get_CustomTrimmingSign() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>> = nil;
        try self._n_get_CustomTrimmingSign(&__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject(consuming: __result);
    }
    // [IsSpecialName] void put_CustomTrimmingSign(Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject)
    private func _n_put_CustomTrimmingSign(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomTrimmingSign(pThis, value))
        }
    }
    public func put_CustomTrimmingSign(value : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        try self._n_put_CustomTrimmingSign(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Size get_RequestedSize()
    private func _n_get_RequestedSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedSize(pThis, __presult))
        }
    }
    public func get_RequestedSize() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_RequestedSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequestedSize(Windows.Foundation.Size)
    private func _n_put_RequestedSize(_ value : _q_CWindows_CFoundation_CSize) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedSize(pThis, value))
        }
    }
    public func put_RequestedSize(value : Windows.Foundation.Size) throws -> Void {
        try self._n_put_RequestedSize(value);
    }
    // System.Single GetMinimumLineLength()
    private func _n_GetMinimumLineLength(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMinimumLineLength(pThis, __presult))
        }
    }
    public func GetMinimumLineLength() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_GetMinimumLineLength(&__result);
        return __result;
    }
    // Microsoft.Graphics.Canvas.Brushes.ICanvasBrush GetBrush(System.Int32)
    private func _n_GetBrush(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetBrush(pThis, characterIndex, __presult))
        }
    }
    public func GetBrush(characterIndex : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>> = nil;
        try self._n_GetBrush(characterIndex, &__result);
        return Microsoft.Graphics.Canvas.Brushes.ICanvasBrush(consuming: __result);
    }
    // System.Object GetCustomBrush(System.Int32)
    private func _n_GetCustomBrush(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCustomBrush(pThis, characterIndex, __presult))
        }
    }
    public func GetCustomBrush(characterIndex : Swift.Int32) throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_GetCustomBrush(characterIndex, &__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // System.String GetFontFamily(System.Int32)
    private func _n_GetFontFamily(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontFamily(pThis, characterIndex, __presult))
        }
    }
    public func GetFontFamily(characterIndex : Swift.Int32) throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetFontFamily(characterIndex, &__result);
        return Swift.String(from: __result);
    }
    // System.Single GetFontSize(System.Int32)
    private func _n_GetFontSize(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontSize(pThis, characterIndex, __presult))
        }
    }
    public func GetFontSize(characterIndex : Swift.Int32) throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_GetFontSize(characterIndex, &__result);
        return __result;
    }
    // Windows.UI.Text.FontStretch GetFontStretch(System.Int32)
    private func _n_GetFontStretch(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontStretch(pThis, characterIndex, __presult))
        }
    }
    public func GetFontStretch(characterIndex : Swift.Int32) throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_GetFontStretch(characterIndex, &__result);
        return __result;
    }
    // Windows.UI.Text.FontStyle GetFontStyle(System.Int32)
    private func _n_GetFontStyle(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontStyle(pThis, characterIndex, __presult))
        }
    }
    public func GetFontStyle(characterIndex : Swift.Int32) throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_GetFontStyle(characterIndex, &__result);
        return __result;
    }
    // Windows.UI.Text.FontWeight GetFontWeight(System.Int32)
    private func _n_GetFontWeight(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontWeight(pThis, characterIndex, __presult))
        }
    }
    public func GetFontWeight(characterIndex : Swift.Int32) throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_GetFontWeight(characterIndex, &__result);
        return __result;
    }
    // System.String GetLocaleName(System.Int32)
    private func _n_GetLocaleName(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocaleName(pThis, characterIndex, __presult))
        }
    }
    public func GetLocaleName(characterIndex : Swift.Int32) throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_GetLocaleName(characterIndex, &__result);
        return Swift.String(from: __result);
    }
    // bool GetStrikethrough(System.Int32)
    private func _n_GetStrikethrough(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetStrikethrough(pThis, characterIndex, __presult))
        }
    }
    public func GetStrikethrough(characterIndex : Swift.Int32) throws -> boolean {
        var __result : boolean = 0;
        try self._n_GetStrikethrough(characterIndex, &__result);
        return __result;
    }
    // bool GetUnderline(System.Int32)
    private func _n_GetUnderline(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetUnderline(pThis, characterIndex, __presult))
        }
    }
    public func GetUnderline(characterIndex : Swift.Int32) throws -> boolean {
        var __result : boolean = 0;
        try self._n_GetUnderline(characterIndex, &__result);
        return __result;
    }
    // Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject GetInlineObject(System.Int32)
    private func _n_GetInlineObject(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetInlineObject(pThis, characterIndex, __presult))
        }
    }
    public func GetInlineObject(characterIndex : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>> = nil;
        try self._n_GetInlineObject(characterIndex, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject(consuming: __result);
    }
    // void SetColor(System.Int32, System.Int32, Windows.UI.Color)
    private func _n_SetColor(_ characterIndex : INT32, _ characterCount : INT32, _ color : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetColor(pThis, characterIndex, characterCount, color))
        }
    }
    public func SetColor(characterIndex : Swift.Int32, characterCount : Swift.Int32, color : Windows.UI.Color) throws -> Void {
        try self._n_SetColor(characterIndex, characterCount, color);
    }
    // void SetBrush(System.Int32, System.Int32, Microsoft.Graphics.Canvas.Brushes.ICanvasBrush)
    private func _n_SetBrush(_ characterIndex : INT32, _ characterCount : INT32, _ brush : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetBrush(pThis, characterIndex, characterCount, brush))
        }
    }
    public func SetBrush(characterIndex : Swift.Int32, characterCount : Swift.Int32, brush : Optional<Microsoft.Graphics.Canvas.Brushes.ICanvasBrush>) throws -> Void {
        try self._n_SetBrush(characterIndex, characterCount, RawPointer(brush));
    }
    // void SetCustomBrush(System.Int32, System.Int32, System.Object)
    private func _n_SetCustomBrush(_ characterIndex : INT32, _ characterCount : INT32, _ brush : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetCustomBrush(pThis, characterIndex, characterCount, brush))
        }
    }
    public func SetCustomBrush(characterIndex : Swift.Int32, characterCount : Swift.Int32, brush : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_SetCustomBrush(characterIndex, characterCount, RawPointer(brush));
    }
    // void SetFontFamily(System.Int32, System.Int32, System.String)
    private func _n_SetFontFamily(_ characterIndex : INT32, _ characterCount : INT32, _ fontFamily : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontFamily(pThis, characterIndex, characterCount, fontFamily))
        }
    }
    public func SetFontFamily(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontFamily : Optional<Swift.String>) throws -> Void {
        let __hstr_fontFamily = try HString(fontFamily!);
        return try withExtendedLifetime(__hstr_fontFamily) {
        try self._n_SetFontFamily(characterIndex, characterCount, __hstr_fontFamily.Raw());
        }
    }
    // void SetFontSize(System.Int32, System.Int32, System.Single)
    private func _n_SetFontSize(_ characterIndex : INT32, _ characterCount : INT32, _ fontSize : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontSize(pThis, characterIndex, characterCount, fontSize))
        }
    }
    public func SetFontSize(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontSize : Swift.Float) throws -> Void {
        try self._n_SetFontSize(characterIndex, characterCount, fontSize);
    }
    // void SetFontStretch(System.Int32, System.Int32, Windows.UI.Text.FontStretch)
    private func _n_SetFontStretch(_ characterIndex : INT32, _ characterCount : INT32, _ fontStretch : _q_CWindows_CUI_CText_CFontStretch) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontStretch(pThis, characterIndex, characterCount, fontStretch))
        }
    }
    public func SetFontStretch(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontStretch : Windows.UI.Text.FontStretch) throws -> Void {
        try self._n_SetFontStretch(characterIndex, characterCount, fontStretch);
    }
    // void SetFontStyle(System.Int32, System.Int32, Windows.UI.Text.FontStyle)
    private func _n_SetFontStyle(_ characterIndex : INT32, _ characterCount : INT32, _ fontStyle : _q_CWindows_CUI_CText_CFontStyle) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontStyle(pThis, characterIndex, characterCount, fontStyle))
        }
    }
    public func SetFontStyle(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontStyle : Windows.UI.Text.FontStyle) throws -> Void {
        try self._n_SetFontStyle(characterIndex, characterCount, fontStyle);
    }
    // void SetFontWeight(System.Int32, System.Int32, Windows.UI.Text.FontWeight)
    private func _n_SetFontWeight(_ characterIndex : INT32, _ characterCount : INT32, _ fontWeight : _q_CWindows_CUI_CText_CFontWeight) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontWeight(pThis, characterIndex, characterCount, fontWeight))
        }
    }
    public func SetFontWeight(characterIndex : Swift.Int32, characterCount : Swift.Int32, fontWeight : Windows.UI.Text.FontWeight) throws -> Void {
        try self._n_SetFontWeight(characterIndex, characterCount, fontWeight);
    }
    // void SetLocaleName(System.Int32, System.Int32, System.String)
    private func _n_SetLocaleName(_ characterIndex : INT32, _ characterCount : INT32, _ name : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetLocaleName(pThis, characterIndex, characterCount, name))
        }
    }
    public func SetLocaleName(characterIndex : Swift.Int32, characterCount : Swift.Int32, name : Optional<Swift.String>) throws -> Void {
        let __hstr_name = try HString(name!);
        return try withExtendedLifetime(__hstr_name) {
        try self._n_SetLocaleName(characterIndex, characterCount, __hstr_name.Raw());
        }
    }
    // void SetStrikethrough(System.Int32, System.Int32, bool)
    private func _n_SetStrikethrough(_ characterIndex : INT32, _ characterCount : INT32, _ hasStrikethrough : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetStrikethrough(pThis, characterIndex, characterCount, hasStrikethrough))
        }
    }
    public func SetStrikethrough(characterIndex : Swift.Int32, characterCount : Swift.Int32, hasStrikethrough : boolean) throws -> Void {
        try self._n_SetStrikethrough(characterIndex, characterCount, hasStrikethrough);
    }
    // void SetUnderline(System.Int32, System.Int32, bool)
    private func _n_SetUnderline(_ characterIndex : INT32, _ characterCount : INT32, _ hasUnderline : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetUnderline(pThis, characterIndex, characterCount, hasUnderline))
        }
    }
    public func SetUnderline(characterIndex : Swift.Int32, characterCount : Swift.Int32, hasUnderline : boolean) throws -> Void {
        try self._n_SetUnderline(characterIndex, characterCount, hasUnderline);
    }
    // void SetInlineObject(System.Int32, System.Int32, Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject)
    private func _n_SetInlineObject(_ characterIndex : INT32, _ characterCount : INT32, _ inlineObject : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetInlineObject(pThis, characterIndex, characterCount, inlineObject))
        }
    }
    public func SetInlineObject(characterIndex : Swift.Int32, characterCount : Swift.Int32, inlineObject : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        try self._n_SetInlineObject(characterIndex, characterCount, RawPointer(inlineObject));
    }
    // void DrawToTextRenderer(Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer, Windows.Foundation.Numerics.Vector2)
    private func _n_DrawToTextRenderer(_ textRenderer : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer>>, _ position : _q_CWindows_CFoundation_CNumerics_CVector2) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToTextRenderer(pThis, textRenderer, position))
        }
    }
    public func DrawToTextRenderer(textRenderer : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer>, position : Windows.Foundation.Numerics.Vector2) throws -> Void {
        try self._n_DrawToTextRenderer(RawPointer(textRenderer), position);
    }
    // void DrawToTextRenderer(Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer, System.Single, System.Single)
    private func _n_DrawToTextRendererWithCoords(_ textRenderer : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer>>, _ x : FLOAT, _ y : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToTextRendererWithCoords(pThis, textRenderer, x, y))
        }
    }
    public func DrawToTextRendererWithCoords(textRenderer : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer>, x : Swift.Float, y : Swift.Float) throws -> Void {
        try self._n_DrawToTextRendererWithCoords(RawPointer(textRenderer), x, y);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasLineMetrics[] get_LineMetrics()
    private func _n_get_LineMetrics(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineMetrics(pThis, __presultLength, __presult))
        }
    }
    public func get_LineMetrics() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics>> = nil;
        try self._n_get_LineMetrics(&__resultLength, &__result);
        return __resultLength;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasClusterMetrics[] get_ClusterMetrics()
    private func _n_get_ClusterMetrics(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClusterMetrics(pThis, __presultLength, __presult))
        }
    }
    public func get_ClusterMetrics() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics>> = nil;
        try self._n_get_ClusterMetrics(&__resultLength, &__result);
        return __resultLength;
    }
    // void SetTypography(System.Int32, System.Int32, Microsoft.Graphics.Canvas.Text.CanvasTypography)
    private func _n_SetTypography(_ characterIndex : INT32, _ characterCount : INT32, _ typography : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetTypography(pThis, characterIndex, characterCount, typography))
        }
    }
    public func SetTypography(characterIndex : Swift.Int32, characterCount : Swift.Int32, typography : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTypography>) throws -> Void {
        try self._n_SetTypography(characterIndex, characterCount, RawPointer(typography));
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTypography GetTypography(System.Int32)
    private func _n_GetTypography(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTypography(pThis, characterIndex, __presult))
        }
    }
    public func GetTypography(characterIndex : Swift.Int32) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTypography> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography>> = nil;
        try self._n_GetTypography(characterIndex, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTypography(consuming: __result);
    }
    // [IsSpecialName] Windows.Foundation.Rect get_LayoutBounds()
    private func _n_get_LayoutBounds(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutBounds(pThis, __presult))
        }
    }
    public func get_LayoutBounds() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_LayoutBounds(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_LayoutBoundsIncludingTrailingWhitespace()
    private func _n_get_LayoutBoundsIncludingTrailingWhitespace(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutBoundsIncludingTrailingWhitespace(pThis, __presult))
        }
    }
    public func get_LayoutBoundsIncludingTrailingWhitespace() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_LayoutBoundsIncludingTrailingWhitespace(&__result);
        return __result;
    }
    // [IsSpecialName] System.Int32 get_LineCount()
    private func _n_get_LineCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineCount(pThis, __presult))
        }
    }
    public func get_LineCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_LineCount(&__result);
        return __result;
    }
    // [IsSpecialName] System.Int32 get_MaximumBidiReorderingDepth()
    private func _n_get_MaximumBidiReorderingDepth(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumBidiReorderingDepth(pThis, __presult))
        }
    }
    public func get_MaximumBidiReorderingDepth() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_MaximumBidiReorderingDepth(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Rect get_DrawBounds()
    private func _n_get_DrawBounds(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawBounds(pThis, __presult))
        }
    }
    public func get_DrawBounds() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_DrawBounds(&__result);
        return __result;
    }
    // bool HitTest(Windows.Foundation.Numerics.Vector2)
    private func _n_HitTest(_ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HitTest(pThis, point, __presult))
        }
    }
    public func HitTest(point : Windows.Foundation.Numerics.Vector2) throws -> boolean {
        var __result : boolean = 0;
        try self._n_HitTest(point, &__result);
        return __result;
    }
    // bool HitTest(System.Single, System.Single)
    private func _n_HitTestWithCoords(_ x : FLOAT, _ y : FLOAT, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithCoords(pThis, x, y, __presult))
        }
    }
    public func HitTestWithCoords(x : Swift.Float, y : Swift.Float) throws -> boolean {
        var __result : boolean = 0;
        try self._n_HitTestWithCoords(x, y, &__result);
        return __result;
    }
    // bool HitTest(Windows.Foundation.Numerics.Vector2, ref Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion)
    private func _n_HitTestWithDescription(_ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ textLayoutRegion : UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescription(pThis, point, textLayoutRegion, __presult))
        }
    }
    public func HitTestWithDescription(point : Windows.Foundation.Numerics.Vector2, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_textLayoutRegion: _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
        try self._n_HitTestWithDescription(point, &_tmp_out_textLayoutRegion, &__result);
            textLayoutRegion = _tmp_out_textLayoutRegion;
        return __result;
    }
    // bool HitTest(System.Single, System.Single, ref Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion)
    private func _n_HitTestWithDescriptionAndCoords(_ x : FLOAT, _ y : FLOAT, _ textLayoutRegion : UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndCoords(pThis, x, y, textLayoutRegion, __presult))
        }
    }
    public func HitTestWithDescriptionAndCoords(x : Swift.Float, y : Swift.Float, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_textLayoutRegion: _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
        try self._n_HitTestWithDescriptionAndCoords(x, y, &_tmp_out_textLayoutRegion, &__result);
            textLayoutRegion = _tmp_out_textLayoutRegion;
        return __result;
    }
    // bool HitTest(Windows.Foundation.Numerics.Vector2, ref Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion, ref bool)
    private func _n_HitTestWithDescriptionAndTrailingSide(_ point : _q_CWindows_CFoundation_CNumerics_CVector2, _ textLayoutRegion : UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion>, _ trailingSideOfCharacter : UnsafeMutablePointer<boolean>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndTrailingSide(pThis, point, textLayoutRegion, trailingSideOfCharacter, __presult))
        }
    }
    public func HitTestWithDescriptionAndTrailingSide(point : Windows.Foundation.Numerics.Vector2, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion, trailingSideOfCharacter : inout boolean) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_textLayoutRegion: _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
            var _tmp_out_trailingSideOfCharacter: boolean = 0;
        try self._n_HitTestWithDescriptionAndTrailingSide(point, &_tmp_out_textLayoutRegion, &_tmp_out_trailingSideOfCharacter, &__result);
            textLayoutRegion = _tmp_out_textLayoutRegion;
            trailingSideOfCharacter = _tmp_out_trailingSideOfCharacter;
        return __result;
    }
    // bool HitTest(System.Single, System.Single, ref Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion, ref bool)
    private func _n_HitTestWithDescriptionAndCoordsAndTrailingSide(_ x : FLOAT, _ y : FLOAT, _ textLayoutRegion : UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion>, _ trailingSideOfCharacter : UnsafeMutablePointer<boolean>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndCoordsAndTrailingSide(pThis, x, y, textLayoutRegion, trailingSideOfCharacter, __presult))
        }
    }
    public func HitTestWithDescriptionAndCoordsAndTrailingSide(x : Swift.Float, y : Swift.Float, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion, trailingSideOfCharacter : inout boolean) throws -> boolean {
        var __result : boolean = 0;
            var _tmp_out_textLayoutRegion: _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
            var _tmp_out_trailingSideOfCharacter: boolean = 0;
        try self._n_HitTestWithDescriptionAndCoordsAndTrailingSide(x, y, &_tmp_out_textLayoutRegion, &_tmp_out_trailingSideOfCharacter, &__result);
            textLayoutRegion = _tmp_out_textLayoutRegion;
            trailingSideOfCharacter = _tmp_out_trailingSideOfCharacter;
        return __result;
    }
    // Windows.Foundation.Numerics.Vector2 GetCaretPosition(System.Int32, bool)
    private func _n_GetCaretPosition(_ characterIndex : INT32, _ trailingSideOfCharacter : boolean, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCaretPosition(pThis, characterIndex, trailingSideOfCharacter, __presult))
        }
    }
    public func GetCaretPosition(characterIndex : Swift.Int32, trailingSideOfCharacter : boolean) throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_GetCaretPosition(characterIndex, trailingSideOfCharacter, &__result);
        return __result;
    }
    // Windows.Foundation.Numerics.Vector2 GetCaretPosition(System.Int32, bool, ref Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion)
    private func _n_GetCaretPositionWithDescription(_ characterIndex : INT32, _ trailingSideOfCharacter : boolean, _ textLayoutRegion : UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCaretPositionWithDescription(pThis, characterIndex, trailingSideOfCharacter, textLayoutRegion, __presult))
        }
    }
    public func GetCaretPositionWithDescription(characterIndex : Swift.Int32, trailingSideOfCharacter : boolean, textLayoutRegion : inout Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion) throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
            var _tmp_out_textLayoutRegion: _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion(CharacterIndex: 0, CharacterCount: 0, LayoutBounds: _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0));
        try self._n_GetCaretPositionWithDescription(characterIndex, trailingSideOfCharacter, &_tmp_out_textLayoutRegion, &__result);
            textLayoutRegion = _tmp_out_textLayoutRegion;
        return __result;
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTextLayoutRegion[] GetCharacterRegions(System.Int32, System.Int32)
    private func _n_GetCharacterRegions(_ characterIndex : INT32, _ characterCount : INT32, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetCharacterRegions(pThis, characterIndex, characterCount, __presultLength, __presult))
        }
    }
    public func GetCharacterRegions(characterIndex : Swift.Int32, characterCount : Swift.Int32) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion>> = nil;
        try self._n_GetCharacterRegions(characterIndex, characterCount, &__resultLength, &__result);
        return __resultLength;
    }
    // bool GetPairKerning(System.Int32)
    private func _n_GetPairKerning(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetPairKerning(pThis, characterIndex, __presult))
        }
    }
    public func GetPairKerning(characterIndex : Swift.Int32) throws -> boolean {
        var __result : boolean = 0;
        try self._n_GetPairKerning(characterIndex, &__result);
        return __result;
    }
    // void SetPairKerning(System.Int32, System.Int32, bool)
    private func _n_SetPairKerning(_ characterIndex : INT32, _ characterCount : INT32, _ hasPairKerning : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetPairKerning(pThis, characterIndex, characterCount, hasPairKerning))
        }
    }
    public func SetPairKerning(characterIndex : Swift.Int32, characterCount : Swift.Int32, hasPairKerning : boolean) throws -> Void {
        try self._n_SetPairKerning(characterIndex, characterCount, hasPairKerning);
    }
    // System.Single GetLeadingCharacterSpacing(System.Int32)
    private func _n_GetLeadingCharacterSpacing(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetLeadingCharacterSpacing(pThis, characterIndex, __presult))
        }
    }
    public func GetLeadingCharacterSpacing(characterIndex : Swift.Int32) throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_GetLeadingCharacterSpacing(characterIndex, &__result);
        return __result;
    }
    // System.Single GetTrailingCharacterSpacing(System.Int32)
    private func _n_GetTrailingCharacterSpacing(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTrailingCharacterSpacing(pThis, characterIndex, __presult))
        }
    }
    public func GetTrailingCharacterSpacing(characterIndex : Swift.Int32) throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_GetTrailingCharacterSpacing(characterIndex, &__result);
        return __result;
    }
    // System.Single GetMinimumCharacterAdvance(System.Int32)
    private func _n_GetMinimumCharacterAdvance(_ characterIndex : INT32, _ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMinimumCharacterAdvance(pThis, characterIndex, __presult))
        }
    }
    public func GetMinimumCharacterAdvance(characterIndex : Swift.Int32) throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_GetMinimumCharacterAdvance(characterIndex, &__result);
        return __result;
    }
    // void SetCharacterSpacing(System.Int32, System.Int32, System.Single, System.Single, System.Single)
    private func _n_SetCharacterSpacing(_ characterIndex : INT32, _ characterCount : INT32, _ leadingSpacing : FLOAT, _ trailingSpacing : FLOAT, _ minimumAdvance : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetCharacterSpacing(pThis, characterIndex, characterCount, leadingSpacing, trailingSpacing, minimumAdvance))
        }
    }
    public func SetCharacterSpacing(characterIndex : Swift.Int32, characterCount : Swift.Int32, leadingSpacing : Swift.Float, trailingSpacing : Swift.Float, minimumAdvance : Swift.Float) throws -> Void {
        try self._n_SetCharacterSpacing(characterIndex, characterCount, leadingSpacing, trailingSpacing, minimumAdvance);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation()
    private func _n_get_VerticalGlyphOrientation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalGlyphOrientation(pThis, __presult))
        }
    }
    public func get_VerticalGlyphOrientation() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default;
        try self._n_get_VerticalGlyphOrientation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalGlyphOrientation(Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation)
    private func _n_put_VerticalGlyphOrientation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalGlyphOrientation(pThis, value))
        }
    }
    public func put_VerticalGlyphOrientation(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation) throws -> Void {
        try self._n_put_VerticalGlyphOrientation(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment get_OpticalAlignment()
    private func _n_get_OpticalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalAlignment(pThis, __presult))
        }
    }
    public func get_OpticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default;
        try self._n_get_OpticalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OpticalAlignment(Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment)
    private func _n_put_OpticalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalAlignment(pThis, value))
        }
    }
    public func put_OpticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment) throws -> Void {
        try self._n_put_OpticalAlignment(value);
    }
    // [IsSpecialName] bool get_LastLineWrapping()
    private func _n_get_LastLineWrapping(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastLineWrapping(pThis, __presult))
        }
    }
    public func get_LastLineWrapping() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_LastLineWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LastLineWrapping(bool)
    private func _n_put_LastLineWrapping(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastLineWrapping(pThis, value))
        }
    }
    public func put_LastLineWrapping(value : boolean) throws -> Void {
        try self._n_put_LastLineWrapping(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.CanvasDevice get_Device()
    private func _n_get_Device(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, __presult))
        }
    }
    public func get_Device() throws -> Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasDevice>> = nil;
        try self._n_get_Device(&__result);
        return Microsoft.Graphics.Canvas.ICanvasDevice(consuming: __result);
    }
    public var ClusterMetrics : UINT32 {
        get throws {
            return try get_ClusterMetrics();
        }
    }
    public var CustomTrimmingSign : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        get throws {
            return try get_CustomTrimmingSign();
        }
    }
    public var DefaultFontFamily : Swift.String {
        get throws {
            return try get_DefaultFontFamily();
        }
    }
    public var DefaultFontSize : Swift.Float {
        get throws {
            return try get_DefaultFontSize();
        }
    }
    public var DefaultFontStretch : Windows.UI.Text.FontStretch {
        get throws {
            return try get_DefaultFontStretch();
        }
    }
    public var DefaultFontStyle : Windows.UI.Text.FontStyle {
        get throws {
            return try get_DefaultFontStyle();
        }
    }
    public var DefaultFontWeight : Windows.UI.Text.FontWeight {
        get throws {
            return try get_DefaultFontWeight();
        }
    }
    public var DefaultLocaleName : Swift.String {
        get throws {
            return try get_DefaultLocaleName();
        }
    }
    public var Device : Optional<Microsoft.Graphics.Canvas.ICanvasDevice> {
        get throws {
            return try get_Device();
        }
    }
    public var Direction : Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        get throws {
            return try get_Direction();
        }
    }
    public var DrawBounds : Windows.Foundation.Rect {
        get throws {
            return try get_DrawBounds();
        }
    }
    public var HorizontalAlignment : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        get throws {
            return try get_HorizontalAlignment();
        }
    }
    public var IncrementalTabStop : Swift.Float {
        get throws {
            return try get_IncrementalTabStop();
        }
    }
    public var LastLineWrapping : boolean {
        get throws {
            return try get_LastLineWrapping();
        }
    }
    public var LayoutBounds : Windows.Foundation.Rect {
        get throws {
            return try get_LayoutBounds();
        }
    }
    public var LayoutBoundsIncludingTrailingWhitespace : Windows.Foundation.Rect {
        get throws {
            return try get_LayoutBoundsIncludingTrailingWhitespace();
        }
    }
    public var LineCount : Swift.Int32 {
        get throws {
            return try get_LineCount();
        }
    }
    public var LineMetrics : UINT32 {
        get throws {
            return try get_LineMetrics();
        }
    }
    public var LineSpacing : Swift.Float {
        get throws {
            return try get_LineSpacing();
        }
    }
    public var LineSpacingBaseline : Swift.Float {
        get throws {
            return try get_LineSpacingBaseline();
        }
    }
    public var LineSpacingMode : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        get throws {
            return try get_LineSpacingMode();
        }
    }
    public var MaximumBidiReorderingDepth : Swift.Int32 {
        get throws {
            return try get_MaximumBidiReorderingDepth();
        }
    }
    public var OpticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        get throws {
            return try get_OpticalAlignment();
        }
    }
    public var Options : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        get throws {
            return try get_Options();
        }
    }
    public var RequestedSize : Windows.Foundation.Size {
        get throws {
            return try get_RequestedSize();
        }
    }
    public var TrimmingDelimiter : Swift.String {
        get throws {
            return try get_TrimmingDelimiter();
        }
    }
    public var TrimmingDelimiterCount : Swift.Int32 {
        get throws {
            return try get_TrimmingDelimiterCount();
        }
    }
    public var TrimmingGranularity : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        get throws {
            return try get_TrimmingGranularity();
        }
    }
    public var TrimmingSign : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        get throws {
            return try get_TrimmingSign();
        }
    }
    public var VerticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        get throws {
            return try get_VerticalAlignment();
        }
    }
    public var VerticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        get throws {
            return try get_VerticalGlyphOrientation();
        }
    }
    public var WordWrapping : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        get throws {
            return try get_WordWrapping();
        }
    }
} // ICanvasTextLayout


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasTextLayoutFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9c1f7179, Data2: 0xacd0, Data3 : 0x4680, Data4 : (0x93, 0xd5, 0x95, 0xa6, 0x24, 0x7e, 0x8f, 0x6b)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextLayout Create(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.String, Microsoft.Graphics.Canvas.Text.CanvasTextFormat, System.Single, System.Single)
    private func _n_Create(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ textString : Optional<HSTRING>, _ textFormat : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>, _ requestedWidth : FLOAT, _ requestedHeight : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, resourceCreator, textString, textFormat, requestedWidth, requestedHeight, __presult))
        }
    }
    public func Create(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, textString : Optional<Swift.String>, textFormat : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>, requestedWidth : Swift.Float, requestedHeight : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextLayout> {
        let __hstr_textString = try HString(textString!);
        return try withExtendedLifetime(__hstr_textString) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>> = nil;
        try self._n_Create(RawPointer(resourceCreator), __hstr_textString.Raw(), RawPointer(textFormat), requestedWidth, requestedHeight, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextLayout(consuming: __result);
        }
    }
} // ICanvasTextLayoutFactory


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics
// interface type
open class ICanvasTextLayoutStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7f2b8ffd, Data2: 0x6935, Data3 : 0x4f60, Data4 : (0xb4, 0x09, 0x63, 0x94, 0xa1, 0x9c, 0x5e, 0xbc)) }
    // Windows.Foundation.Numerics.Matrix3x2 GetGlyphOrientationTransform(Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation, bool, Windows.Foundation.Numerics.Vector2)
    private func _n_GetGlyphOrientationTransform(_ glyphOrientation : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation, _ isSideways : boolean, _ position : _q_CWindows_CFoundation_CNumerics_CVector2, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CMatrix3x2>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphOrientationTransform(pThis, glyphOrientation, isSideways, position, __presult))
        }
    }
    public func GetGlyphOrientationTransform(glyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation, isSideways : boolean, position : Windows.Foundation.Numerics.Vector2) throws -> Windows.Foundation.Numerics.Matrix3x2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CMatrix3x2 = _q_CWindows_CFoundation_CNumerics_CMatrix3x2(M11: 0, M12: 0, M21: 0, M22: 0, M31: 0, M32: 0);
        try self._n_GetGlyphOrientationTransform(glyphOrientation, isSideways, position, &__result);
        return __result;
    }
} // ICanvasTextLayoutStatics


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer
// interface type
open class ICanvasTextRenderer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9aaeece5, Data2: 0x8d09, Data3 : 0x4a64, Data4 : (0xb3, 0x22, 0xaf, 0x03, 0x04, 0x21, 0xb2, 0xe4)) }
// method not needed: DrawGlyphRun
// method not needed: DrawStrikethrough
// method not needed: DrawUnderline
// method not needed: DrawInlineObject
// method not needed: get_PixelSnappingDisabled
// method not needed: get_Transform
// method not needed: get_Dpi
} // ICanvasTextRenderer


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters
// interface type
open class ICanvasTextRenderingParameters
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb20bf738, Data2: 0xedb9, Data3 : 0x4eec, Data4 : (0xa1, 0x2f, 0xb6, 0xae, 0x32, 0xe8, 0xac, 0xe6)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode get_RenderingMode()
    private func _n_get_RenderingMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderingMode(pThis, __presult))
        }
    }
    public func get_RenderingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default;
        try self._n_get_RenderingMode(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextGridFit get_GridFit()
    private func _n_get_GridFit(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GridFit(pThis, __presult))
        }
    }
    public func get_GridFit() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default;
        try self._n_get_GridFit(&__result);
        return __result;
    }
    public var GridFit : Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
        get throws {
            return try get_GridFit();
        }
    }
    public var RenderingMode : Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
        get throws {
            return try get_RenderingMode();
        }
    }
} // ICanvasTextRenderingParameters


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasTextRenderingParametersFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd240ac25, Data2: 0x4d23, Data3 : 0x4964, Data4 : (0x9d, 0x9a, 0xdb, 0x2f, 0xc8, 0xaf, 0x18, 0x5d)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters Create(Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, Microsoft.Graphics.Canvas.Text.CanvasTextGridFit)
    private func _n_Create(_ textRenderingMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode, _ gridFit : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, textRenderingMode, gridFit, __presult))
        }
    }
    public func Create(textRenderingMode : Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, gridFit : Microsoft.Graphics.Canvas.Text.CanvasTextGridFit) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>> = nil;
        try self._n_Create(textRenderingMode, gridFit, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters(consuming: __result);
    }
} // ICanvasTextRenderingParametersFactory


// type: Microsoft.Graphics.Canvas.Text.ICanvasTypography
// interface type
open class ICanvasTypography
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf15bc312, Data2: 0x447f, Data3 : 0x44ed, Data4 : (0x8b, 0xec, 0x7e, 0x40, 0xf4, 0xa4, 0xdf, 0xc8)) }
    // void AddFeature(Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature)
    private func _n_AddFeature(_ feature : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddFeature(pThis, feature))
        }
    }
    public func AddFeature(feature : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature) throws -> Void {
        try self._n_AddFeature(feature);
    }
    // void AddFeature(Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, System.UInt32)
    private func _n_AddFeatureWithNameAndParameter(_ name : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName, _ parameter : UINT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddFeatureWithNameAndParameter(pThis, name, parameter))
        }
    }
    public func AddFeatureWithNameAndParameter(name : Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName, parameter : Swift.UInt32) throws -> Void {
        try self._n_AddFeatureWithNameAndParameter(name, parameter);
    }
    // Microsoft.Graphics.Canvas.Text.CanvasTypographyFeature[] GetFeatures()
    private func _n_GetFeatures(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetFeatures(pThis, __presultLength, __presult))
        }
    }
    public func GetFeatures() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature>> = nil;
        try self._n_GetFeatures(&__resultLength, &__result);
        return __resultLength;
    }
} // ICanvasTypography


}
extension Microsoft.Graphics.Canvas.Text.CanvasClusterProperties {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_None;
        }
    }
    public static var CanWrapLineAfter : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_CanWrapLineAfter;
        }
    }
    public static var Whitespace : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_Whitespace;
        }
    }
    public static var Newline : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_Newline;
        }
    }
    public static var SoftHyphen : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_SoftHyphen;
        }
    }
    public static var RightToLeft : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterProperties_RightToLeft;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default;
        }
    }
    public static var NoPixelSnap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_NoPixelSnap;
        }
    }
    public static var Clip : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Clip;
        }
    }
    public static var EnableColorFont : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_EnableColorFont;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasFontFileFormatType {
    public static var Cff : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Cff;
        }
    }
    public static var TrueType : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_TrueType;
        }
    }
    public static var TrueTypeCollection : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_TrueTypeCollection;
        }
    }
    public static var Type1 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Type1;
        }
    }
    public static var Vector : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Vector;
        }
    }
    public static var Bitmap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Bitmap;
        }
    }
    public static var Unknown : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_Unknown;
        }
    }
    public static var RawCff : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType_RawCff;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasFontInformation {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_None;
        }
    }
    public static var CopyrightNotice : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_CopyrightNotice;
        }
    }
    public static var VersionStrings : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_VersionStrings;
        }
    }
    public static var Trademark : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Trademark;
        }
    }
    public static var Manufacturer : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Manufacturer;
        }
    }
    public static var Designer : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Designer;
        }
    }
    public static var DesignerUrl : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_DesignerUrl;
        }
    }
    public static var Description : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Description;
        }
    }
    public static var FontVendorUrl : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_FontVendorUrl;
        }
    }
    public static var LicenseDescription : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_LicenseDescription;
        }
    }
    public static var LicenseInfoUrl : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_LicenseInfoUrl;
        }
    }
    public static var Win32FamilyNames : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Win32FamilyNames;
        }
    }
    public static var Win32SubfamilyNames : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_Win32SubfamilyNames;
        }
    }
    public static var PreferredFamilyNames : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PreferredFamilyNames;
        }
    }
    public static var PreferredSubfamilyNames : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PreferredSubfamilyNames;
        }
    }
    public static var SampleText : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_SampleText;
        }
    }
    public static var FullName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_FullName;
        }
    }
    public static var PostscriptName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PostscriptName;
        }
    }
    public static var PostscriptCidName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_PostscriptCidName;
        }
    }
    public static var WwsFamilyName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_WwsFamilyName;
        }
    }
    public static var DesignScriptLanguageTag : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_DesignScriptLanguageTag;
        }
    }
    public static var SupportedScriptLanguageTag : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontInformation_SupportedScriptLanguageTag;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasFontPropertyIdentifier {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_None;
        }
    }
    public static var FamilyName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_FamilyName;
        }
    }
    public static var PreferredFamilyName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_PreferredFamilyName;
        }
    }
    public static var FaceName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_FaceName;
        }
    }
    public static var FullName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_FullName;
        }
    }
    public static var Win32FamilyName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_Win32FamilyName;
        }
    }
    public static var PostscriptName : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_PostscriptName;
        }
    }
    public static var DesignScriptLanguageTag : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_DesignScriptLanguageTag;
        }
    }
    public static var SupportedScriptLanguageTag : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_SupportedScriptLanguageTag;
        }
    }
    public static var SemanticTag : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_SemanticTag;
        }
    }
    public static var Weight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_Weight;
        }
    }
    public static var Stretch : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_Stretch;
        }
    }
    public static var Style : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_Style;
        }
    }
    public static var Total : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontPropertyIdentifier_Total;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasFontSimulations {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations_None;
        }
    }
    public static var Bold : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations_Bold;
        }
    }
    public static var Oblique : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations_Oblique;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasGlyphJustification {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_None;
        }
    }
    public static var ArabicBlank : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicBlank;
        }
    }
    public static var Character : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_Character;
        }
    }
    public static var Blank : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_Blank;
        }
    }
    public static var ArabicNormal : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicNormal;
        }
    }
    public static var ArabicKashida : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicKashida;
        }
    }
    public static var ArabicAlef : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicAlef;
        }
    }
    public static var ArabicHa : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicHa;
        }
    }
    public static var ArabicRa : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicRa;
        }
    }
    public static var ArabicBa : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicBa;
        }
    }
    public static var ArabicBara : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicBara;
        }
    }
    public static var ArabicSeen : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicSeen;
        }
    }
    public static var ArabicSeenM : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphJustification_ArabicSeenM;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasGlyphOrientation {
    public static var Upright : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Upright;
        }
    }
    public static var Clockwise90Degrees : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Clockwise90Degrees;
        }
    }
    public static var Clockwise180Degrees : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Clockwise180Degrees;
        }
    }
    public static var Clockwise270Degrees : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphOrientation_Clockwise270Degrees;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
    public static var Left : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left;
        }
    }
    public static var Right : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Right;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Center;
        }
    }
    public static var Justified : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Justified;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasLineBreakCondition {
    public static var Neutral : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_Neutral;
        }
    }
    public static var CanBreak : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_CanBreak;
        }
    }
    public static var CannotBreak : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_CannotBreak;
        }
    }
    public static var MustBreak : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition_MustBreak;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default;
        }
    }
    public static var Uniform : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Uniform;
        }
    }
    public static var Proportional : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Proportional;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitutionMethod {
    public static var FromCulture : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod_FromCulture;
        }
    }
    public static var Contextual : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod_Contextual;
        }
    }
    public static var Disabled : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod_Disabled;
        }
    }
    public static var National : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod_National;
        }
    }
    public static var Traditional : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasNumberSubstitutionMethod_Traditional;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default;
        }
    }
    public static var NoSideBearings : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_NoSideBearings;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasScriptShape {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape_Default;
        }
    }
    public static var NoVisual : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptShape_NoVisual;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing {
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Auto;
        }
    }
    public static var ClearType : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_ClearType;
        }
    }
    public static var Grayscale : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Grayscale;
        }
    }
    public static var Aliased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Aliased;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
    public static var LeftToRightThenTopToBottom : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom;
        }
    }
    public static var RightToLeftThenTopToBottom : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenTopToBottom;
        }
    }
    public static var LeftToRightThenBottomToTop : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenBottomToTop;
        }
    }
    public static var RightToLeftThenBottomToTop : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenBottomToTop;
        }
    }
    public static var TopToBottomThenLeftToRight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenLeftToRight;
        }
    }
    public static var BottomToTopThenLeftToRight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenLeftToRight;
        }
    }
    public static var TopToBottomThenRightToLeft : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenRightToLeft;
        }
    }
    public static var BottomToTopThenRightToLeft : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenRightToLeft;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default;
        }
    }
    public static var Disable : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Disable;
        }
    }
    public static var Enable : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Enable;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode {
    public static var Natural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_Natural;
        }
    }
    public static var GdiClassic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiClassic;
        }
    }
    public static var GdiNatural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiNatural;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default;
        }
    }
    public static var Aliased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Aliased;
        }
    }
    public static var GdiClassic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiClassic;
        }
    }
    public static var GdiNatural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiNatural;
        }
    }
    public static var Natural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Natural;
        }
    }
    public static var NaturalSymmetric : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetric;
        }
    }
    public static var Outline : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Outline;
        }
    }
    public static var NaturalSymmetricDownsampled : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetricDownsampled;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None;
        }
    }
    public static var Character : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Character;
        }
    }
    public static var Word : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Word;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None;
        }
    }
    public static var Ellipsis : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_Ellipsis;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTypographyFeatureName {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_None;
        }
    }
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Default;
        }
    }
    public static var VerticalWriting : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_VerticalWriting;
        }
    }
    public static var VerticalAlternatesAndRotation : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_VerticalAlternatesAndRotation;
        }
    }
    public static var AlternativeFractions : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_AlternativeFractions;
        }
    }
    public static var PetiteCapitalsFromCapitals : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_PetiteCapitalsFromCapitals;
        }
    }
    public static var SmallCapitalsFromCapitals : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SmallCapitalsFromCapitals;
        }
    }
    public static var ContextualAlternates : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ContextualAlternates;
        }
    }
    public static var CaseSensitiveForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_CaseSensitiveForms;
        }
    }
    public static var GlyphCompositionDecomposition : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_GlyphCompositionDecomposition;
        }
    }
    public static var ContextualLigatures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ContextualLigatures;
        }
    }
    public static var CapitalSpacing : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_CapitalSpacing;
        }
    }
    public static var ContextualSwash : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ContextualSwash;
        }
    }
    public static var CursivePositioning : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_CursivePositioning;
        }
    }
    public static var DiscretionaryLigatures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_DiscretionaryLigatures;
        }
    }
    public static var ExpertForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ExpertForms;
        }
    }
    public static var Fractions : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Fractions;
        }
    }
    public static var FullWidth : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_FullWidth;
        }
    }
    public static var HalfForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HalfForms;
        }
    }
    public static var HalantForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HalantForms;
        }
    }
    public static var AlternateHalfWidth : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_AlternateHalfWidth;
        }
    }
    public static var HistoricalForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HistoricalForms;
        }
    }
    public static var HorizontalKanaAlternates : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HorizontalKanaAlternates;
        }
    }
    public static var HistoricalLigatures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HistoricalLigatures;
        }
    }
    public static var HalfWidth : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HalfWidth;
        }
    }
    public static var HojoKanjiForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_HojoKanjiForms;
        }
    }
    public static var Jis04Forms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis04Forms;
        }
    }
    public static var Jis78Forms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis78Forms;
        }
    }
    public static var Jis83Forms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis83Forms;
        }
    }
    public static var Jis90Forms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Jis90Forms;
        }
    }
    public static var Kerning : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Kerning;
        }
    }
    public static var StandardLigatures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StandardLigatures;
        }
    }
    public static var LiningFigures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_LiningFigures;
        }
    }
    public static var LocalizedForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_LocalizedForms;
        }
    }
    public static var MarkPositioning : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_MarkPositioning;
        }
    }
    public static var MathematicalGreek : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_MathematicalGreek;
        }
    }
    public static var MarkToMarkPositioning : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_MarkToMarkPositioning;
        }
    }
    public static var AlternateAnnotationForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_AlternateAnnotationForms;
        }
    }
    public static var NlcKanjiForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_NlcKanjiForms;
        }
    }
    public static var OldStyleFigures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_OldStyleFigures;
        }
    }
    public static var Ordinals : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Ordinals;
        }
    }
    public static var ProportionalAlternateWidth : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ProportionalAlternateWidth;
        }
    }
    public static var PetiteCapitals : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_PetiteCapitals;
        }
    }
    public static var ProportionalFigures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ProportionalFigures;
        }
    }
    public static var ProportionalWidths : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ProportionalWidths;
        }
    }
    public static var QuarterWidths : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_QuarterWidths;
        }
    }
    public static var RequiredLigatures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_RequiredLigatures;
        }
    }
    public static var RubyNotationForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_RubyNotationForms;
        }
    }
    public static var StylisticAlternates : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticAlternates;
        }
    }
    public static var ScientificInferiors : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ScientificInferiors;
        }
    }
    public static var SmallCapitals : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SmallCapitals;
        }
    }
    public static var SimplifiedForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SimplifiedForms;
        }
    }
    public static var StylisticSet1 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet1;
        }
    }
    public static var StylisticSet2 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet2;
        }
    }
    public static var StylisticSet3 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet3;
        }
    }
    public static var StylisticSet4 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet4;
        }
    }
    public static var StylisticSet5 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet5;
        }
    }
    public static var StylisticSet6 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet6;
        }
    }
    public static var StylisticSet7 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet7;
        }
    }
    public static var StylisticSet8 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet8;
        }
    }
    public static var StylisticSet9 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet9;
        }
    }
    public static var StylisticSet10 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet10;
        }
    }
    public static var StylisticSet11 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet11;
        }
    }
    public static var StylisticSet12 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet12;
        }
    }
    public static var StylisticSet13 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet13;
        }
    }
    public static var StylisticSet14 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet14;
        }
    }
    public static var StylisticSet15 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet15;
        }
    }
    public static var StylisticSet16 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet16;
        }
    }
    public static var StylisticSet17 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet17;
        }
    }
    public static var StylisticSet18 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet18;
        }
    }
    public static var StylisticSet19 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet19;
        }
    }
    public static var StylisticSet20 : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_StylisticSet20;
        }
    }
    public static var Subscript : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Subscript;
        }
    }
    public static var Superscript : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Superscript;
        }
    }
    public static var Swash : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Swash;
        }
    }
    public static var Titling : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Titling;
        }
    }
    public static var TraditionalNameForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_TraditionalNameForms;
        }
    }
    public static var TabularFigures : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_TabularFigures;
        }
    }
    public static var TraditionalForms : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_TraditionalForms;
        }
    }
    public static var ThirdWidths : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_ThirdWidths;
        }
    }
    public static var Unicase : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_Unicase;
        }
    }
    public static var SlashedZero : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName_SlashedZero;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
    public static var Top : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top;
        }
    }
    public static var Bottom : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Bottom;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Center;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default;
        }
    }
    public static var Stacked : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Stacked;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
    public static var Wrap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap;
        }
    }
    public static var NoWrap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_NoWrap;
        }
    }
    public static var EmergencyBreak : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_EmergencyBreak;
        }
    }
    public static var WholeWord : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_WholeWord;
        }
    }
    public static var Character : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Character;
        }
    }
}
