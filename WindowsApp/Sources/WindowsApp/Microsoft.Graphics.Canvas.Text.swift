// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
import CWindowsApp;
@_spi(IUnknown) import WinRT;

extension Microsoft.Graphics.Canvas.Text {
// type: Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions
// enum type
public typealias CanvasDrawTextOptions = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions;

// type: Microsoft.Graphics.Canvas.Text.CanvasFontFace
// runtime class
public class CanvasFontFace
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasFontFace;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasFontFace?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasFontFace { return _self; }
    // method not needed: GetRecommendedRenderingMode
    // method not needed: GetRecommendedRenderingMode
    // method not needed: GetRecommendedGridFit
    // method not needed: get_GlyphBox
    // method not needed: get_SubscriptPosition
    // method not needed: get_SubscriptSize
    // method not needed: get_SuperscriptPosition
    // method not needed: get_SuperscriptSize
    // method not needed: get_HasTypographicMetrics
    // method not needed: get_Ascent
    // method not needed: get_Descent
    // method not needed: get_LineGap
    // method not needed: get_CapHeight
    // method not needed: get_LowercaseLetterHeight
    // method not needed: get_UnderlinePosition
    // method not needed: get_UnderlineThickness
    // method not needed: get_StrikethroughPosition
    // method not needed: get_StrikethroughThickness
    // method not needed: get_CaretSlopeRise
    // method not needed: get_CaretSlopeRun
    // method not needed: get_CaretOffset
    // method not needed: get_UnicodeRanges
    // method not needed: get_IsMonospaced
    // method not needed: GetVerticalGlyphVariants
    // method not needed: get_HasVerticalGlyphVariants
    // method not needed: get_FileFormatType
    // method not needed: get_Simulations
    // method not needed: get_IsSymbolFont
    // method not needed: get_GlyphCount
    // method not needed: GetGlyphIndices
    // method not needed: GetGlyphMetrics
    // method not needed: GetGdiCompatibleGlyphMetrics
    // method not needed: get_Weight
    // method not needed: get_Stretch
    // method not needed: get_Style
    // method not needed: get_FamilyNames
    // method not needed: get_FaceNames
    // method not needed: GetInformationalStrings
    // method not needed: HasCharacter
    // method not needed: GetGlyphRunBounds
    // method not needed: GetGlyphRunBounds
    // method not needed: get_Panose
    // method not needed: GetSupportedTypographicFeatureNames
    // method not needed: GetSupportedTypographicFeatureNames
    // method not needed: GetTypographicFeatureGlyphSupport
    // method not needed: GetTypographicFeatureGlyphSupport
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasGlyph
// struct type
public typealias CanvasGlyph = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph;

// type: Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment
// enum type
public typealias CanvasHorizontalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment;

// type: Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode
// enum type
public typealias CanvasLineSpacingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment
// enum type
public typealias CanvasOpticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing
// enum type
public typealias CanvasTextAntialiasing = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextDirection
// enum type
public typealias CanvasTextDirection = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextFormat
// runtime class
public class CanvasTextFormat
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTextFormat?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTextFormat { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.Graphics.Canvas.Text.CanvasTextFormat")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ICanvasTextFormatStatics {
        static var x : ICanvasTextFormatStatics =
            try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextFormat")
    }
    public static var CanvasTextFormatStatics : ICanvasTextFormatStatics {
        _ICanvasTextFormatStatics.x
    }
    public static func GetSystemFontFamilies() throws -> UINT32 {
        return try CanvasTextFormatStatics.GetSystemFontFamilies();
    }
    public static func GetSystemFontFamilies(localeList : Optional<ClosedGenerics.IVectorView_1_HSTRING>) throws -> UINT32 {
        return try CanvasTextFormatStatics.GetSystemFontFamiliesFromLocaleList(localeList: localeList);
    }
    public func get_Direction() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_Direction();
    }
    public func put_Direction(value : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_Direction(value: value);
    }
    public func get_FontFamily() throws -> Swift.String {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontFamily();
    }
    public func put_FontFamily(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontFamily(value: value);
    }
    public func get_FontSize() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontSize();
    }
    public func put_FontSize(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontSize(value: value);
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontStretch();
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontStretch(value: value);
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontStyle();
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontStyle(value: value);
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_FontWeight();
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_FontWeight(value: value);
    }
    public func get_IncrementalTabStop() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_IncrementalTabStop();
    }
    public func put_IncrementalTabStop(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_IncrementalTabStop(value: value);
    }
    public func get_LineSpacing() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LineSpacing();
    }
    public func put_LineSpacing(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LineSpacing(value: value);
    }
    public func get_LineSpacingBaseline() throws -> Swift.Float {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LineSpacingBaseline();
    }
    public func put_LineSpacingBaseline(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LineSpacingBaseline(value: value);
    }
    public func get_LocaleName() throws -> Swift.String {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LocaleName();
    }
    public func put_LocaleName(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LocaleName(value: value);
    }
    public func get_VerticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_VerticalAlignment();
    }
    public func put_VerticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_VerticalAlignment(value: value);
    }
    public func get_HorizontalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_HorizontalAlignment();
    }
    public func put_HorizontalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_HorizontalAlignment(value: value);
    }
    public func get_TrimmingGranularity() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingGranularity();
    }
    public func put_TrimmingGranularity(value : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingGranularity(value: value);
    }
    public func get_TrimmingDelimiter() throws -> Swift.String {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingDelimiter();
    }
    public func put_TrimmingDelimiter(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingDelimiter(value: value);
    }
    public func get_TrimmingDelimiterCount() throws -> Swift.Int32 {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingDelimiterCount();
    }
    public func put_TrimmingDelimiterCount(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingDelimiterCount(value: value);
    }
    public func get_WordWrapping() throws -> Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_WordWrapping();
    }
    public func put_WordWrapping(value : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_WordWrapping(value: value);
    }
    public func get_Options() throws -> Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_Options();
    }
    public func put_Options(value : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_Options(value: value);
    }
    public func get_VerticalGlyphOrientation() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_VerticalGlyphOrientation();
    }
    public func put_VerticalGlyphOrientation(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_VerticalGlyphOrientation(value: value);
    }
    public func get_OpticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_OpticalAlignment();
    }
    public func put_OpticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_OpticalAlignment(value: value);
    }
    public func get_LastLineWrapping() throws -> boolean {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LastLineWrapping();
    }
    public func put_LastLineWrapping(value : boolean) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LastLineWrapping(value: value);
    }
    public func get_LineSpacingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_LineSpacingMode();
    }
    public func put_LineSpacingMode(value : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_LineSpacingMode(value: value);
    }
    public func get_TrimmingSign() throws -> Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_TrimmingSign();
    }
    public func put_TrimmingSign(value : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_TrimmingSign(value: value);
    }
    public func get_CustomTrimmingSign() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.get_CustomTrimmingSign();
    }
    public func put_CustomTrimmingSign(value : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
        return try _ifc.put_CustomTrimmingSign(value: value);
    }
    public var CustomTrimmingSign : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.CustomTrimmingSign;
        }
    }
    public var Direction : Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.Direction;
        }
    }
    public var FontFamily : Swift.String {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.FontFamily;
        }
    }
    public var FontSize : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.FontSize;
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.FontStretch;
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.FontStyle;
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.FontWeight;
        }
    }
    public var HorizontalAlignment : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.HorizontalAlignment;
        }
    }
    public var IncrementalTabStop : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.IncrementalTabStop;
        }
    }
    public var LastLineWrapping : boolean {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.LastLineWrapping;
        }
    }
    public var LineSpacing : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.LineSpacing;
        }
    }
    public var LineSpacingBaseline : Swift.Float {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.LineSpacingBaseline;
        }
    }
    public var LineSpacingMode : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.LineSpacingMode;
        }
    }
    public var LocaleName : Swift.String {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.LocaleName;
        }
    }
    public var OpticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.OpticalAlignment;
        }
    }
    public var Options : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.Options;
        }
    }
    public var TrimmingDelimiter : Swift.String {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.TrimmingDelimiter;
        }
    }
    public var TrimmingDelimiterCount : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.TrimmingDelimiterCount;
        }
    }
    public var TrimmingGranularity : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.TrimmingGranularity;
        }
    }
    public var TrimmingSign : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.TrimmingSign;
        }
    }
    public var VerticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.VerticalAlignment;
        }
    }
    public var VerticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.VerticalGlyphOrientation;
        }
    }
    public var WordWrapping : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        get throws {
        let _ifc : Microsoft.Graphics.Canvas.Text.ICanvasTextFormat = try _self.QueryInterface();
            return try _ifc.WordWrapping;
        }
    }
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextGridFit
// enum type
public typealias CanvasTextGridFit = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextLayout
// runtime class
public class CanvasTextLayout
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTextLayout;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTextLayout?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTextLayout { return _self; }
    public init(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, textString : Swift.String, textFormat : Optional<Microsoft.Graphics.Canvas.Text.CanvasTextFormat>, requestedWidth : Swift.Float, requestedHeight : Swift.Float) throws {
        let _af : ICanvasTextLayoutFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextLayout");
        _self = try _af.Create(resourceCreator: resourceCreator, textString: textString, textFormat: textFormat!.Interface(), requestedWidth: requestedWidth, requestedHeight: requestedHeight)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutStatics
    // method not needed: GetFormatChangeIndices
    // method not needed: get_Direction
    // method not needed: put_Direction
    // method not needed: get_DefaultFontFamily
    // method not needed: get_DefaultFontSize
    // method not needed: get_DefaultFontStretch
    // method not needed: get_DefaultFontStyle
    // method not needed: get_DefaultFontWeight
    // method not needed: get_IncrementalTabStop
    // method not needed: put_IncrementalTabStop
    // method not needed: get_LineSpacing
    // method not needed: put_LineSpacing
    // method not needed: get_LineSpacingBaseline
    // method not needed: put_LineSpacingBaseline
    // method not needed: get_DefaultLocaleName
    // method not needed: get_VerticalAlignment
    // method not needed: put_VerticalAlignment
    // method not needed: get_HorizontalAlignment
    // method not needed: put_HorizontalAlignment
    // method not needed: get_TrimmingGranularity
    // method not needed: put_TrimmingGranularity
    // method not needed: get_TrimmingDelimiter
    // method not needed: put_TrimmingDelimiter
    // method not needed: get_TrimmingDelimiterCount
    // method not needed: put_TrimmingDelimiterCount
    // method not needed: get_WordWrapping
    // method not needed: put_WordWrapping
    // method not needed: get_Options
    // method not needed: put_Options
    // method not needed: get_LineSpacingMode
    // method not needed: put_LineSpacingMode
    // method not needed: get_TrimmingSign
    // method not needed: put_TrimmingSign
    // method not needed: get_CustomTrimmingSign
    // method not needed: put_CustomTrimmingSign
    // method not needed: get_RequestedSize
    // method not needed: put_RequestedSize
    // method not needed: GetMinimumLineLength
    // method not needed: GetBrush
    // method not needed: GetCustomBrush
    // method not needed: GetFontFamily
    // method not needed: GetFontSize
    // method not needed: GetFontStretch
    // method not needed: GetFontStyle
    // method not needed: GetFontWeight
    // method not needed: GetLocaleName
    // method not needed: GetStrikethrough
    // method not needed: GetUnderline
    // method not needed: GetInlineObject
    // method not needed: SetColor
    // method not needed: SetBrush
    // method not needed: SetCustomBrush
    // method not needed: SetFontFamily
    // method not needed: SetFontSize
    // method not needed: SetFontStretch
    // method not needed: SetFontStyle
    // method not needed: SetFontWeight
    // method not needed: SetLocaleName
    // method not needed: SetStrikethrough
    // method not needed: SetUnderline
    // method not needed: SetInlineObject
    // method not needed: DrawToTextRenderer
    // method not needed: DrawToTextRenderer
    // method not needed: get_LineMetrics
    // method not needed: get_ClusterMetrics
    // method not needed: SetTypography
    // method not needed: GetTypography
    // method not needed: get_LayoutBounds
    // method not needed: get_LayoutBoundsIncludingTrailingWhitespace
    // method not needed: get_LineCount
    // method not needed: get_MaximumBidiReorderingDepth
    // method not needed: get_DrawBounds
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: HitTest
    // method not needed: GetCaretPosition
    // method not needed: GetCaretPosition
    // method not needed: GetCharacterRegions
    // method not needed: GetPairKerning
    // method not needed: SetPairKerning
    // method not needed: GetLeadingCharacterSpacing
    // method not needed: GetTrailingCharacterSpacing
    // method not needed: GetMinimumCharacterAdvance
    // method not needed: SetCharacterSpacing
    // method not needed: get_VerticalGlyphOrientation
    // method not needed: put_VerticalGlyphOrientation
    // method not needed: get_OpticalAlignment
    // method not needed: put_OpticalAlignment
    // method not needed: get_LastLineWrapping
    // method not needed: put_LastLineWrapping
    // method not needed: get_Device
    public func Close() throws -> Void {
        let _ifc : Windows.Foundation.IClosable = try _self.QueryInterface();
        return try _ifc.Close();
    }
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode
// enum type
public typealias CanvasTextMeasuringMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode
// enum type
public typealias CanvasTextRenderingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode;

// type: Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters
// runtime class
public class CanvasTextRenderingParameters
    :
    WinRT.Object
{
    private var _self : Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters;
    public init(plok: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters { return _self; }
    public init(textRenderingMode : Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, gridFit : Microsoft.Graphics.Canvas.Text.CanvasTextGridFit) throws {
        let _af : ICanvasTextRenderingParametersFactory = try RoGetActivationFactory("Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters");
        _self = try _af.Create(textRenderingMode: textRenderingMode, gridFit: gridFit)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_RenderingMode
    // method not needed: get_GridFit
}

// type: Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity
// enum type
public typealias CanvasTextTrimmingGranularity = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity;

// type: Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign
// enum type
public typealias CanvasTrimmingSign = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign;

// type: Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment
// enum type
public typealias CanvasVerticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment;

// type: Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation
// enum type
public typealias CanvasVerticalGlyphOrientation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation;

// type: Microsoft.Graphics.Canvas.Text.CanvasWordWrapping
// enum type
public typealias CanvasWordWrapping = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping;

// type: Microsoft.Graphics.Canvas.Text.ICanvasFontFace
// interface type
open class ICanvasFontFace
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5199d129, Data2: 0x4ef9, Data3 : 0x4dee, Data4 : (0xb7, 0x4c, 0x4d, 0xc9, 0x10, 0x20, 0x1a, 0x7f)) }
// method not needed: GetRecommendedRenderingMode
// method not needed: GetRecommendedRenderingModeWithAllOptions
// method not needed: GetRecommendedGridFit
// method not needed: get_GlyphBox
// method not needed: get_SubscriptPosition
// method not needed: get_SubscriptSize
// method not needed: get_SuperscriptPosition
// method not needed: get_SuperscriptSize
// method not needed: get_HasTypographicMetrics
// method not needed: get_Ascent
// method not needed: get_Descent
// method not needed: get_LineGap
// method not needed: get_CapHeight
// method not needed: get_LowercaseLetterHeight
// method not needed: get_UnderlinePosition
// method not needed: get_UnderlineThickness
// method not needed: get_StrikethroughPosition
// method not needed: get_StrikethroughThickness
// method not needed: get_CaretSlopeRise
// method not needed: get_CaretSlopeRun
// method not needed: get_CaretOffset
// method not needed: get_UnicodeRanges
// method not needed: get_IsMonospaced
// method not needed: GetVerticalGlyphVariants
// method not needed: get_HasVerticalGlyphVariants
// method not needed: get_FileFormatType
// method not needed: get_Simulations
// method not needed: get_IsSymbolFont
// method not needed: get_GlyphCount
// method not needed: GetGlyphIndices
// method not needed: GetGlyphMetrics
// method not needed: GetGdiCompatibleGlyphMetrics
// method not needed: get_Weight
// method not needed: get_Stretch
// method not needed: get_Style
// method not needed: get_FamilyNames
// method not needed: get_FaceNames
// method not needed: GetInformationalStrings
// method not needed: HasCharacter
// method not needed: GetGlyphRunBounds
// method not needed: GetGlyphRunBoundsWithMeasuringMode
// method not needed: get_Panose
// method not needed: GetSupportedTypographicFeatureNames
// method not needed: GetSupportedTypographicFeatureNamesWithLocale
// method not needed: GetTypographicFeatureGlyphSupport
// method not needed: GetTypographicFeatureGlyphSupportWithLocale
} // ICanvasFontFace


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextFormat
// interface type
open class ICanvasTextFormat
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaf61bfdc, Data2: 0xeabb, Data3 : 0x4d38, Data4 : (0xba, 0x1b, 0xaf, 0xb3, 0x40, 0x61, 0x2d, 0x33)) }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextDirection get_Direction()
    private func _n_get_Direction(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, __presult))
        }
    }
    public func get_Direction() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom;
        try self._n_get_Direction(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Direction(Microsoft.Graphics.Canvas.Text.CanvasTextDirection)
    private func _n_put_Direction(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, value))
        }
    }
    public func put_Direction(value : Microsoft.Graphics.Canvas.Text.CanvasTextDirection) throws -> Void {
        try self._n_put_Direction(value);
    }
    // [IsSpecialName] System.String get_FontFamily()
    private func _n_get_FontFamily(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, __presult))
        }
    }
    public func get_FontFamily() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FontFamily(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_FontFamily(System.String)
    private func _n_put_FontFamily(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, value))
        }
    }
    public func put_FontFamily(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_FontFamily(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.Single get_FontSize()
    private func _n_get_FontSize(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, __presult))
        }
    }
    public func get_FontSize() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_FontSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontSize(System.Single)
    private func _n_put_FontSize(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
        }
    }
    public func put_FontSize(value : Swift.Float) throws -> Void {
        try self._n_put_FontSize(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_FontStretch()
    private func _n_get_FontStretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, __presult))
        }
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_FontStretch(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStretch(Windows.UI.Text.FontStretch)
    private func _n_put_FontStretch(_ value : _q_CWindows_CUI_CText_CFontStretch) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
        }
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        try self._n_put_FontStretch(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_FontStyle()
    private func _n_get_FontStyle(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, __presult))
        }
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_FontStyle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStyle(Windows.UI.Text.FontStyle)
    private func _n_put_FontStyle(_ value : _q_CWindows_CUI_CText_CFontStyle) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
        }
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        try self._n_put_FontStyle(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_FontWeight()
    private func _n_get_FontWeight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, __presult))
        }
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_FontWeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontWeight(Windows.UI.Text.FontWeight)
    private func _n_put_FontWeight(_ value : _q_CWindows_CUI_CText_CFontWeight) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, value))
        }
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        try self._n_put_FontWeight(value);
    }
    // [IsSpecialName] System.Single get_IncrementalTabStop()
    private func _n_get_IncrementalTabStop(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalTabStop(pThis, __presult))
        }
    }
    public func get_IncrementalTabStop() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_IncrementalTabStop(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IncrementalTabStop(System.Single)
    private func _n_put_IncrementalTabStop(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalTabStop(pThis, value))
        }
    }
    public func put_IncrementalTabStop(value : Swift.Float) throws -> Void {
        try self._n_put_IncrementalTabStop(value);
    }
    // [IsSpecialName] System.Single get_LineSpacing()
    private func _n_get_LineSpacing(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, __presult))
        }
    }
    public func get_LineSpacing() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LineSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacing(System.Single)
    private func _n_put_LineSpacing(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacing(pThis, value))
        }
    }
    public func put_LineSpacing(value : Swift.Float) throws -> Void {
        try self._n_put_LineSpacing(value);
    }
    // [IsSpecialName] System.Single get_LineSpacingBaseline()
    private func _n_get_LineSpacingBaseline(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingBaseline(pThis, __presult))
        }
    }
    public func get_LineSpacingBaseline() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_LineSpacingBaseline(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacingBaseline(System.Single)
    private func _n_put_LineSpacingBaseline(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingBaseline(pThis, value))
        }
    }
    public func put_LineSpacingBaseline(value : Swift.Float) throws -> Void {
        try self._n_put_LineSpacingBaseline(value);
    }
    // [IsSpecialName] System.String get_LocaleName()
    private func _n_get_LocaleName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocaleName(pThis, __presult))
        }
    }
    public func get_LocaleName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_LocaleName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_LocaleName(System.String)
    private func _n_put_LocaleName(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LocaleName(pThis, value))
        }
    }
    public func put_LocaleName(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_LocaleName(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment get_VerticalAlignment()
    private func _n_get_VerticalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, __presult))
        }
    }
    public func get_VerticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top;
        try self._n_get_VerticalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalAlignment(Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment)
    private func _n_put_VerticalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
        }
    }
    public func put_VerticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment) throws -> Void {
        try self._n_put_VerticalAlignment(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment get_HorizontalAlignment()
    private func _n_get_HorizontalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left;
        try self._n_get_HorizontalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalAlignment(Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment)
    private func _n_put_HorizontalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
        }
    }
    public func put_HorizontalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment) throws -> Void {
        try self._n_put_HorizontalAlignment(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity get_TrimmingGranularity()
    private func _n_get_TrimmingGranularity(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingGranularity(pThis, __presult))
        }
    }
    public func get_TrimmingGranularity() throws -> Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None;
        try self._n_get_TrimmingGranularity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingGranularity(Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity)
    private func _n_put_TrimmingGranularity(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingGranularity(pThis, value))
        }
    }
    public func put_TrimmingGranularity(value : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity) throws -> Void {
        try self._n_put_TrimmingGranularity(value);
    }
    // [IsSpecialName] System.String get_TrimmingDelimiter()
    private func _n_get_TrimmingDelimiter(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiter(pThis, __presult))
        }
    }
    public func get_TrimmingDelimiter() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_TrimmingDelimiter(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_TrimmingDelimiter(System.String)
    private func _n_put_TrimmingDelimiter(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiter(pThis, value))
        }
    }
    public func put_TrimmingDelimiter(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_TrimmingDelimiter(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.Int32 get_TrimmingDelimiterCount()
    private func _n_get_TrimmingDelimiterCount(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiterCount(pThis, __presult))
        }
    }
    public func get_TrimmingDelimiterCount() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_TrimmingDelimiterCount(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingDelimiterCount(System.Int32)
    private func _n_put_TrimmingDelimiterCount(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiterCount(pThis, value))
        }
    }
    public func put_TrimmingDelimiterCount(value : Swift.Int32) throws -> Void {
        try self._n_put_TrimmingDelimiterCount(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasWordWrapping get_WordWrapping()
    private func _n_get_WordWrapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WordWrapping(pThis, __presult))
        }
    }
    public func get_WordWrapping() throws -> Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap;
        try self._n_get_WordWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_WordWrapping(Microsoft.Graphics.Canvas.Text.CanvasWordWrapping)
    private func _n_put_WordWrapping(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_WordWrapping(pThis, value))
        }
    }
    public func put_WordWrapping(value : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping) throws -> Void {
        try self._n_put_WordWrapping(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions get_Options()
    private func _n_get_Options(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, __presult))
        }
    }
    public func get_Options() throws -> Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default;
        try self._n_get_Options(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Options(Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions)
    private func _n_put_Options(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
        }
    }
    public func put_Options(value : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions) throws -> Void {
        try self._n_put_Options(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation get_VerticalGlyphOrientation()
    private func _n_get_VerticalGlyphOrientation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalGlyphOrientation(pThis, __presult))
        }
    }
    public func get_VerticalGlyphOrientation() throws -> Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default;
        try self._n_get_VerticalGlyphOrientation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalGlyphOrientation(Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation)
    private func _n_put_VerticalGlyphOrientation(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalGlyphOrientation(pThis, value))
        }
    }
    public func put_VerticalGlyphOrientation(value : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation) throws -> Void {
        try self._n_put_VerticalGlyphOrientation(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment get_OpticalAlignment()
    private func _n_get_OpticalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalAlignment(pThis, __presult))
        }
    }
    public func get_OpticalAlignment() throws -> Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default;
        try self._n_get_OpticalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OpticalAlignment(Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment)
    private func _n_put_OpticalAlignment(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalAlignment(pThis, value))
        }
    }
    public func put_OpticalAlignment(value : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment) throws -> Void {
        try self._n_put_OpticalAlignment(value);
    }
    // [IsSpecialName] bool get_LastLineWrapping()
    private func _n_get_LastLineWrapping(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastLineWrapping(pThis, __presult))
        }
    }
    public func get_LastLineWrapping() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_LastLineWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LastLineWrapping(bool)
    private func _n_put_LastLineWrapping(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastLineWrapping(pThis, value))
        }
    }
    public func put_LastLineWrapping(value : boolean) throws -> Void {
        try self._n_put_LastLineWrapping(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode get_LineSpacingMode()
    private func _n_get_LineSpacingMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingMode(pThis, __presult))
        }
    }
    public func get_LineSpacingMode() throws -> Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default;
        try self._n_get_LineSpacingMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineSpacingMode(Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode)
    private func _n_put_LineSpacingMode(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingMode(pThis, value))
        }
    }
    public func put_LineSpacingMode(value : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode) throws -> Void {
        try self._n_put_LineSpacingMode(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign get_TrimmingSign()
    private func _n_get_TrimmingSign(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingSign(pThis, __presult))
        }
    }
    public func get_TrimmingSign() throws -> Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        var __result : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign = _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None;
        try self._n_get_TrimmingSign(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TrimmingSign(Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign)
    private func _n_put_TrimmingSign(_ value : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingSign(pThis, value))
        }
    }
    public func put_TrimmingSign(value : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign) throws -> Void {
        try self._n_put_TrimmingSign(value);
    }
    // [IsSpecialName] Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject get_CustomTrimmingSign()
    private func _n_get_CustomTrimmingSign(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomTrimmingSign(pThis, __presult))
        }
    }
    public func get_CustomTrimmingSign() throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>> = nil;
        try self._n_get_CustomTrimmingSign(&__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject(consuming: __result);
    }
    // [IsSpecialName] void put_CustomTrimmingSign(Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject)
    private func _n_put_CustomTrimmingSign(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject>>) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomTrimmingSign(pThis, value))
        }
    }
    public func put_CustomTrimmingSign(value : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject>) throws -> Void {
        try self._n_put_CustomTrimmingSign(RawPointer(value));
    }
    public var CustomTrimmingSign : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject> {
        get throws {
            return try get_CustomTrimmingSign();
        }
    }
    public var Direction : Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
        get throws {
            return try get_Direction();
        }
    }
    public var FontFamily : Swift.String {
        get throws {
            return try get_FontFamily();
        }
    }
    public var FontSize : Swift.Float {
        get throws {
            return try get_FontSize();
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
            return try get_FontStretch();
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
            return try get_FontStyle();
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
            return try get_FontWeight();
        }
    }
    public var HorizontalAlignment : Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
        get throws {
            return try get_HorizontalAlignment();
        }
    }
    public var IncrementalTabStop : Swift.Float {
        get throws {
            return try get_IncrementalTabStop();
        }
    }
    public var LastLineWrapping : boolean {
        get throws {
            return try get_LastLineWrapping();
        }
    }
    public var LineSpacing : Swift.Float {
        get throws {
            return try get_LineSpacing();
        }
    }
    public var LineSpacingBaseline : Swift.Float {
        get throws {
            return try get_LineSpacingBaseline();
        }
    }
    public var LineSpacingMode : Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
        get throws {
            return try get_LineSpacingMode();
        }
    }
    public var LocaleName : Swift.String {
        get throws {
            return try get_LocaleName();
        }
    }
    public var OpticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
        get throws {
            return try get_OpticalAlignment();
        }
    }
    public var Options : Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
        get throws {
            return try get_Options();
        }
    }
    public var TrimmingDelimiter : Swift.String {
        get throws {
            return try get_TrimmingDelimiter();
        }
    }
    public var TrimmingDelimiterCount : Swift.Int32 {
        get throws {
            return try get_TrimmingDelimiterCount();
        }
    }
    public var TrimmingGranularity : Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
        get throws {
            return try get_TrimmingGranularity();
        }
    }
    public var TrimmingSign : Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
        get throws {
            return try get_TrimmingSign();
        }
    }
    public var VerticalAlignment : Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
        get throws {
            return try get_VerticalAlignment();
        }
    }
    public var VerticalGlyphOrientation : Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
        get throws {
            return try get_VerticalGlyphOrientation();
        }
    }
    public var WordWrapping : Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
        get throws {
            return try get_WordWrapping();
        }
    }
} // ICanvasTextFormat


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextFormatStatics
// interface type
open class ICanvasTextFormatStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8a927515, Data2: 0x33fc, Data3 : 0x4c92, Data4 : (0xa6, 0xaa, 0x94, 0xa8, 0xf2, 0x9c, 0x14, 0x0b)) }
    // System.String[] GetSystemFontFamilies()
    private func _n_GetSystemFontFamilies(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<Optional<HSTRING>>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontFamilies(pThis, __presultLength, __presult))
        }
    }
    public func GetSystemFontFamilies() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<Optional<HSTRING>>> = nil;
        try self._n_GetSystemFontFamilies(&__resultLength, &__result);
        return __resultLength;
    }
    // System.String[] GetSystemFontFamilies(Windows.Foundation.Collections.IVectorView<System.String>)
    private func _n_GetSystemFontFamiliesFromLocaleList(_ localeList : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1_HSTRING>>, _ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<Optional<HSTRING>>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontFamiliesFromLocaleList(pThis, localeList, __presultLength, __presult))
        }
    }
    public func GetSystemFontFamiliesFromLocaleList(localeList : Optional<ClosedGenerics.IVectorView_1_HSTRING>) throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<Optional<HSTRING>>> = nil;
        try self._n_GetSystemFontFamiliesFromLocaleList(RawPointer(localeList), &__resultLength, &__result);
        return __resultLength;
    }
} // ICanvasTextFormatStatics


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject
// interface type
open class ICanvasTextInlineObject
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7a89ee99, Data2: 0xce2a, Data3 : 0x47fa, Data4 : (0x9d, 0xd2, 0x0a, 0x68, 0x25, 0xf6, 0x05, 0x3f)) }
// method not needed: Draw
// method not needed: get_Size
// method not needed: get_Baseline
// method not needed: get_SupportsSideways
// method not needed: get_DrawBounds
// method not needed: get_BreakBefore
// method not needed: get_BreakAfter
} // ICanvasTextInlineObject


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextLayout
// interface type
open class ICanvasTextLayout
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbae63e54, Data2: 0x48ae, Data3 : 0x4446, Data4 : (0xa2, 0xc7, 0xb6, 0xef, 0x93, 0x80, 0x6c, 0x20)) }
// method not needed: GetFormatChangeIndices
// method not needed: get_Direction
// method not needed: put_Direction
// method not needed: get_DefaultFontFamily
// method not needed: get_DefaultFontSize
// method not needed: get_DefaultFontStretch
// method not needed: get_DefaultFontStyle
// method not needed: get_DefaultFontWeight
// method not needed: get_IncrementalTabStop
// method not needed: put_IncrementalTabStop
// method not needed: get_LineSpacing
// method not needed: put_LineSpacing
// method not needed: get_LineSpacingBaseline
// method not needed: put_LineSpacingBaseline
// method not needed: get_DefaultLocaleName
// method not needed: get_VerticalAlignment
// method not needed: put_VerticalAlignment
// method not needed: get_HorizontalAlignment
// method not needed: put_HorizontalAlignment
// method not needed: get_TrimmingGranularity
// method not needed: put_TrimmingGranularity
// method not needed: get_TrimmingDelimiter
// method not needed: put_TrimmingDelimiter
// method not needed: get_TrimmingDelimiterCount
// method not needed: put_TrimmingDelimiterCount
// method not needed: get_WordWrapping
// method not needed: put_WordWrapping
// method not needed: get_Options
// method not needed: put_Options
// method not needed: get_LineSpacingMode
// method not needed: put_LineSpacingMode
// method not needed: get_TrimmingSign
// method not needed: put_TrimmingSign
// method not needed: get_CustomTrimmingSign
// method not needed: put_CustomTrimmingSign
// method not needed: get_RequestedSize
// method not needed: put_RequestedSize
// method not needed: GetMinimumLineLength
// method not needed: GetBrush
// method not needed: GetCustomBrush
// method not needed: GetFontFamily
// method not needed: GetFontSize
// method not needed: GetFontStretch
// method not needed: GetFontStyle
// method not needed: GetFontWeight
// method not needed: GetLocaleName
// method not needed: GetStrikethrough
// method not needed: GetUnderline
// method not needed: GetInlineObject
// method not needed: SetColor
// method not needed: SetBrush
// method not needed: SetCustomBrush
// method not needed: SetFontFamily
// method not needed: SetFontSize
// method not needed: SetFontStretch
// method not needed: SetFontStyle
// method not needed: SetFontWeight
// method not needed: SetLocaleName
// method not needed: SetStrikethrough
// method not needed: SetUnderline
// method not needed: SetInlineObject
// method not needed: DrawToTextRenderer
// method not needed: DrawToTextRendererWithCoords
// method not needed: get_LineMetrics
// method not needed: get_ClusterMetrics
// method not needed: SetTypography
// method not needed: GetTypography
// method not needed: get_LayoutBounds
// method not needed: get_LayoutBoundsIncludingTrailingWhitespace
// method not needed: get_LineCount
// method not needed: get_MaximumBidiReorderingDepth
// method not needed: get_DrawBounds
// method not needed: HitTest
// method not needed: HitTestWithCoords
// method not needed: HitTestWithDescription
// method not needed: HitTestWithDescriptionAndCoords
// method not needed: HitTestWithDescriptionAndTrailingSide
// method not needed: HitTestWithDescriptionAndCoordsAndTrailingSide
// method not needed: GetCaretPosition
// method not needed: GetCaretPositionWithDescription
// method not needed: GetCharacterRegions
// method not needed: GetPairKerning
// method not needed: SetPairKerning
// method not needed: GetLeadingCharacterSpacing
// method not needed: GetTrailingCharacterSpacing
// method not needed: GetMinimumCharacterAdvance
// method not needed: SetCharacterSpacing
// method not needed: get_VerticalGlyphOrientation
// method not needed: put_VerticalGlyphOrientation
// method not needed: get_OpticalAlignment
// method not needed: put_OpticalAlignment
// method not needed: get_LastLineWrapping
// method not needed: put_LastLineWrapping
// method not needed: get_Device
} // ICanvasTextLayout


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextLayoutFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasTextLayoutFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9c1f7179, Data2: 0xacd0, Data3 : 0x4680, Data4 : (0x93, 0xd5, 0x95, 0xa6, 0x24, 0x7e, 0x8f, 0x6b)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextLayout Create(Microsoft.Graphics.Canvas.ICanvasResourceCreator, System.String, Microsoft.Graphics.Canvas.Text.CanvasTextFormat, System.Single, System.Single)
    private func _n_Create(_ resourceCreator : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CICanvasResourceCreator>>, _ textString : Optional<HSTRING>, _ textFormat : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat>>, _ requestedWidth : FLOAT, _ requestedHeight : FLOAT, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, resourceCreator, textString, textFormat, requestedWidth, requestedHeight, __presult))
        }
    }
    public func Create(resourceCreator : Optional<Microsoft.Graphics.Canvas.ICanvasResourceCreator>, textString : Swift.String, textFormat : Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextFormat>, requestedWidth : Swift.Float, requestedHeight : Swift.Float) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextLayout> {
        let __hstr_textString = try HString(textString);
        return try withExtendedLifetime(__hstr_textString) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout>> = nil;
        try self._n_Create(RawPointer(resourceCreator), __hstr_textString.Raw(), RawPointer(textFormat), requestedWidth, requestedHeight, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextLayout(consuming: __result);
        }
    }
} // ICanvasTextLayoutFactory


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters
// interface type
open class ICanvasTextRenderingParameters
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb20bf738, Data2: 0xedb9, Data3 : 0x4eec, Data4 : (0xa1, 0x2f, 0xb6, 0xae, 0x32, 0xe8, 0xac, 0xe6)) }
// method not needed: get_RenderingMode
// method not needed: get_GridFit
} // ICanvasTextRenderingParameters


// type: Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParametersFactory
// interface type
// ACTIVATION INTERFACE
open class ICanvasTextRenderingParametersFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd240ac25, Data2: 0x4d23, Data3 : 0x4964, Data4 : (0x9d, 0x9a, 0xdb, 0x2f, 0xc8, 0xaf, 0x18, 0x5d)) }
    // Microsoft.Graphics.Canvas.Text.CanvasTextRenderingParameters Create(Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, Microsoft.Graphics.Canvas.Text.CanvasTextGridFit)
    private func _n_Create(_ textRenderingMode : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode, _ gridFit : _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>>>?) throws {
        return try perform(as: _q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, textRenderingMode, gridFit, __presult))
        }
    }
    public func Create(textRenderingMode : Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode, gridFit : Microsoft.Graphics.Canvas.Text.CanvasTextGridFit) throws -> Optional<Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters>> = nil;
        try self._n_Create(textRenderingMode, gridFit, &__result);
        return Microsoft.Graphics.Canvas.Text.ICanvasTextRenderingParameters(consuming: __result);
    }
} // ICanvasTextRenderingParametersFactory


}
extension Microsoft.Graphics.Canvas.Text.CanvasDrawTextOptions {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Default;
        }
    }
    public static var NoPixelSnap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_NoPixelSnap;
        }
    }
    public static var Clip : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_Clip;
        }
    }
    public static var EnableColorFont : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions_EnableColorFont;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasHorizontalAlignment {
    public static var Left : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Left;
        }
    }
    public static var Right : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Right;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Center;
        }
    }
    public static var Justified : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment_Justified;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasLineSpacingMode {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Default;
        }
    }
    public static var Uniform : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Uniform;
        }
    }
    public static var Proportional : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode_Proportional;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasOpticalAlignment {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_Default;
        }
    }
    public static var NoSideBearings : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment_NoSideBearings;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextAntialiasing {
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Auto;
        }
    }
    public static var ClearType : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_ClearType;
        }
    }
    public static var Grayscale : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Grayscale;
        }
    }
    public static var Aliased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextAntialiasing_Aliased;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextDirection {
    public static var LeftToRightThenTopToBottom : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenTopToBottom;
        }
    }
    public static var RightToLeftThenTopToBottom : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenTopToBottom;
        }
    }
    public static var LeftToRightThenBottomToTop : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_LeftToRightThenBottomToTop;
        }
    }
    public static var RightToLeftThenBottomToTop : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_RightToLeftThenBottomToTop;
        }
    }
    public static var TopToBottomThenLeftToRight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenLeftToRight;
        }
    }
    public static var BottomToTopThenLeftToRight : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenLeftToRight;
        }
    }
    public static var TopToBottomThenRightToLeft : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_TopToBottomThenRightToLeft;
        }
    }
    public static var BottomToTopThenRightToLeft : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection_BottomToTopThenRightToLeft;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextGridFit {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Default;
        }
    }
    public static var Disable : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Disable;
        }
    }
    public static var Enable : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit_Enable;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextMeasuringMode {
    public static var Natural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_Natural;
        }
    }
    public static var GdiClassic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiClassic;
        }
    }
    public static var GdiNatural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextMeasuringMode_GdiNatural;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextRenderingMode {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Default;
        }
    }
    public static var Aliased : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Aliased;
        }
    }
    public static var GdiClassic : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiClassic;
        }
    }
    public static var GdiNatural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_GdiNatural;
        }
    }
    public static var Natural : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Natural;
        }
    }
    public static var NaturalSymmetric : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetric;
        }
    }
    public static var Outline : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_Outline;
        }
    }
    public static var NaturalSymmetricDownsampled : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode_NaturalSymmetricDownsampled;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTextTrimmingGranularity {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_None;
        }
    }
    public static var Character : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Character;
        }
    }
    public static var Word : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity_Word;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasTrimmingSign {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_None;
        }
    }
    public static var Ellipsis : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign_Ellipsis;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasVerticalAlignment {
    public static var Top : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Top;
        }
    }
    public static var Bottom : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Bottom;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment_Center;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasVerticalGlyphOrientation {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Default;
        }
    }
    public static var Stacked : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation_Stacked;
        }
    }
}
extension Microsoft.Graphics.Canvas.Text.CanvasWordWrapping {
    public static var Wrap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Wrap;
        }
    }
    public static var NoWrap : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_NoWrap;
        }
    }
    public static var EmergencyBreak : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_EmergencyBreak;
        }
    }
    public static var WholeWord : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_WholeWord;
        }
    }
    public static var Character : Self {
        get {
            return _q_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping_Character;
        }
    }
}
