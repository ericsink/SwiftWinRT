// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
import CWindowsSdk;
@_spi(IUnknown) import WinRT;
import WindowsSdk;

extension Microsoft.UI.Xaml.Controls {
// type: Microsoft.UI.Xaml.Controls.BackgroundSizing
// enum type
public typealias BackgroundSizing = _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing;

// type: Microsoft.UI.Xaml.Controls.Button
// runtime class
open class Button
    :
    Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
{
    private var _self : Microsoft.UI.Xaml.Controls.IButton;
    public init(plok: Microsoft.UI.Xaml.Controls.IButton?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IButton { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IButtonFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IButtonFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Button");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IButtonStatics {
        static var x : IButtonStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Button")
    }
    public static var ButtonStatics : IButtonStatics {
        _IButtonStatics.x
    }
    public static func get_FlyoutProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonStatics.get_FlyoutProperty());
    }
    public static var FlyoutProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ButtonStatics.FlyoutProperty);
        }
    }
    public func get_Flyout() throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        let _ifc : Microsoft.UI.Xaml.Controls.IButton = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.get_Flyout());
    }
    public func put_Flyout(value : Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IButton = try _self.QueryInterface();
        return try _ifc.put_Flyout(value: value!.Interface());
    }
    public var Flyout : Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IButton = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.Flyout);
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.ClickMode
// enum type
public typealias ClickMode = _q_CMicrosoft_CUI_CXaml_CControls_CClickMode;

// type: Microsoft.UI.Xaml.Controls.ColumnDefinition
// runtime class
public class ColumnDefinition
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Controls.IColumnDefinition;
    public init(plok: Microsoft.UI.Xaml.Controls.IColumnDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IColumnDefinition { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Controls.ColumnDefinition")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Controls.IColumnDefinitionStatics
    // method not needed: get_Width
    // method not needed: put_Width
    // method not needed: get_MaxWidth
    // method not needed: put_MaxWidth
    // method not needed: get_MinWidth
    // method not needed: put_MinWidth
    // method not needed: get_ActualWidth
}

// type: Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection
// runtime class
public class ColumnDefinitionCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition { return _self; }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ColumnDefinition(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIColumnDefinition>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Microsoft.UI.Xaml.Controls.ColumnDefinition, Microsoft, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.Controls.ContentControl
// runtime class
open class ContentControl
    :
    Microsoft.UI.Xaml.Controls.Control
{
    private var _self : Microsoft.UI.Xaml.Controls.IContentControl;
    private class Container {
        public var self_ref: ContentControl? = nil
    }
    private struct WithTrailingObjects_IContentControlOverrides {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides
        public var container: Unmanaged<Container>
    }
    private var instance: Optional<UnsafeMutablePointer<WithTrailingObjects_IContentControlOverrides>>
    private var _inner: Optional<WinRT.IInspectable> = nil
    private static func from_IContentControlOverrides(_ pUnk: UnsafeMutableRawPointer?) -> ContentControl? {
        return pUnk?.bindMemory(to: ContentControl.WithTrailingObjects_IContentControlOverrides.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    public init(plok: Microsoft.UI.Xaml.Controls.IContentControl?) throws {
        _self = plok!
        self.instance = nil
        try super.init(plok: _self.QueryInterface())
        let instance = UnsafeMutablePointer<WithTrailingObjects_IContentControlOverrides>.allocate(capacity: 1)
        instance.pointee = WithTrailingObjects_IContentControlOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides(lpVtbl: &Self.vtable_IContentControlOverrides), container: Unmanaged<Container>.passRetained(Container()))
        self.instance = instance
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IContentControl { return _self; }
    private static var vtable_IContentControlOverrides: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.Controls.IContentControlOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ContentControl.WithTrailingObjects_IContentControlOverrides.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ContentControl.WithTrailingObjects_IContentControlOverrides.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 1
        var mem = CoTaskMemAlloc(16).bindMemory(to: IID.self, capacity: 1)
        (mem + 0).pointee = Microsoft.UI.Xaml.Controls.IContentControlOverrides.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.Controls.IContentControlOverrides").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    OnContentChanged: {
        (pThis, _ oldContent : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ newContent : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = ContentControl.from_IContentControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnContentChanged(oldContent: WinRT.Object(plok: WinRT.IInspectable(oldContent)), newContent: WinRT.Object(plok: WinRT.IInspectable(newContent)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnContentTemplateChanged: {
        (pThis, _ oldContentTemplate : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>, _ newContentTemplate : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>) in
        guard let self = ContentControl.from_IContentControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnContentTemplateChanged(oldContentTemplate: Microsoft.UI.Xaml.DataTemplate(plok: Microsoft.UI.Xaml.IDataTemplate(oldContentTemplate)), newContentTemplate: Microsoft.UI.Xaml.DataTemplate(plok: Microsoft.UI.Xaml.IDataTemplate(newContentTemplate)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnContentTemplateSelectorChanged: {
        (pThis, _ oldContentTemplateSelector : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>>, _ newContentTemplateSelector : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>>) in
        guard let self = ContentControl.from_IContentControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnContentTemplateSelectorChanged(oldContentTemplateSelector: Microsoft.UI.Xaml.Controls.DataTemplateSelector(plok: Microsoft.UI.Xaml.Controls.IDataTemplateSelector(oldContentTemplateSelector)), newContentTemplateSelector: Microsoft.UI.Xaml.Controls.DataTemplateSelector(plok: Microsoft.UI.Xaml.Controls.IDataTemplateSelector(newContentTemplateSelector)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IContentControlFactory
    public override init() throws {
        let instance = UnsafeMutablePointer<WithTrailingObjects_IContentControlOverrides>.allocate(capacity: 1)
        self.instance = instance
        instance.pointee = WithTrailingObjects_IContentControlOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides(lpVtbl: &Self.vtable_IContentControlOverrides), container: Unmanaged<Container>.passRetained(Container()))
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IContentControlFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentControl");
        let baseInterface = WinRT.IInspectable(UnsafeMutableRawPointer(instance))
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        _inner = _inn;
        try super.init(plok: _self.QueryInterface())
        instance.pointee.container.takeUnretainedValue().self_ref = self
    }
    private struct _IContentControlStatics {
        static var x : IContentControlStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.ContentControl")
    }
    public static var ContentControlStatics : IContentControlStatics {
        _IContentControlStatics.x
    }
    public static func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.get_ContentProperty());
    }
    public static func get_ContentTemplateProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.get_ContentTemplateProperty());
    }
    public static func get_ContentTemplateSelectorProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.get_ContentTemplateSelectorProperty());
    }
    public static func get_ContentTransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.get_ContentTransitionsProperty());
    }
    public static var ContentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.ContentProperty);
        }
    }
    public static var ContentTemplateProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.ContentTemplateProperty);
        }
    }
    public static var ContentTemplateSelectorProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.ContentTemplateSelectorProperty);
        }
    }
    public static var ContentTransitionsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ContentControlStatics.ContentTransitionsProperty);
        }
    }
    public func get_Content() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try _ifc.get_Content();
    }
    public func put_Content(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try _ifc.put_Content(value: value!.GetInterface());
    }
    public func get_ContentTemplate() throws -> Optional<Microsoft.UI.Xaml.DataTemplate> {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DataTemplate(plok: _ifc.get_ContentTemplate());
    }
    public func put_ContentTemplate(value : Optional<Microsoft.UI.Xaml.DataTemplate>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try _ifc.put_ContentTemplate(value: value!.Interface());
    }
    public func get_ContentTemplateSelector() throws -> Optional<Microsoft.UI.Xaml.Controls.DataTemplateSelector> {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.DataTemplateSelector(plok: _ifc.get_ContentTemplateSelector());
    }
    public func put_ContentTemplateSelector(value : Optional<Microsoft.UI.Xaml.Controls.DataTemplateSelector>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try _ifc.put_ContentTemplateSelector(value: value!.Interface());
    }
    public func get_ContentTransitions() throws -> Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.get_ContentTransitions());
    }
    public func put_ContentTransitions(value : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try _ifc.put_ContentTransitions(value: value!.Interface());
    }
    public func get_ContentTemplateRoot() throws -> Optional<Microsoft.UI.Xaml.UIElement> {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.get_ContentTemplateRoot());
    }
    public var Content : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try _ifc.Content;
        }
    }
    public var ContentTemplate : Optional<Microsoft.UI.Xaml.DataTemplate> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DataTemplate(plok: _ifc.ContentTemplate);
        }
    }
    public var ContentTemplateRoot : Optional<Microsoft.UI.Xaml.UIElement> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.ContentTemplateRoot);
        }
    }
    public var ContentTemplateSelector : Optional<Microsoft.UI.Xaml.Controls.DataTemplateSelector> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.DataTemplateSelector(plok: _ifc.ContentTemplateSelector);
        }
    }
    public var ContentTransitions : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IContentControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.ContentTransitions);
        }
    }
    open func OnContentChanged(oldContent : Optional<WinRT.Object>, newContent : Optional<WinRT.Object>) throws -> Void {
    }
    open func OnContentTemplateChanged(oldContentTemplate : Optional<Microsoft.UI.Xaml.DataTemplate>, newContentTemplate : Optional<Microsoft.UI.Xaml.DataTemplate>) throws -> Void {
    }
    open func OnContentTemplateSelectorChanged(oldContentTemplateSelector : Optional<Microsoft.UI.Xaml.Controls.DataTemplateSelector>, newContentTemplateSelector : Optional<Microsoft.UI.Xaml.Controls.DataTemplateSelector>) throws -> Void {
    }
}

// type: Microsoft.UI.Xaml.Controls.ContextMenuEventArgs
// runtime class
public class ContextMenuEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Controls.IContextMenuEventArgs;
    public init(plok: Microsoft.UI.Xaml.Controls.IContextMenuEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IContextMenuEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_CursorLeft
    // method not needed: get_CursorTop
}

// type: Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler
// delegate type
open class IContextMenuOpeningEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd010ff61, Data2: 0x4067, Data3 : 0x526a, Data4 : (0x95, 0xa3, 0x51, 0x75, 0x77, 0xbc, 0x52, 0x73)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Controls.ContextMenuEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Controls.IContextMenuEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ContextMenuOpeningEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ContextMenuOpeningEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ContextMenuOpeningEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuEventArgs>>) in
        guard let self = ContextMenuOpeningEventHandler.from_ContextMenuOpeningEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Controls.ContextMenuEventArgs(plok: Microsoft.UI.Xaml.Controls.IContextMenuEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ContextMenuOpeningEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Controls.ContextMenuEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Controls.ContextMenuEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ContextMenuOpeningEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> ContextMenuOpeningEventHandler? {
        return pUnk?.bindMemory(to: ContextMenuOpeningEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Controls.ContextMenuEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_ContextMenuOpeningEventHandler
{
    private var _self : Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler;
    public init(plok: Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Controls.ContextMenuEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Controls.Control
// runtime class
open class Control
    :
    Microsoft.UI.Xaml.FrameworkElement
{
    private var _self : Microsoft.UI.Xaml.Controls.IControl;
    private class Container {
        public var self_ref: Control? = nil
    }
    private struct WithTrailingObjects_IControlOverrides {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides
        public var container: Unmanaged<Container>
    }
    private var instance: Optional<UnsafeMutablePointer<WithTrailingObjects_IControlOverrides>>
    private var _inner: Optional<WinRT.IInspectable> = nil
    private static func from_IControlOverrides(_ pUnk: UnsafeMutableRawPointer?) -> Control? {
        return pUnk?.bindMemory(to: Control.WithTrailingObjects_IControlOverrides.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    public init(plok: Microsoft.UI.Xaml.Controls.IControl?) throws {
        _self = plok!
        self.instance = nil
        try super.init(plok: _self.QueryInterface())
        let instance = UnsafeMutablePointer<WithTrailingObjects_IControlOverrides>.allocate(capacity: 1)
        instance.pointee = WithTrailingObjects_IControlOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides(lpVtbl: &Self.vtable_IControlOverrides), container: Unmanaged<Container>.passRetained(Container()))
        self.instance = instance
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IControl { return _self; }
    private static var vtable_IControlOverrides: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.Controls.IControlOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: Control.WithTrailingObjects_IControlOverrides.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: Control.WithTrailingObjects_IControlOverrides.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 1
        var mem = CoTaskMemAlloc(16).bindMemory(to: IID.self, capacity: 1)
        (mem + 0).pointee = Microsoft.UI.Xaml.Controls.IControlOverrides.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.Controls.IControlOverrides").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    OnPointerEntered: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerEntered(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPointerPressed: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerPressed(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPointerMoved: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerMoved(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPointerReleased: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerReleased(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPointerExited: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerExited(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPointerCaptureLost: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerCaptureLost(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPointerCanceled: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerCanceled(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPointerWheelChanged: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPointerWheelChanged(e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnTapped: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnTapped(e: Microsoft.UI.Xaml.Input.TappedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnDoubleTapped: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnDoubleTapped(e: Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnHolding: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnHolding(e: Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnRightTapped: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnRightTapped(e: Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnManipulationStarting: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnManipulationStarting(e: Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnManipulationInertiaStarting: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnManipulationInertiaStarting(e: Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnManipulationStarted: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnManipulationStarted(e: Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnManipulationDelta: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnManipulationDelta(e: Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnManipulationCompleted: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnManipulationCompleted(e: Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnKeyUp: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnKeyUp(e: Microsoft.UI.Xaml.Input.KeyRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnKeyDown: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnKeyDown(e: Microsoft.UI.Xaml.Input.KeyRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPreviewKeyDown: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPreviewKeyDown(e: Microsoft.UI.Xaml.Input.KeyRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnPreviewKeyUp: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnPreviewKeyUp(e: Microsoft.UI.Xaml.Input.KeyRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnGotFocus: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnGotFocus(e: Microsoft.UI.Xaml.RoutedEventArgs(plok: Microsoft.UI.Xaml.IRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnLostFocus: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnLostFocus(e: Microsoft.UI.Xaml.RoutedEventArgs(plok: Microsoft.UI.Xaml.IRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnCharacterReceived: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnCharacterReceived(e: Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnDragEnter: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnDragEnter(e: Microsoft.UI.Xaml.DragEventArgs(plok: Microsoft.UI.Xaml.IDragEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnDragLeave: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnDragLeave(e: Microsoft.UI.Xaml.DragEventArgs(plok: Microsoft.UI.Xaml.IDragEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnDragOver: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnDragOver(e: Microsoft.UI.Xaml.DragEventArgs(plok: Microsoft.UI.Xaml.IDragEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnDrop: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) in
        guard let self = Control.from_IControlOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnDrop(e: Microsoft.UI.Xaml.DragEventArgs(plok: Microsoft.UI.Xaml.IDragEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IControlFactory
    public override init() throws {
        let instance = UnsafeMutablePointer<WithTrailingObjects_IControlOverrides>.allocate(capacity: 1)
        self.instance = instance
        instance.pointee = WithTrailingObjects_IControlOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides(lpVtbl: &Self.vtable_IControlOverrides), container: Unmanaged<Container>.passRetained(Container()))
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IControlFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Control");
        let baseInterface = WinRT.IInspectable(UnsafeMutableRawPointer(instance))
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        _inner = _inn;
        try super.init(plok: _self.QueryInterface())
        instance.pointee.container.takeUnretainedValue().self_ref = self
    }
    private struct _IControlStatics {
        static var x : IControlStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Control")
    }
    public static var ControlStatics : IControlStatics {
        _IControlStatics.x
    }
    public static func get_IsFocusEngagementEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsFocusEngagementEnabledProperty());
    }
    public static func get_IsFocusEngagedProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsFocusEngagedProperty());
    }
    public static func get_RequiresPointerProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_RequiresPointerProperty());
    }
    public static func get_FontSizeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontSizeProperty());
    }
    public static func get_FontFamilyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontFamilyProperty());
    }
    public static func get_FontWeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontWeightProperty());
    }
    public static func get_FontStyleProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontStyleProperty());
    }
    public static func get_FontStretchProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_FontStretchProperty());
    }
    public static func get_CharacterSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_CharacterSpacingProperty());
    }
    public static func get_ForegroundProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_ForegroundProperty());
    }
    public static func get_IsTextScaleFactorEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsTextScaleFactorEnabledProperty());
    }
    public static func get_IsEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsEnabledProperty());
    }
    public static func get_TabNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_TabNavigationProperty());
    }
    public static func get_TemplateProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_TemplateProperty());
    }
    public static func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_PaddingProperty());
    }
    public static func get_HorizontalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_HorizontalContentAlignmentProperty());
    }
    public static func get_VerticalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_VerticalContentAlignmentProperty());
    }
    public static func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BackgroundProperty());
    }
    public static func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BackgroundSizingProperty());
    }
    public static func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BorderThicknessProperty());
    }
    public static func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_BorderBrushProperty());
    }
    public static func get_DefaultStyleKeyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_DefaultStyleKeyProperty());
    }
    public static func get_DefaultStyleResourceUriProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_DefaultStyleResourceUriProperty());
    }
    public static func get_ElementSoundModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_ElementSoundModeProperty());
    }
    public static func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_CornerRadiusProperty());
    }
    public static func get_IsTemplateFocusTargetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsTemplateFocusTargetProperty());
    }
    public static func GetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> boolean {
        return try ControlStatics.GetIsTemplateFocusTarget(element: element!.Interface());
    }
    public static func SetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : boolean) throws -> Void {
        return try ControlStatics.SetIsTemplateFocusTarget(element: element!.Interface(), value: value);
    }
    public static func get_IsTemplateKeyTipTargetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.get_IsTemplateKeyTipTargetProperty());
    }
    public static func GetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> boolean {
        return try ControlStatics.GetIsTemplateKeyTipTarget(element: element!.Interface());
    }
    public static func SetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.DependencyObject>, value : boolean) throws -> Void {
        return try ControlStatics.SetIsTemplateKeyTipTarget(element: element!.Interface(), value: value);
    }
    public static var BackgroundProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BackgroundProperty);
        }
    }
    public static var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BackgroundSizingProperty);
        }
    }
    public static var BorderBrushProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BorderBrushProperty);
        }
    }
    public static var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.BorderThicknessProperty);
        }
    }
    public static var CharacterSpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.CharacterSpacingProperty);
        }
    }
    public static var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.CornerRadiusProperty);
        }
    }
    public static var DefaultStyleKeyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.DefaultStyleKeyProperty);
        }
    }
    public static var DefaultStyleResourceUriProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.DefaultStyleResourceUriProperty);
        }
    }
    public static var ElementSoundModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.ElementSoundModeProperty);
        }
    }
    public static var FontFamilyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontFamilyProperty);
        }
    }
    public static var FontSizeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontSizeProperty);
        }
    }
    public static var FontStretchProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontStretchProperty);
        }
    }
    public static var FontStyleProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontStyleProperty);
        }
    }
    public static var FontWeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.FontWeightProperty);
        }
    }
    public static var ForegroundProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.ForegroundProperty);
        }
    }
    public static var HorizontalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.HorizontalContentAlignmentProperty);
        }
    }
    public static var IsEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsEnabledProperty);
        }
    }
    public static var IsFocusEngagedProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsFocusEngagedProperty);
        }
    }
    public static var IsFocusEngagementEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsFocusEngagementEnabledProperty);
        }
    }
    public static var IsTemplateFocusTargetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsTemplateFocusTargetProperty);
        }
    }
    public static var IsTemplateKeyTipTargetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsTemplateKeyTipTargetProperty);
        }
    }
    public static var IsTextScaleFactorEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.IsTextScaleFactorEnabledProperty);
        }
    }
    public static var PaddingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.PaddingProperty);
        }
    }
    public static var RequiresPointerProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.RequiresPointerProperty);
        }
    }
    public static var TabNavigationProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.TabNavigationProperty);
        }
    }
    public static var TemplateProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.TemplateProperty);
        }
    }
    public static var VerticalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ControlStatics.VerticalContentAlignmentProperty);
        }
    }
    public func get_IsFocusEngagementEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsFocusEngagementEnabled();
    }
    public func put_IsFocusEngagementEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsFocusEngagementEnabled(value: value);
    }
    public func get_IsFocusEngaged() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsFocusEngaged();
    }
    public func put_IsFocusEngaged(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsFocusEngaged(value: value);
    }
    public func get_RequiresPointer() throws -> Microsoft.UI.Xaml.Controls.RequiresPointer {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_RequiresPointer();
    }
    public func put_RequiresPointer(value : Microsoft.UI.Xaml.Controls.RequiresPointer) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_RequiresPointer(value: value);
    }
    public func get_FontSize() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontSize();
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontSize(value: value);
    }
    public func get_FontFamily() throws -> Optional<Microsoft.UI.Xaml.Media.FontFamily> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.get_FontFamily());
    }
    public func put_FontFamily(value : Optional<Microsoft.UI.Xaml.Media.FontFamily>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontFamily(value: value!.Interface());
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontWeight();
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontWeight(value: value);
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontStyle();
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontStyle(value: value);
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_FontStretch();
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_FontStretch(value: value);
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_CharacterSpacing();
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_CharacterSpacing(value: value);
    }
    public func get_Foreground() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Foreground());
    }
    public func put_Foreground(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Foreground(value: value!.Interface());
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsTextScaleFactorEnabled();
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsTextScaleFactorEnabled(value: value);
    }
    public func get_IsEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_IsEnabled();
    }
    public func put_IsEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_IsEnabled(value: value);
    }
    public func get_TabNavigation() throws -> Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_TabNavigation();
    }
    public func put_TabNavigation(value : Microsoft.UI.Xaml.Input.KeyboardNavigationMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_TabNavigation(value: value);
    }
    public func get_Template() throws -> Optional<Microsoft.UI.Xaml.Controls.ControlTemplate> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ControlTemplate(plok: _ifc.get_Template());
    }
    public func put_Template(value : Optional<Microsoft.UI.Xaml.Controls.ControlTemplate>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Template(value: value!.Interface());
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_Padding();
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Padding(value: value);
    }
    public func get_HorizontalContentAlignment() throws -> Microsoft.UI.Xaml.HorizontalAlignment {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_HorizontalContentAlignment();
    }
    public func put_HorizontalContentAlignment(value : Microsoft.UI.Xaml.HorizontalAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_HorizontalContentAlignment(value: value);
    }
    public func get_VerticalContentAlignment() throws -> Microsoft.UI.Xaml.VerticalAlignment {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_VerticalContentAlignment();
    }
    public func put_VerticalContentAlignment(value : Microsoft.UI.Xaml.VerticalAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_VerticalContentAlignment(value: value);
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Background());
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_Background(value: value!.Interface());
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_BackgroundSizing();
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_BackgroundSizing(value: value);
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_BorderThickness();
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_BorderThickness(value: value);
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_BorderBrush());
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_BorderBrush(value: value!.Interface());
    }
    public func get_DefaultStyleResourceUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_DefaultStyleResourceUri());
    }
    public func put_DefaultStyleResourceUri(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_DefaultStyleResourceUri(value: value!.Interface());
    }
    public func get_ElementSoundMode() throws -> Microsoft.UI.Xaml.ElementSoundMode {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_ElementSoundMode();
    }
    public func put_ElementSoundMode(value : Microsoft.UI.Xaml.ElementSoundMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_ElementSoundMode(value: value);
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.get_CornerRadius();
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.put_CornerRadius(value: value);
    }
    public func add_FocusEngaged(handler : @escaping (Optional<Microsoft.UI.Xaml.Controls.Control>, Optional<Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.add_FocusEngaged(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs(cb: handler).Interface());
    }
    public func remove_FocusEngaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.remove_FocusEngaged(token: token);
    }
    public func add_FocusDisengaged(handler : @escaping (Optional<Microsoft.UI.Xaml.Controls.Control>, Optional<Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.add_FocusDisengaged(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs(cb: handler).Interface());
    }
    public func remove_FocusDisengaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.remove_FocusDisengaged(token: token);
    }
    public func add_IsEnabledChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.add_IsEnabledChanged(handler: Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler(cb: handler).Interface());
    }
    public func remove_IsEnabledChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.remove_IsEnabledChanged(token: token);
    }
    public func RemoveFocusEngagement() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.RemoveFocusEngagement();
    }
    public func ApplyTemplate() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.ApplyTemplate();
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Background);
        }
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.BackgroundSizing;
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.BorderBrush);
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.BorderThickness;
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.CharacterSpacing;
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.CornerRadius;
        }
    }
    public var DefaultStyleResourceUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.DefaultStyleResourceUri);
        }
    }
    public var ElementSoundMode : Microsoft.UI.Xaml.ElementSoundMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.ElementSoundMode;
        }
    }
    public var FontFamily : Optional<Microsoft.UI.Xaml.Media.FontFamily> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.FontFamily);
        }
    }
    public var FontSize : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontSize;
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontStretch;
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontStyle;
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.FontWeight;
        }
    }
    public var Foreground : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Foreground);
        }
    }
    public var HorizontalContentAlignment : Microsoft.UI.Xaml.HorizontalAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.HorizontalContentAlignment;
        }
    }
    public var IsEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsEnabled;
        }
    }
    public var IsFocusEngaged : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsFocusEngaged;
        }
    }
    public var IsFocusEngagementEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsFocusEngagementEnabled;
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.IsTextScaleFactorEnabled;
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.Padding;
        }
    }
    public var RequiresPointer : Microsoft.UI.Xaml.Controls.RequiresPointer {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.RequiresPointer;
        }
    }
    public var TabNavigation : Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.TabNavigation;
        }
    }
    public var Template : Optional<Microsoft.UI.Xaml.Controls.ControlTemplate> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ControlTemplate(plok: _ifc.Template);
        }
    }
    public var VerticalContentAlignment : Microsoft.UI.Xaml.VerticalAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControl = try _self.QueryInterface();
        return try _ifc.VerticalContentAlignment;
        }
    }
    public func get_DefaultStyleKey() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try _ifc.get_DefaultStyleKey();
    }
    public func put_DefaultStyleKey(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try _ifc.put_DefaultStyleKey(value: value!.GetInterface());
    }
    public func GetTemplateChild(childName : Swift.String) throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.GetTemplateChild(childName: childName));
    }
    public var DefaultStyleKey : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IControlProtected = try _self.QueryInterface();
        return try _ifc.DefaultStyleKey;
        }
    }
    open func OnPointerEntered(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnPointerPressed(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnPointerMoved(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnPointerReleased(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnPointerExited(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnPointerCaptureLost(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnPointerCanceled(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnPointerWheelChanged(e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
    }
    open func OnTapped(e : Optional<Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>) throws -> Void {
    }
    open func OnDoubleTapped(e : Optional<Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>) throws -> Void {
    }
    open func OnHolding(e : Optional<Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>) throws -> Void {
    }
    open func OnRightTapped(e : Optional<Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>) throws -> Void {
    }
    open func OnManipulationStarting(e : Optional<Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>) throws -> Void {
    }
    open func OnManipulationInertiaStarting(e : Optional<Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>) throws -> Void {
    }
    open func OnManipulationStarted(e : Optional<Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>) throws -> Void {
    }
    open func OnManipulationDelta(e : Optional<Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>) throws -> Void {
    }
    open func OnManipulationCompleted(e : Optional<Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>) throws -> Void {
    }
    open func OnKeyUp(e : Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void {
    }
    open func OnKeyDown(e : Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void {
    }
    open func OnPreviewKeyDown(e : Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void {
    }
    open func OnPreviewKeyUp(e : Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void {
    }
    open func OnGotFocus(e : Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void {
    }
    open func OnLostFocus(e : Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void {
    }
    open func OnCharacterReceived(e : Optional<Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>) throws -> Void {
    }
    open func OnDragEnter(e : Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void {
    }
    open func OnDragLeave(e : Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void {
    }
    open func OnDragOver(e : Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void {
    }
    open func OnDrop(e : Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void {
    }
}

// type: Microsoft.UI.Xaml.Controls.ControlTemplate
// runtime class
public class ControlTemplate
    :
    Microsoft.UI.Xaml.FrameworkTemplate
{
    private var _self : Microsoft.UI.Xaml.Controls.IControlTemplate;
    public init(plok: Microsoft.UI.Xaml.Controls.IControlTemplate?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IControlTemplate { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Controls.ControlTemplate")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_TargetType
    // method not needed: put_TargetType
}

// type: Microsoft.UI.Xaml.Controls.DataTemplateSelector
// runtime class
open class DataTemplateSelector
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Controls.IDataTemplateSelector;
    public init(plok: Microsoft.UI.Xaml.Controls.IDataTemplateSelector?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IDataTemplateSelector { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IDataTemplateSelectorFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IDataTemplateSelectorFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.DataTemplateSelector");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: SelectTemplate
    // method not needed: SelectTemplate
    // instance interface not needed: Microsoft.UI.Xaml.Controls.IDataTemplateSelectorOverrides
    // instance interface not needed: Microsoft.UI.Xaml.IElementFactory
}

// type: Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs
// runtime class
public class FocusDisengagedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs { return _self; }
}

// type: Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs
// runtime class
public class FocusEngagedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.Controls.Grid
// runtime class
open class Grid
    :
    Microsoft.UI.Xaml.Controls.Panel
{
    private var _self : Microsoft.UI.Xaml.Controls.IGrid;
    public init(plok: Microsoft.UI.Xaml.Controls.IGrid?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IGrid { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IGridFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IGridFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Grid");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IGridStatics {
        static var x : IGridStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Grid")
    }
    public static var GridStatics : IGridStatics {
        _IGridStatics.x
    }
    public static func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_BackgroundSizingProperty());
    }
    public static func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_BorderBrushProperty());
    }
    public static func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_BorderThicknessProperty());
    }
    public static func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_CornerRadiusProperty());
    }
    public static func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_PaddingProperty());
    }
    public static func get_RowSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_RowSpacingProperty());
    }
    public static func get_ColumnSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_ColumnSpacingProperty());
    }
    public static func get_RowProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_RowProperty());
    }
    public static func GetRow(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetRow(element: element!.Interface());
    }
    public static func SetRow(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetRow(element: element!.Interface(), value: value);
    }
    public static func get_ColumnProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_ColumnProperty());
    }
    public static func GetColumn(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetColumn(element: element!.Interface());
    }
    public static func SetColumn(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetColumn(element: element!.Interface(), value: value);
    }
    public static func get_RowSpanProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_RowSpanProperty());
    }
    public static func GetRowSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetRowSpan(element: element!.Interface());
    }
    public static func SetRowSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetRowSpan(element: element!.Interface(), value: value);
    }
    public static func get_ColumnSpanProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.get_ColumnSpanProperty());
    }
    public static func GetColumnSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>) throws -> Swift.Int32 {
        return try GridStatics.GetColumnSpan(element: element!.Interface());
    }
    public static func SetColumnSpan(element : Optional<Microsoft.UI.Xaml.FrameworkElement>, value : Swift.Int32) throws -> Void {
        return try GridStatics.SetColumnSpan(element: element!.Interface(), value: value);
    }
    public static var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.BackgroundSizingProperty);
        }
    }
    public static var BorderBrushProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.BorderBrushProperty);
        }
    }
    public static var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.BorderThicknessProperty);
        }
    }
    public static var ColumnProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.ColumnProperty);
        }
    }
    public static var ColumnSpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.ColumnSpacingProperty);
        }
    }
    public static var ColumnSpanProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.ColumnSpanProperty);
        }
    }
    public static var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.CornerRadiusProperty);
        }
    }
    public static var PaddingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.PaddingProperty);
        }
    }
    public static var RowProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.RowProperty);
        }
    }
    public static var RowSpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.RowSpacingProperty);
        }
    }
    public static var RowSpanProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GridStatics.RowSpanProperty);
        }
    }
    public func get_RowDefinitions() throws -> Optional<Microsoft.UI.Xaml.Controls.RowDefinitionCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.RowDefinitionCollection(plok: _ifc.get_RowDefinitions());
    }
    public func get_ColumnDefinitions() throws -> Optional<Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection(plok: _ifc.get_ColumnDefinitions());
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_BackgroundSizing();
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_BackgroundSizing(value: value);
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_BorderBrush());
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_BorderBrush(value: value!.Interface());
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_BorderThickness();
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_BorderThickness(value: value);
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_CornerRadius();
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_CornerRadius(value: value);
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_Padding();
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_Padding(value: value);
    }
    public func get_RowSpacing() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_RowSpacing();
    }
    public func put_RowSpacing(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_RowSpacing(value: value);
    }
    public func get_ColumnSpacing() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.get_ColumnSpacing();
    }
    public func put_ColumnSpacing(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.put_ColumnSpacing(value: value);
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.BackgroundSizing;
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.BorderBrush);
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.BorderThickness;
        }
    }
    public var ColumnDefinitions : Optional<Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection(plok: _ifc.ColumnDefinitions);
        }
    }
    public var ColumnSpacing : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.ColumnSpacing;
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.CornerRadius;
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.Padding;
        }
    }
    public var RowDefinitions : Optional<Microsoft.UI.Xaml.Controls.RowDefinitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.RowDefinitionCollection(plok: _ifc.RowDefinitions);
        }
    }
    public var RowSpacing : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IGrid = try _self.QueryInterface();
        return try _ifc.RowSpacing;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.IButton
// interface type
open class IButton
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x216c183d, Data2: 0xd07a, Data3 : 0x5aa5, Data4 : (0xb8, 0xa4, 0x03, 0x00, 0xa2, 0x68, 0x3e, 0x87)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase get_Flyout()
    private func _n_get_Flyout(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIButton.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Flyout(pThis, __presult))
        }
    }
    public func get_Flyout() throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>> = nil;
        try self._n_get_Flyout(&__result);
        return Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase(consuming: __result);
    }
    // [IsSpecialName] void put_Flyout(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)
    private func _n_put_Flyout(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIButton.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Flyout(pThis, value))
        }
    }
    public func put_Flyout(value : Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase>) throws -> Void {
        try self._n_put_Flyout(RawPointer(value));
    }
    public var Flyout : Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        get throws {
            return try get_Flyout();
        }
    }
} // IButton


// type: Microsoft.UI.Xaml.Controls.IButtonFactory
// interface type
// COMPOSITION INTERFACE
open class IButtonFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe393422, Data2: 0xd91c, Data3 : 0x57b1, Data4 : (0x9a, 0x9c, 0x2c, 0x7e, 0x3f, 0x41, 0xf7, 0x7c)) }
    // Microsoft.UI.Xaml.Controls.Button CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIButton>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIButtonFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IButton> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIButton>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IButton(consuming: __result);
    }
} // IButtonFactory


// type: Microsoft.UI.Xaml.Controls.IButtonStatics
// interface type
open class IButtonStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x57823d25, Data2: 0xb26a, Data3 : 0x5e0f, Data4 : (0x94, 0xf6, 0xbb, 0xae, 0x70, 0x68, 0x3d, 0xc5)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FlyoutProperty()
    private func _n_get_FlyoutProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIButtonStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlyoutProperty(pThis, __presult))
        }
    }
    public func get_FlyoutProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FlyoutProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var FlyoutProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FlyoutProperty();
        }
    }
} // IButtonStatics


// type: Microsoft.UI.Xaml.Controls.IColumnDefinition
// interface type
open class IColumnDefinition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x454cea14, Data2: 0x87ec, Data3 : 0x5890, Data4 : (0xbb, 0x62, 0xf1, 0xd8, 0x2a, 0x94, 0x75, 0x8e)) }
// method not needed: get_Width
// method not needed: put_Width
// method not needed: get_MaxWidth
// method not needed: put_MaxWidth
// method not needed: get_MinWidth
// method not needed: put_MinWidth
// method not needed: get_ActualWidth
} // IColumnDefinition


// type: Microsoft.UI.Xaml.Controls.IContentControl
// interface type
open class IContentControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x07e81761, Data2: 0x11b2, Data3 : 0x52ae, Data4 : (0x8f, 0x8b, 0x4d, 0x53, 0xd2, 0xb5, 0x90, 0x0a)) }
    // [IsSpecialName] System.Object get_Content()
    private func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_Content(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_Content(System.Object)
    private func _n_put_Content(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, value))
        }
    }
    public func put_Content(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_Content(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DataTemplate get_ContentTemplate()
    private func _n_get_ContentTemplate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplate(pThis, __presult))
        }
    }
    public func get_ContentTemplate() throws -> Optional<Microsoft.UI.Xaml.IDataTemplate> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>> = nil;
        try self._n_get_ContentTemplate(&__result);
        return Microsoft.UI.Xaml.IDataTemplate(consuming: __result);
    }
    // [IsSpecialName] void put_ContentTemplate(Microsoft.UI.Xaml.DataTemplate)
    private func _n_put_ContentTemplate(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplate(pThis, value))
        }
    }
    public func put_ContentTemplate(value : Optional<Microsoft.UI.Xaml.IDataTemplate>) throws -> Void {
        try self._n_put_ContentTemplate(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.DataTemplateSelector get_ContentTemplateSelector()
    private func _n_get_ContentTemplateSelector(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelector(pThis, __presult))
        }
    }
    public func get_ContentTemplateSelector() throws -> Optional<Microsoft.UI.Xaml.Controls.IDataTemplateSelector> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>> = nil;
        try self._n_get_ContentTemplateSelector(&__result);
        return Microsoft.UI.Xaml.Controls.IDataTemplateSelector(consuming: __result);
    }
    // [IsSpecialName] void put_ContentTemplateSelector(Microsoft.UI.Xaml.Controls.DataTemplateSelector)
    private func _n_put_ContentTemplateSelector(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTemplateSelector(pThis, value))
        }
    }
    public func put_ContentTemplateSelector(value : Optional<Microsoft.UI.Xaml.Controls.IDataTemplateSelector>) throws -> Void {
        try self._n_put_ContentTemplateSelector(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Animation.TransitionCollection get_ContentTransitions()
    private func _n_get_ContentTransitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitions(pThis, __presult))
        }
    }
    public func get_ContentTransitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>> = nil;
        try self._n_get_ContentTransitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition(consuming: __result);
    }
    // [IsSpecialName] void put_ContentTransitions(Microsoft.UI.Xaml.Media.Animation.TransitionCollection)
    private func _n_put_ContentTransitions(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContentTransitions(pThis, value))
        }
    }
    public func put_ContentTransitions(value : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>) throws -> Void {
        try self._n_put_ContentTransitions(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.UIElement get_ContentTemplateRoot()
    private func _n_get_ContentTemplateRoot(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateRoot(pThis, __presult))
        }
    }
    public func get_ContentTemplateRoot() throws -> Optional<Microsoft.UI.Xaml.IUIElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>> = nil;
        try self._n_get_ContentTemplateRoot(&__result);
        return Microsoft.UI.Xaml.IUIElement(consuming: __result);
    }
    public var Content : Optional<WinRT.IInspectable> {
        get throws {
            return try get_Content();
        }
    }
    public var ContentTemplate : Optional<Microsoft.UI.Xaml.IDataTemplate> {
        get throws {
            return try get_ContentTemplate();
        }
    }
    public var ContentTemplateRoot : Optional<Microsoft.UI.Xaml.IUIElement> {
        get throws {
            return try get_ContentTemplateRoot();
        }
    }
    public var ContentTemplateSelector : Optional<Microsoft.UI.Xaml.Controls.IDataTemplateSelector> {
        get throws {
            return try get_ContentTemplateSelector();
        }
    }
    public var ContentTransitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        get throws {
            return try get_ContentTransitions();
        }
    }
} // IContentControl


// type: Microsoft.UI.Xaml.Controls.IContentControlFactory
// interface type
// COMPOSITION INTERFACE
open class IContentControlFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3dea958e, Data2: 0x5acd, Data3 : 0x5f80, Data4 : (0x89, 0x38, 0x38, 0x63, 0x4f, 0x51, 0x49, 0x3a)) }
    // Microsoft.UI.Xaml.Controls.ContentControl CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IContentControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContentControl>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IContentControl(consuming: __result);
    }
} // IContentControlFactory


// type: Microsoft.UI.Xaml.Controls.IContentControlOverrides
// interface type
open class IContentControlOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2504174a, Data2: 0x017e, Data3 : 0x5a2d, Data4 : (0x9c, 0x28, 0xd9, 0x7c, 0x66, 0xae, 0x99, 0x37)) }
    // void OnContentChanged(System.Object, System.Object)
    private func _n_OnContentChanged(_ oldContent : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ newContent : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentChanged(pThis, oldContent, newContent))
        }
    }
    public func OnContentChanged(oldContent : Optional<WinRT.IInspectable>, newContent : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_OnContentChanged(RawPointer(oldContent), RawPointer(newContent));
    }
    // void OnContentTemplateChanged(Microsoft.UI.Xaml.DataTemplate, Microsoft.UI.Xaml.DataTemplate)
    private func _n_OnContentTemplateChanged(_ oldContentTemplate : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>, _ newContentTemplate : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateChanged(pThis, oldContentTemplate, newContentTemplate))
        }
    }
    public func OnContentTemplateChanged(oldContentTemplate : Optional<Microsoft.UI.Xaml.IDataTemplate>, newContentTemplate : Optional<Microsoft.UI.Xaml.IDataTemplate>) throws -> Void {
        try self._n_OnContentTemplateChanged(RawPointer(oldContentTemplate), RawPointer(newContentTemplate));
    }
    // void OnContentTemplateSelectorChanged(Microsoft.UI.Xaml.Controls.DataTemplateSelector, Microsoft.UI.Xaml.Controls.DataTemplateSelector)
    private func _n_OnContentTemplateSelectorChanged(_ oldContentTemplateSelector : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>>, _ newContentTemplateSelector : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnContentTemplateSelectorChanged(pThis, oldContentTemplateSelector, newContentTemplateSelector))
        }
    }
    public func OnContentTemplateSelectorChanged(oldContentTemplateSelector : Optional<Microsoft.UI.Xaml.Controls.IDataTemplateSelector>, newContentTemplateSelector : Optional<Microsoft.UI.Xaml.Controls.IDataTemplateSelector>) throws -> Void {
        try self._n_OnContentTemplateSelectorChanged(RawPointer(oldContentTemplateSelector), RawPointer(newContentTemplateSelector));
    }
} // IContentControlOverrides


// type: Microsoft.UI.Xaml.Controls.IContentControlStatics
// interface type
open class IContentControlStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf25484f4, Data2: 0x2fed, Data3 : 0x5a0a, Data4 : (0x88, 0x64, 0x7d, 0x6d, 0x4a, 0xc4, 0x3e, 0xf8)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ContentProperty()
    private func _n_get_ContentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, __presult))
        }
    }
    public func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ContentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ContentTemplateProperty()
    private func _n_get_ContentTemplateProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateProperty(pThis, __presult))
        }
    }
    public func get_ContentTemplateProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ContentTemplateProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ContentTemplateSelectorProperty()
    private func _n_get_ContentTemplateSelectorProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTemplateSelectorProperty(pThis, __presult))
        }
    }
    public func get_ContentTemplateSelectorProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ContentTemplateSelectorProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ContentTransitionsProperty()
    private func _n_get_ContentTransitionsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIContentControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentTransitionsProperty(pThis, __presult))
        }
    }
    public func get_ContentTransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ContentTransitionsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ContentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ContentProperty();
        }
    }
    public var ContentTemplateProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ContentTemplateProperty();
        }
    }
    public var ContentTemplateSelectorProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ContentTemplateSelectorProperty();
        }
    }
    public var ContentTransitionsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ContentTransitionsProperty();
        }
    }
} // IContentControlStatics


// type: Microsoft.UI.Xaml.Controls.IContextMenuEventArgs
// interface type
open class IContextMenuEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x65637bb3, Data2: 0xe279, Data3 : 0x5507, Data4 : (0xbd, 0x16, 0x6f, 0x7b, 0xa6, 0x70, 0x5f, 0x31)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_CursorLeft
// method not needed: get_CursorTop
} // IContextMenuEventArgs


// type: Microsoft.UI.Xaml.Controls.IControl
// interface type
open class IControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x857d6e8a, Data2: 0xd45a, Data3 : 0x5c69, Data4 : (0xa9, 0x9c, 0xbf, 0x6a, 0x5c, 0x54, 0xfb, 0x38)) }
    // [IsSpecialName] bool get_IsFocusEngagementEnabled()
    private func _n_get_IsFocusEngagementEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabled(pThis, __presult))
        }
    }
    public func get_IsFocusEngagementEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsFocusEngagementEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsFocusEngagementEnabled(bool)
    private func _n_put_IsFocusEngagementEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngagementEnabled(pThis, value))
        }
    }
    public func put_IsFocusEngagementEnabled(value : boolean) throws -> Void {
        try self._n_put_IsFocusEngagementEnabled(value);
    }
    // [IsSpecialName] bool get_IsFocusEngaged()
    private func _n_get_IsFocusEngaged(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngaged(pThis, __presult))
        }
    }
    public func get_IsFocusEngaged() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsFocusEngaged(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsFocusEngaged(bool)
    private func _n_put_IsFocusEngaged(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFocusEngaged(pThis, value))
        }
    }
    public func put_IsFocusEngaged(value : boolean) throws -> Void {
        try self._n_put_IsFocusEngaged(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.RequiresPointer get_RequiresPointer()
    private func _n_get_RequiresPointer(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointer(pThis, __presult))
        }
    }
    public func get_RequiresPointer() throws -> Microsoft.UI.Xaml.Controls.RequiresPointer {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer = _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never;
        try self._n_get_RequiresPointer(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequiresPointer(Microsoft.UI.Xaml.Controls.RequiresPointer)
    private func _n_put_RequiresPointer(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequiresPointer(pThis, value))
        }
    }
    public func put_RequiresPointer(value : Microsoft.UI.Xaml.Controls.RequiresPointer) throws -> Void {
        try self._n_put_RequiresPointer(value);
    }
    // [IsSpecialName] System.Double get_FontSize()
    private func _n_get_FontSize(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, __presult))
        }
    }
    public func get_FontSize() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_FontSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontSize(System.Double)
    private func _n_put_FontSize(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
        }
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        try self._n_put_FontSize(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.FontFamily get_FontFamily()
    private func _n_get_FontFamily(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, __presult))
        }
    }
    public func get_FontFamily() throws -> Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>> = nil;
        try self._n_get_FontFamily(&__result);
        return Microsoft.UI.Xaml.Media.IFontFamily(consuming: __result);
    }
    // [IsSpecialName] void put_FontFamily(Microsoft.UI.Xaml.Media.FontFamily)
    private func _n_put_FontFamily(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, value))
        }
    }
    public func put_FontFamily(value : Optional<Microsoft.UI.Xaml.Media.IFontFamily>) throws -> Void {
        try self._n_put_FontFamily(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_FontWeight()
    private func _n_get_FontWeight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, __presult))
        }
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_FontWeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontWeight(Windows.UI.Text.FontWeight)
    private func _n_put_FontWeight(_ value : _q_CWindows_CUI_CText_CFontWeight) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, value))
        }
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        try self._n_put_FontWeight(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_FontStyle()
    private func _n_get_FontStyle(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, __presult))
        }
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_FontStyle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStyle(Windows.UI.Text.FontStyle)
    private func _n_put_FontStyle(_ value : _q_CWindows_CUI_CText_CFontStyle) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
        }
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        try self._n_put_FontStyle(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_FontStretch()
    private func _n_get_FontStretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, __presult))
        }
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_FontStretch(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStretch(Windows.UI.Text.FontStretch)
    private func _n_put_FontStretch(_ value : _q_CWindows_CUI_CText_CFontStretch) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
        }
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        try self._n_put_FontStretch(value);
    }
    // [IsSpecialName] System.Int32 get_CharacterSpacing()
    private func _n_get_CharacterSpacing(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, __presult))
        }
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_CharacterSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CharacterSpacing(System.Int32)
    private func _n_put_CharacterSpacing(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
        }
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        try self._n_put_CharacterSpacing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Foreground()
    private func _n_get_Foreground(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, __presult))
        }
    }
    public func get_Foreground() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Foreground(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Foreground(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_Foreground(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, value))
        }
    }
    public func put_Foreground(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Foreground(RawPointer(value));
    }
    // [IsSpecialName] bool get_IsTextScaleFactorEnabled()
    private func _n_get_IsTextScaleFactorEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextScaleFactorEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTextScaleFactorEnabled(bool)
    private func _n_put_IsTextScaleFactorEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, value))
        }
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        try self._n_put_IsTextScaleFactorEnabled(value);
    }
    // [IsSpecialName] bool get_IsEnabled()
    private func _n_get_IsEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, __presult))
        }
    }
    public func get_IsEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsEnabled(bool)
    private func _n_put_IsEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsEnabled(pThis, value))
        }
    }
    public func put_IsEnabled(value : boolean) throws -> Void {
        try self._n_put_IsEnabled(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.KeyboardNavigationMode get_TabNavigation()
    private func _n_get_TabNavigation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigation(pThis, __presult))
        }
    }
    public func get_TabNavigation() throws -> Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Local;
        try self._n_get_TabNavigation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TabNavigation(Microsoft.UI.Xaml.Input.KeyboardNavigationMode)
    private func _n_put_TabNavigation(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TabNavigation(pThis, value))
        }
    }
    public func put_TabNavigation(value : Microsoft.UI.Xaml.Input.KeyboardNavigationMode) throws -> Void {
        try self._n_put_TabNavigation(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.ControlTemplate get_Template()
    private func _n_get_Template(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Template(pThis, __presult))
        }
    }
    public func get_Template() throws -> Optional<Microsoft.UI.Xaml.Controls.IControlTemplate> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>> = nil;
        try self._n_get_Template(&__result);
        return Microsoft.UI.Xaml.Controls.IControlTemplate(consuming: __result);
    }
    // [IsSpecialName] void put_Template(Microsoft.UI.Xaml.Controls.ControlTemplate)
    private func _n_put_Template(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControlTemplate>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Template(pThis, value))
        }
    }
    public func put_Template(value : Optional<Microsoft.UI.Xaml.Controls.IControlTemplate>) throws -> Void {
        try self._n_put_Template(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Padding()
    private func _n_get_Padding(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, __presult))
        }
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Padding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Padding(Microsoft.UI.Xaml.Thickness)
    private func _n_put_Padding(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, value))
        }
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Padding(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.HorizontalAlignment get_HorizontalContentAlignment()
    private func _n_get_HorizontalContentAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CHorizontalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalContentAlignment() throws -> Microsoft.UI.Xaml.HorizontalAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment = _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Left;
        try self._n_get_HorizontalContentAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalContentAlignment(Microsoft.UI.Xaml.HorizontalAlignment)
    private func _n_put_HorizontalContentAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalContentAlignment(pThis, value))
        }
    }
    public func put_HorizontalContentAlignment(value : Microsoft.UI.Xaml.HorizontalAlignment) throws -> Void {
        try self._n_put_HorizontalContentAlignment(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.VerticalAlignment get_VerticalContentAlignment()
    private func _n_get_VerticalContentAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CVerticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignment(pThis, __presult))
        }
    }
    public func get_VerticalContentAlignment() throws -> Microsoft.UI.Xaml.VerticalAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CVerticalAlignment = _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Top;
        try self._n_get_VerticalContentAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalContentAlignment(Microsoft.UI.Xaml.VerticalAlignment)
    private func _n_put_VerticalContentAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CVerticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalContentAlignment(pThis, value))
        }
    }
    public func put_VerticalContentAlignment(value : Microsoft.UI.Xaml.VerticalAlignment) throws -> Void {
        try self._n_put_VerticalContentAlignment(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Background()
    private func _n_get_Background(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, __presult))
        }
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Background(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Background(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_Background(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, value))
        }
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Background(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.BackgroundSizing get_BackgroundSizing()
    private func _n_get_BackgroundSizing(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, __presult))
        }
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge;
        try self._n_get_BackgroundSizing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BackgroundSizing(Microsoft.UI.Xaml.Controls.BackgroundSizing)
    private func _n_put_BackgroundSizing(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
        }
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        try self._n_put_BackgroundSizing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_BorderThickness()
    private func _n_get_BorderThickness(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, __presult))
        }
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_BorderThickness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderThickness(Microsoft.UI.Xaml.Thickness)
    private func _n_put_BorderThickness(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, value))
        }
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_BorderThickness(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_BorderBrush()
    private func _n_get_BorderBrush(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, __presult))
        }
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_BorderBrush(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_BorderBrush(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_BorderBrush(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, value))
        }
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_BorderBrush(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Uri get_DefaultStyleResourceUri()
    private func _n_get_DefaultStyleResourceUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUri(pThis, __presult))
        }
    }
    public func get_DefaultStyleResourceUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_DefaultStyleResourceUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_DefaultStyleResourceUri(Windows.Foundation.Uri)
    private func _n_put_DefaultStyleResourceUri(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleResourceUri(pThis, value))
        }
    }
    public func put_DefaultStyleResourceUri(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_DefaultStyleResourceUri(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ElementSoundMode get_ElementSoundMode()
    private func _n_get_ElementSoundMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CElementSoundMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundMode(pThis, __presult))
        }
    }
    public func get_ElementSoundMode() throws -> Microsoft.UI.Xaml.ElementSoundMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CElementSoundMode = _q_CMicrosoft_CUI_CXaml_CElementSoundMode_Default;
        try self._n_get_ElementSoundMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ElementSoundMode(Microsoft.UI.Xaml.ElementSoundMode)
    private func _n_put_ElementSoundMode(_ value : _q_CMicrosoft_CUI_CXaml_CElementSoundMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ElementSoundMode(pThis, value))
        }
    }
    public func put_ElementSoundMode(value : Microsoft.UI.Xaml.ElementSoundMode) throws -> Void {
        try self._n_put_ElementSoundMode(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.CornerRadius get_CornerRadius()
    private func _n_get_CornerRadius(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CCornerRadius>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, __presult))
        }
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        var __result : _q_CMicrosoft_CUI_CXaml_CCornerRadius = _q_CMicrosoft_CUI_CXaml_CCornerRadius(TopLeft: 0, TopRight: 0, BottomRight: 0, BottomLeft: 0);
        try self._n_get_CornerRadius(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CornerRadius(Microsoft.UI.Xaml.CornerRadius)
    private func _n_put_CornerRadius(_ value : _q_CMicrosoft_CUI_CXaml_CCornerRadius) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, value))
        }
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        try self._n_put_CornerRadius(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_FocusEngaged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control,Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs>)
    private func _n_add_FocusEngaged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusEngaged(pThis, handler, __presult))
        }
    }
    public func add_FocusEngaged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusEngagedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_FocusEngaged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_FocusEngaged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_FocusEngaged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusEngaged(pThis, token))
        }
    }
    public func remove_FocusEngaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_FocusEngaged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_FocusDisengaged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control,Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs>)
    private func _n_add_FocusDisengaged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_FocusDisengaged(pThis, handler, __presult))
        }
    }
    public func add_FocusDisengaged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CControl__q_CMicrosoft_CUI_CXaml_CControls_CFocusDisengagedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_FocusDisengaged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_FocusDisengaged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_FocusDisengaged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_FocusDisengaged(pThis, token))
        }
    }
    public func remove_FocusDisengaged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_FocusDisengaged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_IsEnabledChanged(Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler)
    private func _n_add_IsEnabledChanged(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsEnabledChanged(pThis, handler, __presult))
        }
    }
    public func add_IsEnabledChanged(handler : Optional<Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_IsEnabledChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_IsEnabledChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_IsEnabledChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsEnabledChanged(pThis, token))
        }
    }
    public func remove_IsEnabledChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_IsEnabledChanged(token);
    }
    // void RemoveFocusEngagement()
    private func _n_RemoveFocusEngagement() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFocusEngagement(pThis))
        }
    }
    public func RemoveFocusEngagement() throws -> Void {
        try self._n_RemoveFocusEngagement();
    }
    // bool ApplyTemplate()
    private func _n_ApplyTemplate(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyTemplate(pThis, __presult))
        }
    }
    public func ApplyTemplate() throws -> boolean {
        var __result : boolean = 0;
        try self._n_ApplyTemplate(&__result);
        return __result;
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Background();
        }
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
            return try get_BackgroundSizing();
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_BorderBrush();
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_BorderThickness();
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
            return try get_CharacterSpacing();
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
            return try get_CornerRadius();
        }
    }
    public var DefaultStyleResourceUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_DefaultStyleResourceUri();
        }
    }
    public var ElementSoundMode : Microsoft.UI.Xaml.ElementSoundMode {
        get throws {
            return try get_ElementSoundMode();
        }
    }
    public var FontFamily : Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        get throws {
            return try get_FontFamily();
        }
    }
    public var FontSize : Swift.Double {
        get throws {
            return try get_FontSize();
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
            return try get_FontStretch();
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
            return try get_FontStyle();
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
            return try get_FontWeight();
        }
    }
    public var Foreground : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Foreground();
        }
    }
    public var HorizontalContentAlignment : Microsoft.UI.Xaml.HorizontalAlignment {
        get throws {
            return try get_HorizontalContentAlignment();
        }
    }
    public var IsEnabled : boolean {
        get throws {
            return try get_IsEnabled();
        }
    }
    public var IsFocusEngaged : boolean {
        get throws {
            return try get_IsFocusEngaged();
        }
    }
    public var IsFocusEngagementEnabled : boolean {
        get throws {
            return try get_IsFocusEngagementEnabled();
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
            return try get_IsTextScaleFactorEnabled();
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Padding();
        }
    }
    public var RequiresPointer : Microsoft.UI.Xaml.Controls.RequiresPointer {
        get throws {
            return try get_RequiresPointer();
        }
    }
    public var TabNavigation : Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        get throws {
            return try get_TabNavigation();
        }
    }
    public var Template : Optional<Microsoft.UI.Xaml.Controls.IControlTemplate> {
        get throws {
            return try get_Template();
        }
    }
    public var VerticalContentAlignment : Microsoft.UI.Xaml.VerticalAlignment {
        get throws {
            return try get_VerticalContentAlignment();
        }
    }
} // IControl


// type: Microsoft.UI.Xaml.Controls.IControlFactory
// interface type
// COMPOSITION INTERFACE
open class IControlFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x25159233, Data2: 0x9438, Data3 : 0x5534, Data4 : (0xae, 0xb9, 0x00, 0xeb, 0x05, 0x9c, 0xf7, 0x3f)) }
    // Microsoft.UI.Xaml.Controls.Control CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControl>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIControl>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IControl(consuming: __result);
    }
} // IControlFactory


// type: Microsoft.UI.Xaml.Controls.IControlOverrides
// interface type
open class IControlOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5f644395, Data2: 0x2177, Data3 : 0x5161, Data4 : (0x9f, 0x87, 0xc6, 0xc7, 0x49, 0xc7, 0x3a, 0x03)) }
    // void OnPointerEntered(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerEntered(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerEntered(pThis, e))
        }
    }
    public func OnPointerEntered(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerEntered(RawPointer(e));
    }
    // void OnPointerPressed(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerPressed(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerPressed(pThis, e))
        }
    }
    public func OnPointerPressed(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerPressed(RawPointer(e));
    }
    // void OnPointerMoved(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerMoved(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerMoved(pThis, e))
        }
    }
    public func OnPointerMoved(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerMoved(RawPointer(e));
    }
    // void OnPointerReleased(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerReleased(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerReleased(pThis, e))
        }
    }
    public func OnPointerReleased(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerReleased(RawPointer(e));
    }
    // void OnPointerExited(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerExited(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerExited(pThis, e))
        }
    }
    public func OnPointerExited(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerExited(RawPointer(e));
    }
    // void OnPointerCaptureLost(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerCaptureLost(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCaptureLost(pThis, e))
        }
    }
    public func OnPointerCaptureLost(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerCaptureLost(RawPointer(e));
    }
    // void OnPointerCanceled(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerCanceled(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerCanceled(pThis, e))
        }
    }
    public func OnPointerCanceled(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerCanceled(RawPointer(e));
    }
    // void OnPointerWheelChanged(Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_OnPointerWheelChanged(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPointerWheelChanged(pThis, e))
        }
    }
    public func OnPointerWheelChanged(e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_OnPointerWheelChanged(RawPointer(e));
    }
    // void OnTapped(Microsoft.UI.Xaml.Input.TappedRoutedEventArgs)
    private func _n_OnTapped(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnTapped(pThis, e))
        }
    }
    public func OnTapped(e : Optional<Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs>) throws -> Void {
        try self._n_OnTapped(RawPointer(e));
    }
    // void OnDoubleTapped(Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs)
    private func _n_OnDoubleTapped(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDoubleTapped(pThis, e))
        }
    }
    public func OnDoubleTapped(e : Optional<Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs>) throws -> Void {
        try self._n_OnDoubleTapped(RawPointer(e));
    }
    // void OnHolding(Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs)
    private func _n_OnHolding(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnHolding(pThis, e))
        }
    }
    public func OnHolding(e : Optional<Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs>) throws -> Void {
        try self._n_OnHolding(RawPointer(e));
    }
    // void OnRightTapped(Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs)
    private func _n_OnRightTapped(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnRightTapped(pThis, e))
        }
    }
    public func OnRightTapped(e : Optional<Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs>) throws -> Void {
        try self._n_OnRightTapped(RawPointer(e));
    }
    // void OnManipulationStarting(Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs)
    private func _n_OnManipulationStarting(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarting(pThis, e))
        }
    }
    public func OnManipulationStarting(e : Optional<Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationStarting(RawPointer(e));
    }
    // void OnManipulationInertiaStarting(Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs)
    private func _n_OnManipulationInertiaStarting(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationInertiaStarting(pThis, e))
        }
    }
    public func OnManipulationInertiaStarting(e : Optional<Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationInertiaStarting(RawPointer(e));
    }
    // void OnManipulationStarted(Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)
    private func _n_OnManipulationStarted(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationStarted(pThis, e))
        }
    }
    public func OnManipulationStarted(e : Optional<Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationStarted(RawPointer(e));
    }
    // void OnManipulationDelta(Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs)
    private func _n_OnManipulationDelta(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationDelta(pThis, e))
        }
    }
    public func OnManipulationDelta(e : Optional<Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationDelta(RawPointer(e));
    }
    // void OnManipulationCompleted(Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs)
    private func _n_OnManipulationCompleted(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnManipulationCompleted(pThis, e))
        }
    }
    public func OnManipulationCompleted(e : Optional<Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs>) throws -> Void {
        try self._n_OnManipulationCompleted(RawPointer(e));
    }
    // void OnKeyUp(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnKeyUp(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyUp(pThis, e))
        }
    }
    public func OnKeyUp(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnKeyUp(RawPointer(e));
    }
    // void OnKeyDown(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnKeyDown(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyDown(pThis, e))
        }
    }
    public func OnKeyDown(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnKeyDown(RawPointer(e));
    }
    // void OnPreviewKeyDown(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnPreviewKeyDown(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyDown(pThis, e))
        }
    }
    public func OnPreviewKeyDown(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnPreviewKeyDown(RawPointer(e));
    }
    // void OnPreviewKeyUp(Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_OnPreviewKeyUp(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnPreviewKeyUp(pThis, e))
        }
    }
    public func OnPreviewKeyUp(e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_OnPreviewKeyUp(RawPointer(e));
    }
    // void OnGotFocus(Microsoft.UI.Xaml.RoutedEventArgs)
    private func _n_OnGotFocus(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnGotFocus(pThis, e))
        }
    }
    public func OnGotFocus(e : Optional<Microsoft.UI.Xaml.IRoutedEventArgs>) throws -> Void {
        try self._n_OnGotFocus(RawPointer(e));
    }
    // void OnLostFocus(Microsoft.UI.Xaml.RoutedEventArgs)
    private func _n_OnLostFocus(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnLostFocus(pThis, e))
        }
    }
    public func OnLostFocus(e : Optional<Microsoft.UI.Xaml.IRoutedEventArgs>) throws -> Void {
        try self._n_OnLostFocus(RawPointer(e));
    }
    // void OnCharacterReceived(Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs)
    private func _n_OnCharacterReceived(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CICharacterReceivedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnCharacterReceived(pThis, e))
        }
    }
    public func OnCharacterReceived(e : Optional<Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs>) throws -> Void {
        try self._n_OnCharacterReceived(RawPointer(e));
    }
    // void OnDragEnter(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDragEnter(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragEnter(pThis, e))
        }
    }
    public func OnDragEnter(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDragEnter(RawPointer(e));
    }
    // void OnDragLeave(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDragLeave(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragLeave(pThis, e))
        }
    }
    public func OnDragLeave(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDragLeave(RawPointer(e));
    }
    // void OnDragOver(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDragOver(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDragOver(pThis, e))
        }
    }
    public func OnDragOver(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDragOver(RawPointer(e));
    }
    // void OnDrop(Microsoft.UI.Xaml.DragEventArgs)
    private func _n_OnDrop(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDrop(pThis, e))
        }
    }
    public func OnDrop(e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_OnDrop(RawPointer(e));
    }
} // IControlOverrides


// type: Microsoft.UI.Xaml.Controls.IControlProtected
// interface type
open class IControlProtected
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5c750339, Data2: 0x1789, Data3 : 0x5095, Data4 : (0xa2, 0x14, 0xdd, 0x9d, 0x05, 0x64, 0xe5, 0x79)) }
    // [IsSpecialName] System.Object get_DefaultStyleKey()
    private func _n_get_DefaultStyleKey(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKey(pThis, __presult))
        }
    }
    public func get_DefaultStyleKey() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_DefaultStyleKey(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_DefaultStyleKey(System.Object)
    private func _n_put_DefaultStyleKey(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DefaultStyleKey(pThis, value))
        }
    }
    public func put_DefaultStyleKey(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_DefaultStyleKey(RawPointer(value));
    }
    // Microsoft.UI.Xaml.DependencyObject GetTemplateChild(System.String)
    private func _n_GetTemplateChild(_ childName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetTemplateChild(pThis, childName, __presult))
        }
    }
    public func GetTemplateChild(childName : Swift.String) throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        let __hstr_childName = try HString(childName);
        return try withExtendedLifetime(__hstr_childName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_GetTemplateChild(__hstr_childName.Raw(), &__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
        }
    }
    public var DefaultStyleKey : Optional<WinRT.IInspectable> {
        get throws {
            return try get_DefaultStyleKey();
        }
    }
} // IControlProtected


// type: Microsoft.UI.Xaml.Controls.IControlStatics
// interface type
open class IControlStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc3ae388d, Data2: 0xaa36, Data3 : 0x5e10, Data4 : (0xac, 0xac, 0x98, 0x41, 0x5f, 0x47, 0xbc, 0xc7)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsFocusEngagementEnabledProperty()
    private func _n_get_IsFocusEngagementEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagementEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsFocusEngagementEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsFocusEngagementEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsFocusEngagedProperty()
    private func _n_get_IsFocusEngagedProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFocusEngagedProperty(pThis, __presult))
        }
    }
    public func get_IsFocusEngagedProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsFocusEngagedProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RequiresPointerProperty()
    private func _n_get_RequiresPointerProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointerProperty(pThis, __presult))
        }
    }
    public func get_RequiresPointerProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RequiresPointerProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontSizeProperty()
    private func _n_get_FontSizeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, __presult))
        }
    }
    public func get_FontSizeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontSizeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontFamilyProperty()
    private func _n_get_FontFamilyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, __presult))
        }
    }
    public func get_FontFamilyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontFamilyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontWeightProperty()
    private func _n_get_FontWeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, __presult))
        }
    }
    public func get_FontWeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontWeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStyleProperty()
    private func _n_get_FontStyleProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, __presult))
        }
    }
    public func get_FontStyleProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStyleProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStretchProperty()
    private func _n_get_FontStretchProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, __presult))
        }
    }
    public func get_FontStretchProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStretchProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CharacterSpacingProperty()
    private func _n_get_CharacterSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, __presult))
        }
    }
    public func get_CharacterSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CharacterSpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ForegroundProperty()
    private func _n_get_ForegroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, __presult))
        }
    }
    public func get_ForegroundProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ForegroundProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextScaleFactorEnabledProperty()
    private func _n_get_IsTextScaleFactorEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextScaleFactorEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsEnabledProperty()
    private func _n_get_IsEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TabNavigationProperty()
    private func _n_get_TabNavigationProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabNavigationProperty(pThis, __presult))
        }
    }
    public func get_TabNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TabNavigationProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TemplateProperty()
    private func _n_get_TemplateProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TemplateProperty(pThis, __presult))
        }
    }
    public func get_TemplateProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TemplateProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PaddingProperty()
    private func _n_get_PaddingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, __presult))
        }
    }
    public func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PaddingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HorizontalContentAlignmentProperty()
    private func _n_get_HorizontalContentAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalContentAlignmentProperty(pThis, __presult))
        }
    }
    public func get_HorizontalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HorizontalContentAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_VerticalContentAlignmentProperty()
    private func _n_get_VerticalContentAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalContentAlignmentProperty(pThis, __presult))
        }
    }
    public func get_VerticalContentAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_VerticalContentAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundProperty()
    private func _n_get_BackgroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, __presult))
        }
    }
    public func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundSizingProperty()
    private func _n_get_BackgroundSizingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, __presult))
        }
    }
    public func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundSizingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderThicknessProperty()
    private func _n_get_BorderThicknessProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, __presult))
        }
    }
    public func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderThicknessProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderBrushProperty()
    private func _n_get_BorderBrushProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, __presult))
        }
    }
    public func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderBrushProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DefaultStyleKeyProperty()
    private func _n_get_DefaultStyleKeyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleKeyProperty(pThis, __presult))
        }
    }
    public func get_DefaultStyleKeyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DefaultStyleKeyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DefaultStyleResourceUriProperty()
    private func _n_get_DefaultStyleResourceUriProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultStyleResourceUriProperty(pThis, __presult))
        }
    }
    public func get_DefaultStyleResourceUriProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DefaultStyleResourceUriProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ElementSoundModeProperty()
    private func _n_get_ElementSoundModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ElementSoundModeProperty(pThis, __presult))
        }
    }
    public func get_ElementSoundModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ElementSoundModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CornerRadiusProperty()
    private func _n_get_CornerRadiusProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, __presult))
        }
    }
    public func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CornerRadiusProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTemplateFocusTargetProperty()
    private func _n_get_IsTemplateFocusTargetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateFocusTargetProperty(pThis, __presult))
        }
    }
    public func get_IsTemplateFocusTargetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTemplateFocusTargetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // bool GetIsTemplateFocusTarget(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetIsTemplateFocusTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateFocusTarget(pThis, element, __presult))
        }
    }
    public func GetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_GetIsTemplateFocusTarget(RawPointer(element), &__result);
        return __result;
    }
    // void SetIsTemplateFocusTarget(Microsoft.UI.Xaml.FrameworkElement, bool)
    private func _n_SetIsTemplateFocusTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateFocusTarget(pThis, element, value))
        }
    }
    public func SetIsTemplateFocusTarget(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : boolean) throws -> Void {
        try self._n_SetIsTemplateFocusTarget(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTemplateKeyTipTargetProperty()
    private func _n_get_IsTemplateKeyTipTargetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTemplateKeyTipTargetProperty(pThis, __presult))
        }
    }
    public func get_IsTemplateKeyTipTargetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTemplateKeyTipTargetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // bool GetIsTemplateKeyTipTarget(Microsoft.UI.Xaml.DependencyObject)
    private func _n_GetIsTemplateKeyTipTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetIsTemplateKeyTipTarget(pThis, element, __presult))
        }
    }
    public func GetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_GetIsTemplateKeyTipTarget(RawPointer(element), &__result);
        return __result;
    }
    // void SetIsTemplateKeyTipTarget(Microsoft.UI.Xaml.DependencyObject, bool)
    private func _n_SetIsTemplateKeyTipTarget(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>, _ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetIsTemplateKeyTipTarget(pThis, element, value))
        }
    }
    public func SetIsTemplateKeyTipTarget(element : Optional<Microsoft.UI.Xaml.IDependencyObject>, value : boolean) throws -> Void {
        try self._n_SetIsTemplateKeyTipTarget(RawPointer(element), value);
    }
    public var BackgroundProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundProperty();
        }
    }
    public var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundSizingProperty();
        }
    }
    public var BorderBrushProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderBrushProperty();
        }
    }
    public var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderThicknessProperty();
        }
    }
    public var CharacterSpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CharacterSpacingProperty();
        }
    }
    public var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CornerRadiusProperty();
        }
    }
    public var DefaultStyleKeyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DefaultStyleKeyProperty();
        }
    }
    public var DefaultStyleResourceUriProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DefaultStyleResourceUriProperty();
        }
    }
    public var ElementSoundModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ElementSoundModeProperty();
        }
    }
    public var FontFamilyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontFamilyProperty();
        }
    }
    public var FontSizeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontSizeProperty();
        }
    }
    public var FontStretchProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStretchProperty();
        }
    }
    public var FontStyleProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStyleProperty();
        }
    }
    public var FontWeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontWeightProperty();
        }
    }
    public var ForegroundProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ForegroundProperty();
        }
    }
    public var HorizontalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HorizontalContentAlignmentProperty();
        }
    }
    public var IsEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsEnabledProperty();
        }
    }
    public var IsFocusEngagedProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsFocusEngagedProperty();
        }
    }
    public var IsFocusEngagementEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsFocusEngagementEnabledProperty();
        }
    }
    public var IsTemplateFocusTargetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTemplateFocusTargetProperty();
        }
    }
    public var IsTemplateKeyTipTargetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTemplateKeyTipTargetProperty();
        }
    }
    public var IsTextScaleFactorEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextScaleFactorEnabledProperty();
        }
    }
    public var PaddingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PaddingProperty();
        }
    }
    public var RequiresPointerProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RequiresPointerProperty();
        }
    }
    public var TabNavigationProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TabNavigationProperty();
        }
    }
    public var TemplateProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TemplateProperty();
        }
    }
    public var VerticalContentAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_VerticalContentAlignmentProperty();
        }
    }
} // IControlStatics


// type: Microsoft.UI.Xaml.Controls.IControlTemplate
// interface type
open class IControlTemplate
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3a192751, Data2: 0x2106, Data3 : 0x547a, Data4 : (0xac, 0xa0, 0xf1, 0x5a, 0xe8, 0x92, 0x6e, 0xa0)) }
// method not needed: get_TargetType
// method not needed: put_TargetType
} // IControlTemplate


// type: Microsoft.UI.Xaml.Controls.IDataTemplateSelector
// interface type
open class IDataTemplateSelector
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x86ca4fa4, Data2: 0x7de0, Data3 : 0x5049, Data4 : (0x82, 0xf5, 0x39, 0xec, 0x78, 0x56, 0x90, 0x28)) }
// method not needed: SelectTemplate
// method not needed: SelectTemplateForItem
} // IDataTemplateSelector


// type: Microsoft.UI.Xaml.Controls.IDataTemplateSelectorFactory
// interface type
// COMPOSITION INTERFACE
open class IDataTemplateSelectorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x43217eda, Data2: 0x6f7f, Data3 : 0x5b80, Data4 : (0xa7, 0x0b, 0x94, 0x45, 0x11, 0xb3, 0x54, 0xab)) }
    // Microsoft.UI.Xaml.Controls.DataTemplateSelector CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelectorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IDataTemplateSelector> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIDataTemplateSelector>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IDataTemplateSelector(consuming: __result);
    }
} // IDataTemplateSelectorFactory


// type: Microsoft.UI.Xaml.Controls.IFocusDisengagedEventArgs
// interface type
open class IFocusDisengagedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc0b4b88c, Data2: 0xc195, Data3 : 0x5064, Data4 : (0x84, 0xc7, 0x33, 0xcb, 0x26, 0x2c, 0xb2, 0x40)) }
} // IFocusDisengagedEventArgs


// type: Microsoft.UI.Xaml.Controls.IFocusEngagedEventArgs
// interface type
open class IFocusEngagedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1e71e8e4, Data2: 0x74b2, Data3 : 0x50a1, Data4 : (0x8f, 0x2b, 0x42, 0xc0, 0x11, 0x8a, 0xb0, 0xea)) }
// method not needed: get_Handled
// method not needed: put_Handled
} // IFocusEngagedEventArgs


// type: Microsoft.UI.Xaml.Controls.IGrid
// interface type
open class IGrid
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc4496219, Data2: 0x9014, Data3 : 0x58a1, Data4 : (0xb4, 0xad, 0xc5, 0x04, 0x49, 0x13, 0xa5, 0xbb)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.RowDefinitionCollection get_RowDefinitions()
    private func _n_get_RowDefinitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowDefinitions(pThis, __presult))
        }
    }
    public func get_RowDefinitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition>> = nil;
        try self._n_get_RowDefinitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.ColumnDefinitionCollection get_ColumnDefinitions()
    private func _n_get_ColumnDefinitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnDefinitions(pThis, __presult))
        }
    }
    public func get_ColumnDefinitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition>> = nil;
        try self._n_get_ColumnDefinitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.BackgroundSizing get_BackgroundSizing()
    private func _n_get_BackgroundSizing(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, __presult))
        }
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge;
        try self._n_get_BackgroundSizing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BackgroundSizing(Microsoft.UI.Xaml.Controls.BackgroundSizing)
    private func _n_put_BackgroundSizing(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
        }
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        try self._n_put_BackgroundSizing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_BorderBrush()
    private func _n_get_BorderBrush(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, __presult))
        }
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_BorderBrush(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_BorderBrush(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_BorderBrush(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, value))
        }
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_BorderBrush(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_BorderThickness()
    private func _n_get_BorderThickness(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, __presult))
        }
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_BorderThickness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderThickness(Microsoft.UI.Xaml.Thickness)
    private func _n_put_BorderThickness(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, value))
        }
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_BorderThickness(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.CornerRadius get_CornerRadius()
    private func _n_get_CornerRadius(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CCornerRadius>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, __presult))
        }
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        var __result : _q_CMicrosoft_CUI_CXaml_CCornerRadius = _q_CMicrosoft_CUI_CXaml_CCornerRadius(TopLeft: 0, TopRight: 0, BottomRight: 0, BottomLeft: 0);
        try self._n_get_CornerRadius(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CornerRadius(Microsoft.UI.Xaml.CornerRadius)
    private func _n_put_CornerRadius(_ value : _q_CMicrosoft_CUI_CXaml_CCornerRadius) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, value))
        }
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        try self._n_put_CornerRadius(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Padding()
    private func _n_get_Padding(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, __presult))
        }
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Padding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Padding(Microsoft.UI.Xaml.Thickness)
    private func _n_put_Padding(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, value))
        }
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Padding(value);
    }
    // [IsSpecialName] System.Double get_RowSpacing()
    private func _n_get_RowSpacing(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacing(pThis, __presult))
        }
    }
    public func get_RowSpacing() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_RowSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RowSpacing(System.Double)
    private func _n_put_RowSpacing(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RowSpacing(pThis, value))
        }
    }
    public func put_RowSpacing(value : Swift.Double) throws -> Void {
        try self._n_put_RowSpacing(value);
    }
    // [IsSpecialName] System.Double get_ColumnSpacing()
    private func _n_get_ColumnSpacing(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacing(pThis, __presult))
        }
    }
    public func get_ColumnSpacing() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_ColumnSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColumnSpacing(System.Double)
    private func _n_put_ColumnSpacing(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGrid.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColumnSpacing(pThis, value))
        }
    }
    public func put_ColumnSpacing(value : Swift.Double) throws -> Void {
        try self._n_put_ColumnSpacing(value);
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
            return try get_BackgroundSizing();
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_BorderBrush();
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_BorderThickness();
        }
    }
    public var ColumnDefinitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CColumnDefinition> {
        get throws {
            return try get_ColumnDefinitions();
        }
    }
    public var ColumnSpacing : Swift.Double {
        get throws {
            return try get_ColumnSpacing();
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
            return try get_CornerRadius();
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Padding();
        }
    }
    public var RowDefinitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition> {
        get throws {
            return try get_RowDefinitions();
        }
    }
    public var RowSpacing : Swift.Double {
        get throws {
            return try get_RowSpacing();
        }
    }
} // IGrid


// type: Microsoft.UI.Xaml.Controls.IGridFactory
// interface type
// COMPOSITION INTERFACE
open class IGridFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb16bf561, Data2: 0xfc6c, Data3 : 0x57c6, Data4 : (0x8e, 0xbc, 0x0b, 0x06, 0xce, 0x45, 0x13, 0xaa)) }
    // Microsoft.UI.Xaml.Controls.Grid CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIGrid>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IGrid> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIGrid>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IGrid(consuming: __result);
    }
} // IGridFactory


// type: Microsoft.UI.Xaml.Controls.IGridStatics
// interface type
open class IGridStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xef9cf81d, Data2: 0xa431, Data3 : 0x50f4, Data4 : (0xab, 0xf5, 0x30, 0x23, 0xfe, 0x44, 0x77, 0x04)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundSizingProperty()
    private func _n_get_BackgroundSizingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, __presult))
        }
    }
    public func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundSizingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderBrushProperty()
    private func _n_get_BorderBrushProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, __presult))
        }
    }
    public func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderBrushProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderThicknessProperty()
    private func _n_get_BorderThicknessProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, __presult))
        }
    }
    public func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderThicknessProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CornerRadiusProperty()
    private func _n_get_CornerRadiusProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, __presult))
        }
    }
    public func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CornerRadiusProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PaddingProperty()
    private func _n_get_PaddingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, __presult))
        }
    }
    public func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PaddingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RowSpacingProperty()
    private func _n_get_RowSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpacingProperty(pThis, __presult))
        }
    }
    public func get_RowSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RowSpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColumnSpacingProperty()
    private func _n_get_ColumnSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpacingProperty(pThis, __presult))
        }
    }
    public func get_ColumnSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColumnSpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RowProperty()
    private func _n_get_RowProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowProperty(pThis, __presult))
        }
    }
    public func get_RowProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RowProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetRow(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetRow(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRow(pThis, element, __presult))
        }
    }
    public func GetRow(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetRow(RawPointer(element), &__result);
        return __result;
    }
    // void SetRow(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetRow(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRow(pThis, element, value))
        }
    }
    public func SetRow(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetRow(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColumnProperty()
    private func _n_get_ColumnProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnProperty(pThis, __presult))
        }
    }
    public func get_ColumnProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColumnProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetColumn(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetColumn(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumn(pThis, element, __presult))
        }
    }
    public func GetColumn(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetColumn(RawPointer(element), &__result);
        return __result;
    }
    // void SetColumn(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetColumn(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumn(pThis, element, value))
        }
    }
    public func SetColumn(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetColumn(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RowSpanProperty()
    private func _n_get_RowSpanProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RowSpanProperty(pThis, __presult))
        }
    }
    public func get_RowSpanProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RowSpanProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetRowSpan(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetRowSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetRowSpan(pThis, element, __presult))
        }
    }
    public func GetRowSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetRowSpan(RawPointer(element), &__result);
        return __result;
    }
    // void SetRowSpan(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetRowSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetRowSpan(pThis, element, value))
        }
    }
    public func SetRowSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetRowSpan(RawPointer(element), value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColumnSpanProperty()
    private func _n_get_ColumnSpanProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColumnSpanProperty(pThis, __presult))
        }
    }
    public func get_ColumnSpanProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColumnSpanProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // System.Int32 GetColumnSpan(Microsoft.UI.Xaml.FrameworkElement)
    private func _n_GetColumnSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetColumnSpan(pThis, element, __presult))
        }
    }
    public func GetColumnSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>) throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_GetColumnSpan(RawPointer(element), &__result);
        return __result;
    }
    // void SetColumnSpan(Microsoft.UI.Xaml.FrameworkElement, System.Int32)
    private func _n_SetColumnSpan(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>, _ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIGridStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetColumnSpan(pThis, element, value))
        }
    }
    public func SetColumnSpan(element : Optional<Microsoft.UI.Xaml.IFrameworkElement>, value : Swift.Int32) throws -> Void {
        try self._n_SetColumnSpan(RawPointer(element), value);
    }
    public var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundSizingProperty();
        }
    }
    public var BorderBrushProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderBrushProperty();
        }
    }
    public var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderThicknessProperty();
        }
    }
    public var ColumnProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColumnProperty();
        }
    }
    public var ColumnSpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColumnSpacingProperty();
        }
    }
    public var ColumnSpanProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColumnSpanProperty();
        }
    }
    public var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CornerRadiusProperty();
        }
    }
    public var PaddingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PaddingProperty();
        }
    }
    public var RowProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RowProperty();
        }
    }
    public var RowSpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RowSpacingProperty();
        }
    }
    public var RowSpanProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RowSpanProperty();
        }
    }
} // IGridStatics


// type: Microsoft.UI.Xaml.Controls.IInsertionPanel
// interface type
open class IInsertionPanel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x84e13e27, Data2: 0x2d24, Data3 : 0x59c4, Data4 : (0xa0, 0x0e, 0x16, 0xc7, 0x25, 0x59, 0x01, 0xe2)) }
    // void GetInsertionIndexes(Windows.Foundation.Point, ref System.Int32, ref System.Int32)
    private func _n_GetInsertionIndexes(_ position : _q_CWindows_CFoundation_CPoint, _ first : UnsafeMutablePointer<INT32>, _ second : UnsafeMutablePointer<INT32>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIInsertionPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetInsertionIndexes(pThis, position, first, second))
        }
    }
    public func GetInsertionIndexes(position : Windows.Foundation.Point, first : inout Swift.Int32, second : inout Swift.Int32) throws -> Void {
            var _tmp_out_first: INT32 = 0;
            var _tmp_out_second: INT32 = 0;
        try self._n_GetInsertionIndexes(position, &_tmp_out_first, &_tmp_out_second);
            first = _tmp_out_first;
            second = _tmp_out_second;
    }
} // IInsertionPanel


// type: Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs
// interface type
open class IIsTextTrimmedChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3c709b2f, Data2: 0x16ba, Data3 : 0x55d2, Data4 : (0xb6, 0xf6, 0xdf, 0xc5, 0x4a, 0x1e, 0xd0, 0x21)) }
} // IIsTextTrimmedChangedEventArgs


// type: Microsoft.UI.Xaml.Controls.IPanel
// interface type
open class IPanel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x27a1b418, Data2: 0x56f3, Data3 : 0x525e, Data4 : (0xb8, 0x83, 0xce, 0xfe, 0xd9, 0x05, 0xee, 0xd3)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.UIElementCollection get_Children()
    private func _n_get_Children(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Children(pThis, __presult))
        }
    }
    public func get_Children() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement>> = nil;
        try self._n_get_Children(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Background()
    private func _n_get_Background(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, __presult))
        }
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Background(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Background(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_Background(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, value))
        }
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Background(RawPointer(value));
    }
    // [IsSpecialName] bool get_IsItemsHost()
    private func _n_get_IsItemsHost(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHost(pThis, __presult))
        }
    }
    public func get_IsItemsHost() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsItemsHost(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Animation.TransitionCollection get_ChildrenTransitions()
    private func _n_get_ChildrenTransitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitions(pThis, __presult))
        }
    }
    public func get_ChildrenTransitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>> = nil;
        try self._n_get_ChildrenTransitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition(consuming: __result);
    }
    // [IsSpecialName] void put_ChildrenTransitions(Microsoft.UI.Xaml.Media.Animation.TransitionCollection)
    private func _n_put_ChildrenTransitions(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ChildrenTransitions(pThis, value))
        }
    }
    public func put_ChildrenTransitions(value : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>) throws -> Void {
        try self._n_put_ChildrenTransitions(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.BrushTransition get_BackgroundTransition()
    private func _n_get_BackgroundTransition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundTransition(pThis, __presult))
        }
    }
    public func get_BackgroundTransition() throws -> Optional<Microsoft.UI.Xaml.IBrushTransition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>> = nil;
        try self._n_get_BackgroundTransition(&__result);
        return Microsoft.UI.Xaml.IBrushTransition(consuming: __result);
    }
    // [IsSpecialName] void put_BackgroundTransition(Microsoft.UI.Xaml.BrushTransition)
    private func _n_put_BackgroundTransition(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundTransition(pThis, value))
        }
    }
    public func put_BackgroundTransition(value : Optional<Microsoft.UI.Xaml.IBrushTransition>) throws -> Void {
        try self._n_put_BackgroundTransition(RawPointer(value));
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Background();
        }
    }
    public var BackgroundTransition : Optional<Microsoft.UI.Xaml.IBrushTransition> {
        get throws {
            return try get_BackgroundTransition();
        }
    }
    public var Children : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement> {
        get throws {
            return try get_Children();
        }
    }
    public var ChildrenTransitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        get throws {
            return try get_ChildrenTransitions();
        }
    }
    public var IsItemsHost : boolean {
        get throws {
            return try get_IsItemsHost();
        }
    }
} // IPanel


// type: Microsoft.UI.Xaml.Controls.IPanelFactory
// interface type
// COMPOSITION INTERFACE
open class IPanelFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf5e7e21c, Data2: 0x4c97, Data3 : 0x5d20, Data4 : (0xbe, 0xe6, 0x3e, 0x4f, 0xc6, 0xab, 0x14, 0xe9)) }
    // Microsoft.UI.Xaml.Controls.Panel CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIPanel>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IPanel> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIPanel>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IPanel(consuming: __result);
    }
} // IPanelFactory


// type: Microsoft.UI.Xaml.Controls.IPanelStatics
// interface type
open class IPanelStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x76a9caa7, Data2: 0xa5d4, Data3 : 0x5061, Data4 : (0xa3, 0x25, 0x17, 0xc7, 0x6f, 0x66, 0xde, 0x51)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundProperty()
    private func _n_get_BackgroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundProperty(pThis, __presult))
        }
    }
    public func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsItemsHostProperty()
    private func _n_get_IsItemsHostProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsItemsHostProperty(pThis, __presult))
        }
    }
    public func get_IsItemsHostProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsItemsHostProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ChildrenTransitionsProperty()
    private func _n_get_ChildrenTransitionsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ChildrenTransitionsProperty(pThis, __presult))
        }
    }
    public func get_ChildrenTransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ChildrenTransitionsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var BackgroundProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundProperty();
        }
    }
    public var ChildrenTransitionsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ChildrenTransitionsProperty();
        }
    }
    public var IsItemsHostProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsItemsHostProperty();
        }
    }
} // IPanelStatics


// type: Microsoft.UI.Xaml.Controls.IRowDefinition
// interface type
open class IRowDefinition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe870f2f, Data2: 0x89ef, Data3 : 0x5dac, Data4 : (0x9f, 0x33, 0x96, 0x8d, 0x0d, 0xc5, 0x77, 0xc3)) }
// method not needed: get_Height
// method not needed: put_Height
// method not needed: get_MaxHeight
// method not needed: put_MaxHeight
// method not needed: get_MinHeight
// method not needed: put_MinHeight
// method not needed: get_ActualHeight
} // IRowDefinition


// type: Microsoft.UI.Xaml.Controls.ISlider
// interface type
open class ISlider
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf7418ecf, Data2: 0x7c35, Data3 : 0x5216, Data4 : (0x8b, 0xf1, 0xd8, 0x2d, 0x47, 0xcc, 0xe5, 0xdf)) }
    // [IsSpecialName] System.Double get_IntermediateValue()
    private func _n_get_IntermediateValue(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IntermediateValue(pThis, __presult))
        }
    }
    public func get_IntermediateValue() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_IntermediateValue(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IntermediateValue(System.Double)
    private func _n_put_IntermediateValue(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IntermediateValue(pThis, value))
        }
    }
    public func put_IntermediateValue(value : Swift.Double) throws -> Void {
        try self._n_put_IntermediateValue(value);
    }
    // [IsSpecialName] System.Double get_StepFrequency()
    private func _n_get_StepFrequency(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StepFrequency(pThis, __presult))
        }
    }
    public func get_StepFrequency() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_StepFrequency(&__result);
        return __result;
    }
    // [IsSpecialName] void put_StepFrequency(System.Double)
    private func _n_put_StepFrequency(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_StepFrequency(pThis, value))
        }
    }
    public func put_StepFrequency(value : Swift.Double) throws -> Void {
        try self._n_put_StepFrequency(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo get_SnapsTo()
    private func _n_get_SnapsTo(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapsTo(pThis, __presult))
        }
    }
    public func get_SnapsTo() throws -> Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo = _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo_StepValues;
        try self._n_get_SnapsTo(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SnapsTo(Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo)
    private func _n_put_SnapsTo(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CSliderSnapsTo) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SnapsTo(pThis, value))
        }
    }
    public func put_SnapsTo(value : Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo) throws -> Void {
        try self._n_put_SnapsTo(value);
    }
    // [IsSpecialName] System.Double get_TickFrequency()
    private func _n_get_TickFrequency(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickFrequency(pThis, __presult))
        }
    }
    public func get_TickFrequency() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_TickFrequency(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TickFrequency(System.Double)
    private func _n_put_TickFrequency(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TickFrequency(pThis, value))
        }
    }
    public func put_TickFrequency(value : Swift.Double) throws -> Void {
        try self._n_put_TickFrequency(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Primitives.TickPlacement get_TickPlacement()
    private func _n_get_TickPlacement(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickPlacement(pThis, __presult))
        }
    }
    public func get_TickPlacement() throws -> Microsoft.UI.Xaml.Controls.Primitives.TickPlacement {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement = _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement_None;
        try self._n_get_TickPlacement(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TickPlacement(Microsoft.UI.Xaml.Controls.Primitives.TickPlacement)
    private func _n_put_TickPlacement(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CTickPlacement) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TickPlacement(pThis, value))
        }
    }
    public func put_TickPlacement(value : Microsoft.UI.Xaml.Controls.Primitives.TickPlacement) throws -> Void {
        try self._n_put_TickPlacement(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Orientation get_Orientation()
    private func _n_get_Orientation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_COrientation>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, __presult))
        }
    }
    public func get_Orientation() throws -> Microsoft.UI.Xaml.Controls.Orientation {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_COrientation = _q_CMicrosoft_CUI_CXaml_CControls_COrientation_Vertical;
        try self._n_get_Orientation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Orientation(Microsoft.UI.Xaml.Controls.Orientation)
    private func _n_put_Orientation(_ value : _q_CMicrosoft_CUI_CXaml_CControls_COrientation) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
        }
    }
    public func put_Orientation(value : Microsoft.UI.Xaml.Controls.Orientation) throws -> Void {
        try self._n_put_Orientation(value);
    }
    // [IsSpecialName] bool get_IsDirectionReversed()
    private func _n_get_IsDirectionReversed(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDirectionReversed(pThis, __presult))
        }
    }
    public func get_IsDirectionReversed() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsDirectionReversed(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsDirectionReversed(bool)
    private func _n_put_IsDirectionReversed(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDirectionReversed(pThis, value))
        }
    }
    public func put_IsDirectionReversed(value : boolean) throws -> Void {
        try self._n_put_IsDirectionReversed(value);
    }
    // [IsSpecialName] bool get_IsThumbToolTipEnabled()
    private func _n_get_IsThumbToolTipEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThumbToolTipEnabled(pThis, __presult))
        }
    }
    public func get_IsThumbToolTipEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsThumbToolTipEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsThumbToolTipEnabled(bool)
    private func _n_put_IsThumbToolTipEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsThumbToolTipEnabled(pThis, value))
        }
    }
    public func put_IsThumbToolTipEnabled(value : boolean) throws -> Void {
        try self._n_put_IsThumbToolTipEnabled(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Data.IValueConverter get_ThumbToolTipValueConverter()
    private func _n_get_ThumbToolTipValueConverter(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbToolTipValueConverter(pThis, __presult))
        }
    }
    public func get_ThumbToolTipValueConverter() throws -> Optional<Microsoft.UI.Xaml.Data.IValueConverter> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter>> = nil;
        try self._n_get_ThumbToolTipValueConverter(&__result);
        return Microsoft.UI.Xaml.Data.IValueConverter(consuming: __result);
    }
    // [IsSpecialName] void put_ThumbToolTipValueConverter(Microsoft.UI.Xaml.Data.IValueConverter)
    private func _n_put_ThumbToolTipValueConverter(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CData_CIValueConverter>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ThumbToolTipValueConverter(pThis, value))
        }
    }
    public func put_ThumbToolTipValueConverter(value : Optional<Microsoft.UI.Xaml.Data.IValueConverter>) throws -> Void {
        try self._n_put_ThumbToolTipValueConverter(RawPointer(value));
    }
    // [IsSpecialName] System.Object get_Header()
    private func _n_get_Header(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Header(pThis, __presult))
        }
    }
    public func get_Header() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_Header(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_Header(System.Object)
    private func _n_put_Header(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Header(pThis, value))
        }
    }
    public func put_Header(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_Header(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DataTemplate get_HeaderTemplate()
    private func _n_get_HeaderTemplate(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplate(pThis, __presult))
        }
    }
    public func get_HeaderTemplate() throws -> Optional<Microsoft.UI.Xaml.IDataTemplate> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>> = nil;
        try self._n_get_HeaderTemplate(&__result);
        return Microsoft.UI.Xaml.IDataTemplate(consuming: __result);
    }
    // [IsSpecialName] void put_HeaderTemplate(Microsoft.UI.Xaml.DataTemplate)
    private func _n_put_HeaderTemplate(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISlider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeaderTemplate(pThis, value))
        }
    }
    public func put_HeaderTemplate(value : Optional<Microsoft.UI.Xaml.IDataTemplate>) throws -> Void {
        try self._n_put_HeaderTemplate(RawPointer(value));
    }
    public var Header : Optional<WinRT.IInspectable> {
        get throws {
            return try get_Header();
        }
    }
    public var HeaderTemplate : Optional<Microsoft.UI.Xaml.IDataTemplate> {
        get throws {
            return try get_HeaderTemplate();
        }
    }
    public var IntermediateValue : Swift.Double {
        get throws {
            return try get_IntermediateValue();
        }
    }
    public var IsDirectionReversed : boolean {
        get throws {
            return try get_IsDirectionReversed();
        }
    }
    public var IsThumbToolTipEnabled : boolean {
        get throws {
            return try get_IsThumbToolTipEnabled();
        }
    }
    public var Orientation : Microsoft.UI.Xaml.Controls.Orientation {
        get throws {
            return try get_Orientation();
        }
    }
    public var SnapsTo : Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo {
        get throws {
            return try get_SnapsTo();
        }
    }
    public var StepFrequency : Swift.Double {
        get throws {
            return try get_StepFrequency();
        }
    }
    public var ThumbToolTipValueConverter : Optional<Microsoft.UI.Xaml.Data.IValueConverter> {
        get throws {
            return try get_ThumbToolTipValueConverter();
        }
    }
    public var TickFrequency : Swift.Double {
        get throws {
            return try get_TickFrequency();
        }
    }
    public var TickPlacement : Microsoft.UI.Xaml.Controls.Primitives.TickPlacement {
        get throws {
            return try get_TickPlacement();
        }
    }
} // ISlider


// type: Microsoft.UI.Xaml.Controls.ISliderFactory
// interface type
// COMPOSITION INTERFACE
open class ISliderFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x06604d71, Data2: 0x34ca, Data3 : 0x5f39, Data4 : (0x96, 0x56, 0x29, 0xd8, 0x1d, 0x3c, 0x11, 0x0c)) }
    // Microsoft.UI.Xaml.Controls.Slider CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CISlider>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.ISlider> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CISlider>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.ISlider(consuming: __result);
    }
} // ISliderFactory


// type: Microsoft.UI.Xaml.Controls.ISliderStatics
// interface type
open class ISliderStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf0541f7b, Data2: 0x6d81, Data3 : 0x59e2, Data4 : (0x99, 0x7a, 0x2e, 0x65, 0xfb, 0xcc, 0xcd, 0x21)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IntermediateValueProperty()
    private func _n_get_IntermediateValueProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IntermediateValueProperty(pThis, __presult))
        }
    }
    public func get_IntermediateValueProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IntermediateValueProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_StepFrequencyProperty()
    private func _n_get_StepFrequencyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StepFrequencyProperty(pThis, __presult))
        }
    }
    public func get_StepFrequencyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_StepFrequencyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SnapsToProperty()
    private func _n_get_SnapsToProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SnapsToProperty(pThis, __presult))
        }
    }
    public func get_SnapsToProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SnapsToProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TickFrequencyProperty()
    private func _n_get_TickFrequencyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickFrequencyProperty(pThis, __presult))
        }
    }
    public func get_TickFrequencyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TickFrequencyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TickPlacementProperty()
    private func _n_get_TickPlacementProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TickPlacementProperty(pThis, __presult))
        }
    }
    public func get_TickPlacementProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TickPlacementProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OrientationProperty()
    private func _n_get_OrientationProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, __presult))
        }
    }
    public func get_OrientationProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OrientationProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsDirectionReversedProperty()
    private func _n_get_IsDirectionReversedProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDirectionReversedProperty(pThis, __presult))
        }
    }
    public func get_IsDirectionReversedProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsDirectionReversedProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsThumbToolTipEnabledProperty()
    private func _n_get_IsThumbToolTipEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThumbToolTipEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsThumbToolTipEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsThumbToolTipEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ThumbToolTipValueConverterProperty()
    private func _n_get_ThumbToolTipValueConverterProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ThumbToolTipValueConverterProperty(pThis, __presult))
        }
    }
    public func get_ThumbToolTipValueConverterProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ThumbToolTipValueConverterProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HeaderProperty()
    private func _n_get_HeaderProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderProperty(pThis, __presult))
        }
    }
    public func get_HeaderProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HeaderProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HeaderTemplateProperty()
    private func _n_get_HeaderTemplateProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CISliderStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeaderTemplateProperty(pThis, __presult))
        }
    }
    public func get_HeaderTemplateProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HeaderTemplateProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var HeaderProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HeaderProperty();
        }
    }
    public var HeaderTemplateProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HeaderTemplateProperty();
        }
    }
    public var IntermediateValueProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IntermediateValueProperty();
        }
    }
    public var IsDirectionReversedProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsDirectionReversedProperty();
        }
    }
    public var IsThumbToolTipEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsThumbToolTipEnabledProperty();
        }
    }
    public var OrientationProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OrientationProperty();
        }
    }
    public var SnapsToProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SnapsToProperty();
        }
    }
    public var StepFrequencyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_StepFrequencyProperty();
        }
    }
    public var ThumbToolTipValueConverterProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ThumbToolTipValueConverterProperty();
        }
    }
    public var TickFrequencyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TickFrequencyProperty();
        }
    }
    public var TickPlacementProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TickPlacementProperty();
        }
    }
} // ISliderStatics


// type: Microsoft.UI.Xaml.Controls.IStackPanel
// interface type
open class IStackPanel
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x493ab00b, Data2: 0x3a6a, Data3 : 0x5e4a, Data4 : (0x94, 0x52, 0x40, 0x7c, 0xd5, 0x19, 0x74, 0x06)) }
    // [IsSpecialName] bool get_AreScrollSnapPointsRegular()
    private func _n_get_AreScrollSnapPointsRegular(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreScrollSnapPointsRegular(pThis, __presult))
        }
    }
    public func get_AreScrollSnapPointsRegular() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AreScrollSnapPointsRegular(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AreScrollSnapPointsRegular(bool)
    private func _n_put_AreScrollSnapPointsRegular(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AreScrollSnapPointsRegular(pThis, value))
        }
    }
    public func put_AreScrollSnapPointsRegular(value : boolean) throws -> Void {
        try self._n_put_AreScrollSnapPointsRegular(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Orientation get_Orientation()
    private func _n_get_Orientation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_COrientation>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Orientation(pThis, __presult))
        }
    }
    public func get_Orientation() throws -> Microsoft.UI.Xaml.Controls.Orientation {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_COrientation = _q_CMicrosoft_CUI_CXaml_CControls_COrientation_Vertical;
        try self._n_get_Orientation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Orientation(Microsoft.UI.Xaml.Controls.Orientation)
    private func _n_put_Orientation(_ value : _q_CMicrosoft_CUI_CXaml_CControls_COrientation) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Orientation(pThis, value))
        }
    }
    public func put_Orientation(value : Microsoft.UI.Xaml.Controls.Orientation) throws -> Void {
        try self._n_put_Orientation(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.BackgroundSizing get_BackgroundSizing()
    private func _n_get_BackgroundSizing(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizing(pThis, __presult))
        }
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        var __result : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing = _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge;
        try self._n_get_BackgroundSizing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BackgroundSizing(Microsoft.UI.Xaml.Controls.BackgroundSizing)
    private func _n_put_BackgroundSizing(_ value : _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BackgroundSizing(pThis, value))
        }
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        try self._n_put_BackgroundSizing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_BorderBrush()
    private func _n_get_BorderBrush(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrush(pThis, __presult))
        }
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_BorderBrush(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_BorderBrush(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_BorderBrush(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderBrush(pThis, value))
        }
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_BorderBrush(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_BorderThickness()
    private func _n_get_BorderThickness(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThickness(pThis, __presult))
        }
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_BorderThickness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_BorderThickness(Microsoft.UI.Xaml.Thickness)
    private func _n_put_BorderThickness(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderThickness(pThis, value))
        }
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_BorderThickness(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.CornerRadius get_CornerRadius()
    private func _n_get_CornerRadius(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CCornerRadius>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadius(pThis, __presult))
        }
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        var __result : _q_CMicrosoft_CUI_CXaml_CCornerRadius = _q_CMicrosoft_CUI_CXaml_CCornerRadius(TopLeft: 0, TopRight: 0, BottomRight: 0, BottomLeft: 0);
        try self._n_get_CornerRadius(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CornerRadius(Microsoft.UI.Xaml.CornerRadius)
    private func _n_put_CornerRadius(_ value : _q_CMicrosoft_CUI_CXaml_CCornerRadius) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CornerRadius(pThis, value))
        }
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        try self._n_put_CornerRadius(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Padding()
    private func _n_get_Padding(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, __presult))
        }
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Padding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Padding(Microsoft.UI.Xaml.Thickness)
    private func _n_put_Padding(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, value))
        }
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Padding(value);
    }
    // [IsSpecialName] System.Double get_Spacing()
    private func _n_get_Spacing(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Spacing(pThis, __presult))
        }
    }
    public func get_Spacing() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Spacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Spacing(System.Double)
    private func _n_put_Spacing(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Spacing(pThis, value))
        }
    }
    public func put_Spacing(value : Swift.Double) throws -> Void {
        try self._n_put_Spacing(value);
    }
    public var AreScrollSnapPointsRegular : boolean {
        get throws {
            return try get_AreScrollSnapPointsRegular();
        }
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
            return try get_BackgroundSizing();
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_BorderBrush();
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_BorderThickness();
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
            return try get_CornerRadius();
        }
    }
    public var Orientation : Microsoft.UI.Xaml.Controls.Orientation {
        get throws {
            return try get_Orientation();
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Padding();
        }
    }
    public var Spacing : Swift.Double {
        get throws {
            return try get_Spacing();
        }
    }
} // IStackPanel


// type: Microsoft.UI.Xaml.Controls.IStackPanelFactory
// interface type
// COMPOSITION INTERFACE
open class IStackPanelFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x64c1d388, Data2: 0x47a2, Data3 : 0x5a74, Data4 : (0xa7, 0x5b, 0x55, 0x9d, 0x15, 0x1e, 0xe5, 0xac)) }
    // Microsoft.UI.Xaml.Controls.StackPanel CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IStackPanel> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIStackPanel>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IStackPanel(consuming: __result);
    }
} // IStackPanelFactory


// type: Microsoft.UI.Xaml.Controls.IStackPanelStatics
// interface type
open class IStackPanelStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x10bb04e3, Data2: 0xeb01, Data3 : 0x5ea8, Data4 : (0x9f, 0x96, 0x69, 0x50, 0x84, 0x79, 0xde, 0xf9)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AreScrollSnapPointsRegularProperty()
    private func _n_get_AreScrollSnapPointsRegularProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AreScrollSnapPointsRegularProperty(pThis, __presult))
        }
    }
    public func get_AreScrollSnapPointsRegularProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AreScrollSnapPointsRegularProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OrientationProperty()
    private func _n_get_OrientationProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientationProperty(pThis, __presult))
        }
    }
    public func get_OrientationProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OrientationProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BackgroundSizingProperty()
    private func _n_get_BackgroundSizingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BackgroundSizingProperty(pThis, __presult))
        }
    }
    public func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BackgroundSizingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderBrushProperty()
    private func _n_get_BorderBrushProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderBrushProperty(pThis, __presult))
        }
    }
    public func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderBrushProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_BorderThicknessProperty()
    private func _n_get_BorderThicknessProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderThicknessProperty(pThis, __presult))
        }
    }
    public func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_BorderThicknessProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CornerRadiusProperty()
    private func _n_get_CornerRadiusProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CornerRadiusProperty(pThis, __presult))
        }
    }
    public func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CornerRadiusProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PaddingProperty()
    private func _n_get_PaddingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, __presult))
        }
    }
    public func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PaddingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SpacingProperty()
    private func _n_get_SpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIStackPanelStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpacingProperty(pThis, __presult))
        }
    }
    public func get_SpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var AreScrollSnapPointsRegularProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AreScrollSnapPointsRegularProperty();
        }
    }
    public var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BackgroundSizingProperty();
        }
    }
    public var BorderBrushProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderBrushProperty();
        }
    }
    public var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_BorderThicknessProperty();
        }
    }
    public var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CornerRadiusProperty();
        }
    }
    public var OrientationProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OrientationProperty();
        }
    }
    public var PaddingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PaddingProperty();
        }
    }
    public var SpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SpacingProperty();
        }
    }
} // IStackPanelStatics


// type: Microsoft.UI.Xaml.Controls.ITextBlock
// interface type
open class ITextBlock
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1ac8d84f, Data2: 0x392c, Data3 : 0x5c7e, Data4 : (0x83, 0xf5, 0xa5, 0x3e, 0x3b, 0xf0, 0xab, 0xb0)) }
    // [IsSpecialName] System.Double get_FontSize()
    private func _n_get_FontSize(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, __presult))
        }
    }
    public func get_FontSize() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_FontSize(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontSize(System.Double)
    private func _n_put_FontSize(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
        }
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        try self._n_put_FontSize(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.FontFamily get_FontFamily()
    private func _n_get_FontFamily(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, __presult))
        }
    }
    public func get_FontFamily() throws -> Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>> = nil;
        try self._n_get_FontFamily(&__result);
        return Microsoft.UI.Xaml.Media.IFontFamily(consuming: __result);
    }
    // [IsSpecialName] void put_FontFamily(Microsoft.UI.Xaml.Media.FontFamily)
    private func _n_put_FontFamily(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, value))
        }
    }
    public func put_FontFamily(value : Optional<Microsoft.UI.Xaml.Media.IFontFamily>) throws -> Void {
        try self._n_put_FontFamily(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Text.FontWeight get_FontWeight()
    private func _n_get_FontWeight(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontWeight>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, __presult))
        }
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        var __result : _q_CWindows_CUI_CText_CFontWeight = _q_CWindows_CUI_CText_CFontWeight(Weight: 0);
        try self._n_get_FontWeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontWeight(Windows.UI.Text.FontWeight)
    private func _n_put_FontWeight(_ value : _q_CWindows_CUI_CText_CFontWeight) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, value))
        }
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        try self._n_put_FontWeight(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStyle get_FontStyle()
    private func _n_get_FontStyle(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStyle>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, __presult))
        }
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        var __result : _q_CWindows_CUI_CText_CFontStyle = _q_CWindows_CUI_CText_CFontStyle_Normal;
        try self._n_get_FontStyle(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStyle(Windows.UI.Text.FontStyle)
    private func _n_put_FontStyle(_ value : _q_CWindows_CUI_CText_CFontStyle) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
        }
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        try self._n_put_FontStyle(value);
    }
    // [IsSpecialName] Windows.UI.Text.FontStretch get_FontStretch()
    private func _n_get_FontStretch(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CFontStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, __presult))
        }
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        var __result : _q_CWindows_CUI_CText_CFontStretch = _q_CWindows_CUI_CText_CFontStretch_Undefined;
        try self._n_get_FontStretch(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FontStretch(Windows.UI.Text.FontStretch)
    private func _n_put_FontStretch(_ value : _q_CWindows_CUI_CText_CFontStretch) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
        }
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        try self._n_put_FontStretch(value);
    }
    // [IsSpecialName] System.Int32 get_CharacterSpacing()
    private func _n_get_CharacterSpacing(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacing(pThis, __presult))
        }
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_CharacterSpacing(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CharacterSpacing(System.Int32)
    private func _n_put_CharacterSpacing(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CharacterSpacing(pThis, value))
        }
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        try self._n_put_CharacterSpacing(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_Foreground()
    private func _n_get_Foreground(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, __presult))
        }
    }
    public func get_Foreground() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_Foreground(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_Foreground(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_Foreground(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, value))
        }
    }
    public func put_Foreground(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_Foreground(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextWrapping get_TextWrapping()
    private func _n_get_TextWrapping(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextWrapping>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrapping(pThis, __presult))
        }
    }
    public func get_TextWrapping() throws -> Microsoft.UI.Xaml.TextWrapping {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextWrapping = _q_CMicrosoft_CUI_CXaml_CTextWrapping_NoWrap;
        try self._n_get_TextWrapping(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextWrapping(Microsoft.UI.Xaml.TextWrapping)
    private func _n_put_TextWrapping(_ value : _q_CMicrosoft_CUI_CXaml_CTextWrapping) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextWrapping(pThis, value))
        }
    }
    public func put_TextWrapping(value : Microsoft.UI.Xaml.TextWrapping) throws -> Void {
        try self._n_put_TextWrapping(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextTrimming get_TextTrimming()
    private func _n_get_TextTrimming(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextTrimming>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimming(pThis, __presult))
        }
    }
    public func get_TextTrimming() throws -> Microsoft.UI.Xaml.TextTrimming {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextTrimming = _q_CMicrosoft_CUI_CXaml_CTextTrimming_None;
        try self._n_get_TextTrimming(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextTrimming(Microsoft.UI.Xaml.TextTrimming)
    private func _n_put_TextTrimming(_ value : _q_CMicrosoft_CUI_CXaml_CTextTrimming) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextTrimming(pThis, value))
        }
    }
    public func put_TextTrimming(value : Microsoft.UI.Xaml.TextTrimming) throws -> Void {
        try self._n_put_TextTrimming(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextAlignment get_TextAlignment()
    private func _n_get_TextAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignment(pThis, __presult))
        }
    }
    public func get_TextAlignment() throws -> Microsoft.UI.Xaml.TextAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextAlignment = _q_CMicrosoft_CUI_CXaml_CTextAlignment_Center;
        try self._n_get_TextAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextAlignment(Microsoft.UI.Xaml.TextAlignment)
    private func _n_put_TextAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CTextAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextAlignment(pThis, value))
        }
    }
    public func put_TextAlignment(value : Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        try self._n_put_TextAlignment(value);
    }
    // [IsSpecialName] System.String get_Text()
    private func _n_get_Text(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Text(pThis, __presult))
        }
    }
    public func get_Text() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Text(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Text(System.String)
    private func _n_put_Text(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Text(pThis, value))
        }
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Text(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.InlineCollection get_Inlines()
    private func _n_get_Inlines(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Inlines(pThis, __presult))
        }
    }
    public func get_Inlines() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline>> = nil;
        try self._n_get_Inlines(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Padding()
    private func _n_get_Padding(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Padding(pThis, __presult))
        }
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Padding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Padding(Microsoft.UI.Xaml.Thickness)
    private func _n_put_Padding(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Padding(pThis, value))
        }
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Padding(value);
    }
    // [IsSpecialName] System.Double get_LineHeight()
    private func _n_get_LineHeight(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeight(pThis, __presult))
        }
    }
    public func get_LineHeight() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_LineHeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineHeight(System.Double)
    private func _n_put_LineHeight(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineHeight(pThis, value))
        }
    }
    public func put_LineHeight(value : Swift.Double) throws -> Void {
        try self._n_put_LineHeight(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.LineStackingStrategy get_LineStackingStrategy()
    private func _n_get_LineStackingStrategy(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CLineStackingStrategy>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategy(pThis, __presult))
        }
    }
    public func get_LineStackingStrategy() throws -> Microsoft.UI.Xaml.LineStackingStrategy {
        var __result : _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy = _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_MaxHeight;
        try self._n_get_LineStackingStrategy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_LineStackingStrategy(Microsoft.UI.Xaml.LineStackingStrategy)
    private func _n_put_LineStackingStrategy(_ value : _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineStackingStrategy(pThis, value))
        }
    }
    public func put_LineStackingStrategy(value : Microsoft.UI.Xaml.LineStackingStrategy) throws -> Void {
        try self._n_put_LineStackingStrategy(value);
    }
    // [IsSpecialName] bool get_IsTextSelectionEnabled()
    private func _n_get_IsTextSelectionEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabled(pThis, __presult))
        }
    }
    public func get_IsTextSelectionEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextSelectionEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTextSelectionEnabled(bool)
    private func _n_put_IsTextSelectionEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextSelectionEnabled(pThis, value))
        }
    }
    public func put_IsTextSelectionEnabled(value : boolean) throws -> Void {
        try self._n_put_IsTextSelectionEnabled(value);
    }
    // [IsSpecialName] System.String get_SelectedText()
    private func _n_get_SelectedText(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedText(pThis, __presult))
        }
    }
    public func get_SelectedText() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_SelectedText(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_ContentStart()
    private func _n_get_ContentStart(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentStart(pThis, __presult))
        }
    }
    public func get_ContentStart() throws -> Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_ContentStart(&__result);
        return Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_ContentEnd()
    private func _n_get_ContentEnd(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentEnd(pThis, __presult))
        }
    }
    public func get_ContentEnd() throws -> Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_ContentEnd(&__result);
        return Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_SelectionStart()
    private func _n_get_SelectionStart(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionStart(pThis, __presult))
        }
    }
    public func get_SelectionStart() throws -> Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_SelectionStart(&__result);
        return Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Documents.TextPointer get_SelectionEnd()
    private func _n_get_SelectionEnd(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionEnd(pThis, __presult))
        }
    }
    public func get_SelectionEnd() throws -> Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>> = nil;
        try self._n_get_SelectionEnd(&__result);
        return Microsoft.UI.Xaml.Documents.ITextPointer(consuming: __result);
    }
    // [IsSpecialName] System.Double get_BaselineOffset()
    private func _n_get_BaselineOffset(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaselineOffset(pThis, __presult))
        }
    }
    public func get_BaselineOffset() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_BaselineOffset(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.SolidColorBrush get_SelectionHighlightColor()
    private func _n_get_SelectionHighlightColor(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColor(pThis, __presult))
        }
    }
    public func get_SelectionHighlightColor() throws -> Optional<Microsoft.UI.Xaml.Media.ISolidColorBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>> = nil;
        try self._n_get_SelectionHighlightColor(&__result);
        return Microsoft.UI.Xaml.Media.ISolidColorBrush(consuming: __result);
    }
    // [IsSpecialName] void put_SelectionHighlightColor(Microsoft.UI.Xaml.Media.SolidColorBrush)
    private func _n_put_SelectionHighlightColor(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionHighlightColor(pThis, value))
        }
    }
    public func put_SelectionHighlightColor(value : Optional<Microsoft.UI.Xaml.Media.ISolidColorBrush>) throws -> Void {
        try self._n_put_SelectionHighlightColor(RawPointer(value));
    }
    // [IsSpecialName] System.Int32 get_MaxLines()
    private func _n_get_MaxLines(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLines(pThis, __presult))
        }
    }
    public func get_MaxLines() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_MaxLines(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxLines(System.Int32)
    private func _n_put_MaxLines(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxLines(pThis, value))
        }
    }
    public func put_MaxLines(value : Swift.Int32) throws -> Void {
        try self._n_put_MaxLines(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextLineBounds get_TextLineBounds()
    private func _n_get_TextLineBounds(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextLineBounds>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBounds(pThis, __presult))
        }
    }
    public func get_TextLineBounds() throws -> Microsoft.UI.Xaml.TextLineBounds {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextLineBounds = _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Full;
        try self._n_get_TextLineBounds(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextLineBounds(Microsoft.UI.Xaml.TextLineBounds)
    private func _n_put_TextLineBounds(_ value : _q_CMicrosoft_CUI_CXaml_CTextLineBounds) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextLineBounds(pThis, value))
        }
    }
    public func put_TextLineBounds(value : Microsoft.UI.Xaml.TextLineBounds) throws -> Void {
        try self._n_put_TextLineBounds(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.OpticalMarginAlignment get_OpticalMarginAlignment()
    private func _n_get_OpticalMarginAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignment(pThis, __presult))
        }
    }
    public func get_OpticalMarginAlignment() throws -> Microsoft.UI.Xaml.OpticalMarginAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment = _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_None;
        try self._n_get_OpticalMarginAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_OpticalMarginAlignment(Microsoft.UI.Xaml.OpticalMarginAlignment)
    private func _n_put_OpticalMarginAlignment(_ value : _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalMarginAlignment(pThis, value))
        }
    }
    public func put_OpticalMarginAlignment(value : Microsoft.UI.Xaml.OpticalMarginAlignment) throws -> Void {
        try self._n_put_OpticalMarginAlignment(value);
    }
    // [IsSpecialName] bool get_IsColorFontEnabled()
    private func _n_get_IsColorFontEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabled(pThis, __presult))
        }
    }
    public func get_IsColorFontEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsColorFontEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsColorFontEnabled(bool)
    private func _n_put_IsColorFontEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsColorFontEnabled(pThis, value))
        }
    }
    public func put_IsColorFontEnabled(value : boolean) throws -> Void {
        try self._n_put_IsColorFontEnabled(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextReadingOrder get_TextReadingOrder()
    private func _n_get_TextReadingOrder(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextReadingOrder>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrder(pThis, __presult))
        }
    }
    public func get_TextReadingOrder() throws -> Microsoft.UI.Xaml.TextReadingOrder {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextReadingOrder = _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_Default;
        try self._n_get_TextReadingOrder(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextReadingOrder(Microsoft.UI.Xaml.TextReadingOrder)
    private func _n_put_TextReadingOrder(_ value : _q_CMicrosoft_CUI_CXaml_CTextReadingOrder) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextReadingOrder(pThis, value))
        }
    }
    public func put_TextReadingOrder(value : Microsoft.UI.Xaml.TextReadingOrder) throws -> Void {
        try self._n_put_TextReadingOrder(value);
    }
    // [IsSpecialName] bool get_IsTextScaleFactorEnabled()
    private func _n_get_IsTextScaleFactorEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabled(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextScaleFactorEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTextScaleFactorEnabled(bool)
    private func _n_put_IsTextScaleFactorEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTextScaleFactorEnabled(pThis, value))
        }
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        try self._n_put_IsTextScaleFactorEnabled(value);
    }
    // [IsSpecialName] Windows.UI.Text.TextDecorations get_TextDecorations()
    private func _n_get_TextDecorations(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CText_CTextDecorations>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorations(pThis, __presult))
        }
    }
    public func get_TextDecorations() throws -> Windows.UI.Text.TextDecorations {
        var __result : _q_CWindows_CUI_CText_CTextDecorations = _q_CWindows_CUI_CText_CTextDecorations_None;
        try self._n_get_TextDecorations(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TextDecorations(Windows.UI.Text.TextDecorations)
    private func _n_put_TextDecorations(_ value : _q_CWindows_CUI_CText_CTextDecorations) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TextDecorations(pThis, value))
        }
    }
    public func put_TextDecorations(value : Windows.UI.Text.TextDecorations) throws -> Void {
        try self._n_put_TextDecorations(value);
    }
    // [IsSpecialName] bool get_IsTextTrimmed()
    private func _n_get_IsTextTrimmed(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmed(pThis, __presult))
        }
    }
    public func get_IsTextTrimmed() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTextTrimmed(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.TextAlignment get_HorizontalTextAlignment()
    private func _n_get_HorizontalTextAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CTextAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalTextAlignment() throws -> Microsoft.UI.Xaml.TextAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CTextAlignment = _q_CMicrosoft_CUI_CXaml_CTextAlignment_Center;
        try self._n_get_HorizontalTextAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalTextAlignment(Microsoft.UI.Xaml.TextAlignment)
    private func _n_put_HorizontalTextAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CTextAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalTextAlignment(pThis, value))
        }
    }
    public func put_HorizontalTextAlignment(value : Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        try self._n_put_HorizontalTextAlignment(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Documents.TextHighlighter> get_TextHighlighters()
    private func _n_get_TextHighlighters(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextHighlighters(pThis, __presult))
        }
    }
    public func get_TextHighlighters() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter>> = nil;
        try self._n_get_TextHighlighters(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase get_SelectionFlyout()
    private func _n_get_SelectionFlyout(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyout(pThis, __presult))
        }
    }
    public func get_SelectionFlyout() throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>> = nil;
        try self._n_get_SelectionFlyout(&__result);
        return Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase(consuming: __result);
    }
    // [IsSpecialName] void put_SelectionFlyout(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)
    private func _n_put_SelectionFlyout(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SelectionFlyout(pThis, value))
        }
    }
    public func put_SelectionFlyout(value : Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase>) throws -> Void {
        try self._n_put_SelectionFlyout(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SelectionChanged(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_SelectionChanged(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SelectionChanged(pThis, handler, __presult))
        }
    }
    public func add_SelectionChanged(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SelectionChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SelectionChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_SelectionChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SelectionChanged(pThis, token))
        }
    }
    public func remove_SelectionChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SelectionChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ContextMenuOpening(Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler)
    private func _n_add_ContextMenuOpening(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIContextMenuOpeningEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextMenuOpening(pThis, handler, __presult))
        }
    }
    public func add_ContextMenuOpening(handler : Optional<Microsoft.UI.Xaml.Controls.IContextMenuOpeningEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ContextMenuOpening(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ContextMenuOpening(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ContextMenuOpening(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextMenuOpening(pThis, token))
        }
    }
    public func remove_ContextMenuOpening(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ContextMenuOpening(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_IsTextTrimmedChanged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock,Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>)
    private func _n_add_IsTextTrimmedChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_IsTextTrimmedChanged(pThis, handler, __presult))
        }
    }
    public func add_IsTextTrimmedChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_IsTextTrimmedChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_IsTextTrimmedChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_IsTextTrimmedChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_IsTextTrimmedChanged(pThis, token))
        }
    }
    public func remove_IsTextTrimmedChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_IsTextTrimmedChanged(token);
    }
    // void SelectAll()
    private func _n_SelectAll() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SelectAll(pThis))
        }
    }
    public func SelectAll() throws -> Void {
        try self._n_SelectAll();
    }
    // void Select(Microsoft.UI.Xaml.Documents.TextPointer, Microsoft.UI.Xaml.Documents.TextPointer)
    private func _n_Select(_ start : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>, _ end : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CDocuments_CITextPointer>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Select(pThis, start, end))
        }
    }
    public func Select(start : Optional<Microsoft.UI.Xaml.Documents.ITextPointer>, end : Optional<Microsoft.UI.Xaml.Documents.ITextPointer>) throws -> Void {
        try self._n_Select(RawPointer(start), RawPointer(end));
    }
    // Microsoft.UI.Composition.CompositionBrush GetAlphaMask()
    private func _n_GetAlphaMask(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositionBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAlphaMask(pThis, __presult))
        }
    }
    public func GetAlphaMask() throws -> Optional<Microsoft.UI.Composition.ICompositionBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositionBrush>> = nil;
        try self._n_GetAlphaMask(&__result);
        return Microsoft.UI.Composition.ICompositionBrush(consuming: __result);
    }
    // void CopySelectionToClipboard()
    private func _n_CopySelectionToClipboard() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlock.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CopySelectionToClipboard(pThis))
        }
    }
    public func CopySelectionToClipboard() throws -> Void {
        try self._n_CopySelectionToClipboard();
    }
    public var BaselineOffset : Swift.Double {
        get throws {
            return try get_BaselineOffset();
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
            return try get_CharacterSpacing();
        }
    }
    public var ContentEnd : Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_ContentEnd();
        }
    }
    public var ContentStart : Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_ContentStart();
        }
    }
    public var FontFamily : Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        get throws {
            return try get_FontFamily();
        }
    }
    public var FontSize : Swift.Double {
        get throws {
            return try get_FontSize();
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
            return try get_FontStretch();
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
            return try get_FontStyle();
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
            return try get_FontWeight();
        }
    }
    public var Foreground : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_Foreground();
        }
    }
    public var HorizontalTextAlignment : Microsoft.UI.Xaml.TextAlignment {
        get throws {
            return try get_HorizontalTextAlignment();
        }
    }
    public var Inlines : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CInline> {
        get throws {
            return try get_Inlines();
        }
    }
    public var IsColorFontEnabled : boolean {
        get throws {
            return try get_IsColorFontEnabled();
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
            return try get_IsTextScaleFactorEnabled();
        }
    }
    public var IsTextSelectionEnabled : boolean {
        get throws {
            return try get_IsTextSelectionEnabled();
        }
    }
    public var IsTextTrimmed : boolean {
        get throws {
            return try get_IsTextTrimmed();
        }
    }
    public var LineHeight : Swift.Double {
        get throws {
            return try get_LineHeight();
        }
    }
    public var LineStackingStrategy : Microsoft.UI.Xaml.LineStackingStrategy {
        get throws {
            return try get_LineStackingStrategy();
        }
    }
    public var MaxLines : Swift.Int32 {
        get throws {
            return try get_MaxLines();
        }
    }
    public var OpticalMarginAlignment : Microsoft.UI.Xaml.OpticalMarginAlignment {
        get throws {
            return try get_OpticalMarginAlignment();
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Padding();
        }
    }
    public var SelectedText : Swift.String {
        get throws {
            return try get_SelectedText();
        }
    }
    public var SelectionEnd : Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_SelectionEnd();
        }
    }
    public var SelectionFlyout : Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        get throws {
            return try get_SelectionFlyout();
        }
    }
    public var SelectionHighlightColor : Optional<Microsoft.UI.Xaml.Media.ISolidColorBrush> {
        get throws {
            return try get_SelectionHighlightColor();
        }
    }
    public var SelectionStart : Optional<Microsoft.UI.Xaml.Documents.ITextPointer> {
        get throws {
            return try get_SelectionStart();
        }
    }
    public var Text : Swift.String {
        get throws {
            return try get_Text();
        }
    }
    public var TextAlignment : Microsoft.UI.Xaml.TextAlignment {
        get throws {
            return try get_TextAlignment();
        }
    }
    public var TextDecorations : Windows.UI.Text.TextDecorations {
        get throws {
            return try get_TextDecorations();
        }
    }
    public var TextHighlighters : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        get throws {
            return try get_TextHighlighters();
        }
    }
    public var TextLineBounds : Microsoft.UI.Xaml.TextLineBounds {
        get throws {
            return try get_TextLineBounds();
        }
    }
    public var TextReadingOrder : Microsoft.UI.Xaml.TextReadingOrder {
        get throws {
            return try get_TextReadingOrder();
        }
    }
    public var TextTrimming : Microsoft.UI.Xaml.TextTrimming {
        get throws {
            return try get_TextTrimming();
        }
    }
    public var TextWrapping : Microsoft.UI.Xaml.TextWrapping {
        get throws {
            return try get_TextWrapping();
        }
    }
} // ITextBlock


// type: Microsoft.UI.Xaml.Controls.ITextBlockStatics
// interface type
open class ITextBlockStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3187104b, Data2: 0x65c2, Data3 : 0x5e53, Data4 : (0xb8, 0x89, 0xc8, 0x27, 0x2b, 0x13, 0x14, 0xcd)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontSizeProperty()
    private func _n_get_FontSizeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSizeProperty(pThis, __presult))
        }
    }
    public func get_FontSizeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontSizeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontFamilyProperty()
    private func _n_get_FontFamilyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamilyProperty(pThis, __presult))
        }
    }
    public func get_FontFamilyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontFamilyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontWeightProperty()
    private func _n_get_FontWeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeightProperty(pThis, __presult))
        }
    }
    public func get_FontWeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontWeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStyleProperty()
    private func _n_get_FontStyleProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyleProperty(pThis, __presult))
        }
    }
    public func get_FontStyleProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStyleProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FontStretchProperty()
    private func _n_get_FontStretchProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretchProperty(pThis, __presult))
        }
    }
    public func get_FontStretchProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FontStretchProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CharacterSpacingProperty()
    private func _n_get_CharacterSpacingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterSpacingProperty(pThis, __presult))
        }
    }
    public func get_CharacterSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CharacterSpacingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ForegroundProperty()
    private func _n_get_ForegroundProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForegroundProperty(pThis, __presult))
        }
    }
    public func get_ForegroundProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ForegroundProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextWrappingProperty()
    private func _n_get_TextWrappingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextWrappingProperty(pThis, __presult))
        }
    }
    public func get_TextWrappingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextWrappingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextTrimmingProperty()
    private func _n_get_TextTrimmingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextTrimmingProperty(pThis, __presult))
        }
    }
    public func get_TextTrimmingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextTrimmingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextAlignmentProperty()
    private func _n_get_TextAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextAlignmentProperty(pThis, __presult))
        }
    }
    public func get_TextAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextProperty()
    private func _n_get_TextProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextProperty(pThis, __presult))
        }
    }
    public func get_TextProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PaddingProperty()
    private func _n_get_PaddingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingProperty(pThis, __presult))
        }
    }
    public func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PaddingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_LineHeightProperty()
    private func _n_get_LineHeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineHeightProperty(pThis, __presult))
        }
    }
    public func get_LineHeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_LineHeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_LineStackingStrategyProperty()
    private func _n_get_LineStackingStrategyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineStackingStrategyProperty(pThis, __presult))
        }
    }
    public func get_LineStackingStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_LineStackingStrategyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextSelectionEnabledProperty()
    private func _n_get_IsTextSelectionEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextSelectionEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsTextSelectionEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextSelectionEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SelectedTextProperty()
    private func _n_get_SelectedTextProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectedTextProperty(pThis, __presult))
        }
    }
    public func get_SelectedTextProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SelectedTextProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SelectionHighlightColorProperty()
    private func _n_get_SelectionHighlightColorProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionHighlightColorProperty(pThis, __presult))
        }
    }
    public func get_SelectionHighlightColorProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SelectionHighlightColorProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MaxLinesProperty()
    private func _n_get_MaxLinesProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxLinesProperty(pThis, __presult))
        }
    }
    public func get_MaxLinesProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MaxLinesProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextLineBoundsProperty()
    private func _n_get_TextLineBoundsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextLineBoundsProperty(pThis, __presult))
        }
    }
    public func get_TextLineBoundsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextLineBoundsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OpticalMarginAlignmentProperty()
    private func _n_get_OpticalMarginAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalMarginAlignmentProperty(pThis, __presult))
        }
    }
    public func get_OpticalMarginAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OpticalMarginAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsColorFontEnabledProperty()
    private func _n_get_IsColorFontEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsColorFontEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsColorFontEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsColorFontEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextReadingOrderProperty()
    private func _n_get_TextReadingOrderProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextReadingOrderProperty(pThis, __presult))
        }
    }
    public func get_TextReadingOrderProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextReadingOrderProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextScaleFactorEnabledProperty()
    private func _n_get_IsTextScaleFactorEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextScaleFactorEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsTextScaleFactorEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextScaleFactorEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TextDecorationsProperty()
    private func _n_get_TextDecorationsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TextDecorationsProperty(pThis, __presult))
        }
    }
    public func get_TextDecorationsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TextDecorationsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTextTrimmedProperty()
    private func _n_get_IsTextTrimmedProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTextTrimmedProperty(pThis, __presult))
        }
    }
    public func get_IsTextTrimmedProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTextTrimmedProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HorizontalTextAlignmentProperty()
    private func _n_get_HorizontalTextAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalTextAlignmentProperty(pThis, __presult))
        }
    }
    public func get_HorizontalTextAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HorizontalTextAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SelectionFlyoutProperty()
    private func _n_get_SelectionFlyoutProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CITextBlockStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SelectionFlyoutProperty(pThis, __presult))
        }
    }
    public func get_SelectionFlyoutProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SelectionFlyoutProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var CharacterSpacingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CharacterSpacingProperty();
        }
    }
    public var FontFamilyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontFamilyProperty();
        }
    }
    public var FontSizeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontSizeProperty();
        }
    }
    public var FontStretchProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStretchProperty();
        }
    }
    public var FontStyleProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontStyleProperty();
        }
    }
    public var FontWeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FontWeightProperty();
        }
    }
    public var ForegroundProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ForegroundProperty();
        }
    }
    public var HorizontalTextAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HorizontalTextAlignmentProperty();
        }
    }
    public var IsColorFontEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsColorFontEnabledProperty();
        }
    }
    public var IsTextScaleFactorEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextScaleFactorEnabledProperty();
        }
    }
    public var IsTextSelectionEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextSelectionEnabledProperty();
        }
    }
    public var IsTextTrimmedProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTextTrimmedProperty();
        }
    }
    public var LineHeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_LineHeightProperty();
        }
    }
    public var LineStackingStrategyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_LineStackingStrategyProperty();
        }
    }
    public var MaxLinesProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MaxLinesProperty();
        }
    }
    public var OpticalMarginAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OpticalMarginAlignmentProperty();
        }
    }
    public var PaddingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PaddingProperty();
        }
    }
    public var SelectedTextProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SelectedTextProperty();
        }
    }
    public var SelectionFlyoutProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SelectionFlyoutProperty();
        }
    }
    public var SelectionHighlightColorProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SelectionHighlightColorProperty();
        }
    }
    public var TextAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextAlignmentProperty();
        }
    }
    public var TextDecorationsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextDecorationsProperty();
        }
    }
    public var TextLineBoundsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextLineBoundsProperty();
        }
    }
    public var TextProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextProperty();
        }
    }
    public var TextReadingOrderProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextReadingOrderProperty();
        }
    }
    public var TextTrimmingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextTrimmingProperty();
        }
    }
    public var TextWrappingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TextWrappingProperty();
        }
    }
} // ITextBlockStatics


// type: Microsoft.UI.Xaml.Controls.IUIElementCollection
// interface type
open class IUIElementCollection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x23050cb1, Data2: 0xdb88, Data3 : 0x54ed, Data4 : (0x90, 0x83, 0x5e, 0xcf, 0xb1, 0x25, 0x12, 0xfd)) }
    // void Move(System.UInt32, System.UInt32)
    private func _n_Move(_ oldIndex : UINT32, _ newIndex : UINT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUIElementCollection.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Move(pThis, oldIndex, newIndex))
        }
    }
    public func Move(oldIndex : Swift.UInt32, newIndex : Swift.UInt32) throws -> Void {
        try self._n_Move(oldIndex, newIndex);
    }
} // IUIElementCollection


// type: Microsoft.UI.Xaml.Controls.IUserControl
// interface type
open class IUserControl
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xab8a0a51, Data2: 0x44cf, Data3 : 0x5337, Data4 : (0xad, 0x77, 0x8e, 0xda, 0x17, 0x95, 0xe9, 0xf6)) }
    // [IsSpecialName] Microsoft.UI.Xaml.UIElement get_Content()
    private func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Optional<Microsoft.UI.Xaml.IUIElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>> = nil;
        try self._n_get_Content(&__result);
        return Microsoft.UI.Xaml.IUIElement(consuming: __result);
    }
    // [IsSpecialName] void put_Content(Microsoft.UI.Xaml.UIElement)
    private func _n_put_Content(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControl.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, value))
        }
    }
    public func put_Content(value : Optional<Microsoft.UI.Xaml.IUIElement>) throws -> Void {
        try self._n_put_Content(RawPointer(value));
    }
    public var Content : Optional<Microsoft.UI.Xaml.IUIElement> {
        get throws {
            return try get_Content();
        }
    }
} // IUserControl


// type: Microsoft.UI.Xaml.Controls.IUserControlFactory
// interface type
// COMPOSITION INTERFACE
open class IUserControlFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61ac9074, Data2: 0xaab3, Data3 : 0x50b8, Data4 : (0x8b, 0x18, 0xd4, 0xd2, 0x57, 0x3a, 0x52, 0x35)) }
    // Microsoft.UI.Xaml.Controls.UserControl CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Controls.IUserControl> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIUserControl>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Controls.IUserControl(consuming: __result);
    }
} // IUserControlFactory


// type: Microsoft.UI.Xaml.Controls.IUserControlStatics
// interface type
open class IUserControlStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x575e8fa1, Data2: 0x2e2d, Data3 : 0x5857, Data4 : (0x9a, 0x93, 0x6b, 0x11, 0xe5, 0x43, 0x16, 0xba)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ContentProperty()
    private func _n_get_ContentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CControls_CIUserControlStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, __presult))
        }
    }
    public func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ContentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ContentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ContentProperty();
        }
    }
} // IUserControlStatics


// type: Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs
// runtime class
public class IsTextTrimmedChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IIsTextTrimmedChangedEventArgs { return _self; }
}

// type: Microsoft.UI.Xaml.Controls.Orientation
// enum type
public typealias Orientation = _q_CMicrosoft_CUI_CXaml_CControls_COrientation;

// type: Microsoft.UI.Xaml.Controls.Panel
// runtime class
open class Panel
    :
    Microsoft.UI.Xaml.FrameworkElement
{
    private var _self : Microsoft.UI.Xaml.Controls.IPanel;
    public init(plok: Microsoft.UI.Xaml.Controls.IPanel?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IPanel { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IPanelFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IPanelFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Panel");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IPanelStatics {
        static var x : IPanelStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Panel")
    }
    public static var PanelStatics : IPanelStatics {
        _IPanelStatics.x
    }
    public static func get_BackgroundProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.get_BackgroundProperty());
    }
    public static func get_IsItemsHostProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.get_IsItemsHostProperty());
    }
    public static func get_ChildrenTransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.get_ChildrenTransitionsProperty());
    }
    public static var BackgroundProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.BackgroundProperty);
        }
    }
    public static var ChildrenTransitionsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.ChildrenTransitionsProperty);
        }
    }
    public static var IsItemsHostProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: PanelStatics.IsItemsHostProperty);
        }
    }
    public func get_Children() throws -> Optional<Microsoft.UI.Xaml.Controls.UIElementCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.UIElementCollection(plok: _ifc.get_Children());
    }
    public func get_Background() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Background());
    }
    public func put_Background(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.put_Background(value: value!.Interface());
    }
    public func get_IsItemsHost() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.get_IsItemsHost();
    }
    public func get_ChildrenTransitions() throws -> Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.get_ChildrenTransitions());
    }
    public func put_ChildrenTransitions(value : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.put_ChildrenTransitions(value: value!.Interface());
    }
    public func get_BackgroundTransition() throws -> Optional<Microsoft.UI.Xaml.BrushTransition> {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.BrushTransition(plok: _ifc.get_BackgroundTransition());
    }
    public func put_BackgroundTransition(value : Optional<Microsoft.UI.Xaml.BrushTransition>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.put_BackgroundTransition(value: value!.Interface());
    }
    public var Background : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Background);
        }
    }
    public var BackgroundTransition : Optional<Microsoft.UI.Xaml.BrushTransition> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.BrushTransition(plok: _ifc.BackgroundTransition);
        }
    }
    public var Children : Optional<Microsoft.UI.Xaml.Controls.UIElementCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.UIElementCollection(plok: _ifc.Children);
        }
    }
    public var ChildrenTransitions : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.ChildrenTransitions);
        }
    }
    public var IsItemsHost : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IPanel = try _self.QueryInterface();
        return try _ifc.IsItemsHost;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.RequiresPointer
// enum type
public typealias RequiresPointer = _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer;

// type: Microsoft.UI.Xaml.Controls.RowDefinition
// runtime class
public class RowDefinition
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Controls.IRowDefinition;
    public init(plok: Microsoft.UI.Xaml.Controls.IRowDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IRowDefinition { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Controls.RowDefinition")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Controls.IRowDefinitionStatics
    // method not needed: get_Height
    // method not needed: put_Height
    // method not needed: get_MaxHeight
    // method not needed: put_MaxHeight
    // method not needed: get_MinHeight
    // method not needed: put_MinHeight
    // method not needed: get_ActualHeight
}

// type: Microsoft.UI.Xaml.Controls.RowDefinitionCollection
// runtime class
public class RowDefinitionCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition { return _self; }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.Controls.RowDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.RowDefinition(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.Controls.RowDefinition>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CIRowDefinition>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CControls_CRowDefinition = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Microsoft.UI.Xaml.Controls.RowDefinition, Microsoft, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.Controls.Slider
// runtime class
open class Slider
    :
    Microsoft.UI.Xaml.Controls.Primitives.RangeBase
{
    private var _self : Microsoft.UI.Xaml.Controls.ISlider;
    public init(plok: Microsoft.UI.Xaml.Controls.ISlider?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.ISlider { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.ISliderFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ISliderFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Slider");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ISliderStatics {
        static var x : ISliderStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.Slider")
    }
    public static var SliderStatics : ISliderStatics {
        _ISliderStatics.x
    }
    public static func get_IntermediateValueProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_IntermediateValueProperty());
    }
    public static func get_StepFrequencyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_StepFrequencyProperty());
    }
    public static func get_SnapsToProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_SnapsToProperty());
    }
    public static func get_TickFrequencyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_TickFrequencyProperty());
    }
    public static func get_TickPlacementProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_TickPlacementProperty());
    }
    public static func get_OrientationProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_OrientationProperty());
    }
    public static func get_IsDirectionReversedProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_IsDirectionReversedProperty());
    }
    public static func get_IsThumbToolTipEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_IsThumbToolTipEnabledProperty());
    }
    public static func get_ThumbToolTipValueConverterProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_ThumbToolTipValueConverterProperty());
    }
    public static func get_HeaderProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_HeaderProperty());
    }
    public static func get_HeaderTemplateProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.get_HeaderTemplateProperty());
    }
    public static var HeaderProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.HeaderProperty);
        }
    }
    public static var HeaderTemplateProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.HeaderTemplateProperty);
        }
    }
    public static var IntermediateValueProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.IntermediateValueProperty);
        }
    }
    public static var IsDirectionReversedProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.IsDirectionReversedProperty);
        }
    }
    public static var IsThumbToolTipEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.IsThumbToolTipEnabledProperty);
        }
    }
    public static var OrientationProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.OrientationProperty);
        }
    }
    public static var SnapsToProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.SnapsToProperty);
        }
    }
    public static var StepFrequencyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.StepFrequencyProperty);
        }
    }
    public static var ThumbToolTipValueConverterProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.ThumbToolTipValueConverterProperty);
        }
    }
    public static var TickFrequencyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.TickFrequencyProperty);
        }
    }
    public static var TickPlacementProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SliderStatics.TickPlacementProperty);
        }
    }
    public func get_IntermediateValue() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_IntermediateValue();
    }
    public func put_IntermediateValue(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_IntermediateValue(value: value);
    }
    public func get_StepFrequency() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_StepFrequency();
    }
    public func put_StepFrequency(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_StepFrequency(value: value);
    }
    public func get_SnapsTo() throws -> Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_SnapsTo();
    }
    public func put_SnapsTo(value : Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_SnapsTo(value: value);
    }
    public func get_TickFrequency() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_TickFrequency();
    }
    public func put_TickFrequency(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_TickFrequency(value: value);
    }
    public func get_TickPlacement() throws -> Microsoft.UI.Xaml.Controls.Primitives.TickPlacement {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_TickPlacement();
    }
    public func put_TickPlacement(value : Microsoft.UI.Xaml.Controls.Primitives.TickPlacement) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_TickPlacement(value: value);
    }
    public func get_Orientation() throws -> Microsoft.UI.Xaml.Controls.Orientation {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_Orientation();
    }
    public func put_Orientation(value : Microsoft.UI.Xaml.Controls.Orientation) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_Orientation(value: value);
    }
    public func get_IsDirectionReversed() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_IsDirectionReversed();
    }
    public func put_IsDirectionReversed(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_IsDirectionReversed(value: value);
    }
    public func get_IsThumbToolTipEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_IsThumbToolTipEnabled();
    }
    public func put_IsThumbToolTipEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_IsThumbToolTipEnabled(value: value);
    }
    public func get_ThumbToolTipValueConverter() throws -> Optional<Microsoft.UI.Xaml.Data.IValueConverter> {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_ThumbToolTipValueConverter();
    }
    public func put_ThumbToolTipValueConverter(value : Optional<Microsoft.UI.Xaml.Data.IValueConverter>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_ThumbToolTipValueConverter(value: value);
    }
    public func get_Header() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.get_Header();
    }
    public func put_Header(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_Header(value: value!.GetInterface());
    }
    public func get_HeaderTemplate() throws -> Optional<Microsoft.UI.Xaml.DataTemplate> {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DataTemplate(plok: _ifc.get_HeaderTemplate());
    }
    public func put_HeaderTemplate(value : Optional<Microsoft.UI.Xaml.DataTemplate>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.put_HeaderTemplate(value: value!.Interface());
    }
    public var Header : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.Header;
        }
    }
    public var HeaderTemplate : Optional<Microsoft.UI.Xaml.DataTemplate> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DataTemplate(plok: _ifc.HeaderTemplate);
        }
    }
    public var IntermediateValue : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.IntermediateValue;
        }
    }
    public var IsDirectionReversed : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.IsDirectionReversed;
        }
    }
    public var IsThumbToolTipEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.IsThumbToolTipEnabled;
        }
    }
    public var Orientation : Microsoft.UI.Xaml.Controls.Orientation {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.Orientation;
        }
    }
    public var SnapsTo : Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.SnapsTo;
        }
    }
    public var StepFrequency : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.StepFrequency;
        }
    }
    public var ThumbToolTipValueConverter : Optional<Microsoft.UI.Xaml.Data.IValueConverter> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.ThumbToolTipValueConverter;
        }
    }
    public var TickFrequency : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.TickFrequency;
        }
    }
    public var TickPlacement : Microsoft.UI.Xaml.Controls.Primitives.TickPlacement {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ISlider = try _self.QueryInterface();
        return try _ifc.TickPlacement;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.StackPanel
// runtime class
open class StackPanel
    :
    Microsoft.UI.Xaml.Controls.Panel
{
    private var _self : Microsoft.UI.Xaml.Controls.IStackPanel;
    public init(plok: Microsoft.UI.Xaml.Controls.IStackPanel?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IStackPanel { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IStackPanelFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IStackPanelFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StackPanel");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IStackPanelStatics {
        static var x : IStackPanelStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.StackPanel")
    }
    public static var StackPanelStatics : IStackPanelStatics {
        _IStackPanelStatics.x
    }
    public static func get_AreScrollSnapPointsRegularProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_AreScrollSnapPointsRegularProperty());
    }
    public static func get_OrientationProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_OrientationProperty());
    }
    public static func get_BackgroundSizingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_BackgroundSizingProperty());
    }
    public static func get_BorderBrushProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_BorderBrushProperty());
    }
    public static func get_BorderThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_BorderThicknessProperty());
    }
    public static func get_CornerRadiusProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_CornerRadiusProperty());
    }
    public static func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_PaddingProperty());
    }
    public static func get_SpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.get_SpacingProperty());
    }
    public static var AreScrollSnapPointsRegularProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.AreScrollSnapPointsRegularProperty);
        }
    }
    public static var BackgroundSizingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.BackgroundSizingProperty);
        }
    }
    public static var BorderBrushProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.BorderBrushProperty);
        }
    }
    public static var BorderThicknessProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.BorderThicknessProperty);
        }
    }
    public static var CornerRadiusProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.CornerRadiusProperty);
        }
    }
    public static var OrientationProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.OrientationProperty);
        }
    }
    public static var PaddingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.PaddingProperty);
        }
    }
    public static var SpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: StackPanelStatics.SpacingProperty);
        }
    }
    public func get_AreScrollSnapPointsRegular() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.get_AreScrollSnapPointsRegular();
    }
    public func put_AreScrollSnapPointsRegular(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_AreScrollSnapPointsRegular(value: value);
    }
    public func get_Orientation() throws -> Microsoft.UI.Xaml.Controls.Orientation {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.get_Orientation();
    }
    public func put_Orientation(value : Microsoft.UI.Xaml.Controls.Orientation) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_Orientation(value: value);
    }
    public func get_BackgroundSizing() throws -> Microsoft.UI.Xaml.Controls.BackgroundSizing {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.get_BackgroundSizing();
    }
    public func put_BackgroundSizing(value : Microsoft.UI.Xaml.Controls.BackgroundSizing) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_BackgroundSizing(value: value);
    }
    public func get_BorderBrush() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_BorderBrush());
    }
    public func put_BorderBrush(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_BorderBrush(value: value!.Interface());
    }
    public func get_BorderThickness() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.get_BorderThickness();
    }
    public func put_BorderThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_BorderThickness(value: value);
    }
    public func get_CornerRadius() throws -> Microsoft.UI.Xaml.CornerRadius {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.get_CornerRadius();
    }
    public func put_CornerRadius(value : Microsoft.UI.Xaml.CornerRadius) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_CornerRadius(value: value);
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.get_Padding();
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_Padding(value: value);
    }
    public func get_Spacing() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.get_Spacing();
    }
    public func put_Spacing(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.put_Spacing(value: value);
    }
    public var AreScrollSnapPointsRegular : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.AreScrollSnapPointsRegular;
        }
    }
    public var BackgroundSizing : Microsoft.UI.Xaml.Controls.BackgroundSizing {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.BackgroundSizing;
        }
    }
    public var BorderBrush : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.BorderBrush);
        }
    }
    public var BorderThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.BorderThickness;
        }
    }
    public var CornerRadius : Microsoft.UI.Xaml.CornerRadius {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.CornerRadius;
        }
    }
    public var Orientation : Microsoft.UI.Xaml.Controls.Orientation {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.Orientation;
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.Padding;
        }
    }
    public var Spacing : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IStackPanel = try _self.QueryInterface();
        return try _ifc.Spacing;
        }
    }
    public func get_AreHorizontalSnapPointsRegular() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.get_AreHorizontalSnapPointsRegular();
    }
    public func get_AreVerticalSnapPointsRegular() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.get_AreVerticalSnapPointsRegular();
    }
    public func add_HorizontalSnapPointsChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.add_HorizontalSnapPointsChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public func remove_HorizontalSnapPointsChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.remove_HorizontalSnapPointsChanged(token: token);
    }
    public func add_VerticalSnapPointsChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.add_VerticalSnapPointsChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public func remove_VerticalSnapPointsChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.remove_VerticalSnapPointsChanged(token: token);
    }
    public func GetIrregularSnapPoints(orientation : Microsoft.UI.Xaml.Controls.Orientation, alignment : Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment) throws -> Optional<ClosedGenerics.IVectorView_1_FLOAT> {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.GetIrregularSnapPoints(orientation: orientation, alignment: alignment);
    }
    public func GetRegularSnapPoints(orientation : Microsoft.UI.Xaml.Controls.Orientation, alignment : Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment, offset : inout Swift.Float) throws -> Swift.Float {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
            var _tmp_out_offset: Swift.Float = 0;
        return try _ifc.GetRegularSnapPoints(orientation: orientation, alignment: alignment, offset: &_tmp_out_offset);
    }
    public var AreHorizontalSnapPointsRegular : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.AreHorizontalSnapPointsRegular;
        }
    }
    public var AreVerticalSnapPointsRegular : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo = try _self.QueryInterface();
        return try _ifc.AreVerticalSnapPointsRegular;
        }
    }
    public func GetInsertionIndexes(position : Windows.Foundation.Point, first : inout Swift.Int32, second : inout Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IInsertionPanel = try _self.QueryInterface();
            var _tmp_out_first: Swift.Int32 = 0;
            var _tmp_out_second: Swift.Int32 = 0;
        return try _ifc.GetInsertionIndexes(position: position, first: &_tmp_out_first, second: &_tmp_out_second);
    }
}

// type: Microsoft.UI.Xaml.Controls.TextBlock
// runtime class
public class TextBlock
    :
    Microsoft.UI.Xaml.FrameworkElement
{
    private var _self : Microsoft.UI.Xaml.Controls.ITextBlock;
    public init(plok: Microsoft.UI.Xaml.Controls.ITextBlock?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.ITextBlock { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Controls.TextBlock")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ITextBlockStatics {
        static var x : ITextBlockStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.TextBlock")
    }
    public static var TextBlockStatics : ITextBlockStatics {
        _ITextBlockStatics.x
    }
    public static func get_FontSizeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontSizeProperty());
    }
    public static func get_FontFamilyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontFamilyProperty());
    }
    public static func get_FontWeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontWeightProperty());
    }
    public static func get_FontStyleProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontStyleProperty());
    }
    public static func get_FontStretchProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_FontStretchProperty());
    }
    public static func get_CharacterSpacingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_CharacterSpacingProperty());
    }
    public static func get_ForegroundProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_ForegroundProperty());
    }
    public static func get_TextWrappingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextWrappingProperty());
    }
    public static func get_TextTrimmingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextTrimmingProperty());
    }
    public static func get_TextAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextAlignmentProperty());
    }
    public static func get_TextProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextProperty());
    }
    public static func get_PaddingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_PaddingProperty());
    }
    public static func get_LineHeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_LineHeightProperty());
    }
    public static func get_LineStackingStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_LineStackingStrategyProperty());
    }
    public static func get_IsTextSelectionEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsTextSelectionEnabledProperty());
    }
    public static func get_SelectedTextProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_SelectedTextProperty());
    }
    public static func get_SelectionHighlightColorProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_SelectionHighlightColorProperty());
    }
    public static func get_MaxLinesProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_MaxLinesProperty());
    }
    public static func get_TextLineBoundsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextLineBoundsProperty());
    }
    public static func get_OpticalMarginAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_OpticalMarginAlignmentProperty());
    }
    public static func get_IsColorFontEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsColorFontEnabledProperty());
    }
    public static func get_TextReadingOrderProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextReadingOrderProperty());
    }
    public static func get_IsTextScaleFactorEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsTextScaleFactorEnabledProperty());
    }
    public static func get_TextDecorationsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_TextDecorationsProperty());
    }
    public static func get_IsTextTrimmedProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_IsTextTrimmedProperty());
    }
    public static func get_HorizontalTextAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_HorizontalTextAlignmentProperty());
    }
    public static func get_SelectionFlyoutProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.get_SelectionFlyoutProperty());
    }
    public static var CharacterSpacingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.CharacterSpacingProperty);
        }
    }
    public static var FontFamilyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontFamilyProperty);
        }
    }
    public static var FontSizeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontSizeProperty);
        }
    }
    public static var FontStretchProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontStretchProperty);
        }
    }
    public static var FontStyleProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontStyleProperty);
        }
    }
    public static var FontWeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.FontWeightProperty);
        }
    }
    public static var ForegroundProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.ForegroundProperty);
        }
    }
    public static var HorizontalTextAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.HorizontalTextAlignmentProperty);
        }
    }
    public static var IsColorFontEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsColorFontEnabledProperty);
        }
    }
    public static var IsTextScaleFactorEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsTextScaleFactorEnabledProperty);
        }
    }
    public static var IsTextSelectionEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsTextSelectionEnabledProperty);
        }
    }
    public static var IsTextTrimmedProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.IsTextTrimmedProperty);
        }
    }
    public static var LineHeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.LineHeightProperty);
        }
    }
    public static var LineStackingStrategyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.LineStackingStrategyProperty);
        }
    }
    public static var MaxLinesProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.MaxLinesProperty);
        }
    }
    public static var OpticalMarginAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.OpticalMarginAlignmentProperty);
        }
    }
    public static var PaddingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.PaddingProperty);
        }
    }
    public static var SelectedTextProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.SelectedTextProperty);
        }
    }
    public static var SelectionFlyoutProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.SelectionFlyoutProperty);
        }
    }
    public static var SelectionHighlightColorProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.SelectionHighlightColorProperty);
        }
    }
    public static var TextAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextAlignmentProperty);
        }
    }
    public static var TextDecorationsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextDecorationsProperty);
        }
    }
    public static var TextLineBoundsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextLineBoundsProperty);
        }
    }
    public static var TextProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextProperty);
        }
    }
    public static var TextReadingOrderProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextReadingOrderProperty);
        }
    }
    public static var TextTrimmingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextTrimmingProperty);
        }
    }
    public static var TextWrappingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TextBlockStatics.TextWrappingProperty);
        }
    }
    public func get_FontSize() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontSize();
    }
    public func put_FontSize(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontSize(value: value);
    }
    public func get_FontFamily() throws -> Optional<Microsoft.UI.Xaml.Media.FontFamily> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.get_FontFamily());
    }
    public func put_FontFamily(value : Optional<Microsoft.UI.Xaml.Media.FontFamily>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontFamily(value: value!.Interface());
    }
    public func get_FontWeight() throws -> Windows.UI.Text.FontWeight {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontWeight();
    }
    public func put_FontWeight(value : Windows.UI.Text.FontWeight) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontWeight(value: value);
    }
    public func get_FontStyle() throws -> Windows.UI.Text.FontStyle {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontStyle();
    }
    public func put_FontStyle(value : Windows.UI.Text.FontStyle) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontStyle(value: value);
    }
    public func get_FontStretch() throws -> Windows.UI.Text.FontStretch {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_FontStretch();
    }
    public func put_FontStretch(value : Windows.UI.Text.FontStretch) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_FontStretch(value: value);
    }
    public func get_CharacterSpacing() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_CharacterSpacing();
    }
    public func put_CharacterSpacing(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_CharacterSpacing(value: value);
    }
    public func get_Foreground() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_Foreground());
    }
    public func put_Foreground(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_Foreground(value: value!.Interface());
    }
    public func get_TextWrapping() throws -> Microsoft.UI.Xaml.TextWrapping {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextWrapping();
    }
    public func put_TextWrapping(value : Microsoft.UI.Xaml.TextWrapping) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextWrapping(value: value);
    }
    public func get_TextTrimming() throws -> Microsoft.UI.Xaml.TextTrimming {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextTrimming();
    }
    public func put_TextTrimming(value : Microsoft.UI.Xaml.TextTrimming) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextTrimming(value: value);
    }
    public func get_TextAlignment() throws -> Microsoft.UI.Xaml.TextAlignment {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextAlignment();
    }
    public func put_TextAlignment(value : Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextAlignment(value: value);
    }
    public func get_Text() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_Text();
    }
    public func put_Text(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_Text(value: value);
    }
    public func get_Inlines() throws -> Optional<Microsoft.UI.Xaml.Documents.InlineCollection> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.InlineCollection(plok: _ifc.get_Inlines());
    }
    public func get_Padding() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_Padding();
    }
    public func put_Padding(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_Padding(value: value);
    }
    public func get_LineHeight() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_LineHeight();
    }
    public func put_LineHeight(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_LineHeight(value: value);
    }
    public func get_LineStackingStrategy() throws -> Microsoft.UI.Xaml.LineStackingStrategy {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_LineStackingStrategy();
    }
    public func put_LineStackingStrategy(value : Microsoft.UI.Xaml.LineStackingStrategy) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_LineStackingStrategy(value: value);
    }
    public func get_IsTextSelectionEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsTextSelectionEnabled();
    }
    public func put_IsTextSelectionEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_IsTextSelectionEnabled(value: value);
    }
    public func get_SelectedText() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_SelectedText();
    }
    public func get_ContentStart() throws -> Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_ContentStart());
    }
    public func get_ContentEnd() throws -> Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_ContentEnd());
    }
    public func get_SelectionStart() throws -> Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_SelectionStart());
    }
    public func get_SelectionEnd() throws -> Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.get_SelectionEnd());
    }
    public func get_BaselineOffset() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_BaselineOffset();
    }
    public func get_SelectionHighlightColor() throws -> Optional<Microsoft.UI.Xaml.Media.SolidColorBrush> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.SolidColorBrush(plok: _ifc.get_SelectionHighlightColor());
    }
    public func put_SelectionHighlightColor(value : Optional<Microsoft.UI.Xaml.Media.SolidColorBrush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_SelectionHighlightColor(value: value!.Interface());
    }
    public func get_MaxLines() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_MaxLines();
    }
    public func put_MaxLines(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_MaxLines(value: value);
    }
    public func get_TextLineBounds() throws -> Microsoft.UI.Xaml.TextLineBounds {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextLineBounds();
    }
    public func put_TextLineBounds(value : Microsoft.UI.Xaml.TextLineBounds) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextLineBounds(value: value);
    }
    public func get_OpticalMarginAlignment() throws -> Microsoft.UI.Xaml.OpticalMarginAlignment {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_OpticalMarginAlignment();
    }
    public func put_OpticalMarginAlignment(value : Microsoft.UI.Xaml.OpticalMarginAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_OpticalMarginAlignment(value: value);
    }
    public func get_IsColorFontEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsColorFontEnabled();
    }
    public func put_IsColorFontEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_IsColorFontEnabled(value: value);
    }
    public func get_TextReadingOrder() throws -> Microsoft.UI.Xaml.TextReadingOrder {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextReadingOrder();
    }
    public func put_TextReadingOrder(value : Microsoft.UI.Xaml.TextReadingOrder) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextReadingOrder(value: value);
    }
    public func get_IsTextScaleFactorEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsTextScaleFactorEnabled();
    }
    public func put_IsTextScaleFactorEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_IsTextScaleFactorEnabled(value: value);
    }
    public func get_TextDecorations() throws -> Windows.UI.Text.TextDecorations {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextDecorations();
    }
    public func put_TextDecorations(value : Windows.UI.Text.TextDecorations) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_TextDecorations(value: value);
    }
    public func get_IsTextTrimmed() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_IsTextTrimmed();
    }
    public func get_HorizontalTextAlignment() throws -> Microsoft.UI.Xaml.TextAlignment {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_HorizontalTextAlignment();
    }
    public func put_HorizontalTextAlignment(value : Microsoft.UI.Xaml.TextAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_HorizontalTextAlignment(value: value);
    }
    public func get_TextHighlighters() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.get_TextHighlighters();
    }
    public func get_SelectionFlyout() throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.get_SelectionFlyout());
    }
    public func put_SelectionFlyout(value : Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.put_SelectionFlyout(value: value!.Interface());
    }
    public func add_SelectionChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.add_SelectionChanged(handler: Microsoft.UI.Xaml.RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_SelectionChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.remove_SelectionChanged(token: token);
    }
    public func add_ContextMenuOpening(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Controls.ContextMenuEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.add_ContextMenuOpening(handler: Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler(cb: handler).Interface());
    }
    public func remove_ContextMenuOpening(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.remove_ContextMenuOpening(token: token);
    }
    public func add_IsTextTrimmedChanged(handler : @escaping (Optional<Microsoft.UI.Xaml.Controls.TextBlock>, Optional<Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.add_IsTextTrimmedChanged(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CControls_CTextBlock__q_CMicrosoft_CUI_CXaml_CControls_CIsTextTrimmedChangedEventArgs(cb: handler).Interface());
    }
    public func remove_IsTextTrimmedChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.remove_IsTextTrimmedChanged(token: token);
    }
    public func SelectAll() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.SelectAll();
    }
    public func Select(start : Optional<Microsoft.UI.Xaml.Documents.TextPointer>, end : Optional<Microsoft.UI.Xaml.Documents.TextPointer>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.Select(start: start!.Interface(), end: end!.Interface());
    }
    public func GetAlphaMask() throws -> Optional<Microsoft.UI.Composition.CompositionBrush> {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Composition.CompositionBrush(plok: _ifc.GetAlphaMask());
    }
    public func CopySelectionToClipboard() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.CopySelectionToClipboard();
    }
    public var BaselineOffset : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.BaselineOffset;
        }
    }
    public var CharacterSpacing : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.CharacterSpacing;
        }
    }
    public var ContentEnd : Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.ContentEnd);
        }
    }
    public var ContentStart : Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.ContentStart);
        }
    }
    public var FontFamily : Optional<Microsoft.UI.Xaml.Media.FontFamily> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.FontFamily(plok: _ifc.FontFamily);
        }
    }
    public var FontSize : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.FontSize;
        }
    }
    public var FontStretch : Windows.UI.Text.FontStretch {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.FontStretch;
        }
    }
    public var FontStyle : Windows.UI.Text.FontStyle {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.FontStyle;
        }
    }
    public var FontWeight : Windows.UI.Text.FontWeight {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.FontWeight;
        }
    }
    public var Foreground : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.Foreground);
        }
    }
    public var HorizontalTextAlignment : Microsoft.UI.Xaml.TextAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.HorizontalTextAlignment;
        }
    }
    public var Inlines : Optional<Microsoft.UI.Xaml.Documents.InlineCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.InlineCollection(plok: _ifc.Inlines);
        }
    }
    public var IsColorFontEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.IsColorFontEnabled;
        }
    }
    public var IsTextScaleFactorEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.IsTextScaleFactorEnabled;
        }
    }
    public var IsTextSelectionEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.IsTextSelectionEnabled;
        }
    }
    public var IsTextTrimmed : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.IsTextTrimmed;
        }
    }
    public var LineHeight : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.LineHeight;
        }
    }
    public var LineStackingStrategy : Microsoft.UI.Xaml.LineStackingStrategy {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.LineStackingStrategy;
        }
    }
    public var MaxLines : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.MaxLines;
        }
    }
    public var OpticalMarginAlignment : Microsoft.UI.Xaml.OpticalMarginAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.OpticalMarginAlignment;
        }
    }
    public var Padding : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.Padding;
        }
    }
    public var SelectedText : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.SelectedText;
        }
    }
    public var SelectionEnd : Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.SelectionEnd);
        }
    }
    public var SelectionFlyout : Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.SelectionFlyout);
        }
    }
    public var SelectionHighlightColor : Optional<Microsoft.UI.Xaml.Media.SolidColorBrush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.SolidColorBrush(plok: _ifc.SelectionHighlightColor);
        }
    }
    public var SelectionStart : Optional<Microsoft.UI.Xaml.Documents.TextPointer> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Documents.TextPointer(plok: _ifc.SelectionStart);
        }
    }
    public var Text : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.Text;
        }
    }
    public var TextAlignment : Microsoft.UI.Xaml.TextAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.TextAlignment;
        }
    }
    public var TextDecorations : Windows.UI.Text.TextDecorations {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.TextDecorations;
        }
    }
    public var TextHighlighters : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CDocuments_CTextHighlighter> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.TextHighlighters;
        }
    }
    public var TextLineBounds : Microsoft.UI.Xaml.TextLineBounds {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.TextLineBounds;
        }
    }
    public var TextReadingOrder : Microsoft.UI.Xaml.TextReadingOrder {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.TextReadingOrder;
        }
    }
    public var TextTrimming : Microsoft.UI.Xaml.TextTrimming {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.TextTrimming;
        }
    }
    public var TextWrapping : Microsoft.UI.Xaml.TextWrapping {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.ITextBlock = try _self.QueryInterface();
        return try _ifc.TextWrapping;
        }
    }
}

// type: Microsoft.UI.Xaml.Controls.UIElementCollection
// runtime class
public class UIElementCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement { return _self; }
    public func Move(oldIndex : Swift.UInt32, newIndex : Swift.UInt32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IUIElementCollection = try _self.QueryInterface();
        return try _ifc.Move(oldIndex: oldIndex, newIndex: newIndex);
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.UIElement> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CUIElement> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.UIElement>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CUIElement = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
}

// type: Microsoft.UI.Xaml.Controls.UserControl
// runtime class
open class UserControl
    :
    Microsoft.UI.Xaml.Controls.Control
{
    private var _self : Microsoft.UI.Xaml.Controls.IUserControl;
    public init(plok: Microsoft.UI.Xaml.Controls.IUserControl?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Controls.IUserControl { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Controls.IUserControlFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IUserControlFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UserControl");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IUserControlStatics {
        static var x : IUserControlStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Controls.UserControl")
    }
    public static var UserControlStatics : IUserControlStatics {
        _IUserControlStatics.x
    }
    public static func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UserControlStatics.get_ContentProperty());
    }
    public static var ContentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UserControlStatics.ContentProperty);
        }
    }
    public func get_Content() throws -> Optional<Microsoft.UI.Xaml.UIElement> {
        let _ifc : Microsoft.UI.Xaml.Controls.IUserControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.get_Content());
    }
    public func put_Content(value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Controls.IUserControl = try _self.QueryInterface();
        return try _ifc.put_Content(value: value!.Interface());
    }
    public var Content : Optional<Microsoft.UI.Xaml.UIElement> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Controls.IUserControl = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.Content);
        }
    }
}

}
extension Microsoft.UI.Xaml.Controls.BackgroundSizing {
    public static var InnerBorderEdge : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_InnerBorderEdge;
        }
    }
    public static var OuterBorderEdge : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CBackgroundSizing_OuterBorderEdge;
        }
    }
}
extension Microsoft.UI.Xaml.Controls.ClickMode {
    public static var Release : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CClickMode_Release;
        }
    }
    public static var Press : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CClickMode_Press;
        }
    }
    public static var Hover : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CClickMode_Hover;
        }
    }
}
extension Microsoft.UI.Xaml.Controls.Orientation {
    public static var Vertical : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_COrientation_Vertical;
        }
    }
    public static var Horizontal : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_COrientation_Horizontal;
        }
    }
}
extension Microsoft.UI.Xaml.Controls.RequiresPointer {
    public static var Never : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_Never;
        }
    }
    public static var WhenEngaged : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenEngaged;
        }
    }
    public static var WhenFocused : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CControls_CRequiresPointer_WhenFocused;
        }
    }
}
