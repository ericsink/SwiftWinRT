// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
import CWindowsSdk;
@_spi(IUnknown) import WinRT;
import WindowsSdk;

extension Microsoft.UI.Xaml {
// type: Microsoft.UI.Xaml.Application
// runtime class
open class Application
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IApplication;
    private class Container {
        public var self_ref: Application? = nil
    }
    private struct WithTrailingObjects_IApplicationOverrides {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides
        public var container: Unmanaged<Container>
    }
    private var instance: Optional<UnsafeMutablePointer<WithTrailingObjects_IApplicationOverrides>>
    private var _inner: Optional<WinRT.IInspectable> = nil
    private static func from_IApplicationOverrides(_ pUnk: UnsafeMutableRawPointer?) -> Application? {
        return pUnk?.bindMemory(to: Application.WithTrailingObjects_IApplicationOverrides.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    public init(plok: Microsoft.UI.Xaml.IApplication?) throws {
        _self = plok!
        self.instance = nil
        try super.init(plok: _self.QueryInterface())
        let instance = UnsafeMutablePointer<WithTrailingObjects_IApplicationOverrides>.allocate(capacity: 1)
        instance.pointee = WithTrailingObjects_IApplicationOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides(lpVtbl: &Self.vtable_IApplicationOverrides), container: Unmanaged<Container>.passRetained(Container()))
        self.instance = instance
    }
    public func Interface() -> Microsoft.UI.Xaml.IApplication { return _self; }
    private static var vtable_IApplicationOverrides: _q_CMicrosoft_CUI_CXaml_CIApplicationOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.IApplicationOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: Application.WithTrailingObjects_IApplicationOverrides.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: Application.WithTrailingObjects_IApplicationOverrides.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 1
        var mem = CoTaskMemAlloc(16).bindMemory(to: IID.self, capacity: 1)
        (mem + 0).pointee = Microsoft.UI.Xaml.IApplicationOverrides.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.IApplicationOverrides").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    OnLaunched: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs>>) in
        guard let self = Application.from_IApplicationOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnLaunched(args: Microsoft.UI.Xaml.LaunchActivatedEventArgs(plok: Microsoft.UI.Xaml.ILaunchActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    // COMPOSABLE: Microsoft.UI.Xaml.IApplicationFactory
    public init() throws {
        let instance = UnsafeMutablePointer<WithTrailingObjects_IApplicationOverrides>.allocate(capacity: 1)
        self.instance = instance
        instance.pointee = WithTrailingObjects_IApplicationOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides(lpVtbl: &Self.vtable_IApplicationOverrides), container: Unmanaged<Container>.passRetained(Container()))
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IApplicationFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Application");
        let baseInterface = WinRT.IInspectable(UnsafeMutableRawPointer(instance))
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        _inner = _inn;
        try super.init(plok: _self.QueryInterface())
        instance.pointee.container.takeUnretainedValue().self_ref = self
    }
    private struct _IApplicationStatics {
        static var x : IApplicationStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Application")
    }
    public static var ApplicationStatics : IApplicationStatics {
        _IApplicationStatics.x
    }
    public static func get_Current() throws -> Optional<Microsoft.UI.Xaml.Application> {
        return try Microsoft.UI.Xaml.Application(plok: ApplicationStatics.get_Current());
    }
    public static func Start(callback : @escaping (Optional<Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>) throws -> Void) throws -> Void {
        return try ApplicationStatics.Start(callback: Microsoft.UI.Xaml.ApplicationInitializationCallback(cb: callback).Interface());
    }
    public static func LoadComponent(component : Optional<WinRT.Object>, resourceLocator : Optional<Windows.Foundation.Uri>) throws -> Void {
        return try ApplicationStatics.LoadComponent(component: component!.GetInterface(), resourceLocator: resourceLocator!.Interface());
    }
    public static func LoadComponent(component : Optional<WinRT.Object>, resourceLocator : Optional<Windows.Foundation.Uri>, componentResourceLocation : Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation) throws -> Void {
        return try ApplicationStatics.LoadComponentWithResourceLocation(component: component!.GetInterface(), resourceLocator: resourceLocator!.Interface(), componentResourceLocation: componentResourceLocation);
    }
    public static var Current : Optional<Microsoft.UI.Xaml.Application> {
        get throws {
        return try Microsoft.UI.Xaml.Application(plok: ApplicationStatics.Current);
        }
    }
    public func get_Resources() throws -> Optional<Microsoft.UI.Xaml.ResourceDictionary> {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ResourceDictionary(plok: _ifc.get_Resources());
    }
    public func put_Resources(value : Optional<Microsoft.UI.Xaml.ResourceDictionary>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.put_Resources(value: value!.Interface());
    }
    public func get_DebugSettings() throws -> Optional<Microsoft.UI.Xaml.DebugSettings> {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DebugSettings(plok: _ifc.get_DebugSettings());
    }
    public func get_RequestedTheme() throws -> Microsoft.UI.Xaml.ApplicationTheme {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.get_RequestedTheme();
    }
    public func put_RequestedTheme(value : Microsoft.UI.Xaml.ApplicationTheme) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.put_RequestedTheme(value: value);
    }
    public func get_FocusVisualKind() throws -> Microsoft.UI.Xaml.FocusVisualKind {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.get_FocusVisualKind();
    }
    public func put_FocusVisualKind(value : Microsoft.UI.Xaml.FocusVisualKind) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.put_FocusVisualKind(value: value);
    }
    public func get_HighContrastAdjustment() throws -> Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.get_HighContrastAdjustment();
    }
    public func put_HighContrastAdjustment(value : Microsoft.UI.Xaml.ApplicationHighContrastAdjustment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.put_HighContrastAdjustment(value: value);
    }
    public func add_UnhandledException(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.UnhandledExceptionEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.add_UnhandledException(handler: Microsoft.UI.Xaml.UnhandledExceptionEventHandler(cb: handler).Interface());
    }
    public func remove_UnhandledException(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.remove_UnhandledException(token: token);
    }
    public func Exit() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.Exit();
    }
    public var DebugSettings : Optional<Microsoft.UI.Xaml.DebugSettings> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DebugSettings(plok: _ifc.DebugSettings);
        }
    }
    public var FocusVisualKind : Microsoft.UI.Xaml.FocusVisualKind {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.FocusVisualKind;
        }
    }
    public var HighContrastAdjustment : Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.HighContrastAdjustment;
        }
    }
    public var RequestedTheme : Microsoft.UI.Xaml.ApplicationTheme {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try _ifc.RequestedTheme;
        }
    }
    public var Resources : Optional<Microsoft.UI.Xaml.ResourceDictionary> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IApplication = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ResourceDictionary(plok: _ifc.Resources);
        }
    }
    open func OnLaunched(args : Optional<Microsoft.UI.Xaml.LaunchActivatedEventArgs>) throws -> Void {
    }
}

// type: Microsoft.UI.Xaml.ApplicationHighContrastAdjustment
// enum type
public typealias ApplicationHighContrastAdjustment = _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment;

// type: Microsoft.UI.Xaml.ApplicationInitializationCallback
// delegate type
open class IApplicationInitializationCallback
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd8eef1c9, Data2: 0x1234, Data3 : 0x56f1, Data4 : (0x99, 0x63, 0x45, 0xdd, 0x9c, 0x80, 0xa6, 0x61)) }
    // [IsSpecialName] void Invoke(Microsoft.UI.Xaml.ApplicationInitializationCallbackParams)
    private func _n_Invoke(_ p : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, p))
        }
    }
    public func Invoke(p : Optional<Microsoft.UI.Xaml.IApplicationInitializationCallbackParams>) throws -> Void {
        try self._n_Invoke(RawPointer(p));
    }
}
// impl delegate type
open class ApplicationInitializationCallback
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.IApplicationInitializationCallback.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ApplicationInitializationCallback.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ApplicationInitializationCallback.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ p : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallbackParams>>) in
        guard let self = ApplicationInitializationCallback.from_ApplicationInitializationCallback(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(p: Microsoft.UI.Xaml.ApplicationInitializationCallbackParams(plok: Microsoft.UI.Xaml.IApplicationInitializationCallbackParams(p)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ApplicationInitializationCallback? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>) throws -> Void>
    public init(cb : Optional<(Optional<Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ApplicationInitializationCallback(_ pUnk: UnsafeMutableRawPointer?) -> ApplicationInitializationCallback? {
        return pUnk?.bindMemory(to: ApplicationInitializationCallback.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(p : Optional<Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>) throws -> Void {
        if let cb = _cb {
            try cb(p)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.IApplicationInitializationCallback {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.IApplicationInitializationCallback(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_ApplicationInitializationCallback
{
    private var _self : Microsoft.UI.Xaml.IApplicationInitializationCallback;
    public init(plok: Microsoft.UI.Xaml.IApplicationInitializationCallback?) throws {
        _self = plok!
    }
    public func Invoke(p : Optional<Microsoft.UI.Xaml.ApplicationInitializationCallbackParams>) throws -> Void {
        return try _self.Invoke(p: p!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.IApplicationInitializationCallback {
        return _self
    }
}

// type: Microsoft.UI.Xaml.ApplicationInitializationCallbackParams
// runtime class
public class ApplicationInitializationCallbackParams
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IApplicationInitializationCallbackParams;
    public init(plok: Microsoft.UI.Xaml.IApplicationInitializationCallbackParams?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IApplicationInitializationCallbackParams { return _self; }
}

// type: Microsoft.UI.Xaml.ApplicationTheme
// enum type
public typealias ApplicationTheme = _q_CMicrosoft_CUI_CXaml_CApplicationTheme;

// type: Microsoft.UI.Xaml.BringIntoViewOptions
// runtime class
public class BringIntoViewOptions
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IBringIntoViewOptions;
    public init(plok: Microsoft.UI.Xaml.IBringIntoViewOptions?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IBringIntoViewOptions { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.BringIntoViewOptions")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_AnimationDesired
    // method not needed: put_AnimationDesired
    // method not needed: get_TargetRect
    // method not needed: put_TargetRect
    // method not needed: get_HorizontalAlignmentRatio
    // method not needed: put_HorizontalAlignmentRatio
    // method not needed: get_VerticalAlignmentRatio
    // method not needed: put_VerticalAlignmentRatio
    // method not needed: get_HorizontalOffset
    // method not needed: put_HorizontalOffset
    // method not needed: get_VerticalOffset
    // method not needed: put_VerticalOffset
}

// type: Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs
// runtime class
public class BringIntoViewRequestedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs { return _self; }
    // method not needed: get_TargetElement
    // method not needed: put_TargetElement
    // method not needed: get_AnimationDesired
    // method not needed: put_AnimationDesired
    // method not needed: get_TargetRect
    // method not needed: put_TargetRect
    // method not needed: get_HorizontalAlignmentRatio
    // method not needed: get_VerticalAlignmentRatio
    // method not needed: get_HorizontalOffset
    // method not needed: put_HorizontalOffset
    // method not needed: get_VerticalOffset
    // method not needed: put_VerticalOffset
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.BrushTransition
// runtime class
open class BrushTransition
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IBrushTransition;
    public init(plok: Microsoft.UI.Xaml.IBrushTransition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IBrushTransition { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IBrushTransitionFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IBrushTransitionFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.BrushTransition");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Duration
    // method not needed: put_Duration
}

// type: Microsoft.UI.Xaml.CornerRadius
// struct type
public typealias CornerRadius = _q_CMicrosoft_CUI_CXaml_CCornerRadius;

// type: Microsoft.UI.Xaml.DataContextChangedEventArgs
// runtime class
public class DataContextChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IDataContextChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IDataContextChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDataContextChangedEventArgs { return _self; }
    // method not needed: get_NewValue
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.DataTemplate
// runtime class
open class DataTemplate
    :
    Microsoft.UI.Xaml.FrameworkTemplate
{
    private var _self : Microsoft.UI.Xaml.IDataTemplate;
    public init(plok: Microsoft.UI.Xaml.IDataTemplate?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDataTemplate { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IDataTemplateFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IDataTemplateFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.DataTemplate");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.IDataTemplateStatics
    // method not needed: LoadContent
    // instance interface not needed: Microsoft.UI.Xaml.IElementFactory
}

// type: Microsoft.UI.Xaml.DebugSettings
// runtime class
public class DebugSettings
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IDebugSettings;
    public init(plok: Microsoft.UI.Xaml.IDebugSettings?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDebugSettings { return _self; }
    // method not needed: get_EnableFrameRateCounter
    // method not needed: put_EnableFrameRateCounter
    // method not needed: get_IsBindingTracingEnabled
    // method not needed: put_IsBindingTracingEnabled
    // method not needed: get_IsTextPerformanceVisualizationEnabled
    // method not needed: put_IsTextPerformanceVisualizationEnabled
    // method not needed: get_FailFastOnErrors
    // method not needed: put_FailFastOnErrors
    // method not needed: add_BindingFailed
    // method not needed: remove_BindingFailed
}

// type: Microsoft.UI.Xaml.DependencyObject
// runtime class
open class DependencyObject
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IDependencyObject;
    public init(plok: Microsoft.UI.Xaml.IDependencyObject?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDependencyObject { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IDependencyObjectFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IDependencyObjectFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.DependencyObject");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func GetValue(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try _ifc.GetValue(dp: dp!.Interface());
    }
    public func SetValue(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>, value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try _ifc.SetValue(dp: dp!.Interface(), value: value!.GetInterface());
    }
    public func ClearValue(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try _ifc.ClearValue(dp: dp!.Interface());
    }
    public func ReadLocalValue(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try _ifc.ReadLocalValue(dp: dp!.Interface());
    }
    public func GetAnimationBaseValue(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try _ifc.GetAnimationBaseValue(dp: dp!.Interface());
    }
    public func RegisterPropertyChangedCallback(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>, callback : @escaping (Optional<Microsoft.UI.Xaml.DependencyObject>, Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Void) throws -> Swift.Int64 {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try _ifc.RegisterPropertyChangedCallback(dp: dp!.Interface(), callback: Microsoft.UI.Xaml.DependencyPropertyChangedCallback(cb: callback).Interface());
    }
    public func UnregisterPropertyChangedCallback(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>, token : Swift.Int64) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try _ifc.UnregisterPropertyChangedCallback(dp: dp!.Interface(), token: token);
    }
    public func get_Dispatcher() throws -> Optional<Windows.UI.Core.CoreDispatcher> {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try Windows.UI.Core.CoreDispatcher(plok: _ifc.get_Dispatcher());
    }
    public func get_DispatcherQueue() throws -> Optional<Microsoft.UI.Dispatching.DispatcherQueue> {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try Microsoft.UI.Dispatching.DispatcherQueue(plok: _ifc.get_DispatcherQueue());
    }
    public var Dispatcher : Optional<Windows.UI.Core.CoreDispatcher> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try Windows.UI.Core.CoreDispatcher(plok: _ifc.Dispatcher);
        }
    }
    public var DispatcherQueue : Optional<Microsoft.UI.Dispatching.DispatcherQueue> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IDependencyObject = try _self.QueryInterface();
        return try Microsoft.UI.Dispatching.DispatcherQueue(plok: _ifc.DispatcherQueue);
        }
    }
}

// type: Microsoft.UI.Xaml.DependencyProperty
// runtime class
public class DependencyProperty
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IDependencyProperty;
    public init(plok: Microsoft.UI.Xaml.IDependencyProperty?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDependencyProperty { return _self; }
    // static interface not needed: Microsoft.UI.Xaml.IDependencyPropertyStatics
    // method not needed: GetMetadata
}

// type: Microsoft.UI.Xaml.DependencyPropertyChangedCallback
// delegate type
open class IDependencyPropertyChangedCallback
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf055bb21, Data2: 0x219b, Data3 : 0x5b0c, Data4 : (0x80, 0x5d, 0xbc, 0xae, 0xda, 0xe1, 0x54, 0x58)) }
    // [IsSpecialName] void Invoke(Microsoft.UI.Xaml.DependencyObject, Microsoft.UI.Xaml.DependencyProperty)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>, _ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, dp))
        }
    }
    public func Invoke(sender : Optional<Microsoft.UI.Xaml.IDependencyObject>, dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(dp));
    }
}
// impl delegate type
open class DependencyPropertyChangedCallback
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallbackVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.IDependencyPropertyChangedCallback.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DependencyPropertyChangedCallback.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DependencyPropertyChangedCallback.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>, _ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>) in
        guard let self = DependencyPropertyChangedCallback.from_DependencyPropertyChangedCallback(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: Microsoft.UI.Xaml.DependencyObject(plok: Microsoft.UI.Xaml.IDependencyObject(sender)), dp: Microsoft.UI.Xaml.DependencyProperty(plok: Microsoft.UI.Xaml.IDependencyProperty(dp)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: DependencyPropertyChangedCallback? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<Microsoft.UI.Xaml.DependencyObject>, Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Void>
    public init(cb : Optional<(Optional<Microsoft.UI.Xaml.DependencyObject>, Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_DependencyPropertyChangedCallback(_ pUnk: UnsafeMutableRawPointer?) -> DependencyPropertyChangedCallback? {
        return pUnk?.bindMemory(to: DependencyPropertyChangedCallback.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<Microsoft.UI.Xaml.DependencyObject>, dp : Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Void {
        if let cb = _cb {
            try cb(sender, dp)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.IDependencyPropertyChangedCallback {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.IDependencyPropertyChangedCallback(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_DependencyPropertyChangedCallback
{
    private var _self : Microsoft.UI.Xaml.IDependencyPropertyChangedCallback;
    public init(plok: Microsoft.UI.Xaml.IDependencyPropertyChangedCallback?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<Microsoft.UI.Xaml.DependencyObject>, dp : Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Void {
        return try _self.Invoke(sender: sender!.Interface(), dp: dp!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.IDependencyPropertyChangedCallback {
        return _self
    }
}

// type: Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs
// runtime class
public class DependencyPropertyChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs { return _self; }
    // method not needed: get_Property
    // method not needed: get_OldValue
    // method not needed: get_NewValue
}

// type: Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler
// delegate type
open class IDependencyPropertyChangedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4be8dc75, Data2: 0x373d, Data3 : 0x5f4e, Data4 : (0xa0, 0xb4, 0x54, 0xb9, 0xee, 0xaf, 0xb4, 0xa9)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class DependencyPropertyChangedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DependencyPropertyChangedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DependencyPropertyChangedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventArgs>>) in
        guard let self = DependencyPropertyChangedEventHandler.from_DependencyPropertyChangedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs(plok: Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: DependencyPropertyChangedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_DependencyPropertyChangedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> DependencyPropertyChangedEventHandler? {
        return pUnk?.bindMemory(to: DependencyPropertyChangedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>) throws -> Void {
        if let cb = _cb {
            try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_DependencyPropertyChangedEventHandler
{
    private var _self : Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler;
    public init(plok: Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.DependencyPropertyChangedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.IDependencyPropertyChangedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.DispatcherTimer
// runtime class
open class DispatcherTimer
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IDispatcherTimer;
    public init(plok: Microsoft.UI.Xaml.IDispatcherTimer?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDispatcherTimer { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IDispatcherTimerFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IDispatcherTimerFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.DispatcherTimer");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_Interval() throws -> Windows.Foundation.TimeSpan {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.get_Interval();
    }
    public func put_Interval(value : Windows.Foundation.TimeSpan) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.put_Interval(value: value);
    }
    public func get_IsEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.get_IsEnabled();
    }
    public func add_Tick(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.add_Tick(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public func remove_Tick(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.remove_Tick(token: token);
    }
    public func Start() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.Start();
    }
    public func Stop() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public var Interval : Windows.Foundation.TimeSpan {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.Interval;
        }
    }
    public var IsEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IDispatcherTimer = try _self.QueryInterface();
        return try _ifc.IsEnabled;
        }
    }
}

// type: Microsoft.UI.Xaml.DragEventArgs
// runtime class
public class DragEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.IDragEventArgs;
    public init(plok: Microsoft.UI.Xaml.IDragEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDragEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_Data
    // method not needed: put_Data
    // method not needed: get_DataView
    // method not needed: get_DragUIOverride
    // method not needed: get_Modifiers
    // method not needed: get_AcceptedOperation
    // method not needed: put_AcceptedOperation
    // method not needed: get_AllowedOperations
    // method not needed: GetDeferral
    // method not needed: GetPosition
}

// type: Microsoft.UI.Xaml.DragEventHandler
// delegate type
open class IDragEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x277afc83, Data2: 0xcb67, Data3 : 0x56c8, Data4 : (0xb6, 0x01, 0x1b, 0x9c, 0x0f, 0x1c, 0x3d, 0x32)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.DragEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDragEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.IDragEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class DragEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIDragEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.IDragEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DragEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DragEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventArgs>>) in
        guard let self = DragEventHandler.from_DragEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.DragEventArgs(plok: Microsoft.UI.Xaml.IDragEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: DragEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIDragEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CIDragEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_DragEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> DragEventHandler? {
        return pUnk?.bindMemory(to: DragEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void {
        if let cb = _cb {
            try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.IDragEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.IDragEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_DragEventHandler
{
    private var _self : Microsoft.UI.Xaml.IDragEventHandler;
    public init(plok: Microsoft.UI.Xaml.IDragEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.IDragEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.DragStartingEventArgs
// runtime class
public class DragStartingEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.IDragStartingEventArgs;
    public init(plok: Microsoft.UI.Xaml.IDragStartingEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDragStartingEventArgs { return _self; }
    // method not needed: get_Cancel
    // method not needed: put_Cancel
    // method not needed: get_Data
    // method not needed: get_DragUI
    // method not needed: get_AllowedOperations
    // method not needed: put_AllowedOperations
    // method not needed: GetDeferral
    // method not needed: GetPosition
}

// type: Microsoft.UI.Xaml.DropCompletedEventArgs
// runtime class
public class DropCompletedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.IDropCompletedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IDropCompletedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IDropCompletedEventArgs { return _self; }
    // method not needed: get_DropResult
}

// type: Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs
// runtime class
public class EffectiveViewportChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs { return _self; }
    // method not needed: get_EffectiveViewport
    // method not needed: get_MaxViewport
    // method not needed: get_BringIntoViewDistanceX
    // method not needed: get_BringIntoViewDistanceY
}

// type: Microsoft.UI.Xaml.ElementHighContrastAdjustment
// enum type
public typealias ElementHighContrastAdjustment = _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment;

// type: Microsoft.UI.Xaml.ElementSoundMode
// enum type
public typealias ElementSoundMode = _q_CMicrosoft_CUI_CXaml_CElementSoundMode;

// type: Microsoft.UI.Xaml.ElementTheme
// enum type
public typealias ElementTheme = _q_CMicrosoft_CUI_CXaml_CElementTheme;

// type: Microsoft.UI.Xaml.ExceptionRoutedEventArgs
// runtime class
open class ExceptionRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.IExceptionRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IExceptionRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IExceptionRoutedEventArgs { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IExceptionRoutedEventArgsFactory
// composable interface not needed: Microsoft.UI.Xaml.IExceptionRoutedEventArgsFactory
    // method not needed: get_ErrorMessage
}

// type: Microsoft.UI.Xaml.ExceptionRoutedEventHandler
// delegate type
open class IExceptionRoutedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x45fbb85d, Data2: 0x54f9, Data3 : 0x5a2a, Data4 : (0x8a, 0x38, 0x00, 0xa3, 0xb7, 0x76, 0x1f, 0x96)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.ExceptionRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.IExceptionRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ExceptionRoutedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.IExceptionRoutedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ExceptionRoutedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ExceptionRoutedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventArgs>>) in
        guard let self = ExceptionRoutedEventHandler.from_ExceptionRoutedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.ExceptionRoutedEventArgs(plok: Microsoft.UI.Xaml.IExceptionRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ExceptionRoutedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.ExceptionRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.ExceptionRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ExceptionRoutedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> ExceptionRoutedEventHandler? {
        return pUnk?.bindMemory(to: ExceptionRoutedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.ExceptionRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.IExceptionRoutedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.IExceptionRoutedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_ExceptionRoutedEventHandler
{
    private var _self : Microsoft.UI.Xaml.IExceptionRoutedEventHandler;
    public init(plok: Microsoft.UI.Xaml.IExceptionRoutedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.ExceptionRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.IExceptionRoutedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.FlowDirection
// enum type
public typealias FlowDirection = _q_CMicrosoft_CUI_CXaml_CFlowDirection;

// type: Microsoft.UI.Xaml.FocusState
// enum type
public typealias FocusState = _q_CMicrosoft_CUI_CXaml_CFocusState;

// type: Microsoft.UI.Xaml.FocusVisualKind
// enum type
public typealias FocusVisualKind = _q_CMicrosoft_CUI_CXaml_CFocusVisualKind;

// type: Microsoft.UI.Xaml.FrameworkElement
// runtime class
open class FrameworkElement
    :
    Microsoft.UI.Xaml.UIElement
{
    private var _self : Microsoft.UI.Xaml.IFrameworkElement;
    private class Container {
        public var self_ref: FrameworkElement? = nil
    }
    private struct WithTrailingObjects_IFrameworkElementOverrides {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides
        public var container: Unmanaged<Container>
    }
    private var instance: Optional<UnsafeMutablePointer<WithTrailingObjects_IFrameworkElementOverrides>>
    private var _inner: Optional<WinRT.IInspectable> = nil
    private static func from_IFrameworkElementOverrides(_ pUnk: UnsafeMutableRawPointer?) -> FrameworkElement? {
        return pUnk?.bindMemory(to: FrameworkElement.WithTrailingObjects_IFrameworkElementOverrides.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    public init(plok: Microsoft.UI.Xaml.IFrameworkElement?) throws {
        _self = plok!
        self.instance = nil
        try super.init(plok: _self.QueryInterface())
        let instance = UnsafeMutablePointer<WithTrailingObjects_IFrameworkElementOverrides>.allocate(capacity: 1)
        instance.pointee = WithTrailingObjects_IFrameworkElementOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides(lpVtbl: &Self.vtable_IFrameworkElementOverrides), container: Unmanaged<Container>.passRetained(Container()))
        self.instance = instance
    }
    public func Interface() -> Microsoft.UI.Xaml.IFrameworkElement { return _self; }
    private static var vtable_IFrameworkElementOverrides: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.IFrameworkElementOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: FrameworkElement.WithTrailingObjects_IFrameworkElementOverrides.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: FrameworkElement.WithTrailingObjects_IFrameworkElementOverrides.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 1
        var mem = CoTaskMemAlloc(16).bindMemory(to: IID.self, capacity: 1)
        (mem + 0).pointee = Microsoft.UI.Xaml.IFrameworkElementOverrides.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.IFrameworkElementOverrides").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    MeasureOverride: {
        (pThis, _ availableSize : _q_CWindows_CFoundation_CSize, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) in
        guard let self = FrameworkElement.from_IFrameworkElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Windows.Foundation.Size = try self.MeasureOverride(availableSize: availableSize)
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    ArrangeOverride: {
        (pThis, _ finalSize : _q_CWindows_CFoundation_CSize, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) in
        guard let self = FrameworkElement.from_IFrameworkElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Windows.Foundation.Size = try self.ArrangeOverride(finalSize: finalSize)
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnApplyTemplate: {
        (pThis) in
        guard let self = FrameworkElement.from_IFrameworkElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnApplyTemplate()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GoToElementStateCore: {
        (pThis, _ stateName : Optional<HSTRING>, _ useTransitions : boolean, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = FrameworkElement.from_IFrameworkElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.GoToElementStateCore(stateName: Swift.String(from: stateName), useTransitions: useTransitions)
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    // COMPOSABLE: Microsoft.UI.Xaml.IFrameworkElementFactory
    public init() throws {
        let instance = UnsafeMutablePointer<WithTrailingObjects_IFrameworkElementOverrides>.allocate(capacity: 1)
        self.instance = instance
        instance.pointee = WithTrailingObjects_IFrameworkElementOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides(lpVtbl: &Self.vtable_IFrameworkElementOverrides), container: Unmanaged<Container>.passRetained(Container()))
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IFrameworkElementFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.FrameworkElement");
        let baseInterface = WinRT.IInspectable(UnsafeMutableRawPointer(instance))
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        _inner = _inn;
        try super.init(plok: _self.QueryInterface())
        instance.pointee.container.takeUnretainedValue().self_ref = self
    }
    private struct _IFrameworkElementStatics {
        static var x : IFrameworkElementStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.FrameworkElement")
    }
    public static var FrameworkElementStatics : IFrameworkElementStatics {
        _IFrameworkElementStatics.x
    }
    public static func get_TagProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_TagProperty());
    }
    public static func get_LanguageProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_LanguageProperty());
    }
    public static func get_ActualWidthProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_ActualWidthProperty());
    }
    public static func get_ActualHeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_ActualHeightProperty());
    }
    public static func get_WidthProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_WidthProperty());
    }
    public static func get_HeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_HeightProperty());
    }
    public static func get_MinWidthProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_MinWidthProperty());
    }
    public static func get_MaxWidthProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_MaxWidthProperty());
    }
    public static func get_MinHeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_MinHeightProperty());
    }
    public static func get_MaxHeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_MaxHeightProperty());
    }
    public static func get_HorizontalAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_HorizontalAlignmentProperty());
    }
    public static func get_VerticalAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_VerticalAlignmentProperty());
    }
    public static func get_MarginProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_MarginProperty());
    }
    public static func get_NameProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_NameProperty());
    }
    public static func get_DataContextProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_DataContextProperty());
    }
    public static func get_AllowFocusOnInteractionProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_AllowFocusOnInteractionProperty());
    }
    public static func get_FocusVisualMarginProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_FocusVisualMarginProperty());
    }
    public static func get_FocusVisualSecondaryThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_FocusVisualSecondaryThicknessProperty());
    }
    public static func get_FocusVisualPrimaryThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_FocusVisualPrimaryThicknessProperty());
    }
    public static func get_FocusVisualSecondaryBrushProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_FocusVisualSecondaryBrushProperty());
    }
    public static func get_FocusVisualPrimaryBrushProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_FocusVisualPrimaryBrushProperty());
    }
    public static func get_AllowFocusWhenDisabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_AllowFocusWhenDisabledProperty());
    }
    public static func get_StyleProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_StyleProperty());
    }
    public static func get_FlowDirectionProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_FlowDirectionProperty());
    }
    public static func get_RequestedThemeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_RequestedThemeProperty());
    }
    public static func get_ActualThemeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.get_ActualThemeProperty());
    }
    public static func DeferTree(element : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        return try FrameworkElementStatics.DeferTree(element: element!.Interface());
    }
    public static var ActualHeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.ActualHeightProperty);
        }
    }
    public static var ActualThemeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.ActualThemeProperty);
        }
    }
    public static var ActualWidthProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.ActualWidthProperty);
        }
    }
    public static var AllowFocusOnInteractionProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.AllowFocusOnInteractionProperty);
        }
    }
    public static var AllowFocusWhenDisabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.AllowFocusWhenDisabledProperty);
        }
    }
    public static var DataContextProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.DataContextProperty);
        }
    }
    public static var FlowDirectionProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.FlowDirectionProperty);
        }
    }
    public static var FocusVisualMarginProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.FocusVisualMarginProperty);
        }
    }
    public static var FocusVisualPrimaryBrushProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.FocusVisualPrimaryBrushProperty);
        }
    }
    public static var FocusVisualPrimaryThicknessProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.FocusVisualPrimaryThicknessProperty);
        }
    }
    public static var FocusVisualSecondaryBrushProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.FocusVisualSecondaryBrushProperty);
        }
    }
    public static var FocusVisualSecondaryThicknessProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.FocusVisualSecondaryThicknessProperty);
        }
    }
    public static var HeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.HeightProperty);
        }
    }
    public static var HorizontalAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.HorizontalAlignmentProperty);
        }
    }
    public static var LanguageProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.LanguageProperty);
        }
    }
    public static var MarginProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.MarginProperty);
        }
    }
    public static var MaxHeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.MaxHeightProperty);
        }
    }
    public static var MaxWidthProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.MaxWidthProperty);
        }
    }
    public static var MinHeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.MinHeightProperty);
        }
    }
    public static var MinWidthProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.MinWidthProperty);
        }
    }
    public static var NameProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.NameProperty);
        }
    }
    public static var RequestedThemeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.RequestedThemeProperty);
        }
    }
    public static var StyleProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.StyleProperty);
        }
    }
    public static var TagProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.TagProperty);
        }
    }
    public static var VerticalAlignmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.VerticalAlignmentProperty);
        }
    }
    public static var WidthProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: FrameworkElementStatics.WidthProperty);
        }
    }
    public func get_Triggers() throws -> Optional<Microsoft.UI.Xaml.TriggerCollection> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.TriggerCollection(plok: _ifc.get_Triggers());
    }
    public func get_Resources() throws -> Optional<Microsoft.UI.Xaml.ResourceDictionary> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ResourceDictionary(plok: _ifc.get_Resources());
    }
    public func put_Resources(value : Optional<Microsoft.UI.Xaml.ResourceDictionary>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Resources(value: value!.Interface());
    }
    public func get_Tag() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_Tag();
    }
    public func put_Tag(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Tag(value: value!.GetInterface());
    }
    public func get_Language() throws -> Swift.String {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_Language();
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Language(value: value);
    }
    public func get_ActualWidth() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_ActualWidth();
    }
    public func get_ActualHeight() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_ActualHeight();
    }
    public func get_Width() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_Width();
    }
    public func put_Width(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Width(value: value);
    }
    public func get_Height() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_Height();
    }
    public func put_Height(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Height(value: value);
    }
    public func get_MinWidth() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_MinWidth();
    }
    public func put_MinWidth(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_MinWidth(value: value);
    }
    public func get_MaxWidth() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_MaxWidth();
    }
    public func put_MaxWidth(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_MaxWidth(value: value);
    }
    public func get_MinHeight() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_MinHeight();
    }
    public func put_MinHeight(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_MinHeight(value: value);
    }
    public func get_MaxHeight() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_MaxHeight();
    }
    public func put_MaxHeight(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_MaxHeight(value: value);
    }
    public func get_HorizontalAlignment() throws -> Microsoft.UI.Xaml.HorizontalAlignment {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_HorizontalAlignment();
    }
    public func put_HorizontalAlignment(value : Microsoft.UI.Xaml.HorizontalAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_HorizontalAlignment(value: value);
    }
    public func get_VerticalAlignment() throws -> Microsoft.UI.Xaml.VerticalAlignment {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_VerticalAlignment();
    }
    public func put_VerticalAlignment(value : Microsoft.UI.Xaml.VerticalAlignment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_VerticalAlignment(value: value);
    }
    public func get_Margin() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_Margin();
    }
    public func put_Margin(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Margin(value: value);
    }
    public func get_Name() throws -> Swift.String {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_Name();
    }
    public func put_Name(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Name(value: value);
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_BaseUri());
    }
    public func get_DataContext() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_DataContext();
    }
    public func put_DataContext(value : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_DataContext(value: value!.GetInterface());
    }
    public func get_AllowFocusOnInteraction() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_AllowFocusOnInteraction();
    }
    public func put_AllowFocusOnInteraction(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_AllowFocusOnInteraction(value: value);
    }
    public func get_FocusVisualMargin() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_FocusVisualMargin();
    }
    public func put_FocusVisualMargin(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_FocusVisualMargin(value: value);
    }
    public func get_FocusVisualSecondaryThickness() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_FocusVisualSecondaryThickness();
    }
    public func put_FocusVisualSecondaryThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_FocusVisualSecondaryThickness(value: value);
    }
    public func get_FocusVisualPrimaryThickness() throws -> Microsoft.UI.Xaml.Thickness {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_FocusVisualPrimaryThickness();
    }
    public func put_FocusVisualPrimaryThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_FocusVisualPrimaryThickness(value: value);
    }
    public func get_FocusVisualSecondaryBrush() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_FocusVisualSecondaryBrush());
    }
    public func put_FocusVisualSecondaryBrush(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_FocusVisualSecondaryBrush(value: value!.Interface());
    }
    public func get_FocusVisualPrimaryBrush() throws -> Optional<Microsoft.UI.Xaml.Media.Brush> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.get_FocusVisualPrimaryBrush());
    }
    public func put_FocusVisualPrimaryBrush(value : Optional<Microsoft.UI.Xaml.Media.Brush>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_FocusVisualPrimaryBrush(value: value!.Interface());
    }
    public func get_AllowFocusWhenDisabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_AllowFocusWhenDisabled();
    }
    public func put_AllowFocusWhenDisabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_AllowFocusWhenDisabled(value: value);
    }
    public func get_Style() throws -> Optional<Microsoft.UI.Xaml.Style> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Style(plok: _ifc.get_Style());
    }
    public func put_Style(value : Optional<Microsoft.UI.Xaml.Style>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_Style(value: value!.Interface());
    }
    public func get_Parent() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_Parent());
    }
    public func get_FlowDirection() throws -> Microsoft.UI.Xaml.FlowDirection {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_FlowDirection();
    }
    public func put_FlowDirection(value : Microsoft.UI.Xaml.FlowDirection) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_FlowDirection(value: value);
    }
    public func get_RequestedTheme() throws -> Microsoft.UI.Xaml.ElementTheme {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_RequestedTheme();
    }
    public func put_RequestedTheme(value : Microsoft.UI.Xaml.ElementTheme) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.put_RequestedTheme(value: value);
    }
    public func get_IsLoaded() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_IsLoaded();
    }
    public func get_ActualTheme() throws -> Microsoft.UI.Xaml.ElementTheme {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.get_ActualTheme();
    }
    public func add_Loaded(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_Loaded(handler: Microsoft.UI.Xaml.RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_Loaded(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_Loaded(token: token);
    }
    public func add_Unloaded(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_Unloaded(handler: Microsoft.UI.Xaml.RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_Unloaded(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_Unloaded(token: token);
    }
    public func add_DataContextChanged(handler : @escaping (Optional<Microsoft.UI.Xaml.FrameworkElement>, Optional<Microsoft.UI.Xaml.DataContextChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_DataContextChanged(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs(cb: handler).Interface());
    }
    public func remove_DataContextChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_DataContextChanged(token: token);
    }
    public func add_SizeChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.SizeChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_SizeChanged(handler: Microsoft.UI.Xaml.SizeChangedEventHandler(cb: handler).Interface());
    }
    public func remove_SizeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_SizeChanged(token: token);
    }
    public func add_LayoutUpdated(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_LayoutUpdated(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public func remove_LayoutUpdated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_LayoutUpdated(token: token);
    }
    public func add_Loading(handler : @escaping (Optional<Microsoft.UI.Xaml.FrameworkElement>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_Loading(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable(cb: handler).Interface());
    }
    public func remove_Loading(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_Loading(token: token);
    }
    public func add_ActualThemeChanged(handler : @escaping (Optional<Microsoft.UI.Xaml.FrameworkElement>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_ActualThemeChanged(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable(cb: handler).Interface());
    }
    public func remove_ActualThemeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_ActualThemeChanged(token: token);
    }
    public func add_EffectiveViewportChanged(handler : @escaping (Optional<Microsoft.UI.Xaml.FrameworkElement>, Optional<Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.add_EffectiveViewportChanged(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs(cb: handler).Interface());
    }
    public func remove_EffectiveViewportChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.remove_EffectiveViewportChanged(token: token);
    }
    public func FindName(name : Swift.String) throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.FindName(name: name);
    }
    public func SetBinding(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>, binding : Optional<Microsoft.UI.Xaml.Data.BindingBase>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.SetBinding(dp: dp!.Interface(), binding: binding!.Interface());
    }
    public func GetBindingExpression(dp : Optional<Microsoft.UI.Xaml.DependencyProperty>) throws -> Optional<Microsoft.UI.Xaml.Data.BindingExpression> {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Data.BindingExpression(plok: _ifc.GetBindingExpression(dp: dp!.Interface()));
    }
    public var ActualHeight : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.ActualHeight;
        }
    }
    public var ActualTheme : Microsoft.UI.Xaml.ElementTheme {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.ActualTheme;
        }
    }
    public var ActualWidth : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.ActualWidth;
        }
    }
    public var AllowFocusOnInteraction : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.AllowFocusOnInteraction;
        }
    }
    public var AllowFocusWhenDisabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.AllowFocusWhenDisabled;
        }
    }
    public var BaseUri : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.BaseUri);
        }
    }
    public var DataContext : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.DataContext;
        }
    }
    public var FlowDirection : Microsoft.UI.Xaml.FlowDirection {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.FlowDirection;
        }
    }
    public var FocusVisualMargin : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.FocusVisualMargin;
        }
    }
    public var FocusVisualPrimaryBrush : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.FocusVisualPrimaryBrush);
        }
    }
    public var FocusVisualPrimaryThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.FocusVisualPrimaryThickness;
        }
    }
    public var FocusVisualSecondaryBrush : Optional<Microsoft.UI.Xaml.Media.Brush> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Brush(plok: _ifc.FocusVisualSecondaryBrush);
        }
    }
    public var FocusVisualSecondaryThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.FocusVisualSecondaryThickness;
        }
    }
    public var Height : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.Height;
        }
    }
    public var HorizontalAlignment : Microsoft.UI.Xaml.HorizontalAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.HorizontalAlignment;
        }
    }
    public var IsLoaded : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.IsLoaded;
        }
    }
    public var Language : Swift.String {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.Language;
        }
    }
    public var Margin : Microsoft.UI.Xaml.Thickness {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.Margin;
        }
    }
    public var MaxHeight : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.MaxHeight;
        }
    }
    public var MaxWidth : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.MaxWidth;
        }
    }
    public var MinHeight : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.MinHeight;
        }
    }
    public var MinWidth : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.MinWidth;
        }
    }
    public var Name : Swift.String {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.Name;
        }
    }
    public var Parent : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.Parent);
        }
    }
    public var RequestedTheme : Microsoft.UI.Xaml.ElementTheme {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.RequestedTheme;
        }
    }
    public var Resources : Optional<Microsoft.UI.Xaml.ResourceDictionary> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ResourceDictionary(plok: _ifc.Resources);
        }
    }
    public var Style : Optional<Microsoft.UI.Xaml.Style> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Style(plok: _ifc.Style);
        }
    }
    public var Tag : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.Tag;
        }
    }
    public var Triggers : Optional<Microsoft.UI.Xaml.TriggerCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.TriggerCollection(plok: _ifc.Triggers);
        }
    }
    public var VerticalAlignment : Microsoft.UI.Xaml.VerticalAlignment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.VerticalAlignment;
        }
    }
    public var Width : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElement = try _self.QueryInterface();
        return try _ifc.Width;
        }
    }
    public func InvalidateViewport() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IFrameworkElementProtected = try _self.QueryInterface();
        return try _ifc.InvalidateViewport();
    }
    open func MeasureOverride(availableSize : Windows.Foundation.Size) throws -> Windows.Foundation.Size {
    return _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
    }
    open func ArrangeOverride(finalSize : Windows.Foundation.Size) throws -> Windows.Foundation.Size {
    return _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
    }
    open func OnApplyTemplate() throws -> Void {
    }
    open func GoToElementStateCore(stateName : Swift.String, useTransitions : boolean) throws -> boolean {
    return 0;
    }
}

// type: Microsoft.UI.Xaml.FrameworkTemplate
// runtime class
open class FrameworkTemplate
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.IFrameworkTemplate;
    public init(plok: Microsoft.UI.Xaml.IFrameworkTemplate?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IFrameworkTemplate { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IFrameworkTemplateFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IFrameworkTemplateFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.FrameworkTemplate");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.HorizontalAlignment
// enum type
public typealias HorizontalAlignment = _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment;

// type: Microsoft.UI.Xaml.IApplication
// interface type
open class IApplication
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x06a8f4e7, Data2: 0x1146, Data3 : 0x55af, Data4 : (0x82, 0x0d, 0xeb, 0xd5, 0x56, 0x43, 0xb0, 0x21)) }
    // [IsSpecialName] Microsoft.UI.Xaml.ResourceDictionary get_Resources()
    private func _n_get_Resources(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Resources(pThis, __presult))
        }
    }
    public func get_Resources() throws -> Optional<Microsoft.UI.Xaml.IResourceDictionary> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>> = nil;
        try self._n_get_Resources(&__result);
        return Microsoft.UI.Xaml.IResourceDictionary(consuming: __result);
    }
    // [IsSpecialName] void put_Resources(Microsoft.UI.Xaml.ResourceDictionary)
    private func _n_put_Resources(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Resources(pThis, value))
        }
    }
    public func put_Resources(value : Optional<Microsoft.UI.Xaml.IResourceDictionary>) throws -> Void {
        try self._n_put_Resources(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DebugSettings get_DebugSettings()
    private func _n_get_DebugSettings(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDebugSettings>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DebugSettings(pThis, __presult))
        }
    }
    public func get_DebugSettings() throws -> Optional<Microsoft.UI.Xaml.IDebugSettings> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDebugSettings>> = nil;
        try self._n_get_DebugSettings(&__result);
        return Microsoft.UI.Xaml.IDebugSettings(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ApplicationTheme get_RequestedTheme()
    private func _n_get_RequestedTheme(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CApplicationTheme>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedTheme(pThis, __presult))
        }
    }
    public func get_RequestedTheme() throws -> Microsoft.UI.Xaml.ApplicationTheme {
        var __result : _q_CMicrosoft_CUI_CXaml_CApplicationTheme = _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Light;
        try self._n_get_RequestedTheme(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequestedTheme(Microsoft.UI.Xaml.ApplicationTheme)
    private func _n_put_RequestedTheme(_ value : _q_CMicrosoft_CUI_CXaml_CApplicationTheme) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedTheme(pThis, value))
        }
    }
    public func put_RequestedTheme(value : Microsoft.UI.Xaml.ApplicationTheme) throws -> Void {
        try self._n_put_RequestedTheme(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.FocusVisualKind get_FocusVisualKind()
    private func _n_get_FocusVisualKind(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CFocusVisualKind>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualKind(pThis, __presult))
        }
    }
    public func get_FocusVisualKind() throws -> Microsoft.UI.Xaml.FocusVisualKind {
        var __result : _q_CMicrosoft_CUI_CXaml_CFocusVisualKind = _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_DottedLine;
        try self._n_get_FocusVisualKind(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FocusVisualKind(Microsoft.UI.Xaml.FocusVisualKind)
    private func _n_put_FocusVisualKind(_ value : _q_CMicrosoft_CUI_CXaml_CFocusVisualKind) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualKind(pThis, value))
        }
    }
    public func put_FocusVisualKind(value : Microsoft.UI.Xaml.FocusVisualKind) throws -> Void {
        try self._n_put_FocusVisualKind(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ApplicationHighContrastAdjustment get_HighContrastAdjustment()
    private func _n_get_HighContrastAdjustment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighContrastAdjustment(pThis, __presult))
        }
    }
    public func get_HighContrastAdjustment() throws -> Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        var __result : _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment = _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_None;
        try self._n_get_HighContrastAdjustment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HighContrastAdjustment(Microsoft.UI.Xaml.ApplicationHighContrastAdjustment)
    private func _n_put_HighContrastAdjustment(_ value : _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HighContrastAdjustment(pThis, value))
        }
    }
    public func put_HighContrastAdjustment(value : Microsoft.UI.Xaml.ApplicationHighContrastAdjustment) throws -> Void {
        try self._n_put_HighContrastAdjustment(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_UnhandledException(Microsoft.UI.Xaml.UnhandledExceptionEventHandler)
    private func _n_add_UnhandledException(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_UnhandledException(pThis, handler, __presult))
        }
    }
    public func add_UnhandledException(handler : Optional<Microsoft.UI.Xaml.IUnhandledExceptionEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_UnhandledException(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_UnhandledException(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_UnhandledException(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UnhandledException(pThis, token))
        }
    }
    public func remove_UnhandledException(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_UnhandledException(token);
    }
    // void Exit()
    private func _n_Exit() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Exit(pThis))
        }
    }
    public func Exit() throws -> Void {
        try self._n_Exit();
    }
    public var DebugSettings : Optional<Microsoft.UI.Xaml.IDebugSettings> {
        get throws {
            return try get_DebugSettings();
        }
    }
    public var FocusVisualKind : Microsoft.UI.Xaml.FocusVisualKind {
        get throws {
            return try get_FocusVisualKind();
        }
    }
    public var HighContrastAdjustment : Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
        get throws {
            return try get_HighContrastAdjustment();
        }
    }
    public var RequestedTheme : Microsoft.UI.Xaml.ApplicationTheme {
        get throws {
            return try get_RequestedTheme();
        }
    }
    public var Resources : Optional<Microsoft.UI.Xaml.IResourceDictionary> {
        get throws {
            return try get_Resources();
        }
    }
} // IApplication


// type: Microsoft.UI.Xaml.IApplicationFactory
// interface type
// COMPOSITION INTERFACE
open class IApplicationFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9fd96657, Data2: 0x5294, Data3 : 0x5a65, Data4 : (0xa1, 0xdb, 0x4f, 0xea, 0x14, 0x35, 0x97, 0xda)) }
    // Microsoft.UI.Xaml.Application CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IApplication> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IApplication(consuming: __result);
    }
} // IApplicationFactory


// type: Microsoft.UI.Xaml.IApplicationInitializationCallbackParams
// interface type
open class IApplicationInitializationCallbackParams
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1b1906ea, Data2: 0x5b7b, Data3 : 0x5876, Data4 : (0x81, 0xab, 0x7c, 0x22, 0x81, 0xac, 0x3d, 0x20)) }
} // IApplicationInitializationCallbackParams


// type: Microsoft.UI.Xaml.IApplicationOverrides
// interface type
open class IApplicationOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa33e81ef, Data2: 0xc665, Data3 : 0x503b, Data4 : (0x88, 0x27, 0xd2, 0x7e, 0xf1, 0x72, 0x0a, 0x06)) }
    // void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs)
    private func _n_OnLaunched(_ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CILaunchActivatedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnLaunched(pThis, args))
        }
    }
    public func OnLaunched(args : Optional<Microsoft.UI.Xaml.ILaunchActivatedEventArgs>) throws -> Void {
        try self._n_OnLaunched(RawPointer(args));
    }
} // IApplicationOverrides


// type: Microsoft.UI.Xaml.IApplicationStatics
// interface type
open class IApplicationStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4e0d09f5, Data2: 0x4358, Data3 : 0x512c, Data4 : (0xa9, 0x87, 0x50, 0x3b, 0x52, 0x84, 0x8e, 0x95)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Application get_Current()
    private func _n_get_Current(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, __presult))
        }
    }
    public func get_Current() throws -> Optional<Microsoft.UI.Xaml.IApplication> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplication>> = nil;
        try self._n_get_Current(&__result);
        return Microsoft.UI.Xaml.IApplication(consuming: __result);
    }
    // void Start(Microsoft.UI.Xaml.ApplicationInitializationCallback)
    private func _n_Start(_ callback : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIApplicationInitializationCallback>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis, callback))
        }
    }
    public func Start(callback : Optional<Microsoft.UI.Xaml.IApplicationInitializationCallback>) throws -> Void {
        try self._n_Start(RawPointer(callback));
    }
    // void LoadComponent(System.Object, Windows.Foundation.Uri)
    private func _n_LoadComponent(_ component : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ resourceLocator : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadComponent(pThis, component, resourceLocator))
        }
    }
    public func LoadComponent(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_LoadComponent(RawPointer(component), RawPointer(resourceLocator));
    }
    // void LoadComponent(System.Object, Windows.Foundation.Uri, Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation)
    private func _n_LoadComponentWithResourceLocation(_ component : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ resourceLocator : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ componentResourceLocation : _q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadComponentWithResourceLocation(pThis, component, resourceLocator, componentResourceLocation))
        }
    }
    public func LoadComponentWithResourceLocation(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<Windows.Foundation.IUriRuntimeClass>, componentResourceLocation : Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation) throws -> Void {
        try self._n_LoadComponentWithResourceLocation(RawPointer(component), RawPointer(resourceLocator), componentResourceLocation);
    }
    public var Current : Optional<Microsoft.UI.Xaml.IApplication> {
        get throws {
            return try get_Current();
        }
    }
} // IApplicationStatics


// type: Microsoft.UI.Xaml.IBringIntoViewOptions
// interface type
open class IBringIntoViewOptions
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xeeb4a447, Data2: 0xeb9e, Data3 : 0x5003, Data4 : (0xa4, 0x79, 0xb9, 0xe3, 0xa8, 0x86, 0xb7, 0x08)) }
// method not needed: get_AnimationDesired
// method not needed: put_AnimationDesired
// method not needed: get_TargetRect
// method not needed: put_TargetRect
// method not needed: get_HorizontalAlignmentRatio
// method not needed: put_HorizontalAlignmentRatio
// method not needed: get_VerticalAlignmentRatio
// method not needed: put_VerticalAlignmentRatio
// method not needed: get_HorizontalOffset
// method not needed: put_HorizontalOffset
// method not needed: get_VerticalOffset
// method not needed: put_VerticalOffset
} // IBringIntoViewOptions


// type: Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs
// interface type
open class IBringIntoViewRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x807de8f9, Data2: 0xb1dc, Data3 : 0x5a63, Data4 : (0x81, 0x01, 0x5e, 0xe9, 0x66, 0x84, 0x1a, 0x27)) }
// method not needed: get_TargetElement
// method not needed: put_TargetElement
// method not needed: get_AnimationDesired
// method not needed: put_AnimationDesired
// method not needed: get_TargetRect
// method not needed: put_TargetRect
// method not needed: get_HorizontalAlignmentRatio
// method not needed: get_VerticalAlignmentRatio
// method not needed: get_HorizontalOffset
// method not needed: put_HorizontalOffset
// method not needed: get_VerticalOffset
// method not needed: put_VerticalOffset
// method not needed: get_Handled
// method not needed: put_Handled
} // IBringIntoViewRequestedEventArgs


// type: Microsoft.UI.Xaml.IBrushTransition
// interface type
open class IBrushTransition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa996a7ba, Data2: 0x4567, Data3 : 0x5963, Data4 : (0xa1, 0x12, 0x76, 0xe3, 0xc0, 0x00, 0x02, 0x04)) }
// method not needed: get_Duration
// method not needed: put_Duration
} // IBrushTransition


// type: Microsoft.UI.Xaml.IBrushTransitionFactory
// interface type
// COMPOSITION INTERFACE
open class IBrushTransitionFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x13735998, Data2: 0xc3b6, Data3 : 0x5c24, Data4 : (0xb4, 0x0a, 0x7b, 0x16, 0x6a, 0x6f, 0xfc, 0x2c)) }
    // Microsoft.UI.Xaml.BrushTransition CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIBrushTransitionFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IBrushTransition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBrushTransition>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IBrushTransition(consuming: __result);
    }
} // IBrushTransitionFactory


// type: Microsoft.UI.Xaml.IDataContextChangedEventArgs
// interface type
open class IDataContextChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa1be80f4, Data2: 0xcf83, Data3 : 0x5022, Data4 : (0xb1, 0x13, 0x92, 0x33, 0xf1, 0xd4, 0xfa, 0xfa)) }
// method not needed: get_NewValue
// method not needed: get_Handled
// method not needed: put_Handled
} // IDataContextChangedEventArgs


// type: Microsoft.UI.Xaml.IDataTemplate
// interface type
open class IDataTemplate
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x08fa70fa, Data2: 0xee75, Data3 : 0x5e92, Data4 : (0xa1, 0x01, 0xf5, 0x2d, 0x0e, 0x1e, 0x9f, 0xab)) }
// method not needed: LoadContent
} // IDataTemplate


// type: Microsoft.UI.Xaml.IDataTemplateFactory
// interface type
// COMPOSITION INTERFACE
open class IDataTemplateFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd8e8249d, Data2: 0x305b, Data3 : 0x5ca5, Data4 : (0xac, 0xf8, 0x3e, 0x1b, 0xef, 0xfd, 0x02, 0x19)) }
    // Microsoft.UI.Xaml.DataTemplate CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDataTemplateFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IDataTemplate> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDataTemplate>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IDataTemplate(consuming: __result);
    }
} // IDataTemplateFactory


// type: Microsoft.UI.Xaml.IDebugSettings
// interface type
open class IDebugSettings
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4004943b, Data2: 0x2509, Data3 : 0x5476, Data4 : (0xbb, 0xa2, 0x3f, 0xe0, 0x5e, 0xcf, 0x61, 0x5d)) }
// method not needed: get_EnableFrameRateCounter
// method not needed: put_EnableFrameRateCounter
// method not needed: get_IsBindingTracingEnabled
// method not needed: put_IsBindingTracingEnabled
// method not needed: get_IsTextPerformanceVisualizationEnabled
// method not needed: put_IsTextPerformanceVisualizationEnabled
// method not needed: get_FailFastOnErrors
// method not needed: put_FailFastOnErrors
// method not needed: add_BindingFailed
// method not needed: remove_BindingFailed
} // IDebugSettings


// type: Microsoft.UI.Xaml.IDependencyObject
// interface type
open class IDependencyObject
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe7beaee7, Data2: 0x160e, Data3 : 0x50f7, Data4 : (0x87, 0x89, 0xd6, 0x34, 0x63, 0xf9, 0x79, 0xfa)) }
    // System.Object GetValue(Microsoft.UI.Xaml.DependencyProperty)
    private func _n_GetValue(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetValue(pThis, dp, __presult))
        }
    }
    public func GetValue(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>) throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_GetValue(RawPointer(dp), &__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // void SetValue(Microsoft.UI.Xaml.DependencyProperty, System.Object)
    private func _n_SetValue(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetValue(pThis, dp, value))
        }
    }
    public func SetValue(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>, value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_SetValue(RawPointer(dp), RawPointer(value));
    }
    // void ClearValue(Microsoft.UI.Xaml.DependencyProperty)
    private func _n_ClearValue(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ClearValue(pThis, dp))
        }
    }
    public func ClearValue(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>) throws -> Void {
        try self._n_ClearValue(RawPointer(dp));
    }
    // System.Object ReadLocalValue(Microsoft.UI.Xaml.DependencyProperty)
    private func _n_ReadLocalValue(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReadLocalValue(pThis, dp, __presult))
        }
    }
    public func ReadLocalValue(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>) throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_ReadLocalValue(RawPointer(dp), &__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // System.Object GetAnimationBaseValue(Microsoft.UI.Xaml.DependencyProperty)
    private func _n_GetAnimationBaseValue(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAnimationBaseValue(pThis, dp, __presult))
        }
    }
    public func GetAnimationBaseValue(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>) throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_GetAnimationBaseValue(RawPointer(dp), &__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // System.Int64 RegisterPropertyChangedCallback(Microsoft.UI.Xaml.DependencyProperty, Microsoft.UI.Xaml.DependencyPropertyChangedCallback)
    private func _n_RegisterPropertyChangedCallback(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ callback : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyPropertyChangedCallback>>, _ __presult: UnsafeMutablePointer<INT64>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterPropertyChangedCallback(pThis, dp, callback, __presult))
        }
    }
    public func RegisterPropertyChangedCallback(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>, callback : Optional<Microsoft.UI.Xaml.IDependencyPropertyChangedCallback>) throws -> Swift.Int64 {
        var __result : INT64 = 0;
        try self._n_RegisterPropertyChangedCallback(RawPointer(dp), RawPointer(callback), &__result);
        return __result;
    }
    // void UnregisterPropertyChangedCallback(Microsoft.UI.Xaml.DependencyProperty, System.Int64)
    private func _n_UnregisterPropertyChangedCallback(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ token : INT64) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UnregisterPropertyChangedCallback(pThis, dp, token))
        }
    }
    public func UnregisterPropertyChangedCallback(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>, token : Swift.Int64) throws -> Void {
        try self._n_UnregisterPropertyChangedCallback(RawPointer(dp), token);
    }
    // [IsSpecialName] Windows.UI.Core.CoreDispatcher get_Dispatcher()
    private func _n_get_Dispatcher(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreDispatcher>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dispatcher(pThis, __presult))
        }
    }
    public func get_Dispatcher() throws -> Optional<Windows.UI.Core.ICoreDispatcher> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreDispatcher>> = nil;
        try self._n_get_Dispatcher(&__result);
        return Windows.UI.Core.ICoreDispatcher(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue()
    private func _n_get_DispatcherQueue(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObject.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, __presult))
        }
    }
    public func get_DispatcherQueue() throws -> Optional<Microsoft.UI.Dispatching.IDispatcherQueue> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue>> = nil;
        try self._n_get_DispatcherQueue(&__result);
        return Microsoft.UI.Dispatching.IDispatcherQueue(consuming: __result);
    }
    public var Dispatcher : Optional<Windows.UI.Core.ICoreDispatcher> {
        get throws {
            return try get_Dispatcher();
        }
    }
    public var DispatcherQueue : Optional<Microsoft.UI.Dispatching.IDispatcherQueue> {
        get throws {
            return try get_DispatcherQueue();
        }
    }
} // IDependencyObject


// type: Microsoft.UI.Xaml.IDependencyObjectFactory
// interface type
// COMPOSITION INTERFACE
open class IDependencyObjectFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x936b614c, Data2: 0x475f, Data3 : 0x5d7d, Data4 : (0xb3, 0xf7, 0xbf, 0x1f, 0xbe, 0xa2, 0x81, 0x26)) }
    // Microsoft.UI.Xaml.DependencyObject CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDependencyObjectFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
} // IDependencyObjectFactory


// type: Microsoft.UI.Xaml.IDependencyProperty
// interface type
open class IDependencyProperty
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x960eab49, Data2: 0x9672, Data3 : 0x58a0, Data4 : (0x99, 0x5b, 0x3a, 0x42, 0xe5, 0xea, 0x62, 0x78)) }
// method not needed: GetMetadata
} // IDependencyProperty


// type: Microsoft.UI.Xaml.IDependencyPropertyChangedEventArgs
// interface type
open class IDependencyPropertyChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x84ead020, Data2: 0x7849, Data3 : 0x5e98, Data4 : (0x80, 0x30, 0x48, 0x8a, 0x80, 0xd1, 0x64, 0xec)) }
// method not needed: get_Property
// method not needed: get_OldValue
// method not needed: get_NewValue
} // IDependencyPropertyChangedEventArgs


// type: Microsoft.UI.Xaml.IDispatcherTimer
// interface type
open class IDispatcherTimer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x58a4abf1, Data2: 0xa4a3, Data3 : 0x53dd, Data4 : (0xae, 0x21, 0x08, 0xf4, 0x32, 0x31, 0xe8, 0x17)) }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_Interval()
    private func _n_get_Interval(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Interval(pThis, __presult))
        }
    }
    public func get_Interval() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_Interval(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Interval(Windows.Foundation.TimeSpan)
    private func _n_put_Interval(_ value : _q_CWindows_CFoundation_CTimeSpan) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Interval(pThis, value))
        }
    }
    public func put_Interval(value : Windows.Foundation.TimeSpan) throws -> Void {
        try self._n_put_Interval(value);
    }
    // [IsSpecialName] bool get_IsEnabled()
    private func _n_get_IsEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsEnabled(pThis, __presult))
        }
    }
    public func get_IsEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Tick(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_Tick(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Tick(pThis, handler, __presult))
        }
    }
    public func add_Tick(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Tick(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Tick(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Tick(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Tick(pThis, token))
        }
    }
    public func remove_Tick(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Tick(token);
    }
    // void Start()
    private func _n_Start() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis))
        }
    }
    public func Start() throws -> Void {
        try self._n_Start();
    }
    // void Stop()
    private func _n_Stop() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
        }
    }
    public func Stop() throws -> Void {
        try self._n_Stop();
    }
    public var Interval : Windows.Foundation.TimeSpan {
        get throws {
            return try get_Interval();
        }
    }
    public var IsEnabled : boolean {
        get throws {
            return try get_IsEnabled();
        }
    }
} // IDispatcherTimer


// type: Microsoft.UI.Xaml.IDispatcherTimerFactory
// interface type
// COMPOSITION INTERFACE
open class IDispatcherTimerFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1bcb3166, Data2: 0x22e4, Data3 : 0x50bf, Data4 : (0xa5, 0xa2, 0xb7, 0x8c, 0xa4, 0x37, 0x7b, 0xd0)) }
    // Microsoft.UI.Xaml.DispatcherTimer CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIDispatcherTimerFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IDispatcherTimer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDispatcherTimer>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IDispatcherTimer(consuming: __result);
    }
} // IDispatcherTimerFactory


// type: Microsoft.UI.Xaml.IDragEventArgs
// interface type
open class IDragEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x47ac5757, Data2: 0xe4bc, Data3 : 0x52ba, Data4 : (0x8a, 0xb9, 0x1b, 0xf8, 0x1a, 0xad, 0x79, 0x00)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_Data
// method not needed: put_Data
// method not needed: get_DataView
// method not needed: get_DragUIOverride
// method not needed: get_Modifiers
// method not needed: get_AcceptedOperation
// method not needed: put_AcceptedOperation
// method not needed: get_AllowedOperations
// method not needed: GetDeferral
// method not needed: GetPosition
} // IDragEventArgs


// type: Microsoft.UI.Xaml.IDragStartingEventArgs
// interface type
open class IDragStartingEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xad17bace, Data2: 0x9613, Data3 : 0x5666, Data4 : (0xa3, 0x1b, 0x79, 0xa7, 0x3f, 0xba, 0x77, 0xcf)) }
// method not needed: get_Cancel
// method not needed: put_Cancel
// method not needed: get_Data
// method not needed: get_DragUI
// method not needed: get_AllowedOperations
// method not needed: put_AllowedOperations
// method not needed: GetDeferral
// method not needed: GetPosition
} // IDragStartingEventArgs


// type: Microsoft.UI.Xaml.IDropCompletedEventArgs
// interface type
open class IDropCompletedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe700082d, Data2: 0xc640, Data3 : 0x5d44, Data4 : (0xb2, 0x3a, 0xf2, 0x13, 0xdf, 0xbe, 0xb2, 0x45)) }
// method not needed: get_DropResult
} // IDropCompletedEventArgs


// type: Microsoft.UI.Xaml.IEffectiveViewportChangedEventArgs
// interface type
open class IEffectiveViewportChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x636e8159, Data2: 0x2d82, Data3 : 0x538a, Data4 : (0x84, 0x83, 0xcd, 0x57, 0x6e, 0x41, 0xd0, 0xdf)) }
// method not needed: get_EffectiveViewport
// method not needed: get_MaxViewport
// method not needed: get_BringIntoViewDistanceX
// method not needed: get_BringIntoViewDistanceY
} // IEffectiveViewportChangedEventArgs


// type: Microsoft.UI.Xaml.IExceptionRoutedEventArgs
// interface type
open class IExceptionRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe8bcb6d2, Data2: 0xd3f5, Data3 : 0x5393, Data4 : (0xa8, 0x4f, 0xdf, 0xcd, 0x44, 0xa2, 0xdf, 0x34)) }
// method not needed: get_ErrorMessage
} // IExceptionRoutedEventArgs


// type: Microsoft.UI.Xaml.IFrameworkElement
// interface type
open class IFrameworkElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe08f13d, Data2: 0xdc6a, Data3 : 0x5495, Data4 : (0xad, 0x44, 0xc2, 0xd8, 0xd2, 0x18, 0x63, 0xb0)) }
    // [IsSpecialName] Microsoft.UI.Xaml.TriggerCollection get_Triggers()
    private func _n_get_Triggers(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Triggers(pThis, __presult))
        }
    }
    public func get_Triggers() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase>> = nil;
        try self._n_get_Triggers(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ResourceDictionary get_Resources()
    private func _n_get_Resources(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Resources(pThis, __presult))
        }
    }
    public func get_Resources() throws -> Optional<Microsoft.UI.Xaml.IResourceDictionary> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>> = nil;
        try self._n_get_Resources(&__result);
        return Microsoft.UI.Xaml.IResourceDictionary(consuming: __result);
    }
    // [IsSpecialName] void put_Resources(Microsoft.UI.Xaml.ResourceDictionary)
    private func _n_put_Resources(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Resources(pThis, value))
        }
    }
    public func put_Resources(value : Optional<Microsoft.UI.Xaml.IResourceDictionary>) throws -> Void {
        try self._n_put_Resources(RawPointer(value));
    }
    // [IsSpecialName] System.Object get_Tag()
    private func _n_get_Tag(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tag(pThis, __presult))
        }
    }
    public func get_Tag() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_Tag(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_Tag(System.Object)
    private func _n_put_Tag(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tag(pThis, value))
        }
    }
    public func put_Tag(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_Tag(RawPointer(value));
    }
    // [IsSpecialName] System.String get_Language()
    private func _n_get_Language(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Language(pThis, __presult))
        }
    }
    public func get_Language() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Language(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Language(System.String)
    private func _n_put_Language(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Language(pThis, value))
        }
    }
    public func put_Language(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Language(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] System.Double get_ActualWidth()
    private func _n_get_ActualWidth(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualWidth(pThis, __presult))
        }
    }
    public func get_ActualWidth() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_ActualWidth(&__result);
        return __result;
    }
    // [IsSpecialName] System.Double get_ActualHeight()
    private func _n_get_ActualHeight(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualHeight(pThis, __presult))
        }
    }
    public func get_ActualHeight() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_ActualHeight(&__result);
        return __result;
    }
    // [IsSpecialName] System.Double get_Width()
    private func _n_get_Width(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, __presult))
        }
    }
    public func get_Width() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Width(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Width(System.Double)
    private func _n_put_Width(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Width(pThis, value))
        }
    }
    public func put_Width(value : Swift.Double) throws -> Void {
        try self._n_put_Width(value);
    }
    // [IsSpecialName] System.Double get_Height()
    private func _n_get_Height(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, __presult))
        }
    }
    public func get_Height() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Height(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Height(System.Double)
    private func _n_put_Height(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Height(pThis, value))
        }
    }
    public func put_Height(value : Swift.Double) throws -> Void {
        try self._n_put_Height(value);
    }
    // [IsSpecialName] System.Double get_MinWidth()
    private func _n_get_MinWidth(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinWidth(pThis, __presult))
        }
    }
    public func get_MinWidth() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_MinWidth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MinWidth(System.Double)
    private func _n_put_MinWidth(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinWidth(pThis, value))
        }
    }
    public func put_MinWidth(value : Swift.Double) throws -> Void {
        try self._n_put_MinWidth(value);
    }
    // [IsSpecialName] System.Double get_MaxWidth()
    private func _n_get_MaxWidth(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxWidth(pThis, __presult))
        }
    }
    public func get_MaxWidth() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_MaxWidth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxWidth(System.Double)
    private func _n_put_MaxWidth(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxWidth(pThis, value))
        }
    }
    public func put_MaxWidth(value : Swift.Double) throws -> Void {
        try self._n_put_MaxWidth(value);
    }
    // [IsSpecialName] System.Double get_MinHeight()
    private func _n_get_MinHeight(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinHeight(pThis, __presult))
        }
    }
    public func get_MinHeight() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_MinHeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MinHeight(System.Double)
    private func _n_put_MinHeight(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MinHeight(pThis, value))
        }
    }
    public func put_MinHeight(value : Swift.Double) throws -> Void {
        try self._n_put_MinHeight(value);
    }
    // [IsSpecialName] System.Double get_MaxHeight()
    private func _n_get_MaxHeight(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxHeight(pThis, __presult))
        }
    }
    public func get_MaxHeight() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_MaxHeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MaxHeight(System.Double)
    private func _n_put_MaxHeight(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxHeight(pThis, value))
        }
    }
    public func put_MaxHeight(value : Swift.Double) throws -> Void {
        try self._n_put_MaxHeight(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.HorizontalAlignment get_HorizontalAlignment()
    private func _n_get_HorizontalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CHorizontalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, __presult))
        }
    }
    public func get_HorizontalAlignment() throws -> Microsoft.UI.Xaml.HorizontalAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment = _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Left;
        try self._n_get_HorizontalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HorizontalAlignment(Microsoft.UI.Xaml.HorizontalAlignment)
    private func _n_put_HorizontalAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
        }
    }
    public func put_HorizontalAlignment(value : Microsoft.UI.Xaml.HorizontalAlignment) throws -> Void {
        try self._n_put_HorizontalAlignment(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.VerticalAlignment get_VerticalAlignment()
    private func _n_get_VerticalAlignment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CVerticalAlignment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, __presult))
        }
    }
    public func get_VerticalAlignment() throws -> Microsoft.UI.Xaml.VerticalAlignment {
        var __result : _q_CMicrosoft_CUI_CXaml_CVerticalAlignment = _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Top;
        try self._n_get_VerticalAlignment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_VerticalAlignment(Microsoft.UI.Xaml.VerticalAlignment)
    private func _n_put_VerticalAlignment(_ value : _q_CMicrosoft_CUI_CXaml_CVerticalAlignment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
        }
    }
    public func put_VerticalAlignment(value : Microsoft.UI.Xaml.VerticalAlignment) throws -> Void {
        try self._n_put_VerticalAlignment(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_Margin()
    private func _n_get_Margin(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Margin(pThis, __presult))
        }
    }
    public func get_Margin() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_Margin(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Margin(Microsoft.UI.Xaml.Thickness)
    private func _n_put_Margin(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Margin(pThis, value))
        }
    }
    public func put_Margin(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_Margin(value);
    }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Name(System.String)
    private func _n_put_Name(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Name(pThis, value))
        }
    }
    public func put_Name(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Name(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Windows.Foundation.Uri get_BaseUri()
    private func _n_get_BaseUri(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseUri(pThis, __presult))
        }
    }
    public func get_BaseUri() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_BaseUri(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] System.Object get_DataContext()
    private func _n_get_DataContext(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataContext(pThis, __presult))
        }
    }
    public func get_DataContext() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_DataContext(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // [IsSpecialName] void put_DataContext(System.Object)
    private func _n_put_DataContext(_ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DataContext(pThis, value))
        }
    }
    public func put_DataContext(value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_put_DataContext(RawPointer(value));
    }
    // [IsSpecialName] bool get_AllowFocusOnInteraction()
    private func _n_get_AllowFocusOnInteraction(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusOnInteraction(pThis, __presult))
        }
    }
    public func get_AllowFocusOnInteraction() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AllowFocusOnInteraction(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AllowFocusOnInteraction(bool)
    private func _n_put_AllowFocusOnInteraction(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowFocusOnInteraction(pThis, value))
        }
    }
    public func put_AllowFocusOnInteraction(value : boolean) throws -> Void {
        try self._n_put_AllowFocusOnInteraction(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_FocusVisualMargin()
    private func _n_get_FocusVisualMargin(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualMargin(pThis, __presult))
        }
    }
    public func get_FocusVisualMargin() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_FocusVisualMargin(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FocusVisualMargin(Microsoft.UI.Xaml.Thickness)
    private func _n_put_FocusVisualMargin(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualMargin(pThis, value))
        }
    }
    public func put_FocusVisualMargin(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_FocusVisualMargin(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_FocusVisualSecondaryThickness()
    private func _n_get_FocusVisualSecondaryThickness(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualSecondaryThickness(pThis, __presult))
        }
    }
    public func get_FocusVisualSecondaryThickness() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_FocusVisualSecondaryThickness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FocusVisualSecondaryThickness(Microsoft.UI.Xaml.Thickness)
    private func _n_put_FocusVisualSecondaryThickness(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualSecondaryThickness(pThis, value))
        }
    }
    public func put_FocusVisualSecondaryThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_FocusVisualSecondaryThickness(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Thickness get_FocusVisualPrimaryThickness()
    private func _n_get_FocusVisualPrimaryThickness(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CThickness>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualPrimaryThickness(pThis, __presult))
        }
    }
    public func get_FocusVisualPrimaryThickness() throws -> Microsoft.UI.Xaml.Thickness {
        var __result : _q_CMicrosoft_CUI_CXaml_CThickness = _q_CMicrosoft_CUI_CXaml_CThickness(Left: 0, Top: 0, Right: 0, Bottom: 0);
        try self._n_get_FocusVisualPrimaryThickness(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FocusVisualPrimaryThickness(Microsoft.UI.Xaml.Thickness)
    private func _n_put_FocusVisualPrimaryThickness(_ value : _q_CMicrosoft_CUI_CXaml_CThickness) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualPrimaryThickness(pThis, value))
        }
    }
    public func put_FocusVisualPrimaryThickness(value : Microsoft.UI.Xaml.Thickness) throws -> Void {
        try self._n_put_FocusVisualPrimaryThickness(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_FocusVisualSecondaryBrush()
    private func _n_get_FocusVisualSecondaryBrush(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualSecondaryBrush(pThis, __presult))
        }
    }
    public func get_FocusVisualSecondaryBrush() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_FocusVisualSecondaryBrush(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_FocusVisualSecondaryBrush(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_FocusVisualSecondaryBrush(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualSecondaryBrush(pThis, value))
        }
    }
    public func put_FocusVisualSecondaryBrush(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_FocusVisualSecondaryBrush(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Brush get_FocusVisualPrimaryBrush()
    private func _n_get_FocusVisualPrimaryBrush(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualPrimaryBrush(pThis, __presult))
        }
    }
    public func get_FocusVisualPrimaryBrush() throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
        try self._n_get_FocusVisualPrimaryBrush(&__result);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
    // [IsSpecialName] void put_FocusVisualPrimaryBrush(Microsoft.UI.Xaml.Media.Brush)
    private func _n_put_FocusVisualPrimaryBrush(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualPrimaryBrush(pThis, value))
        }
    }
    public func put_FocusVisualPrimaryBrush(value : Optional<Microsoft.UI.Xaml.Media.IBrush>) throws -> Void {
        try self._n_put_FocusVisualPrimaryBrush(RawPointer(value));
    }
    // [IsSpecialName] bool get_AllowFocusWhenDisabled()
    private func _n_get_AllowFocusWhenDisabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusWhenDisabled(pThis, __presult))
        }
    }
    public func get_AllowFocusWhenDisabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AllowFocusWhenDisabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AllowFocusWhenDisabled(bool)
    private func _n_put_AllowFocusWhenDisabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowFocusWhenDisabled(pThis, value))
        }
    }
    public func put_AllowFocusWhenDisabled(value : boolean) throws -> Void {
        try self._n_put_AllowFocusWhenDisabled(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Style get_Style()
    private func _n_get_Style(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIStyle>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Style(pThis, __presult))
        }
    }
    public func get_Style() throws -> Optional<Microsoft.UI.Xaml.IStyle> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIStyle>> = nil;
        try self._n_get_Style(&__result);
        return Microsoft.UI.Xaml.IStyle(consuming: __result);
    }
    // [IsSpecialName] void put_Style(Microsoft.UI.Xaml.Style)
    private func _n_put_Style(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIStyle>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Style(pThis, value))
        }
    }
    public func put_Style(value : Optional<Microsoft.UI.Xaml.IStyle>) throws -> Void {
        try self._n_put_Style(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_Parent()
    private func _n_get_Parent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Parent(pThis, __presult))
        }
    }
    public func get_Parent() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_Parent(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.FlowDirection get_FlowDirection()
    private func _n_get_FlowDirection(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CFlowDirection>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlowDirection(pThis, __presult))
        }
    }
    public func get_FlowDirection() throws -> Microsoft.UI.Xaml.FlowDirection {
        var __result : _q_CMicrosoft_CUI_CXaml_CFlowDirection = _q_CMicrosoft_CUI_CXaml_CFlowDirection_LeftToRight;
        try self._n_get_FlowDirection(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FlowDirection(Microsoft.UI.Xaml.FlowDirection)
    private func _n_put_FlowDirection(_ value : _q_CMicrosoft_CUI_CXaml_CFlowDirection) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FlowDirection(pThis, value))
        }
    }
    public func put_FlowDirection(value : Microsoft.UI.Xaml.FlowDirection) throws -> Void {
        try self._n_put_FlowDirection(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ElementTheme get_RequestedTheme()
    private func _n_get_RequestedTheme(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CElementTheme>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedTheme(pThis, __presult))
        }
    }
    public func get_RequestedTheme() throws -> Microsoft.UI.Xaml.ElementTheme {
        var __result : _q_CMicrosoft_CUI_CXaml_CElementTheme = _q_CMicrosoft_CUI_CXaml_CElementTheme_Default;
        try self._n_get_RequestedTheme(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequestedTheme(Microsoft.UI.Xaml.ElementTheme)
    private func _n_put_RequestedTheme(_ value : _q_CMicrosoft_CUI_CXaml_CElementTheme) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedTheme(pThis, value))
        }
    }
    public func put_RequestedTheme(value : Microsoft.UI.Xaml.ElementTheme) throws -> Void {
        try self._n_put_RequestedTheme(value);
    }
    // [IsSpecialName] bool get_IsLoaded()
    private func _n_get_IsLoaded(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsLoaded(pThis, __presult))
        }
    }
    public func get_IsLoaded() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsLoaded(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ElementTheme get_ActualTheme()
    private func _n_get_ActualTheme(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CElementTheme>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualTheme(pThis, __presult))
        }
    }
    public func get_ActualTheme() throws -> Microsoft.UI.Xaml.ElementTheme {
        var __result : _q_CMicrosoft_CUI_CXaml_CElementTheme = _q_CMicrosoft_CUI_CXaml_CElementTheme_Default;
        try self._n_get_ActualTheme(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Loaded(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_Loaded(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Loaded(pThis, handler, __presult))
        }
    }
    public func add_Loaded(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Loaded(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Loaded(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Loaded(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Loaded(pThis, token))
        }
    }
    public func remove_Loaded(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Loaded(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Unloaded(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_Unloaded(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Unloaded(pThis, handler, __presult))
        }
    }
    public func add_Unloaded(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Unloaded(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Unloaded(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Unloaded(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Unloaded(pThis, token))
        }
    }
    public func remove_Unloaded(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Unloaded(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DataContextChanged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.DataContextChangedEventArgs>)
    private func _n_add_DataContextChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DataContextChanged(pThis, handler, __presult))
        }
    }
    public func add_DataContextChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CDataContextChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DataContextChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DataContextChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DataContextChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DataContextChanged(pThis, token))
        }
    }
    public func remove_DataContextChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DataContextChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SizeChanged(Microsoft.UI.Xaml.SizeChangedEventHandler)
    private func _n_add_SizeChanged(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SizeChanged(pThis, handler, __presult))
        }
    }
    public func add_SizeChanged(handler : Optional<Microsoft.UI.Xaml.ISizeChangedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SizeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SizeChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_SizeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SizeChanged(pThis, token))
        }
    }
    public func remove_SizeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SizeChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_LayoutUpdated(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_LayoutUpdated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_LayoutUpdated(pThis, handler, __presult))
        }
    }
    public func add_LayoutUpdated(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_LayoutUpdated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_LayoutUpdated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_LayoutUpdated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LayoutUpdated(pThis, token))
        }
    }
    public func remove_LayoutUpdated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_LayoutUpdated(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Loading(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,System.Object>)
    private func _n_add_Loading(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Loading(pThis, handler, __presult))
        }
    }
    public func add_Loading(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Loading(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Loading(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Loading(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Loading(pThis, token))
        }
    }
    public func remove_Loading(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Loading(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ActualThemeChanged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,System.Object>)
    private func _n_add_ActualThemeChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ActualThemeChanged(pThis, handler, __presult))
        }
    }
    public func add_ActualThemeChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ActualThemeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ActualThemeChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ActualThemeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ActualThemeChanged(pThis, token))
        }
    }
    public func remove_ActualThemeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ActualThemeChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EffectiveViewportChanged(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement,Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs>)
    private func _n_add_EffectiveViewportChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EffectiveViewportChanged(pThis, handler, __presult))
        }
    }
    public func add_EffectiveViewportChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CFrameworkElement__q_CMicrosoft_CUI_CXaml_CEffectiveViewportChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EffectiveViewportChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EffectiveViewportChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_EffectiveViewportChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EffectiveViewportChanged(pThis, token))
        }
    }
    public func remove_EffectiveViewportChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EffectiveViewportChanged(token);
    }
    // System.Object FindName(System.String)
    private func _n_FindName(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FindName(pThis, name, __presult))
        }
    }
    public func FindName(name : Swift.String) throws -> Optional<WinRT.IInspectable> {
        let __hstr_name = try HString(name);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_FindName(__hstr_name.Raw(), &__result);
        return WinRT.IInspectable(consuming: __result);
        }
    }
    // void SetBinding(Microsoft.UI.Xaml.DependencyProperty, Microsoft.UI.Xaml.Data.BindingBase)
    private func _n_SetBinding(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ binding : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CData_CIBindingBase>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetBinding(pThis, dp, binding))
        }
    }
    public func SetBinding(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>, binding : Optional<Microsoft.UI.Xaml.Data.IBindingBase>) throws -> Void {
        try self._n_SetBinding(RawPointer(dp), RawPointer(binding));
    }
    // Microsoft.UI.Xaml.Data.BindingExpression GetBindingExpression(Microsoft.UI.Xaml.DependencyProperty)
    private func _n_GetBindingExpression(_ dp : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetBindingExpression(pThis, dp, __presult))
        }
    }
    public func GetBindingExpression(dp : Optional<Microsoft.UI.Xaml.IDependencyProperty>) throws -> Optional<Microsoft.UI.Xaml.Data.IBindingExpression> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CData_CIBindingExpression>> = nil;
        try self._n_GetBindingExpression(RawPointer(dp), &__result);
        return Microsoft.UI.Xaml.Data.IBindingExpression(consuming: __result);
    }
    public var ActualHeight : Swift.Double {
        get throws {
            return try get_ActualHeight();
        }
    }
    public var ActualTheme : Microsoft.UI.Xaml.ElementTheme {
        get throws {
            return try get_ActualTheme();
        }
    }
    public var ActualWidth : Swift.Double {
        get throws {
            return try get_ActualWidth();
        }
    }
    public var AllowFocusOnInteraction : boolean {
        get throws {
            return try get_AllowFocusOnInteraction();
        }
    }
    public var AllowFocusWhenDisabled : boolean {
        get throws {
            return try get_AllowFocusWhenDisabled();
        }
    }
    public var BaseUri : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_BaseUri();
        }
    }
    public var DataContext : Optional<WinRT.IInspectable> {
        get throws {
            return try get_DataContext();
        }
    }
    public var FlowDirection : Microsoft.UI.Xaml.FlowDirection {
        get throws {
            return try get_FlowDirection();
        }
    }
    public var FocusVisualMargin : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_FocusVisualMargin();
        }
    }
    public var FocusVisualPrimaryBrush : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_FocusVisualPrimaryBrush();
        }
    }
    public var FocusVisualPrimaryThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_FocusVisualPrimaryThickness();
        }
    }
    public var FocusVisualSecondaryBrush : Optional<Microsoft.UI.Xaml.Media.IBrush> {
        get throws {
            return try get_FocusVisualSecondaryBrush();
        }
    }
    public var FocusVisualSecondaryThickness : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_FocusVisualSecondaryThickness();
        }
    }
    public var Height : Swift.Double {
        get throws {
            return try get_Height();
        }
    }
    public var HorizontalAlignment : Microsoft.UI.Xaml.HorizontalAlignment {
        get throws {
            return try get_HorizontalAlignment();
        }
    }
    public var IsLoaded : boolean {
        get throws {
            return try get_IsLoaded();
        }
    }
    public var Language : Swift.String {
        get throws {
            return try get_Language();
        }
    }
    public var Margin : Microsoft.UI.Xaml.Thickness {
        get throws {
            return try get_Margin();
        }
    }
    public var MaxHeight : Swift.Double {
        get throws {
            return try get_MaxHeight();
        }
    }
    public var MaxWidth : Swift.Double {
        get throws {
            return try get_MaxWidth();
        }
    }
    public var MinHeight : Swift.Double {
        get throws {
            return try get_MinHeight();
        }
    }
    public var MinWidth : Swift.Double {
        get throws {
            return try get_MinWidth();
        }
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var Parent : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_Parent();
        }
    }
    public var RequestedTheme : Microsoft.UI.Xaml.ElementTheme {
        get throws {
            return try get_RequestedTheme();
        }
    }
    public var Resources : Optional<Microsoft.UI.Xaml.IResourceDictionary> {
        get throws {
            return try get_Resources();
        }
    }
    public var Style : Optional<Microsoft.UI.Xaml.IStyle> {
        get throws {
            return try get_Style();
        }
    }
    public var Tag : Optional<WinRT.IInspectable> {
        get throws {
            return try get_Tag();
        }
    }
    public var Triggers : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase> {
        get throws {
            return try get_Triggers();
        }
    }
    public var VerticalAlignment : Microsoft.UI.Xaml.VerticalAlignment {
        get throws {
            return try get_VerticalAlignment();
        }
    }
    public var Width : Swift.Double {
        get throws {
            return try get_Width();
        }
    }
} // IFrameworkElement


// type: Microsoft.UI.Xaml.IFrameworkElementFactory
// interface type
// COMPOSITION INTERFACE
open class IFrameworkElementFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbd3f2272, Data2: 0x3efa, Data3 : 0x5f92, Data4 : (0xb7, 0x59, 0x90, 0xb1, 0xcc, 0x3e, 0x78, 0x4c)) }
    // Microsoft.UI.Xaml.FrameworkElement CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IFrameworkElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkElement>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IFrameworkElement(consuming: __result);
    }
} // IFrameworkElementFactory


// type: Microsoft.UI.Xaml.IFrameworkElementOverrides
// interface type
open class IFrameworkElementOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xffc6fd98, Data2: 0xf38c, Data3 : 0x5904, Data4 : (0x9c, 0xe4, 0x97, 0xa3, 0x42, 0x7c, 0xf4, 0xba)) }
    // Windows.Foundation.Size MeasureOverride(Windows.Foundation.Size)
    private func _n_MeasureOverride(_ availableSize : _q_CWindows_CFoundation_CSize, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MeasureOverride(pThis, availableSize, __presult))
        }
    }
    public func MeasureOverride(availableSize : Windows.Foundation.Size) throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_MeasureOverride(availableSize, &__result);
        return __result;
    }
    // Windows.Foundation.Size ArrangeOverride(Windows.Foundation.Size)
    private func _n_ArrangeOverride(_ finalSize : _q_CWindows_CFoundation_CSize, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ArrangeOverride(pThis, finalSize, __presult))
        }
    }
    public func ArrangeOverride(finalSize : Windows.Foundation.Size) throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_ArrangeOverride(finalSize, &__result);
        return __result;
    }
    // void OnApplyTemplate()
    private func _n_OnApplyTemplate() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnApplyTemplate(pThis))
        }
    }
    public func OnApplyTemplate() throws -> Void {
        try self._n_OnApplyTemplate();
    }
    // bool GoToElementStateCore(System.String, bool)
    private func _n_GoToElementStateCore(_ stateName : Optional<HSTRING>, _ useTransitions : boolean, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GoToElementStateCore(pThis, stateName, useTransitions, __presult))
        }
    }
    public func GoToElementStateCore(stateName : Swift.String, useTransitions : boolean) throws -> boolean {
        let __hstr_stateName = try HString(stateName);
        return try withExtendedLifetime(__hstr_stateName) {
        var __result : boolean = 0;
        try self._n_GoToElementStateCore(__hstr_stateName.Raw(), useTransitions, &__result);
        return __result;
        }
    }
} // IFrameworkElementOverrides


// type: Microsoft.UI.Xaml.IFrameworkElementProtected
// interface type
open class IFrameworkElementProtected
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe59a3db0, Data2: 0x91e5, Data3 : 0x5903, Data4 : (0x9c, 0xaf, 0xd1, 0xbb, 0x9f, 0x45, 0x8b, 0xf2)) }
    // void InvalidateViewport()
    private func _n_InvalidateViewport() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateViewport(pThis))
        }
    }
    public func InvalidateViewport() throws -> Void {
        try self._n_InvalidateViewport();
    }
} // IFrameworkElementProtected


// type: Microsoft.UI.Xaml.IFrameworkElementStatics
// interface type
open class IFrameworkElementStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x894e2704, Data2: 0x14e7, Data3 : 0x569a, Data4 : (0xb2, 0x1e, 0xaf, 0xc7, 0xdf, 0x71, 0x45, 0xa1)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TagProperty()
    private func _n_get_TagProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TagProperty(pThis, __presult))
        }
    }
    public func get_TagProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TagProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_LanguageProperty()
    private func _n_get_LanguageProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LanguageProperty(pThis, __presult))
        }
    }
    public func get_LanguageProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_LanguageProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ActualWidthProperty()
    private func _n_get_ActualWidthProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualWidthProperty(pThis, __presult))
        }
    }
    public func get_ActualWidthProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ActualWidthProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ActualHeightProperty()
    private func _n_get_ActualHeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualHeightProperty(pThis, __presult))
        }
    }
    public func get_ActualHeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ActualHeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_WidthProperty()
    private func _n_get_WidthProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_WidthProperty(pThis, __presult))
        }
    }
    public func get_WidthProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_WidthProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HeightProperty()
    private func _n_get_HeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightProperty(pThis, __presult))
        }
    }
    public func get_HeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MinWidthProperty()
    private func _n_get_MinWidthProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinWidthProperty(pThis, __presult))
        }
    }
    public func get_MinWidthProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MinWidthProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MaxWidthProperty()
    private func _n_get_MaxWidthProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxWidthProperty(pThis, __presult))
        }
    }
    public func get_MaxWidthProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MaxWidthProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MinHeightProperty()
    private func _n_get_MinHeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MinHeightProperty(pThis, __presult))
        }
    }
    public func get_MinHeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MinHeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MaxHeightProperty()
    private func _n_get_MaxHeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxHeightProperty(pThis, __presult))
        }
    }
    public func get_MaxHeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MaxHeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HorizontalAlignmentProperty()
    private func _n_get_HorizontalAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignmentProperty(pThis, __presult))
        }
    }
    public func get_HorizontalAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HorizontalAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_VerticalAlignmentProperty()
    private func _n_get_VerticalAlignmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignmentProperty(pThis, __presult))
        }
    }
    public func get_VerticalAlignmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_VerticalAlignmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MarginProperty()
    private func _n_get_MarginProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MarginProperty(pThis, __presult))
        }
    }
    public func get_MarginProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MarginProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_NameProperty()
    private func _n_get_NameProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NameProperty(pThis, __presult))
        }
    }
    public func get_NameProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_NameProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DataContextProperty()
    private func _n_get_DataContextProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DataContextProperty(pThis, __presult))
        }
    }
    public func get_DataContextProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DataContextProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AllowFocusOnInteractionProperty()
    private func _n_get_AllowFocusOnInteractionProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusOnInteractionProperty(pThis, __presult))
        }
    }
    public func get_AllowFocusOnInteractionProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AllowFocusOnInteractionProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FocusVisualMarginProperty()
    private func _n_get_FocusVisualMarginProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualMarginProperty(pThis, __presult))
        }
    }
    public func get_FocusVisualMarginProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FocusVisualMarginProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FocusVisualSecondaryThicknessProperty()
    private func _n_get_FocusVisualSecondaryThicknessProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualSecondaryThicknessProperty(pThis, __presult))
        }
    }
    public func get_FocusVisualSecondaryThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FocusVisualSecondaryThicknessProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FocusVisualPrimaryThicknessProperty()
    private func _n_get_FocusVisualPrimaryThicknessProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualPrimaryThicknessProperty(pThis, __presult))
        }
    }
    public func get_FocusVisualPrimaryThicknessProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FocusVisualPrimaryThicknessProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FocusVisualSecondaryBrushProperty()
    private func _n_get_FocusVisualSecondaryBrushProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualSecondaryBrushProperty(pThis, __presult))
        }
    }
    public func get_FocusVisualSecondaryBrushProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FocusVisualSecondaryBrushProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FocusVisualPrimaryBrushProperty()
    private func _n_get_FocusVisualPrimaryBrushProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualPrimaryBrushProperty(pThis, __presult))
        }
    }
    public func get_FocusVisualPrimaryBrushProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FocusVisualPrimaryBrushProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AllowFocusWhenDisabledProperty()
    private func _n_get_AllowFocusWhenDisabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowFocusWhenDisabledProperty(pThis, __presult))
        }
    }
    public func get_AllowFocusWhenDisabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AllowFocusWhenDisabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_StyleProperty()
    private func _n_get_StyleProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StyleProperty(pThis, __presult))
        }
    }
    public func get_StyleProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_StyleProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FlowDirectionProperty()
    private func _n_get_FlowDirectionProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FlowDirectionProperty(pThis, __presult))
        }
    }
    public func get_FlowDirectionProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FlowDirectionProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RequestedThemeProperty()
    private func _n_get_RequestedThemeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedThemeProperty(pThis, __presult))
        }
    }
    public func get_RequestedThemeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RequestedThemeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ActualThemeProperty()
    private func _n_get_ActualThemeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualThemeProperty(pThis, __presult))
        }
    }
    public func get_ActualThemeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ActualThemeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // void DeferTree(Microsoft.UI.Xaml.DependencyObject)
    private func _n_DeferTree(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.DeferTree(pThis, element))
        }
    }
    public func DeferTree(element : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_DeferTree(RawPointer(element));
    }
    public var ActualHeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ActualHeightProperty();
        }
    }
    public var ActualThemeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ActualThemeProperty();
        }
    }
    public var ActualWidthProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ActualWidthProperty();
        }
    }
    public var AllowFocusOnInteractionProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AllowFocusOnInteractionProperty();
        }
    }
    public var AllowFocusWhenDisabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AllowFocusWhenDisabledProperty();
        }
    }
    public var DataContextProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DataContextProperty();
        }
    }
    public var FlowDirectionProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FlowDirectionProperty();
        }
    }
    public var FocusVisualMarginProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FocusVisualMarginProperty();
        }
    }
    public var FocusVisualPrimaryBrushProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FocusVisualPrimaryBrushProperty();
        }
    }
    public var FocusVisualPrimaryThicknessProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FocusVisualPrimaryThicknessProperty();
        }
    }
    public var FocusVisualSecondaryBrushProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FocusVisualSecondaryBrushProperty();
        }
    }
    public var FocusVisualSecondaryThicknessProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FocusVisualSecondaryThicknessProperty();
        }
    }
    public var HeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HeightProperty();
        }
    }
    public var HorizontalAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HorizontalAlignmentProperty();
        }
    }
    public var LanguageProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_LanguageProperty();
        }
    }
    public var MarginProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MarginProperty();
        }
    }
    public var MaxHeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MaxHeightProperty();
        }
    }
    public var MaxWidthProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MaxWidthProperty();
        }
    }
    public var MinHeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MinHeightProperty();
        }
    }
    public var MinWidthProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MinWidthProperty();
        }
    }
    public var NameProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_NameProperty();
        }
    }
    public var RequestedThemeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RequestedThemeProperty();
        }
    }
    public var StyleProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_StyleProperty();
        }
    }
    public var TagProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TagProperty();
        }
    }
    public var VerticalAlignmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_VerticalAlignmentProperty();
        }
    }
    public var WidthProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_WidthProperty();
        }
    }
} // IFrameworkElementStatics


// type: Microsoft.UI.Xaml.IFrameworkTemplate
// interface type
open class IFrameworkTemplate
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0084c7c2, Data2: 0xde48, Data3 : 0x5b0b, Data4 : (0x8a, 0x5a, 0xe4, 0xfb, 0x76, 0xb7, 0xf7, 0xd1)) }
} // IFrameworkTemplate


// type: Microsoft.UI.Xaml.IFrameworkTemplateFactory
// interface type
// COMPOSITION INTERFACE
open class IFrameworkTemplateFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x616dd6db, Data2: 0xb064, Data3 : 0x561d, Data4 : (0xb1, 0x62, 0x46, 0xce, 0xb4, 0x5d, 0xc5, 0x62)) }
    // Microsoft.UI.Xaml.FrameworkTemplate CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIFrameworkTemplateFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IFrameworkTemplate> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIFrameworkTemplate>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IFrameworkTemplate(consuming: __result);
    }
} // IFrameworkTemplateFactory


// type: Microsoft.UI.Xaml.ILaunchActivatedEventArgs
// interface type
open class ILaunchActivatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd505cea9, Data2: 0x1bcb, Data3 : 0x5b29, Data4 : (0xa8, 0xbe, 0x94, 0x4e, 0x00, 0xf0, 0x6f, 0x78)) }
// method not needed: get_Arguments
// method not needed: get_UWPLaunchActivatedEventArgs
} // ILaunchActivatedEventArgs


// type: Microsoft.UI.Xaml.IResourceDictionary
// interface type
open class IResourceDictionary
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1b690975, Data2: 0xa710, Data3 : 0x5783, Data4 : (0xa6, 0xe1, 0x15, 0x83, 0x6f, 0x61, 0x86, 0xc2)) }
// method not needed: get_Source
// method not needed: put_Source
// method not needed: get_MergedDictionaries
// method not needed: get_ThemeDictionaries
} // IResourceDictionary


// type: Microsoft.UI.Xaml.IResourceDictionaryFactory
// interface type
// COMPOSITION INTERFACE
open class IResourceDictionaryFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xea22a48f, Data2: 0xab71, Data3 : 0x56f6, Data4 : (0xa3, 0x92, 0xd8, 0x23, 0x10, 0xc8, 0xaa, 0x7b)) }
    // Microsoft.UI.Xaml.ResourceDictionary CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIResourceDictionaryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IResourceDictionary> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIResourceDictionary>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IResourceDictionary(consuming: __result);
    }
} // IResourceDictionaryFactory


// type: Microsoft.UI.Xaml.IRoutedEvent
// interface type
open class IRoutedEvent
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb2b432bc, Data2: 0xefca, Data3 : 0x575e, Data4 : (0x9d, 0x2a, 0x70, 0x3f, 0x8b, 0x9c, 0x38, 0x0f)) }
} // IRoutedEvent


// type: Microsoft.UI.Xaml.IRoutedEventArgs
// interface type
open class IRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0908c407, Data2: 0x1c7d, Data3 : 0x5de3, Data4 : (0x9c, 0x50, 0xd9, 0x71, 0xc6, 0x2e, 0xc8, 0xec)) }
    // [IsSpecialName] System.Object get_OriginalSource()
    private func _n_get_OriginalSource(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OriginalSource(pThis, __presult))
        }
    }
    public func get_OriginalSource() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_get_OriginalSource(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    public var OriginalSource : Optional<WinRT.IInspectable> {
        get throws {
            return try get_OriginalSource();
        }
    }
} // IRoutedEventArgs


// type: Microsoft.UI.Xaml.IRoutedEventArgsFactory
// interface type
// COMPOSITION INTERFACE
open class IRoutedEventArgsFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x914b02c7, Data2: 0x076b, Data3 : 0x5b89, Data4 : (0x98, 0xe7, 0x6c, 0x37, 0x33, 0x79, 0xe9, 0xaf)) }
    // Microsoft.UI.Xaml.RoutedEventArgs CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIRoutedEventArgsFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IRoutedEventArgs> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IRoutedEventArgs(consuming: __result);
    }
} // IRoutedEventArgsFactory


// type: Microsoft.UI.Xaml.IScalarTransition
// interface type
open class IScalarTransition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc2da2ac8, Data2: 0x814c, Data3 : 0x5889, Data4 : (0xb2, 0xf4, 0x4e, 0xbe, 0x4b, 0x00, 0x1e, 0xe3)) }
// method not needed: get_Duration
// method not needed: put_Duration
} // IScalarTransition


// type: Microsoft.UI.Xaml.IScalarTransitionFactory
// interface type
// COMPOSITION INTERFACE
open class IScalarTransitionFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa1650cf8, Data2: 0xa15b, Data3 : 0x54fc, Data4 : (0xb5, 0x95, 0xc5, 0x24, 0x91, 0x31, 0x8f, 0x58)) }
    // Microsoft.UI.Xaml.ScalarTransition CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIScalarTransitionFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IScalarTransition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IScalarTransition(consuming: __result);
    }
} // IScalarTransitionFactory


// type: Microsoft.UI.Xaml.ISizeChangedEventArgs
// interface type
open class ISizeChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe76324e, Data2: 0x6dfb, Data3 : 0x58b1, Data4 : (0x9d, 0xcd, 0x88, 0x6c, 0xa8, 0xf9, 0xa2, 0xea)) }
// method not needed: get_PreviousSize
// method not needed: get_NewSize
} // ISizeChangedEventArgs


// type: Microsoft.UI.Xaml.IStyle
// interface type
open class IStyle
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x65e1d164, Data2: 0x572f, Data3 : 0x5b0e, Data4 : (0xa8, 0x0f, 0x9c, 0x02, 0x44, 0x1f, 0xac, 0x49)) }
// method not needed: get_IsSealed
// method not needed: get_Setters
// method not needed: get_TargetType
// method not needed: put_TargetType
// method not needed: get_BasedOn
// method not needed: put_BasedOn
// method not needed: Seal
} // IStyle


// type: Microsoft.UI.Xaml.IStyleFactory
// interface type
// ACTIVATION INTERFACE
open class IStyleFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc2d924a2, Data2: 0x3862, Data3 : 0x517c, Data4 : (0xb0, 0x83, 0x9a, 0x91, 0x20, 0xd7, 0x30, 0x2d)) }
    // Microsoft.UI.Xaml.Style CreateInstance(Windows.UI.Xaml.Interop.TypeName)
    private func _n_CreateInstance(_ targetType : _q_CWindows_CUI_CXaml_CInterop_CTypeName, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIStyle>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIStyleFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, targetType, __presult))
        }
    }
    public func CreateInstance(targetType : Windows.UI.Xaml.Interop.TypeName) throws -> Optional<Microsoft.UI.Xaml.IStyle> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIStyle>> = nil;
        try self._n_CreateInstance(targetType, &__result);
        return Microsoft.UI.Xaml.IStyle(consuming: __result);
    }
} // IStyleFactory


// type: Microsoft.UI.Xaml.ITriggerBase
// interface type
open class ITriggerBase
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd37da89d, Data2: 0x0d71, Data3 : 0x58cf, Data4 : (0xa9, 0x01, 0x99, 0xa7, 0xd3, 0xe5, 0xe4, 0x34)) }
} // ITriggerBase


// type: Microsoft.UI.Xaml.IUIElement
// interface type
open class IUIElement
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc3c01020, Data2: 0x320c, Data3 : 0x5cf6, Data4 : (0x9d, 0x24, 0xd3, 0x96, 0xbb, 0xfa, 0x4d, 0x8b)) }
    // [IsSpecialName] Windows.Foundation.Size get_DesiredSize()
    private func _n_get_DesiredSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DesiredSize(pThis, __presult))
        }
    }
    public func get_DesiredSize() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_DesiredSize(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_AllowDrop()
    private func _n_get_AllowDrop(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowDrop(pThis, __presult))
        }
    }
    public func get_AllowDrop() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AllowDrop(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AllowDrop(bool)
    private func _n_put_AllowDrop(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AllowDrop(pThis, value))
        }
    }
    public func put_AllowDrop(value : boolean) throws -> Void {
        try self._n_put_AllowDrop(value);
    }
    // [IsSpecialName] System.Double get_Opacity()
    private func _n_get_Opacity(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, __presult))
        }
    }
    public func get_Opacity() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Opacity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Opacity(System.Double)
    private func _n_put_Opacity(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
        }
    }
    public func put_Opacity(value : Swift.Double) throws -> Void {
        try self._n_put_Opacity(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.RectangleGeometry get_Clip()
    private func _n_get_Clip(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Clip(pThis, __presult))
        }
    }
    public func get_Clip() throws -> Optional<Microsoft.UI.Xaml.Media.IRectangleGeometry> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry>> = nil;
        try self._n_get_Clip(&__result);
        return Microsoft.UI.Xaml.Media.IRectangleGeometry(consuming: __result);
    }
    // [IsSpecialName] void put_Clip(Microsoft.UI.Xaml.Media.RectangleGeometry)
    private func _n_put_Clip(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIRectangleGeometry>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Clip(pThis, value))
        }
    }
    public func put_Clip(value : Optional<Microsoft.UI.Xaml.Media.IRectangleGeometry>) throws -> Void {
        try self._n_put_Clip(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Transform get_RenderTransform()
    private func _n_get_RenderTransform(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderTransform(pThis, __presult))
        }
    }
    public func get_RenderTransform() throws -> Optional<Microsoft.UI.Xaml.Media.ITransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>> = nil;
        try self._n_get_RenderTransform(&__result);
        return Microsoft.UI.Xaml.Media.ITransform(consuming: __result);
    }
    // [IsSpecialName] void put_RenderTransform(Microsoft.UI.Xaml.Media.Transform)
    private func _n_put_RenderTransform(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RenderTransform(pThis, value))
        }
    }
    public func put_RenderTransform(value : Optional<Microsoft.UI.Xaml.Media.ITransform>) throws -> Void {
        try self._n_put_RenderTransform(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Projection get_Projection()
    private func _n_get_Projection(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Projection(pThis, __presult))
        }
    }
    public func get_Projection() throws -> Optional<Microsoft.UI.Xaml.Media.IProjection> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection>> = nil;
        try self._n_get_Projection(&__result);
        return Microsoft.UI.Xaml.Media.IProjection(consuming: __result);
    }
    // [IsSpecialName] void put_Projection(Microsoft.UI.Xaml.Media.Projection)
    private func _n_put_Projection(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Projection(pThis, value))
        }
    }
    public func put_Projection(value : Optional<Microsoft.UI.Xaml.Media.IProjection>) throws -> Void {
        try self._n_put_Projection(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Media3D.Transform3D get_Transform3D()
    private func _n_get_Transform3D(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform3D(pThis, __presult))
        }
    }
    public func get_Transform3D() throws -> Optional<Microsoft.UI.Xaml.Media.Media3D.ITransform3D> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D>> = nil;
        try self._n_get_Transform3D(&__result);
        return Microsoft.UI.Xaml.Media.Media3D.ITransform3D(consuming: __result);
    }
    // [IsSpecialName] void put_Transform3D(Microsoft.UI.Xaml.Media.Media3D.Transform3D)
    private func _n_put_Transform3D(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CMedia3D_CITransform3D>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform3D(pThis, value))
        }
    }
    public func put_Transform3D(value : Optional<Microsoft.UI.Xaml.Media.Media3D.ITransform3D>) throws -> Void {
        try self._n_put_Transform3D(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Point get_RenderTransformOrigin()
    private func _n_get_RenderTransformOrigin(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CPoint>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderTransformOrigin(pThis, __presult))
        }
    }
    public func get_RenderTransformOrigin() throws -> Windows.Foundation.Point {
        var __result : _q_CWindows_CFoundation_CPoint = _q_CWindows_CFoundation_CPoint(X: 0, Y: 0);
        try self._n_get_RenderTransformOrigin(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RenderTransformOrigin(Windows.Foundation.Point)
    private func _n_put_RenderTransformOrigin(_ value : _q_CWindows_CFoundation_CPoint) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RenderTransformOrigin(pThis, value))
        }
    }
    public func put_RenderTransformOrigin(value : Windows.Foundation.Point) throws -> Void {
        try self._n_put_RenderTransformOrigin(value);
    }
    // [IsSpecialName] bool get_IsHitTestVisible()
    private func _n_get_IsHitTestVisible(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHitTestVisible(pThis, __presult))
        }
    }
    public func get_IsHitTestVisible() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsHitTestVisible(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsHitTestVisible(bool)
    private func _n_put_IsHitTestVisible(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHitTestVisible(pThis, value))
        }
    }
    public func put_IsHitTestVisible(value : boolean) throws -> Void {
        try self._n_put_IsHitTestVisible(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Visibility get_Visibility()
    private func _n_get_Visibility(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CVisibility>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Visibility(pThis, __presult))
        }
    }
    public func get_Visibility() throws -> Microsoft.UI.Xaml.Visibility {
        var __result : _q_CMicrosoft_CUI_CXaml_CVisibility = _q_CMicrosoft_CUI_CXaml_CVisibility_Visible;
        try self._n_get_Visibility(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Visibility(Microsoft.UI.Xaml.Visibility)
    private func _n_put_Visibility(_ value : _q_CMicrosoft_CUI_CXaml_CVisibility) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Visibility(pThis, value))
        }
    }
    public func put_Visibility(value : Microsoft.UI.Xaml.Visibility) throws -> Void {
        try self._n_put_Visibility(value);
    }
    // [IsSpecialName] Windows.Foundation.Size get_RenderSize()
    private func _n_get_RenderSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CSize>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderSize(pThis, __presult))
        }
    }
    public func get_RenderSize() throws -> Windows.Foundation.Size {
        var __result : _q_CWindows_CFoundation_CSize = _q_CWindows_CFoundation_CSize(Width: 0, Height: 0);
        try self._n_get_RenderSize(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_UseLayoutRounding()
    private func _n_get_UseLayoutRounding(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseLayoutRounding(pThis, __presult))
        }
    }
    public func get_UseLayoutRounding() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_UseLayoutRounding(&__result);
        return __result;
    }
    // [IsSpecialName] void put_UseLayoutRounding(bool)
    private func _n_put_UseLayoutRounding(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseLayoutRounding(pThis, value))
        }
    }
    public func put_UseLayoutRounding(value : boolean) throws -> Void {
        try self._n_put_UseLayoutRounding(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Animation.TransitionCollection get_Transitions()
    private func _n_get_Transitions(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transitions(pThis, __presult))
        }
    }
    public func get_Transitions() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>> = nil;
        try self._n_get_Transitions(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition(consuming: __result);
    }
    // [IsSpecialName] void put_Transitions(Microsoft.UI.Xaml.Media.Animation.TransitionCollection)
    private func _n_put_Transitions(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transitions(pThis, value))
        }
    }
    public func put_Transitions(value : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition>) throws -> Void {
        try self._n_put_Transitions(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.CacheMode get_CacheMode()
    private func _n_get_CacheMode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheMode(pThis, __presult))
        }
    }
    public func get_CacheMode() throws -> Optional<Microsoft.UI.Xaml.Media.ICacheMode> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>> = nil;
        try self._n_get_CacheMode(&__result);
        return Microsoft.UI.Xaml.Media.ICacheMode(consuming: __result);
    }
    // [IsSpecialName] void put_CacheMode(Microsoft.UI.Xaml.Media.CacheMode)
    private func _n_put_CacheMode(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CacheMode(pThis, value))
        }
    }
    public func put_CacheMode(value : Optional<Microsoft.UI.Xaml.Media.ICacheMode>) throws -> Void {
        try self._n_put_CacheMode(RawPointer(value));
    }
    // [IsSpecialName] bool get_IsTapEnabled()
    private func _n_get_IsTapEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTapEnabled(pThis, __presult))
        }
    }
    public func get_IsTapEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTapEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTapEnabled(bool)
    private func _n_put_IsTapEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTapEnabled(pThis, value))
        }
    }
    public func put_IsTapEnabled(value : boolean) throws -> Void {
        try self._n_put_IsTapEnabled(value);
    }
    // [IsSpecialName] bool get_IsDoubleTapEnabled()
    private func _n_get_IsDoubleTapEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDoubleTapEnabled(pThis, __presult))
        }
    }
    public func get_IsDoubleTapEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsDoubleTapEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsDoubleTapEnabled(bool)
    private func _n_put_IsDoubleTapEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsDoubleTapEnabled(pThis, value))
        }
    }
    public func put_IsDoubleTapEnabled(value : boolean) throws -> Void {
        try self._n_put_IsDoubleTapEnabled(value);
    }
    // [IsSpecialName] bool get_CanDrag()
    private func _n_get_CanDrag(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDrag(pThis, __presult))
        }
    }
    public func get_CanDrag() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_CanDrag(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CanDrag(bool)
    private func _n_put_CanDrag(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanDrag(pThis, value))
        }
    }
    public func put_CanDrag(value : boolean) throws -> Void {
        try self._n_put_CanDrag(value);
    }
    // [IsSpecialName] bool get_IsRightTapEnabled()
    private func _n_get_IsRightTapEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRightTapEnabled(pThis, __presult))
        }
    }
    public func get_IsRightTapEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsRightTapEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsRightTapEnabled(bool)
    private func _n_put_IsRightTapEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsRightTapEnabled(pThis, value))
        }
    }
    public func put_IsRightTapEnabled(value : boolean) throws -> Void {
        try self._n_put_IsRightTapEnabled(value);
    }
    // [IsSpecialName] bool get_IsHoldingEnabled()
    private func _n_get_IsHoldingEnabled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHoldingEnabled(pThis, __presult))
        }
    }
    public func get_IsHoldingEnabled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsHoldingEnabled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsHoldingEnabled(bool)
    private func _n_put_IsHoldingEnabled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsHoldingEnabled(pThis, value))
        }
    }
    public func put_IsHoldingEnabled(value : boolean) throws -> Void {
        try self._n_put_IsHoldingEnabled(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.ManipulationModes get_ManipulationMode()
    private func _n_get_ManipulationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationMode(pThis, __presult))
        }
    }
    public func get_ManipulationMode() throws -> Microsoft.UI.Xaml.Input.ManipulationModes {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes = _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_None;
        try self._n_get_ManipulationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ManipulationMode(Microsoft.UI.Xaml.Input.ManipulationModes)
    private func _n_put_ManipulationMode(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ManipulationMode(pThis, value))
        }
    }
    public func put_ManipulationMode(value : Microsoft.UI.Xaml.Input.ManipulationModes) throws -> Void {
        try self._n_put_ManipulationMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVectorView<Microsoft.UI.Xaml.Input.Pointer> get_PointerCaptures()
    private func _n_get_PointerCaptures(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerCaptures(pThis, __presult))
        }
    }
    public func get_PointerCaptures() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer>> = nil;
        try self._n_get_PointerCaptures(&__result);
        return ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase get_ContextFlyout()
    private func _n_get_ContextFlyout(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContextFlyout(pThis, __presult))
        }
    }
    public func get_ContextFlyout() throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>> = nil;
        try self._n_get_ContextFlyout(&__result);
        return Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase(consuming: __result);
    }
    // [IsSpecialName] void put_ContextFlyout(Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)
    private func _n_put_ContextFlyout(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CControls_CPrimitives_CIFlyoutBase>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ContextFlyout(pThis, value))
        }
    }
    public func put_ContextFlyout(value : Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase>) throws -> Void {
        try self._n_put_ContextFlyout(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.ElementCompositeMode get_CompositeMode()
    private func _n_get_CompositeMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompositeMode(pThis, __presult))
        }
    }
    public func get_CompositeMode() throws -> Microsoft.UI.Xaml.Media.ElementCompositeMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode = _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_Inherit;
        try self._n_get_CompositeMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CompositeMode(Microsoft.UI.Xaml.Media.ElementCompositeMode)
    private func _n_put_CompositeMode(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CompositeMode(pThis, value))
        }
    }
    public func put_CompositeMode(value : Microsoft.UI.Xaml.Media.ElementCompositeMode) throws -> Void {
        try self._n_put_CompositeMode(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.XamlLight> get_Lights()
    private func _n_get_Lights(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Lights(pThis, __presult))
        }
    }
    public func get_Lights() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight>> = nil;
        try self._n_get_Lights(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight(consuming: __result);
    }
    // [IsSpecialName] bool get_CanBeScrollAnchor()
    private func _n_get_CanBeScrollAnchor(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanBeScrollAnchor(pThis, __presult))
        }
    }
    public func get_CanBeScrollAnchor() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_CanBeScrollAnchor(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CanBeScrollAnchor(bool)
    private func _n_put_CanBeScrollAnchor(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CanBeScrollAnchor(pThis, value))
        }
    }
    public func put_CanBeScrollAnchor(value : boolean) throws -> Void {
        try self._n_put_CanBeScrollAnchor(value);
    }
    // [IsSpecialName] bool get_ExitDisplayModeOnAccessKeyInvoked()
    private func _n_get_ExitDisplayModeOnAccessKeyInvoked(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExitDisplayModeOnAccessKeyInvoked(pThis, __presult))
        }
    }
    public func get_ExitDisplayModeOnAccessKeyInvoked() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ExitDisplayModeOnAccessKeyInvoked(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExitDisplayModeOnAccessKeyInvoked(bool)
    private func _n_put_ExitDisplayModeOnAccessKeyInvoked(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExitDisplayModeOnAccessKeyInvoked(pThis, value))
        }
    }
    public func put_ExitDisplayModeOnAccessKeyInvoked(value : boolean) throws -> Void {
        try self._n_put_ExitDisplayModeOnAccessKeyInvoked(value);
    }
    // [IsSpecialName] bool get_IsAccessKeyScope()
    private func _n_get_IsAccessKeyScope(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAccessKeyScope(pThis, __presult))
        }
    }
    public func get_IsAccessKeyScope() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsAccessKeyScope(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsAccessKeyScope(bool)
    private func _n_put_IsAccessKeyScope(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsAccessKeyScope(pThis, value))
        }
    }
    public func put_IsAccessKeyScope(value : boolean) throws -> Void {
        try self._n_put_IsAccessKeyScope(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_AccessKeyScopeOwner()
    private func _n_get_AccessKeyScopeOwner(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKeyScopeOwner(pThis, __presult))
        }
    }
    public func get_AccessKeyScopeOwner() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_AccessKeyScopeOwner(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] void put_AccessKeyScopeOwner(Microsoft.UI.Xaml.DependencyObject)
    private func _n_put_AccessKeyScopeOwner(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AccessKeyScopeOwner(pThis, value))
        }
    }
    public func put_AccessKeyScopeOwner(value : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_put_AccessKeyScopeOwner(RawPointer(value));
    }
    // [IsSpecialName] System.String get_AccessKey()
    private func _n_get_AccessKey(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKey(pThis, __presult))
        }
    }
    public func get_AccessKey() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_AccessKey(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_AccessKey(System.String)
    private func _n_put_AccessKey(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AccessKey(pThis, value))
        }
    }
    public func put_AccessKey(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_AccessKey(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.KeyTipPlacementMode get_KeyTipPlacementMode()
    private func _n_get_KeyTipPlacementMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipPlacementMode(pThis, __presult))
        }
    }
    public func get_KeyTipPlacementMode() throws -> Microsoft.UI.Xaml.Input.KeyTipPlacementMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Auto;
        try self._n_get_KeyTipPlacementMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KeyTipPlacementMode(Microsoft.UI.Xaml.Input.KeyTipPlacementMode)
    private func _n_put_KeyTipPlacementMode(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyTipPlacementMode(pThis, value))
        }
    }
    public func put_KeyTipPlacementMode(value : Microsoft.UI.Xaml.Input.KeyTipPlacementMode) throws -> Void {
        try self._n_put_KeyTipPlacementMode(value);
    }
    // [IsSpecialName] System.Double get_KeyTipHorizontalOffset()
    private func _n_get_KeyTipHorizontalOffset(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipHorizontalOffset(pThis, __presult))
        }
    }
    public func get_KeyTipHorizontalOffset() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_KeyTipHorizontalOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KeyTipHorizontalOffset(System.Double)
    private func _n_put_KeyTipHorizontalOffset(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyTipHorizontalOffset(pThis, value))
        }
    }
    public func put_KeyTipHorizontalOffset(value : Swift.Double) throws -> Void {
        try self._n_put_KeyTipHorizontalOffset(value);
    }
    // [IsSpecialName] System.Double get_KeyTipVerticalOffset()
    private func _n_get_KeyTipVerticalOffset(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipVerticalOffset(pThis, __presult))
        }
    }
    public func get_KeyTipVerticalOffset() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_KeyTipVerticalOffset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KeyTipVerticalOffset(System.Double)
    private func _n_put_KeyTipVerticalOffset(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyTipVerticalOffset(pThis, value))
        }
    }
    public func put_KeyTipVerticalOffset(value : Swift.Double) throws -> Void {
        try self._n_put_KeyTipVerticalOffset(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_KeyTipTarget()
    private func _n_get_KeyTipTarget(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipTarget(pThis, __presult))
        }
    }
    public func get_KeyTipTarget() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_KeyTipTarget(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] void put_KeyTipTarget(Microsoft.UI.Xaml.DependencyObject)
    private func _n_put_KeyTipTarget(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyTipTarget(pThis, value))
        }
    }
    public func put_KeyTipTarget(value : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_put_KeyTipTarget(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode get_XYFocusKeyboardNavigation()
    private func _n_get_XYFocusKeyboardNavigation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusKeyboardNavigation(pThis, __presult))
        }
    }
    public func get_XYFocusKeyboardNavigation() throws -> Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode = _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Auto;
        try self._n_get_XYFocusKeyboardNavigation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_XYFocusKeyboardNavigation(Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode)
    private func _n_put_XYFocusKeyboardNavigation(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusKeyboardNavigation(pThis, value))
        }
    }
    public func put_XYFocusKeyboardNavigation(value : Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode) throws -> Void {
        try self._n_put_XYFocusKeyboardNavigation(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusUpNavigationStrategy()
    private func _n_get_XYFocusUpNavigationStrategy(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUpNavigationStrategy(pThis, __presult))
        }
    }
    public func get_XYFocusUpNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto;
        try self._n_get_XYFocusUpNavigationStrategy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_XYFocusUpNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    private func _n_put_XYFocusUpNavigationStrategy(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusUpNavigationStrategy(pThis, value))
        }
    }
    public func put_XYFocusUpNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        try self._n_put_XYFocusUpNavigationStrategy(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusDownNavigationStrategy()
    private func _n_get_XYFocusDownNavigationStrategy(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDownNavigationStrategy(pThis, __presult))
        }
    }
    public func get_XYFocusDownNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto;
        try self._n_get_XYFocusDownNavigationStrategy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_XYFocusDownNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    private func _n_put_XYFocusDownNavigationStrategy(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusDownNavigationStrategy(pThis, value))
        }
    }
    public func put_XYFocusDownNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        try self._n_put_XYFocusDownNavigationStrategy(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusLeftNavigationStrategy()
    private func _n_get_XYFocusLeftNavigationStrategy(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeftNavigationStrategy(pThis, __presult))
        }
    }
    public func get_XYFocusLeftNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto;
        try self._n_get_XYFocusLeftNavigationStrategy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_XYFocusLeftNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    private func _n_put_XYFocusLeftNavigationStrategy(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusLeftNavigationStrategy(pThis, value))
        }
    }
    public func put_XYFocusLeftNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        try self._n_put_XYFocusLeftNavigationStrategy(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy get_XYFocusRightNavigationStrategy()
    private func _n_get_XYFocusRightNavigationStrategy(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRightNavigationStrategy(pThis, __presult))
        }
    }
    public func get_XYFocusRightNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy = _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto;
        try self._n_get_XYFocusRightNavigationStrategy(&__result);
        return __result;
    }
    // [IsSpecialName] void put_XYFocusRightNavigationStrategy(Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy)
    private func _n_put_XYFocusRightNavigationStrategy(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusRightNavigationStrategy(pThis, value))
        }
    }
    public func put_XYFocusRightNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        try self._n_put_XYFocusRightNavigationStrategy(value);
    }
    // [IsSpecialName] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Input.KeyboardAccelerator> get_KeyboardAccelerators()
    private func _n_get_KeyboardAccelerators(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAccelerators(pThis, __presult))
        }
    }
    public func get_KeyboardAccelerators() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator>> = nil;
        try self._n_get_KeyboardAccelerators(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_KeyboardAcceleratorPlacementTarget()
    private func _n_get_KeyboardAcceleratorPlacementTarget(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorPlacementTarget(pThis, __presult))
        }
    }
    public func get_KeyboardAcceleratorPlacementTarget() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_KeyboardAcceleratorPlacementTarget(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] void put_KeyboardAcceleratorPlacementTarget(Microsoft.UI.Xaml.DependencyObject)
    private func _n_put_KeyboardAcceleratorPlacementTarget(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyboardAcceleratorPlacementTarget(pThis, value))
        }
    }
    public func put_KeyboardAcceleratorPlacementTarget(value : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_put_KeyboardAcceleratorPlacementTarget(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode get_KeyboardAcceleratorPlacementMode()
    private func _n_get_KeyboardAcceleratorPlacementMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorPlacementMode(pThis, __presult))
        }
    }
    public func get_KeyboardAcceleratorPlacementMode() throws -> Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Auto;
        try self._n_get_KeyboardAcceleratorPlacementMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_KeyboardAcceleratorPlacementMode(Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode)
    private func _n_put_KeyboardAcceleratorPlacementMode(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_KeyboardAcceleratorPlacementMode(pThis, value))
        }
    }
    public func put_KeyboardAcceleratorPlacementMode(value : Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode) throws -> Void {
        try self._n_put_KeyboardAcceleratorPlacementMode(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ElementHighContrastAdjustment get_HighContrastAdjustment()
    private func _n_get_HighContrastAdjustment(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighContrastAdjustment(pThis, __presult))
        }
    }
    public func get_HighContrastAdjustment() throws -> Microsoft.UI.Xaml.ElementHighContrastAdjustment {
        var __result : _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment = _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_None;
        try self._n_get_HighContrastAdjustment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HighContrastAdjustment(Microsoft.UI.Xaml.ElementHighContrastAdjustment)
    private func _n_put_HighContrastAdjustment(_ value : _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HighContrastAdjustment(pThis, value))
        }
    }
    public func put_HighContrastAdjustment(value : Microsoft.UI.Xaml.ElementHighContrastAdjustment) throws -> Void {
        try self._n_put_HighContrastAdjustment(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Input.KeyboardNavigationMode get_TabFocusNavigation()
    private func _n_get_TabFocusNavigation(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabFocusNavigation(pThis, __presult))
        }
    }
    public func get_TabFocusNavigation() throws -> Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Local;
        try self._n_get_TabFocusNavigation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TabFocusNavigation(Microsoft.UI.Xaml.Input.KeyboardNavigationMode)
    private func _n_put_TabFocusNavigation(_ value : _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TabFocusNavigation(pThis, value))
        }
    }
    public func put_TabFocusNavigation(value : Microsoft.UI.Xaml.Input.KeyboardNavigationMode) throws -> Void {
        try self._n_put_TabFocusNavigation(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ScalarTransition get_OpacityTransition()
    private func _n_get_OpacityTransition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpacityTransition(pThis, __presult))
        }
    }
    public func get_OpacityTransition() throws -> Optional<Microsoft.UI.Xaml.IScalarTransition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>> = nil;
        try self._n_get_OpacityTransition(&__result);
        return Microsoft.UI.Xaml.IScalarTransition(consuming: __result);
    }
    // [IsSpecialName] void put_OpacityTransition(Microsoft.UI.Xaml.ScalarTransition)
    private func _n_put_OpacityTransition(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpacityTransition(pThis, value))
        }
    }
    public func put_OpacityTransition(value : Optional<Microsoft.UI.Xaml.IScalarTransition>) throws -> Void {
        try self._n_put_OpacityTransition(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_Translation()
    private func _n_get_Translation(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Translation(pThis, __presult))
        }
    }
    public func get_Translation() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_Translation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Translation(Windows.Foundation.Numerics.Vector3)
    private func _n_put_Translation(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Translation(pThis, value))
        }
    }
    public func put_Translation(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_Translation(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Vector3Transition get_TranslationTransition()
    private func _n_get_TranslationTransition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TranslationTransition(pThis, __presult))
        }
    }
    public func get_TranslationTransition() throws -> Optional<Microsoft.UI.Xaml.IVector3Transition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>> = nil;
        try self._n_get_TranslationTransition(&__result);
        return Microsoft.UI.Xaml.IVector3Transition(consuming: __result);
    }
    // [IsSpecialName] void put_TranslationTransition(Microsoft.UI.Xaml.Vector3Transition)
    private func _n_put_TranslationTransition(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TranslationTransition(pThis, value))
        }
    }
    public func put_TranslationTransition(value : Optional<Microsoft.UI.Xaml.IVector3Transition>) throws -> Void {
        try self._n_put_TranslationTransition(RawPointer(value));
    }
    // [IsSpecialName] System.Single get_Rotation()
    private func _n_get_Rotation(_ __presult: UnsafeMutablePointer<FLOAT>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Rotation(pThis, __presult))
        }
    }
    public func get_Rotation() throws -> Swift.Float {
        var __result : FLOAT = 0;
        try self._n_get_Rotation(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Rotation(System.Single)
    private func _n_put_Rotation(_ value : FLOAT) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Rotation(pThis, value))
        }
    }
    public func put_Rotation(value : Swift.Float) throws -> Void {
        try self._n_put_Rotation(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.ScalarTransition get_RotationTransition()
    private func _n_get_RotationTransition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RotationTransition(pThis, __presult))
        }
    }
    public func get_RotationTransition() throws -> Optional<Microsoft.UI.Xaml.IScalarTransition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>> = nil;
        try self._n_get_RotationTransition(&__result);
        return Microsoft.UI.Xaml.IScalarTransition(consuming: __result);
    }
    // [IsSpecialName] void put_RotationTransition(Microsoft.UI.Xaml.ScalarTransition)
    private func _n_put_RotationTransition(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIScalarTransition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RotationTransition(pThis, value))
        }
    }
    public func put_RotationTransition(value : Optional<Microsoft.UI.Xaml.IScalarTransition>) throws -> Void {
        try self._n_put_RotationTransition(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_Scale()
    private func _n_get_Scale(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scale(pThis, __presult))
        }
    }
    public func get_Scale() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_Scale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Scale(Windows.Foundation.Numerics.Vector3)
    private func _n_put_Scale(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Scale(pThis, value))
        }
    }
    public func put_Scale(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_Scale(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Vector3Transition get_ScaleTransition()
    private func _n_get_ScaleTransition(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScaleTransition(pThis, __presult))
        }
    }
    public func get_ScaleTransition() throws -> Optional<Microsoft.UI.Xaml.IVector3Transition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>> = nil;
        try self._n_get_ScaleTransition(&__result);
        return Microsoft.UI.Xaml.IVector3Transition(consuming: __result);
    }
    // [IsSpecialName] void put_ScaleTransition(Microsoft.UI.Xaml.Vector3Transition)
    private func _n_put_ScaleTransition(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ScaleTransition(pThis, value))
        }
    }
    public func put_ScaleTransition(value : Optional<Microsoft.UI.Xaml.IVector3Transition>) throws -> Void {
        try self._n_put_ScaleTransition(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Matrix4x4 get_TransformMatrix()
    private func _n_get_TransformMatrix(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CMatrix4x4>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformMatrix(pThis, __presult))
        }
    }
    public func get_TransformMatrix() throws -> Windows.Foundation.Numerics.Matrix4x4 {
        var __result : _q_CWindows_CFoundation_CNumerics_CMatrix4x4 = _q_CWindows_CFoundation_CNumerics_CMatrix4x4(M11: 0, M12: 0, M13: 0, M14: 0, M21: 0, M22: 0, M23: 0, M24: 0, M31: 0, M32: 0, M33: 0, M34: 0, M41: 0, M42: 0, M43: 0, M44: 0);
        try self._n_get_TransformMatrix(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TransformMatrix(Windows.Foundation.Numerics.Matrix4x4)
    private func _n_put_TransformMatrix(_ value : _q_CWindows_CFoundation_CNumerics_CMatrix4x4) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransformMatrix(pThis, value))
        }
    }
    public func put_TransformMatrix(value : Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        try self._n_put_TransformMatrix(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_CenterPoint()
    private func _n_get_CenterPoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CenterPoint(pThis, __presult))
        }
    }
    public func get_CenterPoint() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_CenterPoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CenterPoint(Windows.Foundation.Numerics.Vector3)
    private func _n_put_CenterPoint(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CenterPoint(pThis, value))
        }
    }
    public func put_CenterPoint(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_CenterPoint(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_RotationAxis()
    private func _n_get_RotationAxis(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RotationAxis(pThis, __presult))
        }
    }
    public func get_RotationAxis() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_RotationAxis(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RotationAxis(Windows.Foundation.Numerics.Vector3)
    private func _n_put_RotationAxis(_ value : _q_CWindows_CFoundation_CNumerics_CVector3) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RotationAxis(pThis, value))
        }
    }
    public func put_RotationAxis(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        try self._n_put_RotationAxis(value);
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector3 get_ActualOffset()
    private func _n_get_ActualOffset(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector3>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualOffset(pThis, __presult))
        }
    }
    public func get_ActualOffset() throws -> Windows.Foundation.Numerics.Vector3 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector3 = _q_CWindows_CFoundation_CNumerics_CVector3(X: 0, Y: 0, Z: 0);
        try self._n_get_ActualOffset(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.Numerics.Vector2 get_ActualSize()
    private func _n_get_ActualSize(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CNumerics_CVector2>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ActualSize(pThis, __presult))
        }
    }
    public func get_ActualSize() throws -> Windows.Foundation.Numerics.Vector2 {
        var __result : _q_CWindows_CFoundation_CNumerics_CVector2 = _q_CWindows_CFoundation_CNumerics_CVector2(X: 0, Y: 0);
        try self._n_get_ActualSize(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.XamlRoot get_XamlRoot()
    private func _n_get_XamlRoot(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIXamlRoot>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XamlRoot(pThis, __presult))
        }
    }
    public func get_XamlRoot() throws -> Optional<Microsoft.UI.Xaml.IXamlRoot> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIXamlRoot>> = nil;
        try self._n_get_XamlRoot(&__result);
        return Microsoft.UI.Xaml.IXamlRoot(consuming: __result);
    }
    // [IsSpecialName] void put_XamlRoot(Microsoft.UI.Xaml.XamlRoot)
    private func _n_put_XamlRoot(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIXamlRoot>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XamlRoot(pThis, value))
        }
    }
    public func put_XamlRoot(value : Optional<Microsoft.UI.Xaml.IXamlRoot>) throws -> Void {
        try self._n_put_XamlRoot(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Shadow get_Shadow()
    private func _n_get_Shadow(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Shadow(pThis, __presult))
        }
    }
    public func get_Shadow() throws -> Optional<Microsoft.UI.Xaml.Media.IShadow> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow>> = nil;
        try self._n_get_Shadow(&__result);
        return Microsoft.UI.Xaml.Media.IShadow(consuming: __result);
    }
    // [IsSpecialName] void put_Shadow(Microsoft.UI.Xaml.Media.Shadow)
    private func _n_put_Shadow(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIShadow>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Shadow(pThis, value))
        }
    }
    public func put_Shadow(value : Optional<Microsoft.UI.Xaml.Media.IShadow>) throws -> Void {
        try self._n_put_Shadow(RawPointer(value));
    }
    // [IsSpecialName] System.Double get_RasterizationScale()
    private func _n_get_RasterizationScale(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RasterizationScale(pThis, __presult))
        }
    }
    public func get_RasterizationScale() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_RasterizationScale(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RasterizationScale(System.Double)
    private func _n_put_RasterizationScale(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RasterizationScale(pThis, value))
        }
    }
    public func put_RasterizationScale(value : Swift.Double) throws -> Void {
        try self._n_put_RasterizationScale(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.FocusState get_FocusState()
    private func _n_get_FocusState(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CFocusState>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusState(pThis, __presult))
        }
    }
    public func get_FocusState() throws -> Microsoft.UI.Xaml.FocusState {
        var __result : _q_CMicrosoft_CUI_CXaml_CFocusState = _q_CMicrosoft_CUI_CXaml_CFocusState_Unfocused;
        try self._n_get_FocusState(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_UseSystemFocusVisuals()
    private func _n_get_UseSystemFocusVisuals(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSystemFocusVisuals(pThis, __presult))
        }
    }
    public func get_UseSystemFocusVisuals() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_UseSystemFocusVisuals(&__result);
        return __result;
    }
    // [IsSpecialName] void put_UseSystemFocusVisuals(bool)
    private func _n_put_UseSystemFocusVisuals(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseSystemFocusVisuals(pThis, value))
        }
    }
    public func put_UseSystemFocusVisuals(value : boolean) throws -> Void {
        try self._n_put_UseSystemFocusVisuals(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_XYFocusLeft()
    private func _n_get_XYFocusLeft(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeft(pThis, __presult))
        }
    }
    public func get_XYFocusLeft() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_XYFocusLeft(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] void put_XYFocusLeft(Microsoft.UI.Xaml.DependencyObject)
    private func _n_put_XYFocusLeft(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusLeft(pThis, value))
        }
    }
    public func put_XYFocusLeft(value : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_put_XYFocusLeft(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_XYFocusRight()
    private func _n_get_XYFocusRight(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRight(pThis, __presult))
        }
    }
    public func get_XYFocusRight() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_XYFocusRight(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] void put_XYFocusRight(Microsoft.UI.Xaml.DependencyObject)
    private func _n_put_XYFocusRight(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusRight(pThis, value))
        }
    }
    public func put_XYFocusRight(value : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_put_XYFocusRight(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_XYFocusUp()
    private func _n_get_XYFocusUp(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUp(pThis, __presult))
        }
    }
    public func get_XYFocusUp() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_XYFocusUp(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] void put_XYFocusUp(Microsoft.UI.Xaml.DependencyObject)
    private func _n_put_XYFocusUp(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusUp(pThis, value))
        }
    }
    public func put_XYFocusUp(value : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_put_XYFocusUp(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyObject get_XYFocusDown()
    private func _n_get_XYFocusDown(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDown(pThis, __presult))
        }
    }
    public func get_XYFocusDown() throws -> Optional<Microsoft.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>> = nil;
        try self._n_get_XYFocusDown(&__result);
        return Microsoft.UI.Xaml.IDependencyObject(consuming: __result);
    }
    // [IsSpecialName] void put_XYFocusDown(Microsoft.UI.Xaml.DependencyObject)
    private func _n_put_XYFocusDown(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyObject>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_XYFocusDown(pThis, value))
        }
    }
    public func put_XYFocusDown(value : Optional<Microsoft.UI.Xaml.IDependencyObject>) throws -> Void {
        try self._n_put_XYFocusDown(RawPointer(value));
    }
    // [IsSpecialName] bool get_IsTabStop()
    private func _n_get_IsTabStop(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTabStop(pThis, __presult))
        }
    }
    public func get_IsTabStop() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsTabStop(&__result);
        return __result;
    }
    // [IsSpecialName] void put_IsTabStop(bool)
    private func _n_put_IsTabStop(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsTabStop(pThis, value))
        }
    }
    public func put_IsTabStop(value : boolean) throws -> Void {
        try self._n_put_IsTabStop(value);
    }
    // [IsSpecialName] System.Int32 get_TabIndex()
    private func _n_get_TabIndex(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabIndex(pThis, __presult))
        }
    }
    public func get_TabIndex() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_TabIndex(&__result);
        return __result;
    }
    // [IsSpecialName] void put_TabIndex(System.Int32)
    private func _n_put_TabIndex(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_TabIndex(pThis, value))
        }
    }
    public func put_TabIndex(value : Swift.Int32) throws -> Void {
        try self._n_put_TabIndex(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_KeyUp(Microsoft.UI.Xaml.Input.KeyEventHandler)
    private func _n_add_KeyUp(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_KeyUp(pThis, handler, __presult))
        }
    }
    public func add_KeyUp(handler : Optional<Microsoft.UI.Xaml.Input.IKeyEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_KeyUp(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_KeyUp(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_KeyUp(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_KeyUp(pThis, token))
        }
    }
    public func remove_KeyUp(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_KeyUp(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_KeyDown(Microsoft.UI.Xaml.Input.KeyEventHandler)
    private func _n_add_KeyDown(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_KeyDown(pThis, handler, __presult))
        }
    }
    public func add_KeyDown(handler : Optional<Microsoft.UI.Xaml.Input.IKeyEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_KeyDown(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_KeyDown(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_KeyDown(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_KeyDown(pThis, token))
        }
    }
    public func remove_KeyDown(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_KeyDown(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_GotFocus(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_GotFocus(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_GotFocus(pThis, handler, __presult))
        }
    }
    public func add_GotFocus(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_GotFocus(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_GotFocus(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_GotFocus(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GotFocus(pThis, token))
        }
    }
    public func remove_GotFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_GotFocus(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_LostFocus(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_LostFocus(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_LostFocus(pThis, handler, __presult))
        }
    }
    public func add_LostFocus(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_LostFocus(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_LostFocus(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_LostFocus(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LostFocus(pThis, token))
        }
    }
    public func remove_LostFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_LostFocus(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DragStarting(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.DragStartingEventArgs>)
    private func _n_add_DragStarting(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragStarting(pThis, handler, __presult))
        }
    }
    public func add_DragStarting(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DragStarting(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DragStarting(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DragStarting(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragStarting(pThis, token))
        }
    }
    public func remove_DragStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DragStarting(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DropCompleted(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.DropCompletedEventArgs>)
    private func _n_add_DropCompleted(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DropCompleted(pThis, handler, __presult))
        }
    }
    public func add_DropCompleted(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DropCompleted(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DropCompleted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DropCompleted(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DropCompleted(pThis, token))
        }
    }
    public func remove_DropCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DropCompleted(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_CharacterReceived(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>)
    private func _n_add_CharacterReceived(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_CharacterReceived(pThis, handler, __presult))
        }
    }
    public func add_CharacterReceived(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_CharacterReceived(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_CharacterReceived(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_CharacterReceived(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CharacterReceived(pThis, token))
        }
    }
    public func remove_CharacterReceived(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_CharacterReceived(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DragEnter(Microsoft.UI.Xaml.DragEventHandler)
    private func _n_add_DragEnter(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragEnter(pThis, handler, __presult))
        }
    }
    public func add_DragEnter(handler : Optional<Microsoft.UI.Xaml.IDragEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DragEnter(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DragEnter(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DragEnter(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragEnter(pThis, token))
        }
    }
    public func remove_DragEnter(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DragEnter(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DragLeave(Microsoft.UI.Xaml.DragEventHandler)
    private func _n_add_DragLeave(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragLeave(pThis, handler, __presult))
        }
    }
    public func add_DragLeave(handler : Optional<Microsoft.UI.Xaml.IDragEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DragLeave(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DragLeave(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DragLeave(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragLeave(pThis, token))
        }
    }
    public func remove_DragLeave(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DragLeave(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DragOver(Microsoft.UI.Xaml.DragEventHandler)
    private func _n_add_DragOver(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DragOver(pThis, handler, __presult))
        }
    }
    public func add_DragOver(handler : Optional<Microsoft.UI.Xaml.IDragEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DragOver(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DragOver(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DragOver(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DragOver(pThis, token))
        }
    }
    public func remove_DragOver(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DragOver(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Drop(Microsoft.UI.Xaml.DragEventHandler)
    private func _n_add_Drop(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDragEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Drop(pThis, handler, __presult))
        }
    }
    public func add_Drop(handler : Optional<Microsoft.UI.Xaml.IDragEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Drop(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Drop(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Drop(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Drop(pThis, token))
        }
    }
    public func remove_Drop(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Drop(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerPressed(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerPressed(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerPressed(pThis, handler, __presult))
        }
    }
    public func add_PointerPressed(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerPressed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerPressed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerPressed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerPressed(pThis, token))
        }
    }
    public func remove_PointerPressed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerPressed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerMoved(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerMoved(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerMoved(pThis, handler, __presult))
        }
    }
    public func add_PointerMoved(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerMoved(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerMoved(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerMoved(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerMoved(pThis, token))
        }
    }
    public func remove_PointerMoved(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerMoved(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerReleased(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerReleased(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerReleased(pThis, handler, __presult))
        }
    }
    public func add_PointerReleased(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerReleased(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerReleased(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerReleased(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerReleased(pThis, token))
        }
    }
    public func remove_PointerReleased(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerReleased(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerEntered(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerEntered(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerEntered(pThis, handler, __presult))
        }
    }
    public func add_PointerEntered(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerEntered(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerEntered(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerEntered(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerEntered(pThis, token))
        }
    }
    public func remove_PointerEntered(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerEntered(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerExited(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerExited(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerExited(pThis, handler, __presult))
        }
    }
    public func add_PointerExited(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerExited(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerExited(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerExited(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerExited(pThis, token))
        }
    }
    public func remove_PointerExited(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerExited(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerCaptureLost(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerCaptureLost(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerCaptureLost(pThis, handler, __presult))
        }
    }
    public func add_PointerCaptureLost(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerCaptureLost(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerCaptureLost(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerCaptureLost(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerCaptureLost(pThis, token))
        }
    }
    public func remove_PointerCaptureLost(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerCaptureLost(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerCanceled(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerCanceled(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerCanceled(pThis, handler, __presult))
        }
    }
    public func add_PointerCanceled(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerCanceled(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerCanceled(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerCanceled(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerCanceled(pThis, token))
        }
    }
    public func remove_PointerCanceled(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerCanceled(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PointerWheelChanged(Microsoft.UI.Xaml.Input.PointerEventHandler)
    private func _n_add_PointerWheelChanged(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PointerWheelChanged(pThis, handler, __presult))
        }
    }
    public func add_PointerWheelChanged(handler : Optional<Microsoft.UI.Xaml.Input.IPointerEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PointerWheelChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PointerWheelChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PointerWheelChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PointerWheelChanged(pThis, token))
        }
    }
    public func remove_PointerWheelChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PointerWheelChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Tapped(Microsoft.UI.Xaml.Input.TappedEventHandler)
    private func _n_add_Tapped(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Tapped(pThis, handler, __presult))
        }
    }
    public func add_Tapped(handler : Optional<Microsoft.UI.Xaml.Input.ITappedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Tapped(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Tapped(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Tapped(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Tapped(pThis, token))
        }
    }
    public func remove_Tapped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Tapped(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DoubleTapped(Microsoft.UI.Xaml.Input.DoubleTappedEventHandler)
    private func _n_add_DoubleTapped(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DoubleTapped(pThis, handler, __presult))
        }
    }
    public func add_DoubleTapped(handler : Optional<Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DoubleTapped(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DoubleTapped(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DoubleTapped(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DoubleTapped(pThis, token))
        }
    }
    public func remove_DoubleTapped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DoubleTapped(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Holding(Microsoft.UI.Xaml.Input.HoldingEventHandler)
    private func _n_add_Holding(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Holding(pThis, handler, __presult))
        }
    }
    public func add_Holding(handler : Optional<Microsoft.UI.Xaml.Input.IHoldingEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Holding(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Holding(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Holding(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Holding(pThis, token))
        }
    }
    public func remove_Holding(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Holding(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ContextRequested(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>)
    private func _n_add_ContextRequested(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextRequested(pThis, handler, __presult))
        }
    }
    public func add_ContextRequested(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ContextRequested(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ContextRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ContextRequested(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextRequested(pThis, token))
        }
    }
    public func remove_ContextRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ContextRequested(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ContextCanceled(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.RoutedEventArgs>)
    private func _n_add_ContextCanceled(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ContextCanceled(pThis, handler, __presult))
        }
    }
    public func add_ContextCanceled(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ContextCanceled(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ContextCanceled(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ContextCanceled(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ContextCanceled(pThis, token))
        }
    }
    public func remove_ContextCanceled(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ContextCanceled(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RightTapped(Microsoft.UI.Xaml.Input.RightTappedEventHandler)
    private func _n_add_RightTapped(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RightTapped(pThis, handler, __presult))
        }
    }
    public func add_RightTapped(handler : Optional<Microsoft.UI.Xaml.Input.IRightTappedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RightTapped(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RightTapped(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_RightTapped(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RightTapped(pThis, token))
        }
    }
    public func remove_RightTapped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RightTapped(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ManipulationStarting(Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler)
    private func _n_add_ManipulationStarting(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationStarting(pThis, handler, __presult))
        }
    }
    public func add_ManipulationStarting(handler : Optional<Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ManipulationStarting(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ManipulationStarting(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ManipulationStarting(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationStarting(pThis, token))
        }
    }
    public func remove_ManipulationStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ManipulationStarting(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ManipulationInertiaStarting(Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler)
    private func _n_add_ManipulationInertiaStarting(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationInertiaStarting(pThis, handler, __presult))
        }
    }
    public func add_ManipulationInertiaStarting(handler : Optional<Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ManipulationInertiaStarting(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ManipulationInertiaStarting(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ManipulationInertiaStarting(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationInertiaStarting(pThis, token))
        }
    }
    public func remove_ManipulationInertiaStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ManipulationInertiaStarting(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ManipulationStarted(Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler)
    private func _n_add_ManipulationStarted(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationStarted(pThis, handler, __presult))
        }
    }
    public func add_ManipulationStarted(handler : Optional<Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ManipulationStarted(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ManipulationStarted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ManipulationStarted(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationStarted(pThis, token))
        }
    }
    public func remove_ManipulationStarted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ManipulationStarted(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ManipulationDelta(Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler)
    private func _n_add_ManipulationDelta(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationDelta(pThis, handler, __presult))
        }
    }
    public func add_ManipulationDelta(handler : Optional<Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ManipulationDelta(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ManipulationDelta(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ManipulationDelta(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationDelta(pThis, token))
        }
    }
    public func remove_ManipulationDelta(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ManipulationDelta(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ManipulationCompleted(Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler)
    private func _n_add_ManipulationCompleted(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ManipulationCompleted(pThis, handler, __presult))
        }
    }
    public func add_ManipulationCompleted(handler : Optional<Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ManipulationCompleted(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ManipulationCompleted(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ManipulationCompleted(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ManipulationCompleted(pThis, token))
        }
    }
    public func remove_ManipulationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ManipulationCompleted(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_AccessKeyDisplayRequested(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>)
    private func _n_add_AccessKeyDisplayRequested(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccessKeyDisplayRequested(pThis, handler, __presult))
        }
    }
    public func add_AccessKeyDisplayRequested(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_AccessKeyDisplayRequested(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_AccessKeyDisplayRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_AccessKeyDisplayRequested(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccessKeyDisplayRequested(pThis, token))
        }
    }
    public func remove_AccessKeyDisplayRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_AccessKeyDisplayRequested(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_AccessKeyDisplayDismissed(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>)
    private func _n_add_AccessKeyDisplayDismissed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccessKeyDisplayDismissed(pThis, handler, __presult))
        }
    }
    public func add_AccessKeyDisplayDismissed(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_AccessKeyDisplayDismissed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_AccessKeyDisplayDismissed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_AccessKeyDisplayDismissed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccessKeyDisplayDismissed(pThis, token))
        }
    }
    public func remove_AccessKeyDisplayDismissed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_AccessKeyDisplayDismissed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_AccessKeyInvoked(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>)
    private func _n_add_AccessKeyInvoked(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_AccessKeyInvoked(pThis, handler, __presult))
        }
    }
    public func add_AccessKeyInvoked(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_AccessKeyInvoked(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_AccessKeyInvoked(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_AccessKeyInvoked(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_AccessKeyInvoked(pThis, token))
        }
    }
    public func remove_AccessKeyInvoked(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_AccessKeyInvoked(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ProcessKeyboardAccelerators(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>)
    private func _n_add_ProcessKeyboardAccelerators(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ProcessKeyboardAccelerators(pThis, handler, __presult))
        }
    }
    public func add_ProcessKeyboardAccelerators(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ProcessKeyboardAccelerators(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ProcessKeyboardAccelerators(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ProcessKeyboardAccelerators(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ProcessKeyboardAccelerators(pThis, token))
        }
    }
    public func remove_ProcessKeyboardAccelerators(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ProcessKeyboardAccelerators(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_GettingFocus(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.GettingFocusEventArgs>)
    private func _n_add_GettingFocus(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_GettingFocus(pThis, handler, __presult))
        }
    }
    public func add_GettingFocus(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_GettingFocus(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_GettingFocus(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_GettingFocus(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GettingFocus(pThis, token))
        }
    }
    public func remove_GettingFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_GettingFocus(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_LosingFocus(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.LosingFocusEventArgs>)
    private func _n_add_LosingFocus(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_LosingFocus(pThis, handler, __presult))
        }
    }
    public func add_LosingFocus(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_LosingFocus(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_LosingFocus(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_LosingFocus(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LosingFocus(pThis, token))
        }
    }
    public func remove_LosingFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_LosingFocus(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_NoFocusCandidateFound(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>)
    private func _n_add_NoFocusCandidateFound(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_NoFocusCandidateFound(pThis, handler, __presult))
        }
    }
    public func add_NoFocusCandidateFound(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_NoFocusCandidateFound(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_NoFocusCandidateFound(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_NoFocusCandidateFound(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_NoFocusCandidateFound(pThis, token))
        }
    }
    public func remove_NoFocusCandidateFound(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_NoFocusCandidateFound(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PreviewKeyDown(Microsoft.UI.Xaml.Input.KeyEventHandler)
    private func _n_add_PreviewKeyDown(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PreviewKeyDown(pThis, handler, __presult))
        }
    }
    public func add_PreviewKeyDown(handler : Optional<Microsoft.UI.Xaml.Input.IKeyEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PreviewKeyDown(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PreviewKeyDown(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PreviewKeyDown(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PreviewKeyDown(pThis, token))
        }
    }
    public func remove_PreviewKeyDown(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PreviewKeyDown(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PreviewKeyUp(Microsoft.UI.Xaml.Input.KeyEventHandler)
    private func _n_add_PreviewKeyUp(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PreviewKeyUp(pThis, handler, __presult))
        }
    }
    public func add_PreviewKeyUp(handler : Optional<Microsoft.UI.Xaml.Input.IKeyEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PreviewKeyUp(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PreviewKeyUp(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PreviewKeyUp(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PreviewKeyUp(pThis, token))
        }
    }
    public func remove_PreviewKeyUp(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PreviewKeyUp(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_BringIntoViewRequested(Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement,Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>)
    private func _n_add_BringIntoViewRequested(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_BringIntoViewRequested(pThis, handler, __presult))
        }
    }
    public func add_BringIntoViewRequested(handler : Optional<ClosedGenerics.ITypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_BringIntoViewRequested(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_BringIntoViewRequested(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_BringIntoViewRequested(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BringIntoViewRequested(pThis, token))
        }
    }
    public func remove_BringIntoViewRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_BringIntoViewRequested(token);
    }
    // void Measure(Windows.Foundation.Size)
    private func _n_Measure(_ availableSize : _q_CWindows_CFoundation_CSize) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Measure(pThis, availableSize))
        }
    }
    public func Measure(availableSize : Windows.Foundation.Size) throws -> Void {
        try self._n_Measure(availableSize);
    }
    // void Arrange(Windows.Foundation.Rect)
    private func _n_Arrange(_ finalRect : _q_CWindows_CFoundation_CRect) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Arrange(pThis, finalRect))
        }
    }
    public func Arrange(finalRect : Windows.Foundation.Rect) throws -> Void {
        try self._n_Arrange(finalRect);
    }
    // bool CapturePointer(Microsoft.UI.Xaml.Input.Pointer)
    private func _n_CapturePointer(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointer>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CapturePointer(pThis, value, __presult))
        }
    }
    public func CapturePointer(value : Optional<Microsoft.UI.Xaml.Input.IPointer>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_CapturePointer(RawPointer(value), &__result);
        return __result;
    }
    // void ReleasePointerCapture(Microsoft.UI.Xaml.Input.Pointer)
    private func _n_ReleasePointerCapture(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointer>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReleasePointerCapture(pThis, value))
        }
    }
    public func ReleasePointerCapture(value : Optional<Microsoft.UI.Xaml.Input.IPointer>) throws -> Void {
        try self._n_ReleasePointerCapture(RawPointer(value));
    }
    // void ReleasePointerCaptures()
    private func _n_ReleasePointerCaptures() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ReleasePointerCaptures(pThis))
        }
    }
    public func ReleasePointerCaptures() throws -> Void {
        try self._n_ReleasePointerCaptures();
    }
    // void AddHandler(Microsoft.UI.Xaml.RoutedEvent, System.Object, bool)
    private func _n_AddHandler(_ routedEvent : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>, _ handler : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ handledEventsToo : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddHandler(pThis, routedEvent, handler, handledEventsToo))
        }
    }
    public func AddHandler(routedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent>, handler : Optional<WinRT.IInspectable>, handledEventsToo : boolean) throws -> Void {
        try self._n_AddHandler(RawPointer(routedEvent), RawPointer(handler), handledEventsToo);
    }
    // void RemoveHandler(Microsoft.UI.Xaml.RoutedEvent, System.Object)
    private func _n_RemoveHandler(_ routedEvent : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>, _ handler : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveHandler(pThis, routedEvent, handler))
        }
    }
    public func RemoveHandler(routedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent>, handler : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_RemoveHandler(RawPointer(routedEvent), RawPointer(handler));
    }
    // Microsoft.UI.Xaml.Media.GeneralTransform TransformToVisual(Microsoft.UI.Xaml.UIElement)
    private func _n_TransformToVisual(_ visual : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TransformToVisual(pThis, visual, __presult))
        }
    }
    public func TransformToVisual(visual : Optional<Microsoft.UI.Xaml.IUIElement>) throws -> Optional<Microsoft.UI.Xaml.Media.IGeneralTransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform>> = nil;
        try self._n_TransformToVisual(RawPointer(visual), &__result);
        return Microsoft.UI.Xaml.Media.IGeneralTransform(consuming: __result);
    }
    // void InvalidateMeasure()
    private func _n_InvalidateMeasure() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateMeasure(pThis))
        }
    }
    public func InvalidateMeasure() throws -> Void {
        try self._n_InvalidateMeasure();
    }
    // void InvalidateArrange()
    private func _n_InvalidateArrange() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateArrange(pThis))
        }
    }
    public func InvalidateArrange() throws -> Void {
        try self._n_InvalidateArrange();
    }
    // void UpdateLayout()
    private func _n_UpdateLayout() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.UpdateLayout(pThis))
        }
    }
    public func UpdateLayout() throws -> Void {
        try self._n_UpdateLayout();
    }
    // bool CancelDirectManipulations()
    private func _n_CancelDirectManipulations(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CancelDirectManipulations(pThis, __presult))
        }
    }
    public func CancelDirectManipulations() throws -> boolean {
        var __result : boolean = 0;
        try self._n_CancelDirectManipulations(&__result);
        return __result;
    }
    // Windows.Foundation.IAsyncOperation<Windows.ApplicationModel.DataTransfer.DataPackageOperation> StartDragAsync(Microsoft.UI.Input.PointerPoint)
    private func _n_StartDragAsync(_ pointerPoint : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CInput_CIPointerPoint>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartDragAsync(pThis, pointerPoint, __presult))
        }
    }
    public func StartDragAsync(pointerPoint : Optional<Microsoft.UI.Input.IPointerPoint>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation>> = nil;
        try self._n_StartDragAsync(RawPointer(pointerPoint), &__result);
        return ClosedGenerics.IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation(consuming: __result);
    }
    public func StartDrag(pointerPoint : Optional<Microsoft.UI.Input.IPointerPoint>) async throws -> Windows.ApplicationModel.DataTransfer.DataPackageOperation {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.StartDragAsync(pointerPoint: pointerPoint)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // void StartBringIntoView()
    private func _n_StartBringIntoView() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartBringIntoView(pThis))
        }
    }
    public func StartBringIntoView() throws -> Void {
        try self._n_StartBringIntoView();
    }
    // void StartBringIntoView(Microsoft.UI.Xaml.BringIntoViewOptions)
    private func _n_StartBringIntoViewWithOptions(_ options : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBringIntoViewOptions>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartBringIntoViewWithOptions(pThis, options))
        }
    }
    public func StartBringIntoViewWithOptions(options : Optional<Microsoft.UI.Xaml.IBringIntoViewOptions>) throws -> Void {
        try self._n_StartBringIntoViewWithOptions(RawPointer(options));
    }
    // void TryInvokeKeyboardAccelerator(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs)
    private func _n_TryInvokeKeyboardAccelerator(_ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryInvokeKeyboardAccelerator(pThis, args))
        }
    }
    public func TryInvokeKeyboardAccelerator(args : Optional<Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs>) throws -> Void {
        try self._n_TryInvokeKeyboardAccelerator(RawPointer(args));
    }
    // bool Focus(Microsoft.UI.Xaml.FocusState)
    private func _n_Focus(_ value : _q_CMicrosoft_CUI_CXaml_CFocusState, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Focus(pThis, value, __presult))
        }
    }
    public func Focus(value : Microsoft.UI.Xaml.FocusState) throws -> boolean {
        var __result : boolean = 0;
        try self._n_Focus(value, &__result);
        return __result;
    }
    // void StartAnimation(Microsoft.UI.Composition.ICompositionAnimationBase)
    private func _n_StartAnimation(_ animation : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StartAnimation(pThis, animation))
        }
    }
    public func StartAnimation(animation : Optional<Microsoft.UI.Composition.ICompositionAnimationBase>) throws -> Void {
        try self._n_StartAnimation(RawPointer(animation));
    }
    // void StopAnimation(Microsoft.UI.Composition.ICompositionAnimationBase)
    private func _n_StopAnimation(_ animation : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositionAnimationBase>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.StopAnimation(pThis, animation))
        }
    }
    public func StopAnimation(animation : Optional<Microsoft.UI.Composition.ICompositionAnimationBase>) throws -> Void {
        try self._n_StopAnimation(RawPointer(animation));
    }
    public var AccessKey : Swift.String {
        get throws {
            return try get_AccessKey();
        }
    }
    public var AccessKeyScopeOwner : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_AccessKeyScopeOwner();
        }
    }
    public var ActualOffset : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_ActualOffset();
        }
    }
    public var ActualSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
            return try get_ActualSize();
        }
    }
    public var AllowDrop : boolean {
        get throws {
            return try get_AllowDrop();
        }
    }
    public var CacheMode : Optional<Microsoft.UI.Xaml.Media.ICacheMode> {
        get throws {
            return try get_CacheMode();
        }
    }
    public var CanBeScrollAnchor : boolean {
        get throws {
            return try get_CanBeScrollAnchor();
        }
    }
    public var CanDrag : boolean {
        get throws {
            return try get_CanDrag();
        }
    }
    public var CenterPoint : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_CenterPoint();
        }
    }
    public var Clip : Optional<Microsoft.UI.Xaml.Media.IRectangleGeometry> {
        get throws {
            return try get_Clip();
        }
    }
    public var CompositeMode : Microsoft.UI.Xaml.Media.ElementCompositeMode {
        get throws {
            return try get_CompositeMode();
        }
    }
    public var ContextFlyout : Optional<Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase> {
        get throws {
            return try get_ContextFlyout();
        }
    }
    public var DesiredSize : Windows.Foundation.Size {
        get throws {
            return try get_DesiredSize();
        }
    }
    public var ExitDisplayModeOnAccessKeyInvoked : boolean {
        get throws {
            return try get_ExitDisplayModeOnAccessKeyInvoked();
        }
    }
    public var FocusState : Microsoft.UI.Xaml.FocusState {
        get throws {
            return try get_FocusState();
        }
    }
    public var HighContrastAdjustment : Microsoft.UI.Xaml.ElementHighContrastAdjustment {
        get throws {
            return try get_HighContrastAdjustment();
        }
    }
    public var IsAccessKeyScope : boolean {
        get throws {
            return try get_IsAccessKeyScope();
        }
    }
    public var IsDoubleTapEnabled : boolean {
        get throws {
            return try get_IsDoubleTapEnabled();
        }
    }
    public var IsHitTestVisible : boolean {
        get throws {
            return try get_IsHitTestVisible();
        }
    }
    public var IsHoldingEnabled : boolean {
        get throws {
            return try get_IsHoldingEnabled();
        }
    }
    public var IsRightTapEnabled : boolean {
        get throws {
            return try get_IsRightTapEnabled();
        }
    }
    public var IsTabStop : boolean {
        get throws {
            return try get_IsTabStop();
        }
    }
    public var IsTapEnabled : boolean {
        get throws {
            return try get_IsTapEnabled();
        }
    }
    public var KeyTipHorizontalOffset : Swift.Double {
        get throws {
            return try get_KeyTipHorizontalOffset();
        }
    }
    public var KeyTipPlacementMode : Microsoft.UI.Xaml.Input.KeyTipPlacementMode {
        get throws {
            return try get_KeyTipPlacementMode();
        }
    }
    public var KeyTipTarget : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_KeyTipTarget();
        }
    }
    public var KeyTipVerticalOffset : Swift.Double {
        get throws {
            return try get_KeyTipVerticalOffset();
        }
    }
    public var KeyboardAcceleratorPlacementMode : Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode {
        get throws {
            return try get_KeyboardAcceleratorPlacementMode();
        }
    }
    public var KeyboardAcceleratorPlacementTarget : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_KeyboardAcceleratorPlacementTarget();
        }
    }
    public var KeyboardAccelerators : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator> {
        get throws {
            return try get_KeyboardAccelerators();
        }
    }
    public var Lights : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight> {
        get throws {
            return try get_Lights();
        }
    }
    public var ManipulationMode : Microsoft.UI.Xaml.Input.ManipulationModes {
        get throws {
            return try get_ManipulationMode();
        }
    }
    public var Opacity : Swift.Double {
        get throws {
            return try get_Opacity();
        }
    }
    public var OpacityTransition : Optional<Microsoft.UI.Xaml.IScalarTransition> {
        get throws {
            return try get_OpacityTransition();
        }
    }
    public var PointerCaptures : Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer> {
        get throws {
            return try get_PointerCaptures();
        }
    }
    public var Projection : Optional<Microsoft.UI.Xaml.Media.IProjection> {
        get throws {
            return try get_Projection();
        }
    }
    public var RasterizationScale : Swift.Double {
        get throws {
            return try get_RasterizationScale();
        }
    }
    public var RenderSize : Windows.Foundation.Size {
        get throws {
            return try get_RenderSize();
        }
    }
    public var RenderTransform : Optional<Microsoft.UI.Xaml.Media.ITransform> {
        get throws {
            return try get_RenderTransform();
        }
    }
    public var RenderTransformOrigin : Windows.Foundation.Point {
        get throws {
            return try get_RenderTransformOrigin();
        }
    }
    public var Rotation : Swift.Float {
        get throws {
            return try get_Rotation();
        }
    }
    public var RotationAxis : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_RotationAxis();
        }
    }
    public var RotationTransition : Optional<Microsoft.UI.Xaml.IScalarTransition> {
        get throws {
            return try get_RotationTransition();
        }
    }
    public var Scale : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_Scale();
        }
    }
    public var ScaleTransition : Optional<Microsoft.UI.Xaml.IVector3Transition> {
        get throws {
            return try get_ScaleTransition();
        }
    }
    public var Shadow : Optional<Microsoft.UI.Xaml.Media.IShadow> {
        get throws {
            return try get_Shadow();
        }
    }
    public var TabFocusNavigation : Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        get throws {
            return try get_TabFocusNavigation();
        }
    }
    public var TabIndex : Swift.Int32 {
        get throws {
            return try get_TabIndex();
        }
    }
    public var Transform3D : Optional<Microsoft.UI.Xaml.Media.Media3D.ITransform3D> {
        get throws {
            return try get_Transform3D();
        }
    }
    public var TransformMatrix : Windows.Foundation.Numerics.Matrix4x4 {
        get throws {
            return try get_TransformMatrix();
        }
    }
    public var Transitions : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CAnimation_CTransition> {
        get throws {
            return try get_Transitions();
        }
    }
    public var Translation : Windows.Foundation.Numerics.Vector3 {
        get throws {
            return try get_Translation();
        }
    }
    public var TranslationTransition : Optional<Microsoft.UI.Xaml.IVector3Transition> {
        get throws {
            return try get_TranslationTransition();
        }
    }
    public var UseLayoutRounding : boolean {
        get throws {
            return try get_UseLayoutRounding();
        }
    }
    public var UseSystemFocusVisuals : boolean {
        get throws {
            return try get_UseSystemFocusVisuals();
        }
    }
    public var Visibility : Microsoft.UI.Xaml.Visibility {
        get throws {
            return try get_Visibility();
        }
    }
    public var XYFocusDown : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_XYFocusDown();
        }
    }
    public var XYFocusDownNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
            return try get_XYFocusDownNavigationStrategy();
        }
    }
    public var XYFocusKeyboardNavigation : Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode {
        get throws {
            return try get_XYFocusKeyboardNavigation();
        }
    }
    public var XYFocusLeft : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_XYFocusLeft();
        }
    }
    public var XYFocusLeftNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
            return try get_XYFocusLeftNavigationStrategy();
        }
    }
    public var XYFocusRight : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_XYFocusRight();
        }
    }
    public var XYFocusRightNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
            return try get_XYFocusRightNavigationStrategy();
        }
    }
    public var XYFocusUp : Optional<Microsoft.UI.Xaml.IDependencyObject> {
        get throws {
            return try get_XYFocusUp();
        }
    }
    public var XYFocusUpNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
            return try get_XYFocusUpNavigationStrategy();
        }
    }
    public var XamlRoot : Optional<Microsoft.UI.Xaml.IXamlRoot> {
        get throws {
            return try get_XamlRoot();
        }
    }
} // IUIElement


// type: Microsoft.UI.Xaml.IUIElementOverrides
// interface type
open class IUIElementOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9034f41e, Data2: 0xab7b, Data3 : 0x59e7, Data4 : (0x81, 0x68, 0x50, 0xde, 0x6b, 0x68, 0x9d, 0xde)) }
    // Microsoft.UI.Xaml.Automation.Peers.AutomationPeer OnCreateAutomationPeer()
    private func _n_OnCreateAutomationPeer(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnCreateAutomationPeer(pThis, __presult))
        }
    }
    public func OnCreateAutomationPeer() throws -> Optional<Microsoft.UI.Xaml.Automation.Peers.IAutomationPeer> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer>> = nil;
        try self._n_OnCreateAutomationPeer(&__result);
        return Microsoft.UI.Xaml.Automation.Peers.IAutomationPeer(consuming: __result);
    }
    // void OnDisconnectVisualChildren()
    private func _n_OnDisconnectVisualChildren() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnDisconnectVisualChildren(pThis))
        }
    }
    public func OnDisconnectVisualChildren() throws -> Void {
        try self._n_OnDisconnectVisualChildren();
    }
    // Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IIterable<Windows.Foundation.Point>> FindSubElementsForTouchTargeting(Windows.Foundation.Point, Windows.Foundation.Rect)
    private func _n_FindSubElementsForTouchTargeting(_ point : _q_CWindows_CFoundation_CPoint, _ boundingRect : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FindSubElementsForTouchTargeting(pThis, point, boundingRect, __presult))
        }
    }
    public func FindSubElementsForTouchTargeting(point : Windows.Foundation.Point, boundingRect : Windows.Foundation.Rect) throws -> Optional<ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint>> = nil;
        try self._n_FindSubElementsForTouchTargeting(point, boundingRect, &__result);
        return ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint(consuming: __result);
    }
    // Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.DependencyObject> GetChildrenInTabFocusOrder()
    private func _n_GetChildrenInTabFocusOrder(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetChildrenInTabFocusOrder(pThis, __presult))
        }
    }
    public func GetChildrenInTabFocusOrder() throws -> Optional<ClosedGenerics.IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject>> = nil;
        try self._n_GetChildrenInTabFocusOrder(&__result);
        return ClosedGenerics.IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject(consuming: __result);
    }
    // void OnKeyboardAcceleratorInvoked(Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs)
    private func _n_OnKeyboardAcceleratorInvoked(_ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnKeyboardAcceleratorInvoked(pThis, args))
        }
    }
    public func OnKeyboardAcceleratorInvoked(args : Optional<Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs>) throws -> Void {
        try self._n_OnKeyboardAcceleratorInvoked(RawPointer(args));
    }
    // void OnProcessKeyboardAccelerators(Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs)
    private func _n_OnProcessKeyboardAccelerators(_ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnProcessKeyboardAccelerators(pThis, args))
        }
    }
    public func OnProcessKeyboardAccelerators(args : Optional<Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs>) throws -> Void {
        try self._n_OnProcessKeyboardAccelerators(RawPointer(args));
    }
    // void OnBringIntoViewRequested(Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs)
    private func _n_OnBringIntoViewRequested(_ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnBringIntoViewRequested(pThis, e))
        }
    }
    public func OnBringIntoViewRequested(e : Optional<Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs>) throws -> Void {
        try self._n_OnBringIntoViewRequested(RawPointer(e));
    }
    // void PopulatePropertyInfoOverride(System.String, Microsoft.UI.Composition.AnimationPropertyInfo)
    private func _n_PopulatePropertyInfoOverride(_ propertyName : Optional<HSTRING>, _ animationPropertyInfo : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PopulatePropertyInfoOverride(pThis, propertyName, animationPropertyInfo))
        }
    }
    public func PopulatePropertyInfoOverride(propertyName : Swift.String, animationPropertyInfo : Optional<Microsoft.UI.Composition.IAnimationPropertyInfo>) throws -> Void {
        let __hstr_propertyName = try HString(propertyName);
        return try withExtendedLifetime(__hstr_propertyName) {
        try self._n_PopulatePropertyInfoOverride(__hstr_propertyName.Raw(), RawPointer(animationPropertyInfo));
        }
    }
} // IUIElementOverrides


// type: Microsoft.UI.Xaml.IUIElementProtected
// interface type
open class IUIElementProtected
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8f69b9e9, Data2: 0x1f00, Data3 : 0x5834, Data4 : (0x9b, 0xf1, 0xa9, 0x25, 0x7b, 0xed, 0x39, 0xf0)) }
    // [IsSpecialName] Microsoft.UI.Input.InputCursor get_ProtectedCursor()
    private func _n_get_ProtectedCursor(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CInput_CIInputCursor>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProtectedCursor(pThis, __presult))
        }
    }
    public func get_ProtectedCursor() throws -> Optional<Microsoft.UI.Input.IInputCursor> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CInput_CIInputCursor>> = nil;
        try self._n_get_ProtectedCursor(&__result);
        return Microsoft.UI.Input.IInputCursor(consuming: __result);
    }
    // [IsSpecialName] void put_ProtectedCursor(Microsoft.UI.Input.InputCursor)
    private func _n_put_ProtectedCursor(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CInput_CIInputCursor>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementProtected.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ProtectedCursor(pThis, value))
        }
    }
    public func put_ProtectedCursor(value : Optional<Microsoft.UI.Input.IInputCursor>) throws -> Void {
        try self._n_put_ProtectedCursor(RawPointer(value));
    }
    public var ProtectedCursor : Optional<Microsoft.UI.Input.IInputCursor> {
        get throws {
            return try get_ProtectedCursor();
        }
    }
} // IUIElementProtected


// type: Microsoft.UI.Xaml.IUIElementStatics
// interface type
open class IUIElementStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd2921d87, Data2: 0x3584, Data3 : 0x5e22, Data4 : (0x8a, 0x3a, 0xc2, 0xc7, 0x8d, 0xab, 0x4f, 0x6e)) }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_KeyDownEvent()
    private func _n_get_KeyDownEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyDownEvent(pThis, __presult))
        }
    }
    public func get_KeyDownEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_KeyDownEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_KeyUpEvent()
    private func _n_get_KeyUpEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyUpEvent(pThis, __presult))
        }
    }
    public func get_KeyUpEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_KeyUpEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerEnteredEvent()
    private func _n_get_PointerEnteredEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerEnteredEvent(pThis, __presult))
        }
    }
    public func get_PointerEnteredEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerEnteredEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerPressedEvent()
    private func _n_get_PointerPressedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerPressedEvent(pThis, __presult))
        }
    }
    public func get_PointerPressedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerPressedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerMovedEvent()
    private func _n_get_PointerMovedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerMovedEvent(pThis, __presult))
        }
    }
    public func get_PointerMovedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerMovedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerReleasedEvent()
    private func _n_get_PointerReleasedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerReleasedEvent(pThis, __presult))
        }
    }
    public func get_PointerReleasedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerReleasedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerExitedEvent()
    private func _n_get_PointerExitedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerExitedEvent(pThis, __presult))
        }
    }
    public func get_PointerExitedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerExitedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerCaptureLostEvent()
    private func _n_get_PointerCaptureLostEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerCaptureLostEvent(pThis, __presult))
        }
    }
    public func get_PointerCaptureLostEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerCaptureLostEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerCanceledEvent()
    private func _n_get_PointerCanceledEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerCanceledEvent(pThis, __presult))
        }
    }
    public func get_PointerCanceledEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerCanceledEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PointerWheelChangedEvent()
    private func _n_get_PointerWheelChangedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerWheelChangedEvent(pThis, __presult))
        }
    }
    public func get_PointerWheelChangedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PointerWheelChangedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_TappedEvent()
    private func _n_get_TappedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TappedEvent(pThis, __presult))
        }
    }
    public func get_TappedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_TappedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_DoubleTappedEvent()
    private func _n_get_DoubleTappedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DoubleTappedEvent(pThis, __presult))
        }
    }
    public func get_DoubleTappedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_DoubleTappedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_HoldingEvent()
    private func _n_get_HoldingEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HoldingEvent(pThis, __presult))
        }
    }
    public func get_HoldingEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_HoldingEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_RightTappedEvent()
    private func _n_get_RightTappedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RightTappedEvent(pThis, __presult))
        }
    }
    public func get_RightTappedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_RightTappedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_ManipulationStartingEvent()
    private func _n_get_ManipulationStartingEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationStartingEvent(pThis, __presult))
        }
    }
    public func get_ManipulationStartingEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_ManipulationStartingEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_ManipulationInertiaStartingEvent()
    private func _n_get_ManipulationInertiaStartingEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationInertiaStartingEvent(pThis, __presult))
        }
    }
    public func get_ManipulationInertiaStartingEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_ManipulationInertiaStartingEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_ManipulationStartedEvent()
    private func _n_get_ManipulationStartedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationStartedEvent(pThis, __presult))
        }
    }
    public func get_ManipulationStartedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_ManipulationStartedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_ManipulationDeltaEvent()
    private func _n_get_ManipulationDeltaEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationDeltaEvent(pThis, __presult))
        }
    }
    public func get_ManipulationDeltaEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_ManipulationDeltaEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_ManipulationCompletedEvent()
    private func _n_get_ManipulationCompletedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationCompletedEvent(pThis, __presult))
        }
    }
    public func get_ManipulationCompletedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_ManipulationCompletedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_DragEnterEvent()
    private func _n_get_DragEnterEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DragEnterEvent(pThis, __presult))
        }
    }
    public func get_DragEnterEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_DragEnterEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_DragLeaveEvent()
    private func _n_get_DragLeaveEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DragLeaveEvent(pThis, __presult))
        }
    }
    public func get_DragLeaveEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_DragLeaveEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_DragOverEvent()
    private func _n_get_DragOverEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DragOverEvent(pThis, __presult))
        }
    }
    public func get_DragOverEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_DragOverEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_DropEvent()
    private func _n_get_DropEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DropEvent(pThis, __presult))
        }
    }
    public func get_DropEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_DropEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_GettingFocusEvent()
    private func _n_get_GettingFocusEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GettingFocusEvent(pThis, __presult))
        }
    }
    public func get_GettingFocusEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_GettingFocusEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_LosingFocusEvent()
    private func _n_get_LosingFocusEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LosingFocusEvent(pThis, __presult))
        }
    }
    public func get_LosingFocusEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_LosingFocusEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_NoFocusCandidateFoundEvent()
    private func _n_get_NoFocusCandidateFoundEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_NoFocusCandidateFoundEvent(pThis, __presult))
        }
    }
    public func get_NoFocusCandidateFoundEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_NoFocusCandidateFoundEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PreviewKeyDownEvent()
    private func _n_get_PreviewKeyDownEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviewKeyDownEvent(pThis, __presult))
        }
    }
    public func get_PreviewKeyDownEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PreviewKeyDownEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_CharacterReceivedEvent()
    private func _n_get_CharacterReceivedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CharacterReceivedEvent(pThis, __presult))
        }
    }
    public func get_CharacterReceivedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_CharacterReceivedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_PreviewKeyUpEvent()
    private func _n_get_PreviewKeyUpEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreviewKeyUpEvent(pThis, __presult))
        }
    }
    public func get_PreviewKeyUpEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_PreviewKeyUpEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_BringIntoViewRequestedEvent()
    private func _n_get_BringIntoViewRequestedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BringIntoViewRequestedEvent(pThis, __presult))
        }
    }
    public func get_BringIntoViewRequestedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_BringIntoViewRequestedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.RoutedEvent get_ContextRequestedEvent()
    private func _n_get_ContextRequestedEvent(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContextRequestedEvent(pThis, __presult))
        }
    }
    public func get_ContextRequestedEvent() throws -> Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEvent>> = nil;
        try self._n_get_ContextRequestedEvent(&__result);
        return Microsoft.UI.Xaml.IRoutedEvent(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AllowDropProperty()
    private func _n_get_AllowDropProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AllowDropProperty(pThis, __presult))
        }
    }
    public func get_AllowDropProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AllowDropProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OpacityProperty()
    private func _n_get_OpacityProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpacityProperty(pThis, __presult))
        }
    }
    public func get_OpacityProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OpacityProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ClipProperty()
    private func _n_get_ClipProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClipProperty(pThis, __presult))
        }
    }
    public func get_ClipProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ClipProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RenderTransformProperty()
    private func _n_get_RenderTransformProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderTransformProperty(pThis, __presult))
        }
    }
    public func get_RenderTransformProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RenderTransformProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ProjectionProperty()
    private func _n_get_ProjectionProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ProjectionProperty(pThis, __presult))
        }
    }
    public func get_ProjectionProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ProjectionProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_Transform3DProperty()
    private func _n_get_Transform3DProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform3DProperty(pThis, __presult))
        }
    }
    public func get_Transform3DProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_Transform3DProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RenderTransformOriginProperty()
    private func _n_get_RenderTransformOriginProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderTransformOriginProperty(pThis, __presult))
        }
    }
    public func get_RenderTransformOriginProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RenderTransformOriginProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsHitTestVisibleProperty()
    private func _n_get_IsHitTestVisibleProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHitTestVisibleProperty(pThis, __presult))
        }
    }
    public func get_IsHitTestVisibleProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsHitTestVisibleProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_VisibilityProperty()
    private func _n_get_VisibilityProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_VisibilityProperty(pThis, __presult))
        }
    }
    public func get_VisibilityProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_VisibilityProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_UseLayoutRoundingProperty()
    private func _n_get_UseLayoutRoundingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseLayoutRoundingProperty(pThis, __presult))
        }
    }
    public func get_UseLayoutRoundingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_UseLayoutRoundingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TransitionsProperty()
    private func _n_get_TransitionsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransitionsProperty(pThis, __presult))
        }
    }
    public func get_TransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TransitionsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CacheModeProperty()
    private func _n_get_CacheModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheModeProperty(pThis, __presult))
        }
    }
    public func get_CacheModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CacheModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTapEnabledProperty()
    private func _n_get_IsTapEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTapEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsTapEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTapEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsDoubleTapEnabledProperty()
    private func _n_get_IsDoubleTapEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDoubleTapEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsDoubleTapEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsDoubleTapEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CanDragProperty()
    private func _n_get_CanDragProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanDragProperty(pThis, __presult))
        }
    }
    public func get_CanDragProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CanDragProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsRightTapEnabledProperty()
    private func _n_get_IsRightTapEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsRightTapEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsRightTapEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsRightTapEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsHoldingEnabledProperty()
    private func _n_get_IsHoldingEnabledProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsHoldingEnabledProperty(pThis, __presult))
        }
    }
    public func get_IsHoldingEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsHoldingEnabledProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ManipulationModeProperty()
    private func _n_get_ManipulationModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ManipulationModeProperty(pThis, __presult))
        }
    }
    public func get_ManipulationModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ManipulationModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PointerCapturesProperty()
    private func _n_get_PointerCapturesProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PointerCapturesProperty(pThis, __presult))
        }
    }
    public func get_PointerCapturesProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PointerCapturesProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ContextFlyoutProperty()
    private func _n_get_ContextFlyoutProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContextFlyoutProperty(pThis, __presult))
        }
    }
    public func get_ContextFlyoutProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ContextFlyoutProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CompositeModeProperty()
    private func _n_get_CompositeModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CompositeModeProperty(pThis, __presult))
        }
    }
    public func get_CompositeModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CompositeModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_LightsProperty()
    private func _n_get_LightsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightsProperty(pThis, __presult))
        }
    }
    public func get_LightsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_LightsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CanBeScrollAnchorProperty()
    private func _n_get_CanBeScrollAnchorProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CanBeScrollAnchorProperty(pThis, __presult))
        }
    }
    public func get_CanBeScrollAnchorProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CanBeScrollAnchorProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ExitDisplayModeOnAccessKeyInvokedProperty()
    private func _n_get_ExitDisplayModeOnAccessKeyInvokedProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExitDisplayModeOnAccessKeyInvokedProperty(pThis, __presult))
        }
    }
    public func get_ExitDisplayModeOnAccessKeyInvokedProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ExitDisplayModeOnAccessKeyInvokedProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsAccessKeyScopeProperty()
    private func _n_get_IsAccessKeyScopeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAccessKeyScopeProperty(pThis, __presult))
        }
    }
    public func get_IsAccessKeyScopeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsAccessKeyScopeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AccessKeyScopeOwnerProperty()
    private func _n_get_AccessKeyScopeOwnerProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKeyScopeOwnerProperty(pThis, __presult))
        }
    }
    public func get_AccessKeyScopeOwnerProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AccessKeyScopeOwnerProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AccessKeyProperty()
    private func _n_get_AccessKeyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AccessKeyProperty(pThis, __presult))
        }
    }
    public func get_AccessKeyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AccessKeyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_KeyTipPlacementModeProperty()
    private func _n_get_KeyTipPlacementModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipPlacementModeProperty(pThis, __presult))
        }
    }
    public func get_KeyTipPlacementModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_KeyTipPlacementModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_KeyTipHorizontalOffsetProperty()
    private func _n_get_KeyTipHorizontalOffsetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipHorizontalOffsetProperty(pThis, __presult))
        }
    }
    public func get_KeyTipHorizontalOffsetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_KeyTipHorizontalOffsetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_KeyTipVerticalOffsetProperty()
    private func _n_get_KeyTipVerticalOffsetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipVerticalOffsetProperty(pThis, __presult))
        }
    }
    public func get_KeyTipVerticalOffsetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_KeyTipVerticalOffsetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_KeyTipTargetProperty()
    private func _n_get_KeyTipTargetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyTipTargetProperty(pThis, __presult))
        }
    }
    public func get_KeyTipTargetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_KeyTipTargetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusKeyboardNavigationProperty()
    private func _n_get_XYFocusKeyboardNavigationProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusKeyboardNavigationProperty(pThis, __presult))
        }
    }
    public func get_XYFocusKeyboardNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusKeyboardNavigationProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusUpNavigationStrategyProperty()
    private func _n_get_XYFocusUpNavigationStrategyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUpNavigationStrategyProperty(pThis, __presult))
        }
    }
    public func get_XYFocusUpNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusUpNavigationStrategyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusDownNavigationStrategyProperty()
    private func _n_get_XYFocusDownNavigationStrategyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDownNavigationStrategyProperty(pThis, __presult))
        }
    }
    public func get_XYFocusDownNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusDownNavigationStrategyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusLeftNavigationStrategyProperty()
    private func _n_get_XYFocusLeftNavigationStrategyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeftNavigationStrategyProperty(pThis, __presult))
        }
    }
    public func get_XYFocusLeftNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusLeftNavigationStrategyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusRightNavigationStrategyProperty()
    private func _n_get_XYFocusRightNavigationStrategyProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRightNavigationStrategyProperty(pThis, __presult))
        }
    }
    public func get_XYFocusRightNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusRightNavigationStrategyProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_KeyboardAcceleratorPlacementTargetProperty()
    private func _n_get_KeyboardAcceleratorPlacementTargetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorPlacementTargetProperty(pThis, __presult))
        }
    }
    public func get_KeyboardAcceleratorPlacementTargetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_KeyboardAcceleratorPlacementTargetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_KeyboardAcceleratorPlacementModeProperty()
    private func _n_get_KeyboardAcceleratorPlacementModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyboardAcceleratorPlacementModeProperty(pThis, __presult))
        }
    }
    public func get_KeyboardAcceleratorPlacementModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_KeyboardAcceleratorPlacementModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_HighContrastAdjustmentProperty()
    private func _n_get_HighContrastAdjustmentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighContrastAdjustmentProperty(pThis, __presult))
        }
    }
    public func get_HighContrastAdjustmentProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_HighContrastAdjustmentProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TabFocusNavigationProperty()
    private func _n_get_TabFocusNavigationProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabFocusNavigationProperty(pThis, __presult))
        }
    }
    public func get_TabFocusNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TabFocusNavigationProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ShadowProperty()
    private func _n_get_ShadowProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShadowProperty(pThis, __presult))
        }
    }
    public func get_ShadowProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ShadowProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_FocusStateProperty()
    private func _n_get_FocusStateProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusStateProperty(pThis, __presult))
        }
    }
    public func get_FocusStateProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_FocusStateProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_UseSystemFocusVisualsProperty()
    private func _n_get_UseSystemFocusVisualsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSystemFocusVisualsProperty(pThis, __presult))
        }
    }
    public func get_UseSystemFocusVisualsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_UseSystemFocusVisualsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusLeftProperty()
    private func _n_get_XYFocusLeftProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusLeftProperty(pThis, __presult))
        }
    }
    public func get_XYFocusLeftProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusLeftProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusRightProperty()
    private func _n_get_XYFocusRightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusRightProperty(pThis, __presult))
        }
    }
    public func get_XYFocusRightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusRightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusUpProperty()
    private func _n_get_XYFocusUpProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusUpProperty(pThis, __presult))
        }
    }
    public func get_XYFocusUpProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusUpProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_XYFocusDownProperty()
    private func _n_get_XYFocusDownProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_XYFocusDownProperty(pThis, __presult))
        }
    }
    public func get_XYFocusDownProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_XYFocusDownProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsTabStopProperty()
    private func _n_get_IsTabStopProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsTabStopProperty(pThis, __presult))
        }
    }
    public func get_IsTabStopProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsTabStopProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TabIndexProperty()
    private func _n_get_TabIndexProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TabIndexProperty(pThis, __presult))
        }
    }
    public func get_TabIndexProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TabIndexProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // bool TryStartDirectManipulation(Microsoft.UI.Xaml.Input.Pointer)
    private func _n_TryStartDirectManipulation(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointer>>, _ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.TryStartDirectManipulation(pThis, value, __presult))
        }
    }
    public func TryStartDirectManipulation(value : Optional<Microsoft.UI.Xaml.Input.IPointer>) throws -> boolean {
        var __result : boolean = 0;
        try self._n_TryStartDirectManipulation(RawPointer(value), &__result);
        return __result;
    }
    // void RegisterAsScrollPort(Microsoft.UI.Xaml.UIElement)
    private func _n_RegisterAsScrollPort(_ element : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUIElementStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RegisterAsScrollPort(pThis, element))
        }
    }
    public func RegisterAsScrollPort(element : Optional<Microsoft.UI.Xaml.IUIElement>) throws -> Void {
        try self._n_RegisterAsScrollPort(RawPointer(element));
    }
    public var AccessKeyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AccessKeyProperty();
        }
    }
    public var AccessKeyScopeOwnerProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AccessKeyScopeOwnerProperty();
        }
    }
    public var AllowDropProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AllowDropProperty();
        }
    }
    public var BringIntoViewRequestedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_BringIntoViewRequestedEvent();
        }
    }
    public var CacheModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CacheModeProperty();
        }
    }
    public var CanBeScrollAnchorProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CanBeScrollAnchorProperty();
        }
    }
    public var CanDragProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CanDragProperty();
        }
    }
    public var CharacterReceivedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_CharacterReceivedEvent();
        }
    }
    public var ClipProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ClipProperty();
        }
    }
    public var CompositeModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CompositeModeProperty();
        }
    }
    public var ContextFlyoutProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ContextFlyoutProperty();
        }
    }
    public var ContextRequestedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_ContextRequestedEvent();
        }
    }
    public var DoubleTappedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_DoubleTappedEvent();
        }
    }
    public var DragEnterEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_DragEnterEvent();
        }
    }
    public var DragLeaveEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_DragLeaveEvent();
        }
    }
    public var DragOverEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_DragOverEvent();
        }
    }
    public var DropEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_DropEvent();
        }
    }
    public var ExitDisplayModeOnAccessKeyInvokedProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ExitDisplayModeOnAccessKeyInvokedProperty();
        }
    }
    public var FocusStateProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_FocusStateProperty();
        }
    }
    public var GettingFocusEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_GettingFocusEvent();
        }
    }
    public var HighContrastAdjustmentProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_HighContrastAdjustmentProperty();
        }
    }
    public var HoldingEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_HoldingEvent();
        }
    }
    public var IsAccessKeyScopeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsAccessKeyScopeProperty();
        }
    }
    public var IsDoubleTapEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsDoubleTapEnabledProperty();
        }
    }
    public var IsHitTestVisibleProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsHitTestVisibleProperty();
        }
    }
    public var IsHoldingEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsHoldingEnabledProperty();
        }
    }
    public var IsRightTapEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsRightTapEnabledProperty();
        }
    }
    public var IsTabStopProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTabStopProperty();
        }
    }
    public var IsTapEnabledProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsTapEnabledProperty();
        }
    }
    public var KeyDownEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_KeyDownEvent();
        }
    }
    public var KeyTipHorizontalOffsetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_KeyTipHorizontalOffsetProperty();
        }
    }
    public var KeyTipPlacementModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_KeyTipPlacementModeProperty();
        }
    }
    public var KeyTipTargetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_KeyTipTargetProperty();
        }
    }
    public var KeyTipVerticalOffsetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_KeyTipVerticalOffsetProperty();
        }
    }
    public var KeyUpEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_KeyUpEvent();
        }
    }
    public var KeyboardAcceleratorPlacementModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_KeyboardAcceleratorPlacementModeProperty();
        }
    }
    public var KeyboardAcceleratorPlacementTargetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_KeyboardAcceleratorPlacementTargetProperty();
        }
    }
    public var LightsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_LightsProperty();
        }
    }
    public var LosingFocusEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_LosingFocusEvent();
        }
    }
    public var ManipulationCompletedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_ManipulationCompletedEvent();
        }
    }
    public var ManipulationDeltaEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_ManipulationDeltaEvent();
        }
    }
    public var ManipulationInertiaStartingEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_ManipulationInertiaStartingEvent();
        }
    }
    public var ManipulationModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ManipulationModeProperty();
        }
    }
    public var ManipulationStartedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_ManipulationStartedEvent();
        }
    }
    public var ManipulationStartingEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_ManipulationStartingEvent();
        }
    }
    public var NoFocusCandidateFoundEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_NoFocusCandidateFoundEvent();
        }
    }
    public var OpacityProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OpacityProperty();
        }
    }
    public var PointerCanceledEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerCanceledEvent();
        }
    }
    public var PointerCaptureLostEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerCaptureLostEvent();
        }
    }
    public var PointerCapturesProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PointerCapturesProperty();
        }
    }
    public var PointerEnteredEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerEnteredEvent();
        }
    }
    public var PointerExitedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerExitedEvent();
        }
    }
    public var PointerMovedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerMovedEvent();
        }
    }
    public var PointerPressedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerPressedEvent();
        }
    }
    public var PointerReleasedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerReleasedEvent();
        }
    }
    public var PointerWheelChangedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PointerWheelChangedEvent();
        }
    }
    public var PreviewKeyDownEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PreviewKeyDownEvent();
        }
    }
    public var PreviewKeyUpEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_PreviewKeyUpEvent();
        }
    }
    public var ProjectionProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ProjectionProperty();
        }
    }
    public var RenderTransformOriginProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RenderTransformOriginProperty();
        }
    }
    public var RenderTransformProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RenderTransformProperty();
        }
    }
    public var RightTappedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_RightTappedEvent();
        }
    }
    public var ShadowProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ShadowProperty();
        }
    }
    public var TabFocusNavigationProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TabFocusNavigationProperty();
        }
    }
    public var TabIndexProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TabIndexProperty();
        }
    }
    public var TappedEvent : Optional<Microsoft.UI.Xaml.IRoutedEvent> {
        get throws {
            return try get_TappedEvent();
        }
    }
    public var Transform3DProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_Transform3DProperty();
        }
    }
    public var TransitionsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TransitionsProperty();
        }
    }
    public var UseLayoutRoundingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_UseLayoutRoundingProperty();
        }
    }
    public var UseSystemFocusVisualsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_UseSystemFocusVisualsProperty();
        }
    }
    public var VisibilityProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_VisibilityProperty();
        }
    }
    public var XYFocusDownNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusDownNavigationStrategyProperty();
        }
    }
    public var XYFocusDownProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusDownProperty();
        }
    }
    public var XYFocusKeyboardNavigationProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusKeyboardNavigationProperty();
        }
    }
    public var XYFocusLeftNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusLeftNavigationStrategyProperty();
        }
    }
    public var XYFocusLeftProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusLeftProperty();
        }
    }
    public var XYFocusRightNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusRightNavigationStrategyProperty();
        }
    }
    public var XYFocusRightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusRightProperty();
        }
    }
    public var XYFocusUpNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusUpNavigationStrategyProperty();
        }
    }
    public var XYFocusUpProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_XYFocusUpProperty();
        }
    }
} // IUIElementStatics


// type: Microsoft.UI.Xaml.IUnhandledExceptionEventArgs
// interface type
open class IUnhandledExceptionEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x59eaeba9, Data2: 0x8f9c, Data3 : 0x5be7, Data4 : (0x9b, 0x3b, 0x82, 0x09, 0x60, 0xfa, 0xa2, 0x20)) }
// method not needed: get_Exception
// method not needed: get_Message
// method not needed: get_Handled
// method not needed: put_Handled
} // IUnhandledExceptionEventArgs


// type: Microsoft.UI.Xaml.IVector3Transition
// interface type
open class IVector3Transition
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0c408bb9, Data2: 0xf9a2, Data3 : 0x55d7, Data4 : (0x8a, 0xed, 0x14, 0x3d, 0x36, 0xd6, 0x03, 0xf2)) }
// method not needed: get_Duration
// method not needed: put_Duration
// method not needed: get_Components
// method not needed: put_Components
} // IVector3Transition


// type: Microsoft.UI.Xaml.IVector3TransitionFactory
// interface type
// COMPOSITION INTERFACE
open class IVector3TransitionFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa3a084fc, Data2: 0xb965, Data3 : 0x534b, Data4 : (0x90, 0x0f, 0x78, 0xe2, 0x88, 0x12, 0x92, 0x32)) }
    // Microsoft.UI.Xaml.Vector3Transition CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIVector3TransitionFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IVector3Transition> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIVector3Transition>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IVector3Transition(consuming: __result);
    }
} // IVector3TransitionFactory


// type: Microsoft.UI.Xaml.IWindow
// interface type
open class IWindow
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61f0ec79, Data2: 0x5d52, Data3 : 0x56b5, Data4 : (0x86, 0xfb, 0x40, 0xfa, 0x4a, 0xf2, 0x88, 0xb0)) }
    // [IsSpecialName] Windows.Foundation.Rect get_Bounds()
    private func _n_get_Bounds(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CRect>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, __presult))
        }
    }
    public func get_Bounds() throws -> Windows.Foundation.Rect {
        var __result : _q_CWindows_CFoundation_CRect = _q_CWindows_CFoundation_CRect(X: 0, Y: 0, Width: 0, Height: 0);
        try self._n_get_Bounds(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Visible()
    private func _n_get_Visible(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Visible(pThis, __presult))
        }
    }
    public func get_Visible() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Visible(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.UIElement get_Content()
    private func _n_get_Content(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Content(pThis, __presult))
        }
    }
    public func get_Content() throws -> Optional<Microsoft.UI.Xaml.IUIElement> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>> = nil;
        try self._n_get_Content(&__result);
        return Microsoft.UI.Xaml.IUIElement(consuming: __result);
    }
    // [IsSpecialName] void put_Content(Microsoft.UI.Xaml.UIElement)
    private func _n_put_Content(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Content(pThis, value))
        }
    }
    public func put_Content(value : Optional<Microsoft.UI.Xaml.IUIElement>) throws -> Void {
        try self._n_put_Content(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Core.CoreWindow get_CoreWindow()
    private func _n_get_CoreWindow(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreWindow>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CoreWindow(pThis, __presult))
        }
    }
    public func get_CoreWindow() throws -> Optional<Windows.UI.Core.ICoreWindow> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreWindow>> = nil;
        try self._n_get_CoreWindow(&__result);
        return Windows.UI.Core.ICoreWindow(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Composition.Compositor get_Compositor()
    private func _n_get_Compositor(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositor>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Compositor(pThis, __presult))
        }
    }
    public func get_Compositor() throws -> Optional<Microsoft.UI.Composition.ICompositor> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CICompositor>> = nil;
        try self._n_get_Compositor(&__result);
        return Microsoft.UI.Composition.ICompositor(consuming: __result);
    }
    // [IsSpecialName] Windows.UI.Core.CoreDispatcher get_Dispatcher()
    private func _n_get_Dispatcher(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreDispatcher>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dispatcher(pThis, __presult))
        }
    }
    public func get_Dispatcher() throws -> Optional<Windows.UI.Core.ICoreDispatcher> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CCore_CICoreDispatcher>> = nil;
        try self._n_get_Dispatcher(&__result);
        return Windows.UI.Core.ICoreDispatcher(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Dispatching.DispatcherQueue get_DispatcherQueue()
    private func _n_get_DispatcherQueue(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DispatcherQueue(pThis, __presult))
        }
    }
    public func get_DispatcherQueue() throws -> Optional<Microsoft.UI.Dispatching.IDispatcherQueue> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CDispatching_CIDispatcherQueue>> = nil;
        try self._n_get_DispatcherQueue(&__result);
        return Microsoft.UI.Dispatching.IDispatcherQueue(consuming: __result);
    }
    // [IsSpecialName] System.String get_Title()
    private func _n_get_Title(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Title(pThis, __presult))
        }
    }
    public func get_Title() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Title(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] void put_Title(System.String)
    private func _n_put_Title(_ value : Optional<HSTRING>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Title(pThis, value))
        }
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        try self._n_put_Title(__hstr_value.Raw());
        }
    }
    // [IsSpecialName] bool get_ExtendsContentIntoTitleBar()
    private func _n_get_ExtendsContentIntoTitleBar(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendsContentIntoTitleBar(pThis, __presult))
        }
    }
    public func get_ExtendsContentIntoTitleBar() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_ExtendsContentIntoTitleBar(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ExtendsContentIntoTitleBar(bool)
    private func _n_put_ExtendsContentIntoTitleBar(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendsContentIntoTitleBar(pThis, value))
        }
    }
    public func put_ExtendsContentIntoTitleBar(value : boolean) throws -> Void {
        try self._n_put_ExtendsContentIntoTitleBar(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Activated(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowActivatedEventArgs>)
    private func _n_add_Activated(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Activated(pThis, handler, __presult))
        }
    }
    public func add_Activated(handler : Optional<ClosedGenerics.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Activated(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Activated(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Activated(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Activated(pThis, token))
        }
    }
    public func remove_Activated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Activated(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Closed(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowEventArgs>)
    private func _n_add_Closed(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Closed(pThis, handler, __presult))
        }
    }
    public func add_Closed(handler : Optional<ClosedGenerics.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Closed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Closed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_Closed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Closed(pThis, token))
        }
    }
    public func remove_Closed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Closed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SizeChanged(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowSizeChangedEventArgs>)
    private func _n_add_SizeChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SizeChanged(pThis, handler, __presult))
        }
    }
    public func add_SizeChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SizeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SizeChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_SizeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SizeChanged(pThis, token))
        }
    }
    public func remove_SizeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SizeChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_VisibilityChanged(Windows.Foundation.TypedEventHandler<System.Object,Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>)
    private func _n_add_VisibilityChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_VisibilityChanged(pThis, handler, __presult))
        }
    }
    public func add_VisibilityChanged(handler : Optional<ClosedGenerics.ITypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_VisibilityChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_VisibilityChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_VisibilityChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_VisibilityChanged(pThis, token))
        }
    }
    public func remove_VisibilityChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_VisibilityChanged(token);
    }
    // void Activate()
    private func _n_Activate() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Activate(pThis))
        }
    }
    public func Activate() throws -> Void {
        try self._n_Activate();
    }
    // void Close()
    private func _n_Close() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Close(pThis))
        }
    }
    public func Close() throws -> Void {
        try self._n_Close();
    }
    // void SetTitleBar(Microsoft.UI.Xaml.UIElement)
    private func _n_SetTitleBar(_ titleBar : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUIElement>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindow.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetTitleBar(pThis, titleBar))
        }
    }
    public func SetTitleBar(titleBar : Optional<Microsoft.UI.Xaml.IUIElement>) throws -> Void {
        try self._n_SetTitleBar(RawPointer(titleBar));
    }
    public var Bounds : Windows.Foundation.Rect {
        get throws {
            return try get_Bounds();
        }
    }
    public var Compositor : Optional<Microsoft.UI.Composition.ICompositor> {
        get throws {
            return try get_Compositor();
        }
    }
    public var Content : Optional<Microsoft.UI.Xaml.IUIElement> {
        get throws {
            return try get_Content();
        }
    }
    public var CoreWindow : Optional<Windows.UI.Core.ICoreWindow> {
        get throws {
            return try get_CoreWindow();
        }
    }
    public var Dispatcher : Optional<Windows.UI.Core.ICoreDispatcher> {
        get throws {
            return try get_Dispatcher();
        }
    }
    public var DispatcherQueue : Optional<Microsoft.UI.Dispatching.IDispatcherQueue> {
        get throws {
            return try get_DispatcherQueue();
        }
    }
    public var ExtendsContentIntoTitleBar : boolean {
        get throws {
            return try get_ExtendsContentIntoTitleBar();
        }
    }
    public var Title : Swift.String {
        get throws {
            return try get_Title();
        }
    }
    public var Visible : boolean {
        get throws {
            return try get_Visible();
        }
    }
} // IWindow


// type: Microsoft.UI.Xaml.IWindowActivatedEventArgs
// interface type
open class IWindowActivatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc723a5ea, Data2: 0x82c4, Data3 : 0x5dd6, Data4 : (0x86, 0x1b, 0x70, 0xef, 0x57, 0x3b, 0x88, 0xd6)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_WindowActivationState
} // IWindowActivatedEventArgs


// type: Microsoft.UI.Xaml.IWindowEventArgs
// interface type
open class IWindowEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1140827c, Data2: 0xfe0a, Data3 : 0x5268, Data4 : (0xbc, 0x2b, 0xf4, 0x49, 0x2c, 0x2c, 0xcb, 0x49)) }
// method not needed: get_Handled
// method not needed: put_Handled
} // IWindowEventArgs


// type: Microsoft.UI.Xaml.IWindowFactory
// interface type
// COMPOSITION INTERFACE
open class IWindowFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf0441536, Data2: 0xafef, Data3 : 0x5222, Data4 : (0x91, 0x8f, 0x32, 0x4a, 0x9b, 0x2d, 0xec, 0x75)) }
    // Microsoft.UI.Xaml.Window CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindowFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.IWindow> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.IWindow(consuming: __result);
    }
} // IWindowFactory


// type: Microsoft.UI.Xaml.IWindowSizeChangedEventArgs
// interface type
open class IWindowSizeChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x542f6f2c, Data2: 0x4b64, Data3 : 0x5c72, Data4 : (0xa7, 0xa5, 0x3a, 0x7e, 0x06, 0x64, 0xb8, 0xff)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_Size
} // IWindowSizeChangedEventArgs


// type: Microsoft.UI.Xaml.IWindowStatics
// interface type
open class IWindowStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8cc985e3, Data2: 0xa41a, Data3 : 0x5df4, Data4 : (0xb5, 0x31, 0xd3, 0xa1, 0x78, 0x8d, 0x86, 0xc5)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Window get_Current()
    private func _n_get_Current(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIWindowStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, __presult))
        }
    }
    public func get_Current() throws -> Optional<Microsoft.UI.Xaml.IWindow> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIWindow>> = nil;
        try self._n_get_Current(&__result);
        return Microsoft.UI.Xaml.IWindow(consuming: __result);
    }
    public var Current : Optional<Microsoft.UI.Xaml.IWindow> {
        get throws {
            return try get_Current();
        }
    }
} // IWindowStatics


// type: Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs
// interface type
open class IWindowVisibilityChangedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7bb24a6d, Data2: 0x070c, Data3 : 0x5cb6, Data4 : (0x8e, 0x9c, 0x54, 0x79, 0x05, 0xbe, 0x82, 0x65)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_Visible
} // IWindowVisibilityChangedEventArgs


// type: Microsoft.UI.Xaml.IXamlRoot
// interface type
open class IXamlRoot
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x60cb215a, Data2: 0xad15, Data3 : 0x520a, Data4 : (0x8b, 0x01, 0x44, 0x16, 0x82, 0x4f, 0x04, 0x41)) }
// method not needed: get_Content
// method not needed: get_Size
// method not needed: get_RasterizationScale
// method not needed: get_IsHostVisible
// method not needed: add_Changed
// method not needed: remove_Changed
} // IXamlRoot


// type: Microsoft.UI.Xaml.LaunchActivatedEventArgs
// runtime class
public class LaunchActivatedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.ILaunchActivatedEventArgs;
    public init(plok: Microsoft.UI.Xaml.ILaunchActivatedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.ILaunchActivatedEventArgs { return _self; }
    // method not needed: get_Arguments
    // method not needed: get_UWPLaunchActivatedEventArgs
}

// type: Microsoft.UI.Xaml.LineStackingStrategy
// enum type
public typealias LineStackingStrategy = _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy;

// type: Microsoft.UI.Xaml.OpticalMarginAlignment
// enum type
public typealias OpticalMarginAlignment = _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment;

// type: Microsoft.UI.Xaml.ResourceDictionary
// runtime class
open class ResourceDictionary
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.IResourceDictionary;
    public init(plok: Microsoft.UI.Xaml.IResourceDictionary?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IResourceDictionary { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IResourceDictionaryFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IResourceDictionaryFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.ResourceDictionary");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Source
    // method not needed: put_Source
    // method not needed: get_MergedDictionaries
    // method not needed: get_ThemeDictionaries
    // instance interface not needed: Windows.Foundation.Collections.IMap`2[[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Windows.Foundation.Collections.IKeyValuePair`2[[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.RoutedEvent
// runtime class
public class RoutedEvent
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IRoutedEvent;
    public init(plok: Microsoft.UI.Xaml.IRoutedEvent?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IRoutedEvent { return _self; }
}

// type: Microsoft.UI.Xaml.RoutedEventArgs
// runtime class
open class RoutedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IRoutedEventArgs { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IRoutedEventArgsFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IRoutedEventArgsFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.RoutedEventArgs");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    public func get_OriginalSource() throws -> Optional<WinRT.IInspectable> {
        let _ifc : Microsoft.UI.Xaml.IRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.get_OriginalSource();
    }
    public var OriginalSource : Optional<WinRT.IInspectable> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.OriginalSource;
        }
    }
}

// type: Microsoft.UI.Xaml.RoutedEventHandler
// delegate type
open class IRoutedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdae23d85, Data2: 0x69ca, Data3 : 0x5bdf, Data4 : (0x80, 0x5b, 0x61, 0x61, 0xa3, 0xa2, 0x15, 0xcc)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.RoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.IRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class RoutedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.IRoutedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: RoutedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: RoutedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventArgs>>) in
        guard let self = RoutedEventHandler.from_RoutedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.RoutedEventArgs(plok: Microsoft.UI.Xaml.IRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: RoutedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_RoutedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> RoutedEventHandler? {
        return pUnk?.bindMemory(to: RoutedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.IRoutedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.IRoutedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_RoutedEventHandler
{
    private var _self : Microsoft.UI.Xaml.IRoutedEventHandler;
    public init(plok: Microsoft.UI.Xaml.IRoutedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.IRoutedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.ScalarTransition
// runtime class
open class ScalarTransition
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IScalarTransition;
    public init(plok: Microsoft.UI.Xaml.IScalarTransition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IScalarTransition { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IScalarTransitionFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IScalarTransitionFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.ScalarTransition");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Duration
    // method not needed: put_Duration
}

// type: Microsoft.UI.Xaml.SizeChangedEventArgs
// runtime class
public class SizeChangedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.ISizeChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.ISizeChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.ISizeChangedEventArgs { return _self; }
    // method not needed: get_PreviousSize
    // method not needed: get_NewSize
}

// type: Microsoft.UI.Xaml.SizeChangedEventHandler
// delegate type
open class ISizeChangedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8d7b1a58, Data2: 0x14c6, Data3 : 0x51c9, Data4 : (0x89, 0x2c, 0x9f, 0xcc, 0xe3, 0x68, 0xe7, 0x7d)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.SizeChangedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.ISizeChangedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class SizeChangedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.ISizeChangedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: SizeChangedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: SizeChangedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CISizeChangedEventArgs>>) in
        guard let self = SizeChangedEventHandler.from_SizeChangedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.SizeChangedEventArgs(plok: Microsoft.UI.Xaml.ISizeChangedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: SizeChangedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.SizeChangedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.SizeChangedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CISizeChangedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_SizeChangedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> SizeChangedEventHandler? {
        return pUnk?.bindMemory(to: SizeChangedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.SizeChangedEventArgs>) throws -> Void {
        if let cb = _cb {
            try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.ISizeChangedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.ISizeChangedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_SizeChangedEventHandler
{
    private var _self : Microsoft.UI.Xaml.ISizeChangedEventHandler;
    public init(plok: Microsoft.UI.Xaml.ISizeChangedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.SizeChangedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.ISizeChangedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Style
// runtime class
public class Style
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.IStyle;
    public init(plok: Microsoft.UI.Xaml.IStyle?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IStyle { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Style")
        try super.init(plok: _self.QueryInterface())
    }
    public init(targetType : Windows.UI.Xaml.Interop.TypeName) throws {
        let _af : IStyleFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Style");
        _self = try _af.CreateInstance(targetType: targetType)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_IsSealed
    // method not needed: get_Setters
    // method not needed: get_TargetType
    // method not needed: put_TargetType
    // method not needed: get_BasedOn
    // method not needed: put_BasedOn
    // method not needed: Seal
}

// type: Microsoft.UI.Xaml.TextAlignment
// enum type
public typealias TextAlignment = _q_CMicrosoft_CUI_CXaml_CTextAlignment;

// type: Microsoft.UI.Xaml.TextLineBounds
// enum type
public typealias TextLineBounds = _q_CMicrosoft_CUI_CXaml_CTextLineBounds;

// type: Microsoft.UI.Xaml.TextReadingOrder
// enum type
public typealias TextReadingOrder = _q_CMicrosoft_CUI_CXaml_CTextReadingOrder;

// type: Microsoft.UI.Xaml.TextTrimming
// enum type
public typealias TextTrimming = _q_CMicrosoft_CUI_CXaml_CTextTrimming;

// type: Microsoft.UI.Xaml.TextWrapping
// enum type
public typealias TextWrapping = _q_CMicrosoft_CUI_CXaml_CTextWrapping;

// type: Microsoft.UI.Xaml.Thickness
// struct type
public typealias Thickness = _q_CMicrosoft_CUI_CXaml_CThickness;

// type: Microsoft.UI.Xaml.TriggerBase
// runtime class
open class TriggerBase
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.ITriggerBase;
    public init(plok: Microsoft.UI.Xaml.ITriggerBase?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.ITriggerBase { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.ITriggerBaseFactory
// composable interface not needed: Microsoft.UI.Xaml.ITriggerBaseFactory
}

// type: Microsoft.UI.Xaml.TriggerCollection
// runtime class
public class TriggerCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase { return _self; }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.TriggerBase> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.TriggerBase(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CTriggerBase> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.TriggerBase>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.TriggerBase>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.TriggerBase>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.TriggerBase>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CITriggerBase>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CITriggerBase>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CTriggerBase = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Microsoft.UI.Xaml.TriggerBase, Microsoft, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Microsoft.UI.Xaml.UIElement
// runtime class
open class UIElement
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.IUIElement;
    private class Container {
        public var self_ref: UIElement? = nil
    }
    private struct WithTrailingObjects_IUIElementOverrides {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides
        public var container: Unmanaged<Container>
    }
    private var instance: Optional<UnsafeMutablePointer<WithTrailingObjects_IUIElementOverrides>>
    private var _inner: Optional<WinRT.IInspectable> = nil
    private static func from_IUIElementOverrides(_ pUnk: UnsafeMutableRawPointer?) -> UIElement? {
        return pUnk?.bindMemory(to: UIElement.WithTrailingObjects_IUIElementOverrides.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    public init(plok: Microsoft.UI.Xaml.IUIElement?) throws {
        _self = plok!
        self.instance = nil
        try super.init(plok: _self.QueryInterface())
        let instance = UnsafeMutablePointer<WithTrailingObjects_IUIElementOverrides>.allocate(capacity: 1)
        instance.pointee = WithTrailingObjects_IUIElementOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CIUIElementOverrides(lpVtbl: &Self.vtable_IUIElementOverrides), container: Unmanaged<Container>.passRetained(Container()))
        self.instance = instance
    }
    public func Interface() -> Microsoft.UI.Xaml.IUIElement { return _self; }
    private static var vtable_IUIElementOverrides: _q_CMicrosoft_CUI_CXaml_CIUIElementOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.IUIElementOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: UIElement.WithTrailingObjects_IUIElementOverrides.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: UIElement.WithTrailingObjects_IUIElementOverrides.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 1
        var mem = CoTaskMemAlloc(16).bindMemory(to: IID.self, capacity: 1)
        (mem + 0).pointee = Microsoft.UI.Xaml.IUIElementOverrides.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.IUIElementOverrides").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    OnCreateAutomationPeer: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CAutomation_CPeers_CIAutomationPeer>>>?) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> = try self.OnCreateAutomationPeer()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnDisconnectVisualChildren: {
        (pThis) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnDisconnectVisualChildren()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    FindSubElementsForTouchTargeting: {
        (pThis, _ point : _q_CWindows_CFoundation_CPoint, _ boundingRect : _q_CWindows_CFoundation_CRect, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint>>>?) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint> = try self.FindSubElementsForTouchTargeting(point: point, boundingRect: boundingRect)
            __presult!.pointee = RawPointer(_ret);
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetChildrenInTabFocusOrder: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject>>>?) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<ClosedGenerics.IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject> = try self.GetChildrenInTabFocusOrder()
            __presult!.pointee = RawPointer(_ret);
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnKeyboardAcceleratorInvoked: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorInvokedEventArgs>>) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnKeyboardAcceleratorInvoked(args: Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs(plok: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnProcessKeyboardAccelerators: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIProcessKeyboardAcceleratorEventArgs>>) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnProcessKeyboardAccelerators(args: Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs(plok: Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnBringIntoViewRequested: {
        (pThis, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIBringIntoViewRequestedEventArgs>>) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.OnBringIntoViewRequested(e: Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs(plok: Microsoft.UI.Xaml.IBringIntoViewRequestedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    PopulatePropertyInfoOverride: {
        (pThis, _ propertyName : Optional<HSTRING>, _ animationPropertyInfo : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo>>) in
        guard let self = UIElement.from_IUIElementOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.PopulatePropertyInfoOverride(propertyName: Swift.String(from: propertyName), animationPropertyInfo: Microsoft.UI.Composition.AnimationPropertyInfo(plok: Microsoft.UI.Composition.IAnimationPropertyInfo(animationPropertyInfo)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    // COMPOSABLE: Microsoft.UI.Xaml.IUIElementFactory
// composable interface not needed: Microsoft.UI.Xaml.IUIElementFactory
    private struct _IUIElementStatics {
        static var x : IUIElementStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.UIElement")
    }
    public static var UIElementStatics : IUIElementStatics {
        _IUIElementStatics.x
    }
    public static func get_KeyDownEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_KeyDownEvent());
    }
    public static func get_KeyUpEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_KeyUpEvent());
    }
    public static func get_PointerEnteredEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerEnteredEvent());
    }
    public static func get_PointerPressedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerPressedEvent());
    }
    public static func get_PointerMovedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerMovedEvent());
    }
    public static func get_PointerReleasedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerReleasedEvent());
    }
    public static func get_PointerExitedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerExitedEvent());
    }
    public static func get_PointerCaptureLostEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerCaptureLostEvent());
    }
    public static func get_PointerCanceledEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerCanceledEvent());
    }
    public static func get_PointerWheelChangedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PointerWheelChangedEvent());
    }
    public static func get_TappedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_TappedEvent());
    }
    public static func get_DoubleTappedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_DoubleTappedEvent());
    }
    public static func get_HoldingEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_HoldingEvent());
    }
    public static func get_RightTappedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_RightTappedEvent());
    }
    public static func get_ManipulationStartingEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_ManipulationStartingEvent());
    }
    public static func get_ManipulationInertiaStartingEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_ManipulationInertiaStartingEvent());
    }
    public static func get_ManipulationStartedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_ManipulationStartedEvent());
    }
    public static func get_ManipulationDeltaEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_ManipulationDeltaEvent());
    }
    public static func get_ManipulationCompletedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_ManipulationCompletedEvent());
    }
    public static func get_DragEnterEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_DragEnterEvent());
    }
    public static func get_DragLeaveEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_DragLeaveEvent());
    }
    public static func get_DragOverEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_DragOverEvent());
    }
    public static func get_DropEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_DropEvent());
    }
    public static func get_GettingFocusEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_GettingFocusEvent());
    }
    public static func get_LosingFocusEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_LosingFocusEvent());
    }
    public static func get_NoFocusCandidateFoundEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_NoFocusCandidateFoundEvent());
    }
    public static func get_PreviewKeyDownEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PreviewKeyDownEvent());
    }
    public static func get_CharacterReceivedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_CharacterReceivedEvent());
    }
    public static func get_PreviewKeyUpEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_PreviewKeyUpEvent());
    }
    public static func get_BringIntoViewRequestedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_BringIntoViewRequestedEvent());
    }
    public static func get_ContextRequestedEvent() throws -> Optional<Microsoft.UI.Xaml.RoutedEvent> {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.get_ContextRequestedEvent());
    }
    public static func get_AllowDropProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_AllowDropProperty());
    }
    public static func get_OpacityProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_OpacityProperty());
    }
    public static func get_ClipProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_ClipProperty());
    }
    public static func get_RenderTransformProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_RenderTransformProperty());
    }
    public static func get_ProjectionProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_ProjectionProperty());
    }
    public static func get_Transform3DProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_Transform3DProperty());
    }
    public static func get_RenderTransformOriginProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_RenderTransformOriginProperty());
    }
    public static func get_IsHitTestVisibleProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_IsHitTestVisibleProperty());
    }
    public static func get_VisibilityProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_VisibilityProperty());
    }
    public static func get_UseLayoutRoundingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_UseLayoutRoundingProperty());
    }
    public static func get_TransitionsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_TransitionsProperty());
    }
    public static func get_CacheModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_CacheModeProperty());
    }
    public static func get_IsTapEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_IsTapEnabledProperty());
    }
    public static func get_IsDoubleTapEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_IsDoubleTapEnabledProperty());
    }
    public static func get_CanDragProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_CanDragProperty());
    }
    public static func get_IsRightTapEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_IsRightTapEnabledProperty());
    }
    public static func get_IsHoldingEnabledProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_IsHoldingEnabledProperty());
    }
    public static func get_ManipulationModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_ManipulationModeProperty());
    }
    public static func get_PointerCapturesProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_PointerCapturesProperty());
    }
    public static func get_ContextFlyoutProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_ContextFlyoutProperty());
    }
    public static func get_CompositeModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_CompositeModeProperty());
    }
    public static func get_LightsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_LightsProperty());
    }
    public static func get_CanBeScrollAnchorProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_CanBeScrollAnchorProperty());
    }
    public static func get_ExitDisplayModeOnAccessKeyInvokedProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_ExitDisplayModeOnAccessKeyInvokedProperty());
    }
    public static func get_IsAccessKeyScopeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_IsAccessKeyScopeProperty());
    }
    public static func get_AccessKeyScopeOwnerProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_AccessKeyScopeOwnerProperty());
    }
    public static func get_AccessKeyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_AccessKeyProperty());
    }
    public static func get_KeyTipPlacementModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_KeyTipPlacementModeProperty());
    }
    public static func get_KeyTipHorizontalOffsetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_KeyTipHorizontalOffsetProperty());
    }
    public static func get_KeyTipVerticalOffsetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_KeyTipVerticalOffsetProperty());
    }
    public static func get_KeyTipTargetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_KeyTipTargetProperty());
    }
    public static func get_XYFocusKeyboardNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusKeyboardNavigationProperty());
    }
    public static func get_XYFocusUpNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusUpNavigationStrategyProperty());
    }
    public static func get_XYFocusDownNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusDownNavigationStrategyProperty());
    }
    public static func get_XYFocusLeftNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusLeftNavigationStrategyProperty());
    }
    public static func get_XYFocusRightNavigationStrategyProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusRightNavigationStrategyProperty());
    }
    public static func get_KeyboardAcceleratorPlacementTargetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_KeyboardAcceleratorPlacementTargetProperty());
    }
    public static func get_KeyboardAcceleratorPlacementModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_KeyboardAcceleratorPlacementModeProperty());
    }
    public static func get_HighContrastAdjustmentProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_HighContrastAdjustmentProperty());
    }
    public static func get_TabFocusNavigationProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_TabFocusNavigationProperty());
    }
    public static func get_ShadowProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_ShadowProperty());
    }
    public static func get_FocusStateProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_FocusStateProperty());
    }
    public static func get_UseSystemFocusVisualsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_UseSystemFocusVisualsProperty());
    }
    public static func get_XYFocusLeftProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusLeftProperty());
    }
    public static func get_XYFocusRightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusRightProperty());
    }
    public static func get_XYFocusUpProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusUpProperty());
    }
    public static func get_XYFocusDownProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_XYFocusDownProperty());
    }
    public static func get_IsTabStopProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_IsTabStopProperty());
    }
    public static func get_TabIndexProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.get_TabIndexProperty());
    }
    public static func TryStartDirectManipulation(value : Optional<Microsoft.UI.Xaml.Input.Pointer>) throws -> boolean {
        return try UIElementStatics.TryStartDirectManipulation(value: value!.Interface());
    }
    public static func RegisterAsScrollPort(element : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        return try UIElementStatics.RegisterAsScrollPort(element: element!.Interface());
    }
    public static var AccessKeyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.AccessKeyProperty);
        }
    }
    public static var AccessKeyScopeOwnerProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.AccessKeyScopeOwnerProperty);
        }
    }
    public static var AllowDropProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.AllowDropProperty);
        }
    }
    public static var BringIntoViewRequestedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.BringIntoViewRequestedEvent);
        }
    }
    public static var CacheModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.CacheModeProperty);
        }
    }
    public static var CanBeScrollAnchorProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.CanBeScrollAnchorProperty);
        }
    }
    public static var CanDragProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.CanDragProperty);
        }
    }
    public static var CharacterReceivedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.CharacterReceivedEvent);
        }
    }
    public static var ClipProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.ClipProperty);
        }
    }
    public static var CompositeModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.CompositeModeProperty);
        }
    }
    public static var ContextFlyoutProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.ContextFlyoutProperty);
        }
    }
    public static var ContextRequestedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.ContextRequestedEvent);
        }
    }
    public static var DoubleTappedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.DoubleTappedEvent);
        }
    }
    public static var DragEnterEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.DragEnterEvent);
        }
    }
    public static var DragLeaveEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.DragLeaveEvent);
        }
    }
    public static var DragOverEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.DragOverEvent);
        }
    }
    public static var DropEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.DropEvent);
        }
    }
    public static var ExitDisplayModeOnAccessKeyInvokedProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.ExitDisplayModeOnAccessKeyInvokedProperty);
        }
    }
    public static var FocusStateProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.FocusStateProperty);
        }
    }
    public static var GettingFocusEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.GettingFocusEvent);
        }
    }
    public static var HighContrastAdjustmentProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.HighContrastAdjustmentProperty);
        }
    }
    public static var HoldingEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.HoldingEvent);
        }
    }
    public static var IsAccessKeyScopeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.IsAccessKeyScopeProperty);
        }
    }
    public static var IsDoubleTapEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.IsDoubleTapEnabledProperty);
        }
    }
    public static var IsHitTestVisibleProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.IsHitTestVisibleProperty);
        }
    }
    public static var IsHoldingEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.IsHoldingEnabledProperty);
        }
    }
    public static var IsRightTapEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.IsRightTapEnabledProperty);
        }
    }
    public static var IsTabStopProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.IsTabStopProperty);
        }
    }
    public static var IsTapEnabledProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.IsTapEnabledProperty);
        }
    }
    public static var KeyDownEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.KeyDownEvent);
        }
    }
    public static var KeyTipHorizontalOffsetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.KeyTipHorizontalOffsetProperty);
        }
    }
    public static var KeyTipPlacementModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.KeyTipPlacementModeProperty);
        }
    }
    public static var KeyTipTargetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.KeyTipTargetProperty);
        }
    }
    public static var KeyTipVerticalOffsetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.KeyTipVerticalOffsetProperty);
        }
    }
    public static var KeyUpEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.KeyUpEvent);
        }
    }
    public static var KeyboardAcceleratorPlacementModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.KeyboardAcceleratorPlacementModeProperty);
        }
    }
    public static var KeyboardAcceleratorPlacementTargetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.KeyboardAcceleratorPlacementTargetProperty);
        }
    }
    public static var LightsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.LightsProperty);
        }
    }
    public static var LosingFocusEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.LosingFocusEvent);
        }
    }
    public static var ManipulationCompletedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.ManipulationCompletedEvent);
        }
    }
    public static var ManipulationDeltaEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.ManipulationDeltaEvent);
        }
    }
    public static var ManipulationInertiaStartingEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.ManipulationInertiaStartingEvent);
        }
    }
    public static var ManipulationModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.ManipulationModeProperty);
        }
    }
    public static var ManipulationStartedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.ManipulationStartedEvent);
        }
    }
    public static var ManipulationStartingEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.ManipulationStartingEvent);
        }
    }
    public static var NoFocusCandidateFoundEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.NoFocusCandidateFoundEvent);
        }
    }
    public static var OpacityProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.OpacityProperty);
        }
    }
    public static var PointerCanceledEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerCanceledEvent);
        }
    }
    public static var PointerCaptureLostEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerCaptureLostEvent);
        }
    }
    public static var PointerCapturesProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.PointerCapturesProperty);
        }
    }
    public static var PointerEnteredEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerEnteredEvent);
        }
    }
    public static var PointerExitedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerExitedEvent);
        }
    }
    public static var PointerMovedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerMovedEvent);
        }
    }
    public static var PointerPressedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerPressedEvent);
        }
    }
    public static var PointerReleasedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerReleasedEvent);
        }
    }
    public static var PointerWheelChangedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PointerWheelChangedEvent);
        }
    }
    public static var PreviewKeyDownEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PreviewKeyDownEvent);
        }
    }
    public static var PreviewKeyUpEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.PreviewKeyUpEvent);
        }
    }
    public static var ProjectionProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.ProjectionProperty);
        }
    }
    public static var RenderTransformOriginProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.RenderTransformOriginProperty);
        }
    }
    public static var RenderTransformProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.RenderTransformProperty);
        }
    }
    public static var RightTappedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.RightTappedEvent);
        }
    }
    public static var ShadowProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.ShadowProperty);
        }
    }
    public static var TabFocusNavigationProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.TabFocusNavigationProperty);
        }
    }
    public static var TabIndexProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.TabIndexProperty);
        }
    }
    public static var TappedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent> {
        get throws {
        return try Microsoft.UI.Xaml.RoutedEvent(plok: UIElementStatics.TappedEvent);
        }
    }
    public static var Transform3DProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.Transform3DProperty);
        }
    }
    public static var TransitionsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.TransitionsProperty);
        }
    }
    public static var UseLayoutRoundingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.UseLayoutRoundingProperty);
        }
    }
    public static var UseSystemFocusVisualsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.UseSystemFocusVisualsProperty);
        }
    }
    public static var VisibilityProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.VisibilityProperty);
        }
    }
    public static var XYFocusDownNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusDownNavigationStrategyProperty);
        }
    }
    public static var XYFocusDownProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusDownProperty);
        }
    }
    public static var XYFocusKeyboardNavigationProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusKeyboardNavigationProperty);
        }
    }
    public static var XYFocusLeftNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusLeftNavigationStrategyProperty);
        }
    }
    public static var XYFocusLeftProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusLeftProperty);
        }
    }
    public static var XYFocusRightNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusRightNavigationStrategyProperty);
        }
    }
    public static var XYFocusRightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusRightProperty);
        }
    }
    public static var XYFocusUpNavigationStrategyProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusUpNavigationStrategyProperty);
        }
    }
    public static var XYFocusUpProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: UIElementStatics.XYFocusUpProperty);
        }
    }
    public func get_DesiredSize() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_DesiredSize();
    }
    public func get_AllowDrop() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_AllowDrop();
    }
    public func put_AllowDrop(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_AllowDrop(value: value);
    }
    public func get_Opacity() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Clip() throws -> Optional<Microsoft.UI.Xaml.Media.RectangleGeometry> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.RectangleGeometry(plok: _ifc.get_Clip());
    }
    public func put_Clip(value : Optional<Microsoft.UI.Xaml.Media.RectangleGeometry>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Clip(value: value!.Interface());
    }
    public func get_RenderTransform() throws -> Optional<Microsoft.UI.Xaml.Media.Transform> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.get_RenderTransform());
    }
    public func put_RenderTransform(value : Optional<Microsoft.UI.Xaml.Media.Transform>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_RenderTransform(value: value!.Interface());
    }
    public func get_Projection() throws -> Optional<Microsoft.UI.Xaml.Media.Projection> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Projection(plok: _ifc.get_Projection());
    }
    public func put_Projection(value : Optional<Microsoft.UI.Xaml.Media.Projection>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Projection(value: value!.Interface());
    }
    public func get_Transform3D() throws -> Optional<Microsoft.UI.Xaml.Media.Media3D.Transform3D> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Media3D.Transform3D(plok: _ifc.get_Transform3D());
    }
    public func put_Transform3D(value : Optional<Microsoft.UI.Xaml.Media.Media3D.Transform3D>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Transform3D(value: value!.Interface());
    }
    public func get_RenderTransformOrigin() throws -> Windows.Foundation.Point {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_RenderTransformOrigin();
    }
    public func put_RenderTransformOrigin(value : Windows.Foundation.Point) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_RenderTransformOrigin(value: value);
    }
    public func get_IsHitTestVisible() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_IsHitTestVisible();
    }
    public func put_IsHitTestVisible(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_IsHitTestVisible(value: value);
    }
    public func get_Visibility() throws -> Microsoft.UI.Xaml.Visibility {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_Visibility();
    }
    public func put_Visibility(value : Microsoft.UI.Xaml.Visibility) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Visibility(value: value);
    }
    public func get_RenderSize() throws -> Windows.Foundation.Size {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_RenderSize();
    }
    public func get_UseLayoutRounding() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_UseLayoutRounding();
    }
    public func put_UseLayoutRounding(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_UseLayoutRounding(value: value);
    }
    public func get_Transitions() throws -> Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.get_Transitions());
    }
    public func put_Transitions(value : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Transitions(value: value!.Interface());
    }
    public func get_CacheMode() throws -> Optional<Microsoft.UI.Xaml.Media.CacheMode> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.CacheMode(plok: _ifc.get_CacheMode());
    }
    public func put_CacheMode(value : Optional<Microsoft.UI.Xaml.Media.CacheMode>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_CacheMode(value: value!.Interface());
    }
    public func get_IsTapEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_IsTapEnabled();
    }
    public func put_IsTapEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_IsTapEnabled(value: value);
    }
    public func get_IsDoubleTapEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_IsDoubleTapEnabled();
    }
    public func put_IsDoubleTapEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_IsDoubleTapEnabled(value: value);
    }
    public func get_CanDrag() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_CanDrag();
    }
    public func put_CanDrag(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_CanDrag(value: value);
    }
    public func get_IsRightTapEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_IsRightTapEnabled();
    }
    public func put_IsRightTapEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_IsRightTapEnabled(value: value);
    }
    public func get_IsHoldingEnabled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_IsHoldingEnabled();
    }
    public func put_IsHoldingEnabled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_IsHoldingEnabled(value: value);
    }
    public func get_ManipulationMode() throws -> Microsoft.UI.Xaml.Input.ManipulationModes {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_ManipulationMode();
    }
    public func put_ManipulationMode(value : Microsoft.UI.Xaml.Input.ManipulationModes) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_ManipulationMode(value: value);
    }
    public func get_PointerCaptures() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_PointerCaptures();
    }
    public func get_ContextFlyout() throws -> Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.get_ContextFlyout());
    }
    public func put_ContextFlyout(value : Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_ContextFlyout(value: value!.Interface());
    }
    public func get_CompositeMode() throws -> Microsoft.UI.Xaml.Media.ElementCompositeMode {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_CompositeMode();
    }
    public func put_CompositeMode(value : Microsoft.UI.Xaml.Media.ElementCompositeMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_CompositeMode(value: value);
    }
    public func get_Lights() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_Lights();
    }
    public func get_CanBeScrollAnchor() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_CanBeScrollAnchor();
    }
    public func put_CanBeScrollAnchor(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_CanBeScrollAnchor(value: value);
    }
    public func get_ExitDisplayModeOnAccessKeyInvoked() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_ExitDisplayModeOnAccessKeyInvoked();
    }
    public func put_ExitDisplayModeOnAccessKeyInvoked(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_ExitDisplayModeOnAccessKeyInvoked(value: value);
    }
    public func get_IsAccessKeyScope() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_IsAccessKeyScope();
    }
    public func put_IsAccessKeyScope(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_IsAccessKeyScope(value: value);
    }
    public func get_AccessKeyScopeOwner() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_AccessKeyScopeOwner());
    }
    public func put_AccessKeyScopeOwner(value : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_AccessKeyScopeOwner(value: value!.Interface());
    }
    public func get_AccessKey() throws -> Swift.String {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_AccessKey();
    }
    public func put_AccessKey(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_AccessKey(value: value);
    }
    public func get_KeyTipPlacementMode() throws -> Microsoft.UI.Xaml.Input.KeyTipPlacementMode {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_KeyTipPlacementMode();
    }
    public func put_KeyTipPlacementMode(value : Microsoft.UI.Xaml.Input.KeyTipPlacementMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_KeyTipPlacementMode(value: value);
    }
    public func get_KeyTipHorizontalOffset() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_KeyTipHorizontalOffset();
    }
    public func put_KeyTipHorizontalOffset(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_KeyTipHorizontalOffset(value: value);
    }
    public func get_KeyTipVerticalOffset() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_KeyTipVerticalOffset();
    }
    public func put_KeyTipVerticalOffset(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_KeyTipVerticalOffset(value: value);
    }
    public func get_KeyTipTarget() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_KeyTipTarget());
    }
    public func put_KeyTipTarget(value : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_KeyTipTarget(value: value!.Interface());
    }
    public func get_XYFocusKeyboardNavigation() throws -> Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_XYFocusKeyboardNavigation();
    }
    public func put_XYFocusKeyboardNavigation(value : Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusKeyboardNavigation(value: value);
    }
    public func get_XYFocusUpNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_XYFocusUpNavigationStrategy();
    }
    public func put_XYFocusUpNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusUpNavigationStrategy(value: value);
    }
    public func get_XYFocusDownNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_XYFocusDownNavigationStrategy();
    }
    public func put_XYFocusDownNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusDownNavigationStrategy(value: value);
    }
    public func get_XYFocusLeftNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_XYFocusLeftNavigationStrategy();
    }
    public func put_XYFocusLeftNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusLeftNavigationStrategy(value: value);
    }
    public func get_XYFocusRightNavigationStrategy() throws -> Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_XYFocusRightNavigationStrategy();
    }
    public func put_XYFocusRightNavigationStrategy(value : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusRightNavigationStrategy(value: value);
    }
    public func get_KeyboardAccelerators() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_KeyboardAccelerators();
    }
    public func get_KeyboardAcceleratorPlacementTarget() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_KeyboardAcceleratorPlacementTarget());
    }
    public func put_KeyboardAcceleratorPlacementTarget(value : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_KeyboardAcceleratorPlacementTarget(value: value!.Interface());
    }
    public func get_KeyboardAcceleratorPlacementMode() throws -> Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_KeyboardAcceleratorPlacementMode();
    }
    public func put_KeyboardAcceleratorPlacementMode(value : Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_KeyboardAcceleratorPlacementMode(value: value);
    }
    public func get_HighContrastAdjustment() throws -> Microsoft.UI.Xaml.ElementHighContrastAdjustment {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_HighContrastAdjustment();
    }
    public func put_HighContrastAdjustment(value : Microsoft.UI.Xaml.ElementHighContrastAdjustment) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_HighContrastAdjustment(value: value);
    }
    public func get_TabFocusNavigation() throws -> Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_TabFocusNavigation();
    }
    public func put_TabFocusNavigation(value : Microsoft.UI.Xaml.Input.KeyboardNavigationMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_TabFocusNavigation(value: value);
    }
    public func get_OpacityTransition() throws -> Optional<Microsoft.UI.Xaml.ScalarTransition> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ScalarTransition(plok: _ifc.get_OpacityTransition());
    }
    public func put_OpacityTransition(value : Optional<Microsoft.UI.Xaml.ScalarTransition>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_OpacityTransition(value: value!.Interface());
    }
    public func get_Translation() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_Translation();
    }
    public func put_Translation(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Translation(value: value);
    }
    public func get_TranslationTransition() throws -> Optional<Microsoft.UI.Xaml.Vector3Transition> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Vector3Transition(plok: _ifc.get_TranslationTransition());
    }
    public func put_TranslationTransition(value : Optional<Microsoft.UI.Xaml.Vector3Transition>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_TranslationTransition(value: value!.Interface());
    }
    public func get_Rotation() throws -> Swift.Float {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_Rotation();
    }
    public func put_Rotation(value : Swift.Float) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Rotation(value: value);
    }
    public func get_RotationTransition() throws -> Optional<Microsoft.UI.Xaml.ScalarTransition> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ScalarTransition(plok: _ifc.get_RotationTransition());
    }
    public func put_RotationTransition(value : Optional<Microsoft.UI.Xaml.ScalarTransition>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_RotationTransition(value: value!.Interface());
    }
    public func get_Scale() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_Scale();
    }
    public func put_Scale(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Scale(value: value);
    }
    public func get_ScaleTransition() throws -> Optional<Microsoft.UI.Xaml.Vector3Transition> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Vector3Transition(plok: _ifc.get_ScaleTransition());
    }
    public func put_ScaleTransition(value : Optional<Microsoft.UI.Xaml.Vector3Transition>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_ScaleTransition(value: value!.Interface());
    }
    public func get_TransformMatrix() throws -> Windows.Foundation.Numerics.Matrix4x4 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_TransformMatrix();
    }
    public func put_TransformMatrix(value : Windows.Foundation.Numerics.Matrix4x4) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_TransformMatrix(value: value);
    }
    public func get_CenterPoint() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_CenterPoint();
    }
    public func put_CenterPoint(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_CenterPoint(value: value);
    }
    public func get_RotationAxis() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_RotationAxis();
    }
    public func put_RotationAxis(value : Windows.Foundation.Numerics.Vector3) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_RotationAxis(value: value);
    }
    public func get_ActualOffset() throws -> Windows.Foundation.Numerics.Vector3 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_ActualOffset();
    }
    public func get_ActualSize() throws -> Windows.Foundation.Numerics.Vector2 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_ActualSize();
    }
    public func get_XamlRoot() throws -> Optional<Microsoft.UI.Xaml.XamlRoot> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.XamlRoot(plok: _ifc.get_XamlRoot());
    }
    public func put_XamlRoot(value : Optional<Microsoft.UI.Xaml.XamlRoot>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XamlRoot(value: value!.Interface());
    }
    public func get_Shadow() throws -> Optional<Microsoft.UI.Xaml.Media.Shadow> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Shadow(plok: _ifc.get_Shadow());
    }
    public func put_Shadow(value : Optional<Microsoft.UI.Xaml.Media.Shadow>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_Shadow(value: value!.Interface());
    }
    public func get_RasterizationScale() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_RasterizationScale();
    }
    public func put_RasterizationScale(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_RasterizationScale(value: value);
    }
    public func get_FocusState() throws -> Microsoft.UI.Xaml.FocusState {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_FocusState();
    }
    public func get_UseSystemFocusVisuals() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_UseSystemFocusVisuals();
    }
    public func put_UseSystemFocusVisuals(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_UseSystemFocusVisuals(value: value);
    }
    public func get_XYFocusLeft() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_XYFocusLeft());
    }
    public func put_XYFocusLeft(value : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusLeft(value: value!.Interface());
    }
    public func get_XYFocusRight() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_XYFocusRight());
    }
    public func put_XYFocusRight(value : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusRight(value: value!.Interface());
    }
    public func get_XYFocusUp() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_XYFocusUp());
    }
    public func put_XYFocusUp(value : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusUp(value: value!.Interface());
    }
    public func get_XYFocusDown() throws -> Optional<Microsoft.UI.Xaml.DependencyObject> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.get_XYFocusDown());
    }
    public func put_XYFocusDown(value : Optional<Microsoft.UI.Xaml.DependencyObject>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_XYFocusDown(value: value!.Interface());
    }
    public func get_IsTabStop() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_IsTabStop();
    }
    public func put_IsTabStop(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_IsTabStop(value: value);
    }
    public func get_TabIndex() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.get_TabIndex();
    }
    public func put_TabIndex(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.put_TabIndex(value: value);
    }
    public func add_KeyUp(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_KeyUp(handler: Microsoft.UI.Xaml.Input.KeyEventHandler(cb: handler).Interface());
    }
    public func remove_KeyUp(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_KeyUp(token: token);
    }
    public func add_KeyDown(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_KeyDown(handler: Microsoft.UI.Xaml.Input.KeyEventHandler(cb: handler).Interface());
    }
    public func remove_KeyDown(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_KeyDown(token: token);
    }
    public func add_GotFocus(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_GotFocus(handler: Microsoft.UI.Xaml.RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_GotFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_GotFocus(token: token);
    }
    public func add_LostFocus(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_LostFocus(handler: Microsoft.UI.Xaml.RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_LostFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_LostFocus(token: token);
    }
    public func add_DragStarting(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.DragStartingEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_DragStarting(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDragStartingEventArgs(cb: handler).Interface());
    }
    public func remove_DragStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_DragStarting(token: token);
    }
    public func add_DropCompleted(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.DropCompletedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_DropCompleted(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CDropCompletedEventArgs(cb: handler).Interface());
    }
    public func remove_DropCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_DropCompleted(token: token);
    }
    public func add_CharacterReceived(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_CharacterReceived(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CCharacterReceivedRoutedEventArgs(cb: handler).Interface());
    }
    public func remove_CharacterReceived(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_CharacterReceived(token: token);
    }
    public func add_DragEnter(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_DragEnter(handler: Microsoft.UI.Xaml.DragEventHandler(cb: handler).Interface());
    }
    public func remove_DragEnter(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_DragEnter(token: token);
    }
    public func add_DragLeave(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_DragLeave(handler: Microsoft.UI.Xaml.DragEventHandler(cb: handler).Interface());
    }
    public func remove_DragLeave(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_DragLeave(token: token);
    }
    public func add_DragOver(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_DragOver(handler: Microsoft.UI.Xaml.DragEventHandler(cb: handler).Interface());
    }
    public func remove_DragOver(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_DragOver(token: token);
    }
    public func add_Drop(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.DragEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_Drop(handler: Microsoft.UI.Xaml.DragEventHandler(cb: handler).Interface());
    }
    public func remove_Drop(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_Drop(token: token);
    }
    public func add_PointerPressed(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerPressed(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerPressed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerPressed(token: token);
    }
    public func add_PointerMoved(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerMoved(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerMoved(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerMoved(token: token);
    }
    public func add_PointerReleased(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerReleased(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerReleased(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerReleased(token: token);
    }
    public func add_PointerEntered(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerEntered(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerEntered(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerEntered(token: token);
    }
    public func add_PointerExited(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerExited(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerExited(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerExited(token: token);
    }
    public func add_PointerCaptureLost(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerCaptureLost(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerCaptureLost(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerCaptureLost(token: token);
    }
    public func add_PointerCanceled(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerCanceled(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerCanceled(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerCanceled(token: token);
    }
    public func add_PointerWheelChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PointerWheelChanged(handler: Microsoft.UI.Xaml.Input.PointerEventHandler(cb: handler).Interface());
    }
    public func remove_PointerWheelChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PointerWheelChanged(token: token);
    }
    public func add_Tapped(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_Tapped(handler: Microsoft.UI.Xaml.Input.TappedEventHandler(cb: handler).Interface());
    }
    public func remove_Tapped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_Tapped(token: token);
    }
    public func add_DoubleTapped(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_DoubleTapped(handler: Microsoft.UI.Xaml.Input.DoubleTappedEventHandler(cb: handler).Interface());
    }
    public func remove_DoubleTapped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_DoubleTapped(token: token);
    }
    public func add_Holding(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_Holding(handler: Microsoft.UI.Xaml.Input.HoldingEventHandler(cb: handler).Interface());
    }
    public func remove_Holding(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_Holding(token: token);
    }
    public func add_ContextRequested(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.ContextRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ContextRequested(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CContextRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_ContextRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ContextRequested(token: token);
    }
    public func add_ContextCanceled(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ContextCanceled(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CRoutedEventArgs(cb: handler).Interface());
    }
    public func remove_ContextCanceled(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ContextCanceled(token: token);
    }
    public func add_RightTapped(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_RightTapped(handler: Microsoft.UI.Xaml.Input.RightTappedEventHandler(cb: handler).Interface());
    }
    public func remove_RightTapped(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_RightTapped(token: token);
    }
    public func add_ManipulationStarting(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ManipulationStarting(handler: Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler(cb: handler).Interface());
    }
    public func remove_ManipulationStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ManipulationStarting(token: token);
    }
    public func add_ManipulationInertiaStarting(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ManipulationInertiaStarting(handler: Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler(cb: handler).Interface());
    }
    public func remove_ManipulationInertiaStarting(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ManipulationInertiaStarting(token: token);
    }
    public func add_ManipulationStarted(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ManipulationStarted(handler: Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler(cb: handler).Interface());
    }
    public func remove_ManipulationStarted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ManipulationStarted(token: token);
    }
    public func add_ManipulationDelta(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ManipulationDelta(handler: Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler(cb: handler).Interface());
    }
    public func remove_ManipulationDelta(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ManipulationDelta(token: token);
    }
    public func add_ManipulationCompleted(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ManipulationCompleted(handler: Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler(cb: handler).Interface());
    }
    public func remove_ManipulationCompleted(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ManipulationCompleted(token: token);
    }
    public func add_AccessKeyDisplayRequested(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_AccessKeyDisplayRequested(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_AccessKeyDisplayRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_AccessKeyDisplayRequested(token: token);
    }
    public func add_AccessKeyDisplayDismissed(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_AccessKeyDisplayDismissed(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyDisplayDismissedEventArgs(cb: handler).Interface());
    }
    public func remove_AccessKeyDisplayDismissed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_AccessKeyDisplayDismissed(token: token);
    }
    public func add_AccessKeyInvoked(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_AccessKeyInvoked(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CAccessKeyInvokedEventArgs(cb: handler).Interface());
    }
    public func remove_AccessKeyInvoked(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_AccessKeyInvoked(token: token);
    }
    public func add_ProcessKeyboardAccelerators(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_ProcessKeyboardAccelerators(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CProcessKeyboardAcceleratorEventArgs(cb: handler).Interface());
    }
    public func remove_ProcessKeyboardAccelerators(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_ProcessKeyboardAccelerators(token: token);
    }
    public func add_GettingFocus(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.GettingFocusEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_GettingFocus(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CGettingFocusEventArgs(cb: handler).Interface());
    }
    public func remove_GettingFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_GettingFocus(token: token);
    }
    public func add_LosingFocus(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.LosingFocusEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_LosingFocus(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CLosingFocusEventArgs(cb: handler).Interface());
    }
    public func remove_LosingFocus(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_LosingFocus(token: token);
    }
    public func add_NoFocusCandidateFound(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_NoFocusCandidateFound(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CInput_CNoFocusCandidateFoundEventArgs(cb: handler).Interface());
    }
    public func remove_NoFocusCandidateFound(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_NoFocusCandidateFound(token: token);
    }
    public func add_PreviewKeyDown(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PreviewKeyDown(handler: Microsoft.UI.Xaml.Input.KeyEventHandler(cb: handler).Interface());
    }
    public func remove_PreviewKeyDown(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PreviewKeyDown(token: token);
    }
    public func add_PreviewKeyUp(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_PreviewKeyUp(handler: Microsoft.UI.Xaml.Input.KeyEventHandler(cb: handler).Interface());
    }
    public func remove_PreviewKeyUp(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_PreviewKeyUp(token: token);
    }
    public func add_BringIntoViewRequested(handler : @escaping (Optional<Microsoft.UI.Xaml.UIElement>, Optional<Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.add_BringIntoViewRequested(handler: ClosedGenerics.TypedEventHandler_2__q_CMicrosoft_CUI_CXaml_CUIElement__q_CMicrosoft_CUI_CXaml_CBringIntoViewRequestedEventArgs(cb: handler).Interface());
    }
    public func remove_BringIntoViewRequested(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.remove_BringIntoViewRequested(token: token);
    }
    public func Measure(availableSize : Windows.Foundation.Size) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Measure(availableSize: availableSize);
    }
    public func Arrange(finalRect : Windows.Foundation.Rect) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Arrange(finalRect: finalRect);
    }
    public func CapturePointer(value : Optional<Microsoft.UI.Xaml.Input.Pointer>) throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.CapturePointer(value: value!.Interface());
    }
    public func ReleasePointerCapture(value : Optional<Microsoft.UI.Xaml.Input.Pointer>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.ReleasePointerCapture(value: value!.Interface());
    }
    public func ReleasePointerCaptures() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.ReleasePointerCaptures();
    }
    public func AddHandler(routedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent>, handler : Optional<WinRT.Object>, handledEventsToo : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.AddHandler(routedEvent: routedEvent!.Interface(), handler: handler!.GetInterface(), handledEventsToo: handledEventsToo);
    }
    public func RemoveHandler(routedEvent : Optional<Microsoft.UI.Xaml.RoutedEvent>, handler : Optional<WinRT.Object>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.RemoveHandler(routedEvent: routedEvent!.Interface(), handler: handler!.GetInterface());
    }
    public func TransformToVisual(visual : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Optional<Microsoft.UI.Xaml.Media.GeneralTransform> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.GeneralTransform(plok: _ifc.TransformToVisual(visual: visual!.Interface()));
    }
    public func InvalidateMeasure() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.InvalidateMeasure();
    }
    public func InvalidateArrange() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.InvalidateArrange();
    }
    public func UpdateLayout() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.UpdateLayout();
    }
    public func CancelDirectManipulations() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.CancelDirectManipulations();
    }
    public func StartDragAsync(pointerPoint : Optional<Microsoft.UI.Input.PointerPoint>) throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CWindows_CApplicationModel_CDataTransfer_CDataPackageOperation> {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.StartDragAsync(pointerPoint: pointerPoint!.Interface());
    }
    public func StartDrag(pointerPoint : Optional<Microsoft.UI.Input.PointerPoint>) async throws -> Windows.ApplicationModel.DataTransfer.DataPackageOperation {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.StartDragAsync(pointerPoint: pointerPoint)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public func StartBringIntoView() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.StartBringIntoView();
    }
    public func StartBringIntoView(options : Optional<Microsoft.UI.Xaml.BringIntoViewOptions>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.StartBringIntoViewWithOptions(options: options!.Interface());
    }
    public func TryInvokeKeyboardAccelerator(args : Optional<Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.TryInvokeKeyboardAccelerator(args: args!.Interface());
    }
    public func Focus(value : Microsoft.UI.Xaml.FocusState) throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Focus(value: value);
    }
    public func StartAnimation(animation : Optional<Microsoft.UI.Composition.ICompositionAnimationBase>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.StartAnimation(animation: animation);
    }
    public func StopAnimation(animation : Optional<Microsoft.UI.Composition.ICompositionAnimationBase>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.StopAnimation(animation: animation);
    }
    public var AccessKey : Swift.String {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.AccessKey;
        }
    }
    public var AccessKeyScopeOwner : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.AccessKeyScopeOwner);
        }
    }
    public var ActualOffset : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.ActualOffset;
        }
    }
    public var ActualSize : Windows.Foundation.Numerics.Vector2 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.ActualSize;
        }
    }
    public var AllowDrop : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.AllowDrop;
        }
    }
    public var CacheMode : Optional<Microsoft.UI.Xaml.Media.CacheMode> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.CacheMode(plok: _ifc.CacheMode);
        }
    }
    public var CanBeScrollAnchor : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.CanBeScrollAnchor;
        }
    }
    public var CanDrag : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.CanDrag;
        }
    }
    public var CenterPoint : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.CenterPoint;
        }
    }
    public var Clip : Optional<Microsoft.UI.Xaml.Media.RectangleGeometry> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.RectangleGeometry(plok: _ifc.Clip);
        }
    }
    public var CompositeMode : Microsoft.UI.Xaml.Media.ElementCompositeMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.CompositeMode;
        }
    }
    public var ContextFlyout : Optional<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase(plok: _ifc.ContextFlyout);
        }
    }
    public var DesiredSize : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.DesiredSize;
        }
    }
    public var ExitDisplayModeOnAccessKeyInvoked : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.ExitDisplayModeOnAccessKeyInvoked;
        }
    }
    public var FocusState : Microsoft.UI.Xaml.FocusState {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.FocusState;
        }
    }
    public var HighContrastAdjustment : Microsoft.UI.Xaml.ElementHighContrastAdjustment {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.HighContrastAdjustment;
        }
    }
    public var IsAccessKeyScope : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.IsAccessKeyScope;
        }
    }
    public var IsDoubleTapEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.IsDoubleTapEnabled;
        }
    }
    public var IsHitTestVisible : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.IsHitTestVisible;
        }
    }
    public var IsHoldingEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.IsHoldingEnabled;
        }
    }
    public var IsRightTapEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.IsRightTapEnabled;
        }
    }
    public var IsTabStop : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.IsTabStop;
        }
    }
    public var IsTapEnabled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.IsTapEnabled;
        }
    }
    public var KeyTipHorizontalOffset : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.KeyTipHorizontalOffset;
        }
    }
    public var KeyTipPlacementMode : Microsoft.UI.Xaml.Input.KeyTipPlacementMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.KeyTipPlacementMode;
        }
    }
    public var KeyTipTarget : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.KeyTipTarget);
        }
    }
    public var KeyTipVerticalOffset : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.KeyTipVerticalOffset;
        }
    }
    public var KeyboardAcceleratorPlacementMode : Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.KeyboardAcceleratorPlacementMode;
        }
    }
    public var KeyboardAcceleratorPlacementTarget : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.KeyboardAcceleratorPlacementTarget);
        }
    }
    public var KeyboardAccelerators : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAccelerator> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.KeyboardAccelerators;
        }
    }
    public var Lights : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CXamlLight> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Lights;
        }
    }
    public var ManipulationMode : Microsoft.UI.Xaml.Input.ManipulationModes {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.ManipulationMode;
        }
    }
    public var Opacity : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var OpacityTransition : Optional<Microsoft.UI.Xaml.ScalarTransition> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ScalarTransition(plok: _ifc.OpacityTransition);
        }
    }
    public var PointerCaptures : Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CInput_CPointer> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.PointerCaptures;
        }
    }
    public var Projection : Optional<Microsoft.UI.Xaml.Media.Projection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Projection(plok: _ifc.Projection);
        }
    }
    public var RasterizationScale : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.RasterizationScale;
        }
    }
    public var RenderSize : Windows.Foundation.Size {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.RenderSize;
        }
    }
    public var RenderTransform : Optional<Microsoft.UI.Xaml.Media.Transform> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.RenderTransform);
        }
    }
    public var RenderTransformOrigin : Windows.Foundation.Point {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.RenderTransformOrigin;
        }
    }
    public var Rotation : Swift.Float {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Rotation;
        }
    }
    public var RotationAxis : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.RotationAxis;
        }
    }
    public var RotationTransition : Optional<Microsoft.UI.Xaml.ScalarTransition> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.ScalarTransition(plok: _ifc.RotationTransition);
        }
    }
    public var Scale : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Scale;
        }
    }
    public var ScaleTransition : Optional<Microsoft.UI.Xaml.Vector3Transition> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Vector3Transition(plok: _ifc.ScaleTransition);
        }
    }
    public var Shadow : Optional<Microsoft.UI.Xaml.Media.Shadow> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Shadow(plok: _ifc.Shadow);
        }
    }
    public var TabFocusNavigation : Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.TabFocusNavigation;
        }
    }
    public var TabIndex : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.TabIndex;
        }
    }
    public var Transform3D : Optional<Microsoft.UI.Xaml.Media.Media3D.Transform3D> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Media3D.Transform3D(plok: _ifc.Transform3D);
        }
    }
    public var TransformMatrix : Windows.Foundation.Numerics.Matrix4x4 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.TransformMatrix;
        }
    }
    public var Transitions : Optional<Microsoft.UI.Xaml.Media.Animation.TransitionCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Animation.TransitionCollection(plok: _ifc.Transitions);
        }
    }
    public var Translation : Windows.Foundation.Numerics.Vector3 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Translation;
        }
    }
    public var TranslationTransition : Optional<Microsoft.UI.Xaml.Vector3Transition> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Vector3Transition(plok: _ifc.TranslationTransition);
        }
    }
    public var UseLayoutRounding : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.UseLayoutRounding;
        }
    }
    public var UseSystemFocusVisuals : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.UseSystemFocusVisuals;
        }
    }
    public var Visibility : Microsoft.UI.Xaml.Visibility {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.Visibility;
        }
    }
    public var XYFocusDown : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.XYFocusDown);
        }
    }
    public var XYFocusDownNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.XYFocusDownNavigationStrategy;
        }
    }
    public var XYFocusKeyboardNavigation : Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.XYFocusKeyboardNavigation;
        }
    }
    public var XYFocusLeft : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.XYFocusLeft);
        }
    }
    public var XYFocusLeftNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.XYFocusLeftNavigationStrategy;
        }
    }
    public var XYFocusRight : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.XYFocusRight);
        }
    }
    public var XYFocusRightNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.XYFocusRightNavigationStrategy;
        }
    }
    public var XYFocusUp : Optional<Microsoft.UI.Xaml.DependencyObject> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.DependencyObject(plok: _ifc.XYFocusUp);
        }
    }
    public var XYFocusUpNavigationStrategy : Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try _ifc.XYFocusUpNavigationStrategy;
        }
    }
    public var XamlRoot : Optional<Microsoft.UI.Xaml.XamlRoot> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElement = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.XamlRoot(plok: _ifc.XamlRoot);
        }
    }
    public func get_ProtectedCursor() throws -> Optional<Microsoft.UI.Input.InputCursor> {
        let _ifc : Microsoft.UI.Xaml.IUIElementProtected = try _self.QueryInterface();
        return try Microsoft.UI.Input.InputCursor(plok: _ifc.get_ProtectedCursor());
    }
    public func put_ProtectedCursor(value : Optional<Microsoft.UI.Input.InputCursor>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IUIElementProtected = try _self.QueryInterface();
        return try _ifc.put_ProtectedCursor(value: value!.Interface());
    }
    public var ProtectedCursor : Optional<Microsoft.UI.Input.InputCursor> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IUIElementProtected = try _self.QueryInterface();
        return try Microsoft.UI.Input.InputCursor(plok: _ifc.ProtectedCursor);
        }
    }
    open func OnCreateAutomationPeer() throws -> Optional<Microsoft.UI.Xaml.Automation.Peers.AutomationPeer> {
    return nil;
    }
    open func OnDisconnectVisualChildren() throws -> Void {
    }
    open func FindSubElementsForTouchTargeting(point : Windows.Foundation.Point, boundingRect : Windows.Foundation.Rect) throws -> Optional<ClosedGenerics.IIterable_1__cg_CWindows_CFoundation_CCollections_IIterable_1__q_CWindows_CFoundation_CPoint> {
    return nil;
    }
    open func GetChildrenInTabFocusOrder() throws -> Optional<ClosedGenerics.IIterable_1__q_CMicrosoft_CUI_CXaml_CDependencyObject> {
    return nil;
    }
    open func OnKeyboardAcceleratorInvoked(args : Optional<Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs>) throws -> Void {
    }
    open func OnProcessKeyboardAccelerators(args : Optional<Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs>) throws -> Void {
    }
    open func OnBringIntoViewRequested(e : Optional<Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs>) throws -> Void {
    }
    open func PopulatePropertyInfoOverride(propertyName : Swift.String, animationPropertyInfo : Optional<Microsoft.UI.Composition.AnimationPropertyInfo>) throws -> Void {
    }
    public func PopulatePropertyInfo(propertyName : Swift.String, propertyInfo : Optional<Microsoft.UI.Composition.AnimationPropertyInfo>) throws -> Void {
        let _ifc : Microsoft.UI.Composition.IAnimationObject = try _self.QueryInterface();
        return try _ifc.PopulatePropertyInfo(propertyName: propertyName, propertyInfo: propertyInfo!.Interface());
    }
    // instance interface not needed: Microsoft.UI.Composition.IVisualElement
    public func GetVisualInternal() throws -> Optional<Microsoft.UI.Composition.Visual> {
        let _ifc : Microsoft.UI.Composition.IVisualElement2 = try _self.QueryInterface();
        return try Microsoft.UI.Composition.Visual(plok: _ifc.GetVisualInternal());
    }
}

// type: Microsoft.UI.Xaml.UnhandledExceptionEventArgs
// runtime class
public class UnhandledExceptionEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IUnhandledExceptionEventArgs;
    public init(plok: Microsoft.UI.Xaml.IUnhandledExceptionEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IUnhandledExceptionEventArgs { return _self; }
    // method not needed: get_Exception
    // method not needed: get_Message
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.UnhandledExceptionEventHandler
// delegate type
open class IUnhandledExceptionEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3427c1b6, Data2: 0x5eca, Data3 : 0x5631, Data4 : (0x84, 0xb8, 0x5b, 0xae, 0x73, 0x2f, 0xb6, 0x7f)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.UnhandledExceptionEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.IUnhandledExceptionEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class UnhandledExceptionEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.IUnhandledExceptionEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: UnhandledExceptionEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: UnhandledExceptionEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventArgs>>) in
        guard let self = UnhandledExceptionEventHandler.from_UnhandledExceptionEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.UnhandledExceptionEventArgs(plok: Microsoft.UI.Xaml.IUnhandledExceptionEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: UnhandledExceptionEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.UnhandledExceptionEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.UnhandledExceptionEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CIUnhandledExceptionEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_UnhandledExceptionEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> UnhandledExceptionEventHandler? {
        return pUnk?.bindMemory(to: UnhandledExceptionEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.UnhandledExceptionEventArgs>) throws -> Void {
        if let cb = _cb {
            try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.IUnhandledExceptionEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.IUnhandledExceptionEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class foo_UnhandledExceptionEventHandler
{
    private var _self : Microsoft.UI.Xaml.IUnhandledExceptionEventHandler;
    public init(plok: Microsoft.UI.Xaml.IUnhandledExceptionEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.UnhandledExceptionEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.IUnhandledExceptionEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Vector3Transition
// runtime class
open class Vector3Transition
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IVector3Transition;
    public init(plok: Microsoft.UI.Xaml.IVector3Transition?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IVector3Transition { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IVector3TransitionFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IVector3TransitionFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Vector3Transition");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Duration
    // method not needed: put_Duration
    // method not needed: get_Components
    // method not needed: put_Components
}

// type: Microsoft.UI.Xaml.VerticalAlignment
// enum type
public typealias VerticalAlignment = _q_CMicrosoft_CUI_CXaml_CVerticalAlignment;

// type: Microsoft.UI.Xaml.Visibility
// enum type
public typealias Visibility = _q_CMicrosoft_CUI_CXaml_CVisibility;

// type: Microsoft.UI.Xaml.Window
// runtime class
open class Window
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IWindow;
    public init(plok: Microsoft.UI.Xaml.IWindow?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IWindow { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.IWindowFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IWindowFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Window");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IWindowStatics {
        static var x : IWindowStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Window")
    }
    public static var WindowStatics : IWindowStatics {
        _IWindowStatics.x
    }
    public static func get_Current() throws -> Optional<Microsoft.UI.Xaml.Window> {
        return try Microsoft.UI.Xaml.Window(plok: WindowStatics.get_Current());
    }
    public static var Current : Optional<Microsoft.UI.Xaml.Window> {
        get throws {
        return try Microsoft.UI.Xaml.Window(plok: WindowStatics.Current);
        }
    }
    public func get_Bounds() throws -> Windows.Foundation.Rect {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.get_Bounds();
    }
    public func get_Visible() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.get_Visible();
    }
    public func get_Content() throws -> Optional<Microsoft.UI.Xaml.UIElement> {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.get_Content());
    }
    public func put_Content(value : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.put_Content(value: value!.Interface());
    }
    public func get_CoreWindow() throws -> Optional<Windows.UI.Core.CoreWindow> {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Windows.UI.Core.CoreWindow(plok: _ifc.get_CoreWindow());
    }
    public func get_Compositor() throws -> Optional<Microsoft.UI.Composition.Compositor> {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Microsoft.UI.Composition.Compositor(plok: _ifc.get_Compositor());
    }
    public func get_Dispatcher() throws -> Optional<Windows.UI.Core.CoreDispatcher> {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Windows.UI.Core.CoreDispatcher(plok: _ifc.get_Dispatcher());
    }
    public func get_DispatcherQueue() throws -> Optional<Microsoft.UI.Dispatching.DispatcherQueue> {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Microsoft.UI.Dispatching.DispatcherQueue(plok: _ifc.get_DispatcherQueue());
    }
    public func get_Title() throws -> Swift.String {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.get_Title();
    }
    public func put_Title(value : Swift.String) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.put_Title(value: value);
    }
    public func get_ExtendsContentIntoTitleBar() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.get_ExtendsContentIntoTitleBar();
    }
    public func put_ExtendsContentIntoTitleBar(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.put_ExtendsContentIntoTitleBar(value: value);
    }
    public func add_Activated(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.WindowActivatedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.add_Activated(handler: ClosedGenerics.TypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowActivatedEventArgs(cb: handler).Interface());
    }
    public func remove_Activated(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.remove_Activated(token: token);
    }
    public func add_Closed(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.WindowEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.add_Closed(handler: ClosedGenerics.TypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowEventArgs(cb: handler).Interface());
    }
    public func remove_Closed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.remove_Closed(token: token);
    }
    public func add_SizeChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.WindowSizeChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.add_SizeChanged(handler: ClosedGenerics.TypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowSizeChangedEventArgs(cb: handler).Interface());
    }
    public func remove_SizeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.remove_SizeChanged(token: token);
    }
    public func add_VisibilityChanged(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.add_VisibilityChanged(handler: ClosedGenerics.TypedEventHandler_2_IInspectable__q_CMicrosoft_CUI_CXaml_CWindowVisibilityChangedEventArgs(cb: handler).Interface());
    }
    public func remove_VisibilityChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.remove_VisibilityChanged(token: token);
    }
    public func Activate() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.Activate();
    }
    public func Close() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.Close();
    }
    public func SetTitleBar(titleBar : Optional<Microsoft.UI.Xaml.UIElement>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.SetTitleBar(titleBar: titleBar!.Interface());
    }
    public var Bounds : Windows.Foundation.Rect {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.Bounds;
        }
    }
    public var Compositor : Optional<Microsoft.UI.Composition.Compositor> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Microsoft.UI.Composition.Compositor(plok: _ifc.Compositor);
        }
    }
    public var Content : Optional<Microsoft.UI.Xaml.UIElement> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.UIElement(plok: _ifc.Content);
        }
    }
    public var CoreWindow : Optional<Windows.UI.Core.CoreWindow> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Windows.UI.Core.CoreWindow(plok: _ifc.CoreWindow);
        }
    }
    public var Dispatcher : Optional<Windows.UI.Core.CoreDispatcher> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Windows.UI.Core.CoreDispatcher(plok: _ifc.Dispatcher);
        }
    }
    public var DispatcherQueue : Optional<Microsoft.UI.Dispatching.DispatcherQueue> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try Microsoft.UI.Dispatching.DispatcherQueue(plok: _ifc.DispatcherQueue);
        }
    }
    public var ExtendsContentIntoTitleBar : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.ExtendsContentIntoTitleBar;
        }
    }
    public var Title : Swift.String {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.Title;
        }
    }
    public var Visible : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.IWindow = try _self.QueryInterface();
        return try _ifc.Visible;
        }
    }
}

// type: Microsoft.UI.Xaml.WindowActivatedEventArgs
// runtime class
public class WindowActivatedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IWindowActivatedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IWindowActivatedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IWindowActivatedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_WindowActivationState
}

// type: Microsoft.UI.Xaml.WindowEventArgs
// runtime class
public class WindowEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IWindowEventArgs;
    public init(plok: Microsoft.UI.Xaml.IWindowEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IWindowEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.WindowSizeChangedEventArgs
// runtime class
public class WindowSizeChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IWindowSizeChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IWindowSizeChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IWindowSizeChangedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_Size
}

// type: Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs
// runtime class
public class WindowVisibilityChangedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs;
    public init(plok: Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IWindowVisibilityChangedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_Visible
}

// type: Microsoft.UI.Xaml.XamlRoot
// runtime class
public class XamlRoot
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.IXamlRoot;
    public init(plok: Microsoft.UI.Xaml.IXamlRoot?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.IXamlRoot { return _self; }
    // method not needed: get_Content
    // method not needed: get_Size
    // method not needed: get_RasterizationScale
    // method not needed: get_IsHostVisible
    // method not needed: add_Changed
    // method not needed: remove_Changed
}

}
extension Microsoft.UI.Xaml.ApplicationHighContrastAdjustment {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_None;
        }
    }
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationHighContrastAdjustment_Auto;
        }
    }
}
extension Microsoft.UI.Xaml.ApplicationTheme {
    public static var Light : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Light;
        }
    }
    public static var Dark : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CApplicationTheme_Dark;
        }
    }
}
extension Microsoft.UI.Xaml.ElementHighContrastAdjustment {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_None;
        }
    }
    public static var Application : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Application;
        }
    }
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementHighContrastAdjustment_Auto;
        }
    }
}
extension Microsoft.UI.Xaml.ElementSoundMode {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementSoundMode_Default;
        }
    }
    public static var FocusOnly : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementSoundMode_FocusOnly;
        }
    }
    public static var Off : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementSoundMode_Off;
        }
    }
}
extension Microsoft.UI.Xaml.ElementTheme {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementTheme_Default;
        }
    }
    public static var Light : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementTheme_Light;
        }
    }
    public static var Dark : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CElementTheme_Dark;
        }
    }
}
extension Microsoft.UI.Xaml.FlowDirection {
    public static var LeftToRight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFlowDirection_LeftToRight;
        }
    }
    public static var RightToLeft : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFlowDirection_RightToLeft;
        }
    }
}
extension Microsoft.UI.Xaml.FocusState {
    public static var Unfocused : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusState_Unfocused;
        }
    }
    public static var Pointer : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusState_Pointer;
        }
    }
    public static var Keyboard : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusState_Keyboard;
        }
    }
    public static var Programmatic : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusState_Programmatic;
        }
    }
}
extension Microsoft.UI.Xaml.FocusVisualKind {
    public static var DottedLine : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_DottedLine;
        }
    }
    public static var HighVisibility : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_HighVisibility;
        }
    }
    public static var Reveal : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CFocusVisualKind_Reveal;
        }
    }
}
extension Microsoft.UI.Xaml.HorizontalAlignment {
    public static var Left : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Left;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Center;
        }
    }
    public static var Right : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Right;
        }
    }
    public static var Stretch : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CHorizontalAlignment_Stretch;
        }
    }
}
extension Microsoft.UI.Xaml.LineStackingStrategy {
    public static var MaxHeight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_MaxHeight;
        }
    }
    public static var BlockLineHeight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BlockLineHeight;
        }
    }
    public static var BaselineToBaseline : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CLineStackingStrategy_BaselineToBaseline;
        }
    }
}
extension Microsoft.UI.Xaml.OpticalMarginAlignment {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_None;
        }
    }
    public static var TrimSideBearings : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_COpticalMarginAlignment_TrimSideBearings;
        }
    }
}
extension Microsoft.UI.Xaml.TextAlignment {
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Center;
        }
    }
    public static var Left : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Left;
        }
    }
    public static var Start : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Start;
        }
    }
    public static var Right : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Right;
        }
    }
    public static var End : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_End;
        }
    }
    public static var Justify : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_Justify;
        }
    }
    public static var DetectFromContent : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextAlignment_DetectFromContent;
        }
    }
}
extension Microsoft.UI.Xaml.TextLineBounds {
    public static var Full : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Full;
        }
    }
    public static var TrimToCapHeight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToCapHeight;
        }
    }
    public static var TrimToBaseline : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_TrimToBaseline;
        }
    }
    public static var Tight : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextLineBounds_Tight;
        }
    }
}
extension Microsoft.UI.Xaml.TextReadingOrder {
    public static var Default : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_Default;
        }
    }
    public static var UseFlowDirection : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_UseFlowDirection;
        }
    }
    public static var DetectFromContent : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextReadingOrder_DetectFromContent;
        }
    }
}
extension Microsoft.UI.Xaml.TextTrimming {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_None;
        }
    }
    public static var CharacterEllipsis : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_CharacterEllipsis;
        }
    }
    public static var WordEllipsis : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_WordEllipsis;
        }
    }
    public static var Clip : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextTrimming_Clip;
        }
    }
}
extension Microsoft.UI.Xaml.TextWrapping {
    public static var NoWrap : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextWrapping_NoWrap;
        }
    }
    public static var Wrap : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextWrapping_Wrap;
        }
    }
    public static var WrapWholeWords : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CTextWrapping_WrapWholeWords;
        }
    }
}
extension Microsoft.UI.Xaml.VerticalAlignment {
    public static var Top : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Top;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Center;
        }
    }
    public static var Bottom : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Bottom;
        }
    }
    public static var Stretch : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CVerticalAlignment_Stretch;
        }
    }
}
extension Microsoft.UI.Xaml.Visibility {
    public static var Visible : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CVisibility_Visible;
        }
    }
    public static var Collapsed : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CVisibility_Collapsed;
        }
    }
}
