// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsApp;
import WindowsSdk;
import CWindowsSdk;

extension Microsoft.Windows.System.Power {
// type: Microsoft.Windows.System.Power.BatteryStatus
// enum type
public typealias BatteryStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus;

// type: Microsoft.Windows.System.Power.DisplayStatus
// enum type
public typealias DisplayStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus;

// type: Microsoft.Windows.System.Power.EffectivePowerMode
// enum type
public typealias EffectivePowerMode = _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode;

// type: Microsoft.Windows.System.Power.EnergySaverStatus
// enum type
public typealias EnergySaverStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus;

// type: Microsoft.Windows.System.Power.IPowerManagerStatics
// interface type
open class IPowerManagerStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfa3554cc, Data2: 0xbe1c, Data3 : 0x534c, Data4 : (0xbf, 0xf8, 0x72, 0xdf, 0x78, 0xe9, 0xf4, 0xa4)) }
    // [IsSpecialName] Microsoft.Windows.System.Power.EnergySaverStatus get_EnergySaverStatus()
    private func _n_get_EnergySaverStatus(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EnergySaverStatus(pThis, __presult))
        }
    }
    public func get_EnergySaverStatus() throws -> Microsoft.Windows.System.Power.EnergySaverStatus {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Uninitialized;
        try self._n_get_EnergySaverStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EnergySaverStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_EnergySaverStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnergySaverStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_EnergySaverStatusChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EnergySaverStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EnergySaverStatusChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_EnergySaverStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnergySaverStatusChanged(pThis, token))
        }
    }
    public func remove_EnergySaverStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EnergySaverStatusChanged(token);
    }
    // [IsSpecialName] Microsoft.Windows.System.Power.BatteryStatus get_BatteryStatus()
    private func _n_get_BatteryStatus(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BatteryStatus(pThis, __presult))
        }
    }
    public func get_BatteryStatus() throws -> Microsoft.Windows.System.Power.BatteryStatus {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_NotPresent;
        try self._n_get_BatteryStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_BatteryStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_BatteryStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_BatteryStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_BatteryStatusChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_BatteryStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_BatteryStatusChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_BatteryStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_BatteryStatusChanged(pThis, token))
        }
    }
    public func remove_BatteryStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_BatteryStatusChanged(token);
    }
    // [IsSpecialName] Microsoft.Windows.System.Power.PowerSupplyStatus get_PowerSupplyStatus()
    private func _n_get_PowerSupplyStatus(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerSupplyStatus(pThis, __presult))
        }
    }
    public func get_PowerSupplyStatus() throws -> Microsoft.Windows.System.Power.PowerSupplyStatus {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_NotPresent;
        try self._n_get_PowerSupplyStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PowerSupplyStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_PowerSupplyStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PowerSupplyStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_PowerSupplyStatusChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PowerSupplyStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PowerSupplyStatusChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PowerSupplyStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PowerSupplyStatusChanged(pThis, token))
        }
    }
    public func remove_PowerSupplyStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PowerSupplyStatusChanged(token);
    }
    // [IsSpecialName] System.Int32 get_RemainingChargePercent()
    private func _n_get_RemainingChargePercent(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemainingChargePercent(pThis, __presult))
        }
    }
    public func get_RemainingChargePercent() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_RemainingChargePercent(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RemainingChargePercentChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_RemainingChargePercentChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RemainingChargePercentChanged(pThis, handler, __presult))
        }
    }
    public func add_RemainingChargePercentChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RemainingChargePercentChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RemainingChargePercentChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_RemainingChargePercentChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RemainingChargePercentChanged(pThis, token))
        }
    }
    public func remove_RemainingChargePercentChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RemainingChargePercentChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.TimeSpan get_RemainingDischargeTime()
    private func _n_get_RemainingDischargeTime(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CTimeSpan>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RemainingDischargeTime(pThis, __presult))
        }
    }
    public func get_RemainingDischargeTime() throws -> Windows.Foundation.TimeSpan {
        var __result : _q_CWindows_CFoundation_CTimeSpan = _q_CWindows_CFoundation_CTimeSpan(Duration: 0);
        try self._n_get_RemainingDischargeTime(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_RemainingDischargeTimeChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_RemainingDischargeTimeChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_RemainingDischargeTimeChanged(pThis, handler, __presult))
        }
    }
    public func add_RemainingDischargeTimeChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_RemainingDischargeTimeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_RemainingDischargeTimeChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_RemainingDischargeTimeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RemainingDischargeTimeChanged(pThis, token))
        }
    }
    public func remove_RemainingDischargeTimeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_RemainingDischargeTimeChanged(token);
    }
    // [IsSpecialName] Microsoft.Windows.System.Power.PowerSourceKind get_PowerSourceKind()
    private func _n_get_PowerSourceKind(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PowerSourceKind(pThis, __presult))
        }
    }
    public func get_PowerSourceKind() throws -> Microsoft.Windows.System.Power.PowerSourceKind {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind = _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind_AC;
        try self._n_get_PowerSourceKind(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_PowerSourceKindChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_PowerSourceKindChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_PowerSourceKindChanged(pThis, handler, __presult))
        }
    }
    public func add_PowerSourceKindChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_PowerSourceKindChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_PowerSourceKindChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_PowerSourceKindChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_PowerSourceKindChanged(pThis, token))
        }
    }
    public func remove_PowerSourceKindChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_PowerSourceKindChanged(token);
    }
    // [IsSpecialName] Microsoft.Windows.System.Power.DisplayStatus get_DisplayStatus()
    private func _n_get_DisplayStatus(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayStatus(pThis, __presult))
        }
    }
    public func get_DisplayStatus() throws -> Microsoft.Windows.System.Power.DisplayStatus {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_Off;
        try self._n_get_DisplayStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DisplayStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_DisplayStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DisplayStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_DisplayStatusChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DisplayStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DisplayStatusChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DisplayStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DisplayStatusChanged(pThis, token))
        }
    }
    public func remove_DisplayStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DisplayStatusChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SystemIdleStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_SystemIdleStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SystemIdleStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_SystemIdleStatusChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SystemIdleStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SystemIdleStatusChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_SystemIdleStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SystemIdleStatusChanged(pThis, token))
        }
    }
    public func remove_SystemIdleStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SystemIdleStatusChanged(token);
    }
    // [IsSpecialName] Windows.Foundation.IAsyncOperation<Microsoft.Windows.System.Power.EffectivePowerMode> get_EffectivePowerMode()
    private func _n_get_EffectivePowerMode(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode>>>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectivePowerMode(pThis, __presult))
        }
    }
    public func get_EffectivePowerMode() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode>> = nil;
        try self._n_get_EffectivePowerMode(&__result);
        return ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode(consuming: __result);
    }
    public func get_EffectivePowerMode() async throws -> Microsoft.Windows.System.Power.EffectivePowerMode {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.get_EffectivePowerMode()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EffectivePowerModeChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_EffectivePowerModeChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EffectivePowerModeChanged(pThis, handler, __presult))
        }
    }
    public func add_EffectivePowerModeChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EffectivePowerModeChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EffectivePowerModeChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_EffectivePowerModeChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EffectivePowerModeChanged(pThis, token))
        }
    }
    public func remove_EffectivePowerModeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EffectivePowerModeChanged(token);
    }
    // [IsSpecialName] Microsoft.Windows.System.Power.UserPresenceStatus get_UserPresenceStatus()
    private func _n_get_UserPresenceStatus(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UserPresenceStatus(pThis, __presult))
        }
    }
    public func get_UserPresenceStatus() throws -> Microsoft.Windows.System.Power.UserPresenceStatus {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus_Present;
        try self._n_get_UserPresenceStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_UserPresenceStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_UserPresenceStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_UserPresenceStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_UserPresenceStatusChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_UserPresenceStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_UserPresenceStatusChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_UserPresenceStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UserPresenceStatusChanged(pThis, token))
        }
    }
    public func remove_UserPresenceStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_UserPresenceStatusChanged(token);
    }
    // [IsSpecialName] Microsoft.Windows.System.Power.SystemSuspendStatus get_SystemSuspendStatus()
    private func _n_get_SystemSuspendStatus(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SystemSuspendStatus(pThis, __presult))
        }
    }
    public func get_SystemSuspendStatus() throws -> Microsoft.Windows.System.Power.SystemSuspendStatus {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_Uninitialized;
        try self._n_get_SystemSuspendStatus(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_SystemSuspendStatusChanged(Windows.Foundation.EventHandler<System.Object>)
    private func _n_add_SystemSuspendStatusChanged(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_SystemSuspendStatusChanged(pThis, handler, __presult))
        }
    }
    public func add_SystemSuspendStatusChanged(handler : Optional<ClosedGenerics.IEventHandler_1_IInspectable>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_SystemSuspendStatusChanged(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_SystemSuspendStatusChanged(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_SystemSuspendStatusChanged(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_SystemSuspendStatusChanged(pThis, token))
        }
    }
    public func remove_SystemSuspendStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_SystemSuspendStatusChanged(token);
    }
    public var BatteryStatus : Microsoft.Windows.System.Power.BatteryStatus {
        get throws {
            return try get_BatteryStatus();
        }
    }
    public var DisplayStatus : Microsoft.Windows.System.Power.DisplayStatus {
        get throws {
            return try get_DisplayStatus();
        }
    }
    public var EffectivePowerMode : Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode> {
        get throws {
            return try get_EffectivePowerMode();
        }
    }
    public var EnergySaverStatus : Microsoft.Windows.System.Power.EnergySaverStatus {
        get throws {
            return try get_EnergySaverStatus();
        }
    }
    public var PowerSourceKind : Microsoft.Windows.System.Power.PowerSourceKind {
        get throws {
            return try get_PowerSourceKind();
        }
    }
    public var PowerSupplyStatus : Microsoft.Windows.System.Power.PowerSupplyStatus {
        get throws {
            return try get_PowerSupplyStatus();
        }
    }
    public var RemainingChargePercent : Swift.Int32 {
        get throws {
            return try get_RemainingChargePercent();
        }
    }
    public var RemainingDischargeTime : Windows.Foundation.TimeSpan {
        get throws {
            return try get_RemainingDischargeTime();
        }
    }
    public var SystemSuspendStatus : Microsoft.Windows.System.Power.SystemSuspendStatus {
        get throws {
            return try get_SystemSuspendStatus();
        }
    }
    public var UserPresenceStatus : Microsoft.Windows.System.Power.UserPresenceStatus {
        get throws {
            return try get_UserPresenceStatus();
        }
    }
} // IPowerManagerStatics


// type: Microsoft.Windows.System.Power.IPowerManagerStatics2
// interface type
open class IPowerManagerStatics2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61f3cc25, Data2: 0x65b4, Data3 : 0x5def, Data4 : (0x9c, 0x9b, 0x99, 0x0c, 0xef, 0x3b, 0x08, 0x33)) }
    // [IsSpecialName] Microsoft.Windows.System.Power.EffectivePowerMode get_EffectivePowerMode2()
    private func _n_get_EffectivePowerMode2(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode>?) throws {
        return try perform(as: _q_CMicrosoft_CWindows_CSystem_CPower_CIPowerManagerStatics2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EffectivePowerMode2(pThis, __presult))
        }
    }
    public func get_EffectivePowerMode2() throws -> Microsoft.Windows.System.Power.EffectivePowerMode {
        var __result : _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode = _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_BatterySaver;
        try self._n_get_EffectivePowerMode2(&__result);
        return __result;
    }
    public var EffectivePowerMode2 : Microsoft.Windows.System.Power.EffectivePowerMode {
        get throws {
            return try get_EffectivePowerMode2();
        }
    }
} // IPowerManagerStatics2


// type: Microsoft.Windows.System.Power.PowerManager
// static class
public class PowerManager
{
    private struct _IPowerManagerStatics {
        static var x : IPowerManagerStatics =
            try! RoGetActivationFactory("Microsoft.Windows.System.Power.PowerManager")
    }
    public static var PowerManagerStatics : IPowerManagerStatics {
        _IPowerManagerStatics.x
    }
    public static func get_EnergySaverStatus() throws -> Microsoft.Windows.System.Power.EnergySaverStatus {
        return try PowerManagerStatics.get_EnergySaverStatus();
    }
    public static func add_EnergySaverStatusChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_EnergySaverStatusChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_EnergySaverStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_EnergySaverStatusChanged(token: token);
    }
    public static func get_BatteryStatus() throws -> Microsoft.Windows.System.Power.BatteryStatus {
        return try PowerManagerStatics.get_BatteryStatus();
    }
    public static func add_BatteryStatusChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_BatteryStatusChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_BatteryStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_BatteryStatusChanged(token: token);
    }
    public static func get_PowerSupplyStatus() throws -> Microsoft.Windows.System.Power.PowerSupplyStatus {
        return try PowerManagerStatics.get_PowerSupplyStatus();
    }
    public static func add_PowerSupplyStatusChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_PowerSupplyStatusChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_PowerSupplyStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_PowerSupplyStatusChanged(token: token);
    }
    public static func get_RemainingChargePercent() throws -> Swift.Int32 {
        return try PowerManagerStatics.get_RemainingChargePercent();
    }
    public static func add_RemainingChargePercentChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_RemainingChargePercentChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_RemainingChargePercentChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_RemainingChargePercentChanged(token: token);
    }
    public static func get_RemainingDischargeTime() throws -> Windows.Foundation.TimeSpan {
        return try PowerManagerStatics.get_RemainingDischargeTime();
    }
    public static func add_RemainingDischargeTimeChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_RemainingDischargeTimeChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_RemainingDischargeTimeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_RemainingDischargeTimeChanged(token: token);
    }
    public static func get_PowerSourceKind() throws -> Microsoft.Windows.System.Power.PowerSourceKind {
        return try PowerManagerStatics.get_PowerSourceKind();
    }
    public static func add_PowerSourceKindChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_PowerSourceKindChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_PowerSourceKindChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_PowerSourceKindChanged(token: token);
    }
    public static func get_DisplayStatus() throws -> Microsoft.Windows.System.Power.DisplayStatus {
        return try PowerManagerStatics.get_DisplayStatus();
    }
    public static func add_DisplayStatusChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_DisplayStatusChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_DisplayStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_DisplayStatusChanged(token: token);
    }
    public static func add_SystemIdleStatusChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_SystemIdleStatusChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_SystemIdleStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_SystemIdleStatusChanged(token: token);
    }
    public static func get_EffectivePowerMode() throws -> Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode> {
        return try PowerManagerStatics.get_EffectivePowerMode();
    }
    public static func get_EffectivePowerMode() async throws -> Microsoft.Windows.System.Power.EffectivePowerMode {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: Self.get_EffectivePowerMode()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public static func add_EffectivePowerModeChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_EffectivePowerModeChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_EffectivePowerModeChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_EffectivePowerModeChanged(token: token);
    }
    public static func get_UserPresenceStatus() throws -> Microsoft.Windows.System.Power.UserPresenceStatus {
        return try PowerManagerStatics.get_UserPresenceStatus();
    }
    public static func add_UserPresenceStatusChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_UserPresenceStatusChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_UserPresenceStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_UserPresenceStatusChanged(token: token);
    }
    public static func get_SystemSuspendStatus() throws -> Microsoft.Windows.System.Power.SystemSuspendStatus {
        return try PowerManagerStatics.get_SystemSuspendStatus();
    }
    public static func add_SystemSuspendStatusChanged(handler : @escaping (Optional<WinRT.Object>, Optional<WinRT.Object>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        return try PowerManagerStatics.add_SystemSuspendStatusChanged(handler: ClosedGenerics.EventHandler_1_IInspectable(cb: handler).Interface());
    }
    public static func remove_SystemSuspendStatusChanged(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        return try PowerManagerStatics.remove_SystemSuspendStatusChanged(token: token);
    }
    public static var BatteryStatus : Microsoft.Windows.System.Power.BatteryStatus {
        get throws {
        return try PowerManagerStatics.BatteryStatus;
        }
    }
    public static var DisplayStatus : Microsoft.Windows.System.Power.DisplayStatus {
        get throws {
        return try PowerManagerStatics.DisplayStatus;
        }
    }
    public static var EffectivePowerMode : Optional<ClosedGenerics.IAsyncOperation_1__q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode> {
        get throws {
        return try PowerManagerStatics.EffectivePowerMode;
        }
    }
    public static var EnergySaverStatus : Microsoft.Windows.System.Power.EnergySaverStatus {
        get throws {
        return try PowerManagerStatics.EnergySaverStatus;
        }
    }
    public static var PowerSourceKind : Microsoft.Windows.System.Power.PowerSourceKind {
        get throws {
        return try PowerManagerStatics.PowerSourceKind;
        }
    }
    public static var PowerSupplyStatus : Microsoft.Windows.System.Power.PowerSupplyStatus {
        get throws {
        return try PowerManagerStatics.PowerSupplyStatus;
        }
    }
    public static var RemainingChargePercent : Swift.Int32 {
        get throws {
        return try PowerManagerStatics.RemainingChargePercent;
        }
    }
    public static var RemainingDischargeTime : Windows.Foundation.TimeSpan {
        get throws {
        return try PowerManagerStatics.RemainingDischargeTime;
        }
    }
    public static var SystemSuspendStatus : Microsoft.Windows.System.Power.SystemSuspendStatus {
        get throws {
        return try PowerManagerStatics.SystemSuspendStatus;
        }
    }
    public static var UserPresenceStatus : Microsoft.Windows.System.Power.UserPresenceStatus {
        get throws {
        return try PowerManagerStatics.UserPresenceStatus;
        }
    }
    private struct _IPowerManagerStatics2 {
        static var x : IPowerManagerStatics2 =
            try! RoGetActivationFactory("Microsoft.Windows.System.Power.PowerManager")
    }
    public static var PowerManagerStatics2 : IPowerManagerStatics2 {
        _IPowerManagerStatics2.x
    }
    public static func get_EffectivePowerMode2() throws -> Microsoft.Windows.System.Power.EffectivePowerMode {
        return try PowerManagerStatics2.get_EffectivePowerMode2();
    }
    public static var EffectivePowerMode2 : Microsoft.Windows.System.Power.EffectivePowerMode {
        get throws {
        return try PowerManagerStatics2.EffectivePowerMode2;
        }
    }
}

// type: Microsoft.Windows.System.Power.PowerSourceKind
// enum type
public typealias PowerSourceKind = _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind;

// type: Microsoft.Windows.System.Power.PowerSupplyStatus
// enum type
public typealias PowerSupplyStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus;

// type: Microsoft.Windows.System.Power.SystemSuspendStatus
// enum type
public typealias SystemSuspendStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus;

// type: Microsoft.Windows.System.Power.UserPresenceStatus
// enum type
public typealias UserPresenceStatus = _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus;

}
extension Microsoft.Windows.System.Power.BatteryStatus {
    public static var NotPresent : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_NotPresent;
        }
    }
    public static var Discharging : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Discharging;
        }
    }
    public static var Idle : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Idle;
        }
    }
    public static var Charging : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CBatteryStatus_Charging;
        }
    }
}
extension Microsoft.Windows.System.Power.DisplayStatus {
    public static var Off : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_Off;
        }
    }
    public static var On : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_On;
        }
    }
    public static var Dimmed : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CDisplayStatus_Dimmed;
        }
    }
}
extension Microsoft.Windows.System.Power.EffectivePowerMode {
    public static var BatterySaver : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_BatterySaver;
        }
    }
    public static var BetterBattery : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_BetterBattery;
        }
    }
    public static var Balanced : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_Balanced;
        }
    }
    public static var HighPerformance : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_HighPerformance;
        }
    }
    public static var MaxPerformance : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_MaxPerformance;
        }
    }
    public static var GameMode : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_GameMode;
        }
    }
    public static var MixedReality : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEffectivePowerMode_MixedReality;
        }
    }
}
extension Microsoft.Windows.System.Power.EnergySaverStatus {
    public static var Uninitialized : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Uninitialized;
        }
    }
    public static var Disabled : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Disabled;
        }
    }
    public static var Off : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_Off;
        }
    }
    public static var On : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CEnergySaverStatus_On;
        }
    }
}
extension Microsoft.Windows.System.Power.PowerSourceKind {
    public static var AC : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind_AC;
        }
    }
    public static var DC : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSourceKind_DC;
        }
    }
}
extension Microsoft.Windows.System.Power.PowerSupplyStatus {
    public static var NotPresent : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_NotPresent;
        }
    }
    public static var Inadequate : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_Inadequate;
        }
    }
    public static var Adequate : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CPowerSupplyStatus_Adequate;
        }
    }
}
extension Microsoft.Windows.System.Power.SystemSuspendStatus {
    public static var Uninitialized : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_Uninitialized;
        }
    }
    public static var Entering : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_Entering;
        }
    }
    public static var AutoResume : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_AutoResume;
        }
    }
    public static var ManualResume : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CSystemSuspendStatus_ManualResume;
        }
    }
}
extension Microsoft.Windows.System.Power.UserPresenceStatus {
    public static var Present : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus_Present;
        }
    }
    public static var Absent : Self {
        get {
            return _q_CMicrosoft_CWindows_CSystem_CPower_CUserPresenceStatus_Absent;
        }
    }
}
