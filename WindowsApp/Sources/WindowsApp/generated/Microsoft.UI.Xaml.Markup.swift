// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsApp;
import WindowsSdk;
import CWindowsSdk;

extension Microsoft.UI.Xaml.Markup {
// type: Microsoft.UI.Xaml.Markup.IXamlMember
// interface type
open class IXamlMember
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbf3a2913, Data2: 0x5c63, Data3 : 0x50ec, Data4 : (0x86, 0x60, 0x61, 0x80, 0x9b, 0xe7, 0xb9, 0xb9)) }
    // [IsSpecialName] bool get_IsAttachable()
    private func _n_get_IsAttachable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAttachable(pThis, __presult))
        }
    }
    public func get_IsAttachable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsAttachable(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsDependencyProperty()
    private func _n_get_IsDependencyProperty(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDependencyProperty(pThis, __presult))
        }
    }
    public func get_IsDependencyProperty() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsDependencyProperty(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsReadOnly()
    private func _n_get_IsReadOnly(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnly(pThis, __presult))
        }
    }
    public func get_IsReadOnly() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsReadOnly(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_Name()
    private func _n_get_Name(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, __presult))
        }
    }
    public func get_Name() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_Name(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Markup.IXamlType get_TargetType()
    private func _n_get_TargetType(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetType(pThis, __presult))
        }
    }
    public func get_TargetType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_get_TargetType(&__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Markup.IXamlType get_Type()
    private func _n_get_Type(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, __presult))
        }
    }
    public func get_Type() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_get_Type(&__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
    }
    // System.Object GetValue(System.Object)
    private func _n_GetValue(_ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetValue(pThis, instance, __presult))
        }
    }
    public func GetValue(instance : Optional<WinRT.IInspectable>) throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_GetValue(RawPointer(instance), &__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // void SetValue(System.Object, System.Object)
    private func _n_SetValue(_ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetValue(pThis, instance, value))
        }
    }
    public func SetValue(instance : Optional<WinRT.IInspectable>, value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_SetValue(RawPointer(instance), RawPointer(value));
    }
    public var IsAttachable : boolean {
        get throws {
            return try get_IsAttachable();
        }
    }
    public var IsDependencyProperty : boolean {
        get throws {
            return try get_IsDependencyProperty();
        }
    }
    public var IsReadOnly : boolean {
        get throws {
            return try get_IsReadOnly();
        }
    }
    public var Name : Swift.String {
        get throws {
            return try get_Name();
        }
    }
    public var TargetType : Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        get throws {
            return try get_TargetType();
        }
    }
    public var Type_ : Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        get throws {
            return try get_Type();
        }
    }
} // IXamlMember

// impl class
open class XamlMember
{
    private class Container {
        public var self_ref: XamlMember? = nil
    }
    private struct WithTrailingObjects_IXamlMember {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember
        public var container: Unmanaged<Container>
    }
    private var instance_IXamlMember: WithTrailingObjects_IXamlMember
    private static func from_IXamlMember(_ pUnk: UnsafeMutableRawPointer?) -> XamlMember? {
        return pUnk?.bindMemory(to: XamlMember.WithTrailingObjects_IXamlMember.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    private static var vtable_IXamlMember: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMemberVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.Markup.IXamlMember.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: XamlMember.WithTrailingObjects_IXamlMember.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: XamlMember.WithTrailingObjects_IXamlMember.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        let num_interfaces = 1
        pLen.pointee = ULONG(num_interfaces)
        var mem = CoTaskMemAlloc(UInt64(16 * num_interfaces)).bindMemory(to: IID.self, capacity: num_interfaces)
        (mem + 0).pointee = Microsoft.UI.Xaml.Markup.IXamlMember.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.Markup.XamlMember").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    get_IsAttachable: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsAttachable()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsDependencyProperty: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsDependencyProperty()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsReadOnly: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsReadOnly()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_Name: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Swift.String> = try self.get_Name()
            __presult!.pointee = try HString("_ret").Raw()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_TargetType: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlType> = try self.get_TargetType()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_Type: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlType> = try self.get_Type()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetValue: {
        (pThis, _ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<WinRT.IInspectable> = try self.GetValue(instance: WinRT.Object(plok: WinRT.IInspectable(instance)))
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    SetValue: {
        (pThis, _ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = XamlMember.from_IXamlMember(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.SetValue(instance: WinRT.Object(plok: WinRT.IInspectable(instance)), value: WinRT.Object(plok: WinRT.IInspectable(value)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    public init() throws {
        self.instance_IXamlMember = WithTrailingObjects_IXamlMember(interface_struct: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember(lpVtbl: &Self.vtable_IXamlMember), container: Unmanaged<Container>.passRetained(Container()))
        self.instance_IXamlMember.container.takeUnretainedValue().self_ref = self
    }
    open func get_IsAttachable() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_IsDependencyProperty() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_IsReadOnly() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_Name() throws -> Optional<Swift.String> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_TargetType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_Type() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func GetValue(instance : Optional<WinRT.Object>) throws -> Optional<WinRT.IInspectable> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func SetValue(instance : Optional<WinRT.Object>, value : Optional<WinRT.Object>) throws -> Void {
    print("\(#file) \(#line) \(#function)")
    }
    public func to_IXamlMember() -> Microsoft.UI.Xaml.Markup.IXamlMember {
        return withUnsafeMutablePointer(to: &self.instance_IXamlMember.interface_struct) {
            Microsoft.UI.Xaml.Markup.IXamlMember(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
// interface type
open class IXamlMetadataProvider
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa96251f0, Data2: 0x2214, Data3 : 0x5d53, Data4 : (0x87, 0x46, 0xce, 0x99, 0xa2, 0x59, 0x3c, 0xd7)) }
    // Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(Windows.UI.Xaml.Interop.TypeName)
    private func _n_GetXamlType(_ type : _q_CWindows_CUI_CXaml_CInterop_CTypeName, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetXamlType(pThis, type, __presult))
        }
    }
    public func GetXamlType(type : Windows.UI.Xaml.Interop.TypeName) throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_GetXamlType(type, &__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
    }
    // Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(System.String)
    private func _n_GetXamlTypeByFullName(_ fullName : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetXamlTypeByFullName(pThis, fullName, __presult))
        }
    }
    public func GetXamlTypeByFullName(fullName : Swift.String) throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        let __hstr_fullName = try HString(fullName);
        return try withExtendedLifetime(__hstr_fullName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_GetXamlTypeByFullName(__hstr_fullName.Raw(), &__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
        }
    }
    // Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
    private func _n_GetXmlnsDefinitions(_ __presultLength: UnsafeMutablePointer<UINT32>?, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetXmlnsDefinitions(pThis, __presultLength, __presult))
        }
    }
    public func GetXmlnsDefinitions() throws -> UINT32 {
        var __resultLength : UINT32 = 0;
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition>> = nil;
        try self._n_GetXmlnsDefinitions(&__resultLength, &__result);
        return __resultLength;
    }
} // IXamlMetadataProvider


// type: Microsoft.UI.Xaml.Markup.IXamlType
// interface type
open class IXamlType
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd24219df, Data2: 0x7ec9, Data3 : 0x57f1, Data4 : (0xa2, 0x7b, 0x6a, 0xf2, 0x51, 0xd9, 0xc5, 0xbc)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Markup.IXamlType get_BaseType()
    private func _n_get_BaseType(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseType(pThis, __presult))
        }
    }
    public func get_BaseType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_get_BaseType(&__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Markup.IXamlMember get_ContentProperty()
    private func _n_get_ContentProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, __presult))
        }
    }
    public func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlMember> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember>> = nil;
        try self._n_get_ContentProperty(&__result);
        return Microsoft.UI.Xaml.Markup.IXamlMember(consuming: __result);
    }
    // [IsSpecialName] System.String get_FullName()
    private func _n_get_FullName(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FullName(pThis, __presult))
        }
    }
    public func get_FullName() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_FullName(&__result);
        return Swift.String(from: __result);
    }
    // [IsSpecialName] bool get_IsArray()
    private func _n_get_IsArray(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsArray(pThis, __presult))
        }
    }
    public func get_IsArray() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsArray(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsCollection()
    private func _n_get_IsCollection(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCollection(pThis, __presult))
        }
    }
    public func get_IsCollection() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsCollection(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsConstructible()
    private func _n_get_IsConstructible(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsConstructible(pThis, __presult))
        }
    }
    public func get_IsConstructible() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsConstructible(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsDictionary()
    private func _n_get_IsDictionary(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDictionary(pThis, __presult))
        }
    }
    public func get_IsDictionary() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsDictionary(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsMarkupExtension()
    private func _n_get_IsMarkupExtension(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMarkupExtension(pThis, __presult))
        }
    }
    public func get_IsMarkupExtension() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsMarkupExtension(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsBindable()
    private func _n_get_IsBindable(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBindable(pThis, __presult))
        }
    }
    public func get_IsBindable() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsBindable(&__result);
        return __result;
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Markup.IXamlType get_ItemType()
    private func _n_get_ItemType(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemType(pThis, __presult))
        }
    }
    public func get_ItemType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_get_ItemType(&__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Markup.IXamlType get_KeyType()
    private func _n_get_KeyType(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyType(pThis, __presult))
        }
    }
    public func get_KeyType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_get_KeyType(&__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Markup.IXamlType get_BoxedType()
    private func _n_get_BoxedType(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_BoxedType(pThis, __presult))
        }
    }
    public func get_BoxedType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>> = nil;
        try self._n_get_BoxedType(&__result);
        return Microsoft.UI.Xaml.Markup.IXamlType(consuming: __result);
    }
    // [IsSpecialName] Windows.UI.Xaml.Interop.TypeName get_UnderlyingType()
    private func _n_get_UnderlyingType(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CInterop_CTypeName>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlyingType(pThis, __presult))
        }
    }
    public func get_UnderlyingType() throws -> Windows.UI.Xaml.Interop.TypeName {
        var __result : _q_CWindows_CUI_CXaml_CInterop_CTypeName = _q_CWindows_CUI_CXaml_CInterop_CTypeName(Name: nil, Kind: _q_CWindows_CUI_CXaml_CInterop_CTypeKind_Primitive);
        try self._n_get_UnderlyingType(&__result);
        return __result;
    }
    // System.Object ActivateInstance()
    private func _n_ActivateInstance(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.ActivateInstance(pThis, __presult))
        }
    }
    public func ActivateInstance() throws -> Optional<WinRT.IInspectable> {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_ActivateInstance(&__result);
        return WinRT.IInspectable(consuming: __result);
    }
    // System.Object CreateFromString(System.String)
    private func _n_CreateFromString(_ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, value, __presult))
        }
    }
    public func CreateFromString(value : Swift.String) throws -> Optional<WinRT.IInspectable> {
        let __hstr_value = try HString(value);
        return try withExtendedLifetime(__hstr_value) {
        var __result : Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateFromString(__hstr_value.Raw(), &__result);
        return WinRT.IInspectable(consuming: __result);
        }
    }
    // Microsoft.UI.Xaml.Markup.IXamlMember GetMember(System.String)
    private func _n_GetMember(_ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetMember(pThis, name, __presult))
        }
    }
    public func GetMember(name : Swift.String) throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlMember> {
        let __hstr_name = try HString(name);
        return try withExtendedLifetime(__hstr_name) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember>> = nil;
        try self._n_GetMember(__hstr_name.Raw(), &__result);
        return Microsoft.UI.Xaml.Markup.IXamlMember(consuming: __result);
        }
    }
    // void AddToVector(System.Object, System.Object)
    private func _n_AddToVector(_ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddToVector(pThis, instance, value))
        }
    }
    public func AddToVector(instance : Optional<WinRT.IInspectable>, value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_AddToVector(RawPointer(instance), RawPointer(value));
    }
    // void AddToMap(System.Object, System.Object, System.Object)
    private func _n_AddToMap(_ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ key : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.AddToMap(pThis, instance, key, value))
        }
    }
    public func AddToMap(instance : Optional<WinRT.IInspectable>, key : Optional<WinRT.IInspectable>, value : Optional<WinRT.IInspectable>) throws -> Void {
        try self._n_AddToMap(RawPointer(instance), RawPointer(key), RawPointer(value));
    }
    // void RunInitializer()
    private func _n_RunInitializer() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RunInitializer(pThis))
        }
    }
    public func RunInitializer() throws -> Void {
        try self._n_RunInitializer();
    }
    public var BaseType : Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        get throws {
            return try get_BaseType();
        }
    }
    public var BoxedType : Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        get throws {
            return try get_BoxedType();
        }
    }
    public var ContentProperty : Optional<Microsoft.UI.Xaml.Markup.IXamlMember> {
        get throws {
            return try get_ContentProperty();
        }
    }
    public var FullName : Swift.String {
        get throws {
            return try get_FullName();
        }
    }
    public var IsArray : boolean {
        get throws {
            return try get_IsArray();
        }
    }
    public var IsBindable : boolean {
        get throws {
            return try get_IsBindable();
        }
    }
    public var IsCollection : boolean {
        get throws {
            return try get_IsCollection();
        }
    }
    public var IsConstructible : boolean {
        get throws {
            return try get_IsConstructible();
        }
    }
    public var IsDictionary : boolean {
        get throws {
            return try get_IsDictionary();
        }
    }
    public var IsMarkupExtension : boolean {
        get throws {
            return try get_IsMarkupExtension();
        }
    }
    public var ItemType : Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        get throws {
            return try get_ItemType();
        }
    }
    public var KeyType : Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
        get throws {
            return try get_KeyType();
        }
    }
    public var UnderlyingType : Windows.UI.Xaml.Interop.TypeName {
        get throws {
            return try get_UnderlyingType();
        }
    }
} // IXamlType

// impl class
open class XamlType
{
    private class Container {
        public var self_ref: XamlType? = nil
    }
    private struct WithTrailingObjects_IXamlType {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType
        public var container: Unmanaged<Container>
    }
    private var instance_IXamlType: WithTrailingObjects_IXamlType
    private static func from_IXamlType(_ pUnk: UnsafeMutableRawPointer?) -> XamlType? {
        return pUnk?.bindMemory(to: XamlType.WithTrailingObjects_IXamlType.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    private static var vtable_IXamlType: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlTypeVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.Markup.IXamlType.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: XamlType.WithTrailingObjects_IXamlType.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: XamlType.WithTrailingObjects_IXamlType.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        let num_interfaces = 1
        pLen.pointee = ULONG(num_interfaces)
        var mem = CoTaskMemAlloc(UInt64(16 * num_interfaces)).bindMemory(to: IID.self, capacity: num_interfaces)
        (mem + 0).pointee = Microsoft.UI.Xaml.Markup.IXamlType.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.Markup.XamlType").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    get_BaseType: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlType> = try self.get_BaseType()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_ContentProperty: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlMember> = try self.get_ContentProperty()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_FullName: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Swift.String> = try self.get_FullName()
            __presult!.pointee = try HString("_ret").Raw()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsArray: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsArray()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsCollection: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsCollection()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsConstructible: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsConstructible()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsDictionary: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsDictionary()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsMarkupExtension: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsMarkupExtension()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_IsBindable: {
        (pThis, _ __presult: UnsafeMutablePointer<boolean>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : boolean = try self.get_IsBindable()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_ItemType: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlType> = try self.get_ItemType()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_KeyType: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlType> = try self.get_KeyType()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_BoxedType: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlType> = try self.get_BoxedType()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    get_UnderlyingType: {
        (pThis, _ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CInterop_CTypeName>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Windows.UI.Xaml.Interop.TypeName = try self.get_UnderlyingType()
            __presult!.pointee = _ret;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    ActivateInstance: {
        (pThis, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<WinRT.IInspectable> = try self.ActivateInstance()
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    CreateFromString: {
        (pThis, _ value : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<WinRT.IInspectable> = try self.CreateFromString(value: Swift.String(from: value))
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetMember: {
        (pThis, _ name : Optional<HSTRING>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember>>>?) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Optional<Microsoft.UI.Xaml.Markup.IXamlMember> = try self.GetMember(name: Swift.String(from: name))
            __presult!.pointee = nil;
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    AddToVector: {
        (pThis, _ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.AddToVector(instance: WinRT.Object(plok: WinRT.IInspectable(instance)), value: WinRT.Object(plok: WinRT.IInspectable(value)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    AddToMap: {
        (pThis, _ instance : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ key : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ value : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.AddToMap(instance: WinRT.Object(plok: WinRT.IInspectable(instance)), key: WinRT.Object(plok: WinRT.IInspectable(key)), value: WinRT.Object(plok: WinRT.IInspectable(value)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    RunInitializer: {
        (pThis) in
        guard let self = XamlType.from_IXamlType(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.RunInitializer()
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    public init() throws {
        self.instance_IXamlType = WithTrailingObjects_IXamlType(interface_struct: _q_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType(lpVtbl: &Self.vtable_IXamlType), container: Unmanaged<Container>.passRetained(Container()))
        self.instance_IXamlType.container.takeUnretainedValue().self_ref = self
    }
    open func get_BaseType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_ContentProperty() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlMember> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_FullName() throws -> Optional<Swift.String> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_IsArray() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_IsCollection() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_IsConstructible() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_IsDictionary() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_IsMarkupExtension() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_IsBindable() throws -> boolean {
    print("\(#file) \(#line) \(#function)")
    return 0;
    }
    open func get_ItemType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_KeyType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_BoxedType() throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlType> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func get_UnderlyingType() throws -> Windows.UI.Xaml.Interop.TypeName {
    print("\(#file) \(#line) \(#function)")
    return _q_CWindows_CUI_CXaml_CInterop_CTypeName(Name: nil, Kind: _q_CWindows_CUI_CXaml_CInterop_CTypeKind_Primitive);
    }
    open func ActivateInstance() throws -> Optional<WinRT.IInspectable> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func CreateFromString(value : Swift.String) throws -> Optional<WinRT.IInspectable> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func GetMember(name : Swift.String) throws -> Optional<Microsoft.UI.Xaml.Markup.IXamlMember> {
    print("\(#file) \(#line) \(#function)")
    return nil;
    }
    open func AddToVector(instance : Optional<WinRT.Object>, value : Optional<WinRT.Object>) throws -> Void {
    print("\(#file) \(#line) \(#function)")
    }
    open func AddToMap(instance : Optional<WinRT.Object>, key : Optional<WinRT.Object>, value : Optional<WinRT.Object>) throws -> Void {
    print("\(#file) \(#line) \(#function)")
    }
    open func RunInitializer() throws -> Void {
    print("\(#file) \(#line) \(#function)")
    }
    public func to_IXamlType() -> Microsoft.UI.Xaml.Markup.IXamlType {
        return withUnsafeMutablePointer(to: &self.instance_IXamlType.interface_struct) {
            Microsoft.UI.Xaml.Markup.IXamlType(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Microsoft.UI.Xaml.Markup.XmlnsDefinition
// struct type
public typealias XmlnsDefinition = _q_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition;

}
