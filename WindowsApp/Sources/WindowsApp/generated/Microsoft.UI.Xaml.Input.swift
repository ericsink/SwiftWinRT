// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsApp;
import WindowsSdk;
import CWindowsSdk;

extension Microsoft.UI.Xaml.Input {
// type: Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs
// runtime class
public class AccessKeyDisplayDismissedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs
// runtime class
public class AccessKeyDisplayRequestedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_PressedKeys
}

// type: Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs
// runtime class
public class AccessKeyInvokedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs
// runtime class
public class CharacterReceivedRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs { return _self; }
    // method not needed: get_Character
    // method not needed: get_KeyStatus
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.Input.ContextRequestedEventArgs
// runtime class
public class ContextRequestedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IContextRequestedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IContextRequestedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IContextRequestedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.ContextRequestedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: TryGetPosition
}

// type: Microsoft.UI.Xaml.Input.DoubleTappedEventHandler
// delegate type
open class IDoubleTappedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf7a501b9, Data2: 0xe277, Data3 : 0x5611, Data4 : (0x87, 0xb0, 0x0e, 0x06, 0x07, 0x62, 0x21, 0x83)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class DoubleTappedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DoubleTappedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: DoubleTappedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedRoutedEventArgs>>) in
        guard let self = DoubleTappedEventHandler.from_DoubleTappedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: DoubleTappedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIDoubleTappedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_DoubleTappedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> DoubleTappedEventHandler? {
        return pUnk?.bindMemory(to: DoubleTappedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_DoubleTappedEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IDoubleTappedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs
// runtime class
public class DoubleTappedRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.DoubleTappedRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_PointerDeviceType
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: GetPosition
}

// type: Microsoft.UI.Xaml.Input.GettingFocusEventArgs
// runtime class
public class GettingFocusEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IGettingFocusEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IGettingFocusEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IGettingFocusEventArgs { return _self; }
    // method not needed: get_OldFocusedElement
    // method not needed: get_NewFocusedElement
    // method not needed: put_NewFocusedElement
    // method not needed: get_FocusState
    // method not needed: get_Direction
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_InputDevice
    // method not needed: get_Cancel
    // method not needed: put_Cancel
    // method not needed: get_CorrelationId
    // method not needed: TryCancel
    // method not needed: TrySetNewFocusedElement
}

// type: Microsoft.UI.Xaml.Input.HoldingEventHandler
// delegate type
open class IHoldingEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfe23c5bd, Data2: 0x4984, Data3 : 0x56b6, Data4 : (0xb9, 0x2b, 0xfc, 0x9d, 0x12, 0x16, 0xb2, 0x4e)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class HoldingEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IHoldingEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: HoldingEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: HoldingEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIHoldingRoutedEventArgs>>) in
        guard let self = HoldingEventHandler.from_HoldingEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: HoldingEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIHoldingEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_HoldingEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> HoldingEventHandler? {
        return pUnk?.bindMemory(to: HoldingEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IHoldingEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IHoldingEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_HoldingEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IHoldingEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IHoldingEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IHoldingEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs
// runtime class
public class HoldingRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.HoldingRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_PointerDeviceType
    // method not needed: get_HoldingState
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: GetPosition
}

// type: Microsoft.UI.Xaml.Input.IAccessKeyDisplayDismissedEventArgs
// interface type
open class IAccessKeyDisplayDismissedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x125a83d8, Data2: 0x7f86, Data3 : 0x5ea9, Data4 : (0x90, 0x63, 0xb9, 0x40, 0x7e, 0x64, 0x45, 0x87)) }
} // IAccessKeyDisplayDismissedEventArgs


// type: Microsoft.UI.Xaml.Input.IAccessKeyDisplayRequestedEventArgs
// interface type
open class IAccessKeyDisplayRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc4ed84d8, Data2: 0x2b27, Data3 : 0x59b1, Data4 : (0x9c, 0xf0, 0x7f, 0x91, 0x64, 0xde, 0x58, 0xcb)) }
// method not needed: get_PressedKeys
} // IAccessKeyDisplayRequestedEventArgs


// type: Microsoft.UI.Xaml.Input.IAccessKeyInvokedEventArgs
// interface type
open class IAccessKeyInvokedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd00c11a4, Data2: 0xf9fb, Data3 : 0x5707, Data4 : (0x96, 0x92, 0x98, 0xb8, 0x0b, 0xb8, 0x54, 0x6d)) }
// method not needed: get_Handled
// method not needed: put_Handled
} // IAccessKeyInvokedEventArgs


// type: Microsoft.UI.Xaml.Input.ICharacterReceivedRoutedEventArgs
// interface type
open class ICharacterReceivedRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe26ca5bb, Data2: 0x34c3, Data3 : 0x5c1e, Data4 : (0x9a, 0x16, 0x00, 0xb8, 0x0b, 0x07, 0xa8, 0x99)) }
// method not needed: get_Character
// method not needed: get_KeyStatus
// method not needed: get_Handled
// method not needed: put_Handled
} // ICharacterReceivedRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.ICommand
// interface type
open class ICommand
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe5af3542, Data2: 0xca67, Data3 : 0x4081, Data4 : (0x99, 0x5b, 0x70, 0x9d, 0xd1, 0x37, 0x92, 0xdf)) }
// method not needed: add_CanExecuteChanged
// method not needed: remove_CanExecuteChanged
// method not needed: CanExecute
// method not needed: Execute
} // ICommand


// type: Microsoft.UI.Xaml.Input.IContextRequestedEventArgs
// interface type
open class IContextRequestedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xbcedcb98, Data2: 0x77b5, Data3 : 0x53c0, Data4 : (0x80, 0x2e, 0xfd, 0x52, 0xf3, 0x80, 0x6e, 0x51)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: TryGetPosition
} // IContextRequestedEventArgs


// type: Microsoft.UI.Xaml.Input.IDoubleTappedRoutedEventArgs
// interface type
open class IDoubleTappedRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x32b9549d, Data2: 0x11d8, Data3 : 0x53a5, Data4 : (0xa9, 0x53, 0x02, 0x40, 0x95, 0x37, 0xa1, 0x1f)) }
// method not needed: get_PointerDeviceType
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: GetPosition
} // IDoubleTappedRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IGettingFocusEventArgs
// interface type
open class IGettingFocusEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x37fd3af0, Data2: 0xbd3c, Data3 : 0x5bf5, Data4 : (0xa9, 0xcd, 0x71, 0xa1, 0xe8, 0x7a, 0xf9, 0x50)) }
// method not needed: get_OldFocusedElement
// method not needed: get_NewFocusedElement
// method not needed: put_NewFocusedElement
// method not needed: get_FocusState
// method not needed: get_Direction
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_InputDevice
// method not needed: get_Cancel
// method not needed: put_Cancel
// method not needed: get_CorrelationId
// method not needed: TryCancel
// method not needed: TrySetNewFocusedElement
} // IGettingFocusEventArgs


// type: Microsoft.UI.Xaml.Input.IHoldingRoutedEventArgs
// interface type
open class IHoldingRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8272a4b2, Data2: 0x2221, Data3 : 0x551e, Data4 : (0xb0, 0xbb, 0x16, 0xe2, 0x91, 0x38, 0xab, 0x20)) }
// method not needed: get_PointerDeviceType
// method not needed: get_HoldingState
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: GetPosition
} // IHoldingRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IInputScope
// interface type
open class IInputScope
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x76ea58b1, Data2: 0xe910, Data3 : 0x5176, Data4 : (0x91, 0x47, 0x69, 0x5c, 0xc9, 0x5e, 0x7d, 0xa2)) }
// method not needed: get_Names
} // IInputScope


// type: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs
// interface type
open class IKeyRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xee357007, Data2: 0xa2d6, Data3 : 0x5c75, Data4 : (0x94, 0x31, 0x05, 0xfd, 0x66, 0xec, 0x79, 0x15)) }
    // [IsSpecialName] Windows.System.VirtualKey get_Key()
    private func _n_get_Key(_ __presult: UnsafeMutablePointer<_q_CWindows_CSystem_CVirtualKey>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, __presult))
        }
    }
    public func get_Key() throws -> Windows.System.VirtualKey {
        var __result : _q_CWindows_CSystem_CVirtualKey = _q_CWindows_CSystem_CVirtualKey_None;
        try self._n_get_Key(&__result);
        return __result;
    }
    // [IsSpecialName] Windows.UI.Core.CorePhysicalKeyStatus get_KeyStatus()
    private func _n_get_KeyStatus(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CCore_CCorePhysicalKeyStatus>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyStatus(pThis, __presult))
        }
    }
    public func get_KeyStatus() throws -> Windows.UI.Core.CorePhysicalKeyStatus {
        var __result : _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus = _q_CWindows_CUI_CCore_CCorePhysicalKeyStatus(RepeatCount: 0, ScanCode: 0, IsExtendedKey: 0, IsMenuKeyDown: 0, WasKeyDown: 0, IsKeyReleased: 0);
        try self._n_get_KeyStatus(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_Handled()
    private func _n_get_Handled(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Handled(pThis, __presult))
        }
    }
    public func get_Handled() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_Handled(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Handled(bool)
    private func _n_put_Handled(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Handled(pThis, value))
        }
    }
    public func put_Handled(value : boolean) throws -> Void {
        try self._n_put_Handled(value);
    }
    // [IsSpecialName] Windows.System.VirtualKey get_OriginalKey()
    private func _n_get_OriginalKey(_ __presult: UnsafeMutablePointer<_q_CWindows_CSystem_CVirtualKey>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OriginalKey(pThis, __presult))
        }
    }
    public func get_OriginalKey() throws -> Windows.System.VirtualKey {
        var __result : _q_CWindows_CSystem_CVirtualKey = _q_CWindows_CSystem_CVirtualKey_None;
        try self._n_get_OriginalKey(&__result);
        return __result;
    }
    // [IsSpecialName] System.String get_DeviceId()
    private func _n_get_DeviceId(_ __presult: UnsafeMutablePointer<Optional<HSTRING>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DeviceId(pThis, __presult))
        }
    }
    public func get_DeviceId() throws -> Swift.String {
        var __result : Optional<HSTRING> = nil;
        try self._n_get_DeviceId(&__result);
        return Swift.String(from: __result);
    }
    public var DeviceId : Swift.String {
        get throws {
            return try get_DeviceId();
        }
    }
    public var Handled : boolean {
        get throws {
            return try get_Handled();
        }
    }
    public var Key : Windows.System.VirtualKey {
        get throws {
            return try get_Key();
        }
    }
    public var KeyStatus : Windows.UI.Core.CorePhysicalKeyStatus {
        get throws {
            return try get_KeyStatus();
        }
    }
    public var OriginalKey : Windows.System.VirtualKey {
        get throws {
            return try get_OriginalKey();
        }
    }
} // IKeyRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IKeyboardAccelerator
// interface type
open class IKeyboardAccelerator
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6f8bf1e2, Data2: 0x4e91, Data3 : 0x5cf9, Data4 : (0xa6, 0xbe, 0x47, 0x70, 0xca, 0xf3, 0xd7, 0x70)) }
// method not needed: get_Key
// method not needed: put_Key
// method not needed: get_Modifiers
// method not needed: put_Modifiers
// method not needed: get_IsEnabled
// method not needed: put_IsEnabled
// method not needed: get_ScopeOwner
// method not needed: put_ScopeOwner
// method not needed: add_Invoked
// method not needed: remove_Invoked
} // IKeyboardAccelerator


// type: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactory
// interface type
// COMPOSITION INTERFACE
open class IKeyboardAcceleratorFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xca1d410a, Data2: 0xaf2a, Data3 : 0x51b9, Data4 : (0xa1, 0xde, 0x6c, 0x0a, 0xf9, 0xf3, 0xb5, 0x98)) }
    // Microsoft.UI.Xaml.Input.KeyboardAccelerator CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAcceleratorFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Input.IKeyboardAccelerator> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyboardAccelerator>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Input.IKeyboardAccelerator(consuming: __result);
    }
} // IKeyboardAcceleratorFactory


// type: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs
// interface type
open class IKeyboardAcceleratorInvokedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x62c9fdb0, Data2: 0xb574, Data3 : 0x527d, Data4 : (0x97, 0xeb, 0x5c, 0x7f, 0x67, 0x44, 0x41, 0xe0)) }
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_Element
// method not needed: get_KeyboardAccelerator
} // IKeyboardAcceleratorInvokedEventArgs


// type: Microsoft.UI.Xaml.Input.ILosingFocusEventArgs
// interface type
open class ILosingFocusEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xfa0e5ffa, Data2: 0x2b1b, Data3 : 0x52f8, Data4 : (0xbb, 0x66, 0xe3, 0x5f, 0x51, 0xe7, 0x3c, 0xf3)) }
// method not needed: get_OldFocusedElement
// method not needed: get_NewFocusedElement
// method not needed: put_NewFocusedElement
// method not needed: get_FocusState
// method not needed: get_Direction
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_InputDevice
// method not needed: get_Cancel
// method not needed: put_Cancel
// method not needed: get_CorrelationId
// method not needed: TryCancel
// method not needed: TrySetNewFocusedElement
} // ILosingFocusEventArgs


// type: Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs
// interface type
open class IManipulationCompletedRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe3be9e4e, Data2: 0xc5fb, Data3 : 0x5859, Data4 : (0xa8, 0x1d, 0xce, 0x12, 0xfc, 0x3a, 0x2f, 0x4d)) }
// method not needed: get_Container
// method not needed: get_Position
// method not needed: get_IsInertial
// method not needed: get_Cumulative
// method not needed: get_Velocities
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_PointerDeviceType
} // IManipulationCompletedRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs
// interface type
open class IManipulationDeltaRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x51369745, Data2: 0x960f, Data3 : 0x54ac, Data4 : (0x93, 0xfa, 0x76, 0x3d, 0x22, 0x91, 0x0d, 0xea)) }
// method not needed: get_Container
// method not needed: get_Position
// method not needed: get_IsInertial
// method not needed: get_Delta
// method not needed: get_Cumulative
// method not needed: get_Velocities
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_PointerDeviceType
// method not needed: Complete
} // IManipulationDeltaRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs
// interface type
open class IManipulationInertiaStartingRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x17d510be, Data2: 0x5514, Data3 : 0x5952, Data4 : (0x9a, 0xfd, 0x95, 0x9b, 0x60, 0xab, 0x93, 0x94)) }
// method not needed: get_Container
// method not needed: get_ExpansionBehavior
// method not needed: put_ExpansionBehavior
// method not needed: get_RotationBehavior
// method not needed: put_RotationBehavior
// method not needed: get_TranslationBehavior
// method not needed: put_TranslationBehavior
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_PointerDeviceType
// method not needed: get_Delta
// method not needed: get_Cumulative
// method not needed: get_Velocities
} // IManipulationInertiaStartingRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs
// interface type
open class IManipulationStartedRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61857950, Data2: 0x5821, Data3 : 0x5652, Data4 : (0x9f, 0xdf, 0xc6, 0x27, 0x7c, 0x58, 0x86, 0xf5)) }
// method not needed: get_Container
// method not needed: get_Position
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_PointerDeviceType
// method not needed: get_Cumulative
// method not needed: Complete
} // IManipulationStartedRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory
// interface type
// COMPOSITION INTERFACE
open class IManipulationStartedRoutedEventArgsFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5681b0de, Data2: 0x3fa7, Data3 : 0x503e, Data4 : (0x9c, 0x46, 0xa8, 0x03, 0x39, 0x76, 0x02, 0x92)) }
    // Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgsFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs(consuming: __result);
    }
} // IManipulationStartedRoutedEventArgsFactory


// type: Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs
// interface type
open class IManipulationStartingRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x93a99f86, Data2: 0xf5a0, Data3 : 0x5326, Data4 : (0x91, 0xb0, 0x85, 0x1c, 0x89, 0x7a, 0xf7, 0x9f)) }
// method not needed: get_Mode
// method not needed: put_Mode
// method not needed: get_Container
// method not needed: put_Container
// method not needed: get_Pivot
// method not needed: put_Pivot
// method not needed: get_Handled
// method not needed: put_Handled
} // IManipulationStartingRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs
// interface type
open class INoFocusCandidateFoundEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa2d7153a, Data2: 0xcd2a, Data3 : 0x59cb, Data4 : (0xa5, 0x74, 0xac, 0x82, 0xe3, 0x0b, 0x92, 0x01)) }
// method not needed: get_Direction
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_InputDevice
} // INoFocusCandidateFoundEventArgs


// type: Microsoft.UI.Xaml.Input.IPointer
// interface type
open class IPointer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x1f9afbf5, Data2: 0x11a3, Data3 : 0x5e68, Data4 : (0xaa, 0x1b, 0x72, 0xfe, 0xbf, 0xa0, 0xab, 0x23)) }
// method not needed: get_PointerId
// method not needed: get_PointerDeviceType
// method not needed: get_IsInContact
// method not needed: get_IsInRange
} // IPointer


// type: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs
// interface type
open class IPointerRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x66e78a9a, Data2: 0x1bec, Data3 : 0x5f92, Data4 : (0xb1, 0xa1, 0xea, 0x63, 0x34, 0xee, 0x51, 0x1c)) }
// method not needed: get_Pointer
// method not needed: get_KeyModifiers
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: get_IsGenerated
// method not needed: GetCurrentPoint
// method not needed: GetIntermediatePoints
} // IPointerRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs
// interface type
open class IProcessKeyboardAcceleratorEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9be0d058, Data2: 0x3d26, Data3 : 0x5811, Data4 : (0xb5, 0x0a, 0x3b, 0xb8, 0x0c, 0xa7, 0x66, 0xc9)) }
// method not needed: get_Key
// method not needed: get_Modifiers
// method not needed: get_Handled
// method not needed: put_Handled
} // IProcessKeyboardAcceleratorEventArgs


// type: Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs
// interface type
open class IRightTappedRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3972fafb, Data2: 0x2915, Data3 : 0x5c62, Data4 : (0xbb, 0x6b, 0x54, 0xad, 0x84, 0xff, 0x40, 0x0d)) }
// method not needed: get_PointerDeviceType
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: GetPosition
} // IRightTappedRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs
// interface type
open class ITappedRoutedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x73f74b8c, Data2: 0x3709, Data3 : 0x547e, Data4 : (0x8e, 0x0c, 0x51, 0xc0, 0x3c, 0x89, 0x12, 0x6a)) }
// method not needed: get_PointerDeviceType
// method not needed: get_Handled
// method not needed: put_Handled
// method not needed: GetPosition
} // ITappedRoutedEventArgs


// type: Microsoft.UI.Xaml.Input.InputScope
// runtime class
public class InputScope
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Input.IInputScope;
    public init(plok: Microsoft.UI.Xaml.Input.IInputScope?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IInputScope { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.InputScope")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Names
}

// type: Microsoft.UI.Xaml.Input.KeyEventHandler
// delegate type
open class IKeyEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdb68e7cc, Data2: 0x9a2b, Data3 : 0x527d, Data4 : (0x99, 0x89, 0x25, 0x28, 0x4d, 0xac, 0xcc, 0x03)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.KeyRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class KeyEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IKeyEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: KeyEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: KeyEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIKeyRoutedEventArgs>>) in
        guard let self = KeyEventHandler.from_KeyEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.KeyRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: KeyEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIKeyEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_KeyEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> KeyEventHandler? {
        return pUnk?.bindMemory(to: KeyEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IKeyEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IKeyEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_KeyEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IKeyEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IKeyEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.KeyRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IKeyEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.KeyRoutedEventArgs
// runtime class
public class KeyRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs { return _self; }
    public func get_Key() throws -> Windows.System.VirtualKey {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Key();
    }
    public func get_KeyStatus() throws -> Windows.UI.Core.CorePhysicalKeyStatus {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.get_KeyStatus();
    }
    public func get_Handled() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.get_Handled();
    }
    public func put_Handled(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.put_Handled(value: value);
    }
    public func get_OriginalKey() throws -> Windows.System.VirtualKey {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.get_OriginalKey();
    }
    public func get_DeviceId() throws -> Optional<Swift.String> {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.get_DeviceId();
    }
    public var DeviceId : Optional<Swift.String> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.DeviceId;
        }
    }
    public var Handled : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.Handled;
        }
    }
    public var Key : Windows.System.VirtualKey {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.Key;
        }
    }
    public var KeyStatus : Windows.UI.Core.CorePhysicalKeyStatus {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.KeyStatus;
        }
    }
    public var OriginalKey : Windows.System.VirtualKey {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Input.IKeyRoutedEventArgs = try _self.QueryInterface();
        return try _ifc.OriginalKey;
        }
    }
}

// type: Microsoft.UI.Xaml.Input.KeyTipPlacementMode
// enum type
public typealias KeyTipPlacementMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode;

// type: Microsoft.UI.Xaml.Input.KeyboardAccelerator
// runtime class
open class KeyboardAccelerator
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Input.IKeyboardAccelerator;
    public init(plok: Microsoft.UI.Xaml.Input.IKeyboardAccelerator?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IKeyboardAccelerator { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IKeyboardAcceleratorFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Input.KeyboardAccelerator");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorStatics
    // method not needed: get_Key
    // method not needed: put_Key
    // method not needed: get_Modifiers
    // method not needed: put_Modifiers
    // method not needed: get_IsEnabled
    // method not needed: put_IsEnabled
    // method not needed: get_ScopeOwner
    // method not needed: put_ScopeOwner
    // method not needed: add_Invoked
    // method not needed: remove_Invoked
}

// type: Microsoft.UI.Xaml.Input.KeyboardAcceleratorInvokedEventArgs
// runtime class
public class KeyboardAcceleratorInvokedEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IKeyboardAcceleratorInvokedEventArgs { return _self; }
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_Element
    // method not needed: get_KeyboardAccelerator
}

// type: Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode
// enum type
public typealias KeyboardAcceleratorPlacementMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode;

// type: Microsoft.UI.Xaml.Input.KeyboardNavigationMode
// enum type
public typealias KeyboardNavigationMode = _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode;

// type: Microsoft.UI.Xaml.Input.LosingFocusEventArgs
// runtime class
public class LosingFocusEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.ILosingFocusEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.ILosingFocusEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.ILosingFocusEventArgs { return _self; }
    // method not needed: get_OldFocusedElement
    // method not needed: get_NewFocusedElement
    // method not needed: put_NewFocusedElement
    // method not needed: get_FocusState
    // method not needed: get_Direction
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_InputDevice
    // method not needed: get_Cancel
    // method not needed: put_Cancel
    // method not needed: get_CorrelationId
    // method not needed: TryCancel
    // method not needed: TrySetNewFocusedElement
}

// type: Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler
// delegate type
open class IManipulationCompletedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xd51df8db, Data2: 0x71cd, Data3 : 0x5bfd, Data4 : (0x84, 0x26, 0x76, 0x72, 0x18, 0xee, 0x55, 0xec)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ManipulationCompletedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationCompletedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationCompletedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedRoutedEventArgs>>) in
        guard let self = ManipulationCompletedEventHandler.from_ManipulationCompletedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ManipulationCompletedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationCompletedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ManipulationCompletedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> ManipulationCompletedEventHandler? {
        return pUnk?.bindMemory(to: ManipulationCompletedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_ManipulationCompletedEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationCompletedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs
// runtime class
public class ManipulationCompletedRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationCompletedRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Container
    // method not needed: get_Position
    // method not needed: get_IsInertial
    // method not needed: get_Cumulative
    // method not needed: get_Velocities
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_PointerDeviceType
}

// type: Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler
// delegate type
open class IManipulationDeltaEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x83f2d4ce, Data2: 0x105f, Data3 : 0x5392, Data4 : (0xa3, 0x8a, 0xb7, 0x46, 0x7b, 0x7c, 0x2e, 0xa5)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ManipulationDeltaEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationDeltaEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationDeltaEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaRoutedEventArgs>>) in
        guard let self = ManipulationDeltaEventHandler.from_ManipulationDeltaEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ManipulationDeltaEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationDeltaEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ManipulationDeltaEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> ManipulationDeltaEventHandler? {
        return pUnk?.bindMemory(to: ManipulationDeltaEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_ManipulationDeltaEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationDeltaEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs
// runtime class
public class ManipulationDeltaRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationDeltaRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Container
    // method not needed: get_Position
    // method not needed: get_IsInertial
    // method not needed: get_Delta
    // method not needed: get_Cumulative
    // method not needed: get_Velocities
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_PointerDeviceType
    // method not needed: Complete
}

// type: Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler
// delegate type
open class IManipulationInertiaStartingEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5de296bd, Data2: 0x6f1c, Data3 : 0x5f60, Data4 : (0x91, 0x80, 0x10, 0x70, 0x52, 0x82, 0x57, 0x6c)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ManipulationInertiaStartingEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationInertiaStartingEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationInertiaStartingEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingRoutedEventArgs>>) in
        guard let self = ManipulationInertiaStartingEventHandler.from_ManipulationInertiaStartingEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ManipulationInertiaStartingEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationInertiaStartingEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ManipulationInertiaStartingEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> ManipulationInertiaStartingEventHandler? {
        return pUnk?.bindMemory(to: ManipulationInertiaStartingEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_ManipulationInertiaStartingEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationInertiaStartingEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs
// runtime class
public class ManipulationInertiaStartingRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationInertiaStartingRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Container
    // method not needed: get_ExpansionBehavior
    // method not needed: put_ExpansionBehavior
    // method not needed: get_RotationBehavior
    // method not needed: put_RotationBehavior
    // method not needed: get_TranslationBehavior
    // method not needed: put_TranslationBehavior
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_PointerDeviceType
    // method not needed: get_Delta
    // method not needed: get_Cumulative
    // method not needed: get_Velocities
}

// type: Microsoft.UI.Xaml.Input.ManipulationModes
// enum type
public typealias ManipulationModes = _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes;

// type: Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler
// delegate type
open class IManipulationStartedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x41060669, Data2: 0x304c, Data3 : 0x53ac, Data4 : (0x9d, 0x43, 0xbc, 0x31, 0x12, 0x35, 0xaa, 0xe4)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ManipulationStartedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationStartedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationStartedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedRoutedEventArgs>>) in
        guard let self = ManipulationStartedEventHandler.from_ManipulationStartedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ManipulationStartedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ManipulationStartedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> ManipulationStartedEventHandler? {
        return pUnk?.bindMemory(to: ManipulationStartedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_ManipulationStartedEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationStartedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs
// runtime class
open class ManipulationStartedRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgs { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Input.IManipulationStartedRoutedEventArgsFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IManipulationStartedRoutedEventArgsFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Input.ManipulationStartedRoutedEventArgs");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Container
    // method not needed: get_Position
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_PointerDeviceType
    // method not needed: get_Cumulative
    // method not needed: Complete
}

// type: Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler
// delegate type
open class IManipulationStartingEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x44f528f1, Data2: 0xf0e4, Data3 : 0x505c, Data4 : (0xa0, 0xbb, 0x0c, 0x48, 0x39, 0xb2, 0x9d, 0xf5)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class ManipulationStartingEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationStartingEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: ManipulationStartingEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingRoutedEventArgs>>) in
        guard let self = ManipulationStartingEventHandler.from_ManipulationStartingEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: ManipulationStartingEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIManipulationStartingEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_ManipulationStartingEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> ManipulationStartingEventHandler? {
        return pUnk?.bindMemory(to: ManipulationStartingEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_ManipulationStartingEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationStartingEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs
// runtime class
public class ManipulationStartingRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IManipulationStartingRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.ManipulationStartingRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Mode
    // method not needed: put_Mode
    // method not needed: get_Container
    // method not needed: put_Container
    // method not needed: get_Pivot
    // method not needed: put_Pivot
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs
// runtime class
public class NoFocusCandidateFoundEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.INoFocusCandidateFoundEventArgs { return _self; }
    // method not needed: get_Direction
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_InputDevice
}

// type: Microsoft.UI.Xaml.Input.Pointer
// runtime class
public class Pointer
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Input.IPointer;
    public init(plok: Microsoft.UI.Xaml.Input.IPointer?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IPointer { return _self; }
    // method not needed: get_PointerId
    // method not needed: get_PointerDeviceType
    // method not needed: get_IsInContact
    // method not needed: get_IsInRange
}

// type: Microsoft.UI.Xaml.Input.PointerEventHandler
// delegate type
open class IPointerEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xa48a71e1, Data2: 0x8bb4, Data3 : 0x5597, Data4 : (0x9e, 0x31, 0x90, 0x3a, 0x3f, 0x6a, 0x04, 0xfb)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.PointerRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class PointerEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IPointerEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: PointerEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: PointerEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIPointerRoutedEventArgs>>) in
        guard let self = PointerEventHandler.from_PointerEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: PointerEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIPointerEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_PointerEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> PointerEventHandler? {
        return pUnk?.bindMemory(to: PointerEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IPointerEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IPointerEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_PointerEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IPointerEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IPointerEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.PointerRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IPointerEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.PointerRoutedEventArgs
// runtime class
public class PointerRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IPointerRoutedEventArgs { return _self; }
    // method not needed: get_Pointer
    // method not needed: get_KeyModifiers
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: get_IsGenerated
    // method not needed: GetCurrentPoint
    // method not needed: GetIntermediatePoints
}

// type: Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs
// runtime class
public class ProcessKeyboardAcceleratorEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IProcessKeyboardAcceleratorEventArgs { return _self; }
    // method not needed: get_Key
    // method not needed: get_Modifiers
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Microsoft.UI.Xaml.Input.RightTappedEventHandler
// delegate type
open class IRightTappedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5070e32f, Data2: 0x3dc7, Data3 : 0x56cf, Data4 : (0x8f, 0xdd, 0xde, 0x1b, 0x40, 0xd0, 0xb4, 0x72)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class RightTappedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.IRightTappedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: RightTappedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: RightTappedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedRoutedEventArgs>>) in
        guard let self = RightTappedEventHandler.from_RightTappedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: RightTappedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CIRightTappedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_RightTappedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> RightTappedEventHandler? {
        return pUnk?.bindMemory(to: RightTappedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IRightTappedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.IRightTappedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_RightTappedEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.IRightTappedEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.IRightTappedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IRightTappedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs
// runtime class
public class RightTappedRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.IRightTappedRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.RightTappedRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_PointerDeviceType
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: GetPosition
}

// type: Microsoft.UI.Xaml.Input.TappedEventHandler
// delegate type
open class ITappedEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb60074f3, Data2: 0x125b, Data3 : 0x534e, Data4 : (0x8f, 0x9c, 0x97, 0x69, 0xbd, 0x3f, 0x0f, 0x64)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Input.TappedRoutedEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class TappedEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Input.ITappedEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TappedEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: TappedEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CInput_CITappedRoutedEventArgs>>) in
        guard let self = TappedEventHandler.from_TappedEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Input.TappedRoutedEventArgs(plok: Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: TappedEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CInput_CITappedEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_TappedEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> TappedEventHandler? {
        return pUnk?.bindMemory(to: TappedEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.ITappedEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Input.ITappedEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_TappedEventHandler
{
    private var _self : Microsoft.UI.Xaml.Input.ITappedEventHandler;
    public init(plok: Microsoft.UI.Xaml.Input.ITappedEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Input.TappedRoutedEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.ITappedEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Input.TappedRoutedEventArgs
// runtime class
public class TappedRoutedEventArgs
    :
    Microsoft.UI.Xaml.RoutedEventArgs
{
    private var _self : Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs;
    public init(plok: Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Input.ITappedRoutedEventArgs { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Input.TappedRoutedEventArgs")
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_PointerDeviceType
    // method not needed: get_Handled
    // method not needed: put_Handled
    // method not needed: GetPosition
}

// type: Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode
// enum type
public typealias XYFocusKeyboardNavigationMode = _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode;

// type: Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy
// enum type
public typealias XYFocusNavigationStrategy = _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy;

}
extension Microsoft.UI.Xaml.Input.KeyTipPlacementMode {
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Auto;
        }
    }
    public static var Bottom : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Bottom;
        }
    }
    public static var Top : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Top;
        }
    }
    public static var Left : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Left;
        }
    }
    public static var Right : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Right;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Center;
        }
    }
    public static var Hidden : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyTipPlacementMode_Hidden;
        }
    }
}
extension Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode {
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Auto;
        }
    }
    public static var Hidden : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardAcceleratorPlacementMode_Hidden;
        }
    }
}
extension Microsoft.UI.Xaml.Input.KeyboardNavigationMode {
    public static var Local : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Local;
        }
    }
    public static var Cycle : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Cycle;
        }
    }
    public static var Once : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CKeyboardNavigationMode_Once;
        }
    }
}
extension Microsoft.UI.Xaml.Input.ManipulationModes {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_None;
        }
    }
    public static var TranslateX : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateX;
        }
    }
    public static var TranslateY : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateY;
        }
    }
    public static var TranslateRailsX : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateRailsX;
        }
    }
    public static var TranslateRailsY : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateRailsY;
        }
    }
    public static var Rotate : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_Rotate;
        }
    }
    public static var Scale : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_Scale;
        }
    }
    public static var TranslateInertia : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_TranslateInertia;
        }
    }
    public static var RotateInertia : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_RotateInertia;
        }
    }
    public static var ScaleInertia : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_ScaleInertia;
        }
    }
    public static var All : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_All;
        }
    }
    public static var System : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CManipulationModes_System;
        }
    }
}
extension Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode {
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Auto;
        }
    }
    public static var Enabled : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Enabled;
        }
    }
    public static var Disabled : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusKeyboardNavigationMode_Disabled;
        }
    }
}
extension Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy {
    public static var Auto : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Auto;
        }
    }
    public static var Projection : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_Projection;
        }
    }
    public static var NavigationDirectionDistance : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_NavigationDirectionDistance;
        }
    }
    public static var RectilinearDistance : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CInput_CXYFocusNavigationStrategy_RectilinearDistance;
        }
    }
}
