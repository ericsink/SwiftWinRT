// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsApp;
import WindowsSdk;
import CWindowsSdk;

extension Microsoft.UI.Xaml.Media {
// type: Microsoft.UI.Xaml.Media.AlignmentX
// enum type
public typealias AlignmentX = _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX;

// type: Microsoft.UI.Xaml.Media.AlignmentY
// enum type
public typealias AlignmentY = _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY;

// type: Microsoft.UI.Xaml.Media.Brush
// runtime class
open class Brush
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IBrush;
    private class Container {
        public var self_ref: Brush? = nil
    }
    private struct WithTrailingObjects_IBrushOverrides {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides
        public var container: Unmanaged<Container>
    }
    private var instance: Optional<UnsafeMutablePointer<WithTrailingObjects_IBrushOverrides>>
    private var _inner: Optional<WinRT.IInspectable> = nil
    private static func from_IBrushOverrides(_ pUnk: UnsafeMutableRawPointer?) -> Brush? {
        return pUnk?.bindMemory(to: Brush.WithTrailingObjects_IBrushOverrides.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }
    public init(plok: Microsoft.UI.Xaml.Media.IBrush?) throws {
        _self = plok!
        let instance = UnsafeMutablePointer<WithTrailingObjects_IBrushOverrides>.allocate(capacity: 1)
        instance.pointee = WithTrailingObjects_IBrushOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides(lpVtbl: &Self.vtable_IBrushOverrides), container: Unmanaged<Container>.passRetained(Container()))
        self.instance = instance
        try super.init(plok: _self.QueryInterface())
        instance.pointee.container.takeUnretainedValue().self_ref = self
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IBrush { return _self; }
    private static var vtable_IBrushOverrides: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, IInspectable.IID, Microsoft.UI.Xaml.Media.IBrushOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: Brush.WithTrailingObjects_IBrushOverrides.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: Brush.WithTrailingObjects_IBrushOverrides.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        pLen.pointee = 1
        var mem = CoTaskMemAlloc(16).bindMemory(to: IID.self, capacity: 1)
        (mem + 0).pointee = Microsoft.UI.Xaml.Media.IBrushOverrides.IID
        ppItems.pointee = mem
        return S_OK;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        do {
            pstr.pointee = try HString("Microsoft.UI.Xaml.Media.IBrushOverrides").Raw()
            return S_OK;
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        presult.pointee = CWinRT.TrustLevel(rawValue: 2);
        return S_OK;
    },
    PopulatePropertyInfoOverride: {
        (pThis, _ propertyName : Optional<HSTRING>, _ animationPropertyInfo : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo>>) in
        guard let self = Brush.from_IBrushOverrides(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.PopulatePropertyInfoOverride(propertyName: Swift.String(from: propertyName), animationPropertyInfo: Microsoft.UI.Composition.AnimationPropertyInfo(plok: Microsoft.UI.Composition.IAnimationPropertyInfo(animationPropertyInfo)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IBrushFactory
    public override init() throws {
        let instance = UnsafeMutablePointer<WithTrailingObjects_IBrushOverrides>.allocate(capacity: 1)
        self.instance = instance
        instance.pointee = WithTrailingObjects_IBrushOverrides(interface_struct: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides(lpVtbl: &Self.vtable_IBrushOverrides), container: Unmanaged<Container>.passRetained(Container()))
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IBrushFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Brush");
        let baseInterface = WinRT.IInspectable(UnsafeMutableRawPointer(instance))
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        _inner = _inn;
        try super.init(plok: _self.QueryInterface())
        instance.pointee.container.takeUnretainedValue().self_ref = self
    }
    private struct _IBrushStatics {
        static var x : IBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Brush")
    }
    public static var BrushStatics : IBrushStatics {
        _IBrushStatics.x
    }
    public static func get_OpacityProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.get_OpacityProperty());
    }
    public static func get_TransformProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.get_TransformProperty());
    }
    public static func get_RelativeTransformProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.get_RelativeTransformProperty());
    }
    public static var OpacityProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.OpacityProperty);
        }
    }
    public static var RelativeTransformProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.RelativeTransformProperty);
        }
    }
    public static var TransformProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BrushStatics.TransformProperty);
        }
    }
    public func get_Opacity() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.get_Opacity();
    }
    public func put_Opacity(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.put_Opacity(value: value);
    }
    public func get_Transform() throws -> Optional<Microsoft.UI.Xaml.Media.Transform> {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.get_Transform());
    }
    public func put_Transform(value : Optional<Microsoft.UI.Xaml.Media.Transform>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.put_Transform(value: value!.Interface());
    }
    public func get_RelativeTransform() throws -> Optional<Microsoft.UI.Xaml.Media.Transform> {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.get_RelativeTransform());
    }
    public func put_RelativeTransform(value : Optional<Microsoft.UI.Xaml.Media.Transform>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.put_RelativeTransform(value: value!.Interface());
    }
    public var Opacity : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try _ifc.Opacity;
        }
    }
    public var RelativeTransform : Optional<Microsoft.UI.Xaml.Media.Transform> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.RelativeTransform);
        }
    }
    public var Transform : Optional<Microsoft.UI.Xaml.Media.Transform> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.Transform(plok: _ifc.Transform);
        }
    }
    open func PopulatePropertyInfoOverride(propertyName : Swift.String, animationPropertyInfo : Optional<Microsoft.UI.Composition.AnimationPropertyInfo>) throws -> Void {
    }
    public func PopulatePropertyInfo(propertyName : Swift.String, propertyInfo : Optional<Microsoft.UI.Composition.AnimationPropertyInfo>) throws -> Void {
        let _ifc : Microsoft.UI.Composition.IAnimationObject = try _self.QueryInterface();
        return try _ifc.PopulatePropertyInfo(propertyName: propertyName, propertyInfo: propertyInfo!.Interface());
    }
}

// type: Microsoft.UI.Xaml.Media.BrushMappingMode
// enum type
public typealias BrushMappingMode = _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode;

// type: Microsoft.UI.Xaml.Media.CacheMode
// runtime class
open class CacheMode
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.ICacheMode;
    public init(plok: Microsoft.UI.Xaml.Media.ICacheMode?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ICacheMode { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.ICacheModeFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ICacheModeFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.CacheMode");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.Media.ColorInterpolationMode
// enum type
public typealias ColorInterpolationMode = _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode;

// type: Microsoft.UI.Xaml.Media.ElementCompositeMode
// enum type
public typealias ElementCompositeMode = _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode;

// type: Microsoft.UI.Xaml.Media.FontFamily
// runtime class
open class FontFamily
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Media.IFontFamily;
    public init(plok: Microsoft.UI.Xaml.Media.IFontFamily?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IFontFamily { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IFontFamilyFactory
    public init(familyName : Swift.String) throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IFontFamilyFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.FontFamily");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstanceWithName(familyName: familyName, baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IFontFamilyStatics
    // method not needed: get_Source
}

// type: Microsoft.UI.Xaml.Media.GeneralTransform
// runtime class
open class GeneralTransform
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IGeneralTransform;
    public init(plok: Microsoft.UI.Xaml.Media.IGeneralTransform?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IGeneralTransform { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IGeneralTransformFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IGeneralTransformFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.GeneralTransform");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // method not needed: get_Inverse
    // method not needed: TransformPoint
    // method not needed: TryTransform
    // method not needed: TransformBounds
    // instance interface not needed: Microsoft.UI.Xaml.Media.IGeneralTransformOverrides
}

// type: Microsoft.UI.Xaml.Media.Geometry
// runtime class
open class Geometry
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IGeometry;
    public init(plok: Microsoft.UI.Xaml.Media.IGeometry?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IGeometry { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IGeometryFactory
// composable interface not needed: Microsoft.UI.Xaml.Media.IGeometryFactory
    // static interface not needed: Microsoft.UI.Xaml.Media.IGeometryStatics
    // method not needed: get_Transform
    // method not needed: put_Transform
    // method not needed: get_Bounds
}

// type: Microsoft.UI.Xaml.Media.GradientBrush
// runtime class
open class GradientBrush
    :
    Microsoft.UI.Xaml.Media.Brush
{
    private var _self : Microsoft.UI.Xaml.Media.IGradientBrush;
    public init(plok: Microsoft.UI.Xaml.Media.IGradientBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IGradientBrush { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IGradientBrushFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IGradientBrushFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientBrush");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IGradientBrushStatics {
        static var x : IGradientBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientBrush")
    }
    public static var GradientBrushStatics : IGradientBrushStatics {
        _IGradientBrushStatics.x
    }
    public static func get_SpreadMethodProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.get_SpreadMethodProperty());
    }
    public static func get_MappingModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.get_MappingModeProperty());
    }
    public static func get_ColorInterpolationModeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.get_ColorInterpolationModeProperty());
    }
    public static func get_GradientStopsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.get_GradientStopsProperty());
    }
    public static var ColorInterpolationModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.ColorInterpolationModeProperty);
        }
    }
    public static var GradientStopsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.GradientStopsProperty);
        }
    }
    public static var MappingModeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.MappingModeProperty);
        }
    }
    public static var SpreadMethodProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientBrushStatics.SpreadMethodProperty);
        }
    }
    public func get_SpreadMethod() throws -> Microsoft.UI.Xaml.Media.GradientSpreadMethod {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.get_SpreadMethod();
    }
    public func put_SpreadMethod(value : Microsoft.UI.Xaml.Media.GradientSpreadMethod) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.put_SpreadMethod(value: value);
    }
    public func get_MappingMode() throws -> Microsoft.UI.Xaml.Media.BrushMappingMode {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.get_MappingMode();
    }
    public func put_MappingMode(value : Microsoft.UI.Xaml.Media.BrushMappingMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.put_MappingMode(value: value);
    }
    public func get_ColorInterpolationMode() throws -> Microsoft.UI.Xaml.Media.ColorInterpolationMode {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.get_ColorInterpolationMode();
    }
    public func put_ColorInterpolationMode(value : Microsoft.UI.Xaml.Media.ColorInterpolationMode) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.put_ColorInterpolationMode(value: value);
    }
    public func get_GradientStops() throws -> Optional<Microsoft.UI.Xaml.Media.GradientStopCollection> {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.GradientStopCollection(plok: _ifc.get_GradientStops());
    }
    public func put_GradientStops(value : Optional<Microsoft.UI.Xaml.Media.GradientStopCollection>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.put_GradientStops(value: value!.Interface());
    }
    public var ColorInterpolationMode : Microsoft.UI.Xaml.Media.ColorInterpolationMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.ColorInterpolationMode;
        }
    }
    public var GradientStops : Optional<Microsoft.UI.Xaml.Media.GradientStopCollection> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.GradientStopCollection(plok: _ifc.GradientStops);
        }
    }
    public var MappingMode : Microsoft.UI.Xaml.Media.BrushMappingMode {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.MappingMode;
        }
    }
    public var SpreadMethod : Microsoft.UI.Xaml.Media.GradientSpreadMethod {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientBrush = try _self.QueryInterface();
        return try _ifc.SpreadMethod;
        }
    }
}

// type: Microsoft.UI.Xaml.Media.GradientSpreadMethod
// enum type
public typealias GradientSpreadMethod = _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod;

// type: Microsoft.UI.Xaml.Media.GradientStop
// runtime class
public class GradientStop
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IGradientStop;
    public init(plok: Microsoft.UI.Xaml.Media.IGradientStop?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IGradientStop { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.GradientStop")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IGradientStopStatics {
        static var x : IGradientStopStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.GradientStop")
    }
    public static var GradientStopStatics : IGradientStopStatics {
        _IGradientStopStatics.x
    }
    public static func get_ColorProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientStopStatics.get_ColorProperty());
    }
    public static func get_OffsetProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientStopStatics.get_OffsetProperty());
    }
    public static var ColorProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientStopStatics.ColorProperty);
        }
    }
    public static var OffsetProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: GradientStopStatics.OffsetProperty);
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientStop = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientStop = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public func get_Offset() throws -> Swift.Double {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientStop = try _self.QueryInterface();
        return try _ifc.get_Offset();
    }
    public func put_Offset(value : Swift.Double) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientStop = try _self.QueryInterface();
        return try _ifc.put_Offset(value: value);
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientStop = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
    public var Offset : Swift.Double {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IGradientStop = try _self.QueryInterface();
        return try _ifc.Offset;
        }
    }
}

// type: Microsoft.UI.Xaml.Media.GradientStopCollection
// runtime class
public class GradientStopCollection
    :
    WinRT.Object
{
    private var _self : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop;
    public init(plok: ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.GradientStopCollection")
        try super.init(plok: _self.QueryInterface())
    }
    public func GetAt(index : Swift.UInt32) throws -> Optional<Microsoft.UI.Xaml.Media.GradientStop> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.GradientStop(plok: _ifc.GetAt(index: index));
    }
    public func get_Size() throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.get_Size();
    }
    public func GetView() throws -> Optional<ClosedGenerics.IVectorView_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop> {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.GetView();
    }
    public func IndexOf(value : Optional<Microsoft.UI.Xaml.Media.GradientStop>, index : inout Swift.UInt32) throws -> boolean {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
            var _tmp_out_index: Swift.UInt32 = 0;
        return try _ifc.IndexOf(value: value!.Interface(), index: &_tmp_out_index);
    }
    public func SetAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Media.GradientStop>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.SetAt(index: index, value: value!.Interface());
    }
    public func InsertAt(index : Swift.UInt32, value : Optional<Microsoft.UI.Xaml.Media.GradientStop>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.InsertAt(index: index, value: value!.Interface());
    }
    public func RemoveAt(index : Swift.UInt32) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.RemoveAt(index: index);
    }
    public func Append(value : Optional<Microsoft.UI.Xaml.Media.GradientStop>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.Append(value: value!.Interface());
    }
    public func RemoveAtEnd() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.RemoveAtEnd();
    }
    public func Clear() throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.Clear();
    }
    public func GetMany(startIndex : Swift.UInt32, itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop>>>>) throws -> Swift.UInt32 {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.GetMany(startIndex: startIndex, itemsLength: itemsLength, items: items);
    }
    public func ReplaceAll(itemsLength : UINT32, items : Optional<UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop>>>>) throws -> Void {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.ReplaceAll(itemsLength: itemsLength, items: items);
    }
    public var Size : Swift.UInt32 {
        get throws {
        let _ifc : ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop = try _self.QueryInterface();
        return try _ifc.Size;
        }
    }
    // method not needed: First
}

// type: Microsoft.UI.Xaml.Media.IBrush
// interface type
open class IBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2de3cb83, Data2: 0x1329, Data3 : 0x5679, Data4 : (0x88, 0xf8, 0xc8, 0x22, 0xbc, 0x54, 0x42, 0xcb)) }
    // [IsSpecialName] System.Double get_Opacity()
    private func _n_get_Opacity(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, __presult))
        }
    }
    public func get_Opacity() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Opacity(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Opacity(System.Double)
    private func _n_put_Opacity(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
        }
    }
    public func put_Opacity(value : Swift.Double) throws -> Void {
        try self._n_put_Opacity(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Transform get_Transform()
    private func _n_get_Transform(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, __presult))
        }
    }
    public func get_Transform() throws -> Optional<Microsoft.UI.Xaml.Media.ITransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>> = nil;
        try self._n_get_Transform(&__result);
        return Microsoft.UI.Xaml.Media.ITransform(consuming: __result);
    }
    // [IsSpecialName] void put_Transform(Microsoft.UI.Xaml.Media.Transform)
    private func _n_put_Transform(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform(pThis, value))
        }
    }
    public func put_Transform(value : Optional<Microsoft.UI.Xaml.Media.ITransform>) throws -> Void {
        try self._n_put_Transform(RawPointer(value));
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Transform get_RelativeTransform()
    private func _n_get_RelativeTransform(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RelativeTransform(pThis, __presult))
        }
    }
    public func get_RelativeTransform() throws -> Optional<Microsoft.UI.Xaml.Media.ITransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>> = nil;
        try self._n_get_RelativeTransform(&__result);
        return Microsoft.UI.Xaml.Media.ITransform(consuming: __result);
    }
    // [IsSpecialName] void put_RelativeTransform(Microsoft.UI.Xaml.Media.Transform)
    private func _n_put_RelativeTransform(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITransform>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RelativeTransform(pThis, value))
        }
    }
    public func put_RelativeTransform(value : Optional<Microsoft.UI.Xaml.Media.ITransform>) throws -> Void {
        try self._n_put_RelativeTransform(RawPointer(value));
    }
    public var Opacity : Swift.Double {
        get throws {
            return try get_Opacity();
        }
    }
    public var RelativeTransform : Optional<Microsoft.UI.Xaml.Media.ITransform> {
        get throws {
            return try get_RelativeTransform();
        }
    }
    public var Transform : Optional<Microsoft.UI.Xaml.Media.ITransform> {
        get throws {
            return try get_Transform();
        }
    }
} // IBrush


// type: Microsoft.UI.Xaml.Media.IBrushFactory
// interface type
// COMPOSITION INTERFACE
open class IBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb5258717, Data2: 0x6c49, Data3 : 0x5ba5, Data4 : (0x87, 0xfd, 0x35, 0xdf, 0x38, 0x26, 0x47, 0xa5)) }
    // Microsoft.UI.Xaml.Media.Brush CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
} // IBrushFactory


// type: Microsoft.UI.Xaml.Media.IBrushOverrides
// interface type
open class IBrushOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6b08394, Data2: 0xbacf, Data3 : 0x53db, Data4 : (0x9a, 0xc7, 0xbe, 0x1c, 0x69, 0x3e, 0x35, 0x13)) }
    // void PopulatePropertyInfoOverride(System.String, Microsoft.UI.Composition.AnimationPropertyInfo)
    private func _n_PopulatePropertyInfoOverride(_ propertyName : Optional<HSTRING>, _ animationPropertyInfo : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CComposition_CIAnimationPropertyInfo>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.PopulatePropertyInfoOverride(pThis, propertyName, animationPropertyInfo))
        }
    }
    public func PopulatePropertyInfoOverride(propertyName : Swift.String, animationPropertyInfo : Optional<Microsoft.UI.Composition.IAnimationPropertyInfo>) throws -> Void {
        let __hstr_propertyName = try HString(propertyName);
        return try withExtendedLifetime(__hstr_propertyName) {
        try self._n_PopulatePropertyInfoOverride(__hstr_propertyName.Raw(), RawPointer(animationPropertyInfo));
        }
    }
} // IBrushOverrides


// type: Microsoft.UI.Xaml.Media.IBrushStatics
// interface type
open class IBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5b854f50, Data2: 0xf818, Data3 : 0x5f01, Data4 : (0x91, 0xb0, 0x28, 0x13, 0x2d, 0x3f, 0x59, 0x57)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OpacityProperty()
    private func _n_get_OpacityProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpacityProperty(pThis, __presult))
        }
    }
    public func get_OpacityProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OpacityProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_TransformProperty()
    private func _n_get_TransformProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformProperty(pThis, __presult))
        }
    }
    public func get_TransformProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_TransformProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_RelativeTransformProperty()
    private func _n_get_RelativeTransformProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RelativeTransformProperty(pThis, __presult))
        }
    }
    public func get_RelativeTransformProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_RelativeTransformProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var OpacityProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OpacityProperty();
        }
    }
    public var RelativeTransformProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_RelativeTransformProperty();
        }
    }
    public var TransformProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_TransformProperty();
        }
    }
} // IBrushStatics


// type: Microsoft.UI.Xaml.Media.ICacheMode
// interface type
open class ICacheMode
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2ff1a1cb, Data2: 0x0f48, Data3 : 0x53fd, Data4 : (0xb1, 0xde, 0xe2, 0x22, 0x3d, 0xfb, 0x2f, 0xf6)) }
} // ICacheMode


// type: Microsoft.UI.Xaml.Media.ICacheModeFactory
// interface type
// COMPOSITION INTERFACE
open class ICacheModeFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe257811e, Data2: 0xdcc5, Data3 : 0x51d8, Data4 : (0x82, 0x9a, 0x3e, 0x94, 0x00, 0x19, 0x8a, 0x41)) }
    // Microsoft.UI.Xaml.Media.CacheMode CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CICacheModeFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.ICacheMode> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CICacheMode>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.ICacheMode(consuming: __result);
    }
} // ICacheModeFactory


// type: Microsoft.UI.Xaml.Media.IFontFamily
// interface type
open class IFontFamily
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x18fa5bc1, Data2: 0x7294, Data3 : 0x527c, Data4 : (0xbb, 0x02, 0xb2, 0x13, 0xe0, 0xb3, 0xa2, 0xa3)) }
// method not needed: get_Source
} // IFontFamily


// type: Microsoft.UI.Xaml.Media.IFontFamilyFactory
// interface type
// COMPOSITION INTERFACE
open class IFontFamilyFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61b88a77, Data2: 0xd0f9, Data3 : 0x5e9e, Data4 : (0x8c, 0x28, 0xed, 0xa0, 0x1f, 0xed, 0xe2, 0x2e)) }
    // Microsoft.UI.Xaml.Media.FontFamily CreateInstanceWithName(System.String, System.Object, ref System.Object)
    private func _n_CreateInstanceWithName(_ familyName : Optional<HSTRING>, _ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithName(pThis, familyName, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstanceWithName(familyName : Swift.String, baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IFontFamily> {
        let __hstr_familyName = try HString(familyName);
        return try withExtendedLifetime(__hstr_familyName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstanceWithName(__hstr_familyName.Raw(), RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IFontFamily(consuming: __result);
        }
    }
} // IFontFamilyFactory


// type: Microsoft.UI.Xaml.Media.IGeneralTransform
// interface type
open class IGeneralTransform
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x04eedeeb, Data2: 0x31e5, Data3 : 0x54c0, Data4 : (0xae, 0x3f, 0x8b, 0xd0, 0x66, 0x45, 0xd3, 0x39)) }
// method not needed: get_Inverse
// method not needed: TransformPoint
// method not needed: TryTransform
// method not needed: TransformBounds
} // IGeneralTransform


// type: Microsoft.UI.Xaml.Media.IGeneralTransformFactory
// interface type
// COMPOSITION INTERFACE
open class IGeneralTransformFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2f1025a3, Data2: 0x5391, Data3 : 0x5d1b, Data4 : (0x83, 0x82, 0x3c, 0xaa, 0xa1, 0xd2, 0x6a, 0x96)) }
    // Microsoft.UI.Xaml.Media.GeneralTransform CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransformFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IGeneralTransform> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGeneralTransform>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IGeneralTransform(consuming: __result);
    }
} // IGeneralTransformFactory


// type: Microsoft.UI.Xaml.Media.IGeometry
// interface type
open class IGeometry
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdc102dcc, Data2: 0x3be2, Data3 : 0x5414, Data4 : (0x85, 0x99, 0x94, 0xb6, 0xe7, 0x6e, 0xf3, 0x9b)) }
// method not needed: get_Transform
// method not needed: put_Transform
// method not needed: get_Bounds
} // IGeometry


// type: Microsoft.UI.Xaml.Media.IGradientBrush
// interface type
open class IGradientBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x77c347fa, Data2: 0xc4c4, Data3 : 0x5174, Data4 : (0xa9, 0x45, 0x65, 0xca, 0xb3, 0xaa, 0x1c, 0x75)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.GradientSpreadMethod get_SpreadMethod()
    private func _n_get_SpreadMethod(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpreadMethod(pThis, __presult))
        }
    }
    public func get_SpreadMethod() throws -> Microsoft.UI.Xaml.Media.GradientSpreadMethod {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod = _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Pad;
        try self._n_get_SpreadMethod(&__result);
        return __result;
    }
    // [IsSpecialName] void put_SpreadMethod(Microsoft.UI.Xaml.Media.GradientSpreadMethod)
    private func _n_put_SpreadMethod(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpreadMethod(pThis, value))
        }
    }
    public func put_SpreadMethod(value : Microsoft.UI.Xaml.Media.GradientSpreadMethod) throws -> Void {
        try self._n_put_SpreadMethod(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.BrushMappingMode get_MappingMode()
    private func _n_get_MappingMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MappingMode(pThis, __presult))
        }
    }
    public func get_MappingMode() throws -> Microsoft.UI.Xaml.Media.BrushMappingMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode = _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_Absolute;
        try self._n_get_MappingMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_MappingMode(Microsoft.UI.Xaml.Media.BrushMappingMode)
    private func _n_put_MappingMode(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_MappingMode(pThis, value))
        }
    }
    public func put_MappingMode(value : Microsoft.UI.Xaml.Media.BrushMappingMode) throws -> Void {
        try self._n_put_MappingMode(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.ColorInterpolationMode get_ColorInterpolationMode()
    private func _n_get_ColorInterpolationMode(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorInterpolationMode(pThis, __presult))
        }
    }
    public func get_ColorInterpolationMode() throws -> Microsoft.UI.Xaml.Media.ColorInterpolationMode {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode = _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_ScRgbLinearInterpolation;
        try self._n_get_ColorInterpolationMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_ColorInterpolationMode(Microsoft.UI.Xaml.Media.ColorInterpolationMode)
    private func _n_put_ColorInterpolationMode(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorInterpolationMode(pThis, value))
        }
    }
    public func put_ColorInterpolationMode(value : Microsoft.UI.Xaml.Media.ColorInterpolationMode) throws -> Void {
        try self._n_put_ColorInterpolationMode(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.GradientStopCollection get_GradientStops()
    private func _n_get_GradientStops(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GradientStops(pThis, __presult))
        }
    }
    public func get_GradientStops() throws -> Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop>> = nil;
        try self._n_get_GradientStops(&__result);
        return ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop(consuming: __result);
    }
    // [IsSpecialName] void put_GradientStops(Microsoft.UI.Xaml.Media.GradientStopCollection)
    private func _n_put_GradientStops(_ value : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_GradientStops(pThis, value))
        }
    }
    public func put_GradientStops(value : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop>) throws -> Void {
        try self._n_put_GradientStops(RawPointer(value));
    }
    public var ColorInterpolationMode : Microsoft.UI.Xaml.Media.ColorInterpolationMode {
        get throws {
            return try get_ColorInterpolationMode();
        }
    }
    public var GradientStops : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop> {
        get throws {
            return try get_GradientStops();
        }
    }
    public var MappingMode : Microsoft.UI.Xaml.Media.BrushMappingMode {
        get throws {
            return try get_MappingMode();
        }
    }
    public var SpreadMethod : Microsoft.UI.Xaml.Media.GradientSpreadMethod {
        get throws {
            return try get_SpreadMethod();
        }
    }
} // IGradientBrush


// type: Microsoft.UI.Xaml.Media.IGradientBrushFactory
// interface type
// COMPOSITION INTERFACE
open class IGradientBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x64ff6177, Data2: 0x1eda, Data3 : 0x565b, Data4 : (0xb7, 0xaa, 0xac, 0x50, 0x15, 0x2e, 0x31, 0x36)) }
    // Microsoft.UI.Xaml.Media.GradientBrush CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrush>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IGradientBrush(consuming: __result);
    }
} // IGradientBrushFactory


// type: Microsoft.UI.Xaml.Media.IGradientBrushStatics
// interface type
open class IGradientBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4d3697d7, Data2: 0xc6db, Data3 : 0x501c, Data4 : (0x8f, 0xa2, 0xda, 0x30, 0xb8, 0xc8, 0xca, 0x3b)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_SpreadMethodProperty()
    private func _n_get_SpreadMethodProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpreadMethodProperty(pThis, __presult))
        }
    }
    public func get_SpreadMethodProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_SpreadMethodProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_MappingModeProperty()
    private func _n_get_MappingModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_MappingModeProperty(pThis, __presult))
        }
    }
    public func get_MappingModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_MappingModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColorInterpolationModeProperty()
    private func _n_get_ColorInterpolationModeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorInterpolationModeProperty(pThis, __presult))
        }
    }
    public func get_ColorInterpolationModeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColorInterpolationModeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_GradientStopsProperty()
    private func _n_get_GradientStopsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_GradientStopsProperty(pThis, __presult))
        }
    }
    public func get_GradientStopsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_GradientStopsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ColorInterpolationModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColorInterpolationModeProperty();
        }
    }
    public var GradientStopsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_GradientStopsProperty();
        }
    }
    public var MappingModeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_MappingModeProperty();
        }
    }
    public var SpreadMethodProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_SpreadMethodProperty();
        }
    }
} // IGradientBrushStatics


// type: Microsoft.UI.Xaml.Media.IGradientStop
// interface type
open class IGradientStop
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x48bcb039, Data2: 0xe8e1, Data3 : 0x5743, Data4 : (0x94, 0xc3, 0xf7, 0x66, 0x01, 0x1d, 0x3b, 0x5d)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    // [IsSpecialName] System.Double get_Offset()
    private func _n_get_Offset(_ __presult: UnsafeMutablePointer<DOUBLE>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, __presult))
        }
    }
    public func get_Offset() throws -> Swift.Double {
        var __result : DOUBLE = 0;
        try self._n_get_Offset(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Offset(System.Double)
    private func _n_put_Offset(_ value : DOUBLE) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Offset(pThis, value))
        }
    }
    public func put_Offset(value : Swift.Double) throws -> Void {
        try self._n_put_Offset(value);
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
    public var Offset : Swift.Double {
        get throws {
            return try get_Offset();
        }
    }
} // IGradientStop


// type: Microsoft.UI.Xaml.Media.IGradientStopStatics
// interface type
open class IGradientStopStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0b566c1b, Data2: 0x37de, Data3 : 0x5bfd, Data4 : (0xb4, 0x19, 0x0f, 0x7c, 0x4c, 0x0a, 0x05, 0x23)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColorProperty()
    private func _n_get_ColorProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorProperty(pThis, __presult))
        }
    }
    public func get_ColorProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColorProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_OffsetProperty()
    private func _n_get_OffsetProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIGradientStopStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_OffsetProperty(pThis, __presult))
        }
    }
    public func get_OffsetProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_OffsetProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ColorProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColorProperty();
        }
    }
    public var OffsetProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_OffsetProperty();
        }
    }
} // IGradientStopStatics


// type: Microsoft.UI.Xaml.Media.IImageBrush
// interface type
open class IImageBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xedcd91a3, Data2: 0xa868, Data3 : 0x5ba6, Data4 : (0x94, 0x89, 0x5b, 0x12, 0xb4, 0xc2, 0x9d, 0x85)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.ImageSource get_ImageSource()
    private func _n_get_ImageSource(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ImageSource(pThis, __presult))
        }
    }
    public func get_ImageSource() throws -> Optional<Microsoft.UI.Xaml.Media.IImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource>> = nil;
        try self._n_get_ImageSource(&__result);
        return Microsoft.UI.Xaml.Media.IImageSource(consuming: __result);
    }
    // [IsSpecialName] void put_ImageSource(Microsoft.UI.Xaml.Media.ImageSource)
    private func _n_put_ImageSource(_ value : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIImageSource>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_ImageSource(pThis, value))
        }
    }
    public func put_ImageSource(value : Optional<Microsoft.UI.Xaml.Media.IImageSource>) throws -> Void {
        try self._n_put_ImageSource(RawPointer(value));
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ImageFailed(Microsoft.UI.Xaml.ExceptionRoutedEventHandler)
    private func _n_add_ImageFailed(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageFailed(pThis, handler, __presult))
        }
    }
    public func add_ImageFailed(handler : Optional<Microsoft.UI.Xaml.IExceptionRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ImageFailed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ImageFailed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ImageFailed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageFailed(pThis, token))
        }
    }
    public func remove_ImageFailed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ImageFailed(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ImageOpened(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_ImageOpened(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageOpened(pThis, handler, __presult))
        }
    }
    public func add_ImageOpened(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ImageOpened(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ImageOpened(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ImageOpened(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageOpened(pThis, token))
        }
    }
    public func remove_ImageOpened(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ImageOpened(token);
    }
    public var ImageSource : Optional<Microsoft.UI.Xaml.Media.IImageSource> {
        get throws {
            return try get_ImageSource();
        }
    }
} // IImageBrush


// type: Microsoft.UI.Xaml.Media.IImageBrushStatics
// interface type
open class IImageBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xce8082dc, Data2: 0xa505, Data3 : 0x5b4f, Data4 : (0x88, 0x61, 0x79, 0x63, 0x0f, 0x52, 0xc1, 0x89)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ImageSourceProperty()
    private func _n_get_ImageSourceProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIImageBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ImageSourceProperty(pThis, __presult))
        }
    }
    public func get_ImageSourceProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ImageSourceProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ImageSourceProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ImageSourceProperty();
        }
    }
} // IImageBrushStatics


// type: Microsoft.UI.Xaml.Media.IImageSource
// interface type
open class IImageSource
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6c2038f6, Data2: 0xd6d5, Data3 : 0x55e9, Data4 : (0x9b, 0x9e, 0x08, 0x2f, 0x12, 0xdb, 0xff, 0x60)) }
} // IImageSource


// type: Microsoft.UI.Xaml.Media.ILinearGradientBrush
// interface type
open class ILinearGradientBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc0ab9638, Data2: 0x1bd9, Data3 : 0x5fa4, Data4 : (0x96, 0x49, 0x48, 0xcf, 0xa1, 0x2f, 0x0d, 0x1e)) }
    // [IsSpecialName] Windows.Foundation.Point get_StartPoint()
    private func _n_get_StartPoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CPoint>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPoint(pThis, __presult))
        }
    }
    public func get_StartPoint() throws -> Windows.Foundation.Point {
        var __result : _q_CWindows_CFoundation_CPoint = _q_CWindows_CFoundation_CPoint(X: 0, Y: 0);
        try self._n_get_StartPoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_StartPoint(Windows.Foundation.Point)
    private func _n_put_StartPoint(_ value : _q_CWindows_CFoundation_CPoint) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartPoint(pThis, value))
        }
    }
    public func put_StartPoint(value : Windows.Foundation.Point) throws -> Void {
        try self._n_put_StartPoint(value);
    }
    // [IsSpecialName] Windows.Foundation.Point get_EndPoint()
    private func _n_get_EndPoint(_ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CPoint>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPoint(pThis, __presult))
        }
    }
    public func get_EndPoint() throws -> Windows.Foundation.Point {
        var __result : _q_CWindows_CFoundation_CPoint = _q_CWindows_CFoundation_CPoint(X: 0, Y: 0);
        try self._n_get_EndPoint(&__result);
        return __result;
    }
    // [IsSpecialName] void put_EndPoint(Windows.Foundation.Point)
    private func _n_put_EndPoint(_ value : _q_CWindows_CFoundation_CPoint) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndPoint(pThis, value))
        }
    }
    public func put_EndPoint(value : Windows.Foundation.Point) throws -> Void {
        try self._n_put_EndPoint(value);
    }
    public var EndPoint : Windows.Foundation.Point {
        get throws {
            return try get_EndPoint();
        }
    }
    public var StartPoint : Windows.Foundation.Point {
        get throws {
            return try get_StartPoint();
        }
    }
} // ILinearGradientBrush


// type: Microsoft.UI.Xaml.Media.ILinearGradientBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ILinearGradientBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc0ba7de3, Data2: 0xccfd, Data3 : 0x534c, Data4 : (0x88, 0x2f, 0x3a, 0xb3, 0x9a, 0xe7, 0x23, 0xf3)) }
    // Microsoft.UI.Xaml.Media.LinearGradientBrush CreateInstanceWithGradientStopCollectionAndAngle(Microsoft.UI.Xaml.Media.GradientStopCollection, System.Double)
    private func _n_CreateInstanceWithGradientStopCollectionAndAngle(_ gradientStopCollection : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_CCollections_IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop>>, _ angle : DOUBLE, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithGradientStopCollectionAndAngle(pThis, gradientStopCollection, angle, __presult))
        }
    }
    public func CreateInstanceWithGradientStopCollectionAndAngle(gradientStopCollection : Optional<ClosedGenerics.IVector_1__q_CMicrosoft_CUI_CXaml_CMedia_CGradientStop>, angle : Swift.Double) throws -> Optional<Microsoft.UI.Xaml.Media.ILinearGradientBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrush>> = nil;
        try self._n_CreateInstanceWithGradientStopCollectionAndAngle(RawPointer(gradientStopCollection), angle, &__result);
        return Microsoft.UI.Xaml.Media.ILinearGradientBrush(consuming: __result);
    }
} // ILinearGradientBrushFactory


// type: Microsoft.UI.Xaml.Media.ILinearGradientBrushStatics
// interface type
open class ILinearGradientBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdf029e84, Data2: 0xf6be, Data3 : 0x5b7e, Data4 : (0xba, 0x22, 0x3b, 0x4e, 0x7a, 0x6b, 0xce, 0xee)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_StartPointProperty()
    private func _n_get_StartPointProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPointProperty(pThis, __presult))
        }
    }
    public func get_StartPointProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_StartPointProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_EndPointProperty()
    private func _n_get_EndPointProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CILinearGradientBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPointProperty(pThis, __presult))
        }
    }
    public func get_EndPointProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_EndPointProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var EndPointProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_EndPointProperty();
        }
    }
    public var StartPointProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_StartPointProperty();
        }
    }
} // ILinearGradientBrushStatics


// type: Microsoft.UI.Xaml.Media.IProjection
// interface type
open class IProjection
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc95364b3, Data2: 0x6058, Data3 : 0x5ee5, Data4 : (0x9e, 0x28, 0xd3, 0x8b, 0x76, 0x79, 0xfc, 0xd4)) }
} // IProjection


// type: Microsoft.UI.Xaml.Media.IProjectionFactory
// interface type
// COMPOSITION INTERFACE
open class IProjectionFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x870ea34f, Data2: 0xdb61, Data3 : 0x5b75, Data4 : (0x89, 0xad, 0xe0, 0x48, 0x0c, 0x80, 0x29, 0x37)) }
    // Microsoft.UI.Xaml.Media.Projection CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIProjectionFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IProjection> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIProjection>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IProjection(consuming: __result);
    }
} // IProjectionFactory


// type: Microsoft.UI.Xaml.Media.IRectangleGeometry
// interface type
open class IRectangleGeometry
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6143890, Data2: 0xa5f5, Data3 : 0x54e0, Data4 : (0xab, 0x42, 0xd8, 0x8b, 0xab, 0x45, 0x1f, 0x04)) }
// method not needed: get_Rect
// method not needed: put_Rect
} // IRectangleGeometry


// type: Microsoft.UI.Xaml.Media.IShadow
// interface type
open class IShadow
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xcc12fd6a, Data2: 0x50aa, Data3 : 0x5eb3, Data4 : (0x9a, 0x0e, 0xb9, 0x38, 0xb4, 0x54, 0xc4, 0x39)) }
} // IShadow


// type: Microsoft.UI.Xaml.Media.ISolidColorBrush
// interface type
open class ISolidColorBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb3865c31, Data2: 0x37c8, Data3 : 0x55c1, Data4 : (0x8a, 0x72, 0xd4, 0x1c, 0x67, 0x64, 0x2e, 0x2a)) }
    // [IsSpecialName] Windows.UI.Color get_Color()
    private func _n_get_Color(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CColor>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, __presult))
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        var __result : _q_CWindows_CUI_CColor = _q_CWindows_CUI_CColor(A: 0, R: 0, G: 0, B: 0);
        try self._n_get_Color(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Color(Windows.UI.Color)
    private func _n_put_Color(_ value : _q_CWindows_CUI_CColor) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, value))
        }
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        try self._n_put_Color(value);
    }
    public var Color : Windows.UI.Color {
        get throws {
            return try get_Color();
        }
    }
} // ISolidColorBrush


// type: Microsoft.UI.Xaml.Media.ISolidColorBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ISolidColorBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7b559384, Data2: 0x4daa, Data3 : 0x54f4, Data4 : (0x91, 0xef, 0x33, 0xa2, 0x3f, 0xd8, 0x16, 0xca)) }
    // Microsoft.UI.Xaml.Media.SolidColorBrush CreateInstanceWithColor(Windows.UI.Color)
    private func _n_CreateInstanceWithColor(_ color : _q_CWindows_CUI_CColor, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithColor(pThis, color, __presult))
        }
    }
    public func CreateInstanceWithColor(color : Windows.UI.Color) throws -> Optional<Microsoft.UI.Xaml.Media.ISolidColorBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>> = nil;
        try self._n_CreateInstanceWithColor(color, &__result);
        return Microsoft.UI.Xaml.Media.ISolidColorBrush(consuming: __result);
    }
} // ISolidColorBrushFactory


// type: Microsoft.UI.Xaml.Media.ISolidColorBrushStatics
// interface type
open class ISolidColorBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x6bc16da0, Data2: 0xc4e6, Data3 : 0x59b8, Data4 : (0x99, 0x5b, 0xb3, 0x1e, 0x48, 0x42, 0x4c, 0x07)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_ColorProperty()
    private func _n_get_ColorProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorProperty(pThis, __presult))
        }
    }
    public func get_ColorProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_ColorProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var ColorProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_ColorProperty();
        }
    }
} // ISolidColorBrushStatics


// type: Microsoft.UI.Xaml.Media.ITileBrush
// interface type
open class ITileBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xee46060d, Data2: 0xcabc, Data3 : 0x505d, Data4 : (0x88, 0x3c, 0x75, 0xd2, 0xe0, 0xe4, 0x58, 0x75)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.AlignmentX get_AlignmentX()
    private func _n_get_AlignmentX(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignmentX(pThis, __presult))
        }
    }
    public func get_AlignmentX() throws -> Microsoft.UI.Xaml.Media.AlignmentX {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX = _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX_Left;
        try self._n_get_AlignmentX(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlignmentX(Microsoft.UI.Xaml.Media.AlignmentX)
    private func _n_put_AlignmentX(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlignmentX(pThis, value))
        }
    }
    public func put_AlignmentX(value : Microsoft.UI.Xaml.Media.AlignmentX) throws -> Void {
        try self._n_put_AlignmentX(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.AlignmentY get_AlignmentY()
    private func _n_get_AlignmentY(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignmentY(pThis, __presult))
        }
    }
    public func get_AlignmentY() throws -> Microsoft.UI.Xaml.Media.AlignmentY {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY = _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY_Top;
        try self._n_get_AlignmentY(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AlignmentY(Microsoft.UI.Xaml.Media.AlignmentY)
    private func _n_put_AlignmentY(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlignmentY(pThis, value))
        }
    }
    public func put_AlignmentY(value : Microsoft.UI.Xaml.Media.AlignmentY) throws -> Void {
        try self._n_put_AlignmentY(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Stretch get_Stretch()
    private func _n_get_Stretch(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CStretch>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stretch(pThis, __presult))
        }
    }
    public func get_Stretch() throws -> Microsoft.UI.Xaml.Media.Stretch {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CStretch = _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_None;
        try self._n_get_Stretch(&__result);
        return __result;
    }
    // [IsSpecialName] void put_Stretch(Microsoft.UI.Xaml.Media.Stretch)
    private func _n_put_Stretch(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CStretch) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Stretch(pThis, value))
        }
    }
    public func put_Stretch(value : Microsoft.UI.Xaml.Media.Stretch) throws -> Void {
        try self._n_put_Stretch(value);
    }
    public var AlignmentX : Microsoft.UI.Xaml.Media.AlignmentX {
        get throws {
            return try get_AlignmentX();
        }
    }
    public var AlignmentY : Microsoft.UI.Xaml.Media.AlignmentY {
        get throws {
            return try get_AlignmentY();
        }
    }
    public var Stretch : Microsoft.UI.Xaml.Media.Stretch {
        get throws {
            return try get_Stretch();
        }
    }
} // ITileBrush


// type: Microsoft.UI.Xaml.Media.ITileBrushFactory
// interface type
// COMPOSITION INTERFACE
open class ITileBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8542e5e6, Data2: 0x5177, Data3 : 0x506f, Data4 : (0x8a, 0x3b, 0xaa, 0x7d, 0xa6, 0x51, 0xf0, 0x99)) }
    // Microsoft.UI.Xaml.Media.TileBrush CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.ITileBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CITileBrush>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.ITileBrush(consuming: __result);
    }
} // ITileBrushFactory


// type: Microsoft.UI.Xaml.Media.ITileBrushStatics
// interface type
open class ITileBrushStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf402197b, Data2: 0x9047, Data3 : 0x5f8a, Data4 : (0x90, 0xbc, 0x6f, 0x5d, 0x8c, 0x74, 0x8a, 0x5f)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AlignmentXProperty()
    private func _n_get_AlignmentXProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignmentXProperty(pThis, __presult))
        }
    }
    public func get_AlignmentXProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AlignmentXProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AlignmentYProperty()
    private func _n_get_AlignmentYProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlignmentYProperty(pThis, __presult))
        }
    }
    public func get_AlignmentYProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AlignmentYProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_StretchProperty()
    private func _n_get_StretchProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CITileBrushStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_StretchProperty(pThis, __presult))
        }
    }
    public func get_StretchProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_StretchProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var AlignmentXProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AlignmentXProperty();
        }
    }
    public var AlignmentYProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AlignmentYProperty();
        }
    }
    public var StretchProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_StretchProperty();
        }
    }
} // ITileBrushStatics


// type: Microsoft.UI.Xaml.Media.ITransform
// interface type
open class ITransform
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x92a8dee5, Data2: 0x1413, Data3 : 0x56b9, Data4 : (0x8c, 0xca, 0x3c, 0x46, 0x91, 0x8f, 0xde, 0x1b)) }
} // ITransform


// type: Microsoft.UI.Xaml.Media.IXamlLight
// interface type
open class IXamlLight
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdcd20139, Data2: 0x8cd5, Data3 : 0x5da5, Data4 : (0xa2, 0x5c, 0x2b, 0x7b, 0x81, 0x3d, 0x8d, 0x58)) }
} // IXamlLight


// type: Microsoft.UI.Xaml.Media.IXamlLightFactory
// interface type
// COMPOSITION INTERFACE
open class IXamlLightFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x76da6306, Data2: 0x96fc, Data3 : 0x553e, Data4 : (0xbb, 0x39, 0x9a, 0x48, 0x01, 0xd0, 0x6f, 0x48)) }
    // Microsoft.UI.Xaml.Media.XamlLight CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLightFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.IXamlLight> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIXamlLight>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.IXamlLight(consuming: __result);
    }
} // IXamlLightFactory


// type: Microsoft.UI.Xaml.Media.ImageBrush
// runtime class
public class ImageBrush
    :
    Microsoft.UI.Xaml.Media.TileBrush
{
    private var _self : Microsoft.UI.Xaml.Media.IImageBrush;
    public init(plok: Microsoft.UI.Xaml.Media.IImageBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IImageBrush { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.ImageBrush")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IImageBrushStatics {
        static var x : IImageBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.ImageBrush")
    }
    public static var ImageBrushStatics : IImageBrushStatics {
        _IImageBrushStatics.x
    }
    public static func get_ImageSourceProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ImageBrushStatics.get_ImageSourceProperty());
    }
    public static var ImageSourceProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: ImageBrushStatics.ImageSourceProperty);
        }
    }
    public func get_ImageSource() throws -> Optional<Microsoft.UI.Xaml.Media.ImageSource> {
        let _ifc : Microsoft.UI.Xaml.Media.IImageBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.ImageSource(plok: _ifc.get_ImageSource());
    }
    public func put_ImageSource(value : Optional<Microsoft.UI.Xaml.Media.ImageSource>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IImageBrush = try _self.QueryInterface();
        return try _ifc.put_ImageSource(value: value!.Interface());
    }
    public func add_ImageFailed(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.ExceptionRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Media.IImageBrush = try _self.QueryInterface();
        return try _ifc.add_ImageFailed(handler: Microsoft.UI.Xaml.ExceptionRoutedEventHandler(cb: handler).Interface());
    }
    public func remove_ImageFailed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IImageBrush = try _self.QueryInterface();
        return try _ifc.remove_ImageFailed(token: token);
    }
    public func add_ImageOpened(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Media.IImageBrush = try _self.QueryInterface();
        return try _ifc.add_ImageOpened(handler: Microsoft.UI.Xaml.RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_ImageOpened(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.IImageBrush = try _self.QueryInterface();
        return try _ifc.remove_ImageOpened(token: token);
    }
    public var ImageSource : Optional<Microsoft.UI.Xaml.Media.ImageSource> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.IImageBrush = try _self.QueryInterface();
        return try Microsoft.UI.Xaml.Media.ImageSource(plok: _ifc.ImageSource);
        }
    }
}

// type: Microsoft.UI.Xaml.Media.ImageSource
// runtime class
open class ImageSource
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IImageSource;
    public init(plok: Microsoft.UI.Xaml.Media.IImageSource?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IImageSource { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IImageSourceFactory
// composable interface not needed: Microsoft.UI.Xaml.Media.IImageSourceFactory
}

// type: Microsoft.UI.Xaml.Media.LinearGradientBrush
// runtime class
public class LinearGradientBrush
    :
    Microsoft.UI.Xaml.Media.GradientBrush
{
    private var _self : Microsoft.UI.Xaml.Media.ILinearGradientBrush;
    public init(plok: Microsoft.UI.Xaml.Media.ILinearGradientBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ILinearGradientBrush { return _self; }
    public init(gradientStopCollection : Optional<Microsoft.UI.Xaml.Media.GradientStopCollection>, angle : Swift.Double) throws {
        let _af : ILinearGradientBrushFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.LinearGradientBrush");
        _self = try _af.CreateInstanceWithGradientStopCollectionAndAngle(gradientStopCollection: gradientStopCollection!.Interface(), angle: angle)!;
        try super.init(plok: _self.QueryInterface())
    }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.LinearGradientBrush")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ILinearGradientBrushStatics {
        static var x : ILinearGradientBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.LinearGradientBrush")
    }
    public static var LinearGradientBrushStatics : ILinearGradientBrushStatics {
        _ILinearGradientBrushStatics.x
    }
    public static func get_StartPointProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: LinearGradientBrushStatics.get_StartPointProperty());
    }
    public static func get_EndPointProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: LinearGradientBrushStatics.get_EndPointProperty());
    }
    public static var EndPointProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: LinearGradientBrushStatics.EndPointProperty);
        }
    }
    public static var StartPointProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: LinearGradientBrushStatics.StartPointProperty);
        }
    }
    public func get_StartPoint() throws -> Windows.Foundation.Point {
        let _ifc : Microsoft.UI.Xaml.Media.ILinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_StartPoint();
    }
    public func put_StartPoint(value : Windows.Foundation.Point) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.ILinearGradientBrush = try _self.QueryInterface();
        return try _ifc.put_StartPoint(value: value);
    }
    public func get_EndPoint() throws -> Windows.Foundation.Point {
        let _ifc : Microsoft.UI.Xaml.Media.ILinearGradientBrush = try _self.QueryInterface();
        return try _ifc.get_EndPoint();
    }
    public func put_EndPoint(value : Windows.Foundation.Point) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.ILinearGradientBrush = try _self.QueryInterface();
        return try _ifc.put_EndPoint(value: value);
    }
    public var EndPoint : Windows.Foundation.Point {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.ILinearGradientBrush = try _self.QueryInterface();
        return try _ifc.EndPoint;
        }
    }
    public var StartPoint : Windows.Foundation.Point {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.ILinearGradientBrush = try _self.QueryInterface();
        return try _ifc.StartPoint;
        }
    }
}

// type: Microsoft.UI.Xaml.Media.Projection
// runtime class
open class Projection
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IProjection;
    public init(plok: Microsoft.UI.Xaml.Media.IProjection?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IProjection { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IProjectionFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IProjectionFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Projection");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.Media.RectangleGeometry
// runtime class
public class RectangleGeometry
    :
    Microsoft.UI.Xaml.Media.Geometry
{
    private var _self : Microsoft.UI.Xaml.Media.IRectangleGeometry;
    public init(plok: Microsoft.UI.Xaml.Media.IRectangleGeometry?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IRectangleGeometry { return _self; }
    public init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.RectangleGeometry")
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IRectangleGeometryStatics
    // method not needed: get_Rect
    // method not needed: put_Rect
}

// type: Microsoft.UI.Xaml.Media.Shadow
// runtime class
open class Shadow
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IShadow;
    public init(plok: Microsoft.UI.Xaml.Media.IShadow?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IShadow { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IShadowFactory
// composable interface not needed: Microsoft.UI.Xaml.Media.IShadowFactory
}

// type: Microsoft.UI.Xaml.Media.SolidColorBrush
// runtime class
public class SolidColorBrush
    :
    Microsoft.UI.Xaml.Media.Brush
{
    private var _self : Microsoft.UI.Xaml.Media.ISolidColorBrush;
    public init(plok: Microsoft.UI.Xaml.Media.ISolidColorBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ISolidColorBrush { return _self; }
    public init(color : Windows.UI.Color) throws {
        let _af : ISolidColorBrushFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.SolidColorBrush");
        _self = try _af.CreateInstanceWithColor(color: color)!;
        try super.init(plok: _self.QueryInterface())
    }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.SolidColorBrush")
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ISolidColorBrushStatics {
        static var x : ISolidColorBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.SolidColorBrush")
    }
    public static var SolidColorBrushStatics : ISolidColorBrushStatics {
        _ISolidColorBrushStatics.x
    }
    public static func get_ColorProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SolidColorBrushStatics.get_ColorProperty());
    }
    public static var ColorProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: SolidColorBrushStatics.ColorProperty);
        }
    }
    public func get_Color() throws -> Windows.UI.Color {
        let _ifc : Microsoft.UI.Xaml.Media.ISolidColorBrush = try _self.QueryInterface();
        return try _ifc.get_Color();
    }
    public func put_Color(value : Windows.UI.Color) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.ISolidColorBrush = try _self.QueryInterface();
        return try _ifc.put_Color(value: value);
    }
    public var Color : Windows.UI.Color {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.ISolidColorBrush = try _self.QueryInterface();
        return try _ifc.Color;
        }
    }
}

// type: Microsoft.UI.Xaml.Media.Stretch
// enum type
public typealias Stretch = _q_CMicrosoft_CUI_CXaml_CMedia_CStretch;

// type: Microsoft.UI.Xaml.Media.TileBrush
// runtime class
open class TileBrush
    :
    Microsoft.UI.Xaml.Media.Brush
{
    private var _self : Microsoft.UI.Xaml.Media.ITileBrush;
    public init(plok: Microsoft.UI.Xaml.Media.ITileBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ITileBrush { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.ITileBrushFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ITileBrushFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.TileBrush");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _ITileBrushStatics {
        static var x : ITileBrushStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.TileBrush")
    }
    public static var TileBrushStatics : ITileBrushStatics {
        _ITileBrushStatics.x
    }
    public static func get_AlignmentXProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TileBrushStatics.get_AlignmentXProperty());
    }
    public static func get_AlignmentYProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TileBrushStatics.get_AlignmentYProperty());
    }
    public static func get_StretchProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TileBrushStatics.get_StretchProperty());
    }
    public static var AlignmentXProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TileBrushStatics.AlignmentXProperty);
        }
    }
    public static var AlignmentYProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TileBrushStatics.AlignmentYProperty);
        }
    }
    public static var StretchProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: TileBrushStatics.StretchProperty);
        }
    }
    public func get_AlignmentX() throws -> Microsoft.UI.Xaml.Media.AlignmentX {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.get_AlignmentX();
    }
    public func put_AlignmentX(value : Microsoft.UI.Xaml.Media.AlignmentX) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.put_AlignmentX(value: value);
    }
    public func get_AlignmentY() throws -> Microsoft.UI.Xaml.Media.AlignmentY {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.get_AlignmentY();
    }
    public func put_AlignmentY(value : Microsoft.UI.Xaml.Media.AlignmentY) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.put_AlignmentY(value: value);
    }
    public func get_Stretch() throws -> Microsoft.UI.Xaml.Media.Stretch {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.get_Stretch();
    }
    public func put_Stretch(value : Microsoft.UI.Xaml.Media.Stretch) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.put_Stretch(value: value);
    }
    public var AlignmentX : Microsoft.UI.Xaml.Media.AlignmentX {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.AlignmentX;
        }
    }
    public var AlignmentY : Microsoft.UI.Xaml.Media.AlignmentY {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.AlignmentY;
        }
    }
    public var Stretch : Microsoft.UI.Xaml.Media.Stretch {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.ITileBrush = try _self.QueryInterface();
        return try _ifc.Stretch;
        }
    }
}

// type: Microsoft.UI.Xaml.Media.Transform
// runtime class
open class Transform
    :
    Microsoft.UI.Xaml.Media.GeneralTransform
{
    private var _self : Microsoft.UI.Xaml.Media.ITransform;
    public init(plok: Microsoft.UI.Xaml.Media.ITransform?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.ITransform { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.ITransformFactory
// composable interface not needed: Microsoft.UI.Xaml.Media.ITransformFactory
}

// type: Microsoft.UI.Xaml.Media.XamlLight
// runtime class
open class XamlLight
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : Microsoft.UI.Xaml.Media.IXamlLight;
    public init(plok: Microsoft.UI.Xaml.Media.IXamlLight?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.IXamlLight { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IXamlLightFactory
    public override init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IXamlLightFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.XamlLight");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IXamlLightStatics
    // instance interface not needed: Microsoft.UI.Xaml.Media.IXamlLightProtected
    // instance interface not needed: Microsoft.UI.Xaml.Media.IXamlLightOverrides
}

}
extension Microsoft.UI.Xaml.Media.AlignmentX {
    public static var Left : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX_Left;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX_Center;
        }
    }
    public static var Right : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentX_Right;
        }
    }
}
extension Microsoft.UI.Xaml.Media.AlignmentY {
    public static var Top : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY_Top;
        }
    }
    public static var Center : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY_Center;
        }
    }
    public static var Bottom : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CAlignmentY_Bottom;
        }
    }
}
extension Microsoft.UI.Xaml.Media.BrushMappingMode {
    public static var Absolute : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_Absolute;
        }
    }
    public static var RelativeToBoundingBox : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CBrushMappingMode_RelativeToBoundingBox;
        }
    }
}
extension Microsoft.UI.Xaml.Media.ColorInterpolationMode {
    public static var ScRgbLinearInterpolation : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_ScRgbLinearInterpolation;
        }
    }
    public static var SRgbLinearInterpolation : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CColorInterpolationMode_SRgbLinearInterpolation;
        }
    }
}
extension Microsoft.UI.Xaml.Media.ElementCompositeMode {
    public static var Inherit : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_Inherit;
        }
    }
    public static var SourceOver : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_SourceOver;
        }
    }
    public static var MinBlend : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CElementCompositeMode_MinBlend;
        }
    }
}
extension Microsoft.UI.Xaml.Media.GradientSpreadMethod {
    public static var Pad : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Pad;
        }
    }
    public static var Reflect : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Reflect;
        }
    }
    public static var Repeat : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CGradientSpreadMethod_Repeat;
        }
    }
}
extension Microsoft.UI.Xaml.Media.Stretch {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_None;
        }
    }
    public static var Fill : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_Fill;
        }
    }
    public static var Uniform : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_Uniform;
        }
    }
    public static var UniformToFill : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CStretch_UniformToFill;
        }
    }
}
