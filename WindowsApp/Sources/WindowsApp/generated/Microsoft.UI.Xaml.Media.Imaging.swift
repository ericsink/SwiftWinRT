// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;
@_spi(IUnknown) import WinRT;
import CWindowsApp;
import WindowsSdk;
import CWindowsSdk;

extension Microsoft.UI.Xaml.Media.Imaging {
// type: Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions
// enum type
public typealias BitmapCreateOptions = _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions;

// type: Microsoft.UI.Xaml.Media.Imaging.BitmapImage
// runtime class
public class BitmapImage
    :
    Microsoft.UI.Xaml.Media.Imaging.BitmapSource
{
    private var _self : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage;
    public init(plok: Microsoft.UI.Xaml.Media.Imaging.IBitmapImage?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.Imaging.IBitmapImage { return _self; }
    public override init() throws {
        _self = try RoActivateInstance("Microsoft.UI.Xaml.Media.Imaging.BitmapImage")
        try super.init(plok: _self.QueryInterface())
    }
    public init(uriSource : Optional<Windows.Foundation.Uri>) throws {
        let _af : IBitmapImageFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapImage");
        _self = try _af.CreateInstanceWithUriSource(uriSource: uriSource!.Interface())!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IBitmapImageStatics {
        static var x : IBitmapImageStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapImage")
    }
    public static var BitmapImageStatics : IBitmapImageStatics {
        _IBitmapImageStatics.x
    }
    public static func get_CreateOptionsProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_CreateOptionsProperty());
    }
    public static func get_UriSourceProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_UriSourceProperty());
    }
    public static func get_DecodePixelWidthProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_DecodePixelWidthProperty());
    }
    public static func get_DecodePixelHeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_DecodePixelHeightProperty());
    }
    public static func get_DecodePixelTypeProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_DecodePixelTypeProperty());
    }
    public static func get_IsAnimatedBitmapProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_IsAnimatedBitmapProperty());
    }
    public static func get_IsPlayingProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_IsPlayingProperty());
    }
    public static func get_AutoPlayProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.get_AutoPlayProperty());
    }
    public static var AutoPlayProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.AutoPlayProperty);
        }
    }
    public static var CreateOptionsProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.CreateOptionsProperty);
        }
    }
    public static var DecodePixelHeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.DecodePixelHeightProperty);
        }
    }
    public static var DecodePixelTypeProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.DecodePixelTypeProperty);
        }
    }
    public static var DecodePixelWidthProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.DecodePixelWidthProperty);
        }
    }
    public static var IsAnimatedBitmapProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.IsAnimatedBitmapProperty);
        }
    }
    public static var IsPlayingProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.IsPlayingProperty);
        }
    }
    public static var UriSourceProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapImageStatics.UriSourceProperty);
        }
    }
    public func get_CreateOptions() throws -> Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.get_CreateOptions();
    }
    public func put_CreateOptions(value : Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.put_CreateOptions(value: value);
    }
    public func get_UriSource() throws -> Optional<Windows.Foundation.Uri> {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.get_UriSource());
    }
    public func put_UriSource(value : Optional<Windows.Foundation.Uri>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.put_UriSource(value: value!.Interface());
    }
    public func get_DecodePixelWidth() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.get_DecodePixelWidth();
    }
    public func put_DecodePixelWidth(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.put_DecodePixelWidth(value: value);
    }
    public func get_DecodePixelHeight() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.get_DecodePixelHeight();
    }
    public func put_DecodePixelHeight(value : Swift.Int32) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.put_DecodePixelHeight(value: value);
    }
    public func get_DecodePixelType() throws -> Microsoft.UI.Xaml.Media.Imaging.DecodePixelType {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.get_DecodePixelType();
    }
    public func put_DecodePixelType(value : Microsoft.UI.Xaml.Media.Imaging.DecodePixelType) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.put_DecodePixelType(value: value);
    }
    public func get_IsAnimatedBitmap() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.get_IsAnimatedBitmap();
    }
    public func get_IsPlaying() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.get_IsPlaying();
    }
    public func get_AutoPlay() throws -> boolean {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.get_AutoPlay();
    }
    public func put_AutoPlay(value : boolean) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.put_AutoPlay(value: value);
    }
    public func add_DownloadProgress(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.add_DownloadProgress(handler: Microsoft.UI.Xaml.Media.Imaging.impl_DownloadProgressEventHandler(cb: handler).Interface());
    }
    public func remove_DownloadProgress(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.remove_DownloadProgress(token: token);
    }
    public func add_ImageOpened(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.RoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.add_ImageOpened(handler: Microsoft.UI.Xaml.impl_RoutedEventHandler(cb: handler).Interface());
    }
    public func remove_ImageOpened(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.remove_ImageOpened(token: token);
    }
    public func add_ImageFailed(handler : @escaping (Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.ExceptionRoutedEventArgs>) throws -> Void) throws -> Windows.Foundation.EventRegistrationToken {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.add_ImageFailed(handler: Microsoft.UI.Xaml.impl_ExceptionRoutedEventHandler(cb: handler).Interface());
    }
    public func remove_ImageFailed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.remove_ImageFailed(token: token);
    }
    public func Play() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.Play();
    }
    public func Stop() throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.Stop();
    }
    public var AutoPlay : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.AutoPlay;
        }
    }
    public var CreateOptions : Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.CreateOptions;
        }
    }
    public var DecodePixelHeight : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.DecodePixelHeight;
        }
    }
    public var DecodePixelType : Microsoft.UI.Xaml.Media.Imaging.DecodePixelType {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.DecodePixelType;
        }
    }
    public var DecodePixelWidth : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.DecodePixelWidth;
        }
    }
    public var IsAnimatedBitmap : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.IsAnimatedBitmap;
        }
    }
    public var IsPlaying : boolean {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try _ifc.IsPlaying;
        }
    }
    public var UriSource : Optional<Windows.Foundation.Uri> {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapImage = try _self.QueryInterface();
        return try Windows.Foundation.Uri(plok: _ifc.UriSource);
        }
    }
}

// type: Microsoft.UI.Xaml.Media.Imaging.BitmapSource
// runtime class
open class BitmapSource
    :
    Microsoft.UI.Xaml.Media.ImageSource
{
    private var _self : Microsoft.UI.Xaml.Media.Imaging.IBitmapSource;
    public init(plok: Microsoft.UI.Xaml.Media.Imaging.IBitmapSource?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.Imaging.IBitmapSource { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory
    public init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : IBitmapSourceFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapSource");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    private struct _IBitmapSourceStatics {
        static var x : IBitmapSourceStatics =
            try! RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.BitmapSource")
    }
    public static var BitmapSourceStatics : IBitmapSourceStatics {
        _IBitmapSourceStatics.x
    }
    public static func get_PixelWidthProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapSourceStatics.get_PixelWidthProperty());
    }
    public static func get_PixelHeightProperty() throws -> Optional<Microsoft.UI.Xaml.DependencyProperty> {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapSourceStatics.get_PixelHeightProperty());
    }
    public static var PixelHeightProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapSourceStatics.PixelHeightProperty);
        }
    }
    public static var PixelWidthProperty : Optional<Microsoft.UI.Xaml.DependencyProperty> {
        get throws {
        return try Microsoft.UI.Xaml.DependencyProperty(plok: BitmapSourceStatics.PixelWidthProperty);
        }
    }
    public func get_PixelWidth() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapSource = try _self.QueryInterface();
        return try _ifc.get_PixelWidth();
    }
    public func get_PixelHeight() throws -> Swift.Int32 {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapSource = try _self.QueryInterface();
        return try _ifc.get_PixelHeight();
    }
    public func SetSource(streamSource : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Void {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapSource = try _self.QueryInterface();
        return try _ifc.SetSource(streamSource: streamSource);
    }
    public func SetSourceAsync(streamSource : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapSource = try _self.QueryInterface();
        return try _ifc.SetSourceAsync(streamSource: streamSource);
    }
    public func SetSource(streamSource : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetSourceAsync(streamSource: streamSource)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var PixelHeight : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapSource = try _self.QueryInterface();
        return try _ifc.PixelHeight;
        }
    }
    public var PixelWidth : Swift.Int32 {
        get throws {
        let _ifc : Microsoft.UI.Xaml.Media.Imaging.IBitmapSource = try _self.QueryInterface();
        return try _ifc.PixelWidth;
        }
    }
}

// type: Microsoft.UI.Xaml.Media.Imaging.DecodePixelType
// enum type
public typealias DecodePixelType = _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType;

// type: Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs
// runtime class
public class DownloadProgressEventArgs
    :
    WinRT.Object
{
    private var _self : Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs;
    public init(plok: Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs { return _self; }
    // method not needed: get_Progress
    // method not needed: put_Progress
}

// type: Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler
// delegate type
open class IDownloadProgressEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9a8e4af5, Data2: 0xb124, Data3 : 0x5205, Data4 : (0x8a, 0xe9, 0x34, 0x96, 0xe0, 0x63, 0xc5, 0x69)) }
    // [IsSpecialName] void Invoke(System.Object, Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs)
    private func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class impl_DownloadProgressEventHandler
{
    private static var vtable: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_DownloadProgressEventHandler.WithTrailingObjects.self, capacity: 1)
        _ = pinstance.pointee.container.retain()
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeUnretainedValue()))
        return __res;
    },
    Release: {
        let pinstance = UnsafeMutableRawPointer($0!).bindMemory(to: impl_DownloadProgressEventHandler.WithTrailingObjects.self, capacity: 1)
        let __res = ULONG(_getRetainCount(pinstance.pointee.container.takeRetainedValue()))
        return __res;
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventArgs>>) in
        guard let self = impl_DownloadProgressEventHandler.from_impl_DownloadProgressEventHandler(pThis) else {
            return E_INVALIDARG
        }
        do {
            let _ret : Void = try self.Invoke(sender: WinRT.Object(plok: WinRT.IInspectable(sender)), e: Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs(plok: Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private class Container {
        public var self_ref: impl_DownloadProgressEventHandler? = nil
    }
    private struct WithTrailingObjects {
        public var interface_struct: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler
        public var container: Unmanaged<Container>
    }
    private var instance: WithTrailingObjects

    private var _cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>) throws -> Void>
    public init(cb : Optional<(Optional<WinRT.Object>, Optional<Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>) throws -> Void> = nil) {
        _cb = cb
        self.instance = WithTrailingObjects(interface_struct: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler(lpVtbl: &Self.vtable), container: Unmanaged<Container>.passRetained(Container()))
        self.instance.container.takeUnretainedValue().self_ref = self
    }
    private static func from_impl_DownloadProgressEventHandler(_ pUnk: UnsafeMutableRawPointer?) -> impl_DownloadProgressEventHandler? {
        return pUnk?.bindMemory(to: impl_DownloadProgressEventHandler.WithTrailingObjects.self, capacity: 1).pointee.container.takeUnretainedValue().self_ref
    }

    open func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>) throws -> Void {
        if let cb = _cb {
            return try cb(sender, e)
        }
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.interface_struct) {
            Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}
// wrap delegate type
open class wrap_DownloadProgressEventHandler
{
    private var _self : Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler;
    public init(plok: Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler?) throws {
        _self = plok!
    }
    public func Invoke(sender : Optional<WinRT.Object>, e : Optional<Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventArgs>) throws -> Void {
        return try _self.Invoke(sender: sender!.GetInterface(), e: e!.Interface());
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler {
        return _self
    }
}

// type: Microsoft.UI.Xaml.Media.Imaging.IBitmapImage
// interface type
open class IBitmapImage
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5cc29916, Data2: 0xa411, Data3 : 0x5bc2, Data4 : (0xa3, 0xc5, 0xa0, 0x0d, 0x99, 0xa5, 0x9d, 0xa8)) }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions get_CreateOptions()
    private func _n_get_CreateOptions(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CreateOptions(pThis, __presult))
        }
    }
    public func get_CreateOptions() throws -> Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions = _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions_None;
        try self._n_get_CreateOptions(&__result);
        return __result;
    }
    // [IsSpecialName] void put_CreateOptions(Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions)
    private func _n_put_CreateOptions(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_CreateOptions(pThis, value))
        }
    }
    public func put_CreateOptions(value : Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions) throws -> Void {
        try self._n_put_CreateOptions(value);
    }
    // [IsSpecialName] Windows.Foundation.Uri get_UriSource()
    private func _n_get_UriSource(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSource(pThis, __presult))
        }
    }
    public func get_UriSource() throws -> Optional<Windows.Foundation.IUriRuntimeClass> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>> = nil;
        try self._n_get_UriSource(&__result);
        return Windows.Foundation.IUriRuntimeClass(consuming: __result);
    }
    // [IsSpecialName] void put_UriSource(Windows.Foundation.Uri)
    private func _n_put_UriSource(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_UriSource(pThis, value))
        }
    }
    public func put_UriSource(value : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_put_UriSource(RawPointer(value));
    }
    // [IsSpecialName] System.Int32 get_DecodePixelWidth()
    private func _n_get_DecodePixelWidth(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelWidth(pThis, __presult))
        }
    }
    public func get_DecodePixelWidth() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_DecodePixelWidth(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DecodePixelWidth(System.Int32)
    private func _n_put_DecodePixelWidth(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecodePixelWidth(pThis, value))
        }
    }
    public func put_DecodePixelWidth(value : Swift.Int32) throws -> Void {
        try self._n_put_DecodePixelWidth(value);
    }
    // [IsSpecialName] System.Int32 get_DecodePixelHeight()
    private func _n_get_DecodePixelHeight(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelHeight(pThis, __presult))
        }
    }
    public func get_DecodePixelHeight() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_DecodePixelHeight(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DecodePixelHeight(System.Int32)
    private func _n_put_DecodePixelHeight(_ value : INT32) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecodePixelHeight(pThis, value))
        }
    }
    public func put_DecodePixelHeight(value : Swift.Int32) throws -> Void {
        try self._n_put_DecodePixelHeight(value);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.Media.Imaging.DecodePixelType get_DecodePixelType()
    private func _n_get_DecodePixelType(_ __presult: UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelType(pThis, __presult))
        }
    }
    public func get_DecodePixelType() throws -> Microsoft.UI.Xaml.Media.Imaging.DecodePixelType {
        var __result : _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType = _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType_Physical;
        try self._n_get_DecodePixelType(&__result);
        return __result;
    }
    // [IsSpecialName] void put_DecodePixelType(Microsoft.UI.Xaml.Media.Imaging.DecodePixelType)
    private func _n_put_DecodePixelType(_ value : _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_DecodePixelType(pThis, value))
        }
    }
    public func put_DecodePixelType(value : Microsoft.UI.Xaml.Media.Imaging.DecodePixelType) throws -> Void {
        try self._n_put_DecodePixelType(value);
    }
    // [IsSpecialName] bool get_IsAnimatedBitmap()
    private func _n_get_IsAnimatedBitmap(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAnimatedBitmap(pThis, __presult))
        }
    }
    public func get_IsAnimatedBitmap() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsAnimatedBitmap(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_IsPlaying()
    private func _n_get_IsPlaying(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlaying(pThis, __presult))
        }
    }
    public func get_IsPlaying() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_IsPlaying(&__result);
        return __result;
    }
    // [IsSpecialName] bool get_AutoPlay()
    private func _n_get_AutoPlay(_ __presult: UnsafeMutablePointer<boolean>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoPlay(pThis, __presult))
        }
    }
    public func get_AutoPlay() throws -> boolean {
        var __result : boolean = 0;
        try self._n_get_AutoPlay(&__result);
        return __result;
    }
    // [IsSpecialName] void put_AutoPlay(bool)
    private func _n_put_AutoPlay(_ value : boolean) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_AutoPlay(pThis, value))
        }
    }
    public func put_AutoPlay(value : boolean) throws -> Void {
        try self._n_put_AutoPlay(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_DownloadProgress(Microsoft.UI.Xaml.Media.Imaging.DownloadProgressEventHandler)
    private func _n_add_DownloadProgress(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIDownloadProgressEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_DownloadProgress(pThis, handler, __presult))
        }
    }
    public func add_DownloadProgress(handler : Optional<Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_DownloadProgress(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_DownloadProgress(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_DownloadProgress(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_DownloadProgress(pThis, token))
        }
    }
    public func remove_DownloadProgress(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_DownloadProgress(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ImageOpened(Microsoft.UI.Xaml.RoutedEventHandler)
    private func _n_add_ImageOpened(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageOpened(pThis, handler, __presult))
        }
    }
    public func add_ImageOpened(handler : Optional<Microsoft.UI.Xaml.IRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ImageOpened(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ImageOpened(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ImageOpened(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageOpened(pThis, token))
        }
    }
    public func remove_ImageOpened(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ImageOpened(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_ImageFailed(Microsoft.UI.Xaml.ExceptionRoutedEventHandler)
    private func _n_add_ImageFailed(_ handler : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIExceptionRoutedEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_ImageFailed(pThis, handler, __presult))
        }
    }
    public func add_ImageFailed(handler : Optional<Microsoft.UI.Xaml.IExceptionRoutedEventHandler>) throws -> Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_ImageFailed(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_ImageFailed(Windows.Foundation.EventRegistrationToken)
    private func _n_remove_ImageFailed(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_ImageFailed(pThis, token))
        }
    }
    public func remove_ImageFailed(token : Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_ImageFailed(token);
    }
    // void Play()
    private func _n_Play() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Play(pThis))
        }
    }
    public func Play() throws -> Void {
        try self._n_Play();
    }
    // void Stop()
    private func _n_Stop() throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Stop(pThis))
        }
    }
    public func Stop() throws -> Void {
        try self._n_Stop();
    }
    public var AutoPlay : boolean {
        get throws {
            return try get_AutoPlay();
        }
    }
    public var CreateOptions : Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions {
        get throws {
            return try get_CreateOptions();
        }
    }
    public var DecodePixelHeight : Swift.Int32 {
        get throws {
            return try get_DecodePixelHeight();
        }
    }
    public var DecodePixelType : Microsoft.UI.Xaml.Media.Imaging.DecodePixelType {
        get throws {
            return try get_DecodePixelType();
        }
    }
    public var DecodePixelWidth : Swift.Int32 {
        get throws {
            return try get_DecodePixelWidth();
        }
    }
    public var IsAnimatedBitmap : boolean {
        get throws {
            return try get_IsAnimatedBitmap();
        }
    }
    public var IsPlaying : boolean {
        get throws {
            return try get_IsPlaying();
        }
    }
    public var UriSource : Optional<Windows.Foundation.IUriRuntimeClass> {
        get throws {
            return try get_UriSource();
        }
    }
} // IBitmapImage


// type: Microsoft.UI.Xaml.Media.Imaging.IBitmapImageFactory
// interface type
// ACTIVATION INTERFACE
open class IBitmapImageFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xf037e0e9, Data2: 0xf229, Data3 : 0x522e, Data4 : (0x95, 0xc9, 0xda, 0x22, 0x11, 0xa1, 0x4b, 0x05)) }
    // Microsoft.UI.Xaml.Media.Imaging.BitmapImage CreateInstanceWithUriSource(Windows.Foundation.Uri)
    private func _n_CreateInstanceWithUriSource(_ uriSource : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithUriSource(pThis, uriSource, __presult))
        }
    }
    public func CreateInstanceWithUriSource(uriSource : Optional<Windows.Foundation.IUriRuntimeClass>) throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.IBitmapImage> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImage>> = nil;
        try self._n_CreateInstanceWithUriSource(RawPointer(uriSource), &__result);
        return Microsoft.UI.Xaml.Media.Imaging.IBitmapImage(consuming: __result);
    }
} // IBitmapImageFactory


// type: Microsoft.UI.Xaml.Media.Imaging.IBitmapImageStatics
// interface type
open class IBitmapImageStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x4bcf71a9, Data2: 0x1897, Data3 : 0x51dc, Data4 : (0x8e, 0x3f, 0x2c, 0x5c, 0x79, 0x6d, 0x1c, 0xd9)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_CreateOptionsProperty()
    private func _n_get_CreateOptionsProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CreateOptionsProperty(pThis, __presult))
        }
    }
    public func get_CreateOptionsProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_CreateOptionsProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_UriSourceProperty()
    private func _n_get_UriSourceProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_UriSourceProperty(pThis, __presult))
        }
    }
    public func get_UriSourceProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_UriSourceProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DecodePixelWidthProperty()
    private func _n_get_DecodePixelWidthProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelWidthProperty(pThis, __presult))
        }
    }
    public func get_DecodePixelWidthProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DecodePixelWidthProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DecodePixelHeightProperty()
    private func _n_get_DecodePixelHeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelHeightProperty(pThis, __presult))
        }
    }
    public func get_DecodePixelHeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DecodePixelHeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_DecodePixelTypeProperty()
    private func _n_get_DecodePixelTypeProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecodePixelTypeProperty(pThis, __presult))
        }
    }
    public func get_DecodePixelTypeProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_DecodePixelTypeProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsAnimatedBitmapProperty()
    private func _n_get_IsAnimatedBitmapProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAnimatedBitmapProperty(pThis, __presult))
        }
    }
    public func get_IsAnimatedBitmapProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsAnimatedBitmapProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_IsPlayingProperty()
    private func _n_get_IsPlayingProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsPlayingProperty(pThis, __presult))
        }
    }
    public func get_IsPlayingProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_IsPlayingProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_AutoPlayProperty()
    private func _n_get_AutoPlayProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapImageStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_AutoPlayProperty(pThis, __presult))
        }
    }
    public func get_AutoPlayProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_AutoPlayProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var AutoPlayProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_AutoPlayProperty();
        }
    }
    public var CreateOptionsProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_CreateOptionsProperty();
        }
    }
    public var DecodePixelHeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DecodePixelHeightProperty();
        }
    }
    public var DecodePixelTypeProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DecodePixelTypeProperty();
        }
    }
    public var DecodePixelWidthProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_DecodePixelWidthProperty();
        }
    }
    public var IsAnimatedBitmapProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsAnimatedBitmapProperty();
        }
    }
    public var IsPlayingProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_IsPlayingProperty();
        }
    }
    public var UriSourceProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_UriSourceProperty();
        }
    }
} // IBitmapImageStatics


// type: Microsoft.UI.Xaml.Media.Imaging.IBitmapSource
// interface type
open class IBitmapSource
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x8424269d, Data2: 0x9b82, Data3 : 0x534f, Data4 : (0x8f, 0xea, 0xaf, 0x5b, 0x5e, 0xf9, 0x6b, 0xf2)) }
    // [IsSpecialName] System.Int32 get_PixelWidth()
    private func _n_get_PixelWidth(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidth(pThis, __presult))
        }
    }
    public func get_PixelWidth() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_PixelWidth(&__result);
        return __result;
    }
    // [IsSpecialName] System.Int32 get_PixelHeight()
    private func _n_get_PixelHeight(_ __presult: UnsafeMutablePointer<INT32>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeight(pThis, __presult))
        }
    }
    public func get_PixelHeight() throws -> Swift.Int32 {
        var __result : INT32 = 0;
        try self._n_get_PixelHeight(&__result);
        return __result;
    }
    // void SetSource(Windows.Storage.Streams.IRandomAccessStream)
    private func _n_SetSource(_ streamSource : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetSource(pThis, streamSource))
        }
    }
    public func SetSource(streamSource : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Void {
        try self._n_SetSource(RawPointer(streamSource));
    }
    // Windows.Foundation.IAsyncAction SetSourceAsync(Windows.Storage.Streams.IRandomAccessStream)
    private func _n_SetSourceAsync(_ streamSource : Optional<UnsafeMutablePointer<_q_CWindows_CStorage_CStreams_CIRandomAccessStream>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetSourceAsync(pThis, streamSource, __presult))
        }
    }
    public func SetSourceAsync(streamSource : Optional<Windows.Storage.Streams.IRandomAccessStream>) throws -> Optional<Windows.Foundation.IAsyncAction> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIAsyncAction>> = nil;
        try self._n_SetSourceAsync(RawPointer(streamSource), &__result);
        return Windows.Foundation.IAsyncAction(consuming: __result);
    }
    public func SetSource(streamSource : Optional<Windows.Storage.Streams.IRandomAccessStream>) async throws -> Void {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.SetSourceAsync(streamSource: streamSource)!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
    public var PixelHeight : Swift.Int32 {
        get throws {
            return try get_PixelHeight();
        }
    }
    public var PixelWidth : Swift.Int32 {
        get throws {
            return try get_PixelWidth();
        }
    }
} // IBitmapSource


// type: Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceFactory
// interface type
// COMPOSITION INTERFACE
open class IBitmapSourceFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x0392f025, Data2: 0x1868, Data3 : 0x5876, Data4 : (0xad, 0x67, 0x12, 0xe9, 0x4a, 0x8d, 0xa5, 0xbf)) }
    // Microsoft.UI.Xaml.Media.Imaging.BitmapSource CreateInstance(System.Object, ref System.Object)
    private func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.IBitmapSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSource>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.Imaging.IBitmapSource(consuming: __result);
    }
} // IBitmapSourceFactory


// type: Microsoft.UI.Xaml.Media.Imaging.IBitmapSourceStatics
// interface type
open class IBitmapSourceStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xefa3745e, Data2: 0x4400, Data3 : 0x5f0b, Data4 : (0xbd, 0xc7, 0x3f, 0x29, 0x11, 0xa3, 0xd7, 0x19)) }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PixelWidthProperty()
    private func _n_get_PixelWidthProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidthProperty(pThis, __presult))
        }
    }
    public func get_PixelWidthProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PixelWidthProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    // [IsSpecialName] Microsoft.UI.Xaml.DependencyProperty get_PixelHeightProperty()
    private func _n_get_PixelHeightProperty(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIBitmapSourceStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeightProperty(pThis, __presult))
        }
    }
    public func get_PixelHeightProperty() throws -> Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CIDependencyProperty>> = nil;
        try self._n_get_PixelHeightProperty(&__result);
        return Microsoft.UI.Xaml.IDependencyProperty(consuming: __result);
    }
    public var PixelHeightProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PixelHeightProperty();
        }
    }
    public var PixelWidthProperty : Optional<Microsoft.UI.Xaml.IDependencyProperty> {
        get throws {
            return try get_PixelWidthProperty();
        }
    }
} // IBitmapSourceStatics


// type: Microsoft.UI.Xaml.Media.Imaging.IDownloadProgressEventArgs
// interface type
open class IDownloadProgressEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9a0ea80b, Data2: 0x1a17, Data3 : 0x50d5, Data4 : (0x83, 0xf3, 0x37, 0x77, 0x38, 0x21, 0x26, 0x19)) }
// method not needed: get_Progress
// method not needed: put_Progress
} // IDownloadProgressEventArgs


// type: Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource
// interface type
open class ISurfaceImageSource
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xac078d9c, Data2: 0xd0e0, Data3 : 0x5ff9, Data4 : (0xb7, 0x3e, 0x98, 0xe8, 0x2e, 0x4c, 0x8d, 0x36)) }
} // ISurfaceImageSource


// type: Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactory
// interface type
// COMPOSITION INTERFACE
open class ISurfaceImageSourceFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x09a26ed2, Data2: 0x11b3, Data3 : 0x5ef1, Data4 : (0xac, 0x56, 0x20, 0xd0, 0x64, 0xcc, 0xca, 0x34)) }
    // Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource CreateInstanceWithDimensions(System.Int32, System.Int32, System.Object, ref System.Object)
    private func _n_CreateInstanceWithDimensions(_ pixelWidth : INT32, _ pixelHeight : INT32, _ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensions(pThis, pixelWidth, pixelHeight, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstanceWithDimensions(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32, baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSource>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstanceWithDimensions(pixelWidth, pixelHeight, RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource(consuming: __result);
    }
    // Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource CreateInstanceWithDimensionsAndOpacity(System.Int32, System.Int32, bool, System.Object, ref System.Object)
    private func _n_CreateInstanceWithDimensionsAndOpacity(_ pixelWidth : INT32, _ pixelHeight : INT32, _ isOpaque : boolean, _ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensionsAndOpacity(pThis, pixelWidth, pixelHeight, isOpaque, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstanceWithDimensionsAndOpacity(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32, isOpaque : boolean, baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CISurfaceImageSource>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstanceWithDimensionsAndOpacity(pixelWidth, pixelHeight, isOpaque, RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource(consuming: __result);
    }
} // ISurfaceImageSourceFactory


// type: Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource
// interface type
open class IVirtualSurfaceImageSource
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xe4ff96a6, Data2: 0xfede, Data3 : 0x589c, Data4 : (0xa0, 0x07, 0x41, 0x78, 0xb5, 0x3b, 0x67, 0x39)) }
} // IVirtualSurfaceImageSource


// type: Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSourceFactory
// interface type
// ACTIVATION INTERFACE
open class IVirtualSurfaceImageSourceFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x08490f2c, Data2: 0x04a8, Data3 : 0x5031, Data4 : (0xb9, 0xc7, 0x70, 0x70, 0x60, 0xd7, 0xcd, 0x48)) }
    // Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource CreateInstanceWithDimensions(System.Int32, System.Int32)
    private func _n_CreateInstanceWithDimensions(_ pixelWidth : INT32, _ pixelHeight : INT32, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensions(pThis, pixelWidth, pixelHeight, __presult))
        }
    }
    public func CreateInstanceWithDimensions(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32) throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource>> = nil;
        try self._n_CreateInstanceWithDimensions(pixelWidth, pixelHeight, &__result);
        return Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource(consuming: __result);
    }
    // Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource CreateInstanceWithDimensionsAndOpacity(System.Int32, System.Int32, bool)
    private func _n_CreateInstanceWithDimensionsAndOpacity(_ pixelWidth : INT32, _ pixelHeight : INT32, _ isOpaque : boolean, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSourceFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithDimensionsAndOpacity(pThis, pixelWidth, pixelHeight, isOpaque, __presult))
        }
    }
    public func CreateInstanceWithDimensionsAndOpacity(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32, isOpaque : boolean) throws -> Optional<Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CIVirtualSurfaceImageSource>> = nil;
        try self._n_CreateInstanceWithDimensionsAndOpacity(pixelWidth, pixelHeight, isOpaque, &__result);
        return Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource(consuming: __result);
    }
} // IVirtualSurfaceImageSourceFactory


// type: Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource
// runtime class
open class SurfaceImageSource
    :
    Microsoft.UI.Xaml.Media.ImageSource
{
    private var _self : Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource;
    public init(plok: Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSource { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.Imaging.ISurfaceImageSourceFactory
    public init(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32) throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ISurfaceImageSourceFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstanceWithDimensions(pixelWidth: pixelWidth, pixelHeight: pixelHeight, baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32, isOpaque : boolean) throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        let _af : ISurfaceImageSourceFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource");
        let baseInterface : Optional<WinRT.IInspectable> = nil;
        _self = try _af.CreateInstanceWithDimensionsAndOpacity(pixelWidth: pixelWidth, pixelHeight: pixelHeight, isOpaque: isOpaque, baseInterface: baseInterface, innerInterface: &_inn)!;
        try super.init(plok: _self.QueryInterface())
    }
}

// type: Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource
// runtime class
public class VirtualSurfaceImageSource
    :
    Microsoft.UI.Xaml.Media.Imaging.SurfaceImageSource
{
    private var _self : Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource;
    public init(plok: Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    public func Interface() -> Microsoft.UI.Xaml.Media.Imaging.IVirtualSurfaceImageSource { return _self; }
    public override init(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32) throws {
        let _af : IVirtualSurfaceImageSourceFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource");
        _self = try _af.CreateInstanceWithDimensions(pixelWidth: pixelWidth, pixelHeight: pixelHeight)!;
        try super.init(plok: _self.QueryInterface())
    }
    public override init(pixelWidth : Swift.Int32, pixelHeight : Swift.Int32, isOpaque : boolean) throws {
        let _af : IVirtualSurfaceImageSourceFactory = try RoGetActivationFactory("Microsoft.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource");
        _self = try _af.CreateInstanceWithDimensionsAndOpacity(pixelWidth: pixelWidth, pixelHeight: pixelHeight, isOpaque: isOpaque)!;
        try super.init(plok: _self.QueryInterface())
    }
}

}
extension Microsoft.UI.Xaml.Media.Imaging.BitmapCreateOptions {
    public static var None : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions_None;
        }
    }
    public static var IgnoreImageCache : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CBitmapCreateOptions_IgnoreImageCache;
        }
    }
}
extension Microsoft.UI.Xaml.Media.Imaging.DecodePixelType {
    public static var Physical : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType_Physical;
        }
    }
    public static var Logical : Self {
        get {
            return _q_CMicrosoft_CUI_CXaml_CMedia_CImaging_CDecodePixelType_Logical;
        }
    }
}
