// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Windows.Storage.Streams {
// type: Windows.Storage.Streams.IBuffer
// interface type
open class IBuffer
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x905a0fe0, Data2: 0xbc53, Data3 : 0x11df, Data4 : (0x8c, 0x49, 0x00, 0x1e, 0x4f, 0xc6, 0x86, 0xda)) }
// method not needed: get_Capacity
// method not needed: get_Length
// method not needed: put_Length
} // IBuffer


// type: Windows.Storage.Streams.IOutputStream
// interface type
open class IOutputStream
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x905a0fe6, Data2: 0xbc53, Data3 : 0x11df, Data4 : (0x8c, 0x49, 0x00, 0x1e, 0x4f, 0xc6, 0x86, 0xda)) }
// method not needed: WriteAsync
    // Windows.Foundation.IAsyncOperation<bool> FlushAsync()
    private func _n_FlushAsync(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>>>?) throws {
        return try perform(as: _q_CWindows_CStorage_CStreams_CIOutputStream.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.FlushAsync(pThis, __presult))
        }
    }
    public func FlushAsync() throws -> Optional<WinRT.ClosedGenerics.IAsyncOperation_1_boolean> {
        var __result : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IAsyncOperation_1_boolean>> = nil;
        try self._n_FlushAsync(&__result);
        return WinRT.ClosedGenerics.IAsyncOperation_1_boolean(consuming: __result);
    }
    public func Flush() async throws -> boolean {
        return try await withUnsafeThrowingContinuation { continuation in
            do {
                return try continuation.resume(returning: self.FlushAsync()!.get())
            } catch let error {
                return continuation.resume(throwing: error)
            }
        }
    }
} // IOutputStream


// type: Windows.Storage.Streams.IRandomAccessStream
// interface type
open class IRandomAccessStream
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x905a0fe1, Data2: 0xbc53, Data3 : 0x11df, Data4 : (0x8c, 0x49, 0x00, 0x1e, 0x4f, 0xc6, 0x86, 0xda)) }
// method not needed: get_Size
// method not needed: put_Size
// method not needed: GetInputStreamAt
// method not needed: GetOutputStreamAt
// method not needed: get_Position
// method not needed: Seek
// method not needed: CloneStream
// method not needed: get_CanRead
// method not needed: get_CanWrite
} // IRandomAccessStream


}
