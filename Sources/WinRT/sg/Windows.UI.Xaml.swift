// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Windows.UI.Xaml {
// type: Windows.UI.Xaml.Application
// runtime class
open class Application
{
    private var _self : WinRT.Windows.UI.Xaml.IApplication;
    internal init(plok: WinRT.Windows.UI.Xaml.IApplication?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IApplication { return _self; }
    // COMPOSABLE: Windows.UI.Xaml.IApplicationFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IApplicationFactory = try RoGetActivationFactory(HString("Windows.UI.Xaml.Application"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    private struct _IApplicationStatics {
        static var x : IApplicationStatics =
            try! RoGetActivationFactory(HString("Windows.UI.Xaml.Application"))
    }
    public static var ApplicationStatics : IApplicationStatics {
        _IApplicationStatics.x
    }
    public static func get_Current() throws -> Optional<WinRT.Windows.UI.Xaml.Application> {
        return try WinRT.Windows.UI.Xaml.Application(plok: ApplicationStatics.get_Current());
    }
    public static func Start(callback : Optional<WinRT.Windows.UI.Xaml.ApplicationInitializationCallback>) throws -> Void {
        return try ApplicationStatics.Start(callback: callback!.Interface());
    }
    public static func LoadComponent(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.Uri>) throws -> Void {
        return try ApplicationStatics.LoadComponent(component: component, resourceLocator: resourceLocator!.Interface());
    }
    public static func LoadComponentWithResourceLocation(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.Uri>, componentResourceLocation : WinRT.Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation) throws -> Void {
        return try ApplicationStatics.LoadComponentWithResourceLocation(component: component, resourceLocator: resourceLocator!.Interface(), componentResourceLocation: componentResourceLocation);
    }
    public static var Current : Optional<WinRT.Windows.UI.Xaml.Application> {
        get throws {
        return try WinRT.Windows.UI.Xaml.Application(plok: ApplicationStatics.Current);
        }
    }
    public func get_Resources() throws -> Optional<WinRT.Windows.UI.Xaml.ResourceDictionary> {
        let _ifc : IApplication = try _self.QueryInterface();
        return try WinRT.Windows.UI.Xaml.ResourceDictionary(plok: _ifc.get_Resources());
    }
    public func put_Resources(value : Optional<WinRT.Windows.UI.Xaml.ResourceDictionary>) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.put_Resources(value: value!.Interface());
    }
    public func get_DebugSettings() throws -> Optional<WinRT.Windows.UI.Xaml.DebugSettings> {
        let _ifc : IApplication = try _self.QueryInterface();
        return try WinRT.Windows.UI.Xaml.DebugSettings(plok: _ifc.get_DebugSettings());
    }
    public func get_RequestedTheme() throws -> WinRT.Windows.UI.Xaml.ApplicationTheme {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.get_RequestedTheme();
    }
    public func put_RequestedTheme(value : WinRT.Windows.UI.Xaml.ApplicationTheme) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.put_RequestedTheme(value: value);
    }
    public func add_UnhandledException(handler : Optional<WinRT.Windows.UI.Xaml.UnhandledExceptionEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.add_UnhandledException(handler: handler!.Interface());
    }
    public func remove_UnhandledException(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.remove_UnhandledException(token: token);
    }
    public func add_Suspending(handler : Optional<WinRT.Windows.UI.Xaml.SuspendingEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.add_Suspending(handler: handler!.Interface());
    }
    public func remove_Suspending(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.remove_Suspending(token: token);
    }
    public func add_Resuming(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.add_Resuming(handler: handler);
    }
    public func remove_Resuming(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.remove_Resuming(token: token);
    }
    public func Exit() throws -> Void {
        let _ifc : IApplication = try _self.QueryInterface();
        return try _ifc.Exit();
    }
    public var DebugSettings : Optional<WinRT.Windows.UI.Xaml.DebugSettings> {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try WinRT.Windows.UI.Xaml.DebugSettings(plok: _ifc.DebugSettings);
        }
    }
    public var RequestedTheme : WinRT.Windows.UI.Xaml.ApplicationTheme {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try _ifc.RequestedTheme;
        }
    }
    public var Resources : Optional<WinRT.Windows.UI.Xaml.ResourceDictionary> {
        get throws {
        let _ifc : IApplication = try _self.QueryInterface();
            return try WinRT.Windows.UI.Xaml.ResourceDictionary(plok: _ifc.Resources);
        }
    }
    public func get_FocusVisualKind() throws -> WinRT.Windows.UI.Xaml.FocusVisualKind {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.get_FocusVisualKind();
    }
    public func put_FocusVisualKind(value : WinRT.Windows.UI.Xaml.FocusVisualKind) throws -> Void {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.put_FocusVisualKind(value: value);
    }
    public func get_RequiresPointerMode() throws -> WinRT.Windows.UI.Xaml.ApplicationRequiresPointerMode {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.get_RequiresPointerMode();
    }
    public func put_RequiresPointerMode(value : WinRT.Windows.UI.Xaml.ApplicationRequiresPointerMode) throws -> Void {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.put_RequiresPointerMode(value: value);
    }
    public func add_LeavingBackground(handler : Optional<WinRT.Windows.UI.Xaml.LeavingBackgroundEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.add_LeavingBackground(handler: handler!.Interface());
    }
    public func remove_LeavingBackground(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.remove_LeavingBackground(token: token);
    }
    public func add_EnteredBackground(handler : Optional<WinRT.Windows.UI.Xaml.EnteredBackgroundEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.add_EnteredBackground(handler: handler!.Interface());
    }
    public func remove_EnteredBackground(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        let _ifc : IApplication2 = try _self.QueryInterface();
        return try _ifc.remove_EnteredBackground(token: token);
    }
    public var FocusVisualKind : WinRT.Windows.UI.Xaml.FocusVisualKind {
        get throws {
        let _ifc : IApplication2 = try _self.QueryInterface();
            return try _ifc.FocusVisualKind;
        }
    }
    public var RequiresPointerMode : WinRT.Windows.UI.Xaml.ApplicationRequiresPointerMode {
        get throws {
        let _ifc : IApplication2 = try _self.QueryInterface();
            return try _ifc.RequiresPointerMode;
        }
    }
    public func get_HighContrastAdjustment() throws -> WinRT.Windows.UI.Xaml.ApplicationHighContrastAdjustment {
        let _ifc : IApplication3 = try _self.QueryInterface();
        return try _ifc.get_HighContrastAdjustment();
    }
    public func put_HighContrastAdjustment(value : WinRT.Windows.UI.Xaml.ApplicationHighContrastAdjustment) throws -> Void {
        let _ifc : IApplication3 = try _self.QueryInterface();
        return try _ifc.put_HighContrastAdjustment(value: value);
    }
    public var HighContrastAdjustment : WinRT.Windows.UI.Xaml.ApplicationHighContrastAdjustment {
        get throws {
        let _ifc : IApplication3 = try _self.QueryInterface();
            return try _ifc.HighContrastAdjustment;
        }
    }
    open func OnActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnLaunched(args : Optional<WinRT.Windows.ApplicationModel.Activation.LaunchActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnFileActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.FileActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnSearchActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.SearchActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnShareTargetActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnFileOpenPickerActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnFileSavePickerActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnCachedFileUpdaterActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnWindowCreated(args : Optional<WinRT.Windows.UI.Xaml.WindowCreatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnBackgroundActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
}

// type: Windows.UI.Xaml.ApplicationHighContrastAdjustment
// enum type
public typealias ApplicationHighContrastAdjustment = _q_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment;

// type: Windows.UI.Xaml.ApplicationInitializationCallback
// delegate type
open class IApplicationInitializationCallback
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb6351c55, Data2: 0xc284, Data3 : 0x46e4, Data4 : (0x83, 0x10, 0xfb, 0x09, 0x67, 0xfa, 0xb7, 0x6f)) }
    // [IsSpecialName] void Invoke(Windows.UI.Xaml.ApplicationInitializationCallbackParams)
    public func _n_Invoke(_ p : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationInitializationCallback.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, p))
        }
    }
    public func Invoke(p : Optional<WinRT.Windows.UI.Xaml.IApplicationInitializationCallbackParams>) throws -> Void {
        try self._n_Invoke(RawPointer(p));
    }
}
// impl delegate type
open class ApplicationInitializationCallback
{
    private static var vtable: _q_CWindows_CUI_CXaml_CIApplicationInitializationCallbackVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Windows.UI.Xaml.IApplicationInitializationCallback.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = ApplicationInitializationCallback.from($0)
        _ = instance?.retain()
        return ULONG(_getRetainCount(instance!.takeUnretainedValue()))
    },
    Release: {
        let instance = ApplicationInitializationCallback.from($0)
        return ULONG(_getRetainCount(instance!.takeRetainedValue()))
    },
    Invoke: {
        (pThis, _ p : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIApplicationInitializationCallbackParams>>) in
        guard let self = ApplicationInitializationCallback.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.Invoke(p: WinRT.Windows.UI.Xaml.ApplicationInitializationCallbackParams(plok: WinRT.Windows.UI.Xaml.IApplicationInitializationCallbackParams(p)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CWindows_CUI_CXaml_CIApplicationInitializationCallback
        public var wrapper: Unmanaged<ApplicationInitializationCallback>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CWindows_CUI_CXaml_CIApplicationInitializationCallback(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<ApplicationInitializationCallback>.passUnretained(self)
    }
    fileprivate static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<ApplicationInitializationCallback>? {
        return pUnk?.bindMemory(to: ApplicationInitializationCallback.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(p : Optional<WinRT.Windows.UI.Xaml.ApplicationInitializationCallbackParams>) throws -> Void {
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IApplicationInitializationCallback {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Windows.UI.Xaml.IApplicationInitializationCallback(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Windows.UI.Xaml.ApplicationInitializationCallbackParams
// runtime class
public class ApplicationInitializationCallbackParams
{
    private var _self : WinRT.Windows.UI.Xaml.IApplicationInitializationCallbackParams;
    internal init(plok: WinRT.Windows.UI.Xaml.IApplicationInitializationCallbackParams?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IApplicationInitializationCallbackParams { return _self; }
}

// type: Windows.UI.Xaml.ApplicationRequiresPointerMode
// enum type
public typealias ApplicationRequiresPointerMode = _q_CWindows_CUI_CXaml_CApplicationRequiresPointerMode;

// type: Windows.UI.Xaml.ApplicationTheme
// enum type
public typealias ApplicationTheme = _q_CWindows_CUI_CXaml_CApplicationTheme;

// type: Windows.UI.Xaml.DebugSettings
// runtime class
public class DebugSettings
{
    private var _self : WinRT.Windows.UI.Xaml.IDebugSettings;
    internal init(plok: WinRT.Windows.UI.Xaml.IDebugSettings?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IDebugSettings { return _self; }
    // method not needed: get_EnableFrameRateCounter
    // method not needed: put_EnableFrameRateCounter
    // method not needed: get_IsBindingTracingEnabled
    // method not needed: put_IsBindingTracingEnabled
    // method not needed: get_IsOverdrawHeatMapEnabled
    // method not needed: put_IsOverdrawHeatMapEnabled
    // method not needed: add_BindingFailed
    // method not needed: remove_BindingFailed
    // instance interface not needed: Windows.UI.Xaml.IDebugSettings2
    // instance interface not needed: Windows.UI.Xaml.IDebugSettings3
    // instance interface not needed: Windows.UI.Xaml.IDebugSettings4
}

// type: Windows.UI.Xaml.DependencyObject
// runtime class
open class DependencyObject
{
    private var _self : WinRT.Windows.UI.Xaml.IDependencyObject;
    internal init(plok: WinRT.Windows.UI.Xaml.IDependencyObject?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IDependencyObject { return _self; }
    // COMPOSABLE: Windows.UI.Xaml.IDependencyObjectFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IDependencyObjectFactory = try RoGetActivationFactory(HString("Windows.UI.Xaml.DependencyObject"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    // method not needed: GetValue
    // method not needed: SetValue
    // method not needed: ClearValue
    // method not needed: ReadLocalValue
    // method not needed: GetAnimationBaseValue
    // method not needed: get_Dispatcher
    // instance interface not needed: Windows.UI.Xaml.IDependencyObject2
}

// type: Windows.UI.Xaml.EnteredBackgroundEventHandler
// delegate type
open class IEnteredBackgroundEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x93a956ae, Data2: 0x1d7f, Data3 : 0x438b, Data4 : (0xb7, 0xb8, 0x22, 0x7d, 0x96, 0xb6, 0x09, 0xc0)) }
    // [IsSpecialName] void Invoke(System.Object, Windows.ApplicationModel.EnteredBackgroundEventArgs)
    public func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.ApplicationModel.IEnteredBackgroundEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class EnteredBackgroundEventHandler
{
    private static var vtable: _q_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Windows.UI.Xaml.IEnteredBackgroundEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = EnteredBackgroundEventHandler.from($0)
        _ = instance?.retain()
        return ULONG(_getRetainCount(instance!.takeUnretainedValue()))
    },
    Release: {
        let instance = EnteredBackgroundEventHandler.from($0)
        return ULONG(_getRetainCount(instance!.takeRetainedValue()))
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs>>) in
        guard let self = EnteredBackgroundEventHandler.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.Invoke(sender: WinRT.IInspectable(sender), e: WinRT.Windows.ApplicationModel.EnteredBackgroundEventArgs(plok: WinRT.Windows.ApplicationModel.IEnteredBackgroundEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler
        public var wrapper: Unmanaged<EnteredBackgroundEventHandler>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<EnteredBackgroundEventHandler>.passUnretained(self)
    }
    fileprivate static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<EnteredBackgroundEventHandler>? {
        return pUnk?.bindMemory(to: EnteredBackgroundEventHandler.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.ApplicationModel.EnteredBackgroundEventArgs>) throws -> Void {
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IEnteredBackgroundEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Windows.UI.Xaml.IEnteredBackgroundEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Windows.UI.Xaml.FocusVisualKind
// enum type
public typealias FocusVisualKind = _q_CWindows_CUI_CXaml_CFocusVisualKind;

// type: Windows.UI.Xaml.IApplication
// interface type
open class IApplication
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x74b861a1, Data2: 0x7487, Data3 : 0x46a9, Data4 : (0x9a, 0x6e, 0xc7, 0x8b, 0x51, 0x27, 0x26, 0xc5)) }
    // [IsSpecialName] Windows.UI.Xaml.ResourceDictionary get_Resources()
    public func _n_get_Resources(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIResourceDictionary>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Resources(pThis, __presult))
        }
    }
    public func get_Resources() throws -> Optional<WinRT.Windows.UI.Xaml.IResourceDictionary> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIResourceDictionary>> = nil;
        try self._n_get_Resources(&__result);
        return WinRT.Windows.UI.Xaml.IResourceDictionary(consuming: __result);
    }
    // [IsSpecialName] void put_Resources(Windows.UI.Xaml.ResourceDictionary)
    public func _n_put_Resources(_ value : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIResourceDictionary>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Resources(pThis, value))
        }
    }
    public func put_Resources(value : Optional<WinRT.Windows.UI.Xaml.IResourceDictionary>) throws -> Void {
        try self._n_put_Resources(RawPointer(value));
    }
    // [IsSpecialName] Windows.UI.Xaml.DebugSettings get_DebugSettings()
    public func _n_get_DebugSettings(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIDebugSettings>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_DebugSettings(pThis, __presult))
        }
    }
    public func get_DebugSettings() throws -> Optional<WinRT.Windows.UI.Xaml.IDebugSettings> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIDebugSettings>> = nil;
        try self._n_get_DebugSettings(&__result);
        return WinRT.Windows.UI.Xaml.IDebugSettings(consuming: __result);
    }
    // [IsSpecialName] Windows.UI.Xaml.ApplicationTheme get_RequestedTheme()
    public func _n_get_RequestedTheme(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CApplicationTheme>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedTheme(pThis, __presult))
        }
    }
    public func get_RequestedTheme() throws -> WinRT.Windows.UI.Xaml.ApplicationTheme {
        var __result : _q_CWindows_CUI_CXaml_CApplicationTheme = _q_CWindows_CUI_CXaml_CApplicationTheme_Light;
        try self._n_get_RequestedTheme(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequestedTheme(Windows.UI.Xaml.ApplicationTheme)
    public func _n_put_RequestedTheme(_ value : _q_CWindows_CUI_CXaml_CApplicationTheme) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedTheme(pThis, value))
        }
    }
    public func put_RequestedTheme(value : WinRT.Windows.UI.Xaml.ApplicationTheme) throws -> Void {
        try self._n_put_RequestedTheme(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_UnhandledException(Windows.UI.Xaml.UnhandledExceptionEventHandler)
    public func _n_add_UnhandledException(_ handler : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_UnhandledException(pThis, handler, __presult))
        }
    }
    public func add_UnhandledException(handler : Optional<WinRT.Windows.UI.Xaml.IUnhandledExceptionEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_UnhandledException(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_UnhandledException(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_UnhandledException(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_UnhandledException(pThis, token))
        }
    }
    public func remove_UnhandledException(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_UnhandledException(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Suspending(Windows.UI.Xaml.SuspendingEventHandler)
    public func _n_add_Suspending(_ handler : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CISuspendingEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Suspending(pThis, handler, __presult))
        }
    }
    public func add_Suspending(handler : Optional<WinRT.Windows.UI.Xaml.ISuspendingEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Suspending(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Suspending(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_Suspending(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Suspending(pThis, token))
        }
    }
    public func remove_Suspending(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Suspending(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_Resuming(Windows.Foundation.EventHandler<System.Object>)
    public func _n_add_Resuming(_ handler : Optional<UnsafeMutablePointer<_cg_CWindows_CFoundation_IEventHandler_1_IInspectable>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_Resuming(pThis, handler, __presult))
        }
    }
    public func add_Resuming(handler : Optional<WinRT.Windows.Foundation.IEventHandler_1_IInspectable>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_Resuming(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_Resuming(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_Resuming(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Resuming(pThis, token))
        }
    }
    public func remove_Resuming(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_Resuming(token);
    }
    // void Exit()
    public func _n_Exit() throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Exit(pThis))
        }
    }
    public func Exit() throws -> Void {
        try self._n_Exit();
    }
    public var DebugSettings : Optional<WinRT.Windows.UI.Xaml.IDebugSettings> {
        get throws {
            return try get_DebugSettings();
        }
    }
    public var RequestedTheme : WinRT.Windows.UI.Xaml.ApplicationTheme {
        get throws {
            return try get_RequestedTheme();
        }
    }
    public var Resources : Optional<WinRT.Windows.UI.Xaml.IResourceDictionary> {
        get throws {
            return try get_Resources();
        }
    }
} // IApplication


// type: Windows.UI.Xaml.IApplication2
// interface type
open class IApplication2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x019104be, Data2: 0x522a, Data3 : 0x5904, Data4 : (0xf5, 0x2f, 0xde, 0x72, 0x01, 0x04, 0x29, 0xe0)) }
    // [IsSpecialName] Windows.UI.Xaml.FocusVisualKind get_FocusVisualKind()
    public func _n_get_FocusVisualKind(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CFocusVisualKind>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_FocusVisualKind(pThis, __presult))
        }
    }
    public func get_FocusVisualKind() throws -> WinRT.Windows.UI.Xaml.FocusVisualKind {
        var __result : _q_CWindows_CUI_CXaml_CFocusVisualKind = _q_CWindows_CUI_CXaml_CFocusVisualKind_DottedLine;
        try self._n_get_FocusVisualKind(&__result);
        return __result;
    }
    // [IsSpecialName] void put_FocusVisualKind(Windows.UI.Xaml.FocusVisualKind)
    public func _n_put_FocusVisualKind(_ value : _q_CWindows_CUI_CXaml_CFocusVisualKind) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_FocusVisualKind(pThis, value))
        }
    }
    public func put_FocusVisualKind(value : WinRT.Windows.UI.Xaml.FocusVisualKind) throws -> Void {
        try self._n_put_FocusVisualKind(value);
    }
    // [IsSpecialName] Windows.UI.Xaml.ApplicationRequiresPointerMode get_RequiresPointerMode()
    public func _n_get_RequiresPointerMode(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CApplicationRequiresPointerMode>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequiresPointerMode(pThis, __presult))
        }
    }
    public func get_RequiresPointerMode() throws -> WinRT.Windows.UI.Xaml.ApplicationRequiresPointerMode {
        var __result : _q_CWindows_CUI_CXaml_CApplicationRequiresPointerMode = _q_CWindows_CUI_CXaml_CApplicationRequiresPointerMode_Auto;
        try self._n_get_RequiresPointerMode(&__result);
        return __result;
    }
    // [IsSpecialName] void put_RequiresPointerMode(Windows.UI.Xaml.ApplicationRequiresPointerMode)
    public func _n_put_RequiresPointerMode(_ value : _q_CWindows_CUI_CXaml_CApplicationRequiresPointerMode) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequiresPointerMode(pThis, value))
        }
    }
    public func put_RequiresPointerMode(value : WinRT.Windows.UI.Xaml.ApplicationRequiresPointerMode) throws -> Void {
        try self._n_put_RequiresPointerMode(value);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_LeavingBackground(Windows.UI.Xaml.LeavingBackgroundEventHandler)
    public func _n_add_LeavingBackground(_ handler : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_LeavingBackground(pThis, handler, __presult))
        }
    }
    public func add_LeavingBackground(handler : Optional<WinRT.Windows.UI.Xaml.ILeavingBackgroundEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_LeavingBackground(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_LeavingBackground(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_LeavingBackground(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_LeavingBackground(pThis, token))
        }
    }
    public func remove_LeavingBackground(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_LeavingBackground(token);
    }
    // [IsSpecialName] Windows.Foundation.EventRegistrationToken add_EnteredBackground(Windows.UI.Xaml.EnteredBackgroundEventHandler)
    public func _n_add_EnteredBackground(_ handler : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIEnteredBackgroundEventHandler>>, _ __presult: UnsafeMutablePointer<_q_CWindows_CFoundation_CEventRegistrationToken>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_EnteredBackground(pThis, handler, __presult))
        }
    }
    public func add_EnteredBackground(handler : Optional<WinRT.Windows.UI.Xaml.IEnteredBackgroundEventHandler>) throws -> WinRT.Windows.Foundation.EventRegistrationToken {
        var __result : _q_CWindows_CFoundation_CEventRegistrationToken = _q_CWindows_CFoundation_CEventRegistrationToken(Value: 0);
        try self._n_add_EnteredBackground(RawPointer(handler), &__result);
        return __result;
    }
    // [IsSpecialName] void remove_EnteredBackground(Windows.Foundation.EventRegistrationToken)
    public func _n_remove_EnteredBackground(_ token : _q_CWindows_CFoundation_CEventRegistrationToken) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_EnteredBackground(pThis, token))
        }
    }
    public func remove_EnteredBackground(token : WinRT.Windows.Foundation.EventRegistrationToken) throws -> Void {
        try self._n_remove_EnteredBackground(token);
    }
    public var FocusVisualKind : WinRT.Windows.UI.Xaml.FocusVisualKind {
        get throws {
            return try get_FocusVisualKind();
        }
    }
    public var RequiresPointerMode : WinRT.Windows.UI.Xaml.ApplicationRequiresPointerMode {
        get throws {
            return try get_RequiresPointerMode();
        }
    }
} // IApplication2


// type: Windows.UI.Xaml.IApplication3
// interface type
open class IApplication3
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb775ad7c, Data2: 0x18b8, Data3 : 0x45ca, Data4 : (0xa1, 0xb0, 0xdc, 0x48, 0x3e, 0x4b, 0x10, 0x28)) }
    // [IsSpecialName] Windows.UI.Xaml.ApplicationHighContrastAdjustment get_HighContrastAdjustment()
    public func _n_get_HighContrastAdjustment(_ __presult: UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HighContrastAdjustment(pThis, __presult))
        }
    }
    public func get_HighContrastAdjustment() throws -> WinRT.Windows.UI.Xaml.ApplicationHighContrastAdjustment {
        var __result : _q_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment = _q_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment_None;
        try self._n_get_HighContrastAdjustment(&__result);
        return __result;
    }
    // [IsSpecialName] void put_HighContrastAdjustment(Windows.UI.Xaml.ApplicationHighContrastAdjustment)
    public func _n_put_HighContrastAdjustment(_ value : _q_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplication3.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_HighContrastAdjustment(pThis, value))
        }
    }
    public func put_HighContrastAdjustment(value : WinRT.Windows.UI.Xaml.ApplicationHighContrastAdjustment) throws -> Void {
        try self._n_put_HighContrastAdjustment(value);
    }
    public var HighContrastAdjustment : WinRT.Windows.UI.Xaml.ApplicationHighContrastAdjustment {
        get throws {
            return try get_HighContrastAdjustment();
        }
    }
} // IApplication3


// type: Windows.UI.Xaml.IApplicationFactory
// interface type
// COMPOSITION INTERFACE
open class IApplicationFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x93bbe361, Data2: 0xbe5a, Data3 : 0x4ee3, Data4 : (0xb4, 0xa3, 0x95, 0x11, 0x8d, 0xc9, 0x7a, 0x89)) }
    // Windows.UI.Xaml.Application CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIApplication>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Windows.UI.Xaml.IApplication> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIApplication>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Windows.UI.Xaml.IApplication(consuming: __result);
    }
} // IApplicationFactory


// type: Windows.UI.Xaml.IApplicationInitializationCallbackParams
// interface type
open class IApplicationInitializationCallbackParams
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x751b792e, Data2: 0x5772, Data3 : 0x4488, Data4 : (0x8b, 0x87, 0xf5, 0x47, 0xfa, 0xa6, 0x44, 0x74)) }
} // IApplicationInitializationCallbackParams


// type: Windows.UI.Xaml.IApplicationOverrides
// interface type
open class IApplicationOverrides
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x25f99ff7, Data2: 0x9347, Data3 : 0x459a, Data4 : (0x9f, 0xac, 0xb2, 0xd0, 0xe1, 0x1c, 0x1a, 0x0f)) }
    // void OnActivated(Windows.ApplicationModel.Activation.IActivatedEventArgs)
    public func _n_OnActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnActivated(pThis, args))
        }
    }
    public func OnActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IActivatedEventArgs>) throws -> Void {
        try self._n_OnActivated(RawPointer(args));
    }
    // void OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)
    public func _n_OnLaunched(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnLaunched(pThis, args))
        }
    }
    public func OnLaunched(args : Optional<WinRT.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs>) throws -> Void {
        try self._n_OnLaunched(RawPointer(args));
    }
    // void OnFileActivated(Windows.ApplicationModel.Activation.FileActivatedEventArgs)
    public func _n_OnFileActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnFileActivated(pThis, args))
        }
    }
    public func OnFileActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IFileActivatedEventArgs>) throws -> Void {
        try self._n_OnFileActivated(RawPointer(args));
    }
    // void OnSearchActivated(Windows.ApplicationModel.Activation.SearchActivatedEventArgs)
    public func _n_OnSearchActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnSearchActivated(pThis, args))
        }
    }
    public func OnSearchActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs>) throws -> Void {
        try self._n_OnSearchActivated(RawPointer(args));
    }
    // void OnShareTargetActivated(Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs)
    public func _n_OnShareTargetActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnShareTargetActivated(pThis, args))
        }
    }
    public func OnShareTargetActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs>) throws -> Void {
        try self._n_OnShareTargetActivated(RawPointer(args));
    }
    // void OnFileOpenPickerActivated(Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs)
    public func _n_OnFileOpenPickerActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnFileOpenPickerActivated(pThis, args))
        }
    }
    public func OnFileOpenPickerActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs>) throws -> Void {
        try self._n_OnFileOpenPickerActivated(RawPointer(args));
    }
    // void OnFileSavePickerActivated(Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs)
    public func _n_OnFileSavePickerActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnFileSavePickerActivated(pThis, args))
        }
    }
    public func OnFileSavePickerActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs>) throws -> Void {
        try self._n_OnFileSavePickerActivated(RawPointer(args));
    }
    // void OnCachedFileUpdaterActivated(Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs)
    public func _n_OnCachedFileUpdaterActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnCachedFileUpdaterActivated(pThis, args))
        }
    }
    public func OnCachedFileUpdaterActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs>) throws -> Void {
        try self._n_OnCachedFileUpdaterActivated(RawPointer(args));
    }
    // void OnWindowCreated(Windows.UI.Xaml.WindowCreatedEventArgs)
    public func _n_OnWindowCreated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIWindowCreatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnWindowCreated(pThis, args))
        }
    }
    public func OnWindowCreated(args : Optional<WinRT.Windows.UI.Xaml.IWindowCreatedEventArgs>) throws -> Void {
        try self._n_OnWindowCreated(RawPointer(args));
    }
} // IApplicationOverrides

// impl interface type
open class ApplicationOverrides
{
    private static var vtable: _q_CWindows_CUI_CXaml_CIApplicationOverridesVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Windows.UI.Xaml.IApplicationOverrides.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = ApplicationOverrides.from($0)
        _ = instance?.retain()
        return ULONG(_getRetainCount(instance!.takeUnretainedValue()))
    },
    Release: {
        let instance = ApplicationOverrides.from($0)
        return ULONG(_getRetainCount(instance!.takeRetainedValue()))
    },
    GetIids: {
        guard let pThis = $0, let pLen = $1, let ppItems = $2 else {
            return E_INVALIDARG
        }
        return E_FAIL;
    },
    GetRuntimeClassName: {
        guard let pThis = $0, let pstr = $1 else {
            return E_INVALIDARG
        }
        return E_FAIL;
    },
    GetTrustLevel: {
        guard let pThis = $0, let presult = $1 else {
            return E_INVALIDARG
        }
        return E_FAIL;
    },
    OnActivated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnActivated(args: WinRT.Windows.ApplicationModel.Activation.IActivatedEventArgs(args))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnLaunched: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CILaunchActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnLaunched(args: WinRT.Windows.ApplicationModel.Activation.LaunchActivatedEventArgs(plok: WinRT.Windows.ApplicationModel.Activation.ILaunchActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnFileActivated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIFileActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnFileActivated(args: WinRT.Windows.ApplicationModel.Activation.FileActivatedEventArgs(plok: WinRT.Windows.ApplicationModel.Activation.IFileActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnSearchActivated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CISearchActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnSearchActivated(args: WinRT.Windows.ApplicationModel.Activation.SearchActivatedEventArgs(plok: WinRT.Windows.ApplicationModel.Activation.ISearchActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnShareTargetActivated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIShareTargetActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnShareTargetActivated(args: WinRT.Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs(plok: WinRT.Windows.ApplicationModel.Activation.IShareTargetActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnFileOpenPickerActivated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIFileOpenPickerActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnFileOpenPickerActivated(args: WinRT.Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs(plok: WinRT.Windows.ApplicationModel.Activation.IFileOpenPickerActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnFileSavePickerActivated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIFileSavePickerActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnFileSavePickerActivated(args: WinRT.Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs(plok: WinRT.Windows.ApplicationModel.Activation.IFileSavePickerActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnCachedFileUpdaterActivated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CICachedFileUpdaterActivatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnCachedFileUpdaterActivated(args: WinRT.Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs(plok: WinRT.Windows.ApplicationModel.Activation.ICachedFileUpdaterActivatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    },
    OnWindowCreated: {
        (pThis, _ args : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIWindowCreatedEventArgs>>) in
        guard let self = ApplicationOverrides.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.OnWindowCreated(args: WinRT.Windows.UI.Xaml.WindowCreatedEventArgs(plok: WinRT.Windows.UI.Xaml.IWindowCreatedEventArgs(args)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CWindows_CUI_CXaml_CIApplicationOverrides
        public var wrapper: Unmanaged<ApplicationOverrides>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CWindows_CUI_CXaml_CIApplicationOverrides(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<ApplicationOverrides>.passUnretained(self)
    }
    fileprivate static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<ApplicationOverrides>? {
        return pUnk?.bindMemory(to: ApplicationOverrides.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    internal func Interface() -> WinRT.Windows.UI.Xaml.IApplicationOverrides {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Windows.UI.Xaml.IApplicationOverrides(UnsafeMutableRawPointer($0))
        }
    }
    open func OnActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnLaunched(args : Optional<WinRT.Windows.ApplicationModel.Activation.LaunchActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnFileActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.FileActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnSearchActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.SearchActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnShareTargetActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnFileOpenPickerActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnFileSavePickerActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnCachedFileUpdaterActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
    open func OnWindowCreated(args : Optional<WinRT.Windows.UI.Xaml.WindowCreatedEventArgs>) throws -> Void {
        throw Error(hr: E_INVALIDARG);
    }
}

// type: Windows.UI.Xaml.IApplicationOverrides2
// interface type
open class IApplicationOverrides2
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xdb5cd2b9, Data2: 0xd3b4, Data3 : 0x558c, Data4 : (0xc6, 0x4e, 0x04, 0x34, 0xfd, 0x1b, 0xd8, 0x89)) }
    // void OnBackgroundActivated(Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs)
    public func _n_OnBackgroundActivated(_ args : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CActivation_CIBackgroundActivatedEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationOverrides2.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.OnBackgroundActivated(pThis, args))
        }
    }
    public func OnBackgroundActivated(args : Optional<WinRT.Windows.ApplicationModel.Activation.IBackgroundActivatedEventArgs>) throws -> Void {
        try self._n_OnBackgroundActivated(RawPointer(args));
    }
} // IApplicationOverrides2


// type: Windows.UI.Xaml.IApplicationStatics
// interface type
open class IApplicationStatics
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x06499997, Data2: 0xf7b4, Data3 : 0x45fe, Data4 : (0xb7, 0x63, 0x75, 0x77, 0xd1, 0xd3, 0xcb, 0x4a)) }
    // [IsSpecialName] Windows.UI.Xaml.Application get_Current()
    public func _n_get_Current(_ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIApplication>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, __presult))
        }
    }
    public func get_Current() throws -> Optional<WinRT.Windows.UI.Xaml.IApplication> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIApplication>> = nil;
        try self._n_get_Current(&__result);
        return WinRT.Windows.UI.Xaml.IApplication(consuming: __result);
    }
    // void Start(Windows.UI.Xaml.ApplicationInitializationCallback)
    public func _n_Start(_ callback : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIApplicationInitializationCallback>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Start(pThis, callback))
        }
    }
    public func Start(callback : Optional<WinRT.Windows.UI.Xaml.IApplicationInitializationCallback>) throws -> Void {
        try self._n_Start(RawPointer(callback));
    }
    // void LoadComponent(System.Object, Windows.Foundation.Uri)
    public func _n_LoadComponent(_ component : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ resourceLocator : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadComponent(pThis, component, resourceLocator))
        }
    }
    public func LoadComponent(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.IUriRuntimeClass>) throws -> Void {
        try self._n_LoadComponent(RawPointer(component), RawPointer(resourceLocator));
    }
    // void LoadComponent(System.Object, Windows.Foundation.Uri, Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation)
    public func _n_LoadComponentWithResourceLocation(_ component : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ resourceLocator : Optional<UnsafeMutablePointer<_q_CWindows_CFoundation_CIUriRuntimeClass>>, _ componentResourceLocation : _q_CWindows_CUI_CXaml_CControls_CPrimitives_CComponentResourceLocation) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIApplicationStatics.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.LoadComponentWithResourceLocation(pThis, component, resourceLocator, componentResourceLocation))
        }
    }
    public func LoadComponentWithResourceLocation(component : Optional<WinRT.IInspectable>, resourceLocator : Optional<WinRT.Windows.Foundation.IUriRuntimeClass>, componentResourceLocation : WinRT.Windows.UI.Xaml.Controls.Primitives.ComponentResourceLocation) throws -> Void {
        try self._n_LoadComponentWithResourceLocation(RawPointer(component), RawPointer(resourceLocator), componentResourceLocation);
    }
    public var Current : Optional<WinRT.Windows.UI.Xaml.IApplication> {
        get throws {
            return try get_Current();
        }
    }
} // IApplicationStatics


// type: Windows.UI.Xaml.IDebugSettings
// interface type
open class IDebugSettings
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x3d451f98, Data2: 0xc6a7, Data3 : 0x4d17, Data4 : (0x83, 0x98, 0xd8, 0x3a, 0x06, 0x71, 0x83, 0xd8)) }
// method not needed: get_EnableFrameRateCounter
// method not needed: put_EnableFrameRateCounter
// method not needed: get_IsBindingTracingEnabled
// method not needed: put_IsBindingTracingEnabled
// method not needed: get_IsOverdrawHeatMapEnabled
// method not needed: put_IsOverdrawHeatMapEnabled
// method not needed: add_BindingFailed
// method not needed: remove_BindingFailed
} // IDebugSettings


// type: Windows.UI.Xaml.IDependencyObject
// interface type
open class IDependencyObject
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x5c526665, Data2: 0xf60e, Data3 : 0x4912, Data4 : (0xaf, 0x59, 0x5f, 0xe0, 0x68, 0x0f, 0x08, 0x9d)) }
// method not needed: GetValue
// method not needed: SetValue
// method not needed: ClearValue
// method not needed: ReadLocalValue
// method not needed: GetAnimationBaseValue
// method not needed: get_Dispatcher
} // IDependencyObject


// type: Windows.UI.Xaml.IDependencyObjectFactory
// interface type
// COMPOSITION INTERFACE
open class IDependencyObjectFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9a03af92, Data2: 0x7d8a, Data3 : 0x4937, Data4 : (0x88, 0x4f, 0xec, 0xf3, 0x4f, 0xe0, 0x2a, 0xcb)) }
    // Windows.UI.Xaml.DependencyObject CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIDependencyObject>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIDependencyObjectFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Windows.UI.Xaml.IDependencyObject> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIDependencyObject>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Windows.UI.Xaml.IDependencyObject(consuming: __result);
    }
} // IDependencyObjectFactory


// type: Windows.UI.Xaml.IResourceDictionary
// interface type
open class IResourceDictionary
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xc1ea4f24, Data2: 0xd6de, Data3 : 0x4191, Data4 : (0x8e, 0x3a, 0xf4, 0x86, 0x01, 0xf7, 0x48, 0x9c)) }
// method not needed: get_Source
// method not needed: put_Source
// method not needed: get_MergedDictionaries
// method not needed: get_ThemeDictionaries
} // IResourceDictionary


// type: Windows.UI.Xaml.IResourceDictionaryFactory
// interface type
// COMPOSITION INTERFACE
open class IResourceDictionaryFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xea3639b5, Data2: 0x31b7, Data3 : 0x4271, Data4 : (0x92, 0xc9, 0x7c, 0x95, 0x84, 0xa9, 0x1c, 0x22)) }
    // Windows.UI.Xaml.ResourceDictionary CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIResourceDictionary>>>?) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIResourceDictionaryFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Windows.UI.Xaml.IResourceDictionary> {
        var __result : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIResourceDictionary>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Windows.UI.Xaml.IResourceDictionary(consuming: __result);
    }
} // IResourceDictionaryFactory


// type: Windows.UI.Xaml.IUnhandledExceptionEventArgs
// interface type
open class IUnhandledExceptionEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7230269c, Data2: 0x054e, Data3 : 0x4cf3, Data4 : (0x86, 0xc5, 0xbe, 0x90, 0xeb, 0x68, 0x63, 0xd5)) }
// method not needed: get_Exception
// method not needed: get_Message
// method not needed: get_Handled
// method not needed: put_Handled
} // IUnhandledExceptionEventArgs


// type: Windows.UI.Xaml.IWindowCreatedEventArgs
// interface type
open class IWindowCreatedEventArgs
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x31b71470, Data2: 0xfeff, Data3 : 0x4654, Data4 : (0xaf, 0x48, 0x9b, 0x39, 0x8a, 0xb5, 0x77, 0x2b)) }
// method not needed: get_Window
} // IWindowCreatedEventArgs


// type: Windows.UI.Xaml.LeavingBackgroundEventHandler
// delegate type
open class ILeavingBackgroundEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xaaad5dad, Data2: 0x4fc6, Data3 : 0x4aa4, Data4 : (0xb7, 0xcf, 0x87, 0x7e, 0x36, 0xad, 0xa4, 0xf6)) }
    // [IsSpecialName] void Invoke(System.Object, Windows.ApplicationModel.LeavingBackgroundEventArgs)
    public func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CILeavingBackgroundEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.ApplicationModel.ILeavingBackgroundEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class LeavingBackgroundEventHandler
{
    private static var vtable: _q_CWindows_CUI_CXaml_CILeavingBackgroundEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Windows.UI.Xaml.ILeavingBackgroundEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = LeavingBackgroundEventHandler.from($0)
        _ = instance?.retain()
        return ULONG(_getRetainCount(instance!.takeUnretainedValue()))
    },
    Release: {
        let instance = LeavingBackgroundEventHandler.from($0)
        return ULONG(_getRetainCount(instance!.takeRetainedValue()))
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CILeavingBackgroundEventArgs>>) in
        guard let self = LeavingBackgroundEventHandler.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.Invoke(sender: WinRT.IInspectable(sender), e: WinRT.Windows.ApplicationModel.LeavingBackgroundEventArgs(plok: WinRT.Windows.ApplicationModel.ILeavingBackgroundEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler
        public var wrapper: Unmanaged<LeavingBackgroundEventHandler>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CWindows_CUI_CXaml_CILeavingBackgroundEventHandler(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<LeavingBackgroundEventHandler>.passUnretained(self)
    }
    fileprivate static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<LeavingBackgroundEventHandler>? {
        return pUnk?.bindMemory(to: LeavingBackgroundEventHandler.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.ApplicationModel.LeavingBackgroundEventArgs>) throws -> Void {
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.ILeavingBackgroundEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Windows.UI.Xaml.ILeavingBackgroundEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Windows.UI.Xaml.ResourceDictionary
// runtime class
open class ResourceDictionary
{
    private var _self : WinRT.Windows.UI.Xaml.IResourceDictionary;
    internal init(plok: WinRT.Windows.UI.Xaml.IResourceDictionary?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IResourceDictionary { return _self; }
    // COMPOSABLE: Windows.UI.Xaml.IResourceDictionaryFactory
    public init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IResourceDictionaryFactory = try RoGetActivationFactory(HString("Windows.UI.Xaml.ResourceDictionary"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    // method not needed: get_Source
    // method not needed: put_Source
    // method not needed: get_MergedDictionaries
    // method not needed: get_ThemeDictionaries
    // instance interface not needed: Windows.Foundation.Collections.IMap`2[[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]]
    // instance interface not needed: Windows.Foundation.Collections.IIterable`1[[Windows.Foundation.Collections.IKeyValuePair`2[[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a],[System.Object, System.Runtime, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime]]
}

// type: Windows.UI.Xaml.SuspendingEventHandler
// delegate type
open class ISuspendingEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x23429465, Data2: 0xe36a, Data3 : 0x40e2, Data4 : (0xb1, 0x39, 0xa4, 0x70, 0x46, 0x02, 0xa6, 0xe1)) }
    // [IsSpecialName] void Invoke(System.Object, Windows.ApplicationModel.SuspendingEventArgs)
    public func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CISuspendingEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CISuspendingEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.ApplicationModel.ISuspendingEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class SuspendingEventHandler
{
    private static var vtable: _q_CWindows_CUI_CXaml_CISuspendingEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Windows.UI.Xaml.ISuspendingEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = SuspendingEventHandler.from($0)
        _ = instance?.retain()
        return ULONG(_getRetainCount(instance!.takeUnretainedValue()))
    },
    Release: {
        let instance = SuspendingEventHandler.from($0)
        return ULONG(_getRetainCount(instance!.takeRetainedValue()))
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CApplicationModel_CISuspendingEventArgs>>) in
        guard let self = SuspendingEventHandler.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.Invoke(sender: WinRT.IInspectable(sender), e: WinRT.Windows.ApplicationModel.SuspendingEventArgs(plok: WinRT.Windows.ApplicationModel.ISuspendingEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CWindows_CUI_CXaml_CISuspendingEventHandler
        public var wrapper: Unmanaged<SuspendingEventHandler>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CWindows_CUI_CXaml_CISuspendingEventHandler(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<SuspendingEventHandler>.passUnretained(self)
    }
    fileprivate static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<SuspendingEventHandler>? {
        return pUnk?.bindMemory(to: SuspendingEventHandler.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.ApplicationModel.SuspendingEventArgs>) throws -> Void {
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.ISuspendingEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Windows.UI.Xaml.ISuspendingEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Windows.UI.Xaml.UnhandledExceptionEventArgs
// runtime class
public class UnhandledExceptionEventArgs
{
    private var _self : WinRT.Windows.UI.Xaml.IUnhandledExceptionEventArgs;
    internal init(plok: WinRT.Windows.UI.Xaml.IUnhandledExceptionEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IUnhandledExceptionEventArgs { return _self; }
    // method not needed: get_Exception
    // method not needed: get_Message
    // method not needed: get_Handled
    // method not needed: put_Handled
}

// type: Windows.UI.Xaml.UnhandledExceptionEventHandler
// delegate type
open class IUnhandledExceptionEventHandler
    :
    WinRT.IUnknown
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x9274e6bd, Data2: 0x49a1, Data3 : 0x4958, Data4 : (0xbe, 0xee, 0xd0, 0xe1, 0x95, 0x87, 0xb6, 0xe3)) }
    // [IsSpecialName] void Invoke(System.Object, Windows.UI.Xaml.UnhandledExceptionEventArgs)
    public func _n_Invoke(_ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs>>) throws {
        return try perform(as: _q_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, sender, e))
        }
    }
    public func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.UI.Xaml.IUnhandledExceptionEventArgs>) throws -> Void {
        try self._n_Invoke(RawPointer(sender), RawPointer(e));
    }
}
// impl delegate type
open class UnhandledExceptionEventHandler
{
    private static var vtable: _q_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandlerVtbl = .init(
    QueryInterface: {
        guard let pUnk = $0, let riid = $1, let ppvObject = $2 else {
            return E_INVALIDARG
        }
        switch riid.pointee {
        case IUnknown.IID, WinRT.Windows.UI.Xaml.IUnhandledExceptionEventHandler.IID:
            _ = pUnk.pointee.lpVtbl.pointee.AddRef(pUnk)
            ppvObject.pointee = UnsafeMutableRawPointer(pUnk)
            return S_OK
        default:
            ppvObject.pointee = nil
            return E_NOINTERFACE
        }
    },
    AddRef: {
        let instance = UnhandledExceptionEventHandler.from($0)
        _ = instance?.retain()
        return ULONG(_getRetainCount(instance!.takeUnretainedValue()))
    },
    Release: {
        let instance = UnhandledExceptionEventHandler.from($0)
        return ULONG(_getRetainCount(instance!.takeRetainedValue()))
    },
    Invoke: {
        (pThis, _ sender : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ e : Optional<UnsafeMutablePointer<_q_CWindows_CUI_CXaml_CIUnhandledExceptionEventArgs>>) in
        guard let self = UnhandledExceptionEventHandler.from(pThis)?.takeUnretainedValue() else {
            return E_INVALIDARG
        }
        do {
            try self.Invoke(sender: WinRT.IInspectable(sender), e: WinRT.Windows.UI.Xaml.UnhandledExceptionEventArgs(plok: WinRT.Windows.UI.Xaml.IUnhandledExceptionEventArgs(e)))
            return S_OK
        }
        catch let _e as WinRT.Error {
            return _e.hr;
        } catch {
            return E_FAIL
        }
    }
    )
    private struct WithTrailingObjects {
        public var `super`: _q_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler
        public var wrapper: Unmanaged<UnhandledExceptionEventHandler>?
    }
    private var instance: WithTrailingObjects

    public init() {
        self.instance = WithTrailingObjects(super: _q_CWindows_CUI_CXaml_CIUnhandledExceptionEventHandler(lpVtbl: &Self.vtable), wrapper: nil)
        self.instance.wrapper = Unmanaged<UnhandledExceptionEventHandler>.passUnretained(self)
    }
    fileprivate static func from(_ pUnk: UnsafeMutableRawPointer?) -> Unmanaged<UnhandledExceptionEventHandler>? {
        return pUnk?.bindMemory(to: UnhandledExceptionEventHandler.WithTrailingObjects.self, capacity: 1).pointee.wrapper
    }

    open func Invoke(sender : Optional<WinRT.IInspectable>, e : Optional<WinRT.Windows.UI.Xaml.UnhandledExceptionEventArgs>) throws -> Void {
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IUnhandledExceptionEventHandler {
        return withUnsafeMutablePointer(to: &self.instance.super) {
            WinRT.Windows.UI.Xaml.IUnhandledExceptionEventHandler(UnsafeMutableRawPointer($0))
        }
    }
}

// type: Windows.UI.Xaml.WindowCreatedEventArgs
// runtime class
public class WindowCreatedEventArgs
{
    private var _self : WinRT.Windows.UI.Xaml.IWindowCreatedEventArgs;
    internal init(plok: WinRT.Windows.UI.Xaml.IWindowCreatedEventArgs?) {
        _self = plok!
    }
    internal func Interface() -> WinRT.Windows.UI.Xaml.IWindowCreatedEventArgs { return _self; }
    // method not needed: get_Window
}

}
extension WinRT.Windows.UI.Xaml.ApplicationHighContrastAdjustment {
    public static var None : Self {
        get {
            return _q_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment_None;
        }
    }
    public static var Auto : Self {
        get {
            return _q_CWindows_CUI_CXaml_CApplicationHighContrastAdjustment_Auto;
        }
    }
}
extension WinRT.Windows.UI.Xaml.ApplicationRequiresPointerMode {
    public static var Auto : Self {
        get {
            return _q_CWindows_CUI_CXaml_CApplicationRequiresPointerMode_Auto;
        }
    }
    public static var WhenRequested : Self {
        get {
            return _q_CWindows_CUI_CXaml_CApplicationRequiresPointerMode_WhenRequested;
        }
    }
}
extension WinRT.Windows.UI.Xaml.ApplicationTheme {
    public static var Light : Self {
        get {
            return _q_CWindows_CUI_CXaml_CApplicationTheme_Light;
        }
    }
    public static var Dark : Self {
        get {
            return _q_CWindows_CUI_CXaml_CApplicationTheme_Dark;
        }
    }
}
extension WinRT.Windows.UI.Xaml.FocusVisualKind {
    public static var DottedLine : Self {
        get {
            return _q_CWindows_CUI_CXaml_CFocusVisualKind_DottedLine;
        }
    }
    public static var HighVisibility : Self {
        get {
            return _q_CWindows_CUI_CXaml_CFocusVisualKind_HighVisibility;
        }
    }
    public static var Reveal : Self {
        get {
            return _q_CWindows_CUI_CXaml_CFocusVisualKind_Reveal;
        }
    }
}
