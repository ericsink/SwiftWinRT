// this file is automatically generated.
// if you modify it by hand, your changes will probably be lost.


import CWinRT;

extension Microsoft.UI.Xaml.Media {
// type: Microsoft.UI.Xaml.Media.Brush
// runtime class
open class Brush
    :
    Microsoft.UI.Xaml.DependencyObject
{
    private var _self : WinRT.Microsoft.UI.Xaml.Media.IBrush;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Media.IBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Media.IBrush { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IBrushFactory
    public override init(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IBrushFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.Brush"));
        _self = try _af.CreateInstance(baseInterface: baseInterface, innerInterface: &innerInterface)!;
        try super.init(plok: _self.QueryInterface())
    }
    public convenience init() throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(baseInterface: nil, innerInterface: &_inn)
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IBrushStatics
    // method not needed: get_Opacity
    // method not needed: put_Opacity
    // method not needed: get_Transform
    // method not needed: put_Transform
    // method not needed: get_RelativeTransform
    // method not needed: put_RelativeTransform
    // instance interface not needed: Microsoft.UI.Xaml.Media.IBrushOverrides
    // instance interface not needed: Microsoft.UI.Composition.IAnimationObject
}

// type: Microsoft.UI.Xaml.Media.FontFamily
// runtime class
open class FontFamily
{
    private var _self : WinRT.Microsoft.UI.Xaml.Media.IFontFamily;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Media.IFontFamily?) throws {
        _self = plok!
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Media.IFontFamily { return _self; }
    // COMPOSABLE: Microsoft.UI.Xaml.Media.IFontFamilyFactory
    public init(familyName : Swift.String, baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws {
        let _af : IFontFamilyFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.FontFamily"));
        _self = try _af.CreateInstanceWithName(familyName: familyName, baseInterface: baseInterface, innerInterface: &innerInterface)!;
    }
    public convenience init(familyName : Swift.String) throws {
        var _inn : Optional<WinRT.IInspectable> = nil
        try self.init(familyName: familyName, baseInterface: nil, innerInterface: &_inn)
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.IFontFamilyStatics
    // method not needed: get_Source
}

// type: Microsoft.UI.Xaml.Media.IBrush
// interface type
open class IBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x2de3cb83, Data2: 0x1329, Data3 : 0x5679, Data4 : (0x88, 0xf8, 0xc8, 0x22, 0xbc, 0x54, 0x42, 0xcb)) }
// method not needed: get_Opacity
// method not needed: put_Opacity
// method not needed: get_Transform
// method not needed: put_Transform
// method not needed: get_RelativeTransform
// method not needed: put_RelativeTransform
} // IBrush


// type: Microsoft.UI.Xaml.Media.IBrushFactory
// interface type
// COMPOSITION INTERFACE
open class IBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb5258717, Data2: 0x6c49, Data3 : 0x5ba5, Data4 : (0x87, 0xfd, 0x35, 0xdf, 0x38, 0x26, 0x47, 0xa5)) }
    // Microsoft.UI.Xaml.Media.Brush CreateInstance(System.Object, ref System.Object)
    public func _n_CreateInstance(_ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstance(pThis, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstance(baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.IBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIBrush>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstance(RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.Media.IBrush(consuming: __result);
    }
} // IBrushFactory


// type: Microsoft.UI.Xaml.Media.IFontFamily
// interface type
open class IFontFamily
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x18fa5bc1, Data2: 0x7294, Data3 : 0x527c, Data4 : (0xbb, 0x02, 0xb2, 0x13, 0xe0, 0xb3, 0xa2, 0xa3)) }
// method not needed: get_Source
} // IFontFamily


// type: Microsoft.UI.Xaml.Media.IFontFamilyFactory
// interface type
// COMPOSITION INTERFACE
open class IFontFamilyFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x61b88a77, Data2: 0xd0f9, Data3 : 0x5e9e, Data4 : (0x8c, 0x28, 0xed, 0xa0, 0x1f, 0xed, 0xe2, 0x2e)) }
    // Microsoft.UI.Xaml.Media.FontFamily CreateInstanceWithName(System.String, System.Object, ref System.Object)
    public func _n_CreateInstanceWithName(_ familyName : Optional<HSTRING>, _ baseInterface : Optional<UnsafeMutablePointer<CWinRT.IInspectable>>, _ innerInterface : UnsafeMutablePointer<Optional<UnsafeMutablePointer<CWinRT.IInspectable>>>, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamilyFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithName(pThis, familyName, baseInterface, innerInterface, __presult))
        }
    }
    public func CreateInstanceWithName(familyName : Swift.String, baseInterface : Optional<WinRT.IInspectable>, innerInterface : inout Optional<WinRT.IInspectable>) throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.IFontFamily> {
        let __hstr_familyName = try HString(familyName);
        return try withExtendedLifetime(__hstr_familyName) {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CIFontFamily>> = nil;
            var _tmp_out_innerInterface: Optional<UnsafeMutablePointer<CWinRT.IInspectable>> = nil;
        try self._n_CreateInstanceWithName(__hstr_familyName.hRef.hString, RawPointer(baseInterface), &_tmp_out_innerInterface, &__result);
            innerInterface = WinRT.IInspectable(consuming: _tmp_out_innerInterface);
        return WinRT.Microsoft.UI.Xaml.Media.IFontFamily(consuming: __result);
        }
    }
} // IFontFamilyFactory


// type: Microsoft.UI.Xaml.Media.ISolidColorBrush
// interface type
open class ISolidColorBrush
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0xb3865c31, Data2: 0x37c8, Data3 : 0x55c1, Data4 : (0x8a, 0x72, 0xd4, 0x1c, 0x67, 0x64, 0x2e, 0x2a)) }
// method not needed: get_Color
// method not needed: put_Color
} // ISolidColorBrush


// type: Microsoft.UI.Xaml.Media.ISolidColorBrushFactory
// interface type
// ACTIVATION INTERFACE
open class ISolidColorBrushFactory
    :
    WinRT.IInspectable
{
    override public class var IID : CWinRT.IID { CWinRT.IID(Data1: 0x7b559384, Data2: 0x4daa, Data3 : 0x54f4, Data4 : (0x91, 0xef, 0x33, 0xa2, 0x3f, 0xd8, 0x16, 0xca)) }
    // Microsoft.UI.Xaml.Media.SolidColorBrush CreateInstanceWithColor(Windows.UI.Color)
    public func _n_CreateInstanceWithColor(_ color : _q_CWindows_CUI_CColor, _ __presult: UnsafeMutablePointer<Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>>>?) throws {
        return try perform(as: _q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrushFactory.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.CreateInstanceWithColor(pThis, color, __presult))
        }
    }
    public func CreateInstanceWithColor(color : WinRT.Windows.UI.Color) throws -> Optional<WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush> {
        var __result : Optional<UnsafeMutablePointer<_q_CMicrosoft_CUI_CXaml_CMedia_CISolidColorBrush>> = nil;
        try self._n_CreateInstanceWithColor(color, &__result);
        return WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush(consuming: __result);
    }
} // ISolidColorBrushFactory


// type: Microsoft.UI.Xaml.Media.SolidColorBrush
// runtime class
public class SolidColorBrush
    :
    Microsoft.UI.Xaml.Media.Brush
{
    private var _self : WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush;
    internal init(plok: WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush?) throws {
        _self = plok!
        try super.init(plok: _self.QueryInterface())
    }
    internal func Interface() -> WinRT.Microsoft.UI.Xaml.Media.ISolidColorBrush { return _self; }
    public init(color : WinRT.Windows.UI.Color) throws {
        let _af : ISolidColorBrushFactory = try RoGetActivationFactory(HString("Microsoft.UI.Xaml.Media.SolidColorBrush"));
        _self = try _af.CreateInstanceWithColor(color: color)!;
        try super.init(plok: _self.QueryInterface())
    }
    public init() throws {
        let _classId = try HString("Microsoft.UI.Xaml.Media.SolidColorBrush")
        _self = try RoActivateInstance(_classId)
        try super.init(plok: _self.QueryInterface())
    }
    // static interface not needed: Microsoft.UI.Xaml.Media.ISolidColorBrushStatics
    // method not needed: get_Color
    // method not needed: put_Color
}

}
